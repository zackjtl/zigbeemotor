cscope 15 F:\Texas Instruments\ZStack-CC2530-2.5.1a"               0002629038
	@Components/hal/common/hal_assert.c

45 
	~"hÆ_as£π.h
"

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_bﬂrd.h
"

48 
	~"hÆ_defs.h
"

49 
	~"hÆ_mcu.h
"

51 #i‡(
deföed
 
HAL_MCU_AVR
Ë|| (deföed 
HAL_MCU_CC2430
Ë|| (deföed 
HAL_MCU_CC2530
) || \

52 (
deföed
 
	gHAL_MCU_CC2533
Ë|| (deföed 
	gHAL_MCU_MSP430
)

54 
	~"mac_rx.h
"

55 
	~"mac_tx.h
"

62 
hÆAs£πHaz¨dLights
();

75 
	$hÆAs£πH™dÀr
()

78 #ifde‡
ASSERT_RESET


79 
	`HAL_SYSTEM_RESET
();

80 #ñi‡!
deföed
 
ASSERT_WHILE


81 
	`hÆAs£πHaz¨dLights
();

85 
	}
}

87 #i‡!
deföed
 
ASSERT_WHILE


98 
	$hÆAs£πHaz¨dLights
()

102 
DEBUG_DATA_RSTACK_HIGH_OFS
,

103 
DEBUG_DATA_RSTACK_LOW_OFS
,

104 
DEBUG_DATA_TX_ACTIVE_OFS
,

105 
DEBUG_DATA_RX_ACTIVE_OFS
,

107 #i‡(
deföed
 
HAL_MCU_AVR
Ë|| (deföed 
HAL_MCU_CC2430
)

108 
DEBUG_DATA_INT_MASK_OFS
,

109 #ñi‡(
deföed
 
HAL_MCU_CC2530
Ë|| (deföed 
HAL_MCU_CC2533
)

110 
DEBUG_DATA_INT_MASK0_OFS
,

111 
DEBUG_DATA_INT_MASK1_OFS
,

114 
DEBUG_DATA_SIZE


117 
uöt8
 
buâ⁄Hñd
;

118 
uöt8
 
debugD©a
[
DEBUG_DATA_SIZE
];

121 
	`HAL_DISABLE_INTERRUPTS
();

126 
	`HAL_BOARD_INIT
();

128 
	`HAL_TURN_OFF_LED1
();

129 
	`HAL_TURN_OFF_LED2
();

130 
	`HAL_TURN_OFF_LED3
();

131 
	`HAL_TURN_OFF_LED4
();

138 
buâ⁄Hñd
 = 0;

145 
	`HAL_LED_BLINK_DELAY
();

148 #i‡(
HAL_NUM_LEDS
 >= 1)

149 
	`HAL_TOGGLE_LED1
();

150 #i‡(
HAL_NUM_LEDS
 >= 2)

151 
	`HAL_TOGGLE_LED2
();

152 #i‡(
HAL_NUM_LEDS
 >= 3)

153 
	`HAL_TOGGLE_LED3
();

154 #i‡(
HAL_NUM_LEDS
 >= 4)

155 
	`HAL_TOGGLE_LED4
();

163 
uöt8
 
esˇ≥
 = 0;

164 i‡(
esˇ≥
)

166 
esˇ≥
 = 0;

172 i‡(
	`HAL_PUSH_BUTTON1
())

174 
buâ⁄Hñd
++;

178 
buâ⁄Hñd
 = 0;

181 
buâ⁄Hñd
 != 10);

188 
	`HAL_TURN_OFF_LED1
();

189 
	`HAL_TURN_OFF_LED2
();

190 
	`HAL_TURN_OFF_LED3
();

191 
	`HAL_TURN_OFF_LED4
();

194 
	`HAL_DEBOUNCE
(!
	`HAL_PUSH_BUTTON1
());

199 #ifde‡
HAL_MCU_AVR


201 
uöt8
 * 
pSèck
;

202 
pSèck
 = (
uöt8
 *Ë
SP
;

203 
pSèck
++;

204 
debugD©a
[
DEBUG_DATA_RSTACK_HIGH_OFS
] = *
pSèck
;

205 
pSèck
++;

206 
debugD©a
[
DEBUG_DATA_RSTACK_LOW_OFS
] = *
pSèck
;

208 
debugD©a
[
DEBUG_DATA_INT_MASK_OFS
] = 
EIMSK
;

211 #i‡(
deföed
 
HAL_MCU_CC2430
)

212 
debugD©a
[
DEBUG_DATA_INT_MASK_OFS
] = 
RFIM
;

213 #ñi‡(
deföed
 
HAL_MCU_CC2530
Ë|| (deföed 
HAL_MCU_CC2533
)

214 
debugD©a
[
DEBUG_DATA_INT_MASK0_OFS
] = 
RFIRQM0
;

215 
debugD©a
[
DEBUG_DATA_INT_MASK1_OFS
] = 
RFIRQM1
;

219 #i‡(
deföed
 
HAL_MCU_AVR
Ë|| (deföed 
HAL_MCU_CC2430
Ë|| (deföed 
HAL_MCU_CC2530
) || \

220 (
deföed
 
HAL_MCU_CC2533
Ë|| (deföed 
HAL_MCU_MSP430
)

221 
debugD©a
[
DEBUG_DATA_TX_ACTIVE_OFS
] = 
macTxA˘ive
;

222 
debugD©a
[
DEBUG_DATA_RX_ACTIVE_OFS
] = 
macRxA˘ive
;

227 
uöt8
 
iBô
;

228 
uöt8
 
iByã
;

230 
iBô
 = 0;

231 
iByã
 = 0;

236 
iByã
 < 
DEBUG_DATA_SIZE
)

239 !
	`HAL_PUSH_BUTTON1
());

242 
	`HAL_TURN_ON_LED1
();

243 
	`HAL_TURN_ON_LED2
();

244 
	`HAL_TURN_ON_LED3
();

245 i‡(
iBô
 == 0)

247 
	`HAL_TURN_ON_LED4
();

251 
	`HAL_TURN_OFF_LED4
();

255 
	`HAL_DEBOUNCE
(!
	`HAL_PUSH_BUTTON1
());

258 
	`HAL_TURN_OFF_LED1
();

259 
	`HAL_TURN_OFF_LED2
();

260 
	`HAL_TURN_OFF_LED3
();

261 
	`HAL_TURN_OFF_LED4
();

264 i‡(
debugD©a
[
iByã
] & (1 << (7 - 
iBô
)))

266 
	`HAL_TURN_ON_LED1
();

270 
	`HAL_TURN_OFF_LED1
();

274 
iBô
++;

275 i‡(
iBô
 == 8)

277 
iBô
 = 0;

278 
iByã
++;

288 
	`HAL_TURN_OFF_LED1
();

290 
	}
}

299 
HAL_ASSERT_SIZE
–
öt8
, 1);

300 
HAL_ASSERT_SIZE
–
uöt8
, 1);

301 
HAL_ASSERT_SIZE
–
öt16
, 2);

302 
HAL_ASSERT_SIZE
(
uöt16
, 2);

303 
HAL_ASSERT_SIZE
–
öt32
, 4);

304 
HAL_ASSERT_SIZE
(
uöt32
, 4);

	@Components/hal/common/hal_drivers.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"OSAL.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"hÆ_adc.h
"

48 #i‡(
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
)

49 
	~"hÆ_dma.h
"

51 
	~"hÆ_key.h
"

52 
	~"hÆ_lcd.h
"

53 
	~"hÆ_Àd.h
"

54 
	~"hÆ_timî.h
"

55 
	~"hÆ_u¨t.h
"

56 
	~"hÆ_¶ìp.h
"

57 #i‡(
deföed
 
HAL_AES
Ë&& (HAL_AES =
TRUE
)

58 
	~"hÆ_´s.h
"

61 #i‡(
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)

62 
	~"hÆ_•i.h
"

64 #i‡(
deföed
 
HAL_HID
Ë&& (HAL_HID =
TRUE
)

65 
	~"usb_hid.h
"

68 #ifde‡
CC2591_COMPRESSION_WORKAROUND


69 
	~"mac_rx.h
"

91 
uöt8
 
	gHÆ_TaskID
;

93 
HÆLedUpd©e
( );

108 
	$HÆ_Inô
–
uöt8
 
èsk_id
 )

111 
HÆ_TaskID
 = 
èsk_id
;

113 #ifde‡
CC2591_COMPRESSION_WORKAROUND


114 
	`oßl_°¨t_ªlﬂd_timî
–
HÆ_TaskID
, 
PERIOD_RSSI_RESET_EVT
, 
PERIOD_RSSI_RESET_TIMEOUT
 );

116 
	}
}

127 
	$HÆDrivîInô
 ()

130 #i‡(
deföed
 
HAL_TIMER
Ë&& (HAL_TIMER =
TRUE
)

135 #i‡(
deföed
 
HAL_ADC
Ë&& (HAL_ADC =
TRUE
)

136 
	`HÆAdcInô
();

140 #i‡(
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
)

142 
	`HÆDmaInô
();

146 #i‡(
deföed
 
HAL_AES
Ë&& (HAL_AES =
TRUE
)

147 
	`HÆAesInô
();

151 #i‡(
deföed
 
HAL_LCD
Ë&& (HAL_LCD =
TRUE
)

152 
	`HÆLcdInô
();

156 #i‡(
deföed
 
HAL_LED
Ë&& (HAL_LED =
TRUE
)

157 
	`HÆLedInô
();

161 #i‡(
deföed
 
HAL_UART
Ë&& (HAL_UART =
TRUE
)

162 
	`HÆUARTInô
();

166 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

167 
	`HÆKeyInô
();

171 #i‡(
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)

172 
	`HÆSpiInô
();

176 #i‡(
deföed
 
HAL_HID
Ë&& (HAL_HID =
TRUE
)

177 
	`usbHidInô
();

179 
	}
}

192 
uöt16
 
	$HÆ_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

194 
uöt8
 *
msgPå
;

196 ()
èsk_id
;

198 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

200 
msgPå
 = 
	`oßl_msg_ª˚ive
(
HÆ_TaskID
);

202 
msgPå
)

207 
	`oßl_msg_dóŒoˇã
–
msgPå
 );

209 
msgPå
 = 
	`oßl_msg_ª˚ive
–
HÆ_TaskID
 );

211  
evíts
 ^ 
SYS_EVENT_MSG
;

214 i‡–
evíts
 & 
HAL_LED_BLINK_EVENT
 )

216 #i‡(
	`deföed
 (
BLINK_LEDS
)Ë&& (
HAL_LED
 =
TRUE
)

217 
	`HÆLedUpd©e
();

219  
evíts
 ^ 
HAL_LED_BLINK_EVENT
;

222 i‡(
evíts
 & 
HAL_KEY_EVENT
)

225 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

227 
	`HÆKeyPﬁl
();

230 i‡(!
HÆ_KeyI¡E«bÀ
)

232 
	`oßl_°¨t_timîEx
–
HÆ_TaskID
, 
HAL_KEY_EVENT
, 100);

236  
evíts
 ^ 
HAL_KEY_EVENT
;

239 #ifde‡
POWER_SAVING


240 i‡–
evíts
 & 
HAL_SLEEP_TIMER_EVENT
 )

242 
	`hÆRe°‹eSÀïLevñ
();

243  
evíts
 ^ 
HAL_SLEEP_TIMER_EVENT
;

247 #ifde‡
CC2591_COMPRESSION_WORKAROUND


248 i‡–
evíts
 & 
PERIOD_RSSI_RESET_EVT
 )

250 
	`macRxRe£tRssi
();

251  (
evíts
 ^ 
PERIOD_RSSI_RESET_EVT
);

258 
	}
}

269 
	$HÆ_Pro˚ssPﬁl
 ()

273 #i‡(
deföed
 
HAL_TIMER
Ë&& (HAL_TIMER =
TRUE
)

278 #i‡(
deföed
 
HAL_UART
Ë&& (HAL_UART =
TRUE
)

279 
	`HÆUARTPﬁl
();

283 #i‡(
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)

284 
	`HÆSpiPﬁl
();

288 #i‡(
deföed
 
HAL_HID
Ë&& (HAL_HID =
TRUE
)

289 
	`usbHidPro˚ssEvíts
();

292 #i‡
	`deföed
–
POWER_SAVING
 )

294 
	`ALLOW_SLEEP_MODE
();

297 
	}
}

	@Components/hal/include/hal_adc.h

40 #i‚de‡
HAL_ADC_H


41 
	#HAL_ADC_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_bﬂrd.h
"

58 
	#HAL_ADC_RESOLUTION_8
 0x01

	)

59 
	#HAL_ADC_RESOLUTION_10
 0x02

	)

60 
	#HAL_ADC_RESOLUTION_12
 0x03

	)

61 
	#HAL_ADC_RESOLUTION_14
 0x04

	)

64 
	#HAL_ADC_CHANNEL_0
 0x00

	)

65 
	#HAL_ADC_CHANNEL_1
 0x01

	)

66 
	#HAL_ADC_CHANNEL_2
 0x02

	)

67 
	#HAL_ADC_CHANNEL_3
 0x03

	)

68 
	#HAL_ADC_CHANNEL_4
 0x04

	)

69 
	#HAL_ADC_CHANNEL_5
 0x05

	)

70 
	#HAL_ADC_CHANNEL_6
 0x06

	)

71 
	#HAL_ADC_CHANNEL_7
 0x07

	)

73 
	#HAL_ADC_CHN_AIN0
 0x00

	)

74 
	#HAL_ADC_CHN_AIN1
 0x01

	)

75 
	#HAL_ADC_CHN_AIN2
 0x02

	)

76 
	#HAL_ADC_CHN_AIN3
 0x03

	)

77 
	#HAL_ADC_CHN_AIN4
 0x04

	)

78 
	#HAL_ADC_CHN_AIN5
 0x05

	)

79 
	#HAL_ADC_CHN_AIN6
 0x06

	)

80 
	#HAL_ADC_CHN_AIN7
 0x07

	)

81 
	#HAL_ADC_CHN_A0A1
 0x08

	)

82 
	#HAL_ADC_CHN_A2A3
 0x09

	)

83 
	#HAL_ADC_CHN_A4A5
 0x0®

	)

84 
	#HAL_ADC_CHN_A6A7
 0x0b

	)

85 
	#HAL_ADC_CHN_GND
 0x0¯

	)

86 
	#HAL_ADC_CHN_VREF
 0x0d

	)

87 
	#HAL_ADC_CHN_TEMP
 0x0ê

	)

88 
	#HAL_ADC_CHN_VDD3
 0x0‡

	)

89 
	#HAL_ADC_CHN_BITS
 0x0‡

	)

91 
	#HAL_ADC_CHANNEL_TEMP
 
HAL_ADC_CHN_TEMP


	)

92 
	#HAL_ADC_CHANNEL_VDD
 
HAL_ADC_CHN_VDD3


	)

95 
	#HAL_ADC_VDD_LIMIT_0
 0x00

	)

96 
	#HAL_ADC_VDD_LIMIT_1
 0x01

	)

97 
	#HAL_ADC_VDD_LIMIT_2
 0x02

	)

98 
	#HAL_ADC_VDD_LIMIT_3
 0x03

	)

99 
	#HAL_ADC_VDD_LIMIT_4
 0x04

	)

100 
	#HAL_ADC_VDD_LIMIT_5
 0x05

	)

101 
	#HAL_ADC_VDD_LIMIT_6
 0x06

	)

102 
	#HAL_ADC_VDD_LIMIT_7
 0x07

	)

105 
	#HAL_ADC_REF_125V
 0x00

	)

106 
	#HAL_ADC_REF_AIN7
 0x40

	)

107 
	#HAL_ADC_REF_AVDD
 0x80

	)

108 
	#HAL_ADC_REF_DIFF
 0xc0

	)

109 
	#HAL_ADC_REF_BITS
 0xc0

	)

118 
HÆAdcInô
 ( );

123 
uöt16
 
HÆAdcRód
 ( 
uöt8
 
ch™√l
, uöt8 
ªsﬁuti⁄
 );

128 
HÆAdcSëRe„ªn˚
 ( 
uöt8
 
ª„ªn˚
 );

133 
boﬁ
 
HÆAdcCheckVdd
(
uöt8
 
vdd
);

138 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_assert.h

40 #i‚de‡
HAL_ASSERT_H


41 
	#HAL_ASSERT_H


	)

67 #ifde‡
HALNODEBUG


68 
	#HAL_ASSERT
(
ex¥
)

	)

69 
	#HAL_ASSERT_FORCED
()

	)

70 
	#HAL_ASSERT_STATEMENT
(
°©emít
)

	)

71 
	#HAL_ASSERT_DECLARATION
(
de˛¨©i⁄
)

	)

73 
	#HAL_ASSERT
(
ex¥
Ë
	`°
–i‡(!–ex¥ )Ë
	`hÆAs£πH™dÀr
(); )

	)

74 
	#HAL_ASSERT_FORCED
(Ë
	`hÆAs£πH™dÀr
()

	)

75 
	#HAL_ASSERT_STATEMENT
(
°©emít
Ë
	`°
–°©emíà)

	)

76 
	#HAL_ASSERT_DECLARATION
(
de˛¨©i⁄
Ë
	)
de˛¨©i⁄

91 
	#HAL_ASSERT_SIZE
(
x
,
y
Ë
	tx
 ## 
	t_as£π_size_t
[-1+10*((xË=(y))]

	)

98 
	thÆAs£πH™dÀr
();

109 
hÆAs£πHaz¨dLights
();

	@Components/hal/include/hal_board.h

1 
	~"hÆ_bﬂrd_cfg.h
"

	@Components/hal/include/hal_ccm.h

40 #i‚de‡ 
HAL_CCM_H_


41 
	#HAL_CCM_H_


	)

43 
Sètus_t
 
SSP_CCM_Auth
 (
uöt8
, uöt8 *, uöt8 *, 
uöt16
, uint8 *, uint16, uint8 *, uint8 *);

44 
Sètus_t
 
SSP_CCM_En¸y±
 (
uöt8
, uöt8 *, uöt8 *, 
uöt16
, uint8 *, uint8 *);

45 
Sètus_t
 
SSP_CCM_De¸y±
 (
uöt8
, uöt8 *, uöt8 *, 
uöt16
, uint8 *, uint8 *);

46 
Sètus_t
 
SSP_CCM_InvAuth
 (
uöt8
, uöt8 *, uöt8 *, 
uöt16
, uint8 *, uint16, uint8 *, uint8 *);

	@Components/hal/include/hal_defs.h

40 #i‚de‡
HAL_DEFS_H


41 
	#HAL_DEFS_H


	)

49 #i‚de‡
BV


50 
	#BV
(
n
Ë(1 << (n))

	)

53 #i‚de‡
BF


54 
	#BF
(
x
,
b
,
s
Ë(((xË& (b)Ë>> (s))

	)

57 #i‚de‡
MIN


58 
	#MIN
(
n
,
m
Ë((“Ë< (m)Ë? (nË: (m))

	)

61 #i‚de‡
MAX


62 
	#MAX
(
n
,
m
Ë((“Ë< (m)Ë? (mË: (n))

	)

65 #i‚de‡
ABS


66 
	#ABS
(
n
Ë((“Ë< 0Ë? -“Ë: (n))

	)

71 
	#BREAK_UINT32
–
v¨
, 
ByãNum
 ) \

72 (
uöt8
)((
uöt32
)(((
v¨
Ë>>((
ByãNum
Ë* 8)Ë& 0x00FF))

	)

74 
	#BUILD_UINT32
(
Byã0
, 
Byã1
, 
Byã2
, 
Byã3
) \

75 ((
uöt32
)((uöt32)((
Byã0
) & 0x00FF) \

76 + ((
uöt32
)((
Byã1
) & 0x00FF) << 8) \

77 + ((
uöt32
)((
Byã2
) & 0x00FF) << 16) \

78 + ((
uöt32
)((
Byã3
Ë& 0x00FFË<< 24)))

	)

80 
	#BUILD_UINT16
(
loByã
, 
hiByã
) \

81 ((
uöt16
)(((
loByã
Ë& 0x00FFË+ (((
hiByã
Ë& 0x00FFË<< 8)))

	)

83 
	#HI_UINT16
(
a
Ë((◊Ë>> 8Ë& 0xFF)

	)

84 
	#LO_UINT16
(
a
Ë(◊Ë& 0xFF)

	)

86 
	#BUILD_UINT8
(
hiByã
, 
loByã
) \

87 ((
uöt8
)(((
loByã
Ë& 0x0FË+ (((
hiByã
Ë& 0x0FË<< 4)))

	)

89 
	#HI_UINT8
(
a
Ë((◊Ë>> 4Ë& 0x0F)

	)

90 
	#LO_UINT8
(
a
Ë(◊Ë& 0x0F)

	)

115 
	#°
(
x
Ëdÿ{ x } 
__LINE__
 =-1)

	)

	@Components/hal/include/hal_drivers.h

40 #i‚de‡
HAL_DRIVER_H


41 
	#HAL_DRIVER_H


	)

43 #ifde‡
__˝lu•lus


62 
	#HAL_KEY_EVENT
 0x0001

	)

63 
	#HAL_LED_BLINK_EVENT
 0x0002

	)

64 
	#HAL_SLEEP_TIMER_EVENT
 0x0004

	)

65 
	#PERIOD_RSSI_RESET_EVT
 0x0008

	)

67 
	#PERIOD_RSSI_RESET_TIMEOUT
 10

	)

77 
uöt8
 
HÆ_TaskID
;

86 
HÆ_Inô
 ( 
uöt8
 
èsk_id
 );

91 
uöt16
 
HÆ_Pro˚ssEvít
 ( 
uöt8
 
èsk_id
, uöt16 
evíts
 );

96 
HÆ_Pro˚ssPﬁl
 ();

101 
HÆDrivîInô
 ();

106 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_flash.h

40 #i‚de‡
HAL_FLASH_H


41 
	#HAL_FLASH_H


	)

43 #ifde‡
__˝lu•lus


53 
	~"hÆ_bﬂrd.h
"

54 
	~"hÆ_ty≥s.h
"

75 
HÆFœshRód
(
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
, uöt16 
˙t
);

95 
HÆFœshWrôe
(
uöt16
 
addr
, 
uöt8
 *
buf
, uöt16 
˙t
);

113 
HÆFœshEø£
(
uöt8
 
pg
);

115 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_key.h

40 #i‚de‡
HAL_KEY_H


41 
	#HAL_KEY_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_bﬂrd.h
"

62 
	#HAL_KEY_INTERRUPT_DISABLE
 0x00

	)

63 
	#HAL_KEY_INTERRUPT_ENABLE
 0x01

	)

66 
	#HAL_KEY_STATE_NORMAL
 0x00

	)

67 
	#HAL_KEY_STATE_SHIFT
 0x01

	)

70 
	#HAL_KEY_SW_1
 0x01

71 
	#HAL_KEY_SW_2
 0x02

72 
	#HAL_KEY_SW_5
 0x04

73 
	#HAL_KEY_SW_4
 0x08

74 
	#HAL_KEY_SW_3
 0x10

75 
	#HAL_KEY_SW_6
 0x20

76 
	#HAL_KEY_SW_7
 0x40

77 

	)

79 
	#HAL_KEY_UP
 0x01

80 
	#HAL_KEY_RIGHT
 0x02

81 
	#HAL_KEY_CENTER
 0x04

82 
	#HAL_KEY_LEFT
 0x08

83 
	#HAL_KEY_DOWN
 0x10

84 

	)

88 (*
hÆKeyCBack_t
Ë(
	tuöt8
 
	tkeys
, uöt8 
	t°©e
);

93 
boﬁ
 
HÆ_KeyI¡E«bÀ
;

102 
HÆKeyInô
( );

107 
HÆKeyC⁄fig
–
boﬁ
 
öãºu±E«bÀ
, c⁄° 
hÆKeyCBack_t
 
cback
);

112 
uöt8
 
HÆKeyRód
( );

117 
HÆKeyE¡îSÀï
 ( );

122 
uöt8
 
HÆKeyExôSÀï
 ( );

127 
HÆKeyPﬁl
 ( );

132 
boﬁ
 
HÆKeyPªs£d
( );

137 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_lcd.h

40 #i‚de‡
HAL_LCD_H


41 
	#HAL_LCD_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_bﬂrd.h
"

58 
	#HAL_LCD_LINE_1
 0x01

	)

59 
	#HAL_LCD_LINE_2
 0x02

	)

64 
	#HAL_LCD_LINE_3
 0x03

	)

65 
	#HAL_LCD_LINE_4
 0x04

	)

66 
	#HAL_LCD_LINE_5
 0x05

	)

67 
	#HAL_LCD_LINE_6
 0x06

	)

68 
	#HAL_LCD_LINE_7
 0x07

	)

69 
	#HAL_LCD_LINE_8
 0x08

	)

72 
	#HAL_LCD_MAX_CHARS
 16

	)

73 
	#HAL_LCD_MAX_BUFF
 25

	)

97 
HÆLcdInô
();

102 
HÆLcdWrôeSåög
 ( *
°r
, 
uöt8
 
›ti⁄
);

107 
HÆLcdWrôeVÆue
 ( 
uöt32
 
vÆue
, c⁄° 
uöt8
 
ødix
, uöt8 
›ti⁄
);

112 
HÆLcdWrôeS¸ìn
–*
löe1
, *
löe2
 );

117 
HÆLcdWrôeSåögVÆue
–*
tôÀ
, 
uöt16
 
vÆue
, 
uöt8
 
f‹m©
, uöt8 
löe
 );

122 
HÆLcdWrôeSåögVÆueVÆue
–*
tôÀ
, 
uöt16
 
vÆue1
, 
uöt8
 
f‹m©1
, uöt16 
vÆue2
, uöt8 
f‹m©2
, uöt8 
löe
 );

127 
HÆLcdDi•œyPî˚¡B¨
–*
tôÀ
, 
uöt8
 
vÆue
 );

133 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_led.h

40 #i‚de‡
HAL_LED_H


41 
	#HAL_LED_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_bﬂrd.h
"

62 
	#HAL_LED_1
 0x01

	)

63 
	#HAL_LED_2
 0x02

	)

64 
	#HAL_LED_3
 0x04

	)

65 
	#HAL_LED_4
 0x08

	)

66 
	#HAL_LED_ALL
 (
HAL_LED_1
 | 
HAL_LED_2
 | 
HAL_LED_3
 | 
HAL_LED_4
)

	)

69 
	#HAL_LED_MODE_OFF
 0x00

	)

70 
	#HAL_LED_MODE_ON
 0x01

	)

71 
	#HAL_LED_MODE_BLINK
 0x02

	)

72 
	#HAL_LED_MODE_FLASH
 0x04

	)

73 
	#HAL_LED_MODE_TOGGLE
 0x08

	)

76 
	#HAL_LED_DEFAULT_MAX_LEDS
 4

	)

77 
	#HAL_LED_DEFAULT_DUTY_CYCLE
 5

	)

78 
	#HAL_LED_DEFAULT_FLASH_COUNT
 50

	)

79 
	#HAL_LED_DEFAULT_FLASH_TIME
 1000

	)

93 
HÆLedInô
( );

98 
uöt8
 
HÆLedSë
–uöt8 
Àd
, uöt8 
mode
 );

103 
HÆLedBlök
–
uöt8
 
Àds
, uöt8 
˙t
, uöt8 
duty
, 
uöt16
 
time
 );

108 
HÆLedE¡îSÀï
( );

113 
HÆLedExôSÀï
( );

118 
uöt8
 
HÆLedGëSèã
 ( );

123 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_sleep.h

40 #i‚de‡
HAL_SLEEP_H


41 
	#HAL_SLEEP_H


	)

43 #ifde‡
__˝lu•lus


55 
hÆSÀï
–
uöt16
 
oßl_timî
 );

60 
hÆSÀïWaô
(
uöt16
 
duøti⁄
);

65 
hÆRe°‹eSÀïLevñ
( );

70 
hÆSÀïExô
();

75 
hÆSëMaxSÀïLo›Time
(
uöt32
 
rﬁlovîTime
);

80 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_timer.h

40 #i‚de‡
HAL_TIMER_H


41 
	#HAL_TIMER_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_bﬂrd.h
"

63 
	#HAL_TIMER_0
 0x00

64 
	#HAL_TIMER_1
 0x01

65 
	#HAL_TIMER_2
 0x02

66 
	#HAL_TIMER_3
 0x03

67 
	#HAL_TIMER_MAX
 4

68 

	)

70 
	#HAL_TIMER_MODE_NORMAL
 0x01

71 
	#HAL_TIMER_MODE_CTC
 0x02

72 
	#HAL_TIMER_MODE_MASK
 (
HAL_TIMER_MODE_NORMAL
 | 
HAL_TIMER_MODE_CTC
)

	)

75 
	#HAL_TIMER_CHANNEL_SINGLE
 0x01

76 
	#HAL_TIMER_CHANNEL_A
 0x02

77 
	#HAL_TIMER_CHANNEL_B
 0x04

78 
	#HAL_TIMER_CHANNEL_C
 0x08

79 
	#HAL_TIMER_CHANNEL_MASK
 (
HAL_TIMER_CHANNEL_SINGLE
 | \

80 
HAL_TIMER_CHANNEL_A
 | \

81 
HAL_TIMER_CHANNEL_B
 | \

82 
HAL_TIMER_CHANNEL_C
)

	)

85 
	#HAL_TIMER_CH_MODE_INPUT_CAPTURE
 0x01

86 
	#HAL_TIMER_CH_MODE_OUTPUT_COMPARE
 0x02

87 
	#HAL_TIMER_CH_MODE_OVERFLOW
 0x04

88 
	#HAL_TIMER_CH_MODE_MASK
 (
HAL_TIMER_CH_MODE_INPUT_CAPTURE
 | \

89 
HAL_TIMER_CH_MODE_OUTPUT_COMPARE
 | \

90 
HAL_TIMER_CH_MODE_OVERFLOW
)

	)

93 
	#HAL_TIMER_OK
 0x00

	)

94 
	#HAL_TIMER_NOT_OK
 0x01

	)

95 
	#HAL_TIMER_PARAMS_ERROR
 0x02

	)

96 
	#HAL_TIMER_NOT_CONFIGURED
 0x03

	)

97 
	#HAL_TIMER_INVALID_ID
 0x04

	)

98 
	#HAL_TIMER_INVALID_CH_MODE
 0x05

	)

99 
	#HAL_TIMER_INVALID_OP_MODE
 0x06

	)

102 
	#HAL_TIMER3_16_TC_STOP
 0x00

103 
	#HAL_TIMER3_16_TC_DIV1
 0x01

104 
	#HAL_TIMER3_16_TC_DIV8
 0x02

105 
	#HAL_TIMER3_16_TC_DIV64
 0x03

106 
	#HAL_TIMER3_16_TC_DIV256
 0x04

107 
	#HAL_TIMER3_16_TC_DIV1024
 0x05

108 
	#HAL_TIMER3_16_TC_EXTFE
 0x06

109 
	#HAL_TIMER3_16_TC_EXTRE
 0x07

110 

	)

112 
	#HAL_TIMER0_8_TC_STOP
 0x00

113 
	#HAL_TIMER0_8_TC_DIV1
 0x01

114 
	#HAL_TIMER0_8_TC_DIV8
 0x02

115 
	#HAL_TIMER0_8_TC_DIV32
 0x03

116 
	#HAL_TIMER0_8_TC_DIV64
 0x04

117 
	#HAL_TIMER0_8_TC_DIV128
 0x05

118 
	#HAL_TIMER0_8_TC_DIV256
 0x06

119 
	#HAL_TIMER0_8_TC_DIV1024
 0x07

120 

	)

122 
	#HAL_TIMER2_8_TC_STOP
 0x00

123 
	#HAL_TIMER2_8_TC_DIV1
 0x01

124 
	#HAL_TIMER2_8_TC_DIV8
 0x02

125 
	#HAL_TIMER2_8_TC_DIV64
 0x03

126 
	#HAL_TIMER2_8_TC_DIV256
 0x04

127 
	#HAL_TIMER2_8_TC_DIV1024
 0x05

128 
	#HAL_TIMER2_8_TC_EXTFE
 0x06

129 
	#HAL_TIMER2_8_TC_EXTRE
 0x07

130 

	)

135 (*
hÆTimîCBack_t
Ë(
	tuöt8
 
	ttimîId
, uöt8 
	tch™√l
, uöt8 
	tch™√lMode
);

149 
HÆTimîInô
 ( );

154 
uöt8
 
HÆTimîC⁄fig
 ( uöt8 
timîId
,

155 
uöt8
 
›Mode
,

156 
uöt8
 
ch™√l
,

157 
uöt8
 
ch™√lMode
,

158 
boﬁ
 
ötE«bÀ
,

159 
hÆTimîCBack_t
 
cback
 );

164 
uöt8
 
HÆTimîSèπ
 ( uöt8 
timîId
, 
uöt32
 
timePîTick
 );

169 
uöt8
 
HÆTimîSt›
 ( uöt8 
timîId
 );

175 
HÆTimîTick
 ( );

180 
uöt8
 
HÆTimîI¡îru±E«bÀ
 (uöt8 
timîId
, uöt8 
ch™√lMode
, 
boﬁ
 
íabÀ
);

186 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_uart.h

40 #i‚de‡
HAL_UART_H


41 
	#HAL_UART_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_bﬂrd.h
"

71 
	#HAL_UART_BR_9600
 0x00

	)

72 
	#HAL_UART_BR_19200
 0x01

	)

73 
	#HAL_UART_BR_38400
 0x02

	)

74 
	#HAL_UART_BR_57600
 0x03

	)

75 
	#HAL_UART_BR_115200
 0x04

	)

80 
	#HAL_UART_ONE_STOP_BIT
 0x00

	)

81 
	#HAL_UART_TWO_STOP_BITS
 0x01

	)

84 
	#HAL_UART_NO_PARITY
 0x00

	)

85 
	#HAL_UART_EVEN_PARITY
 0x01

	)

86 
	#HAL_UART_ODD_PARITY
 0x02

	)

89 
	#HAL_UART_8_BITS_PER_CHAR
 0x00

	)

90 
	#HAL_UART_9_BITS_PER_CHAR
 0x01

	)

93 
	#HAL_UART_FLOW_OFF
 0x00

	)

94 
	#HAL_UART_FLOW_ON
 0x01

	)

97 
	#HAL_UART_PORT_0
 0x00

	)

98 
	#HAL_UART_PORT_1
 0x01

	)

99 
	#HAL_UART_PORT_MAX
 0x02

	)

102 
	#HAL_UART_SUCCESS
 0x00

	)

103 
	#HAL_UART_UNCONFIGURED
 0x01

	)

104 
	#HAL_UART_NOT_SUPPORTED
 0x02

	)

105 
	#HAL_UART_MEM_FAIL
 0x03

	)

106 
	#HAL_UART_BAUDRATE_ERROR
 0x04

	)

109 
	#HAL_UART_RX_FULL
 0x01

	)

110 
	#HAL_UART_RX_ABOUT_FULL
 0x02

	)

111 
	#HAL_UART_RX_TIMEOUT
 0x04

	)

112 
	#HAL_UART_TX_FULL
 0x08

	)

113 
	#HAL_UART_TX_EMPTY
 0x10

	)

119 (*
hÆUARTCBack_t
Ë(
	tuöt8
 
	tp‹t
, uöt8 
	tevít
);

124 vﬁ©ûê
uöt16
 
buf„rHód
;

125 vﬁ©ûê
uöt16
 
buf„rTaû
;

126 
uöt16
 
maxBufSize
;

127 
uöt8
 *
pBuf„r
;

128 } 
	thÆUARTBufC⁄åﬁ_t
;

132 
boﬁ
 
c⁄figuªd
;

133 
uöt8
 
baudR©e
;

134 
boﬁ
 
ÊowC⁄åﬁ
;

135 
uöt16
 
ÊowC⁄åﬁThªshﬁd
;

136 
uöt8
 
idÀTimeout
;

137 
hÆUARTBufC⁄åﬁ_t
 
rx
;

138 
hÆUARTBufC⁄åﬁ_t
 
tx
;

139 
boﬁ
 
ötE«bÀ
;

140 
uöt32
 
rxChRvdTime
;

141 
hÆUARTCBack_t
 
ˇŒBackFunc
;

142 }
	thÆUARTCfg_t
;

146 
boﬁ
 
∑ømCTS
;

147 
boﬁ
 
∑ømRTS
;

148 
boﬁ
 
∑ømDSR
;

149 
boﬁ
 
∑ømDTR
;

150 
boﬁ
 
∑ømCD
;

151 
boﬁ
 
∑ømRI
;

152 
uöt16
 
baudR©e
;

153 
boﬁ
 
ÊowC⁄åﬁ
;

154 
boﬁ
 
ÊushC⁄åﬁ
;

155 }
	thÆUARTIo˘l_t
;

169 
HÆUARTInô
 ( );

174 
uöt8
 
HÆUARTO≥n
 ( uöt8 
p‹t
, 
hÆUARTCfg_t
 *
c⁄fig
 );

179 
HÆUARTClo£
 ( 
uöt8
 
p‹t
 );

184 
uöt16
 
HÆUARTRód
 ( 
uöt8
 
p‹t
, uöt8 *
pBuf„r
, uöt16 
Àngth
 );

189 
uöt16
 
HÆUARTWrôe
 ( 
uöt8
 
p‹t
, uöt8 *
pBuf„r
, uöt16 
Àngth
 );

194 
uöt8
 
HÆUARTIo˘l
 ( uöt8 
p‹t
, uöt8 
cmd
, 
hÆUARTIo˘l_t
 *
pIo˘l
 );

199 
HÆUARTPﬁl
( );

204 
uöt16
 
HÆ_UART_RxBufLí
 ( 
uöt8
 
p‹t
 );

209 
uöt16
 
HÆ_UART_TxBufLí
 ( 
uöt8
 
p‹t
 );

214 
HÆ_UART_FlowC⁄åﬁSë
 ( 
uöt8
 
p‹t
, 
boﬁ
 
°©us
 );

219 
uöt8
 
HÆUART_HW_Inô
(uöt8 
p‹t
);

224 
HÆUARTSu•íd
();

229 
HÆUARTResume
();

234 #ifde‡
__˝lu•lus


	@Components/hal/target/CC2530EB/_hal_uart_dma.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_as£π.h
"

46 
	~"hÆ_bﬂrd.h
"

47 
	~"hÆ_defs.h
"

48 
	~"hÆ_dma.h
"

49 
	~"hÆ_mcu.h
"

50 
	~"hÆ_u¨t.h
"

51 #i‡
deföed
 
MT_TASK


52 
	~"mt_u¨t.h
"

54 
	~"oßl.h
"

61 
	#HAL_UART_ASSERT
(
ex¥
)

	)

63 #i‡
deföed
 
HAL_BOARD_CC2430EB
 || deföed 
HAL_BOARD_CC2430DB
 || deföed 
HAL_BOARD_CC2430BB


64 
	#HAL_UART_DMA_NEW_RX_BYTE
(
IDX
Ë(
DMA_PAD
 =
	`LO_UINT16
(
dmaCfg
.
rxBuf
[(IDX)]))

	)

65 
	#HAL_UART_DMA_GET_RX_BYTE
(
IDX
Ë(
	`HI_UINT16
(
dmaCfg
.
rxBuf
[(IDX)]))

	)

66 
	#HAL_UART_DMA_CLR_RX_BYTE
(
IDX
Ë(
dmaCfg
.
rxBuf
[(IDX)] = 
	`BUILD_UINT16
((
DMA_PAD
 ^ 0xFF), 0))

	)

68 
	#HAL_UART_DMA_NEW_RX_BYTE
(
IDX
Ë(
DMA_PAD
 =
	`HI_UINT16
(
dmaCfg
.
rxBuf
[(IDX)]))

	)

69 
	#HAL_UART_DMA_GET_RX_BYTE
(
IDX
Ë(
	`LO_UINT16
(
dmaCfg
.
rxBuf
[(IDX)]))

	)

70 
	#HAL_UART_DMA_CLR_RX_BYTE
(
IDX
Ë(
dmaCfg
.
rxBuf
[(IDX)] = 
	`BUILD_UINT16
(0, (
DMA_PAD
 ^ 0xFF)))

	)

78 
	#CSR_MODE
 0x80

	)

79 
	#CSR_RE
 0x40

	)

80 
	#CSR_SLAVE
 0x20

	)

81 
	#CSR_FE
 0x10

	)

82 
	#CSR_ERR
 0x08

	)

83 
	#CSR_RX_BYTE
 0x04

	)

84 
	#CSR_TX_BYTE
 0x02

	)

85 
	#CSR_ACTIVE
 0x01

	)

88 
	#UCR_FLUSH
 0x80

	)

89 
	#UCR_FLOW
 0x40

	)

90 
	#UCR_D9
 0x20

	)

91 
	#UCR_BIT9
 0x10

	)

92 
	#UCR_PARITY
 0x08

	)

93 
	#UCR_SPB
 0x04

	)

94 
	#UCR_STOP
 0x02

	)

95 
	#UCR_START
 0x01

	)

97 
	#UTX0IE
 0x04

	)

98 
	#UTX1IE
 0x08

	)

100 
	#P2DIR_PRIPO
 0xC0

	)

103 #unde‡
PxOUT


104 #unde‡
PxDIR


105 #unde‡
PxSEL


106 #unde‡
UxCSR


107 #unde‡
UxUCR


108 #unde‡
UxDBUF


109 #unde‡
UxBAUD


110 #unde‡
UxGCR


111 #unde‡
URXxIE


112 #unde‡
URXxIF


113 #unde‡
UTXxIE


114 #unde‡
UTXxIF


115 #unde‡
HAL_UART_PERCFG_BIT


116 #unde‡
HAL_UART_Px_RTS


117 #unde‡
HAL_UART_Px_CTS


118 #unde‡
HAL_UART_Px_RX_TX


119 #i‡(
HAL_UART_DMA
 == 1)

120 
	#PxOUT
 
P0


	)

121 
	#PxIN
 
P0


	)

122 
	#PxDIR
 
P0DIR


	)

123 
	#PxSEL
 
P0SEL


	)

124 
	#UxCSR
 
U0CSR


	)

125 
	#UxUCR
 
U0UCR


	)

126 
	#UxDBUF
 
U0DBUF


	)

127 
	#UxBAUD
 
U0BAUD


	)

128 
	#UxGCR
 
U0GCR


	)

129 
	#URXxIE
 
URX0IE


	)

130 
	#URXxIF
 
URX0IF


	)

131 
	#UTXxIE
 
UTX0IE


	)

132 
	#UTXxIF
 
UTX0IF


	)

134 
	#PxOUT
 
P1


	)

135 
	#PxIN
 
P1


	)

136 
	#PxDIR
 
P1DIR


	)

137 
	#PxSEL
 
P1SEL


	)

138 
	#UxCSR
 
U1CSR


	)

139 
	#UxUCR
 
U1UCR


	)

140 
	#UxDBUF
 
U1DBUF


	)

141 
	#UxBAUD
 
U1BAUD


	)

142 
	#UxGCR
 
U1GCR


	)

143 
	#URXxIE
 
URX1IE


	)

144 
	#URXxIF
 
URX1IF


	)

145 
	#UTXxIE
 
UTX1IE


	)

146 
	#UTXxIF
 
UTX1IF


	)

149 #i‡(
HAL_UART_DMA
 == 1)

150 
	#HAL_UART_PERCFG_BIT
 0x01

151 
	#HAL_UART_Px_RX_TX
 0x0C

152 
	#HAL_UART_Px_RTS
 0x20

153 
	#HAL_UART_Px_CTS
 0x10

154 #ñ£

	)

155 
	#HAL_UART_PERCFG_BIT
 0x02

156 
	#HAL_UART_Px_RTS
 0x20

157 
	#HAL_UART_Px_CTS
 0x10

158 
	#HAL_UART_Px_RX_TX
 0xC0

160 

	)

162 
	#HAL_UART_MSECS_TO_TICKS
 33

	)

164 #i‡
deföed
 
MT_TASK


165 
	#HAL_UART_DMA_TX_MAX
 
MT_UART_DEFAULT_MAX_TX_BUFF


	)

166 
	#HAL_UART_DMA_RX_MAX
 
MT_UART_DEFAULT_MAX_RX_BUFF


	)

167 
	#HAL_UART_DMA_HIGH
 
MT_UART_DEFAULT_THRESHOLD


	)

168 
	#HAL_UART_DMA_IDLE
 (
MT_UART_DEFAULT_IDLE_TIMEOUT
 * 
HAL_UART_MSECS_TO_TICKS
)

	)

170 #i‡!
deföed
 
HAL_UART_DMA_RX_MAX


171 
	#HAL_UART_DMA_RX_MAX
 256

	)

173 #i‡!
deföed
 
HAL_UART_DMA_TX_MAX


174 
	#HAL_UART_DMA_TX_MAX
 
HAL_UART_DMA_RX_MAX


	)

176 #i‡!
deföed
 
HAL_UART_DMA_HIGH


177 
	#HAL_UART_DMA_HIGH
 (
HAL_UART_DMA_RX_MAX
 / 2 - 16)

	)

179 #i‡!
deföed
 
HAL_UART_DMA_IDLE


180 
	#HAL_UART_DMA_IDLE
 (1 * 
HAL_UART_MSECS_TO_TICKS
)

	)

183 #i‡!
deföed
 
HAL_UART_DMA_FULL


184 
	#HAL_UART_DMA_FULL
 (
HAL_UART_DMA_RX_MAX
 - 16)

	)

187 #i‡
deföed
 
HAL_BOARD_CC2430EB
 || deföed 
HAL_BOARD_CC2430DB
 || deföed 
HAL_BOARD_CC2430BB


188 
	#HAL_DMA_U0DBUF
 0xDFC1

	)

189 
	#HAL_DMA_U1DBUF
 0xDFF9

	)

191 
	#HAL_DMA_U0DBUF
 0x70C1

	)

192 
	#HAL_DMA_U1DBUF
 0x70F9

	)

195 #i‡(
HAL_UART_DMA
 == 1)

196 
	#DMATRIG_RX
 
HAL_DMA_TRIG_URX0


	)

197 
	#DMATRIG_TX
 
HAL_DMA_TRIG_UTX0


	)

198 
	#DMA_UDBUF
 
HAL_DMA_U0DBUF


	)

199 
	#DMA_PAD
 
U0BAUD


	)

201 
	#DMATRIG_RX
 
HAL_DMA_TRIG_URX1


	)

202 
	#DMATRIG_TX
 
HAL_DMA_TRIG_UTX1


	)

203 
	#DMA_UDBUF
 
HAL_DMA_U1DBUF


	)

204 
	#DMA_PAD
 
U1BAUD


	)

211 #i‡
HAL_UART_DMA_RX_MAX
 <= 256

212 
uöt8
 
	trxIdx_t
;

214 
uöt16
 
	trxIdx_t
;

217 #i‡
HAL_UART_DMA_TX_MAX
 <= 256

218 
uöt8
 
	ttxIdx_t
;

220 
uöt16
 
	ttxIdx_t
;

225 
uöt16
 
	mrxBuf
[
HAL_UART_DMA_RX_MAX
];

226 
rxIdx_t
 
	mrxHód
;

227 
rxIdx_t
 
	mrxTaû
;

228 
uöt8
 
	mrxTick
;

229 
uöt8
 
	mrxShdw
;

231 
uöt8
 
	mtxBuf
[2][
HAL_UART_DMA_TX_MAX
];

232 
txIdx_t
 
	mtxIdx
[2];

233 vﬁ©ûê
uöt8
 
	mtxSñ
;

234 
uöt8
 
	mtxMT
;

235 
uöt8
 
	mtxTick
;

240 vﬁ©ûê
uöt8
 
	mtxShdw
;

241 vﬁ©ûê
uöt8
 
	mtxShdwVÆid
;

242 
uöt8
 
	mtxDMAPídög
;

244 
hÆUARTCBack_t
 
	mu¨tCB
;

245 } 
	tu¨tDMACfg_t
;

255 
HÆUARTI§DMA
();

261 
u¨tDMACfg_t
 
	gdmaCfg
;

267 
rxIdx_t
 
födTaû
();

270 
HÆUARTInôDMA
();

271 
HÆUARTO≥nDMA
(
hÆUARTCfg_t
 *
c⁄fig
);

272 
uöt16
 
HÆUARTRódDMA
(
uöt8
 *
buf
, uöt16 
Àn
);

273 
uöt16
 
HÆUARTWrôeDMA
(
uöt8
 *
buf
, uöt16 
Àn
);

274 
HÆUARTPﬁlDMA
();

275 
uöt16
 
HÆUARTRxAvaûDMA
();

276 
HÆUARTSu•ídDMA
();

277 
HÆUARTResumeDMA
();

288 
rxIdx_t
 
	$födTaû
()

290 
rxIdx_t
 
idx
 = 
dmaCfg
.
rxHód
;

294 i‡(!
	`HAL_UART_DMA_NEW_RX_BYTE
(
idx
))

299 #i‡
HAL_UART_DMA_RX_MAX
 == 256

300 
idx
++;

302 i‡(++
idx
 >
HAL_UART_DMA_RX_MAX
)

304 
idx
 = 0;

307 } 
idx
 !
dmaCfg
.
rxHód
);

309  
idx
;

310 
	}
}

321 
	$HÆUARTInôDMA
()

323 
hÆDMADesc_t
 *
ch
;

325 
P2DIR
 &~
P2DIR_PRIPO
;

326 
P2DIR
 |
HAL_UART_PRIPO
;

328 #i‡(
HAL_UART_DMA
 == 1)

329 
PERCFG
 &~
HAL_UART_PERCFG_BIT
;

331 
PERCFG
 |
HAL_UART_PERCFG_BIT
;

333 
PxSEL
 |
HAL_UART_Px_RX_TX
;

334 
ADCCFG
 &~
HAL_UART_Px_RX_TX
;

335 
UxCSR
 = 
CSR_MODE
;

336 
UxUCR
 = 
UCR_FLUSH
;

339 
ch
 = 
	`HAL_DMA_GET_DESC1234
–
HAL_DMA_CH_TX
 );

342 
	`HAL_DMA_SET_DEST
–
ch
, 
DMA_UDBUF
 );

345 
	`HAL_DMA_SET_VLEN
–
ch
, 
HAL_DMA_VLEN_USE_LEN
 );

348 
	`HAL_DMA_SET_WORD_SIZE
–
ch
, 
HAL_DMA_WORDSIZE_BYTE
 );

351 
	`HAL_DMA_SET_TRIG_MODE
–
ch
, 
HAL_DMA_TMODE_SINGLE
 );

352 
	`HAL_DMA_SET_TRIG_SRC
–
ch
, 
DMATRIG_TX
 );

355 
	`HAL_DMA_SET_SRC_INC
–
ch
, 
HAL_DMA_SRCINC_1
 );

358 
	`HAL_DMA_SET_DST_INC
–
ch
, 
HAL_DMA_DSTINC_0
 );

361 
	`HAL_DMA_SET_IRQ
–
ch
, 
HAL_DMA_IRQMASK_ENABLE
 );

364 
	`HAL_DMA_SET_M8
–
ch
, 
HAL_DMA_M8_USE_8_BITS
 );

367 
	`HAL_DMA_SET_PRIORITY
–
ch
, 
HAL_DMA_PRI_HIGH
 );

370 
ch
 = 
	`HAL_DMA_GET_DESC1234
–
HAL_DMA_CH_RX
 );

373 
	`HAL_DMA_SET_SOURCE
–
ch
, 
DMA_UDBUF
 );

376 
	`HAL_DMA_SET_VLEN
–
ch
, 
HAL_DMA_VLEN_USE_LEN
 );

385 
	`HAL_DMA_SET_WORD_SIZE
–
ch
, 
HAL_DMA_WORDSIZE_WORD
 );

388 
	`HAL_DMA_SET_TRIG_MODE
–
ch
, 
HAL_DMA_TMODE_SINGLE_REPEATED
 );

389 
	`HAL_DMA_SET_TRIG_SRC
–
ch
, 
DMATRIG_RX
 );

392 
	`HAL_DMA_SET_SRC_INC
–
ch
, 
HAL_DMA_SRCINC_0
 );

395 
	`HAL_DMA_SET_DST_INC
–
ch
, 
HAL_DMA_DSTINC_1
 );

396 
	`HAL_DMA_SET_DEST
–
ch
, 
dmaCfg
.
rxBuf
 );

397 
	`HAL_DMA_SET_LEN
–
ch
, 
HAL_UART_DMA_RX_MAX
 );

400 
	`HAL_DMA_SET_IRQ
–
ch
, 
HAL_DMA_IRQMASK_DISABLE
 );

403 
	`HAL_DMA_SET_M8
–
ch
, 
HAL_DMA_M8_USE_8_BITS
 );

406 
	`HAL_DMA_SET_PRIORITY
–
ch
, 
HAL_DMA_PRI_HIGH
 );

407 
	}
}

418 
	$HÆUARTO≥nDMA
(
hÆUARTCfg_t
 *
c⁄fig
)

420 
dmaCfg
.
u¨tCB
 = 
c⁄fig
->
ˇŒBackFunc
;

422 
	`HAL_UART_ASSERT
((
c⁄fig
->
baudR©e
 =
HAL_UART_BR_9600
) ||

423 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_19200
) ||

424 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_38400
) ||

425 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
) ||

426 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
));

428 i‡(
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
 ||

429 
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
)

431 
UxBAUD
 = 216;

435 
UxBAUD
 = 59;

438 
c⁄fig
->
baudR©e
)

440 
HAL_UART_BR_9600
:

441 
UxGCR
 = 8;

442 
dmaCfg
.
txTick
 = 35;

445 
HAL_UART_BR_19200
:

446 
UxGCR
 = 9;

447 
dmaCfg
.
txTick
 = 18;

449 
HAL_UART_BR_38400
:

450 
UxGCR
 = 10;

451 
dmaCfg
.
txTick
 = 9;

453 
HAL_UART_BR_57600
:

454 
UxGCR
 = 10;

455 
dmaCfg
.
txTick
 = 6;

459 
UxGCR
 = 11;

460 
dmaCfg
.
txTick
 = 3;

465 i‡(
c⁄fig
->
ÊowC⁄åﬁ
)

467 
UxUCR
 = 
UCR_FLOW
 | 
UCR_STOP
;

468 
PxSEL
 |
HAL_UART_Px_CTS
;

471 
PxOUT
 &~
HAL_UART_Px_RTS
;

472 
PxDIR
 |
HAL_UART_Px_RTS
;

476 
UxUCR
 = 
UCR_STOP
;

479 
dmaCfg
.
rxBuf
[0] = *(vﬁ©ûê
uöt8
 *)
DMA_UDBUF
;

480 
	`HAL_DMA_CLEAR_IRQ
(
HAL_DMA_CH_RX
);

481 
	`HAL_DMA_ARM_CH
(
HAL_DMA_CH_RX
);

482 
	`oßl_mem£t
(
dmaCfg
.
rxBuf
, (
DMA_PAD
 ^ 0xFF), 
HAL_UART_DMA_RX_MAX
*2);

484 
UxCSR
 |
CSR_RE
;

487 
dmaCfg
.
txDMAPídög
 = 
FALSE
;

488 
dmaCfg
.
txShdwVÆid
 = 
FALSE
;

489 
	}
}

501 
uöt16
 
	$HÆUARTRódDMA
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

503 
uöt16
 
˙t
;

505 
˙t
 = 0; c¡ < 
Àn
; cnt++)

507 i‡(!
	`HAL_UART_DMA_NEW_RX_BYTE
(
dmaCfg
.
rxHód
))

511 *
buf
++ = 
	`HAL_UART_DMA_GET_RX_BYTE
(
dmaCfg
.
rxHód
);

512 
	`HAL_UART_DMA_CLR_RX_BYTE
(
dmaCfg
.
rxHód
);

513 #i‡
HAL_UART_DMA_RX_MAX
 == 256

514 (
dmaCfg
.
rxHód
)++;

516 i‡(++(
dmaCfg
.
rxHód
Ë>
HAL_UART_DMA_RX_MAX
)

518 
dmaCfg
.
rxHód
 = 0;

522 
PxOUT
 &~
HAL_UART_Px_RTS
;

524  
˙t
;

525 
	}
}

537 
uöt16
 
	$HÆUARTWrôeDMA
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

539 
uöt16
 
˙t
;

540 
hÆI¡Sèã_t
 
his
;

541 
uöt8
 
txSñ
;

542 
txIdx_t
 
txIdx
;

545 i‡((
Àn
 + 
dmaCfg
.
txIdx
[dmaCfg.
txSñ
]Ë> 
HAL_UART_DMA_TX_MAX
)

550 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

551 
txSñ
 = 
dmaCfg
.txSel;

552 
txIdx
 = 
dmaCfg
.txIdx[
txSñ
];

553 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

555 
˙t
 = 0; c¡ < 
Àn
; cnt++)

557 
dmaCfg
.
txBuf
[
txSñ
][
txIdx
++] = 
buf
[
˙t
];

560 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

561 i‡(
txSñ
 !
dmaCfg
.txSel)

563 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

564 
txSñ
 = 
dmaCfg
.txSel;

565 
txIdx
 = 
dmaCfg
.txIdx[
txSñ
];

567 
˙t
 = 0; c¡ < 
Àn
; cnt++)

569 
dmaCfg
.
txBuf
[
txSñ
][
txIdx
++] = 
buf
[
˙t
];

571 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

574 
dmaCfg
.
txIdx
[
txSñ
] =ÅxIdx;

576 i‡(
dmaCfg
.
txIdx
[(
txSñ
 ^ 1)] == 0)

579 
dmaCfg
.
txDMAPídög
 = 
TRUE
;

581 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

582  
˙t
;

583 
	}
}

594 
	$HÆUARTPﬁlDMA
()

596 
uöt16
 
˙t
 = 0;

597 
uöt8
 
evt
 = 0;

599 i‡(
	`HAL_UART_DMA_NEW_RX_BYTE
(
dmaCfg
.
rxHód
))

601 
rxIdx_t
 
èû
 = 
	`födTaû
();

604 i‡(
dmaCfg
.
rxTaû
 !
èû
)

606 
dmaCfg
.
rxTaû
 = 
èû
;

609 i‡(
dmaCfg
.
rxTick
 == 0)

611 
dmaCfg
.
rxShdw
 = 
ST0
;

613 
dmaCfg
.
rxTick
 = 
HAL_UART_DMA_IDLE
;

615 i‡(
dmaCfg
.
rxTick
)

618 
uöt8
 
de¸
 = 
ST0
 - 
dmaCfg
.
rxShdw
;

620 i‡(
dmaCfg
.
rxTick
 > 
de¸
)

622 
dmaCfg
.
rxTick
 -
de¸
;

623 
dmaCfg
.
rxShdw
 = 
ST0
;

627 
dmaCfg
.
rxTick
 = 0;

630 
˙t
 = 
	`HÆUARTRxAvaûDMA
();

634 
dmaCfg
.
rxTick
 = 0;

637 i‡(
˙t
 >
HAL_UART_DMA_FULL
)

639 
evt
 = 
HAL_UART_RX_FULL
;

641 i‡(
˙t
 >
HAL_UART_DMA_HIGH
)

643 
evt
 = 
HAL_UART_RX_ABOUT_FULL
;

644 
PxOUT
 |
HAL_UART_Px_RTS
;

646 i‡(
˙t
 && !
dmaCfg
.
rxTick
)

648 
evt
 = 
HAL_UART_RX_TIMEOUT
;

651 i‡(
dmaCfg
.
txMT
)

653 
dmaCfg
.
txMT
 = 
FALSE
;

654 
evt
 |
HAL_UART_TX_EMPTY
;

657 i‡(
dmaCfg
.
txShdwVÆid
)

659 
uöt8
 
de¸
 = 
ST0
;

660 
de¸
 -
dmaCfg
.
txShdw
;

661 i‡(
de¸
 > 
dmaCfg
.
txTick
)

666 
dmaCfg
.
txShdwVÆid
 = 
FALSE
;

670 i‡(
dmaCfg
.
txDMAPídög
 && !dmaCfg.
txShdwVÆid
)

674 
hÆDMADesc_t
 *
ch
 = 
	`HAL_DMA_GET_DESC1234
(
HAL_DMA_CH_TX
);

675 
hÆI¡Sèã_t
 
ötSèã
;

678 
dmaCfg
.
txDMAPídög
 = 
FALSE
;

680 
	`HAL_DMA_SET_SOURCE
(
ch
, 
dmaCfg
.
txBuf
[dmaCfg.
txSñ
]);

681 
	`HAL_DMA_SET_LEN
(
ch
, 
dmaCfg
.
txIdx
[dmaCfg.
txSñ
]);

682 
dmaCfg
.
txSñ
 ^= 1;

683 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

684 
	`HAL_DMA_ARM_CH
(
HAL_DMA_CH_TX
);

687 
	`asm
("NOP");

688 } !
	`HAL_DMA_CH_ARMED
(
HAL_DMA_CH_TX
));

689 
	`HAL_DMA_CLEAR_IRQ
(
HAL_DMA_CH_TX
);

690 
	`HAL_DMA_MAN_TRIGGER
(
HAL_DMA_CH_TX
);

691 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

695 
hÆI¡Sèã_t
 
his
;

697 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

698 i‡((
dmaCfg
.
txIdx
[dmaCfg.
txSñ
] !0Ë&& !
	`HAL_DMA_CH_ARMED
(
HAL_DMA_CH_TX
)

699 && !
	`HAL_DMA_CHECK_IRQ
(
HAL_DMA_CH_TX
))

701 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

702 
	`HÆUARTI§DMA
();

706 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

710 i‡(
evt
 && (
dmaCfg
.
u¨tCB
 !
NULL
))

712 
dmaCfg
.
	`u¨tCB
(
HAL_UART_DMA
-1, 
evt
);

714 
	}
}

725 
uöt16
 
	$HÆUARTRxAvaûDMA
()

727 
uöt16
 
˙t
 = 0;

729 i‡(
	`HAL_UART_DMA_NEW_RX_BYTE
(
dmaCfg
.
rxHód
))

731 
uöt16
 
idx
;

733 
idx
 = 0; idx < 
HAL_UART_DMA_RX_MAX
; idx++)

735 i‡(
	`HAL_UART_DMA_NEW_RX_BYTE
(
idx
))

737 
˙t
++;

742  
˙t
;

743 
	}
}

754 
	$HÆUARTSu•ídDMA
( )

756 
PxOUT
 |
HAL_UART_Px_RTS
;

757 
UxCSR
 &~
CSR_RE
;

758 
P0IEN
 |
HAL_UART_Px_CTS
;

759 
	}
}

770 
	$HÆUARTResumeDMA
( )

772 
P0IEN
 &~
HAL_UART_Px_CTS
;

773 
UxUCR
 |
UCR_FLUSH
;

774 
UxCSR
 |
CSR_RE
;

775 
PxOUT
 &~
HAL_UART_Px_RTS
;

776 
	}
}

787 
HÆUARTI§DMA
();

788 
	$HÆUARTI§DMA
()

790 
	`HAL_DMA_CLEAR_IRQ
(
HAL_DMA_CH_TX
);

793 
dmaCfg
.
txIdx
[(dmaCfg.
txSñ
 ^ 1)] = 0;

794 
dmaCfg
.
txMT
 = 
TRUE
;

797 
dmaCfg
.
txShdw
 = 
ST0
;

798 
dmaCfg
.
txShdwVÆid
 = 
TRUE
;

801 i‡(
dmaCfg
.
txIdx
[dmaCfg.
txSñ
])

804 
dmaCfg
.
txDMAPídög
 = 
TRUE
;

806 
	}
}

	@Components/hal/target/CC2530EB/_hal_uart_isr.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_as£π.h
"

46 
	~"hÆ_bﬂrd.h
"

47 
	~"hÆ_defs.h
"

48 
	~"hÆ_mcu.h
"

49 
	~"hÆ_u¨t.h
"

50 #i‡
deföed
 
MT_TASK


51 
	~"MT_UART.h
"

59 
	#HAL_UART_ASSERT
(
ex¥
)

	)

61 
	#HAL_UART_ISR_RX_AVAIL
() \

62 (
i§Cfg
.
rxTaû
 >i§Cfg.
rxHód
) ? \

63 (
i§Cfg
.
rxTaû
 - i§Cfg.
rxHód
) : \

64 (
HAL_UART_ISR_RX_MAX
 - 
i§Cfg
.
rxHód
 + i§Cfg.
rxTaû
)

	)

66 
	#HAL_UART_ISR_TX_AVAIL
() \

67 (
i§Cfg
.
txHód
 > i§Cfg.
txTaû
) ? \

68 (
i§Cfg
.
txHód
 - i§Cfg.
txTaû
 - 1) : \

69 (
HAL_UART_ISR_TX_MAX
 - 
i§Cfg
.
txTaû
 + i§Cfg.
txHód
 - 1)

	)

76 
	#CSR_MODE
 0x80

	)

77 
	#CSR_RE
 0x40

	)

78 
	#CSR_SLAVE
 0x20

	)

79 
	#CSR_FE
 0x10

	)

80 
	#CSR_ERR
 0x08

	)

81 
	#CSR_RX_BYTE
 0x04

	)

82 
	#CSR_TX_BYTE
 0x02

	)

83 
	#CSR_ACTIVE
 0x01

	)

86 
	#UCR_FLUSH
 0x80

	)

87 
	#UCR_FLOW
 0x40

	)

88 
	#UCR_D9
 0x20

	)

89 
	#UCR_BIT9
 0x10

	)

90 
	#UCR_PARITY
 0x08

	)

91 
	#UCR_SPB
 0x04

	)

92 
	#UCR_STOP
 0x02

	)

93 
	#UCR_START
 0x01

	)

95 
	#UTX0IE
 0x04

	)

96 
	#UTX1IE
 0x08

	)

98 
	#P2DIR_PRIPO
 0xC0

	)

101 #unde‡
PxOUT


102 #unde‡
PxDIR


103 #unde‡
PxSEL


104 #unde‡
UxCSR


105 #unde‡
UxUCR


106 #unde‡
UxDBUF


107 #unde‡
UxBAUD


108 #unde‡
UxGCR


109 #unde‡
URXxIE


110 #unde‡
URXxIF


111 #unde‡
UTXxIE


112 #unde‡
UTXxIF


113 #unde‡
HAL_UART_PERCFG_BIT


114 #unde‡
HAL_UART_Px_RTS


115 #unde‡
HAL_UART_Px_CTS


116 #unde‡
HAL_UART_Px_RX_TX


117 #i‡(
HAL_UART_ISR
 == 1)

118 
	#PxOUT
 
P0


	)

119 
	#PxDIR
 
P0DIR


	)

120 
	#PxSEL
 
P0SEL


	)

121 
	#UxCSR
 
U0CSR


	)

122 
	#UxUCR
 
U0UCR


	)

123 
	#UxDBUF
 
U0DBUF


	)

124 
	#UxBAUD
 
U0BAUD


	)

125 
	#UxGCR
 
U0GCR


	)

126 
	#URXxIE
 
URX0IE


	)

127 
	#URXxIF
 
URX0IF


	)

128 
	#UTXxIE
 
UTX0IE


	)

129 
	#UTXxIF
 
UTX0IF


	)

131 
	#PxOUT
 
P1


	)

132 
	#PxDIR
 
P1DIR


	)

133 
	#PxSEL
 
P1SEL


	)

134 
	#UxCSR
 
U1CSR


	)

135 
	#UxUCR
 
U1UCR


	)

136 
	#UxDBUF
 
U1DBUF


	)

137 
	#UxBAUD
 
U1BAUD


	)

138 
	#UxGCR
 
U1GCR


	)

139 
	#URXxIE
 
URX1IE


	)

140 
	#URXxIF
 
URX1IF


	)

141 
	#UTXxIE
 
UTX1IE


	)

142 
	#UTXxIF
 
UTX1IF


	)

145 #i‡(
HAL_UART_ISR
 == 1)

146 
	#HAL_UART_PERCFG_BIT
 0x01

147 
	#HAL_UART_Px_RX_TX
 0x0C

148 
	#HAL_UART_Px_RTS
 0x20

149 
	#HAL_UART_Px_CTS
 0x10

150 #ñ£

	)

151 
	#HAL_UART_PERCFG_BIT
 0x02

152 
	#HAL_UART_Px_RTS
 0x20

153 
	#HAL_UART_Px_CTS
 0x10

154 
	#HAL_UART_Px_RX_TX
 0xC0

156 

	)

158 
	#HAL_UART_MSECS_TO_TICKS
 33

	)

160 #i‡
deföed
 
MT_TASK


161 
	#HAL_UART_ISR_TX_MAX
 
MT_UART_DEFAULT_MAX_TX_BUFF


	)

162 
	#HAL_UART_ISR_RX_MAX
 
MT_UART_DEFAULT_MAX_RX_BUFF


	)

163 
	#HAL_UART_ISR_HIGH
 
MT_UART_DEFAULT_THRESHOLD


	)

164 
	#HAL_UART_ISR_IDLE
 (
MT_UART_DEFAULT_IDLE_TIMEOUT
 * 
HAL_UART_MSECS_TO_TICKS
)

	)

166 #i‡!
deföed
 
HAL_UART_ISR_RX_MAX


167 
	#HAL_UART_ISR_RX_MAX
 128

	)

169 #i‡!
deföed
 
HAL_UART_ISR_TX_MAX


170 
	#HAL_UART_ISR_TX_MAX
 
HAL_UART_ISR_RX_MAX


	)

172 #i‡!
deföed
 
HAL_UART_ISR_HIGH


173 
	#HAL_UART_ISR_HIGH
 (
HAL_UART_ISR_RX_MAX
 / 2 - 16)

	)

175 #i‡!
deföed
 
HAL_UART_ISR_IDLE


176 
	#HAL_UART_ISR_IDLE
 (6 * 
HAL_UART_MSECS_TO_TICKS
)

	)

186 
uöt8
 
	mrxBuf
[
HAL_UART_ISR_RX_MAX
];

187 #i‡
HAL_UART_ISR_RX_MAX
 < 256

188 
uöt8
 
	mrxHód
;

189 vﬁ©ûê
uöt8
 
	mrxTaû
;

191 
uöt16
 
	mrxHód
;

192 vﬁ©ûê
uöt16
 
	mrxTaû
;

194 
uöt8
 
	mrxTick
;

195 
uöt8
 
	mrxShdw
;

197 
uöt8
 
	mtxBuf
[
HAL_UART_ISR_TX_MAX
];

198 #i‡
HAL_UART_ISR_TX_MAX
 < 256

199 vﬁ©ûê
uöt8
 
	mtxHód
;

200 
uöt8
 
	mtxTaû
;

202 vﬁ©ûê
uöt16
 
	mtxHód
;

203 
uöt16
 
	mtxTaû
;

205 
uöt8
 
	mtxMT
;

207 
hÆUARTCBack_t
 
	mu¨tCB
;

208 } 
	tu¨tISRCfg_t
;

222 
u¨tISRCfg_t
 
	gi§Cfg
;

228 
HÆUARTInôISR
();

229 
HÆUARTO≥nISR
(
hÆUARTCfg_t
 *
c⁄fig
);

230 
uöt16
 
HÆUARTRódISR
(
uöt8
 *
buf
, uöt16 
Àn
);

231 
uöt16
 
HÆUARTWrôeISR
(
uöt8
 *
buf
, uöt16 
Àn
);

232 
HÆUARTPﬁlISR
();

233 
uöt16
 
HÆUARTRxAvaûISR
();

234 
HÆUARTSu•ídISR
();

235 
HÆUARTResumeISR
();

246 
	$HÆUARTInôISR
()

249 
P2DIR
 &~
P2DIR_PRIPO
;

250 
P2DIR
 |
HAL_UART_PRIPO
;

252 #i‡(
HAL_UART_ISR
 == 1)

253 
PERCFG
 &~
HAL_UART_PERCFG_BIT
;

255 
PERCFG
 |
HAL_UART_PERCFG_BIT
;

257 
PxSEL
 |
HAL_UART_Px_RX_TX
;

258 
ADCCFG
 &~
HAL_UART_Px_RX_TX
;

259 
UxCSR
 = 
CSR_MODE
;

260 
UxUCR
 = 
UCR_FLUSH
;

261 
	}
}

272 
	$HÆUARTUnInôISR
()

274 
UxCSR
 = 0;

275 
URXxIE
 = 0;

276 
URXxIF
 = 0;

277 
IEN2
 &~
UTXxIE
;

278 
UTXxIF
 = 0;

279 
	}
}

290 
	$HÆUARTO≥nISR
(
hÆUARTCfg_t
 *
c⁄fig
)

292 
i§Cfg
.
u¨tCB
 = 
c⁄fig
->
ˇŒBackFunc
;

294 
	`HAL_UART_ASSERT
((
c⁄fig
->
baudR©e
 =
HAL_UART_BR_9600
) ||

295 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_19200
) ||

296 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_38400
) ||

297 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
) ||

298 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
));

300 i‡(
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
 ||

301 
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
)

303 
UxBAUD
 = 216;

307 
UxBAUD
 = 59;

310 
c⁄fig
->
baudR©e
)

312 
HAL_UART_BR_9600
:

313 
UxGCR
 = 8;

315 
HAL_UART_BR_19200
:

316 
UxGCR
 = 9;

318 
HAL_UART_BR_38400
:

319 
HAL_UART_BR_57600
:

320 
UxGCR
 = 10;

323 
UxGCR
 = 11;

328 i‡(
c⁄fig
->
ÊowC⁄åﬁ
)

330 
UxUCR
 = 
UCR_FLOW
 | 
UCR_STOP
;

331 
PxSEL
 |
HAL_UART_Px_RTS
 | 
HAL_UART_Px_CTS
;

335 
UxUCR
 = 
UCR_STOP
;

338 
UxCSR
 |
CSR_RE
;

339 
URXxIE
 = 1;

340 
UTXxIF
 = 1;

341 
	}
}

353 
uöt16
 
	$HÆUARTRódISR
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

355 
uöt16
 
˙t
 = 0;

357 (
i§Cfg
.
rxHód
 !i§Cfg.
rxTaû
Ë&& (
˙t
 < 
Àn
))

359 *
buf
++ = 
i§Cfg
.
rxBuf
[i§Cfg.
rxHód
++];

360 i‡(
i§Cfg
.
rxHód
 >
HAL_UART_ISR_RX_MAX
)

362 
i§Cfg
.
rxHód
 = 0;

364 
˙t
++;

367  
˙t
;

368 
	}
}

380 
uöt16
 
	$HÆUARTWrôeISR
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

382 
uöt16
 
˙t
;

385 i‡(
	`HAL_UART_ISR_TX_AVAIL
(Ë< 
Àn
)

390 
˙t
 = 0; c¡ < 
Àn
; cnt++)

392 
i§Cfg
.
txBuf
[i§Cfg.
txTaû
] = *
buf
++;

393 
i§Cfg
.
txMT
 = 0;

395 i‡(
i§Cfg
.
txTaû
 >
HAL_UART_ISR_TX_MAX
-1)

397 
i§Cfg
.
txTaû
 = 0;

401 
i§Cfg
.
txTaû
++;

405 
IEN2
 |
UTXxIE
;

408  
˙t
;

409 
	}
}

420 
	$HÆUARTPﬁlISR
()

422 i‡(
i§Cfg
.
u¨tCB
 !
NULL
)

424 
uöt16
 
˙t
 = 
	`HAL_UART_ISR_RX_AVAIL
();

425 
uöt8
 
evt
 = 0;

427 i‡(
i§Cfg
.
rxTick
)

430 
uöt8
 
de¸
 = 
ST0
 - 
i§Cfg
.
rxShdw
;

432 i‡(
i§Cfg
.
rxTick
 > 
de¸
)

434 
i§Cfg
.
rxTick
 -
de¸
;

438 
i§Cfg
.
rxTick
 = 0;

441 
i§Cfg
.
rxShdw
 = 
ST0
;

443 i‡(
˙t
 >
HAL_UART_ISR_RX_MAX
-1)

445 
evt
 = 
HAL_UART_RX_FULL
;

447 i‡(
˙t
 >
HAL_UART_ISR_HIGH
)

449 
evt
 = 
HAL_UART_RX_ABOUT_FULL
;

451 i‡(
˙t
 && !
i§Cfg
.
rxTick
)

453 
evt
 = 
HAL_UART_RX_TIMEOUT
;

456 i‡(
i§Cfg
.
txMT
)

458 
i§Cfg
.
txMT
 = 0;

459 
evt
 |
HAL_UART_TX_EMPTY
;

462 i‡(
evt
)

464 
i§Cfg
.
	`u¨tCB
(
HAL_UART_ISR
-1, 
evt
);

467 
	}
}

478 
uöt16
 
	$HÆUARTRxAvaûISR
()

480  
	`HAL_UART_ISR_RX_AVAIL
();

481 
	}
}

492 
	$HÆUARTSu•ídISR
( )

494 
UxCSR
 &~
CSR_RE
;

495 
	}
}

506 
	$HÆUARTResumeISR
( )

508 
UxUCR
 |
UCR_FLUSH
;

509 
UxCSR
 |
CSR_RE
;

510 
	}
}

521 #i‡(
HAL_UART_ISR
 == 1)

522 
	$HAL_ISR_FUNCTION
–
hÆU¨t0RxI§
, 
URX0_VECTOR
 )

524 
	$HAL_ISR_FUNCTION
–
hÆU¨t1RxI§
, 
URX1_VECTOR
 )

528 
uöt8
 
tmp
 = 
UxDBUF
;

529 
i§Cfg
.
rxBuf
[i§Cfg.
rxTaû
] = 
tmp
;

532 i‡(
i§Cfg
.
rxHód
 =i§Cfg.
rxTaû
)

534 
i§Cfg
.
rxShdw
 = 
ST0
;

537 i‡(++
i§Cfg
.
rxTaû
 >
HAL_UART_ISR_RX_MAX
)

539 
i§Cfg
.
rxTaû
 = 0;

542 
i§Cfg
.
rxTick
 = 
HAL_UART_ISR_IDLE
;

543 
	}
}

554 #i‡(
HAL_UART_ISR
 == 1)

555 
	$HAL_ISR_FUNCTION
–
hÆU¨t0TxI§
, 
UTX0_VECTOR
 )

557 
	$HAL_ISR_FUNCTION
–
hÆU¨t1TxI§
, 
UTX1_VECTOR
 )

560 i‡(
i§Cfg
.
txHód
 =i§Cfg.
txTaû
)

562 
IEN2
 &~
UTXxIE
;

563 
i§Cfg
.
txMT
 = 1;

567 
UTXxIF
 = 0;

568 
UxDBUF
 = 
i§Cfg
.
txBuf
[i§Cfg.
txHód
++];

570 i‡(
i§Cfg
.
txHód
 >
HAL_UART_ISR_TX_MAX
)

572 
i§Cfg
.
txHód
 = 0;

575 
	}
}

	@Components/hal/target/CC2530EB/hal_adc.c

44 
	~"hÆ_adc.h
"

45 
	~"hÆ_defs.h
"

46 
	~"hÆ_mcu.h
"

47 
	~"hÆ_ty≥s.h
"

52 
	#HAL_ADC_EOC
 0x80

	)

53 
	#HAL_ADC_START
 0x40

	)

55 
	#HAL_ADC_STSEL_EXT
 0x00

	)

56 
	#HAL_ADC_STSEL_FULL
 0x10

	)

57 
	#HAL_ADC_STSEL_T1C0
 0x20

	)

58 
	#HAL_ADC_STSEL_ST
 0x30

	)

60 
	#HAL_ADC_RAND_NORM
 0x00

	)

61 
	#HAL_ADC_RAND_LFSR
 0x04

	)

62 
	#HAL_ADC_RAND_SEED
 0x08

	)

63 
	#HAL_ADC_RAND_STOP
 0x0¯

	)

64 
	#HAL_ADC_RAND_BITS
 0x0¯

	)

66 
	#HAL_ADC_DEC_064
 0x00

	)

67 
	#HAL_ADC_DEC_128
 0x10

	)

68 
	#HAL_ADC_DEC_256
 0x20

	)

69 
	#HAL_ADC_DEC_512
 0x30

	)

70 
	#HAL_ADC_DEC_BITS
 0x30

	)

72 
	#HAL_ADC_STSEL
 
HAL_ADC_STSEL_ST


	)

73 
	#HAL_ADC_RAND_GEN
 
HAL_ADC_RAND_STOP


	)

74 
	#HAL_ADC_REF_VOLT
 
HAL_ADC_REF_AVDD


	)

75 
	#HAL_ADC_DEC_RATE
 
HAL_ADC_DEC_064


	)

76 
	#HAL_ADC_SCHN
 
HAL_ADC_CHN_VDD3


	)

77 
	#HAL_ADC_ECHN
 
HAL_ADC_CHN_GND


	)

84 #i‡(
HAL_ADC
 =
TRUE
)

85 
uöt8
 
	gadcRef
;

97 
	$HÆAdcInô
 ()

99 #i‡(
HAL_ADC
 =
TRUE
)

100 
adcRef
 = 
HAL_ADC_REF_VOLT
;

102 
	}
}

117 
uöt16
 
	$HÆAdcRód
 (
uöt8
 
ch™√l
, uöt8 
ªsﬁuti⁄
)

119 
öt16
 
ªadög
 = 0;

121 #i‡(
HAL_ADC
 =
TRUE
)

122 
uöt8
 
i
, 
ªsbôs
;

123 
uöt8
 
adcCh™√l
 = 1;

133 i‡(
ch™√l
 < 8)

135 
i
=0; i < 
ch™√l
; i++)

137 
adcCh™√l
 <<= 1;

142 
ADCCFG
 |
adcCh™√l
;

145 
ªsﬁuti⁄
)

147 
HAL_ADC_RESOLUTION_8
:

148 
ªsbôs
 = 
HAL_ADC_DEC_064
;

150 
HAL_ADC_RESOLUTION_10
:

151 
ªsbôs
 = 
HAL_ADC_DEC_128
;

153 
HAL_ADC_RESOLUTION_12
:

154 
ªsbôs
 = 
HAL_ADC_DEC_256
;

156 
HAL_ADC_RESOLUTION_14
:

158 
ªsbôs
 = 
HAL_ADC_DEC_512
;

163 
ADCCON3
 = 
ch™√l
 | 
ªsbôs
 | 
adcRef
;

166 !(
ADCCON1
 & 
HAL_ADC_EOC
));

169 
ADCCFG
 &(
adcCh™√l
 ^ 0xFF);

172 
ªadög
 = (
öt16
Ë(
ADCL
);

173 
ªadög
 |(
öt16
Ë(
ADCH
 << 8);

176 i‡(
ªadög
 < 0)

177 
ªadög
 = 0;

179 
ªsﬁuti⁄
)

181 
HAL_ADC_RESOLUTION_8
:

182 
ªadög
 >>= 8;

184 
HAL_ADC_RESOLUTION_10
:

185 
ªadög
 >>= 6;

187 
HAL_ADC_RESOLUTION_12
:

188 
ªadög
 >>= 4;

190 
HAL_ADC_RESOLUTION_14
:

192 
ªadög
 >>= 2;

197 (Ë
ch™√l
;

198 (Ë
ªsﬁuti⁄
;

201  ((
uöt16
)
ªadög
);

202 
	}
}

214 
	$HÆAdcSëRe„ªn˚
 ( 
uöt8
 
ª„ªn˚
 )

216 #i‡(
HAL_ADC
 =
TRUE
)

217 
adcRef
 = 
ª„ªn˚
;

219 
	}
}

232 
boﬁ
 
	$HÆAdcCheckVdd
(
uöt8
 
vdd
)

234 
ADCCON3
 = 0x0F;

235 !(
ADCCON1
 & 0x80));

236  (
ADCH
 > 
vdd
);

237 
	}
}

	@Components/hal/target/CC2530EB/hal_aes.h

40 #i‚de‡ 
HAL_AES_H_


41 
	#HAL_AES_H_


	)

43 
	~"ZComDef.h
"

45 
	#STATE_BLENGTH
 16

46 
	#KEY_BLENGTH
 16

47 
	#KEY_EXP_LENGTH
 176

48 

	)

53 #i‡((
deföed
 
SOFTWARE_AES
Ë&& (SOFTWARE_AES =
TRUE
)Ë&& ((deföed 
SW_AES_AND_KEY_EXP
) && (SW_AES_AND_KEY_EXP == TRUE))

57 
HÆAesInô
( );

58 
AesLﬂdBlock
–
uöt8
 * );

59 
AesSèπBlock
–
uöt8
 *, uint8 * );

60 
AesSèπSh‹tBlock
–
uöt8
 *, uint8 * );

61 
AesLﬂdIV
(
uöt8
 *);

62 
AesDmaSëup
–
uöt8
 *, 
uöt16
, uint8 *, uint16 );

63 
AesLﬂdKey
–
uöt8
 * );

65 (*
pS•AesEn¸y±
)–
uöt8
 *, uint8 * );

66 
	`s•_HW_KeyInô
 (
uöt8
 *);

67 
	`s•KeyEx∑nsi⁄
 (
uöt8
 *, uint8 *);

69 
	`s•AesEn¸y±HW
 (
uöt8
 *, uint8 *);

70 
	`s•AesEn¸y±KeyExp
 (
uöt8
 *, uint8 *);

71 
	`s•AesEn¸y±Basic
 (
uöt8
 *, uint8 *);

72 
	`s•AesEn¸y±
–
uöt8
 *
key
, uöt8 *
buf
 );

75 
	#AES_BUSY
 0x08

	)

76 
	#ENCRYPT
 0x00

	)

77 
	#DECRYPT
 0x01

	)

80 
	#AES_SETMODE
(
mode
Ëdÿ{ 
ENCCS
 &~0x70; ENCCS |mode; 
	}
} 0)

	)

83 
	#CBC
 0x00

	)

84 
	#CFB
 0x10

	)

85 
	#OFB
 0x20

	)

86 
	#CTR
 0x30

	)

87 
	#ECB
 0x40

	)

88 
	#CBC_MAC
 0x50

	)

91 
	#AES_SET_ENCR_DECR_KEY_IV
(
mode
) \

93 
ENCCS
 = (ENCCS & ~0x07Ë| 
mode
 \

94 } 0)

	)

97 
	#AES_ENCRYPT
 0x00;

	)

98 
	#AES_DECRYPT
 0x02;

	)

99 
	#AES_LOAD_KEY
 0x04;

	)

100 
	#AES_LOAD_IV
 0x06;

	)

104 
	#AES_START
(Ë
ENCCS
 |0x01

	)

107 
	#HAL_DMA_AES_IN
 1

	)

108 
	#HAL_DMA_AES_OUT
 2

	)

111 
	#HAL_AES_IN_ADDR
 0x70B1

	)

112 
	#HAL_AES_OUT_ADDR
 0x70B2

	)

114 #i‡!
deföed
 (
HAL_AES_DMA
Ë|| (HAL_AES_DMA =
FALSE
)

115 
	#HAL_AES_DELAY
() \

117 
uöt8
 
dñay
 = 15; \

118 
dñay
--); \

119 } 0)

	)

	@Components/hal/target/CC2530EB/hal_board_cfg.h

40 #i‚de‡
HAL_BOARD_CFG_H


41 
	#HAL_BOARD_CFG_H


	)

49 
	~"hÆ_mcu.h
"

50 
	~"hÆ_defs.h
"

51 
	~"hÆ_ty≥s.h
"

61 
	#xHAL_PA_LNA


	)

62 
	#xHAL_PA_LNA_CC2590


	)

72 #i‡!
deföed
 (
HAL_BOARD_CC2530EB_REV17
Ë&& !deföed (
HAL_BOARD_CC2530EB_REV13
)

73 
	#HAL_BOARD_CC2530EB_REV17


	)

81 
	#HAL_CPU_CLOCK_MHZ
 32

	)

86 
	#HAL_CLOCK_CRYSTAL


	)

89 #i‡!
deföed
 (
OSC32K_CRYSTAL_INSTALLED
Ë|| (deföed (OSC32K_CRYSTAL_INSTALLEDË&& (OSC32K_CRYSTAL_INSTALLED =
TRUE
))

90 
	#OSC_32KHZ
 0x00

	)

92 
	#OSC_32KHZ
 0x80

	)

95 
	#HAL_CLOCK_STABLE
(Ë
	`°
–
CLKCONSTA
 !(
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
)); )

	)

102 #i‡
deföed
 (
HAL_BOARD_CC2530EB_REV17
Ë&& !deföed (
HAL_PA_LNA
Ë&& !deföed (
HAL_PA_LNA_CC2590
)

103 
	#HAL_NUM_LEDS
 3

	)

104 #ñi‡
deföed
 (
HAL_BOARD_CC2530EB_REV13
Ë|| deföed (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

105 
	#HAL_NUM_LEDS
 1

	)

107 #îr‹ 
Unknown
 
Bﬂrd
 
Indítifõr


110 
	#HAL_LED_BLINK_DELAY
(Ë
	`°
–{ vﬁ©ûê
uöt32
 
i
; i=0; i<0x5800; i++Ë{ }; } )

	)

113 
	#LED1_BV
 
	`BV
(0)

	)

114 
	#LED1_SBIT
 
P1_0


	)

115 
	#LED1_DDR
 
P1DIR


	)

116 
	#LED1_POLARITY
 
ACTIVE_HIGH


	)

118 #i‡
deföed
 (
HAL_BOARD_CC2530EB_REV17
)

120 
	#LED2_BV
 
	`BV
(1)

	)

121 
	#LED2_SBIT
 
P1_1


	)

122 
	#LED2_DDR
 
P1DIR


	)

123 
	#LED2_POLARITY
 
ACTIVE_HIGH


	)

126 
	#LED3_BV
 
	`BV
(4)

	)

127 
	#LED3_SBIT
 
P1_4


	)

128 
	#LED3_DDR
 
P1DIR


	)

129 
	#LED3_POLARITY
 
ACTIVE_HIGH


	)

137 
	#ACTIVE_LOW
 !

	)

138 
	#ACTIVE_HIGH
 !!

	)

141 
	#PUSH1_BV
 
	`BV
(1)

	)

142 
	#PUSH1_SBIT
 
P0_1


	)

144 #i‡
deföed
 (
HAL_BOARD_CC2530EB_REV17
)

145 
	#PUSH1_POLARITY
 
ACTIVE_HIGH


	)

146 #ñi‡
deföed
 (
HAL_BOARD_CC2530EB_REV13
)

147 
	#PUSH1_POLARITY
 
ACTIVE_LOW


	)

149 #îr‹ 
Unknown
 
Bﬂrd
 
Indítifõr


153 
	#PUSH2_BV
 
	`BV
(0)

	)

154 
	#PUSH2_SBIT
 
P2_0


	)

155 
	#PUSH2_POLARITY
 
ACTIVE_HIGH


	)

163 
	#HAL_FLASH_PAGE_PER_BANK
 16

	)

165 
	#HAL_FLASH_PAGE_SIZE
 2048

	)

166 
	#HAL_FLASH_WORD_SIZE
 4

	)

169 
	#HAL_FLASH_PAGE_MAP
 0x8000

	)

173 #i‡
deföed
 
NON_BANKED


174 
	#HAL_FLASH_LOCK_BITS
 16

	)

175 
	#HAL_NV_PAGE_END
 30

	)

176 
	#HAL_NV_PAGE_CNT
 2

	)

178 
	#HAL_FLASH_LOCK_BITS
 16

	)

179 
	#HAL_NV_PAGE_END
 126

	)

180 
	#HAL_NV_PAGE_CNT
 6

	)

184 
	#HAL_FLASH_IEEE_SIZE
 8

	)

185 
	#HAL_FLASH_IEEE_PAGE
 (
HAL_NV_PAGE_END
+1)

	)

186 
	#HAL_FLASH_IEEE_OSET
 (
HAL_FLASH_PAGE_SIZE
 - 
HAL_FLASH_LOCK_BITS
 - 
HAL_FLASH_IEEE_SIZE
)

	)

187 
	#HAL_INFOP_IEEE_OSET
 0xC

	)

189 
	#HAL_FLASH_DEV_PRIVATE_KEY_OSET
 0x7D2

	)

190 
	#HAL_FLASH_CA_PUBLIC_KEY_OSET
 0x7BC

	)

191 
	#HAL_FLASH_IMPLICIT_CERT_OSET
 0x78C

	)

193 
	#HAL_NV_PAGE_BEG
 (
HAL_NV_PAGE_END
-
HAL_NV_PAGE_CNT
+1)

	)

196 
	#HAL_NV_DMA_CH
 0

	)

197 
	#HAL_DMA_CH_RX
 3

	)

198 
	#HAL_DMA_CH_TX
 4

	)

200 
	#HAL_NV_DMA_GET_DESC
(Ë
	`HAL_DMA_GET_DESC0
()

	)

201 
	#HAL_NV_DMA_SET_ADDR
(
a
Ë
	`HAL_DMA_SET_ADDR_DESC0
(◊))

	)

208 
	#HAL_SB_IMG_ADDR
 0x2000

	)

209 
	#HAL_SB_CRC_ADDR
 0x2090

	)

211 
	#HAL_SB_IMG_SIZE
 (0x40000 - 0x2000 - 0x3000 - 0x0800)

	)

219 #i‡
deföed
 
HAL_PA_LNA
 || deföed 
HAL_PA_LNA_CC2590


220 
MAC_RfFr⁄ãndSëup
();

221 
	#HAL_BOARD_RF_FRONTEND_SETUP
(Ë
	`MAC_RfFr⁄ãndSëup
()

	)

223 
	#HAL_BOARD_RF_FRONTEND_SETUP
()

	)

227 
	#PREFETCH_ENABLE
(Ë
	`°
–
FCTL
 = 0x08; )

	)

228 
	#PREFETCH_DISABLE
(Ë
	`°
–
FCTL
 = 0x04; )

	)

231 #i‡
deföed
 (
HAL_BOARD_CC2530EB_REV17
Ë&& !deföed (
HAL_PA_LNA
Ë&& !deföed (
HAL_PA_LNA_CC2590
)

233 
	#HAL_BOARD_INIT
() \

235 
uöt16
 
i
; \

237 
SLEEPCMD
 &~
OSC_PD
; \

238 !(
SLEEPSTA
 & 
XOSC_STB
)); \

239 
	`asm
("NOP"); \

240 
i
=0; i<504; i++Ë
	`asm
("NOP"); \

241 
CLKCONCMD
 = (
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
); \

242 
CLKCONSTA
 !(
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
)); \

243 
SLEEPCMD
 |
OSC_PD
; \

246 
	`PREFETCH_ENABLE
(); \

248 
	`HAL_TURN_OFF_LED1
(); \

249 
LED1_DDR
 |
LED1_BV
; \

250 
	`HAL_TURN_OFF_LED2
(); \

251 
LED2_DDR
 |
LED2_BV
; \

252 
	`HAL_TURN_OFF_LED3
(); \

253 
LED3_DDR
 |
LED3_BV
; \

256 
P0INP
 |
PUSH2_BV
; \

257 }

	)

259 #ñi‡
deföed
 (
HAL_BOARD_CC2530EB_REV13
Ë|| deföed (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

261 
	#HAL_BOARD_INIT
() \

263 
uöt16
 
i
; \

265 
SLEEPCMD
 &~
OSC_PD
; \

266 !(
SLEEPSTA
 & 
XOSC_STB
)); \

267 
	`asm
("NOP"); \

268 
i
=0; i<504; i++Ë
	`asm
("NOP"); \

269 
CLKCONCMD
 = (
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
); \

270 
CLKCONSTA
 !(
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
)); \

271 
SLEEPCMD
 |
OSC_PD
; \

274 
	`PREFETCH_ENABLE
(); \

277 
LED1_DDR
 |
LED1_BV
; \

280 
P0DIR
 |
	`BV
(7); \

283 
P0INP
 |
PUSH2_BV
; \

286 
	`HAL_BOARD_RF_FRONTEND_SETUP
(); \

287 }

	)

292 
	#HAL_DEBOUNCE
(
ex¥
Ë{ 
i
; i=0; i<500; i++Ë{ i‡(!”x¥)Ëò0; } }

	)

295 
	#HAL_PUSH_BUTTON1
(Ë(
	`PUSH1_POLARITY
 (
PUSH1_SBIT
))

	)

296 
	#HAL_PUSH_BUTTON2
(Ë(
	`PUSH2_POLARITY
 (
PUSH2_SBIT
))

	)

297 
	#HAL_PUSH_BUTTON3
(Ë(0)

	)

298 
	#HAL_PUSH_BUTTON4
(Ë(0)

	)

299 
	#HAL_PUSH_BUTTON5
(Ë(0)

	)

300 
	#HAL_PUSH_BUTTON6
(Ë(0)

	)

303 #i‡
deföed
 (
HAL_BOARD_CC2530EB_REV17
Ë&& !deföed (
HAL_PA_LNA
Ë&& !deföed (
HAL_PA_LNA_CC2590
)

305 
	#HAL_TURN_OFF_LED1
(Ë
	`°
–
LED1_SBIT
 = 
	`LED1_POLARITY
 (0); )

	)

306 
	#HAL_TURN_OFF_LED2
(Ë
	`°
–
LED2_SBIT
 = 
	`LED2_POLARITY
 (0); )

	)

307 
	#HAL_TURN_OFF_LED3
(Ë
	`°
–
LED3_SBIT
 = 
	`LED3_POLARITY
 (0); )

	)

308 
	#HAL_TURN_OFF_LED4
(Ë
	`HAL_TURN_OFF_LED1
()

	)

310 
	#HAL_TURN_ON_LED1
(Ë
	`°
–
LED1_SBIT
 = 
	`LED1_POLARITY
 (1); )

	)

311 
	#HAL_TURN_ON_LED2
(Ë
	`°
–
LED2_SBIT
 = 
	`LED2_POLARITY
 (1); )

	)

312 
	#HAL_TURN_ON_LED3
(Ë
	`°
–
LED3_SBIT
 = 
	`LED3_POLARITY
 (1); )

	)

313 
	#HAL_TURN_ON_LED4
(Ë
	`HAL_TURN_ON_LED1
()

	)

315 
	#HAL_TOGGLE_LED1
(Ë
	`°
–i‡(
LED1_SBIT
Ë{ LED1_SBIT = 0; } { LED1_SBIT = 1;} )

	)

316 
	#HAL_TOGGLE_LED2
(Ë
	`°
–i‡(
LED2_SBIT
Ë{ LED2_SBIT = 0; } { LED2_SBIT = 1;} )

	)

317 
	#HAL_TOGGLE_LED3
(Ë
	`°
–i‡(
LED3_SBIT
Ë{ LED3_SBIT = 0; } { LED3_SBIT = 1;} )

	)

318 
	#HAL_TOGGLE_LED4
(Ë
	`HAL_TOGGLE_LED1
()

	)

320 
	#HAL_STATE_LED1
(Ë(
	`LED1_POLARITY
 (
LED1_SBIT
))

	)

321 
	#HAL_STATE_LED2
(Ë(
	`LED2_POLARITY
 (
LED2_SBIT
))

	)

322 
	#HAL_STATE_LED3
(Ë(
	`LED3_POLARITY
 (
LED3_SBIT
))

	)

323 
	#HAL_STATE_LED4
(Ë
	`HAL_STATE_LED1
()

	)

325 #ñi‡
deföed
 (
HAL_BOARD_CC2530EB_REV13
Ë|| deföed (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

327 
	#HAL_TURN_OFF_LED1
(Ë
	`°
–
LED1_SBIT
 = 
	`LED1_POLARITY
 (0); )

	)

328 
	#HAL_TURN_OFF_LED2
(Ë
	`HAL_TURN_OFF_LED1
()

	)

329 
	#HAL_TURN_OFF_LED3
(Ë
	`HAL_TURN_OFF_LED1
()

	)

330 
	#HAL_TURN_OFF_LED4
(Ë
	`HAL_TURN_OFF_LED1
()

	)

332 
	#HAL_TURN_ON_LED1
(Ë
	`°
–
LED1_SBIT
 = 
	`LED1_POLARITY
 (1); )

	)

333 
	#HAL_TURN_ON_LED2
(Ë
	`HAL_TURN_ON_LED1
()

	)

334 
	#HAL_TURN_ON_LED3
(Ë
	`HAL_TURN_ON_LED1
()

	)

335 
	#HAL_TURN_ON_LED4
(Ë
	`HAL_TURN_ON_LED1
()

	)

337 
	#HAL_TOGGLE_LED1
(Ë
	`°
–i‡(
LED1_SBIT
Ë{ LED1_SBIT = 0; } { LED1_SBIT = 1;} )

	)

338 
	#HAL_TOGGLE_LED2
(Ë
	`HAL_TOGGLE_LED1
()

	)

339 
	#HAL_TOGGLE_LED3
(Ë
	`HAL_TOGGLE_LED1
()

	)

340 
	#HAL_TOGGLE_LED4
(Ë
	`HAL_TOGGLE_LED1
()

	)

342 
	#HAL_STATE_LED1
(Ë(
	`LED1_POLARITY
 (
LED1_SBIT
))

	)

343 
	#HAL_STATE_LED2
(Ë
	`HAL_STATE_LED1
()

	)

344 
	#HAL_STATE_LED3
(Ë
	`HAL_STATE_LED1
()

	)

345 
	#HAL_STATE_LED4
(Ë
	`HAL_STATE_LED1
()

	)

350 
	#XNV_SPI_BEGIN
(Ë
	`°
(
P1_3
 = 0;)

	)

351 
	#XNV_SPI_TX
(
x
Ë
	`°
(
U1CSR
 &~0x02; 
U1DBUF
 = (x);)

	)

352 
	#XNV_SPI_RX
(Ë
U1DBUF


	)

353 
	#XNV_SPI_WAIT_RXRDY
(Ë
	`°
(!(
U1CSR
 & 0x02));)

	)

354 
	#XNV_SPI_END
(Ë
	`°
(
P1_3
 = 1;)

	)

357 
	#XNV_SPI_INIT
() \

358 
	`°
( \

360 
U1CSR
 = 0; \

363 
U1GCR
 = 11; \

364 
U1BAUD
 = 216; \

367 
U1GCR
 |
	`BV
(5); \

370 
PERCFG
 |= 0x02; \

373 
P1SEL
 |= 0xE0; \

375 
P1SEL
 &= ~0x0E; \

376 
P1
 |= 0x0E; \

377 
P1_1
 = 0; \

378 
P1DIR
 |= 0x0E; \

381 
P2SEL
 &= ~0x20; \

384 
U1CSR
 |= 0x40; \

386 
P1_1
 = 1; \

387 )

	)

392 
	#VDD_2_0
 74

393 
	#VDD_2_7
 100

394 

	)

395 
	#VDD_MIN_RUN
 
VDD_2_0


	)

396 
	#VDD_MIN_NV
 (
VDD_2_0
+4)

397 
	#VDD_MIN_XNV
 (
VDD_2_7
+5)

398 

	)

405 #i‚de‡
HAL_TIMER


406 
	#HAL_TIMER
 
FALSE


	)

410 #i‚de‡
HAL_ADC


411 
	#HAL_ADC
 
TRUE


	)

415 #i‚de‡
HAL_DMA


416 
	#HAL_DMA
 
TRUE


	)

420 #i‚de‡
HAL_FLASH


421 
	#HAL_FLASH
 
TRUE


	)

425 #i‚de‡
HAL_AES


426 
	#HAL_AES
 
TRUE


	)

429 #i‚de‡
HAL_AES_DMA


430 
	#HAL_AES_DMA
 
TRUE


	)

434 #i‚de‡
HAL_LCD


435 
	#HAL_LCD
 
TRUE


	)

439 #i‚de‡
HAL_LED


440 
	#HAL_LED
 
TRUE


	)

442 #i‡(!
deföed
 
BLINK_LEDS
Ë&& (
HAL_LED
 =
TRUE
)

443 
	#BLINK_LEDS


	)

447 #i‚de‡
HAL_KEY


448 
	#HAL_KEY
 
TRUE


	)

452 #i‚de‡
HAL_UART


453 #i‡(
deföed
 
ZAPP_P1
Ë|| (deföed 
ZAPP_P2
Ë|| (deföed 
ZTOOL_P1
Ë|| (deföed 
ZTOOL_P2
)

454 
	#HAL_UART
 
TRUE


	)

456 
	#HAL_UART
 
FALSE


	)

460 #i‡
HAL_UART


461 #i‚de‡
HAL_UART_DMA


462 #i‡
HAL_DMA


463 #i‡(
deföed
 
ZAPP_P2
Ë|| (deföed 
ZTOOL_P2
)

464 
	#HAL_UART_DMA
 2

	)

466 
	#HAL_UART_DMA
 1

	)

469 
	#HAL_UART_DMA
 0

	)

473 #i‚de‡
HAL_UART_ISR


474 #i‡
HAL_UART_DMA


475 
	#HAL_UART_ISR
 0

	)

476 #ñi‡(
deföed
 
ZAPP_P2
Ë|| (deföed 
ZTOOL_P2
)

477 
	#HAL_UART_ISR
 2

	)

479 
	#HAL_UART_ISR
 1

	)

483 #i‡(
HAL_UART_DMA
 && (HAL_UART_DMA =
HAL_UART_ISR
))

484 #îr‹ 
HAL_UART_DMA
 & 
HAL_UART_ISR
 
mu°
 
be
 
dif„ª¡
.

488 #i‡((
HAL_UART_DMA
 =1Ë|| (
HAL_UART_ISR
 == 1))

489 
	#HAL_UART_PRIPO
 0x00

	)

491 
	#HAL_UART_PRIPO
 0x40

	)

495 
	#HAL_UART_DMA
 0

	)

496 
	#HAL_UART_ISR
 0

	)

500 
	#HAL_UART_USB
 0

	)

	@Components/hal/target/CC2530EB/hal_dma.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_defs.h
"

46 
	~"hÆ_dma.h
"

47 
	~"hÆ_mcu.h
"

48 
	~"hÆ_u¨t.h
"

50 #i‡(
deföed
 
HAL_IRGEN
Ë&& (HAL_IRGEN =
TRUE
)

51 
	~"hÆ_úgí.h
"

54 #i‡(
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)

55 
	~"hÆ_•i.h
"

59 #i‡((
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
))

77 
hÆDMADesc_t
 
	gdmaCh0
;

78 
hÆDMADesc_t
 
	gdmaCh1234
[4];

101 
	$HÆDmaInô
( )

103 
	`HAL_DMA_SET_ADDR_DESC0
–&
dmaCh0
 );

104 
	`HAL_DMA_SET_ADDR_DESC1234
–
dmaCh1234
 );

105 #i‡(
HAL_UART_DMA
 || \

106 ((
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)) || \

107 ((
deföed
 
HAL_IRGEN
Ë&& (HAL_IRGEN =
TRUE
)))

108 
DMAIE
 = 1;

110 
	}
}

112 #i‡(
HAL_UART_DMA
 || \

113 ((
deföed
 
	gHAL_SPI
Ë&& (HAL_SPI =
TRUE
)) || \

114 ((
deföed
 
HAL_IRGEN
Ë&& (HAL_IRGEN =
TRUE
)))

124 
	$HAL_ISR_FUNCTION
–
hÆDmaI§
, 
DMA_VECTOR
 )

126 
	`HÆUARTI§DMA
();

128 
	`HAL_ENTER_ISR
();

130 
DMAIF
 = 0;

132 #i‡
HAL_UART_DMA


133 i‡(
	`HAL_DMA_CHECK_IRQ
(
HAL_DMA_CH_TX
))

135 
	`HÆUARTI§DMA
();

139 #i‡(
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)

140 i‡–
	`HAL_DMA_CHECK_IRQ
–
HAL_DMA_CH_RX
 ) )

142 
	`HAL_DMA_CLEAR_IRQ
–
HAL_DMA_CH_RX
 );

143 
	`HÆSpiRxI§
();

146 i‡–
	`HAL_DMA_CHECK_IRQ
–
HAL_DMA_CH_TX
 ) )

148 
	`HAL_DMA_CLEAR_IRQ
–
HAL_DMA_CH_TX
 );

149 
	`HÆSpiTxI§
();

153 #i‡(
deföed
 
HAL_IRGEN
Ë&& (HAL_IRGEN =
TRUE
)

154 i‡–
HAL_IRGEN
 =
TRUE
 && 
	`HAL_DMA_CHECK_IRQ
–
HAL_IRGEN_DMA_CH
 ) )

156 
	`HAL_DMA_CLEAR_IRQ
–
HAL_IRGEN_DMA_CH
 );

157 
	`HÆIrGíDmaI§
();

161 
	`CLEAR_SLEEP_MODE
();

162 
	`HAL_EXIT_ISR
();

163 
	}
}

	@Components/hal/target/CC2530EB/hal_dma.h

40 #i‚de‡
HAL_DMA_H


41 
	#HAL_DMA_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"hÆ_bﬂrd.h
"

53 
	~"hÆ_ty≥s.h
"

55 #i‡((
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
))

61 
	#HAL_DMA_SET_ADDR_DESC0
–
a
 ) \

62 
	`°
( \

63 
DMA0CFGH
 = (
uöt8
)–(
uöt16
)(
a
) >> 8 ); \

64 
DMA0CFGL
 = (
uöt8
)–(
uöt16
)(
a
) & 0xFF ); \

65 )

	)

67 
	#HAL_DMA_SET_ADDR_DESC1234
–
a
 ) \

68 
	`°
( \

69 
DMA1CFGH
 = (
uöt8
)–(
uöt16
)(
a
) >> 8 ); \

70 
DMA1CFGL
 = (
uöt8
)–(
uöt16
)(
a
) & 0xFF ); \

71 )

	)

73 
	#HAL_DMA_GET_DESC0
(Ë&
dmaCh0


	)

75 
	#HAL_DMA_GET_DESC1234
–
a
 ) (
dmaCh1234
+(◊)-1))

	)

77 
	#HAL_DMA_ARM_CH
–
ch
 ) 
DMAARM
 = (0x01 << (ch))

	)

79 
	#HAL_DMA_CH_ARMED
–
ch
 ) (
DMAARM
 & (0x01 << (ch)))

	)

81 
	#HAL_DMA_ABORT_CH
–
ch
 ) 
DMAARM
 = (0x80 | (0x01 << (ch)))

	)

82 
	#HAL_DMA_MAN_TRIGGER
–
ch
 ) 
DMAREQ
 = (0x01 << (ch))

	)

83 
	#HAL_DMA_START_CH
–
ch
 ) 
	`HAL_DMA_MAN_TRIGGER
–(chË)

	)

85 
	#HAL_DMA_CLEAR_IRQ
–
ch
 ) 
DMAIRQ
 = ((0x01 << (ch)Ë^ 0xFF)

	)

87 
	#HAL_DMA_CHECK_IRQ
–
ch
 ) (
DMAIRQ
 & (0x01 << (ch)))

	)

90 
	#HAL_DMA_SET_SOURCE
–
pDesc
, 
§c
 ) \

91 
	`°
( \

92 
pDesc
->
§cAddrH
 = (
uöt8
)–(
uöt16
)(
§c
) >> 8 ); \

93 
pDesc
->
§cAddrL
 = (
uöt8
)–(
uöt16
)(
§c
) & 0xFF ); \

94 )

	)

97 
	#HAL_DMA_SET_DEST
–
pDesc
, 
d°
 ) \

98 
	`°
( \

99 
pDesc
->
d°AddrH
 = (
uöt8
)–(
uöt16
)(
d°
) >> 8 ); \

100 
pDesc
->
d°AddrL
 = (
uöt8
)–(
uöt16
)(
d°
) & 0xFF ); \

101 )

	)

105 
	#HAL_DMA_SET_LEN
–
pDesc
, 
Àn
 ) \

106 
	`°
( \

107 
pDesc
->
x„rLíL
 = (
uöt8
)–(
uöt16
)(
Àn
) & 0xFF); \

108 
pDesc
->
x„rLíV
 &~
HAL_DMA_LEN_H
; \

109 
pDesc
->
x„rLíV
 |(
uöt8
)((
uöt16
)(
Àn
) >> 8); \

110 )

	)

112 
	#HAL_DMA_GET_LEN
–
pDesc
 ) \

113 (((
uöt16
)(
pDesc
->
x„rLíV
 & 
HAL_DMA_LEN_H
Ë<< 8Ë|ÖDesc->
x„rLíL
)

	)

115 
	#HAL_DMA_SET_VLEN
–
pDesc
, 
vMode
 ) \

116 
	`°
( \

117 
pDesc
->
x„rLíV
 &~
HAL_DMA_LEN_V
; \

118 
pDesc
->
x„rLíV
 |(
vMode
 << 5); \

119 )

	)

121 
	#HAL_DMA_SET_WORD_SIZE
–
pDesc
, 
xSz
 ) \

122 
	`°
( \

123 
pDesc
->
˘æA
 &~
HAL_DMA_WORD_SIZE
; \

124 
pDesc
->
˘æA
 |(
xSz
 << 7); \

125 )

	)

127 
	#HAL_DMA_SET_TRIG_MODE
–
pDesc
, 
tMode
 ) \

128 
	`°
( \

129 
pDesc
->
˘æA
 &~
HAL_DMA_TRIG_MODE
; \

130 
pDesc
->
˘æA
 |(
tMode
 << 5); \

131 )

	)

133 
	#HAL_DMA_GET_TRIG_MODE
–
pDesc
 ) (’Desc->
˘æA
 >> 5Ë& 0x3)

	)

135 
	#HAL_DMA_SET_TRIG_SRC
–
pDesc
, 
tSrc
 ) \

136 
	`°
( \

137 
pDesc
->
˘æA
 &~
HAL_DMA_TRIG_SRC
; \

138 
pDesc
->
˘æA
 |
tSrc
; \

139 )

	)

141 
	#HAL_DMA_SET_SRC_INC
–
pDesc
, 
§cInc
 ) \

142 
	`°
( \

143 
pDesc
->
˘æB
 &~
HAL_DMA_SRC_INC
; \

144 
pDesc
->
˘æB
 |(
§cInc
 << 6); \

145 )

	)

147 
	#HAL_DMA_SET_DST_INC
–
pDesc
, 
d°Inc
 ) \

148 
	`°
( \

149 
pDesc
->
˘æB
 &~
HAL_DMA_DST_INC
; \

150 
pDesc
->
˘æB
 |(
d°Inc
 << 4); \

151 )

	)

153 
	#HAL_DMA_SET_IRQ
–
pDesc
, 
íabÀ
 ) \

154 
	`°
( \

155 
pDesc
->
˘æB
 &~
HAL_DMA_IRQ_MASK
; \

156 
pDesc
->
˘æB
 |(
íabÀ
 << 3); \

157 )

	)

159 
	#HAL_DMA_SET_M8
–
pDesc
, 
m8
 ) \

160 
	`°
( \

161 
pDesc
->
˘æB
 &~
HAL_DMA_M8
; \

162 
pDesc
->
˘æB
 |(
m8
 << 2); \

163 )

	)

165 
	#HAL_DMA_SET_PRIORITY
–
pDesc
, 
¥i
 ) \

166 
	`°
( \

167 
pDesc
->
˘æB
 &~
HAL_DMA_PRIORITY
; \

168 
pDesc
->
˘æB
 |
¥i
; \

169 )

	)

176 
	#HAL_DMA_VLEN_USE_LEN
 0x00

	)

178 
	#HAL_DMA_VLEN_1_P_VALOFFIRST
 0x01

	)

180 
	#HAL_DMA_VLEN_VALOFFIRST
 0x02

	)

182 
	#HAL_DMA_VLEN_1_P_VALOFFIRST_P_1
 0x03

	)

184 
	#HAL_DMA_VLEN_1_P_VALOFFIRST_P_2
 0x04

	)

186 
	#HAL_DMA_WORDSIZE_BYTE
 0x00

	)

187 
	#HAL_DMA_WORDSIZE_WORD
 0x01

	)

189 
	#HAL_DMA_TMODE_SINGLE
 0x00

	)

190 
	#HAL_DMA_TMODE_BLOCK
 0x01

	)

191 
	#HAL_DMA_TMODE_SINGLE_REPEATED
 0x02

	)

192 
	#HAL_DMA_TMODE_BLOCK_REPEATED
 0x03

	)

194 
	#HAL_DMA_TRIG_NONE
 0

	)

195 
	#HAL_DMA_TRIG_PREV
 1

	)

196 
	#HAL_DMA_TRIG_T1_CH0
 2

	)

197 
	#HAL_DMA_TRIG_T1_CH1
 3

	)

198 
	#HAL_DMA_TRIG_T1_CH2
 4

	)

199 
	#HAL_DMA_TRIG_T2_COMP
 5

	)

200 
	#HAL_DMA_TRIG_T2_OVFL
 6

	)

201 
	#HAL_DMA_TRIG_T3_CH0
 7

	)

202 
	#HAL_DMA_TRIG_T3_CH1
 8

	)

203 
	#HAL_DMA_TRIG_T4_CH0
 9

	)

204 
	#HAL_DMA_TRIG_T4_CH1
 10

	)

205 
	#HAL_DMA_TRIG_ST
 11

	)

206 
	#HAL_DMA_TRIG_IOC_0
 12

	)

207 
	#HAL_DMA_TRIG_IOC_1
 13

	)

208 
	#HAL_DMA_TRIG_URX0
 14

	)

209 
	#HAL_DMA_TRIG_UTX0
 15

	)

210 
	#HAL_DMA_TRIG_URX1
 16

	)

211 
	#HAL_DMA_TRIG_UTX1
 17

	)

212 
	#HAL_DMA_TRIG_FLASH
 18

	)

213 
	#HAL_DMA_TRIG_RADIO
 19

	)

214 
	#HAL_DMA_TRIG_ADC_CHALL
 20

	)

215 
	#HAL_DMA_TRIG_ADC_CH0
 21

	)

216 
	#HAL_DMA_TRIG_ADC_CH1
 22

	)

217 
	#HAL_DMA_TRIG_ADC_CH2
 23

	)

218 
	#HAL_DMA_TRIG_ADC_CH3
 24

	)

219 
	#HAL_DMA_TRIG_ADC_CH4
 25

	)

220 
	#HAL_DMA_TRIG_ADC_CH5
 26

	)

221 
	#HAL_DMA_TRIG_ADC_CH6
 27

	)

222 
	#HAL_DMA_TRIG_ADC_CH7
 28

	)

223 
	#HAL_DMA_TRIG_ENC_DW
 29

	)

224 
	#HAL_DMA_TRIG_ENC_UP
 30

	)

226 
	#HAL_DMA_SRCINC_0
 0x00

	)

227 
	#HAL_DMA_SRCINC_1
 0x01

	)

228 
	#HAL_DMA_SRCINC_2
 0x02

	)

229 
	#HAL_DMA_SRCINC_M1
 0x03

	)

231 
	#HAL_DMA_DSTINC_0
 0x00

	)

232 
	#HAL_DMA_DSTINC_1
 0x01

	)

233 
	#HAL_DMA_DSTINC_2
 0x02

	)

234 
	#HAL_DMA_DSTINC_M1
 0x03

	)

236 
	#HAL_DMA_IRQMASK_DISABLE
 0x00

	)

237 
	#HAL_DMA_IRQMASK_ENABLE
 0x01

	)

239 
	#HAL_DMA_M8_USE_8_BITS
 0x00

	)

240 
	#HAL_DMA_M8_USE_7_BITS
 0x01

	)

242 
	#HAL_DMA_PRI_LOW
 0x00

	)

243 
	#HAL_DMA_PRI_GUARANTEED
 0x01

	)

244 
	#HAL_DMA_PRI_HIGH
 0x02

	)

245 
	#HAL_DMA_PRI_ABSOLUTE
 0x03

	)

247 
	#HAL_DMA_MAX_ARM_CLOCKS
 45

248 

	)

254 
	#HAL_DMA_LEN_V
 0xE0

	)

255 
	#HAL_DMA_LEN_H
 0x1F

	)

258 
	#HAL_DMA_WORD_SIZE
 0x80

	)

259 
	#HAL_DMA_TRIG_MODE
 0x60

	)

260 
	#HAL_DMA_TRIG_SRC
 0x1F

	)

263 
	#HAL_DMA_SRC_INC
 0xC0

	)

264 
	#HAL_DMA_DST_INC
 0x30

	)

265 
	#HAL_DMA_IRQ_MASK
 0x08

	)

266 
	#HAL_DMA_M8
 0x04

	)

267 
	#HAL_DMA_PRIORITY
 0x03

	)

270 
uöt8
 
§cAddrH
;

271 
uöt8
 
§cAddrL
;

272 
uöt8
 
d°AddrH
;

273 
uöt8
 
d°AddrL
;

274 
uöt8
 
x„rLíV
;

275 
uöt8
 
x„rLíL
;

276 
uöt8
 
˘æA
;

277 
uöt8
 
˘æB
;

278 } 
	thÆDMADesc_t
;

284 
hÆDMADesc_t
 
dmaCh0
;

285 
hÆDMADesc_t
 
dmaCh1234
[4];

291 
HÆDmaInô
( );

295 #ifde‡
__˝lu•lus


	@Components/hal/target/CC2530EB/hal_flash.c

45 
	~"hÆ_bﬂrd_cfg.h
"

46 
	~"hÆ_dma.h
"

47 
	~"hÆ_Êash.h
"

48 
	~"hÆ_mcu.h
"

49 
	~"hÆ_ty≥s.h
"

70 
	$HÆFœshRód
(
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
, uöt16 
˙t
)

73 
uöt8
 *
pD©a
 = (uöt8 *)(
off£t
 + 
HAL_FLASH_PAGE_MAP
) +

74 ((
pg
 % 
HAL_FLASH_PAGE_PER_BANK
Ë* 
HAL_FLASH_PAGE_SIZE
);

75 
uöt8
 
mem˘r
 = 
MEMCTR
;

77 #i‡(!
deföed
 
HAL_OAD_BOOT_CODE
Ë&& (!deföed 
HAL_OTA_BOOT_CODE
)

78 
hÆI¡Sèã_t
 
is
;

81 
pg
 /
HAL_FLASH_PAGE_PER_BANK
;

83 #i‡(!
deföed
 
HAL_OAD_BOOT_CODE
Ë&& (!deföed 
HAL_OTA_BOOT_CODE
)

84 
	`HAL_ENTER_CRITICAL_SECTION
(
is
);

88 
MEMCTR
 = (MEMCTR & 0xF8Ë| 
pg
;

90 
˙t
--)

92 *
buf
++ = *
pD©a
++;

95 
MEMCTR
 = 
mem˘r
;

97 #i‡(!
deföed
 
HAL_OAD_BOOT_CODE
Ë&& (!deföed 
HAL_OTA_BOOT_CODE
)

98 
	`HAL_EXIT_CRITICAL_SECTION
(
is
);

100 
	}
}

120 
	$HÆFœshWrôe
(
uöt16
 
addr
, 
uöt8
 *
buf
, uöt16 
˙t
)

122 #i‡(
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
)

123 
hÆDMADesc_t
 *
ch
 = 
	`HAL_NV_DMA_GET_DESC
();

125 
	`HAL_DMA_SET_SOURCE
(
ch
, 
buf
);

126 
	`HAL_DMA_SET_DEST
(
ch
, &
FWDATA
);

127 
	`HAL_DMA_SET_VLEN
(
ch
, 
HAL_DMA_VLEN_USE_LEN
);

128 
	`HAL_DMA_SET_LEN
(
ch
, (
˙t
 * 
HAL_FLASH_WORD_SIZE
));

129 
	`HAL_DMA_SET_WORD_SIZE
(
ch
, 
HAL_DMA_WORDSIZE_BYTE
);

130 
	`HAL_DMA_SET_TRIG_MODE
(
ch
, 
HAL_DMA_TMODE_SINGLE
);

131 
	`HAL_DMA_SET_TRIG_SRC
(
ch
, 
HAL_DMA_TRIG_FLASH
);

132 
	`HAL_DMA_SET_SRC_INC
(
ch
, 
HAL_DMA_SRCINC_1
);

133 
	`HAL_DMA_SET_DST_INC
(
ch
, 
HAL_DMA_DSTINC_0
);

135 
	`HAL_DMA_SET_IRQ
(
ch
, 
HAL_DMA_IRQMASK_DISABLE
);

136 
	`HAL_DMA_SET_M8
–
ch
, 
HAL_DMA_M8_USE_8_BITS
);

137 
	`HAL_DMA_SET_PRIORITY
(
ch
, 
HAL_DMA_PRI_HIGH
);

138 
	`HAL_DMA_CLEAR_IRQ
(
HAL_NV_DMA_CH
);

139 
	`HAL_DMA_ARM_CH
(
HAL_NV_DMA_CH
);

141 
FADDRL
 = (
uöt8
)
addr
;

142 
FADDRH
 = (
uöt8
)(
addr
 >> 8);

143 
FCTL
 |= 0x02;

144 
FCTL
 & 0x80);

146 
	}
}

164 
	$HÆFœshEø£
(
uöt8
 
pg
)

166 
FADDRH
 = 
pg
 * (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
 / 256);

167 
FCTL
 |= 0x01;

168 
	}
}

	@Components/hal/target/CC2530EB/hal_key.c

83 
	~"hÆ_mcu.h
"

84 
	~"hÆ_defs.h
"

85 
	~"hÆ_ty≥s.h
"

86 
	~"hÆ_bﬂrd.h
"

87 
	~"hÆ_drivîs.h
"

88 
	~"hÆ_adc.h
"

89 
	~"hÆ_key.h
"

90 
	~"oßl.h
"

92 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

101 
	#HAL_KEY_RISING_EDGE
 0

	)

102 
	#HAL_KEY_FALLING_EDGE
 1

	)

104 
	#HAL_KEY_DEBOUNCE_VALUE
 25

	)

107 
	#HAL_KEY_CPU_PORT_0_IF
 
P0IF


	)

108 
	#HAL_KEY_CPU_PORT_2_IF
 
P2IF


	)

111 
	#HAL_KEY_SW_6_PORT
 
P0


	)

112 
	#HAL_KEY_SW_6_BIT
 
	`BV
(1)

	)

113 
	#HAL_KEY_SW_6_SEL
 
P0SEL


	)

114 
	#HAL_KEY_SW_6_DIR
 
P0DIR


	)

117 
	#HAL_KEY_SW_6_EDGEBIT
 
	`BV
(0)

	)

118 
	#HAL_KEY_SW_6_EDGE
 
HAL_KEY_FALLING_EDGE


	)

122 
	#HAL_KEY_SW_6_IEN
 
IEN1


	)

123 
	#HAL_KEY_SW_6_IENBIT
 
	`BV
(5Ë

	)

124 
	#HAL_KEY_SW_6_ICTL
 
P0IEN


	)

125 
	#HAL_KEY_SW_6_ICTLBIT
 
	`BV
(1Ë

	)

126 
	#HAL_KEY_SW_6_PXIFG
 
P0IFG


	)

129 
	#HAL_KEY_JOY_MOVE_PORT
 
P2


	)

130 
	#HAL_KEY_JOY_MOVE_BIT
 
	`BV
(0)

	)

131 
	#HAL_KEY_JOY_MOVE_SEL
 
P2SEL


	)

132 
	#HAL_KEY_JOY_MOVE_DIR
 
P2DIR


	)

135 
	#HAL_KEY_JOY_MOVE_EDGEBIT
 
	`BV
(3)

	)

136 
	#HAL_KEY_JOY_MOVE_EDGE
 
HAL_KEY_FALLING_EDGE


	)

139 
	#HAL_KEY_JOY_MOVE_IEN
 
IEN2


	)

140 
	#HAL_KEY_JOY_MOVE_IENBIT
 
	`BV
(1Ë

	)

141 
	#HAL_KEY_JOY_MOVE_ICTL
 
P2IEN


	)

142 
	#HAL_KEY_JOY_MOVE_ICTLBIT
 
	`BV
(0Ë

	)

143 
	#HAL_KEY_JOY_MOVE_PXIFG
 
P2IFG


	)

145 
	#HAL_KEY_JOY_CHN
 
HAL_ADC_CHANNEL_6


	)

156 
uöt8
 
	ghÆKeySavedKeys
;

157 
hÆKeyCBack_t
 
	gpHÆKeyPro˚ssFun˘i⁄
;

158 
uöt8
 
	gHÆKeyC⁄figuªd
;

159 
boﬁ
 
	gHÆ_KeyI¡E«bÀ
;

164 
hÆPro˚ssKeyI¡îru±
();

165 
uöt8
 
hÆGëJoyKeyI≈ut
();

183 
	$HÆKeyInô
( )

186 
hÆKeySavedKeys
 = 0;

188 
HAL_KEY_SW_6_SEL
 &~(
HAL_KEY_SW_6_BIT
);

189 
HAL_KEY_SW_6_DIR
 &~(
HAL_KEY_SW_6_BIT
);

191 
HAL_KEY_JOY_MOVE_SEL
 &~(
HAL_KEY_JOY_MOVE_BIT
);

192 
HAL_KEY_JOY_MOVE_DIR
 &~(
HAL_KEY_JOY_MOVE_BIT
);

196 
pHÆKeyPro˚ssFun˘i⁄
 = 
NULL
;

199 
HÆKeyC⁄figuªd
 = 
FALSE
;

200 
	}
}

213 
	$HÆKeyC⁄fig
 (
boﬁ
 
öãºu±E«bÀ
, 
hÆKeyCBack_t
 
cback
)

216 
HÆ_KeyI¡E«bÀ
 = 
öãºu±E«bÀ
;

219 
pHÆKeyPro˚ssFun˘i⁄
 = 
cback
;

222 i‡(
HÆ_KeyI¡E«bÀ
)

226 
PICTL
 &~(
HAL_KEY_SW_6_EDGEBIT
);

228 #i‡(
HAL_KEY_SW_6_EDGE
 =
HAL_KEY_FALLING_EDGE
)

229 
PICTL
 |
HAL_KEY_SW_6_EDGEBIT
;

238 
HAL_KEY_SW_6_ICTL
 |
HAL_KEY_SW_6_ICTLBIT
;

239 
HAL_KEY_SW_6_IEN
 |
HAL_KEY_SW_6_IENBIT
;

240 
HAL_KEY_SW_6_PXIFG
 = ~(
HAL_KEY_SW_6_BIT
);

246 
HAL_KEY_JOY_MOVE_ICTL
 &~(
HAL_KEY_JOY_MOVE_EDGEBIT
);

248 #i‡(
HAL_KEY_JOY_MOVE_EDGE
 =
HAL_KEY_FALLING_EDGE
)

249 
HAL_KEY_JOY_MOVE_ICTL
 |
HAL_KEY_JOY_MOVE_EDGEBIT
;

258 
HAL_KEY_JOY_MOVE_ICTL
 |
HAL_KEY_JOY_MOVE_ICTLBIT
;

259 
HAL_KEY_JOY_MOVE_IEN
 |
HAL_KEY_JOY_MOVE_IENBIT
;

260 
HAL_KEY_JOY_MOVE_PXIFG
 = ~(
HAL_KEY_JOY_MOVE_BIT
);

264 i‡(
HÆKeyC⁄figuªd
 =
TRUE
)

266 
	`oßl_°›_timîEx
(
HÆ_TaskID
, 
HAL_KEY_EVENT
);

271 
HAL_KEY_SW_6_ICTL
 &~(
HAL_KEY_SW_6_ICTLBIT
);

272 
HAL_KEY_SW_6_IEN
 &~(
HAL_KEY_SW_6_IENBIT
);

274 
	`oßl_£t_evít
(
HÆ_TaskID
, 
HAL_KEY_EVENT
);

278 
HÆKeyC⁄figuªd
 = 
TRUE
;

279 
	}
}

291 
uöt8
 
	$HÆKeyRód
 ( )

293 
uöt8
 
keys
 = 0;

295 i‡(
	`HAL_PUSH_BUTTON1
())

297 
keys
 |
HAL_KEY_SW_6
;

300 i‡((
HAL_KEY_JOY_MOVE_PORT
 & 
HAL_KEY_JOY_MOVE_BIT
))

302 
keys
 |
	`hÆGëJoyKeyI≈ut
();

305  
keys
;

306 
	}
}

318 
	$HÆKeyPﬁl
 ()

320 
uöt8
 
keys
 = 0;

322 i‡((
HAL_KEY_JOY_MOVE_PORT
 & 
HAL_KEY_JOY_MOVE_BIT
))

324 
keys
 = 
	`hÆGëJoyKeyI≈ut
();

330 i‡(!
HÆ_KeyI¡E«bÀ
)

332 i‡(
keys
 =
hÆKeySavedKeys
)

338 
hÆKeySavedKeys
 = 
keys
;

345 i‡(
	`HAL_PUSH_BUTTON1
())

347 
keys
 |
HAL_KEY_SW_6
;

351 i‡(
keys
 && (
pHÆKeyPro˚ssFun˘i⁄
))

353 (
pHÆKeyPro˚ssFun˘i⁄
Ë(
keys
, 
HAL_KEY_STATE_NORMAL
);

355 
	}
}

366 
uöt8
 
	$hÆGëJoyKeyI≈ut
()

371 
uöt8
 
adc
;

372 
uöt8
 
kßve0
 = 0;

373 
uöt8
 
kßve1
;

378 
kßve1
 = 
kßve0
;

380 
adc
 = 
	`HÆAdcRód
 (
HAL_KEY_JOY_CHN
, 
HAL_ADC_RESOLUTION_8
);

382 i‡((
adc
 >= 2) && (adc <= 38))

384 
kßve0
 |
HAL_KEY_UP
;

386 i‡((
adc
 >= 74) && (adc <= 88))

388 
kßve0
 |
HAL_KEY_RIGHT
;

390 i‡((
adc
 >= 60) && (adc <= 73))

392 
kßve0
 |
HAL_KEY_LEFT
;

394 i‡((
adc
 >= 39) && (adc <= 59))

396 
kßve0
 |
HAL_KEY_DOWN
;

398 i‡((
adc
 >= 89) && (adc <= 100))

400 
kßve0
 |
HAL_KEY_CENTER
;

402 } 
kßve0
 !
kßve1
);

404  
kßve0
;

405 
	}
}

421 
	$hÆPro˚ssKeyI¡îru±
 ()

423 
boﬁ
 
vÆid
=
FALSE
;

425 i‡(
HAL_KEY_SW_6_PXIFG
 & 
HAL_KEY_SW_6_BIT
)

427 
HAL_KEY_SW_6_PXIFG
 = ~(
HAL_KEY_SW_6_BIT
);

428 
vÆid
 = 
TRUE
;

431 i‡(
HAL_KEY_JOY_MOVE_PXIFG
 & 
HAL_KEY_JOY_MOVE_BIT
)

433 
HAL_KEY_JOY_MOVE_PXIFG
 = ~(
HAL_KEY_JOY_MOVE_BIT
);

434 
vÆid
 = 
TRUE
;

437 i‡(
vÆid
)

439 
	`oßl_°¨t_timîEx
 (
HÆ_TaskID
, 
HAL_KEY_EVENT
, 
HAL_KEY_DEBOUNCE_VALUE
);

441 
	}
}

452 
	$HÆKeyE¡îSÀï
 ( )

454 
	}
}

465 
uöt8
 
	$HÆKeyExôSÀï
 ( )

468  ( 
	`HÆKeyRód
 () );

469 
	}
}

484 
	$HAL_ISR_FUNCTION
–
hÆKeyP‹t0I§
, 
P0INT_VECTOR
 )

486 
	`HAL_ENTER_ISR
();

488 i‡(
HAL_KEY_SW_6_PXIFG
 & 
HAL_KEY_SW_6_BIT
)

490 
	`hÆPro˚ssKeyI¡îru±
();

497 
HAL_KEY_SW_6_PXIFG
 = 0;

498 
HAL_KEY_CPU_PORT_0_IF
 = 0;

500 
	`CLEAR_SLEEP_MODE
();

501 
	`HAL_EXIT_ISR
();

502 
	}
}

514 
	$HAL_ISR_FUNCTION
–
hÆKeyP‹t2I§
, 
P2INT_VECTOR
 )

516 
	`HAL_ENTER_ISR
();

518 i‡(
HAL_KEY_JOY_MOVE_PXIFG
 & 
HAL_KEY_JOY_MOVE_BIT
)

520 
	`hÆPro˚ssKeyI¡îru±
();

528 
HAL_KEY_JOY_MOVE_PXIFG
 = 0;

529 
HAL_KEY_CPU_PORT_2_IF
 = 0;

531 
	`CLEAR_SLEEP_MODE
();

532 
	`HAL_EXIT_ISR
();

533 
	}
}

538 
	$HÆKeyInô
(){
	}
}

539 
	$HÆKeyC⁄fig
(
boﬁ
 
öãºu±E«bÀ
, 
hÆKeyCBack_t
 
cback
){
	}
}

540 
uöt8
 
	$HÆKeyRód
(){  0;
	}
}

541 
	$HÆKeyPﬁl
(){
	}
}

	@Components/hal/target/CC2530EB/hal_lcd.c

13 
	~"hÆ_ty≥s.h
"

14 
	~"hÆ_lcd.h
"

15 
	~"OSAL.h
"

16 
	~"OnBﬂrd.h
"

17 
	~"hÆ_as£π.h
"

19 #i‡
deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

20 
	~"DebugTø˚.h
"

52 
	#HAL_LCD_MODE_PORT
 1

	)

53 
	#HAL_LCD_MODE_PIN
 7

	)

56 
	#HAL_LCD_CS_PORT
 1

	)

57 
	#HAL_LCD_CS_PIN
 2

	)

60 
	#HAL_LCD_CLK_PORT
 1

	)

61 
	#HAL_LCD_CLK_PIN
 5

	)

63 
	#HAL_LCD_MOSI_PORT
 1

	)

64 
	#HAL_LCD_MOSI_PIN
 6

	)

66 
	#HAL_LCD_MISO_PORT
 1

	)

67 
	#HAL_LCD_MISO_PIN
 7

	)

70 
	#HAL_SPI_CLOCK_POL_LO
 0x00

	)

71 
	#HAL_SPI_CLOCK_PHA_0
 0x00

	)

72 
	#HAL_SPI_TRANSFER_MSB_FIRST
 0x20

	)

75 
	#LCD_MAX_LINE_COUNT
 8

	)

76 
	#LCD_MAX_LINE_LENGTH
 21

	)

77 
	#LCD_MAX_BUF
 25

	)

85 
	#HAL_IO_SET
(
p‹t
, 
pö
, 
vÆ
Ë
	`HAL_IO_SET_PREP
’‹t,Öö, vÆ)

	)

86 
	#HAL_IO_SET_PREP
(
p‹t
, 
pö
, 
vÆ
Ë
	`°
–
P
##p‹t##
_
##pö## = vÆ; )

	)

88 
	#HAL_CONFIG_IO_OUTPUT
(
p‹t
, 
pö
, 
vÆ
Ë
	`HAL_CONFIG_IO_OUTPUT_PREP
’‹t,Öö, vÆ)

	)

89 
	#HAL_CONFIG_IO_OUTPUT_PREP
(
p‹t
, 
pö
, 
vÆ
Ë
	`°
–
P
##p‹t##
SEL
 &~
	`BV
(pin); \

90 
P
##
p‹t
##
_
##
pö
## = 
vÆ
; \

91 
P
##
p‹t
##
DIR
 |
	`BV
(
pö
); )

	)

93 
	#HAL_CONFIG_IO_PERIPHERAL
(
p‹t
, 
pö
Ë
	`HAL_CONFIG_IO_PERIPHERAL_PREP
’‹t,Öö)

	)

94 
	#HAL_CONFIG_IO_PERIPHERAL_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
SEL
 |
	`BV
’ö); )

	)

99 
	#LCD_SPI_BEGIN
(Ë
	`HAL_IO_SET
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 0);

	)

100 
	#LCD_SPI_END
() \

102 
	`asm
("NOP"); \

103 
	`asm
("NOP"); \

104 
	`asm
("NOP"); \

105 
	`asm
("NOP"); \

106 
	`HAL_IO_SET
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 1); \

107 }

	)

109 
	#LCD_SPI_TX
(
x
Ë{ 
U1CSR
 &~(
	`BV
(2Ë| BV(1)); 
U1DBUF
 = x;  !(U1CSR & BV(1)Ë); }

	)

110 
	#LCD_SPI_WAIT_RXRDY
(Ë{ !(
U1CSR
 & 
	`BV
(1))); }

	)

115 
	#LCD_DO_WRITE
(Ë
	`HAL_IO_SET
(
HAL_LCD_MODE_PORT
, 
HAL_LCD_MODE_PIN
, 1);

	)

116 
	#LCD_DO_CONTROL
(Ë
	`HAL_IO_SET
(
HAL_LCD_MODE_PORT
, 
HAL_LCD_MODE_PIN
, 0);

	)

119 #i‡(
HAL_LCD
 =
TRUE
)

124 
uöt8
 *
	gLcd_Löe1
;

125 c⁄° 
uöt8
 
	gascii_èbÀ_5x7
[95][5];

130 
HÆLcd_HW_Inô
();

131 
HÆLcd_HW_WaôUs
(
uöt16
 
i
);

132 
HÆLcd_HW_CÀ¨
();

133 
HÆLcd_HW_CÀ¨AŒS≥cCh¨s
();

134 
HÆLcd_HW_C⁄åﬁ
(
uöt8
 
cmd
);

135 
HÆLcd_HW_Wrôe
(
uöt8
 
d©a
);

136 
HÆLcd_HW_SëC⁄åa°
(
uöt8
 
vÆue
);

137 
HÆLcd_HW_WrôeCh¨
(
uöt8
 
löe
, uöt8 
cﬁ
, 
ãxt
);

138 
HÆLcd_HW_WrôeLöe
(
uöt8
 
löe
, c⁄° *
pText
);

141 
£t_ddøm_löe_cﬁ
(
uöt8
 
löe
,uöt8 
cﬁ
);

142 
Di•œyByã_5x7
(
uöt8
 
∑ge
,uöt8 
cﬁumn
,uöt8 
ãxt
);

147 #i‡(
HAL_LCD
 =
TRUE
)

153 
	$£t_ddøm_löe_cﬁ
(
uöt8
 
löe
,uöt8 
cﬁ
)

156 
uöt8
 
∑ge
,
cﬁl
,
cﬁl_l
,
cﬁl_h
;

157 
∑ge
 = 
löe
;

158 
cﬁl
 = 
cﬁ
;

159 
cﬁl_h
 = 
cﬁl
>>4;

160 
cﬁl_l
 = 
cﬁl
&0x0f;

161 
	`HÆLcd_HW_C⁄åﬁ
(0xB0+
∑ge
);

162 
	`HÆLcd_HW_WaôUs
(15);

163 
	`HÆLcd_HW_C⁄åﬁ
(0x10+
cﬁl_h
);

164 
	`HÆLcd_HW_WaôUs
(15);

165 
	`HÆLcd_HW_C⁄åﬁ
(0x00+
cﬁl_l
);

166 
	`HÆLcd_HW_WaôUs
(15);

167 
	}
}

175 
	$Di•œyByã_5x7
(
uöt8
 
∑ge
,uöt8 
cﬁumn
,uöt8 
ãxt
)

177 
j
,
k
;

179 if((
ãxt
>=0x20)&&(text<0x7e)){

180 
j
=
ãxt
-0x20;

181 
	`£t_ddøm_löe_cﬁ
(
∑ge
,
cﬁumn
);

182 
k
=0;k<5;k++)

184 
	`HÆLcd_HW_Wrôe
(
ascii_èbÀ_5x7
[
j
][
k
]);

187 
	`HÆLcd_HW_Wrôe
(0x00);

188 
cﬁumn
+=6;

189 }if(
ãxt
==0x00){

190 
	`£t_ddøm_löe_cﬁ
(
∑ge
,
cﬁumn
);

191 
k
=0;k<5;k++){

192 
	`HÆLcd_HW_Wrôe
(0x00);

196 
	}
}

204 
	$HÆLcdInô
()

206 #i‡(
HAL_LCD
 =
TRUE
)

207 
Lcd_Löe1
 = 
NULL
;

208 
	`HÆLcd_HW_Inô
();

210 
	}
}

233 
	$HÆLcdWrôeSåög
 ( *
°r
, 
uöt8
 
›ti⁄
)

235 #i‡(
HAL_LCD
 =
TRUE
)

237 
uöt8
 
°rLí
 = 0;

238 
uöt8
 
tŸÆLí
 = 0;

239 
uöt8
 *
buf
;

240 
uöt8
 
tmpLí
;

242 i‡–
Lcd_Löe1
 =
NULL
 )

244 
Lcd_Löe1
 = 
	`oßl_mem_Æloc
–
HAL_LCD_MAX_CHARS
+1 );

245 
	`HÆLcdWrôeSåög
( "TexasInstruments", 1 );

248 
°rLí
 = (
uöt8
)
	`oßl_°æí
–(*)
°r
 );

251 i‡–
°rLí
 > 
HAL_LCD_MAX_CHARS
 )

252 
°rLí
 = 
HAL_LCD_MAX_CHARS
;

254 i‡–
›ti⁄
 =
HAL_LCD_LINE_1
 )

257 
	`oßl_mem˝y
–
Lcd_Löe1
, 
°r
, 
°rLí
 );

258 
Lcd_Löe1
[
°rLí
] = '\0';

263 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
Lcd_Löe1
 );

264 
tŸÆLí
 = 
tmpLí
 + 1 + 
°rLí
 + 1;

265 
buf
 = 
	`oßl_mem_Æloc
–
tŸÆLí
 );

266 i‡–
buf
 !
NULL
 )

269 
	`oßl_mem˝y
–
buf
, 
Lcd_Löe1
, 
tmpLí
 );

270 
buf
[
tmpLí
++] = ' ';

271 
	`oßl_mem˝y
–&
buf
[
tmpLí
], 
°r
, 
°rLí
 );

272 
buf
[
tmpLí
+
°rLí
] = '\0';

275 #i‡
	`deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

277 #i‡
	`deföed
(
SERIAL_DEBUG_SUPPORTED
)

278 
	`debug_°r
–(
uöt8
*)
buf
 );

284 
	`oßl_mem_‰ì
–
buf
 );

289 
	`HÆLcd_HW_WrôeLöe
 (
›ti⁄
, 
°r
);

293 
	}
}

310 
	$HÆLcdWrôeVÆue
 ( 
uöt32
 
vÆue
, c⁄° 
uöt8
 
ødix
, uöt8 
›ti⁄
)

312 #i‡(
HAL_LCD
 =
TRUE
)

313 
uöt8
 
buf
[
LCD_MAX_BUF
];

315 
	`_…ﬂ
–
vÆue
, &
buf
[0], 
ødix
 );

316 
	`HÆLcdWrôeSåög
–(*)
buf
, 
›ti⁄
 );

318 
	}
}

323 
	$HÆLcdWrôeS¸ìn
–*
löe1
, *
löe2
 )

325 #i‡(
HAL_LCD
 =
TRUE
)

326 
	`HÆLcdWrôeSåög
–
löe1
, 1 );

327 
	`HÆLcdWrôeSåög
–
löe2
, 2 );

329 
	}
}

334 
	$HÆLcdWrôeSåögVÆue
–*
tôÀ
, 
uöt16
 
vÆue
, 
uöt8
 
f‹m©
, uöt8 
löe
 )

336 #i‡(
HAL_LCD
 =
TRUE
)

337 
uöt8
 
tmpLí
;

338 
uöt8
 
buf
[
LCD_MAX_BUF
];

339 
uöt32
 
îr
;

341 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
tôÀ
 );

342 
	`oßl_mem˝y
–
buf
, 
tôÀ
, 
tmpLí
 );

343 
buf
[
tmpLí
] = ' ';

344 
îr
 = (
uöt32
)(
vÆue
);

345 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
+1], 
f‹m©
 );

346 
	`HÆLcdWrôeSåög
–(*)
buf
, 
löe
 );

348 
	}
}

353 
	$HÆLcdWrôeSåögVÆueVÆue
–*
tôÀ
, 
uöt16
 
vÆue1
, 
uöt8
 
f‹m©1
,

354 
uöt16
 
vÆue2
, 
uöt8
 
f‹m©2
, uöt8 
löe
 )

357 #i‡(
HAL_LCD
 =
TRUE
)

359 
uöt8
 
tmpLí
;

360 
uöt8
 
buf
[
LCD_MAX_BUF
];

361 
uöt32
 
îr
;

363 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
tôÀ
 );

364 i‡–
tmpLí
 )

366 
	`oßl_mem˝y
–
buf
, 
tôÀ
, 
tmpLí
 );

367 
buf
[
tmpLí
++] = ' ';

370 
îr
 = (
uöt32
)(
vÆue1
);

371 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
], 
f‹m©1
 );

372 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
buf
 );

374 
buf
[
tmpLí
++] = ',';

375 
buf
[
tmpLí
++] = ' ';

376 
îr
 = (
uöt32
)(
vÆue2
);

377 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
], 
f‹m©2
 );

379 
	`HÆLcdWrôeSåög
–(*)
buf
, 
löe
 );

382 
	}
}

387 
	$HÆLcdDi•œyPî˚¡B¨
–*
tôÀ
, 
uöt8
 
vÆue
 )

389 #i‡(
HAL_LCD
 =
TRUE
)

391 
uöt8
 
≥r˚¡
;

392 
uöt8
 
À·Ovî
;

393 
uöt8
 
buf
[17];

394 
uöt32
 
îr
;

395 
uöt8
 
x
;

398 
	`HÆLcdWrôeSåög
–
tôÀ
, 
HAL_LCD_LINE_1
 );

400 i‡–
vÆue
 > 100 )

401 
vÆue
 = 100;

404 
≥r˚¡
 = (
uöt8
)(
vÆue
 / 10);

405 
À·Ovî
 = (
uöt8
)(
vÆue
 % 10);

408 
	`oßl_mem˝y
–
buf
, "[ ] ", 15 );

410  
x
 = 0; x < 
≥r˚¡
; x ++ )

412 
buf
[1+
x
] = '>';

415 i‡–
À·Ovî
 >= 5 )

416 
buf
[1+
x
] = '+';

418 
îr
 = (
uöt32
)
vÆue
;

419 
	`_…ﬂ
–
îr
, (
uöt8
*)&
buf
[13], 10 );

421 
	`HÆLcdWrôeSåög
–(*)
buf
, 
HAL_LCD_LINE_2
 );

425 
	}
}

427 #i‡(
HAL_LCD
 =
TRUE
)

435 
	$hÆLcd_C⁄figIO
()

437 
	`HAL_CONFIG_IO_OUTPUT
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 1);

438 
	}
}

443 
	$hÆLcd_C⁄figSPI
()

447 
uöt8
 
baud_exp⁄ít
;

448 
uöt8
 
baud_m™tisß
;

451 
PERCFG
 |= 0x02;

454 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_CLK_PORT
, 
HAL_LCD_CLK_PIN
);

455 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_MOSI_PORT
, 
HAL_LCD_MOSI_PIN
);

456 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_MISO_PORT
, 
HAL_LCD_MISO_PIN
);

462 
baud_exp⁄ít
 = 15;

463 
baud_m™tisß
 = 0;

466 
U1UCR
 = 0x80;

467 
U1CSR
 = 0x00;

468 
U1GCR
 = 
HAL_SPI_TRANSFER_MSB_FIRST
 | 
HAL_SPI_CLOCK_PHA_0
 | 
HAL_SPI_CLOCK_POL_LO
 | 
baud_exp⁄ít
;

469 
U1BAUD
 = 
baud_m™tisß
;

470 
	}
}

475 
	$HÆLcd_HW_Inô
()

478 
	`hÆLcd_C⁄figIO
();

481 
	`hÆLcd_C⁄figSPI
();

482 #ifde‡
GHOSTYU_LCD_12864


483 
	`HÆLcd_HW_C⁄åﬁ
(0xe2);

484 
	`HÆLcd_HW_WaôUs
(15000);

485 
	`HÆLcd_HW_C⁄åﬁ
(0x2c);

486 
	`HÆLcd_HW_WaôUs
(15);

487 
	`HÆLcd_HW_C⁄åﬁ
(0x2e);

488 
	`HÆLcd_HW_WaôUs
(15);

489 
	`HÆLcd_HW_C⁄åﬁ
(0x2f);

490 
	`HÆLcd_HW_WaôUs
(150);

491 
	`HÆLcd_HW_C⁄åﬁ
(0x23);

492 
	`HÆLcd_HW_WaôUs
(15);

493 
	`HÆLcd_HW_C⁄åﬁ
(0x81);

494 
	`HÆLcd_HW_WaôUs
(15);

495 
	`HÆLcd_HW_C⁄åﬁ
(0x28);

496 
	`HÆLcd_HW_WaôUs
(15);

498 
	`HÆLcd_HW_C⁄åﬁ
(0xa2);

499 
	`HÆLcd_HW_WaôUs
(15);

500 
	`HÆLcd_HW_C⁄åﬁ
(0xa0);

501 
	`HÆLcd_HW_WaôUs
(15);

502 
	`HÆLcd_HW_C⁄åﬁ
(0xc8);

503 
	`HÆLcd_HW_WaôUs
(15);

504 
	`HÆLcd_HW_C⁄åﬁ
(0x40);

505 
	`HÆLcd_HW_WaôUs
(15);

506 
	`HÆLcd_HW_C⁄åﬁ
(0xaf);

507 
	`HÆLcd_HW_WaôUs
(15);

508 
	`HÆLcd_HW_C⁄åﬁ
(0xa4);

509 
	`HÆLcd_HW_WaôUs
(15);

511 
	`HÆLcd_HW_CÀ¨
();

514 
	`HÆLcd_HW_C⁄åﬁ
(0xae);

515 
	`HÆLcd_HW_C⁄åﬁ
(0x00);

516 
	`HÆLcd_HW_C⁄åﬁ
(0x10);

517 
	`HÆLcd_HW_C⁄åﬁ
(0x40);

518 
	`HÆLcd_HW_C⁄åﬁ
(0x81);

519 
	`HÆLcd_HW_C⁄åﬁ
(0xcf);

520 
	`HÆLcd_HW_C⁄åﬁ
(0xa1);

521 
	`HÆLcd_HW_C⁄åﬁ
(0xc8);

522 
	`HÆLcd_HW_C⁄åﬁ
(0xa6);

523 
	`HÆLcd_HW_C⁄åﬁ
(0xa8);

524 
	`HÆLcd_HW_C⁄åﬁ
(0x3f);

525 
	`HÆLcd_HW_C⁄åﬁ
(0xd3);

526 
	`HÆLcd_HW_C⁄åﬁ
(0x00);

527 
	`HÆLcd_HW_C⁄åﬁ
(0xd5);

528 
	`HÆLcd_HW_C⁄åﬁ
(0x80);

529 
	`HÆLcd_HW_C⁄åﬁ
(0xd9);

530 
	`HÆLcd_HW_C⁄åﬁ
(0xf1);

531 
	`HÆLcd_HW_C⁄åﬁ
(0xda);

532 
	`HÆLcd_HW_C⁄åﬁ
(0x12);

533 
	`HÆLcd_HW_C⁄åﬁ
(0xdb);

534 
	`HÆLcd_HW_C⁄åﬁ
(0x40);

535 
	`HÆLcd_HW_C⁄åﬁ
(0x20);

536 
	`HÆLcd_HW_C⁄åﬁ
(0x02);

537 
	`HÆLcd_HW_C⁄åﬁ
(0x8d);

538 
	`HÆLcd_HW_C⁄åﬁ
(0x14);

539 
	`HÆLcd_HW_C⁄åﬁ
(0xa4);

540 
	`HÆLcd_HW_C⁄åﬁ
(0xa6);

541 
	`HÆLcd_HW_C⁄åﬁ
(0xaf);

545 
	`HÆLcd_HW_CÀ¨
();

546 
	`£t_ddøm_löe_cﬁ
(0,0);

551 
	}
}

556 
	$HÆLcd_HW_C⁄åﬁ
(
uöt8
 
cmd
)

560 
uöt8
 
dú
 = 
P1DIR
;

561 
uöt8
 
£l
 = 
P1SEL
;

562 
P1DIR
 |=
	`BV
(7);

567 
P1SEL
 &=~(
	`BV
(7));

569 
	`LCD_SPI_BEGIN
();

570 
	`LCD_DO_CONTROL
();

571 
	`LCD_SPI_TX
(
cmd
);

572 
	`LCD_SPI_WAIT_RXRDY
();

573 
	`LCD_SPI_END
();

576 
P1DIR
 =
dú
;

577 
P1SEL
 =
£l
;

579 
	}
}

584 
	$HÆLcd_HW_Wrôe
(
uöt8
 
d©a
)

587 
uöt8
 
dú
 = 
P1DIR
;

588 
uöt8
 
£l
 = 
P1SEL
;

593 
P1DIR
 |=
	`BV
(7);

598 
P1SEL
 &=~(
	`BV
(7));

600 
	`LCD_SPI_BEGIN
();

601 
	`LCD_DO_WRITE
();

602 
	`LCD_SPI_TX
(
d©a
);

603 
	`LCD_SPI_WAIT_RXRDY
();

604 
	`LCD_SPI_END
();

606 
P1DIR
 =
dú
;

607 
P1SEL
 =
£l
;

609 
	}
}

614 
	$HÆLcd_HW_SëC⁄åa°
(
uöt8
 
vÆue
)

617 
	}
}

622 
	$HÆLcd_HW_CÀ¨
()

625 
i
,
j
;

626 
i
=0;i<8;i++){

627 
	`£t_ddøm_löe_cﬁ
(
i
,0);

628 
j
=0;j<128;j++){

629 
	`HÆLcd_HW_Wrôe
(0x00);

632 
	}
}

637 
	$HÆLcd_HW_CÀ¨AŒS≥cCh¨s
()

640 
	}
}

648 
	$HÆLcd_HW_WrôeCh¨
(
uöt8
 
löe
, uöt8 
cﬁ
, 
ãxt
)

650 
uöt8
 
cﬁumn
 = 1+
cﬁ
*6;

651 
uöt8
 
∑ge
 = 
löe
-1;

652 if(
cﬁ
 > 
LCD_MAX_LINE_LENGTH
)

654 
	`Di•œyByã_5x7
(
∑ge
,
cﬁumn
,()
ãxt
);

655 
	}
}

662 
	$HÆLcd_HW_WrôeLöe
(
uöt8
 
löe
, c⁄° *
pText
)

664 
uöt8
 
cou¡
;

665 
uöt8
 
tŸÆLígth
 = (uöt8)
	`oßl_°æí
–(*)
pText
 );

667 
cou¡
=0; cou¡<
tŸÆLígth
; count++)

669 
	`HÆLcd_HW_WrôeCh¨
(
löe
, 
cou¡
, (*(
pText
++)));

673 
cou¡
=
tŸÆLígth
; cou¡<
LCD_MAX_LINE_LENGTH
;count++)

675 
	`HÆLcd_HW_WrôeCh¨
(
löe
, 
cou¡
, 0x00);

677 
	}
}

688 
	$HÆLcd_HW_WaôUs
(
uöt16
 
mi¸oSecs
)

690 
mi¸oSecs
--)

693 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

694 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

695 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

696 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

697 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

698 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

699 
	`asm
("nop");ásm("nop");

701 
	}
}

705 c⁄° 
uöt8
 
	gascii_èbÀ_5x7
[95][5]={

	@Components/hal/target/CC2530EB/hal_lcd_default.c

43 
	~"hÆ_ty≥s.h
"

44 
	~"hÆ_lcd.h
"

45 
	~"OSAL.h
"

46 
	~"OnBﬂrd.h
"

47 
	~"hÆ_as£π.h
"

49 #i‡
deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

50 
	~"DebugTø˚.h
"

71 
	#HAL_LCD_MODE_PORT
 0

	)

72 
	#HAL_LCD_MODE_PIN
 0

	)

74 
	#HAL_LCD_RESET_PORT
 1

	)

75 
	#HAL_LCD_RESET_PIN
 1

	)

77 
	#HAL_LCD_CS_PORT
 1

	)

78 
	#HAL_LCD_CS_PIN
 2

	)

81 
	#HAL_LCD_CLK_PORT
 1

	)

82 
	#HAL_LCD_CLK_PIN
 5

	)

84 
	#HAL_LCD_MOSI_PORT
 1

	)

85 
	#HAL_LCD_MOSI_PIN
 6

	)

87 
	#HAL_LCD_MISO_PORT
 1

	)

88 
	#HAL_LCD_MISO_PIN
 7

	)

91 
	#HAL_SPI_CLOCK_POL_LO
 0x00

	)

92 
	#HAL_SPI_CLOCK_PHA_0
 0x00

	)

93 
	#HAL_SPI_TRANSFER_MSB_FIRST
 0x20

	)

96 
	#LCD_MAX_LINE_COUNT
 3

	)

97 
	#LCD_MAX_LINE_LENGTH
 16

	)

98 
	#LCD_MAX_BUF
 25

	)

103 
	#OSC_OFF
 0x00

	)

104 
	#OSC_ON
 0x01

	)

105 
	#POWER_SAVE_OFF
 0x00

	)

106 
	#POWER_SAVE_ON
 0x02

	)

107 
	#SET_POWER_SAVE_MODE
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x0C | (›ti⁄s))

	)

110 
	#CGROM
 0x00

	)

111 
	#CGRAM
 0x01

	)

112 
	#COM_FORWARD
 0x00

	)

113 
	#COM_BACKWARD
 0x02

	)

114 
	#TWO_LINE
 0x00

	)

115 
	#THREE_LINE
 0x04

	)

116 
	#FUNCTION_SET
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x10 | (›ti⁄s))

	)

119 
	#LINE1
 0x00

	)

120 
	#LINE2
 0x01

	)

121 
	#LINE3
 0x02

	)

122 
	#LINE4
 0x03

	)

123 
	#SET_DISPLAY_START_LINE
(
löe
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x18 | (löe))

	)

126 
	#BIAS_1_5
 0x00

	)

127 
	#BIAS_1_4
 0x01

	)

128 
	#SET_BIAS_CTRL
(
büs
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x1C | (büs))

	)

131 
	#VOLTAGE_DIVIDER_OFF
 0x00

	)

132 
	#VOLTAGE_DIVIDER_ON
 0x01

	)

133 
	#CONVERTER_AND_REG_OFF
 0x00

	)

134 
	#CONVERTER_AND_REG_ON
 0x04

	)

135 
	#SET_POWER_CTRL
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x20 | (›ti⁄s))

	)

138 
	#DISPLAY_CTRL_ON
 0x01

	)

139 
	#DISPLAY_CTRL_OFF
 0x00

	)

140 
	#DISPLAY_CTRL_BLINK_ON
 0x02

	)

141 
	#DISPLAY_CTRL_BLINK_OFF
 0x00

	)

142 
	#DISPLAY_CTRL_CURSOR_ON
 0x04

	)

143 
	#DISPLAY_CTRL_CURSOR_OFF
 0x00

	)

144 
	#SET_DISPLAY_CTRL
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x28 | (›ti⁄s))

	)

147 
	#SET_DDRAM_ADDR
(
ch¨Index
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x80 | (ch¨Index))

	)

148 
	#SET_GCRAM_CHAR
(
•ecIndex
Ë
	`HÆLcd_HW_C⁄åﬁ
(0xC0 | (•ecIndex))

	)

151 
	#CONTRAST_CTRL_REGISTER
 0x10

	)

152 
	#SET_ICONRAM_ADDR
(
addr
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x40 | (addr))

	)

155 
	#LINE_1_AND_2
 0x01

	)

156 
	#LINE_2_AND_3
 0x02

	)

157 
	#NORMAL_DISPLAY
 0x00

	)

158 
	#SET_DOUBLE_HEIGHT
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x08 | (›ti⁄s))

	)

164 
	#HAL_IO_SET
(
p‹t
, 
pö
, 
vÆ
Ë
	`HAL_IO_SET_PREP
’‹t,Öö, vÆ)

	)

165 
	#HAL_IO_SET_PREP
(
p‹t
, 
pö
, 
vÆ
Ë
	`°
–
P
##p‹t##
_
##pö## = vÆ; )

	)

167 
	#HAL_CONFIG_IO_OUTPUT
(
p‹t
, 
pö
, 
vÆ
Ë
	`HAL_CONFIG_IO_OUTPUT_PREP
’‹t,Öö, vÆ)

	)

168 
	#HAL_CONFIG_IO_OUTPUT_PREP
(
p‹t
, 
pö
, 
vÆ
Ë
	`°
–
P
##p‹t##
SEL
 &~
	`BV
(pin); \

169 
P
##
p‹t
##
_
##
pö
## = 
vÆ
; \

170 
P
##
p‹t
##
DIR
 |
	`BV
(
pö
); )

	)

172 
	#HAL_CONFIG_IO_PERIPHERAL
(
p‹t
, 
pö
Ë
	`HAL_CONFIG_IO_PERIPHERAL_PREP
’‹t,Öö)

	)

173 
	#HAL_CONFIG_IO_PERIPHERAL_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
SEL
 |
	`BV
’ö); )

	)

178 
	#LCD_SPI_BEGIN
(Ë
	`HAL_IO_SET
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 0);

	)

179 
	#LCD_SPI_END
() \

181 
	`asm
("NOP"); \

182 
	`asm
("NOP"); \

183 
	`asm
("NOP"); \

184 
	`asm
("NOP"); \

185 
	`HAL_IO_SET
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 1); \

186 }

	)

188 
	#LCD_SPI_TX
(
x
Ë{ 
U1CSR
 &~(
	`BV
(2Ë| BV(1)); 
U1DBUF
 = x;  !(U1CSR & BV(1)Ë); }

	)

189 
	#LCD_SPI_WAIT_RXRDY
(Ë{ !(
U1CSR
 & 
	`BV
(1))); }

	)

193 
	#LCD_DO_WRITE
(Ë
	`HAL_IO_SET
(
HAL_LCD_MODE_PORT
, 
HAL_LCD_MODE_PIN
, 1);

	)

194 
	#LCD_DO_CONTROL
(Ë
	`HAL_IO_SET
(
HAL_LCD_MODE_PORT
, 
HAL_LCD_MODE_PIN
, 0);

	)

196 
	#LCD_ACTIVATE_RESET
(Ë
	`HAL_IO_SET
(
HAL_LCD_RESET_PORT
, 
HAL_LCD_RESET_PIN
, 0);

	)

197 
	#LCD_RELEASE_RESET
(Ë
	`HAL_IO_SET
(
HAL_LCD_RESET_PORT
, 
HAL_LCD_RESET_PIN
, 1);

	)

199 #i‡(
HAL_LCD
 =
TRUE
)

204 
uöt8
 *
	gLcd_Löe1
;

210 
HÆLcd_HW_Inô
();

211 
HÆLcd_HW_WaôUs
(
uöt16
 
i
);

212 
HÆLcd_HW_CÀ¨
();

213 
HÆLcd_HW_CÀ¨AŒS≥cCh¨s
();

214 
HÆLcd_HW_C⁄åﬁ
(
uöt8
 
cmd
);

215 
HÆLcd_HW_Wrôe
(
uöt8
 
d©a
);

216 
HÆLcd_HW_SëC⁄åa°
(
uöt8
 
vÆue
);

217 
HÆLcd_HW_WrôeCh¨
(
uöt8
 
löe
, uöt8 
cﬁ
, 
ãxt
);

218 
HÆLcd_HW_WrôeLöe
(
uöt8
 
löe
, c⁄° *
pText
);

230 
	$HÆLcdInô
()

232 #i‡(
HAL_LCD
 =
TRUE
)

233 
Lcd_Löe1
 = 
NULL
;

234 
	`HÆLcd_HW_Inô
();

236 
	}
}

266 
	$HÆLcdWrôeSåög
 ( *
°r
, 
uöt8
 
›ti⁄
)

268 #i‡(
HAL_LCD
 =
TRUE
)

270 
uöt8
 
°rLí
 = 0;

271 
uöt8
 
tŸÆLí
 = 0;

272 
uöt8
 *
buf
;

273 
uöt8
 
tmpLí
;

275 i‡–
Lcd_Löe1
 =
NULL
 )

277 
Lcd_Löe1
 = 
	`oßl_mem_Æloc
–
HAL_LCD_MAX_CHARS
+1 );

278 
	`HÆLcdWrôeSåög
( "TexasInstruments", 1 );

281 
°rLí
 = (
uöt8
)
	`oßl_°æí
–(*)
°r
 );

284 i‡–
°rLí
 > 
HAL_LCD_MAX_CHARS
 )

285 
°rLí
 = 
HAL_LCD_MAX_CHARS
;

287 i‡–
›ti⁄
 =
HAL_LCD_LINE_1
 )

290 
	`oßl_mem˝y
–
Lcd_Löe1
, 
°r
, 
°rLí
 );

291 
Lcd_Löe1
[
°rLí
] = '\0';

296 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
Lcd_Löe1
 );

297 
tŸÆLí
 = 
tmpLí
 + 1 + 
°rLí
 + 1;

298 
buf
 = 
	`oßl_mem_Æloc
–
tŸÆLí
 );

299 i‡–
buf
 !
NULL
 )

302 
	`oßl_mem˝y
–
buf
, 
Lcd_Löe1
, 
tmpLí
 );

303 
buf
[
tmpLí
++] = ' ';

304 
	`oßl_mem˝y
–&
buf
[
tmpLí
], 
°r
, 
°rLí
 );

305 
buf
[
tmpLí
+
°rLí
] = '\0';

308 #i‡
	`deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

310 #i‡
	`deföed
(
SERIAL_DEBUG_SUPPORTED
)

311 
	`debug_°r
–(
uöt8
*)
buf
 );

317 
	`oßl_mem_‰ì
–
buf
 );

322 
	`HÆLcd_HW_WrôeLöe
 (
›ti⁄
, 
°r
);

326 
	}
}

339 
	$HÆLcdWrôeVÆue
 ( 
uöt32
 
vÆue
, c⁄° 
uöt8
 
ødix
, uöt8 
›ti⁄
)

341 #i‡(
HAL_LCD
 =
TRUE
)

342 
uöt8
 
buf
[
LCD_MAX_BUF
];

344 
	`_…ﬂ
–
vÆue
, &
buf
[0], 
ødix
 );

345 
	`HÆLcdWrôeSåög
–(*)
buf
, 
›ti⁄
 );

347 
	}
}

359 
	$HÆLcdWrôeS¸ìn
–*
löe1
, *
löe2
 )

361 #i‡(
HAL_LCD
 =
TRUE
)

362 
	`HÆLcdWrôeSåög
–
löe1
, 1 );

363 
	`HÆLcdWrôeSåög
–
löe2
, 2 );

365 
	}
}

379 
	$HÆLcdWrôeSåögVÆue
–*
tôÀ
, 
uöt16
 
vÆue
, 
uöt8
 
f‹m©
, uöt8 
löe
 )

381 #i‡(
HAL_LCD
 =
TRUE
)

382 
uöt8
 
tmpLí
;

383 
uöt8
 
buf
[
LCD_MAX_BUF
];

384 
uöt32
 
îr
;

386 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
tôÀ
 );

387 
	`oßl_mem˝y
–
buf
, 
tôÀ
, 
tmpLí
 );

388 
buf
[
tmpLí
] = ' ';

389 
îr
 = (
uöt32
)(
vÆue
);

390 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
+1], 
f‹m©
 );

391 
	`HÆLcdWrôeSåög
–(*)
buf
, 
löe
 );

393 
	}
}

409 
	$HÆLcdWrôeSåögVÆueVÆue
–*
tôÀ
, 
uöt16
 
vÆue1
, 
uöt8
 
f‹m©1
,

410 
uöt16
 
vÆue2
, 
uöt8
 
f‹m©2
, uöt8 
löe
 )

413 #i‡(
HAL_LCD
 =
TRUE
)

415 
uöt8
 
tmpLí
;

416 
uöt8
 
buf
[
LCD_MAX_BUF
];

417 
uöt32
 
îr
;

419 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
tôÀ
 );

420 i‡–
tmpLí
 )

422 
	`oßl_mem˝y
–
buf
, 
tôÀ
, 
tmpLí
 );

423 
buf
[
tmpLí
++] = ' ';

426 
îr
 = (
uöt32
)(
vÆue1
);

427 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
], 
f‹m©1
 );

428 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
buf
 );

430 
buf
[
tmpLí
++] = ',';

431 
buf
[
tmpLí
++] = ' ';

432 
îr
 = (
uöt32
)(
vÆue2
);

433 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
], 
f‹m©2
 );

435 
	`HÆLcdWrôeSåög
–(*)
buf
, 
löe
 );

438 
	}
}

450 
	$HÆLcdDi•œyPî˚¡B¨
–*
tôÀ
, 
uöt8
 
vÆue
 )

452 #i‡(
HAL_LCD
 =
TRUE
)

454 
uöt8
 
≥r˚¡
;

455 
uöt8
 
À·Ovî
;

456 
uöt8
 
buf
[17];

457 
uöt32
 
îr
;

458 
uöt8
 
x
;

461 
	`HÆLcdWrôeSåög
–
tôÀ
, 
HAL_LCD_LINE_1
 );

463 i‡–
vÆue
 > 100 )

464 
vÆue
 = 100;

467 
≥r˚¡
 = (
uöt8
)(
vÆue
 / 10);

468 
À·Ovî
 = (
uöt8
)(
vÆue
 % 10);

471 
	`oßl_mem˝y
–
buf
, "[ ] ", 15 );

473  
x
 = 0; x < 
≥r˚¡
; x ++ )

475 
buf
[1+
x
] = '>';

478 i‡–
À·Ovî
 >= 5 )

479 
buf
[1+
x
] = '+';

481 
îr
 = (
uöt32
)
vÆue
;

482 
	`_…ﬂ
–
îr
, (
uöt8
*)&
buf
[13], 10 );

484 
	`HÆLcdWrôeSåög
–(*)
buf
, 
HAL_LCD_LINE_2
 );

488 
	}
}

490 #i‡(
HAL_LCD
 =
TRUE
)

504 
	$hÆLcd_C⁄figIO
()

507 
	`HAL_CONFIG_IO_OUTPUT
(
HAL_LCD_MODE_PORT
, 
HAL_LCD_MODE_PIN
, 1);

508 
	`HAL_CONFIG_IO_OUTPUT
(
HAL_LCD_RESET_PORT
, 
HAL_LCD_RESET_PIN
, 1);

509 
	`HAL_CONFIG_IO_OUTPUT
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 1);

510 
	}
}

521 
	$hÆLcd_C⁄figSPI
()

525 
uöt8
 
baud_exp⁄ít
;

526 
uöt8
 
baud_m™tisß
;

529 
PERCFG
 |= 0x02;

532 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_CLK_PORT
, 
HAL_LCD_CLK_PIN
);

533 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_MOSI_PORT
, 
HAL_LCD_MOSI_PIN
);

534 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_MISO_PORT
, 
HAL_LCD_MISO_PIN
);

540 
baud_exp⁄ít
 = 15;

541 
baud_m™tisß
 = 0;

544 
U1UCR
 = 0x80;

545 
U1CSR
 = 0x00;

546 
U1GCR
 = 
HAL_SPI_TRANSFER_MSB_FIRST
 | 
HAL_SPI_CLOCK_PHA_0
 | 
HAL_SPI_CLOCK_POL_LO
 | 
baud_exp⁄ít
;

547 
U1BAUD
 = 
baud_m™tisß
;

548 
	}
}

559 
	$HÆLcd_HW_Inô
()

562 
	`hÆLcd_C⁄figIO
();

565 
	`hÆLcd_C⁄figSPI
();

568 
	`LCD_ACTIVATE_RESET
();

569 
	`HÆLcd_HW_WaôUs
(15000);

570 
	`LCD_RELEASE_RESET
();

571 
	`HÆLcd_HW_WaôUs
(15);

574 
	`FUNCTION_SET
(
CGRAM
 | 
COM_FORWARD
 | 
THREE_LINE
);

577 
	`HÆLcd_HW_SëC⁄åa°
(15);

580 
	`SET_POWER_SAVE_MODE
(
OSC_OFF
 | 
POWER_SAVE_ON
);

581 
	`SET_POWER_CTRL
(
VOLTAGE_DIVIDER_ON
 | 
CONVERTER_AND_REG_ON
);

582 
	`SET_BIAS_CTRL
(
BIAS_1_5
);

583 
	`HÆLcd_HW_WaôUs
(21000);

586 
	`HÆLcd_HW_CÀ¨
();

587 
	`HÆLcd_HW_CÀ¨AŒS≥cCh¨s
();

588 
	`SET_DISPLAY_CTRL
(
DISPLAY_CTRL_ON
 | 
DISPLAY_CTRL_BLINK_OFF
 | 
DISPLAY_CTRL_CURSOR_OFF
);

589 
	}
}

600 
	$HÆLcd_HW_C⁄åﬁ
(
uöt8
 
cmd
)

602 
	`LCD_SPI_BEGIN
();

603 
	`LCD_DO_CONTROL
();

604 
	`LCD_SPI_TX
(
cmd
);

605 
	`LCD_SPI_WAIT_RXRDY
();

606 
	`LCD_SPI_END
();

607 
	}
}

618 
	$HÆLcd_HW_Wrôe
(
uöt8
 
d©a
)

620 
	`LCD_SPI_BEGIN
();

621 
	`LCD_DO_WRITE
();

622 
	`LCD_SPI_TX
(
d©a
);

623 
	`LCD_SPI_WAIT_RXRDY
();

624 
	`LCD_SPI_END
();

625 
	}
}

636 
	$HÆLcd_HW_SëC⁄åa°
(
uöt8
 
vÆue
)

638 
	`SET_ICONRAM_ADDR
(
CONTRAST_CTRL_REGISTER
);

639 
	`HÆLcd_HW_Wrôe
(
vÆue
);

640 
	}
}

651 
	$HÆLcd_HW_CÀ¨
()

653 
uöt8
 
n
;

655 
	`SET_DDRAM_ADDR
(0x00);

656 
n
 = 0;Ç < (
LCD_MAX_LINE_COUNT
 * 
LCD_MAX_LINE_LENGTH
);Ç++)

658 
	`HÆLcd_HW_Wrôe
(' ');

660 
	}
}

671 
	$HÆLcd_HW_CÀ¨AŒS≥cCh¨s
()

673 
uöt8
 
n
 = 0;

675 
	`SET_GCRAM_CHAR
(0);

676 
n
 = 0;Ç < (8 * 8);Ç++)

678 
	`HÆLcd_HW_Wrôe
(0x00);

680 
	}
}

692 
	$HÆLcd_HW_WrôeCh¨
(
uöt8
 
löe
, uöt8 
cﬁ
, 
ãxt
)

694 i‡(
cﬁ
 < 
LCD_MAX_LINE_LENGTH
)

696 
	`SET_DDRAM_ADDR
((
löe
 - 1Ë* 
LCD_MAX_LINE_LENGTH
 + 
cﬁ
);

697 
	`HÆLcd_HW_Wrôe
(
ãxt
);

703 
	}
}

715 
	$HÆLcd_HW_WrôeLöe
(
uöt8
 
löe
, c⁄° *
pText
)

717 
uöt8
 
cou¡
;

718 
uöt8
 
tŸÆLígth
 = (uöt8)
	`oßl_°æí
–(*)
pText
 );

721 
cou¡
=0; cou¡<
tŸÆLígth
; count++)

723 
	`HÆLcd_HW_WrôeCh¨
(
löe
, 
cou¡
, (*(
pText
++)));

727 
cou¡
=
tŸÆLígth
; cou¡<
LCD_MAX_LINE_LENGTH
;count++)

729 
	`HÆLcd_HW_WrôeCh¨
(
löe
, 
cou¡
, ' ');

731 
	}
}

742 
	$HÆLcd_HW_WaôUs
(
uöt16
 
mi¸oSecs
)

744 
mi¸oSecs
--)

747 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

748 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

749 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

750 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

751 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

752 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

753 
	`asm
("nop");ásm("nop");

755 
	}
}

	@Components/hal/target/CC2530EB/hal_led.c

43 
	~"hÆ_mcu.h
"

44 
	~"hÆ_defs.h
"

45 
	~"hÆ_ty≥s.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"hÆ_Àd.h
"

48 
	~"oßl.h
"

49 
	~"hÆ_bﬂrd.h
"

64 
uöt8
 
	mmode
;

65 
uöt8
 
	mtodo
;

66 
uöt8
 
	m⁄P˘
;

67 
uöt16
 
	mtime
;

68 
uöt32
 
	m√xt
;

69 } 
	tHÆLedC⁄åﬁ_t
;

73 
HÆLedC⁄åﬁ_t
 
	mHÆLedC⁄åﬁTabÀ
[
HAL_LED_DEFAULT_MAX_LEDS
];

74 
uöt8
 
	m¶ìpA˘ive
;

75 } 
	tHÆLedSètus_t
;

83 
uöt8
 
	gHÆLedSèã
;

85 #i‡
HAL_LED
 =
TRUE


86 
uöt8
 
	gHÆSÀïLedSèã
;

87 
uöt8
 
	g¥eBlökSèã
;

91 #ifde‡
BLINK_LEDS


92 
HÆLedSètus_t
 
	gHÆLedSètusC⁄åﬁ
;

98 #i‡(
HAL_LED
 =
TRUE
)

99 
HÆLedUpd©e
 ();

100 
HÆLedOnOff
 (
uöt8
 
Àds
, uöt8 
mode
);

116 
	$HÆLedInô
 ()

118 #i‡(
HAL_LED
 =
TRUE
)

120 
	`HÆLedSë
 (
HAL_LED_ALL
, 
HAL_LED_MODE_OFF
);

122 #ifde‡
BLINK_LEDS


124 
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
 = 
FALSE
;

126 
	}
}

137 
uöt8
 
	$HÆLedSë
 (
uöt8
 
Àds
, uöt8 
mode
)

140 #i‡(
	`deföed
 (
BLINK_LEDS
)Ë&& (
HAL_LED
 =
TRUE
)

141 
uöt8
 
Àd
;

142 
HÆLedC⁄åﬁ_t
 *
°s
;

144 
mode
)

146 
HAL_LED_MODE_BLINK
:

148 
	`HÆLedBlök
 (
Àds
, 1, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
);

151 
HAL_LED_MODE_FLASH
:

153 
	`HÆLedBlök
 (
Àds
, 
HAL_LED_DEFAULT_FLASH_COUNT
, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
);

156 
HAL_LED_MODE_ON
:

157 
HAL_LED_MODE_OFF
:

158 
HAL_LED_MODE_TOGGLE
:

160 
Àd
 = 
HAL_LED_1
;

161 
Àds
 &
HAL_LED_ALL
;

162 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

164 
Àds
)

166 i‡(
Àds
 & 
Àd
)

168 i‡(
mode
 !
HAL_LED_MODE_TOGGLE
)

170 
°s
->
mode
 = mode;

174 
°s
->
mode
 ^
HAL_LED_MODE_ON
;

176 
	`HÆLedOnOff
 (
Àd
, 
°s
->
mode
);

177 
Àds
 ^
Àd
;

179 
Àd
 <<= 1;

180 
°s
++;

188 #ñi‡(
HAL_LED
 =
TRUE
)

189 
	`LedOnOff
(
Àds
, 
mode
);

192 (Ë
Àds
;

193 (Ë
mode
;

196  ( 
HÆLedSèã
 );

198 
	}
}

213 
	$HÆLedBlök
 (
uöt8
 
Àds
, uöt8 
numBlöks
, uöt8 
≥r˚¡
, 
uöt16
 
≥riod
)

215 #i‡(
	`deföed
 (
BLINK_LEDS
)Ë&& (
HAL_LED
 =
TRUE
)

216 
uöt8
 
Àd
;

217 
HÆLedC⁄åﬁ_t
 *
°s
;

219 i‡(
Àds
 && 
≥r˚¡
 && 
≥riod
)

221 i‡(
≥r˚¡
 < 100)

223 
Àd
 = 
HAL_LED_1
;

224 
Àds
 &
HAL_LED_ALL
;

225 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

227 
Àds
)

229 i‡(
Àds
 & 
Àd
)

232 if(
°s
->
mode
 < 
HAL_LED_MODE_BLINK
 )

233 
¥eBlökSèã
 |(
Àd
 & 
HÆLedSèã
);

235 
°s
->
mode
 = 
HAL_LED_MODE_OFF
;

236 
°s
->
time
 = 
≥riod
;

237 
°s
->
⁄P˘
 = 
≥r˚¡
;

238 
°s
->
todo
 = 
numBlöks
;

239 i‡(!
numBlöks
Ë
°s
->
mode
 |
HAL_LED_MODE_FLASH
;

240 
°s
->
√xt
 = 
	`oßl_GëSy°emClock
();

241 
°s
->
mode
 |
HAL_LED_MODE_BLINK
;

242 
Àds
 ^
Àd
;

244 
Àd
 <<= 1;

245 
°s
++;

248 
	`oßl_°›_timîEx
(
HÆ_TaskID
, 
HAL_LED_BLINK_EVENT
);

249 
	`oßl_£t_evít
 (
HÆ_TaskID
, 
HAL_LED_BLINK_EVENT
);

253 
	`HÆLedSë
 (
Àds
, 
HAL_LED_MODE_ON
);

258 
	`HÆLedSë
 (
Àds
, 
HAL_LED_MODE_OFF
);

260 #ñi‡(
HAL_LED
 =
TRUE
)

261 
≥r˚¡
 = (
Àds
 & 
HÆLedSèã
Ë? 
HAL_LED_MODE_OFF
 : 
HAL_LED_MODE_ON
;

262 
	`HÆLedOnOff
 (
Àds
, 
≥r˚¡
);

265 (Ë
Àds
;

266 (Ë
numBlöks
;

267 (Ë
≥r˚¡
;

268 (Ë
≥riod
;

270 
	}
}

272 #i‡(
HAL_LED
 =
TRUE
)

282 
	$HÆLedUpd©e
 ()

284 
uöt8
 
Àd
;

285 
uöt8
 
p˘
;

286 
uöt8
 
Àds
;

287 
HÆLedC⁄åﬁ_t
 *
°s
;

288 
uöt32
 
time
;

289 
uöt16
 
√xt
;

290 
uöt16
 
waô
;

292 
√xt
 = 0;

293 
Àd
 = 
HAL_LED_1
;

294 
Àds
 = 
HAL_LED_ALL
;

295 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

298 i‡(!
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
)

300 
Àds
)

302 i‡(
Àds
 & 
Àd
)

304 i‡(
°s
->
mode
 & 
HAL_LED_MODE_BLINK
)

306 
time
 = 
	`oßl_GëSy°emClock
();

307 i‡(
time
 >
°s
->
√xt
)

309 i‡(
°s
->
mode
 & 
HAL_LED_MODE_ON
)

311 
p˘
 = 100 - 
°s
->
⁄P˘
;

312 
°s
->
mode
 &~
HAL_LED_MODE_ON
;

313 
	`HÆLedOnOff
 (
Àd
, 
HAL_LED_MODE_OFF
);

315 i‡(!(
°s
->
mode
 & 
HAL_LED_MODE_FLASH
))

317 
°s
->
todo
--;

320 i‡–(!
°s
->
todo
Ë&& !(°s->
mode
 & 
HAL_LED_MODE_FLASH
) )

322 
°s
->
mode
 ^
HAL_LED_MODE_BLINK
;

326 
p˘
 = 
°s
->
⁄P˘
;

327 
°s
->
mode
 |
HAL_LED_MODE_ON
;

328 
	`HÆLedOnOff
 (
Àd
, 
HAL_LED_MODE_ON
);

330 i‡(
°s
->
mode
 & 
HAL_LED_MODE_BLINK
)

332 
waô
 = (((
uöt32
)
p˘
 * (uöt32)
°s
->
time
) / 100);

333 
°s
->
√xt
 = 
time
 + 
waô
;

338 
waô
 = 0;

340 
	`HÆLedSë
 (
Àd
, ((
¥eBlökSèã
 &Üed)!=0)?
HAL_LED_MODE_ON
:
HAL_LED_MODE_OFF
);

342 
¥eBlökSèã
 &(
Àd
 ^ 0xFF);

347 
waô
 = 
°s
->
√xt
 - 
time
;

350 i‡(!
√xt
 || ( 
waô
 && (wait <Çext) ))

352 
√xt
 = 
waô
;

355 
Àds
 ^
Àd
;

357 
Àd
 <<= 1;

358 
°s
++;

361 i‡(
√xt
)

363 
	`oßl_°¨t_timîEx
(
HÆ_TaskID
, 
HAL_LED_BLINK_EVENT
, 
√xt
);

366 
	}
}

378 
	$HÆLedOnOff
 (
uöt8
 
Àds
, uöt8 
mode
)

380 i‡(
Àds
 & 
HAL_LED_1
)

382 i‡(
mode
 =
HAL_LED_MODE_ON
)

384 
	`HAL_TURN_ON_LED1
();

388 
	`HAL_TURN_OFF_LED1
();

392 i‡(
Àds
 & 
HAL_LED_2
)

394 i‡(
mode
 =
HAL_LED_MODE_ON
)

396 
	`HAL_TURN_ON_LED2
();

400 
	`HAL_TURN_OFF_LED2
();

404 i‡(
Àds
 & 
HAL_LED_3
)

406 i‡(
mode
 =
HAL_LED_MODE_ON
)

408 
	`HAL_TURN_ON_LED3
();

412 
	`HAL_TURN_OFF_LED3
();

416 i‡(
Àds
 & 
HAL_LED_4
)

418 i‡(
mode
 =
HAL_LED_MODE_ON
)

420 
	`HAL_TURN_ON_LED4
();

424 
	`HAL_TURN_OFF_LED4
();

429 i‡(
mode
)

431 
HÆLedSèã
 |
Àds
;

435 
HÆLedSèã
 &(
Àds
 ^ 0xFF);

437 
	}
}

449 
uöt8
 
	$HÆLedGëSèã
 ()

451 #i‡(
HAL_LED
 =
TRUE
)

452  
HÆLedSèã
;

456 
	}
}

467 
	$HÆLedE¡îSÀï
( )

469 #ifde‡
BLINK_LEDS


471 
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
 = 
TRUE
;

474 #i‡(
HAL_LED
 =
TRUE
)

476 
HÆSÀïLedSèã
 = 0;

477 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED1
();

478 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED2
() << 1;

479 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED3
() << 2;

480 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED4
() << 3;

483 
	`HÆLedOnOff
 (
HAL_LED_ALL
, 
HAL_LED_MODE_OFF
);

486 
	}
}

497 
	$HÆLedExôSÀï
( )

499 #i‡(
HAL_LED
 =
TRUE
)

501 
	`HÆLedOnOff
(
HÆSÀïLedSèã
, 
HAL_LED_MODE_ON
);

504 
	`HÆLedUpd©e
();

507 #ifde‡
BLINK_LEDS


509 
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
 = 
FALSE
;

511 
	}
}

	@Components/hal/target/CC2530EB/hal_mac_cfg.h

40 #i‚de‡
HAL_MAC_CFG_H


41 
	#HAL_MAC_CFG_H


	)

57 
	#HAL_MAC_RSSI_OFFSET
 -73

	)

	@Components/hal/target/CC2530EB/hal_mcu.h

40 #i‚de‡
_HAL_MCU_H


41 
	#_HAL_MCU_H


	)

53 
	~"hÆ_defs.h
"

54 
	~"hÆ_ty≥s.h
"

61 
	#HAL_MCU_CC2530


	)

70 #ifde‡
__IAR_SYSTEMS_ICC__


71 
	~<ioCC2530.h
>

72 
	#HAL_COMPILER_IAR


	)

73 
	#HAL_MCU_LITTLE_ENDIAN
(Ë
__LITTLE_ENDIAN__


	)

74 
	#_PRAGMA
(
x
Ë
	`_Pøgma
(#x)

	)

75 
	#HAL_ISR_FUNC_DECLARATION
(
f
,
v
Ë
	`_PRAGMA
(
ve˘‹
=vË
__√¨_func
 
__öãºu±
 
	`f
()

	)

76 
	#HAL_ISR_FUNC_PROTOTYPE
(
f
,
v
Ë
	`_PRAGMA
(
ve˘‹
=vË
__√¨_func
 
__öãºu±
 
	`f
()

	)

77 
	#HAL_ISR_FUNCTION
(
f
,
v
Ë
	`HAL_ISR_FUNC_PROTOTYPE
(f,v); 
	`HAL_ISR_FUNC_DECLARATION
(f,v)

	)

80 #ñi‡
deföed
 
__KEIL__


81 
	~<CC2530.h
>

82 
	#HAL_COMPILER_KEIL


	)

83 
	#HAL_MCU_LITTLE_ENDIAN
(Ë0

	)

84 
	#HAL_ISR_FUNC_DECLARATION
(
f
,
v
Ë
	`f
(Ë
öãºu±
 
	)
v

85 
	#HAL_ISR_FUNC_PROTOTYPE
(
f
,
v
Ë
	`f
()

	)

86 
	#HAL_ISR_FUNCTION
(
f
,
v
Ë
	`HAL_ISR_FUNC_PROTOTYPE
(f,v); 
	`HAL_ISR_FUNC_DECLARATION
(f,v)

	)

98 
	#HAL_ENABLE_INTERRUPTS
(Ë
	`°
–
EA
 = 1; )

	)

99 
	#HAL_DISABLE_INTERRUPTS
(Ë
	`°
–
EA
 = 0; )

	)

100 
	#HAL_INTERRUPTS_ARE_ENABLED
(Ë(
EA
)

	)

102 
	thÆI¡Sèã_t
;

103 
	#HAL_ENTER_CRITICAL_SECTION
(
x
Ë
	`°
–x = 
EA
; 
	`HAL_DISABLE_INTERRUPTS
(); )

	)

104 
	#HAL_EXIT_CRITICAL_SECTION
(
x
Ë
	`°
–
EA
 = x; )

	)

105 
	#HAL_CRITICAL_STATEMENT
(
x
Ë
	`°
–
hÆI¡Sèã_t
 
_s
; 
	`HAL_ENTER_CRITICAL_SECTION
(_s); x; 
	`HAL_EXIT_CRITICAL_SECTION
(_s); )

	)

107 #ifde‡
__IAR_SYSTEMS_ICC__


113 
	#HAL_ENTER_ISR
(Ë{ 
hÆI¡Sèã_t
 
_i§I¡Sèã
 = 
EA
; 
	`HAL_ENABLE_INTERRUPTS
();

	)

114 
	#HAL_EXIT_ISR
(Ë
EA
 = 
_i§I¡Sèã
; }

	)

116 
	#HAL_ENTER_ISR
()

	)

117 
	#HAL_EXIT_ISR
()

	)

124 
	#WD_EN
 
	`BV
(3)

	)

125 
	#WD_MODE
 
	`BV
(2)

	)

126 
	#WD_INT_1900_USEC
 (
	`BV
(0Ë| BV(1))

	)

127 
	#WD_RESET1
 (0xA0 | 
WD_EN
 | 
WD_INT_1900_USEC
)

	)

128 
	#WD_RESET2
 (0x50 | 
WD_EN
 | 
WD_INT_1900_USEC
)

	)

129 
	#WD_KICK
(Ë
	`°
–
WDCTL
 = (0xA0 | WDCTL & 0x0F); WDCTL = (0x50 | WDCTL & 0x0F); )

	)

132 
	#HAL_SYSTEM_RESET
(Ë
	`°
–
	`HAL_DISABLE_INTERRUPTS
(); 
WDCTL
 = 
WD_RESET1
; WDCTL = 
WD_RESET2
; ;;); )

	)

138 
	#REV_A
 0x00

	)

139 
	#REV_B
 0x11

	)

140 
	#REV_C
 0x20

	)

141 
	#REV_D
 0x21

	)

149 
	#PCON_IDLE
 
	`BV
(0Ë

	)

152 
	#OSC_PD
 
	`BV
(2Ë

	)

153 
	#PMODE
 (
	`BV
(1Ë| BV(0)Ë

	)

156 
	#XOSC_STB
 
	`BV
(6Ë

	)

157 
	#HFRC_STB
 
	`BV
(5Ë

	)

160 
	#OSC_PD
 
	`BV
(2Ë

	)

164 
	#OSC
 
	`BV
(6)

	)

165 
	#TICKSPD
(
x
Ë(x << 3)

	)

166 
	#CLKSPD
(
x
Ë(x << 0)

	)

167 
	#CLKCONCMD_32MHZ
 (0)

	)

168 
	#CLKCONCMD_16MHZ
 (
	`CLKSPD
(1Ë| 
	`TICKSPD
(1Ë| 
OSC
)

	)

171 
	#LDRDY
 
	`BV
(0Ë

	)

175 #ifde‡
POWER_SAVING


176 vﬁ©ûê
__d©a
 
uöt8
 
hÆSÀïPc⁄VÆue
;

181 
	#CLEAR_SLEEP_MODE
(Ë
	`°
–
hÆSÀïPc⁄VÆue
 = 0; )

	)

182 
	#ALLOW_SLEEP_MODE
(Ë
	`°
–
hÆSÀïPc⁄VÆue
 = 
PCON_IDLE
; )

	)

184 
	#CLEAR_SLEEP_MODE
()

	)

185 
	#ALLOW_SLEEP_MODE
()

	)

	@Components/hal/target/CC2530EB/hal_oad.c

48 
	~"comdef.h
"

49 
	~"hÆ_bﬂrd_cfg.h
"

50 
	~"hÆ_dma.h
"

51 
	~"hÆ_Êash.h
"

52 
	~"hÆ_ﬂd.h
"

53 
	~"hÆ_ty≥s.h
"

60 #i‡
HAL_OAD_BOOT_CODE


61 
hÆDMADesc_t
 
	gdmaCh0
;

69 
uöt16
 
runPﬁy
(uöt16 
¸c
, 
uöt8
 
vÆ
);

70 #i‡
HAL_OAD_XNV_IS_SPI


71 
HÆSPIRód
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
);

72 
HÆSPIWrôe
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
);

75 #i‡
HAL_OAD_BOOT_CODE


76 
vddWaô
(
uöt8
 
vdd
);

77 
dl2rc
();

78 
uöt16
 
¸cCÆc
();

96 #¥agm®
loˇti⁄
="NEAR_CODE"

97 
	$maö
()

99 
	`HAL_BOARD_INIT
();

100 
	`vddWaô
(
VDD_MIN_RUN
);

102 #i‡
HAL_OAD_XNV_IS_SPI


103 
	`XNV_SPI_INIT
();

108 
	`HAL_DMA_SET_ADDR_DESC0
–&
dmaCh0
 );

112 
uöt16
 
¸c
[2];

114 
	`HÆFœshRód
(
HAL_OAD_CRC_ADDR
 / 
HAL_FLASH_PAGE_SIZE
,

115 
HAL_OAD_CRC_ADDR
 % 
HAL_FLASH_PAGE_SIZE
,

116 (
uöt8
 *)
¸c
, (crc));

118 i‡(
¸c
[0] == crc[1])

122 i‡((
¸c
[0] !0Ë&& (¸c[0] =
	`¸cCÆc
()))

124 
¸c
[1] = crc[0];

125 
	`HÆFœshWrôe
((
HAL_OAD_CRC_ADDR
 / 
HAL_FLASH_WORD_SIZE
), (
uöt8
 *)
¸c
, 1);

129 
	`dl2rc
();

134 
	`asm
("LJMP 0x800\n");

135 
	}
}

146 
	$vddWaô
(
uöt8
 
vdd
)

148 
uöt8
 
˙t
 = 16;

152 
ADCCON3
 = 0x0F;

153 !(
ADCCON1
 & 0x80));

154 } 
ADCH
 < 
vdd
);

155 } --
˙t
);

156 
	}
}

169 
	$dl2rc
()

171 
¥ómbÀ_t
 
¥ómbÀ
;

172 
uöt32
 
o£t
;

173 
uöt16
 
addr
 = 
HAL_OAD_RC_START
 / 
HAL_FLASH_WORD_SIZE
;

174 
uöt8
 
buf
[4];

176 
	`vddWaô
(
VDD_MIN_OAD
);

177 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_DL
);

179 
o£t
 = 0; o£à< 
¥ómbÀ
.
Àn
; o£à+
HAL_FLASH_WORD_SIZE
)

181 
	`HÆOADRód
(
o£t
, 
buf
, 
HAL_FLASH_WORD_SIZE
, 
HAL_OAD_DL
);

182 i‡((
addr
 % (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
)) == 0)

184 
	`HÆFœshEø£
(
addr
 / (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
));

186 
	`HÆFœshWrôe
(
addr
++, 
buf
, 1);

188 
	}
}

199 
uöt16
 
	$¸cCÆc
()

201 
¥ómbÀ_t
 
¥ómbÀ
;

202 
uöt32
 
o£t
;

203 
uöt16
 
¸c
 = 0;

205 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_RC
);

206 i‡(
¥ómbÀ
.
Àn
 > 
HAL_OAD_DL_SIZE
)

212 
o£t
 = 0; o£à< 
¥ómbÀ
.
Àn
; oset++)

214 i‡(
o£t
 =
HAL_OAD_CRC_OSET
)

216 
o£t
 += 3;

220 
uöt8
 
buf
;

221 
	`HÆOADRód
(
o£t
, &
buf
, 1, 
HAL_OAD_RC
);

222 
¸c
 = 
	`runPﬁy
(¸c, 
buf
);

227 
¸c
 = 
	`runPﬁy
(crc, 0);

228 
¸c
 = 
	`runPﬁy
(crc, 0);

230  
¸c
;

231 
	}
}

244 
uöt16
 
	$runPﬁy
(
uöt16
 
¸c
, 
uöt8
 
vÆ
)

246 c⁄° 
uöt16
 
pﬁy
 = 0x1021;

247 
uöt8
 
˙t
;

249 
˙t
 = 0; c¡ < 8; c¡++, 
vÆ
 <<= 1)

251 
uöt8
 
msb
 = (
¸c
 & 0x8000) ? 1 : 0;

253 
¸c
 <<= 1;

254 i‡(
vÆ
 & 0x80Ë
¸c
 |= 0x0001;

255 i‡(
msb
Ë
¸c
 ^
pﬁy
;

258  
¸c
;

259 
	}
}

270 
uöt8
 
	$HÆOADChkDL
(
uöt8
 
dlImagePªambÀOff£t
)

272 
¥ómbÀ_t
 
¥ómbÀ
;

273 
uöt32
 
o£t
;

274 
uöt16
 
¸c
 = 0, 
¸c2
;

276 
	`HÆOADRód
(
dlImagePªambÀOff£t
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_DL
);

279 
o£t
 = 0; o£à< 
¥ómbÀ
.
Àn
; oset++)

281 i‡((
o£t
 < 
HAL_OAD_CRC_OSET
) || (oset >= HAL_OAD_CRC_OSET+4))

283 
uöt8
 
buf
;

284 
	`HÆOADRód
(
o£t
, &
buf
, 1, 
HAL_OAD_DL
);

285 
¸c
 = 
	`runPﬁy
(¸c, 
buf
);

290 
¸c
 = 
	`runPﬁy
(crc, 0);

291 
¸c
 = 
	`runPﬁy
(crc, 0);

293 
	`HÆOADRód
(
HAL_OAD_CRC_OSET
, (
uöt8
 *)&
¸c2
, (¸c2), 
HAL_OAD_DL
);

294  (
¸c2
 =
¸c
Ë? 
SUCCESS
 : 
FAILURE
;

295 
	}
}

307 
	$HÆOADInvRC
()

309 
uöt16
 
¸c
[2] = {0,0xFFFF};

310 
	`HÆFœshWrôe
((
HAL_OAD_CRC_ADDR
 / 
HAL_FLASH_WORD_SIZE
), (
uöt8
 *)
¸c
, 1);

311 
	}
}

325 
	$HÆOADRód
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
)

327 i‡(
HAL_OAD_RC
 !
ty≥
)

329 #i‡
HAL_OAD_XNV_IS_INT


330 
¥ómbÀ_t
 
¥ómbÀ
;

332 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_RC
);

334 
o£t
 +
HAL_OAD_RC_START
 + 
HAL_OAD_DL_OSET
;

335 #ñi‡
HAL_OAD_XNV_IS_SPI


336 
o£t
 +
HAL_OAD_DL_OSET
;

337 
	`HÆSPIRód
(
o£t
, 
pBuf
, 
Àn
);

343 
o£t
 +
HAL_OAD_RC_START
;

346 
	`HÆFœshRód
(
o£t
 / 
HAL_FLASH_PAGE_SIZE
, o£à% HAL_FLASH_PAGE_SIZE, 
pBuf
, 
Àn
);

347 
	}
}

366 
	$HÆOADWrôe
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
)

368 i‡(
HAL_OAD_RC
 !
ty≥
)

370 #i‡
HAL_OAD_XNV_IS_INT


371 
¥ómbÀ_t
 
¥ómbÀ
;

373 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_RC
);

375 
o£t
 +
HAL_OAD_RC_START
 + 
HAL_OAD_DL_OSET
;

376 #ñi‡
HAL_OAD_XNV_IS_SPI


377 
o£t
 +
HAL_OAD_DL_OSET
;

378 
	`HÆSPIWrôe
(
o£t
, 
pBuf
, 
Àn
);

384 
o£t
 +
HAL_OAD_RC_START
;

387 i‡((
o£t
 % 
HAL_FLASH_PAGE_SIZE
) == 0)

389 
	`HÆFœshEø£
(
o£t
 / 
HAL_FLASH_PAGE_SIZE
);

392 
	`HÆFœshWrôe
(
o£t
 / 
HAL_FLASH_WORD_SIZE
, 
pBuf
, 
Àn
 / HAL_FLASH_WORD_SIZE);

393 
	}
}

395 #i‡
HAL_OAD_XNV_IS_INT


405 
uöt32
 
	$HÆOADAvaû
()

413  
HAL_OAD_DL_MAX
 - 
HAL_OAD_DL_OSET
;

414 
	}
}

416 #ñi‡
HAL_OAD_XNV_IS_SPI


422 
	#XNV_STAT_CMD
 0x05

	)

423 
	#XNV_WREN_CMD
 0x06

	)

424 
	#XNV_WRPG_CMD
 0x0A

	)

425 
	#XNV_READ_CMD
 0x0B

	)

427 
	#XNV_STAT_WIP
 0x01

	)

438 
xnvSPIWrôe
(
uöt8
 
ch
);

439 
	$xnvSPIWrôe
(
uöt8
 
ch
)

441 
	`XNV_SPI_TX
(
ch
);

442 
	`XNV_SPI_WAIT_RXRDY
();

443 
	}
}

454 
uöt32
 
	$HÆOADAvaû
()

456  
HAL_OAD_DL_MAX
 - 
HAL_OAD_DL_OSET
;

457 
	}
}

470 
	$HÆSPIRód
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
)

472 #i‡!
HAL_OAD_BOOT_CODE


473 
uöt8
 
shdw
 = 
P1DIR
;

474 
hÆI¡Sèã_t
 
his
;

475 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

476 
P1DIR
 |
	`BV
(3);

479 
	`XNV_SPI_BEGIN
();

481 
	`xnvSPIWrôe
(
XNV_STAT_CMD
);

482 } 
	`XNV_SPI_RX
(Ë& 
XNV_STAT_WIP
);

483 
	`XNV_SPI_END
();

484 
	`asm
("NOP");ásm("NOP");

486 
	`XNV_SPI_BEGIN
();

487 
	`xnvSPIWrôe
(
XNV_READ_CMD
);

488 
	`xnvSPIWrôe
(
addr
 >> 16);

489 
	`xnvSPIWrôe
(
addr
 >> 8);

490 
	`xnvSPIWrôe
(
addr
);

491 
	`xnvSPIWrôe
(0);

493 
Àn
--)

495 
	`xnvSPIWrôe
(0);

496 *
pBuf
++ = 
	`XNV_SPI_RX
();

498 
	`XNV_SPI_END
();

500 #i‡!
HAL_OAD_BOOT_CODE


501 
P1DIR
 = 
shdw
;

502 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

504 
	}
}

517 
	$HÆSPIWrôe
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
)

519 
uöt8
 
˙t
;

520 #i‡!
HAL_OAD_BOOT_CODE


521 
uöt8
 
shdw
 = 
P1DIR
;

522 
hÆI¡Sèã_t
 
his
;

523 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

524 
P1DIR
 |
	`BV
(3);

527 
Àn
)

529 
	`XNV_SPI_BEGIN
();

531 
	`xnvSPIWrôe
(
XNV_STAT_CMD
);

532 } 
	`XNV_SPI_RX
(Ë& 
XNV_STAT_WIP
);

533 
	`XNV_SPI_END
();

534 
	`asm
("NOP");ásm("NOP");

536 
	`XNV_SPI_BEGIN
();

537 
	`xnvSPIWrôe
(
XNV_WREN_CMD
);

538 
	`XNV_SPI_END
();

539 
	`asm
("NOP");ásm("NOP");

541 
	`XNV_SPI_BEGIN
();

542 
	`xnvSPIWrôe
(
XNV_WRPG_CMD
);

543 
	`xnvSPIWrôe
(
addr
 >> 16);

544 
	`xnvSPIWrôe
(
addr
 >> 8);

545 
	`xnvSPIWrôe
(
addr
);

548 
˙t
 = 0 - (
uöt8
)
addr
;

549 i‡(
˙t
)

551 
addr
 +
˙t
;

555 
addr
 += 256;

560 
	`xnvSPIWrôe
(*
pBuf
++);

561 
˙t
--;

562 
Àn
--;

563 } 
Àn
 && 
˙t
);

564 
	`XNV_SPI_END
();

567 #i‡!
HAL_OAD_BOOT_CODE


568 
P1DIR
 = 
shdw
;

569 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

571 
	}
}

573 #îr‹ 
InvÆid
 
Xåa
-
NV
 
OAD
.

	@Components/hal/target/CC2530EB/hal_oad.h

39 #i‚de‡
HAL_OAD_H


40 
	#HAL_OAD_H


	)

46 
	~"hÆ_bﬂrd_cfg.h
"

47 
	~"hÆ_ty≥s.h
"

53 #i‡!
deföed
 
HAL_OAD_BOOT_CODE


54 
	#HAL_OAD_BOOT_CODE
 
FALSE


	)

58 
	#PACK_1


	)

65 
	#HAL_OAD_RC_START
 0x0800

	)

66 
	#HAL_OAD_CRC_ADDR
 0x0888

	)

67 
	#HAL_OAD_CRC_OSET
 (
HAL_OAD_CRC_ADDR
 - 
HAL_OAD_RC_START
)

	)

72 
	#HAL_OAD_XNV_IS_INT
 
FALSE


	)

73 
	#HAL_OAD_XNV_IS_SPI
 !
HAL_OAD_XNV_IS_INT


	)

79 
	#HAL_OAD_BOOT_PG_CNT
 2

	)

85 #i‡
HAL_OAD_XNV_IS_SPI
 && !
deföed
 
HAL_BOARD_CC2530EB_REV13


86 
	#HAL_OAD_DL_MAX
 0x40000

	)

87 
	#HAL_OAD_DL_SIZE
 (0x40000 - ((
HAL_NV_PAGE_CNT
+
HAL_OAD_BOOT_PG_CNT
)*
HAL_FLASH_PAGE_SIZE
))

	)

88 
	#HAL_OAD_DL_OSET
 0x0

89 #ñ£

	)

90 
	#HAL_OAD_DL_MAX
 (0x40000 - ((
HAL_NV_PAGE_CNT
+
HAL_OAD_BOOT_PG_CNT
)*
HAL_FLASH_PAGE_SIZE
))

	)

91 
	#HAL_OAD_DL_SIZE
 (
HAL_OAD_DL_MAX
 / 2)

	)

92 
	#HAL_OAD_DL_OSET
 (
HAL_OAD_DL_MAX
 / 2)

	)

96 
	#PREAMBLE_OFFSET
 0x8C

	)

98 #i‡
HAL_OAD_XNV_IS_INT


99 
	#VDD_MIN_OAD
 
VDD_MIN_NV


	)

101 
	#VDD_MIN_OAD
 
VDD_MIN_XNV


	)

109 
	mHAL_OAD_RC
,

110 
	mHAL_OAD_DL


111 } 
	timage_t
;

114 
uöt8
 
	mmagic
[2];

115 
uöt32
 
	mÀn
;

116 
uöt16
 
	mvîs
;

117 
uöt16
 
	mm™u
;

118 
uöt16
 
	m¥od
;

119 } 
	t¥ómbÀ_t
;

125 
uöt8
 
HÆOADChkDL
(uöt8 
dlImagePªambÀOff£t
);

126 
HÆOADInvRC
();

127 
uöt32
 
HÆOADAvaû
();

128 
HÆOADRód
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
);

129 
HÆOADWrôe
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
);

	@Components/hal/target/CC2530EB/hal_ota.c

47 
	~"comdef.h
"

48 
	~"hÆ_bﬂrd_cfg.h
"

49 
	~"hÆ_dma.h
"

50 
	~"hÆ_Êash.h
"

51 
	~"hÆ_Ÿa.h
"

52 
	~"hÆ_ty≥s.h
"

54 
	~"Ÿa_comm⁄.h
"

59 #i‡
HAL_OTA_XNV_IS_SPI


60 
	#XNV_STAT_CMD
 0x05

	)

61 
	#XNV_WREN_CMD
 0x06

	)

62 
	#XNV_WRPG_CMD
 0x0A

	)

63 
	#XNV_READ_CMD
 0x0B

	)

65 
	#XNV_STAT_WIP
 0x01

	)

73 
uöt16
 
	m¸c
[2];

74 
uöt32
 
	m¥ogømSize
;

75 } 
	tOTA_CrcC⁄åﬁ_t
;

80 
OTA_CrcC⁄åﬁ_t
 
	gOTA_¸cC⁄åﬁ
;

82 #i‡
HAL_OTA_BOOT_CODE


83 
hÆDMADesc_t
 
	gdmaCh0
;

89 
uöt16
 
runPﬁy
(uöt16 
¸c
, 
uöt8
 
vÆ
);

91 #i‡
HAL_OTA_XNV_IS_SPI


92 
HÆSPIRód
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
);

93 
HÆSPIWrôe
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
);

94 
xnvSPIWrôe
(
uöt8
 
ch
);

97 #i‡
HAL_OTA_BOOT_CODE


98 
dl2rc
();

99 
uöt16
 
¸cCÆc
();

110 #¥agm®
loˇti⁄
="NEAR_CODE"

111 
	$maö
()

113 
	`HAL_BOARD_INIT
();

114 #i‡
HAL_OTA_XNV_IS_SPI


115 
	`XNV_SPI_INIT
();

120 
	`HAL_DMA_SET_ADDR_DESC0
–&
dmaCh0
 );

124 
	`HÆFœshRód
(
HAL_OTA_CRC_ADDR
 / 
HAL_FLASH_PAGE_SIZE
,

125 
HAL_OTA_CRC_ADDR
 % 
HAL_FLASH_PAGE_SIZE
,

126 (
uöt8
 *)&
OTA_¸cC⁄åﬁ
, (OTA_crcControl));

128 i‡(
OTA_¸cC⁄åﬁ
.
¸c
[0] == OTA_crcControl.crc[1])

132 i‡((
OTA_¸cC⁄åﬁ
.
¸c
[0] !0Ë&& (OTA_¸cC⁄åﬁ.¸c[0] =
	`¸cCÆc
()))

134 
OTA_¸cC⁄åﬁ
.
¸c
[1] = OTA_crcControl.crc[0];

135 
	`HÆFœshWrôe
((
HAL_OTA_CRC_ADDR
 / 
HAL_FLASH_WORD_SIZE
), (
uöt8
 *)
OTA_¸cC⁄åﬁ
.
¸c
, 1);

139 
	`dl2rc
();

144 
	`asm
("LJMP 0x800\n");

145 
	}
}

158 
	$dl2rc
()

160 
uöt32
 
o£t
;

161 
OTA_SubEÀmítHdr_t
 
subEÀmít
;

162 
OTA_ImageHódî_t
 
hódî
;

163 
uöt16
 
addr
 = 
HAL_OTA_RC_START
 / 
HAL_FLASH_WORD_SIZE
;

164 
uöt8
 
buf
[4];

167 
	`HÆOTARód
(0, (
uöt8
 *)&
hódî
, (
OTA_ImageHódî_t
), 
HAL_OTA_DL
);

168 
	`HÆOTARód
(
hódî
.
hódîLígth
, (
uöt8
*)&
subEÀmít
, 
OTA_SUB_ELEMENT_HDR_LEN
, 
HAL_OTA_DL
);

170 
o£t
 = 0; o£à< 
subEÀmít
.
Àngth
; o£à+
HAL_FLASH_WORD_SIZE
)

172 
	`HÆOTARód
(
o£t
 + 
hódî
.
hódîLígth
 + 
OTA_SUB_ELEMENT_HDR_LEN
, 
buf
, 
HAL_FLASH_WORD_SIZE
, 
HAL_OTA_DL
);

173 i‡((
addr
 % (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
)) == 0)

175 
	`HÆFœshEø£
(
addr
 / (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
));

177 
	`HÆFœshWrôe
(
addr
++, 
buf
, 1);

179 
	}
}

190 
uöt16
 
	$¸cCÆc
()

192 
uöt32
 
o£t
;

193 
uöt16
 
¸c
 = 0;

196 
o£t
 = 0; o£à< 
OTA_¸cC⁄åﬁ
.
¥ogømSize
; oset++)

198 i‡((
o£t
 < 
HAL_OTA_CRC_OSET
) || (oset >= HAL_OTA_CRC_OSET + 4))

200 
uöt8
 
buf
;

201 
	`HÆOTARód
(
o£t
, &
buf
, 1, 
HAL_OTA_RC
);

202 
¸c
 = 
	`runPﬁy
(¸c, 
buf
);

206  
¸c
;

207 
	}
}

220 
uöt16
 
	$runPﬁy
(
uöt16
 
¸c
, 
uöt8
 
vÆ
)

222 c⁄° 
uöt16
 
pﬁy
 = 0x1021;

223 
uöt8
 
˙t
;

225 
˙t
 = 0; c¡ < 8; c¡++, 
vÆ
 <<= 1)

227 
uöt8
 
msb
 = (
¸c
 & 0x8000) ? 1 : 0;

229 
¸c
 <<= 1;

230 i‡(
vÆ
 & 0x80Ë
¸c
 |= 0x0001;

231 i‡(
msb
Ë
¸c
 ^
pﬁy
;

234  
¸c
;

235 
	}
}

246 
uöt8
 
	$HÆOTAChkDL
(
uöt8
 
dlImagePªambÀOff£t
)

248 ()
dlImagePªambÀOff£t
;

250 
uöt32
 
o£t
;

251 
uöt16
 
¸c
 = 0;

252 
OTA_CrcC⁄åﬁ_t
 
¸cC⁄åﬁ
;

253 
OTA_ImageHódî_t
 
hódî
;

254 
uöt32
 
¥ogømSèπ
;

256 #i‡
HAL_OTA_XNV_IS_SPI


257 
	`XNV_SPI_INIT
();

261 
	`HÆOTARód
(0, (
uöt8
 *)&
hódî
, (
OTA_ImageHódî_t
), 
HAL_OTA_DL
);

264 
¥ogømSèπ
 = 
hódî
.
hódîLígth
 + 
OTA_SUB_ELEMENT_HDR_LEN
;

267 
	`HÆOTARód
(
¥ogømSèπ
 + 
HAL_OTA_CRC_OSET
, (
uöt8
 *)&
¸cC⁄åﬁ
, (¸cC⁄åﬁ), 
HAL_OTA_DL
);

269 i‡((
¸cC⁄åﬁ
.
¥ogømSize
 > 
HAL_OTA_DL_MAX
) || (crcControl.programSize == 0))

271  
FAILURE
;

275 
o£t
 = 0; o£à< 
¸cC⁄åﬁ
.
¥ogømSize
; oset++)

277 i‡((
o£t
 < 
HAL_OTA_CRC_OSET
) || (oset >= HAL_OTA_CRC_OSET+4))

279 
uöt8
 
buf
;

280 
	`HÆOTARód
(
o£t
 + 
¥ogømSèπ
, &
buf
, 1, 
HAL_OTA_DL
);

281 
¸c
 = 
	`runPﬁy
(¸c, 
buf
);

285  (
¸cC⁄åﬁ
.
¸c
[0] =¸cË? 
SUCCESS
 : 
FAILURE
;

286 
	}
}

298 
	$HÆOTAInvRC
()

300 
uöt16
 
¸c
[2] = {0,0xFFFF};

301 
	`HÆFœshWrôe
((
HAL_OTA_CRC_ADDR
 / 
HAL_FLASH_WORD_SIZE
), (
uöt8
 *)
¸c
, 1);

302 
	}
}

316 
	$HÆOTARód
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
)

318 i‡(
HAL_OTA_RC
 !
ty≥
)

320 #i‡
HAL_OTA_XNV_IS_INT


321 
¥ómbÀ_t
 
¥ómbÀ
;

323 
	`HÆOTARód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OTA_RC
);

324 
o£t
 +
HAL_OTA_RC_START
 + 
HAL_OTA_DL_OSET
;

325 #ñi‡
HAL_OTA_XNV_IS_SPI


326 
o£t
 +
HAL_OTA_DL_OSET
;

327 
	`HÆSPIRód
(
o£t
, 
pBuf
, 
Àn
);

333 
o£t
 +
HAL_OTA_RC_START
;

336 
	`HÆFœshRód
(
o£t
 / 
HAL_FLASH_PAGE_SIZE
, o£à% HAL_FLASH_PAGE_SIZE, 
pBuf
, 
Àn
);

337 
	}
}

356 
	$HÆOTAWrôe
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
)

358 i‡(
HAL_OTA_RC
 !
ty≥
)

360 #i‡
HAL_OTA_XNV_IS_INT


361 
o£t
 +
HAL_OTA_RC_START
 + 
HAL_OTA_DL_OSET
;

362 #ñi‡
HAL_OTA_XNV_IS_SPI


363 
o£t
 +
HAL_OTA_DL_OSET
;

364 
	`HÆSPIWrôe
(
o£t
, 
pBuf
, 
Àn
);

370 
o£t
 +
HAL_OTA_RC_START
;

373 i‡((
o£t
 % 
HAL_FLASH_PAGE_SIZE
) == 0)

375 
	`HÆFœshEø£
(
o£t
 / 
HAL_FLASH_PAGE_SIZE
);

378 
	`HÆFœshWrôe
(
o£t
 / 
HAL_FLASH_WORD_SIZE
, 
pBuf
, 
Àn
 / HAL_FLASH_WORD_SIZE);

379 
	}
}

390 
uöt32
 
	$HÆOTAAvaû
()

392  
HAL_OTA_DL_MAX
 - 
HAL_OTA_DL_OSET
;

393 
	}
}

395 #i‡
HAL_OTA_XNV_IS_SPI


405 
	$xnvSPIWrôe
(
uöt8
 
ch
)

407 
	`XNV_SPI_TX
(
ch
);

408 
	`XNV_SPI_WAIT_RXRDY
();

409 
	}
}

422 
	$HÆSPIRód
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
)

424 #i‡!
HAL_OTA_BOOT_CODE


425 
uöt8
 
shdw
 = 
P1DIR
;

426 
hÆI¡Sèã_t
 
his
;

427 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

428 
P1DIR
 |
	`BV
(3);

431 
	`XNV_SPI_BEGIN
();

434 
	`xnvSPIWrôe
(
XNV_STAT_CMD
);

435 } 
	`XNV_SPI_RX
(Ë& 
XNV_STAT_WIP
);

436 
	`XNV_SPI_END
();

437 
	`asm
("NOP");ásm("NOP");

439 
	`XNV_SPI_BEGIN
();

440 
	`xnvSPIWrôe
(
XNV_READ_CMD
);

441 
	`xnvSPIWrôe
(
addr
 >> 16);

442 
	`xnvSPIWrôe
(
addr
 >> 8);

443 
	`xnvSPIWrôe
(
addr
);

444 
	`xnvSPIWrôe
(0);

446 
Àn
--)

448 
	`xnvSPIWrôe
(0);

449 *
pBuf
++ = 
	`XNV_SPI_RX
();

451 
	`XNV_SPI_END
();

453 #i‡!
HAL_OTA_BOOT_CODE


454 
P1DIR
 = 
shdw
;

455 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

457 
	}
}

470 
	$HÆSPIWrôe
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
)

472 
uöt8
 
˙t
;

473 #i‡!
HAL_OTA_BOOT_CODE


474 
uöt8
 
shdw
 = 
P1DIR
;

475 
hÆI¡Sèã_t
 
his
;

476 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

477 
P1DIR
 |
	`BV
(3);

480 
Àn
)

482 
	`XNV_SPI_BEGIN
();

485 
	`xnvSPIWrôe
(
XNV_STAT_CMD
);

486 } 
	`XNV_SPI_RX
(Ë& 
XNV_STAT_WIP
);

487 
	`XNV_SPI_END
();

488 
	`asm
("NOP");ásm("NOP");

490 
	`XNV_SPI_BEGIN
();

491 
	`xnvSPIWrôe
(
XNV_WREN_CMD
);

492 
	`XNV_SPI_END
();

493 
	`asm
("NOP");ásm("NOP");

495 
	`XNV_SPI_BEGIN
();

496 
	`xnvSPIWrôe
(
XNV_WRPG_CMD
);

497 
	`xnvSPIWrôe
(
addr
 >> 16);

498 
	`xnvSPIWrôe
(
addr
 >> 8);

499 
	`xnvSPIWrôe
(
addr
);

502 
˙t
 = 0 - (
uöt8
)
addr
;

503 i‡(
˙t
)

505 
addr
 +
˙t
;

509 
addr
 += 256;

514 
	`xnvSPIWrôe
(*
pBuf
++);

515 
˙t
--;

516 
Àn
--;

517 } 
Àn
 && 
˙t
);

518 
	`XNV_SPI_END
();

521 #i‡!
HAL_OTA_BOOT_CODE


522 
P1DIR
 = 
shdw
;

523 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

525 
	}
}

527 #ñi‡!
HAL_OTA_XNV_IS_INT


528 #îr‹ 
InvÆid
 
Xåa
-
NV
 
OTA
.

	@Components/hal/target/CC2530EB/hal_ota.h

40 #i‚de‡
HAL_OTA_H


41 
	#HAL_OTA_H


	)

47 
	~"hÆ_bﬂrd_cfg.h
"

48 
	~"hÆ_ty≥s.h
"

54 #i‡!
deföed
 
HAL_OTA_BOOT_CODE


55 
	#HAL_OTA_BOOT_CODE
 
FALSE


	)

59 
	#PACK_1


	)

66 
	#HAL_OTA_RC_START
 0x0800

	)

67 
	#HAL_OTA_CRC_ADDR
 0x0888

	)

68 
	#HAL_OTA_CRC_OSET
 (
HAL_OTA_CRC_ADDR
 - 
HAL_OTA_RC_START
)

	)

73 
	#HAL_OTA_XNV_IS_INT
 
FALSE


	)

74 
	#HAL_OTA_XNV_IS_SPI
 !
HAL_OTA_XNV_IS_INT


	)

80 
	#HAL_OTA_BOOT_PG_CNT
 2

	)

86 #i‡
HAL_OTA_XNV_IS_SPI
 && !
deföed
 
HAL_BOARD_CC2530EB_REV13


87 
	#HAL_OTA_DL_MAX
 0x40000

	)

88 
	#HAL_OTA_DL_SIZE
 (0x40000 - ((
HAL_NV_PAGE_CNT
+
HAL_OTA_BOOT_PG_CNT
)*
HAL_FLASH_PAGE_SIZE
))

	)

89 
	#HAL_OTA_DL_OSET
 0x0

90 #ñ£

	)

91 
	#HAL_OTA_DL_MAX
 (0x40000 - ((
HAL_NV_PAGE_CNT
+
HAL_OTA_BOOT_PG_CNT
)*
HAL_FLASH_PAGE_SIZE
))

	)

92 
	#HAL_OTA_DL_SIZE
 (
HAL_OTA_DL_MAX
 / 2)

	)

93 
	#HAL_OTA_DL_OSET
 (
HAL_OTA_DL_MAX
 / 2)

	)

96 
	#PREAMBLE_OFFSET
 0x8C

	)

103 
	mHAL_OTA_RC
,

104 
	mHAL_OTA_DL


105 } 
	timage_t
;

108 
uöt16
 
	m¸c
;

109 
uöt16
 
	m¸c_shadow
;

110 } 
	tŸaCrc_t
;

113 
uöt32
 
	m¥ogømLígth
;

114 
uöt16
 
	mm™uÁ˘uªrId
;

115 
uöt16
 
	mimageTy≥
;

116 
uöt32
 
	mimageVîsi⁄
;

117 } 
	t¥ómbÀ_t
;

123 
uöt8
 
HÆOTAChkDL
(uöt8 
dlImagePªambÀOff£t
);

124 
HÆOTAInvRC
();

125 
uöt32
 
HÆOTAAvaû
();

126 
HÆOTARód
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
);

127 
HÆOTAWrôe
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
);

	@Components/hal/target/CC2530EB/hal_sleep.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_mcu.h
"

46 
	~"hÆ_bﬂrd.h
"

47 
	~"hÆ_¶ìp.h
"

48 
	~"hÆ_Àd.h
"

49 
	~"hÆ_key.h
"

50 
	~"mac_≠i.h
"

51 
	~"OSAL.h
"

52 
	~"OSAL_Timîs.h
"

53 
	~"OSAL_Tasks.h
"

54 
	~"OSAL_PwrMgr.h
"

55 
	~"OnBﬂrd.h
"

56 
	~"hÆ_drivîs.h
"

57 
	~"hÆ_as£π.h
"

58 
	~"mac_mcu.h
"

60 #i‚de‡
ZG_BUILD_ENDDEVICE_TYPE


61 
	#ZG_BUILD_ENDDEVICE_TYPE
 
FALSE


	)

64 #i‡
ZG_BUILD_ENDDEVICE_TYPE
 && 
deföed
 (
NWK_AUTO_POLL
)

65 
	~"nwk_globÆs.h
"

66 
	~"ZGlobÆs.h
"

77 
	#CC2530_PM0
 0

	)

78 
	#CC2530_PM1
 1

	)

79 
	#CC2530_PM2
 2

	)

80 
	#CC2530_PM3
 3

	)

90 
	#HAL_SLEEP_OFF
 
CC2530_PM0


	)

91 
	#HAL_SLEEP_TIMER
 
CC2530_PM2


	)

92 
	#HAL_SLEEP_DEEP
 
CC2530_PM3


	)

98 
	#MAX_SLEEP_TIME
 510000

	)

99 
	#TICKS_SUBTRACTED
 2

	)

105 #i‡!
deföed
 (
PM_MIN_SLEEP_TIME
)

106 
	#PM_MIN_SLEEP_TIME
 14

	)

112 #¥agm®
loˇti⁄
 = "SLEEP_CODE"

113 
hÆSëSÀïMode
();

123 
	#HAL_SLEEP_ADJ_TICKS
 (11 + 12)

	)

125 #i‚de‡
HAL_SLEEP_DEBUG_POWER_MODE


127 
	#HAL_SLEEP_PREP_POWER_MODE
(
mode
Ë
	`°
–
SLEEPCMD
 &~
PMODE
; \

128 
SLEEPCMD
 |
mode
; \

129 !(
STLOAD
 & 
LDRDY
)); \

130 
hÆSÀïPc⁄VÆue
 = 
PCON_IDLE
; \

131 )

	)

132 
	#HAL_SLEEP_SET_POWER_MODE
(Ë
	`hÆSëSÀïMode
()

	)

135 
	#HAL_SLEEP_PREP_POWER_MODE
(
mode
Ë

	)

136 
	#HAL_SLEEP_SET_POWER_MODE
(Ë
	`°
–
hÆSÀïI¡
 =
FALSE
); \

137 
hÆSÀïI¡
 = 
FALSE
; \

138 
	`HAL_DISABLE_INTERRUPTS
(); \

139 )

	)

143 
	#STIE_BV
 
	`BV
(5)

	)

144 
	#P0IE_BV
 
	`BV
(5)

	)

145 
	#P1IE_BV
 
	`BV
(4)

	)

146 
	#P2IE_BV
 
	`BV
(1)

	)

149 
	#HAL_SLEEP_TIMER_ENABLE_INT
(Ë
	`°
(
IEN0
 |
STIE_BV
;Ë

	)

150 
	#HAL_SLEEP_TIMER_DISABLE_INT
(Ë
	`°
(
IEN0
 &~
STIE_BV
;Ë

	)

151 
	#HAL_SLEEP_TIMER_CLEAR_INT
(Ë
	`°
(
STIF
 = 0;Ë

	)

154 
	#HAL_SLEEP_IE_BACKUP_AND_DISABLE
(
õn0
, 
õn1
, 
õn2
Ë
	`°
(õn0 = 
IEN0
; \

155 
õn1
 = 
IEN1
; \

156 
õn2
 = 
IEN2
; \

157 
IEN0
 &
STIE_BV
; \

158 
IEN1
 &
P0IE_BV
; \

159 
IEN2
 &(
P1IE_BV
|
P2IE_BV
);Ë

	)

162 
	#HAL_SLEEP_IE_RESTORE
(
õn0
, 
õn1
, 
õn2
Ë
	`°
(
IEN0
 = ien0; \

163 
IEN1
 = 
õn1
; \

164 
IEN2
 = 
õn2
;Ë

	)

167 
	#HAL_SLEEP_MS_TO_320US
(
ms
Ë(((((
uöt32
Ë(ms)Ë* 100Ë+ 31Ë/ 32)

	)

170 #i‡
HAL_MCU_LITTLE_ENDIAN
()

171 
	#UINT32_NDX0
 0

	)

172 
	#UINT32_NDX1
 1

	)

173 
	#UINT32_NDX2
 2

	)

174 
	#UINT32_NDX3
 3

	)

176 
	#UINT32_NDX0
 3

	)

177 
	#UINT32_NDX1
 2

	)

178 
	#UINT32_NDX2
 1

	)

179 
	#UINT32_NDX3
 0

	)

182 
uöt32
 
	gmaxSÀïLo›Time
 = 
HAL_SLEEP_MS_TO_320US
(
MAX_SLEEP_TIME
);

189 vﬁ©ûê
__d©a
 
uöt8
 
	ghÆSÀïPc⁄VÆue
 = 
PCON_IDLE
;

198 
uöt8
 
	ghÆPwrMgtMode
 = 
HAL_SLEEP_OFF
;

200 #ifde‡
HAL_SLEEP_DEBUG_POWER_MODE


201 
boﬁ
 
	ghÆSÀïI¡
 = 
FALSE
;

209 
hÆSÀïSëTimî
(
uöt32
 
timeout
);

229 
	$hÆSëSÀïMode
()

231 
PCON
 = 
hÆSÀïPc⁄VÆue
;

232 
	`HAL_DISABLE_INTERRUPTS
();

233 
	}
}

254 
	$hÆSëMaxSÀïLo›Time
(
uöt32
 
rﬁlovîTime
)

256 if–
rﬁlovîTime
 > 
	`HAL_SLEEP_MS_TO_320US
(
MAX_SLEEP_TIME
) )

258 
maxSÀïLo›Time
 = 
	`HAL_SLEEP_MS_TO_320US
(
MAX_SLEEP_TIME
);

260 
maxSÀïLo›Time
 = (
rﬁlovîTime
 - 
TICKS_SUBTRACTED
);

261 
	}
}

280 
	$hÆSÀï
–
uöt16
 
oßl_timeout
 )

282 
uöt32
 
timeout
;

283 
uöt32
 
macTimeout
 = 0;

286 
timeout
 = 
	`HAL_SLEEP_MS_TO_320US
(
oßl_timeout
);

287 i‡(
timeout
 == 0)

289 
timeout
 = 
	`MAC_PwrNextTimeout
();

294 
macTimeout
 = 
	`MAC_PwrNextTimeout
();

297 i‡((
macTimeout
 !0Ë&& (macTimeouà< 
timeout
))

299 
timeout
 = 
macTimeout
;

306 
hÆPwrMgtMode
 = (
timeout
 =0Ë? 
HAL_SLEEP_DEEP
 : 
HAL_SLEEP_TIMER
;

312 #i‡
ZG_BUILD_ENDDEVICE_TYPE
 && 
	`deföed
 (
NWK_AUTO_POLL
)

313 i‡((
timeout
 > 
	`HAL_SLEEP_MS_TO_320US
(
PM_MIN_SLEEP_TIME
)) ||

314 (
timeout
 =0 && 
zgPﬁlR©e
 == 0))

316 i‡((
timeout
 > 
	`HAL_SLEEP_MS_TO_320US
(
PM_MIN_SLEEP_TIME
)) ||

317 (
timeout
 == 0))

320 
hÆI¡Sèã_t
 
õn0
, 
õn1
, 
õn2
;

322 
	`HAL_ASSERT
(
	`HAL_INTERRUPTS_ARE_ENABLED
());

323 
	`HAL_DISABLE_INTERRUPTS
();

326 i‡(
hÆSÀïPc⁄VÆue
 !0 && 
	`MAC_PwrOffReq
(
MAC_PWR_SLEEP_DEEP
Ë=
MAC_SUCCESS
)

332 #i‡((
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
))

334 
	`HÆKeyE¡îSÀï
();

337 #ifde‡
HAL_SLEEP_DEBUG_LED


338 
	`HAL_TURN_OFF_LED3
();

341 
	`HÆLedE¡îSÀï
();

344 if(
timeout
 > 
maxSÀïLo›Time
)

346 
timeout
 = 
maxSÀïLo›Time
;

350 i‡(
timeout
 != 0)

352 i‡(
timeout
 > 
	`HAL_SLEEP_MS_TO_320US
–
MAX_SLEEP_TIME
 ))

354 
timeout
 -
	`HAL_SLEEP_MS_TO_320US
–
MAX_SLEEP_TIME
 );

355 
	`hÆSÀïSëTimî
(
	`HAL_SLEEP_MS_TO_320US
–
MAX_SLEEP_TIME
 ));

360 
	`hÆSÀïSëTimî
(
timeout
);

364 
	`HAL_SLEEP_TIMER_CLEAR_INT
();

365 
	`HAL_SLEEP_TIMER_ENABLE_INT
();

368 #ifde‡
HAL_SLEEP_DEBUG_LED


369 i‡(
hÆPwrMgtMode
 =
CC2530_PM1
)

371 
	`HAL_TURN_ON_LED1
();

375 
	`HAL_TURN_OFF_LED1
();

380 
	`HAL_SLEEP_PREP_POWER_MODE
(
hÆPwrMgtMode
);

383 
	`HAL_SLEEP_IE_BACKUP_AND_DISABLE
(
õn0
, 
õn1
, 
õn2
);

384 
	`HAL_ENABLE_INTERRUPTS
();

392 
	`HAL_SLEEP_SET_POWER_MODE
();

397 
	`HAL_SLEEP_IE_RESTORE
(
õn0
, 
õn1
, 
õn2
);

400 
	`HAL_SLEEP_TIMER_DISABLE_INT
();

402 #ifde‡
HAL_SLEEP_DEBUG_LED


403 
	`HAL_TURN_ON_LED3
();

406 
	`HÆLedExôSÀï
();

409 #i‡((
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
))

411 ()
	`HÆKeyExôSÀï
();

415 
	`MAC_PwrOnReq
();

417 
	`HAL_ENABLE_INTERRUPTS
();

427 
	`macMcuTimî2OvîÊowW‹k¨ound
();

434 
	`HAL_ENABLE_INTERRUPTS
();

437 
	}
}

459 
	$hÆSÀïSëTimî
(
uöt32
 
timeout
)

461 
uöt32
 
ticks
;

464 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX0
] = 
ST0
;

465 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX1
] = 
ST1
;

466 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX2
] = 
ST2
;

467 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX3
] = 0;

472 
ticks
 +(
timeout
 * 671) / 64;

475 
ticks
 -
HAL_SLEEP_ADJ_TICKS
;

478 
ST2
 = ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX2
];

479 
ST1
 = ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX1
];

480 
ST0
 = ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX0
];

481 
	}
}

500 
uöt32
 
	$TimîEœp£d
( )

504 
	}
}

522 
	$hÆRe°‹eSÀïLevñ
( )

525 
	}
}

543 
	$HAL_ISR_FUNCTION
(
hÆSÀïTimîI§
, 
ST_VECTOR
)

545 
	`HAL_ENTER_ISR
();

546 
	`HAL_SLEEP_TIMER_CLEAR_INT
();

548 #ifde‡
HAL_SLEEP_DEBUG_POWER_MODE


549 
hÆSÀïI¡
 = 
TRUE
;

552 
	`CLEAR_SLEEP_MODE
();

553 
	`HAL_EXIT_ISR
();

554 
	}
}

	@Components/hal/target/CC2530EB/hal_startup.c

42 
	~"hÆ_bﬂrd.h
"

43 
	~"hÆ_ty≥s.h
"

45 #ifde‡
__˝lu•lus


49 #¥agm®
œnguage
=
exãnded


54 #¥agm®
loˇti⁄
="CSTART"

59 #i‡(
__CODE_MODEL__
 == 2)

60 
__√¨_func
 
__roŸ
 

62 
__roŸ
 

64 
__low_Àvñ_öô
();

77 #i‡(
__CODE_MODEL__
 == 2)

78 
__√¨_func
 
__roŸ
 

80 
__roŸ
 

82 
__low_Àvñ_öô
()

88 
MEMCTR
 = (MEMCTR & 0xF8) | 0x01;

99 #¥agm®
œnguage
=

101 #ifde‡
__˝lu•lus


	@Components/hal/target/CC2530EB/hal_timer.c

	@Components/hal/target/CC2530EB/hal_types.h

40 #i‚de‡
_HAL_TYPES_H


41 
	#_HAL_TYPES_H


	)

49 sig√d 
	töt8
;

50 
	tuöt8
;

52 sig√d 
	töt16
;

53 
	tuöt16
;

55 sig√d 
	töt32
;

56 
	tuöt32
;

58 
	tboﬁ
;

60 
uöt8
 
	thÆD©aAlign_t
;

69 #ifde‡
__IAR_SYSTEMS_ICC__


70 
	#CODE
 
__code


	)

71 
	#XDATA
 
__xd©a


	)

74 #ñi‡
deföed
 
__KEIL__


75 
	#CODE
 
code


	)

76 
	#XDATA
 
xd©a


	)

88 #i‚de‡
TRUE


89 
	#TRUE
 1

	)

92 #i‚de‡
FALSE


93 
	#FALSE
 0

	)

96 #i‚de‡
NULL


97 
	#NULL
 0

	)

	@Components/hal/target/CC2530EB/hal_uart.c

44 
	~"hÆ_bﬂrd_cfg.h
"

45 
	~"hÆ_defs.h
"

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_u¨t.h
"

77 #i‡
HAL_UART_DMA


78 
	~"_hÆ_u¨t_dma.c
"

80 #i‡
HAL_UART_ISR


81 
	~"_hÆ_u¨t_i§.c
"

83 #i‡
HAL_UART_USB


84 
	~"_hÆ_u¨t_usb.c
"

96 
	$HÆUARTInô
()

98 #i‡
HAL_UART_DMA


99 
	`HÆUARTInôDMA
();

101 #i‡
HAL_UART_ISR


102 
	`HÆUARTInôISR
();

104 #i‡
HAL_UART_USB


105 
	`HÆUARTInôUSB
();

107 
	}
}

119 
uöt8
 
	$HÆUARTO≥n
(
uöt8
 
p‹t
, 
hÆUARTCfg_t
 *
c⁄fig
)

121 ()
p‹t
;

122 ()
c⁄fig
;

124 #i‡(
HAL_UART_DMA
 == 1)

125 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë
	`HÆUARTO≥nDMA
(
c⁄fig
);

127 #i‡(
HAL_UART_DMA
 == 2)

128 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë
	`HÆUARTO≥nDMA
(
c⁄fig
);

130 #i‡(
HAL_UART_ISR
 == 1)

131 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë
	`HÆUARTO≥nISR
(
c⁄fig
);

133 #i‡(
HAL_UART_ISR
 == 2)

134 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë
	`HÆUARTO≥nISR
(
c⁄fig
);

136 #i‡(
HAL_UART_USB
)

137 
	`HÆUARTO≥nUSB
(
c⁄fig
);

140  
HAL_UART_SUCCESS
;

141 
	}
}

154 
uöt16
 
	$HÆUARTRód
(
uöt8
 
p‹t
, uöt8 *
buf
, 
uöt16
 
Àn
)

156 ()
p‹t
;

157 ()
buf
;

158 ()
Àn
;

160 #i‡(
HAL_UART_DMA
 == 1)

161 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRódDMA
(
buf
, 
Àn
);

163 #i‡(
HAL_UART_DMA
 == 2)

164 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRódDMA
(
buf
, 
Àn
);

166 #i‡(
HAL_UART_ISR
 == 1)

167 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRódISR
(
buf
, 
Àn
);

169 #i‡(
HAL_UART_ISR
 == 2)

170 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRódISR
(
buf
, 
Àn
);

173 #i‡
HAL_UART_USB


174  
	`HÆUARTRx
(
buf
, 
Àn
);

178 
	}
}

191 
uöt16
 
	$HÆUARTWrôe
(
uöt8
 
p‹t
, uöt8 *
buf
, 
uöt16
 
Àn
)

193 ()
p‹t
;

194 ()
buf
;

195 ()
Àn
;

197 #i‡(
HAL_UART_DMA
 == 1)

198 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTWrôeDMA
(
buf
, 
Àn
);

200 #i‡(
HAL_UART_DMA
 == 2)

201 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTWrôeDMA
(
buf
, 
Àn
);

203 #i‡(
HAL_UART_ISR
 == 1)

204 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTWrôeISR
(
buf
, 
Àn
);

206 #i‡(
HAL_UART_ISR
 == 2)

207 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTWrôeISR
(
buf
, 
Àn
);

210 #i‡
HAL_UART_USB


211 
	`HÆUARTTx
(
buf
, 
Àn
);

212  
Àn
;

216 
	}
}

227 
	$HÆUARTSu•íd
( )

229 #i‡
HAL_UART_DMA


230 
	`HÆUARTSu•ídDMA
();

232 #i‡
HAL_UART_ISR


233 
	`HÆUARTSu•ídISR
();

235 
	}
}

246 
	$HÆUARTResume
( )

248 #i‡
HAL_UART_DMA


249 
	`HÆUARTResumeDMA
();

251 #i‡
HAL_UART_ISR


252 
	`HÆUARTResumeISR
();

254 
	}
}

265 
	$HÆUARTPﬁl
()

267 #i‡
HAL_UART_DMA


268 
	`HÆUARTPﬁlDMA
();

270 #i‡
HAL_UART_ISR


271 
	`HÆUARTPﬁlISR
();

273 #i‡
HAL_UART_USB


274 
	`HÆUARTPﬁlUSB
();

276 
	}
}

287 
uöt16
 
	$HÆ_UART_RxBufLí
–
uöt8
 
p‹t
 )

289 ()
p‹t
;

291 #i‡(
HAL_UART_DMA
 == 1)

292 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRxAvaûDMA
();

294 #i‡(
HAL_UART_DMA
 == 2)

295 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRxAvaûDMA
();

297 #i‡(
HAL_UART_ISR
 == 1)

298 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRxAvaûISR
();

300 #i‡(
HAL_UART_ISR
 == 2)

301 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRxAvaûISR
();

303 #i‡
HAL_UART_USB


304  
	`HÆUARTRxAvaûUSB
();

308 
	}
}

	@Components/hal/target/CC2530USB/_hal_uart_usb.c

44 
	~"hÆ_u¨t.h
"

45 #i‡
deföed
 
MT_TASK


46 
	~"MT_UART.h
"

49 
	~"usb_bﬂrd_cfg.h
"

50 
	~"usb_cdc.h
"

51 
	~"usb_cdc_hooks.h
"

52 
	~"usb_fúmw¨e_libøry_c⁄fig.h
"

53 
	~"usb_fúmw¨e_libøry_hódîs.h
"

59 #i‡!
deföed
 
HAL_UART_BAUD_RATE


60 
	#HAL_UART_BAUD_RATE
 115200

	)

64 
	#HAL_UART_MSECS_TO_TICKS
 33

	)

66 #i‡
deföed
 
MT_TASK


67 
	#HAL_UART_USB_HIGH
 
MT_UART_DEFAULT_THRESHOLD


	)

68 
	#HAL_UART_USB_IDLE
 (
MT_UART_DEFAULT_IDLE_TIMEOUT
 * 
HAL_UART_MSECS_TO_TICKS
)

	)

69 
	#HAL_UART_USB_RX_MAX
 
MT_UART_DEFAULT_MAX_RX_BUFF


	)

71 #i‡!
deföed
 
HAL_UART_USB_HIGH


72 
	#HAL_UART_USB_HIGH
 (
HAL_UART_USB_RX_MAX
 / 2 - 16)

	)

74 #i‡!
deföed
 
HAL_UART_USB_IDLE


75 
	#HAL_UART_USB_IDLE
 (6 * 
HAL_UART_MSECS_TO_TICKS
)

	)

77 #i‡!
deföed
 
HAL_UART_USB_RX_MAX


78 
	#HAL_UART_USB_RX_MAX
 128

	)

82 #i‡!
deföed
 
HAL_UART_USB_TX_MAX


83 
	#HAL_UART_USB_TX_MAX
 64

	)

99 
uöt8
 
	ghÆU¨tRxH
, 
	ghÆU¨tRxT
, 
	ghÆU¨tRxQ
[256];

100 
uöt8
 
	ghÆU¨tTxH
, 
	ghÆU¨tTxT
, 
	ghÆU¨tTxQ
[256];

102 #i‡!
deföed
 
HAL_SB_BOOT_CODE


103 
uöt8
 
	grxTick
;

104 
uöt8
 
	grxShdw
;

105 
uöt8
 
	gtxMT
;

106 
hÆUARTCBack_t
 
	gu¨tCB
;

113 
HÆUARTInôUSB
();

114 
HÆUARTPﬁlUSB
();

115 
hÆU¨tPﬁlEvt
();

116 
hÆU¨tPﬁlRx
();

117 
hÆU¨tPﬁlTx
();

134 
	$HÆUARTInôUSB
()

137 
cuºítLöeCodög
.
dãR©e
 = 
HAL_UART_BAUD_RATE
;

138 
cuºítLöeCodög
.
ch¨F‹m©
 = 
CDC_CHAR_FORMAT_1_STOP_BIT
;

139 
cuºítLöeCodög
.
∑rôyTy≥
 = 
CDC_PARITY_TYPE_NONE
;

140 
cuºítLöeCodög
.
d©aBôs
 = 8;

143 
	`usbfwInô
();

146 
	`usbúqInô
(0xFFFF);

148 #i‡
deföed
 
HAL_SB_BOOT_CODE


149 
	`HAL_USB_PULLUP_ENABLE
();

151 
txMT
 = 
TRUE
;

153 
	}
}

164 
	$HÆUARTUnInôUSB
()

166 
P2IEN
 = 0;

167 
IEN2
 = 0;

168 
	`HAL_USB_PULLUP_DISABLE
();

169 
HAL_USB_DISABLE
;

170 
	}
}

172 #i‡!
deföed
 
HAL_SB_BOOT_CODE


182 
	$HÆUARTO≥nUSB
(
hÆUARTCfg_t
 *
c⁄fig
)

185 
hÆU¨tRxH
 = 
hÆU¨tRxT
;

187 
u¨tCB
 = 
c⁄fig
->
ˇŒBackFunc
;

188 ()
c⁄fig
;

190 
	`HAL_USB_PULLUP_ENABLE
();

191 
	}
}

203 
	$HÆUARTPﬁlUSB
()

205 #i‡
deföed
 
HAL_SB_BOOT_CODE


206 
USBIF
Ë
	`usbúqH™dÀr
();

208 
	`hÆU¨tPﬁlEvt
();

209 
	`hÆU¨tPﬁlRx
();

210 
	`hÆU¨tPﬁlTx
();

211 
	}
}

213 
uöt8
 
HÆUARTRx
(uöt8 *
buf
, uöt8 
max
);

214 
uöt8
 
	$HÆUARTRx
(
uöt8
 *
buf
, uöt8 
max
)

216 
uöt8
 
˙t
 = 0;

218 (
hÆU¨tRxH
 !
hÆU¨tRxT
Ë&& (
˙t
 < 
max
))

220 *
buf
++ = 
hÆU¨tRxQ
[
hÆU¨tRxH
++];

221 
˙t
++;

224  
˙t
;

225 
	}
}

227 
HÆUARTTx
(
uöt8
 *
buf
, uöt8 
˙t
);

228 
	$HÆUARTTx
(
uöt8
 *
buf
, uöt8 
˙t
)

230 
˙t
--)

232 
hÆU¨tTxQ
[
hÆU¨tTxT
++] = *
buf
++;

234 #i‡!
deföed
 
HAL_SB_BOOT_CODE


235 
txMT
 = 
FALSE
;

237 
	}
}

248 
uöt16
 
	$HÆUARTRxAvaûUSB
()

250  ((
hÆU¨tRxT
 >
hÆU¨tRxH
)?

251 
hÆU¨tRxT
 - 
hÆU¨tRxH
 : (
hÆU¨tRxQ
) - halUartRxH + halUartRxT);

252 
	}
}

263 
	$hÆU¨tPﬁlEvt
()

266 i‡(
	`USBIRQ_GET_EVENT_MASK
(Ë& 
USBIRQ_EVENT_RESET
)

268 
	`USBIRQ_CLEAR_EVENTS
(
USBIRQ_EVENT_RESET
);

269 
	`usbfwRe£tH™dÀr
();

273 i‡(
	`USBIRQ_GET_EVENT_MASK
(Ë& 
USBIRQ_EVENT_SETUP
)

275 
	`USBIRQ_CLEAR_EVENTS
(
USBIRQ_EVENT_SETUP
);

276 
	`usbfwSëupH™dÀr
();

280 i‡(
	`USBIRQ_GET_EVENT_MASK
(Ë& 
USBIRQ_EVENT_SUSPEND
)

283 
	`USBIRQ_CLEAR_EVENTS
(
USBIRQ_EVENT_SUSPEND
);

285 #i‡
HAL_UART_USB_SUSPEND


287 
	`usbsu•E¡î
();

291 
	`USBIRQ_CLEAR_EVENTS
(
USBIRQ_EVENT_RESUME
);

293 
	}
}

304 
	$hÆU¨tPﬁlRx
()

306 
uöt8
 
˙t
;

307 
uöt8
 
ï
 = 
	`USBFW_GET_SELECTED_ENDPOINT
();

308 
	`USBFW_SELECT_ENDPOINT
(4);

311 i‡(
	`USBFW_OUT_ENDPOINT_DISARMED
())

313 
hÆI¡Sèã_t
 
ötSèã
;

315 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

317 
˙t
 = 
	`USBFW_GET_OUT_ENDPOINT_COUNT_LOW
();

318 
˙t
 +
	`USBFW_GET_OUT_ENDPOINT_COUNT_HIGH
() >> 8;

319 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

321 
˙t
--)

323 
hÆU¨tRxQ
[
hÆU¨tRxT
++] = 
USBF4
;

325 
	`USBFW_ARM_OUT_ENDPOINT
();

327 #i‡!
deföed
 
HAL_SB_BOOT_CODE


331 i‡(
rxTick
 == 0)

333 
rxShdw
 = 
ST0
;

335 
rxTick
 = 
HAL_UART_USB_IDLE
;

338 #i‡!
deföed
 
HAL_SB_BOOT_CODE


339 i‡(
rxTick
)

342 
uöt8
 
de¸
 = 
ST0
 - 
rxShdw
;

344 i‡(
rxTick
 > 
de¸
)

346 
rxTick
 -
de¸
;

347 
rxShdw
 = 
ST0
;

351 
rxTick
 = 0;

356 
uöt8
 
evt
 = 0;

357 
˙t
 = 
hÆU¨tRxT
 - 
hÆU¨tRxH
;

359 i‡(
˙t
 >
HAL_UART_USB_HIGH
)

361 
evt
 = 
HAL_UART_RX_ABOUT_FULL
;

363 i‡(
˙t
 && !
rxTick
)

365 
evt
 = 
HAL_UART_RX_TIMEOUT
;

368 i‡(
evt
 && (
NULL
 !
u¨tCB
))

370 
	`u¨tCB
(0, 
evt
);

375 
	`USBFW_SELECT_ENDPOINT
(
ï
);

376 
	}
}

387 
	$hÆU¨tPﬁlTx
()

389 
uöt8
 
ï
 = 
	`USBFW_GET_SELECTED_ENDPOINT
();

390 
	`USBFW_SELECT_ENDPOINT
(4);

393 i‡(
	`USBFW_IN_ENDPOINT_DISARMED
())

395 i‡(
hÆU¨tTxT
 =
hÆU¨tTxH
)

397 #i‡!
deföed
 
HAL_SB_BOOT_CODE


398 i‡(!
txMT
)

400 
txMT
 = 
TRUE
;

401 
	`u¨tCB
(0, 
HAL_UART_TX_EMPTY
);

407 
uöt8
 
max
 = 
HAL_UART_USB_TX_MAX
;

411 
USBF4
 = 
hÆU¨tTxQ
[
hÆU¨tTxH
++];

412 } (
hÆU¨tTxH
 !
hÆU¨tTxT
Ë&& (0 !--
max
));

414 
	`USBFW_ARM_IN_ENDPOINT
();

418 
	`USBFW_SELECT_ENDPOINT
(
ï
);

419 
	}
}

	@Components/hal/target/CC2530USB/hal_adc.c

44 
	~"hÆ_adc.h
"

45 
	~"hÆ_defs.h
"

46 
	~"hÆ_mcu.h
"

47 
	~"hÆ_ty≥s.h
"

52 
	#HAL_ADC_EOC
 0x80

	)

53 
	#HAL_ADC_START
 0x40

	)

55 
	#HAL_ADC_STSEL_EXT
 0x00

	)

56 
	#HAL_ADC_STSEL_FULL
 0x10

	)

57 
	#HAL_ADC_STSEL_T1C0
 0x20

	)

58 
	#HAL_ADC_STSEL_ST
 0x30

	)

60 
	#HAL_ADC_RAND_NORM
 0x00

	)

61 
	#HAL_ADC_RAND_LFSR
 0x04

	)

62 
	#HAL_ADC_RAND_SEED
 0x08

	)

63 
	#HAL_ADC_RAND_STOP
 0x0¯

	)

64 
	#HAL_ADC_RAND_BITS
 0x0¯

	)

66 
	#HAL_ADC_DEC_064
 0x00

	)

67 
	#HAL_ADC_DEC_128
 0x10

	)

68 
	#HAL_ADC_DEC_256
 0x20

	)

69 
	#HAL_ADC_DEC_512
 0x30

	)

70 
	#HAL_ADC_DEC_BITS
 0x30

	)

72 
	#HAL_ADC_STSEL
 
HAL_ADC_STSEL_ST


	)

73 
	#HAL_ADC_RAND_GEN
 
HAL_ADC_RAND_STOP


	)

74 
	#HAL_ADC_REF_VOLT
 
HAL_ADC_REF_AVDD


	)

75 
	#HAL_ADC_DEC_RATE
 
HAL_ADC_DEC_064


	)

76 
	#HAL_ADC_SCHN
 
HAL_ADC_CHN_VDD3


	)

77 
	#HAL_ADC_ECHN
 
HAL_ADC_CHN_GND


	)

84 #i‡(
HAL_ADC
 =
TRUE
)

85 
uöt8
 
	gadcRef
;

97 
	$HÆAdcInô
 ()

99 #i‡(
HAL_ADC
 =
TRUE
)

100 
adcRef
 = 
HAL_ADC_REF_VOLT
;

102 
	}
}

117 
uöt16
 
	$HÆAdcRód
 (
uöt8
 
ch™√l
, uöt8 
ªsﬁuti⁄
)

119 
öt16
 
ªadög
 = 0;

121 #i‡(
HAL_ADC
 =
TRUE
)

122 
uöt8
 
i
, 
ªsbôs
;

123 
uöt8
 
adcCh™√l
 = 1;

133 i‡(
ch™√l
 < 8)

135 
i
=0; i < 
ch™√l
; i++)

137 
adcCh™√l
 <<= 1;

142 
ADCCFG
 |
adcCh™√l
;

145 
ªsﬁuti⁄
)

147 
HAL_ADC_RESOLUTION_8
:

148 
ªsbôs
 = 
HAL_ADC_DEC_064
;

150 
HAL_ADC_RESOLUTION_10
:

151 
ªsbôs
 = 
HAL_ADC_DEC_128
;

153 
HAL_ADC_RESOLUTION_12
:

154 
ªsbôs
 = 
HAL_ADC_DEC_256
;

156 
HAL_ADC_RESOLUTION_14
:

158 
ªsbôs
 = 
HAL_ADC_DEC_512
;

163 
ADCCON3
 = 
ch™√l
 | 
ªsbôs
 | 
adcRef
;

166 !(
ADCCON1
 & 
HAL_ADC_EOC
));

169 
ADCCFG
 &(
adcCh™√l
 ^ 0xFF);

172 
ªadög
 = (
öt16
Ë(
ADCL
);

173 
ªadög
 |(
öt16
Ë(
ADCH
 << 8);

176 i‡(
ªadög
 < 0)

177 
ªadög
 = 0;

179 
ªsﬁuti⁄
)

181 
HAL_ADC_RESOLUTION_8
:

182 
ªadög
 >>= 8;

184 
HAL_ADC_RESOLUTION_10
:

185 
ªadög
 >>= 6;

187 
HAL_ADC_RESOLUTION_12
:

188 
ªadög
 >>= 4;

190 
HAL_ADC_RESOLUTION_14
:

192 
ªadög
 >>= 2;

197 (Ë
ch™√l
;

198 (Ë
ªsﬁuti⁄
;

201  ((
uöt16
)
ªadög
);

202 
	}
}

214 
	$HÆAdcSëRe„ªn˚
 ( 
uöt8
 
ª„ªn˚
 )

216 #i‡(
HAL_ADC
 =
TRUE
)

217 
adcRef
 = 
ª„ªn˚
;

219 
	}
}

232 
boﬁ
 
	$HÆAdcCheckVdd
(
uöt8
 
vdd
)

234 
ADCCON3
 = 0x0F;

235 !(
ADCCON1
 & 0x80));

236  (
ADCH
 > 
vdd
);

237 
	}
}

	@Components/hal/target/CC2530USB/hal_aes.h

40 #i‚de‡ 
HAL_AES_H_


41 
	#HAL_AES_H_


	)

43 
	~"ZComDef.h
"

45 
	#STATE_BLENGTH
 16

46 
	#KEY_BLENGTH
 16

47 
	#KEY_EXP_LENGTH
 176

48 

	)

53 #i‡((
deföed
 
SOFTWARE_AES
Ë&& (SOFTWARE_AES =
TRUE
)Ë&& ((deföed 
SW_AES_AND_KEY_EXP
) && (SW_AES_AND_KEY_EXP == TRUE))

57 
HÆAesInô
( );

58 
AesLﬂdBlock
–
uöt8
 * );

59 
AesSèπBlock
–
uöt8
 *, uint8 * );

60 
AesSèπSh‹tBlock
–
uöt8
 *, uint8 * );

61 
AesLﬂdIV
(
uöt8
 *);

62 
AesDmaSëup
–
uöt8
 *, 
uöt16
, uint8 *, uint16 );

63 
AesLﬂdKey
–
uöt8
 * );

65 (*
pS•AesEn¸y±
)–
uöt8
 *, uint8 * );

66 
	`s•_HW_KeyInô
 (
uöt8
 *);

67 
	`s•KeyEx∑nsi⁄
 (
uöt8
 *, uint8 *);

69 
	`s•AesEn¸y±HW
 (
uöt8
 *, uint8 *);

70 
	`s•AesEn¸y±KeyExp
 (
uöt8
 *, uint8 *);

71 
	`s•AesEn¸y±Basic
 (
uöt8
 *, uint8 *);

72 
	`s•AesEn¸y±
–
uöt8
 *
key
, uöt8 *
buf
 );

75 
	#AES_BUSY
 0x08

	)

76 
	#ENCRYPT
 0x00

	)

77 
	#DECRYPT
 0x01

	)

80 
	#AES_SETMODE
(
mode
Ëdÿ{ 
ENCCS
 &~0x70; ENCCS |mode; 
	}
} 0)

	)

83 
	#CBC
 0x00

	)

84 
	#CFB
 0x10

	)

85 
	#OFB
 0x20

	)

86 
	#CTR
 0x30

	)

87 
	#ECB
 0x40

	)

88 
	#CBC_MAC
 0x50

	)

91 
	#AES_SET_ENCR_DECR_KEY_IV
(
mode
) \

93 
ENCCS
 = (ENCCS & ~0x07Ë| 
mode
 \

94 } 0)

	)

97 
	#AES_ENCRYPT
 0x00;

	)

98 
	#AES_DECRYPT
 0x02;

	)

99 
	#AES_LOAD_KEY
 0x04;

	)

100 
	#AES_LOAD_IV
 0x06;

	)

104 
	#AES_START
(Ë
ENCCS
 |0x01

	)

107 
	#HAL_DMA_AES_IN
 1

	)

108 
	#HAL_DMA_AES_OUT
 2

	)

111 
	#HAL_AES_IN_ADDR
 0x70B1

	)

112 
	#HAL_AES_OUT_ADDR
 0x70B2

	)

114 #i‡!
deföed
 (
HAL_AES_DMA
Ë|| (HAL_AES_DMA =
FALSE
)

115 
	#HAL_AES_DELAY
() \

117 
uöt8
 
dñay
 = 15; \

118 
dñay
--); \

119 } 0)

	)

	@Components/hal/target/CC2530USB/hal_board_cfg.h

40 #i‚de‡
HAL_BOARD_CFG_H


41 
	#HAL_BOARD_CFG_H


	)

49 
	~"hÆ_mcu.h
"

50 
	~"hÆ_defs.h
"

51 
	~"hÆ_ty≥s.h
"

52 
	~"usb_bﬂrd_cfg.h
"

62 
	#xHAL_PA_LNA


	)

63 
	#xHAL_PA_LNA_CC2590


	)

73 #i‡!
deföed
 (
HAL_BOARD_CC2530EB_REV17
Ë&& !deföed (
HAL_BOARD_CC2530EB_REV13
)

74 
	#HAL_BOARD_CC2530EB_REV17


	)

76 
	#HAL_BOARD_CC2530USB


	)

83 
	#HAL_CPU_CLOCK_MHZ
 32

	)

88 
	#HAL_CLOCK_CRYSTAL


	)

90 
	#OSC32K_CRYSTAL_INSTALLED
 
FALSE


	)

93 #i‡!
deföed
 (
OSC32K_CRYSTAL_INSTALLED
Ë|| (deföed (OSC32K_CRYSTAL_INSTALLEDË&& (OSC32K_CRYSTAL_INSTALLED =
TRUE
))

94 
	#OSC_32KHZ
 0x00

	)

96 
	#OSC_32KHZ
 0x80

	)

99 
	#HAL_CLOCK_STABLE
(Ë
	`°
–
CLKCONSTA
 !(
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
)); )

	)

106 
	#HAL_NUM_LEDS
 2

	)

108 
	#HAL_LED_BLINK_DELAY
(Ë
	`°
–{ vﬁ©ûê
uöt32
 
i
; i=0; i<0x5800; i++Ë{ }; } )

	)

111 
	#LED1_BV
 
	`BV
(0)

	)

112 
	#LED1_SBIT
 
P0_0


	)

113 
	#LED1_DDR
 
P0DIR


	)

114 
	#LED1_POLARITY
 
ACTIVE_LOW


	)

117 
	#LED2_BV
 
	`BV
(1)

	)

118 
	#LED2_SBIT
 
P1_1


	)

119 
	#LED2_DDR
 
P1DIR


	)

120 
	#LED2_POLARITY
 
ACTIVE_HIGH


	)

127 
	#ACTIVE_LOW
 !

	)

128 
	#ACTIVE_HIGH
 !!

	)

131 
	#PUSH1_BV
 
	`BV
(2)

	)

132 
	#PUSH1_SBIT
 
P1_2


	)

133 
	#PUSH1_POLARITY
 
ACTIVE_LOW


	)

136 
	#PUSH2_BV
 
	`BV
(3)

	)

137 
	#PUSH2_SBIT
 
P1_3


	)

138 
	#PUSH2_POLARITY
 
ACTIVE_LOW


	)

146 
	#HAL_FLASH_PAGE_PER_BANK
 16

	)

148 
	#HAL_FLASH_PAGE_SIZE
 2048

	)

149 
	#HAL_FLASH_WORD_SIZE
 4

	)

152 
	#HAL_FLASH_PAGE_MAP
 0x8000

	)

156 #i‡
deföed
 
NON_BANKED


157 
	#HAL_FLASH_LOCK_BITS
 16

	)

158 
	#HAL_NV_PAGE_END
 30

	)

159 
	#HAL_NV_PAGE_CNT
 2

	)

161 
	#HAL_FLASH_LOCK_BITS
 16

	)

162 
	#HAL_NV_PAGE_END
 126

	)

163 
	#HAL_NV_PAGE_CNT
 6

	)

167 
	#HAL_FLASH_IEEE_SIZE
 8

	)

168 
	#HAL_FLASH_IEEE_PAGE
 (
HAL_NV_PAGE_END
+1)

	)

169 
	#HAL_FLASH_IEEE_OSET
 (
HAL_FLASH_PAGE_SIZE
 - 
HAL_FLASH_LOCK_BITS
 - 
HAL_FLASH_IEEE_SIZE
)

	)

170 
	#HAL_INFOP_IEEE_OSET
 0xC

	)

172 
	#HAL_FLASH_DEV_PRIVATE_KEY_OSET
 0x7D2

	)

173 
	#HAL_FLASH_CA_PUBLIC_KEY_OSET
 0x7BC

	)

174 
	#HAL_FLASH_IMPLICIT_CERT_OSET
 0x78C

	)

176 
	#HAL_NV_PAGE_BEG
 (
HAL_NV_PAGE_END
-
HAL_NV_PAGE_CNT
+1)

	)

179 
	#HAL_NV_DMA_CH
 0

	)

180 
	#HAL_DMA_CH_RX
 3

	)

181 
	#HAL_DMA_CH_TX
 4

	)

183 
	#HAL_NV_DMA_GET_DESC
(Ë
	`HAL_DMA_GET_DESC0
()

	)

184 
	#HAL_NV_DMA_SET_ADDR
(
a
Ë
	`HAL_DMA_SET_ADDR_DESC0
(◊))

	)

191 
	#HAL_SB_IMG_ADDR
 0x2000

	)

192 
	#HAL_SB_CRC_ADDR
 0x2090

	)

194 
	#HAL_SB_IMG_SIZE
 (0x40000 - 0x2000 - 0x3000 - 0x0800)

	)

202 
	#PREFETCH_ENABLE
(Ë
	`°
–
FCTL
 = 0x08; )

	)

203 
	#PREFETCH_DISABLE
(Ë
	`°
–
FCTL
 = 0x04; )

	)

206 
	#HAL_BOARD_INIT
() \

208 
uöt16
 
i
; \

210 
SLEEPCMD
 &~
OSC_PD
; \

211 !(
SLEEPSTA
 & 
XOSC_STB
)); \

212 
	`asm
("NOP"); \

213 
i
=0; i<504; i++Ë
	`asm
("NOP"); \

214 
CLKCONCMD
 = (
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
); \

215 
CLKCONSTA
 !(
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
)); \

216 
SLEEPCMD
 |
OSC_PD
; \

219 
	`PREFETCH_ENABLE
(); \

221 
	`HAL_TURN_OFF_LED1
(); \

222 
LED1_DDR
 |
LED1_BV
; \

223 
	`HAL_TURN_OFF_LED2
(); \

224 
LED2_DDR
 |
LED2_BV
; \

225 }

	)

228 
	#HAL_DEBOUNCE
(
ex¥
Ë{ 
i
; i=0; i<500; i++Ë{ i‡(!”x¥)Ëò0; } }

	)

231 
	#HAL_PUSH_BUTTON1
(Ë(
	`PUSH1_POLARITY
 (
PUSH1_SBIT
))

	)

232 
	#HAL_PUSH_BUTTON2
(Ë(
	`PUSH2_POLARITY
 (
PUSH2_SBIT
))

	)

233 
	#HAL_PUSH_BUTTON3
(Ë(0)

	)

234 
	#HAL_PUSH_BUTTON4
(Ë(0)

	)

235 
	#HAL_PUSH_BUTTON5
(Ë(0)

	)

236 
	#HAL_PUSH_BUTTON6
(Ë(0)

	)

239 
	#HAL_TURN_OFF_LED1
(Ë
	`°
–
LED1_SBIT
 = 
	`LED1_POLARITY
 (0); )

	)

240 
	#HAL_TURN_OFF_LED2
(Ë
	`°
–
LED2_SBIT
 = 
	`LED2_POLARITY
 (0); )

	)

241 
	#HAL_TURN_OFF_LED3
(Ë
	`HAL_TURN_OFF_LED1
()

	)

242 
	#HAL_TURN_OFF_LED4
(Ë
	`HAL_TURN_OFF_LED2
()

	)

244 
	#HAL_TURN_ON_LED1
(Ë
	`°
–
LED1_SBIT
 = 
	`LED1_POLARITY
 (1); )

	)

245 
	#HAL_TURN_ON_LED2
(Ë
	`°
–
LED2_SBIT
 = 
	`LED2_POLARITY
 (1); )

	)

246 
	#HAL_TURN_ON_LED3
(Ë
	`HAL_TURN_ON_LED1
()

	)

247 
	#HAL_TURN_ON_LED4
(Ë
	`HAL_TURN_ON_LED2
()

	)

249 
	#HAL_TOGGLE_LED1
(Ë
	`°
–i‡(
LED1_SBIT
Ë{ LED1_SBIT = 0; } { LED1_SBIT = 1;} )

	)

250 
	#HAL_TOGGLE_LED2
(Ë
	`°
–i‡(
LED2_SBIT
Ë{ LED2_SBIT = 0; } { LED2_SBIT = 1;} )

	)

251 
	#HAL_TOGGLE_LED3
(Ë
	`HAL_TOGGLE_LED1
()

	)

252 
	#HAL_TOGGLE_LED4
(Ë
	`HAL_TOGGLE_LED2
()

	)

254 
	#HAL_STATE_LED1
(Ë(
	`LED1_POLARITY
 (
LED1_SBIT
))

	)

255 
	#HAL_STATE_LED2
(Ë(
	`LED2_POLARITY
 (
LED2_SBIT
))

	)

256 
	#HAL_STATE_LED3
(Ë
	`HAL_STATE_LED1
()

	)

257 
	#HAL_STATE_LED4
(Ë
	`HAL_STATE_LED2
()

	)

262 
	#VDD_2_0
 74

263 

	)

264 
	#VDD_MIN_RUN
 
VDD_2_0


	)

265 
	#VDD_MIN_NV
 (
VDD_2_0
+4)

266 

	)

273 #i‚de‡
HAL_TIMER


274 
	#HAL_TIMER
 
FALSE


	)

278 #i‚de‡
HAL_ADC


279 
	#HAL_ADC
 
TRUE


	)

283 #i‚de‡
HAL_DMA


284 
	#HAL_DMA
 
TRUE


	)

288 #i‚de‡
HAL_FLASH


289 
	#HAL_FLASH
 
TRUE


	)

293 #i‚de‡
HAL_AES


294 
	#HAL_AES
 
TRUE


	)

297 #i‚de‡
HAL_AES_DMA


298 
	#HAL_AES_DMA
 
TRUE


	)

302 #i‚de‡
HAL_LCD


303 
	#HAL_LCD
 
FALSE


	)

307 #i‚de‡
HAL_LED


308 
	#HAL_LED
 
TRUE


	)

310 #i‡(!
deföed
 
BLINK_LEDS
Ë&& (
HAL_LED
 =
TRUE
)

311 
	#BLINK_LEDS


	)

315 #i‚de‡
HAL_KEY


316 
	#HAL_KEY
 
TRUE


	)

320 #i‚de‡
HAL_UART


321 
	#HAL_UART
 
TRUE


	)

322 
	#HAL_UART_DMA
 0

	)

323 
	#HAL_UART_ISR
 0

	)

324 
	#HAL_UART_USB
 1

	)

327 #i‚de‡
HAL_UART_DMA


328 
	#HAL_UART_DMA
 0

	)

330 #i‚de‡
HAL_UART_ISR


331 
	#HAL_UART_ISR
 0

	)

334 #i‚de‡
HAL_UART_USB


335 #i‡
HAL_UART


336 
	#HAL_UART_USB
 1

	)

338 
	#HAL_UART_USB
 0

	)

343 #i‚de‡
HAL_HID


344 
	#HAL_HID
 
FALSE


	)

	@Components/hal/target/CC2530USB/hal_dma.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_defs.h
"

46 
	~"hÆ_dma.h
"

47 
	~"hÆ_mcu.h
"

48 
	~"hÆ_u¨t.h
"

50 #i‡(
deföed
 
HAL_IRGEN
Ë&& (HAL_IRGEN =
TRUE
)

51 
	~"hÆ_úgí.h
"

54 #i‡(
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)

55 
	~"hÆ_•i.h
"

59 #i‡((
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
))

77 
hÆDMADesc_t
 
	gdmaCh0
;

78 
hÆDMADesc_t
 
	gdmaCh1234
[4];

101 
	$HÆDmaInô
( )

103 
	`HAL_DMA_SET_ADDR_DESC0
–&
dmaCh0
 );

104 
	`HAL_DMA_SET_ADDR_DESC1234
–
dmaCh1234
 );

105 #i‡(
HAL_UART_DMA
 || \

106 ((
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)) || \

107 ((
deföed
 
HAL_IRGEN
Ë&& (HAL_IRGEN =
TRUE
)))

108 
DMAIE
 = 1;

110 
	}
}

112 #i‡(
HAL_UART_DMA
 || \

113 ((
deföed
 
	gHAL_SPI
Ë&& (HAL_SPI =
TRUE
)) || \

114 ((
deföed
 
HAL_IRGEN
Ë&& (HAL_IRGEN =
TRUE
)))

124 
	$HAL_ISR_FUNCTION
–
hÆDmaI§
, 
DMA_VECTOR
 )

126 
	`HÆUARTI§DMA
();

128 
	`HAL_ENTER_ISR
();

130 
DMAIF
 = 0;

132 #i‡
HAL_UART_DMA


133 i‡(
	`HAL_DMA_CHECK_IRQ
(
HAL_DMA_CH_TX
))

135 
	`HÆUARTI§DMA
();

139 #i‡(
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)

140 i‡–
	`HAL_DMA_CHECK_IRQ
–
HAL_DMA_CH_RX
 ) )

142 
	`HAL_DMA_CLEAR_IRQ
–
HAL_DMA_CH_RX
 );

143 
	`HÆSpiRxI§
();

146 i‡–
	`HAL_DMA_CHECK_IRQ
–
HAL_DMA_CH_TX
 ) )

148 
	`HAL_DMA_CLEAR_IRQ
–
HAL_DMA_CH_TX
 );

149 
	`HÆSpiTxI§
();

153 #i‡(
deföed
 
HAL_IRGEN
Ë&& (HAL_IRGEN =
TRUE
)

154 i‡–
HAL_IRGEN
 =
TRUE
 && 
	`HAL_DMA_CHECK_IRQ
–
HAL_IRGEN_DMA_CH
 ) )

156 
	`HAL_DMA_CLEAR_IRQ
–
HAL_IRGEN_DMA_CH
 );

157 
	`HÆIrGíDmaI§
();

161 
	`CLEAR_SLEEP_MODE
();

162 
	`HAL_EXIT_ISR
();

163 
	}
}

	@Components/hal/target/CC2530USB/hal_dma.h

40 #i‚de‡
HAL_DMA_H


41 
	#HAL_DMA_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"hÆ_bﬂrd.h
"

53 
	~"hÆ_ty≥s.h
"

55 #i‡((
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
))

61 
	#HAL_DMA_SET_ADDR_DESC0
–
a
 ) \

62 
	`°
( \

63 
DMA0CFGH
 = (
uöt8
)–(
uöt16
)(
a
) >> 8 ); \

64 
DMA0CFGL
 = (
uöt8
)–(
uöt16
)(
a
) & 0xFF ); \

65 )

	)

67 
	#HAL_DMA_SET_ADDR_DESC1234
–
a
 ) \

68 
	`°
( \

69 
DMA1CFGH
 = (
uöt8
)–(
uöt16
)(
a
) >> 8 ); \

70 
DMA1CFGL
 = (
uöt8
)–(
uöt16
)(
a
) & 0xFF ); \

71 )

	)

73 
	#HAL_DMA_GET_DESC0
(Ë&
dmaCh0


	)

75 
	#HAL_DMA_GET_DESC1234
–
a
 ) (
dmaCh1234
+(◊)-1))

	)

77 
	#HAL_DMA_ARM_CH
–
ch
 ) 
DMAARM
 = (0x01 << (ch))

	)

79 
	#HAL_DMA_CH_ARMED
–
ch
 ) (
DMAARM
 & (0x01 << (ch)))

	)

81 
	#HAL_DMA_ABORT_CH
–
ch
 ) 
DMAARM
 = (0x80 | (0x01 << (ch)))

	)

82 
	#HAL_DMA_MAN_TRIGGER
–
ch
 ) 
DMAREQ
 = (0x01 << (ch))

	)

83 
	#HAL_DMA_START_CH
–
ch
 ) 
	`HAL_DMA_MAN_TRIGGER
–(chË)

	)

85 
	#HAL_DMA_CLEAR_IRQ
–
ch
 ) 
DMAIRQ
 = ~–1 << (chË)

	)

87 
	#HAL_DMA_CHECK_IRQ
–
ch
 ) (
DMAIRQ
 & ( 1 << (chË))

	)

90 
	#HAL_DMA_SET_SOURCE
–
pDesc
, 
§c
 ) \

91 
	`°
( \

92 
pDesc
->
§cAddrH
 = (
uöt8
)((
uöt16
)(
§c
) >> 8); \

93 
pDesc
->
§cAddrL
 = (
uöt8
)–(
uöt16
)(
§c
) & 0xFF ); \

94 )

	)

97 
	#HAL_DMA_SET_DEST
–
pDesc
, 
d°
 ) \

98 
	`°
( \

99 
pDesc
->
d°AddrH
 = (
uöt8
)((
uöt16
)(
d°
) >> 8); \

100 
pDesc
->
d°AddrL
 = (
uöt8
)–(
uöt16
)(
d°
) & 0xFF ); \

101 )

	)

105 
	#HAL_DMA_SET_LEN
–
pDesc
, 
Àn
 ) \

106 
	`°
( \

107 
pDesc
->
x„rLíL
 = (
uöt8
)–(
uöt16
)(
Àn
) & 0xFF); \

108 
pDesc
->
x„rLíV
 &~
HAL_DMA_LEN_H
; \

109 
pDesc
->
x„rLíV
 |(
uöt8
)((
uöt16
)(
Àn
) >> 8); \

110 )

	)

112 
	#HAL_DMA_GET_LEN
–
pDesc
 ) \

113 (((
uöt16
)(
pDesc
->
x„rLíV
 & 
HAL_DMA_LEN_H
Ë<< 8Ë|ÖDesc->
x„rLíL
)

	)

115 
	#HAL_DMA_SET_VLEN
–
pDesc
, 
vMode
 ) \

116 
	`°
( \

117 
pDesc
->
x„rLíV
 &~
HAL_DMA_LEN_V
; \

118 
pDesc
->
x„rLíV
 |(
vMode
 << 5); \

119 )

	)

121 
	#HAL_DMA_SET_WORD_SIZE
–
pDesc
, 
xSz
 ) \

122 
	`°
( \

123 
pDesc
->
˘æA
 &~
HAL_DMA_WORD_SIZE
; \

124 
pDesc
->
˘æA
 |(
xSz
 << 7); \

125 )

	)

127 
	#HAL_DMA_SET_TRIG_MODE
–
pDesc
, 
tMode
 ) \

128 
	`°
( \

129 
pDesc
->
˘æA
 &~
HAL_DMA_TRIG_MODE
; \

130 
pDesc
->
˘æA
 |(
tMode
 << 5); \

131 )

	)

133 
	#HAL_DMA_GET_TRIG_MODE
–
pDesc
 ) (’Desc->
˘æA
 >> 5Ë& 0x3)

	)

135 
	#HAL_DMA_SET_TRIG_SRC
–
pDesc
, 
tSrc
 ) \

136 
	`°
( \

137 
pDesc
->
˘æA
 &~
HAL_DMA_TRIG_SRC
; \

138 
pDesc
->
˘æA
 |
tSrc
; \

139 )

	)

141 
	#HAL_DMA_SET_SRC_INC
–
pDesc
, 
§cInc
 ) \

142 
	`°
( \

143 
pDesc
->
˘æB
 &~
HAL_DMA_SRC_INC
; \

144 
pDesc
->
˘æB
 |(
§cInc
 << 6); \

145 )

	)

147 
	#HAL_DMA_SET_DST_INC
–
pDesc
, 
d°Inc
 ) \

148 
	`°
( \

149 
pDesc
->
˘æB
 &~
HAL_DMA_DST_INC
; \

150 
pDesc
->
˘æB
 |(
d°Inc
 << 4); \

151 )

	)

153 
	#HAL_DMA_SET_IRQ
–
pDesc
, 
íabÀ
 ) \

154 
	`°
( \

155 
pDesc
->
˘æB
 &~
HAL_DMA_IRQ_MASK
; \

156 
pDesc
->
˘æB
 |(
íabÀ
 << 3); \

157 )

	)

159 
	#HAL_DMA_SET_M8
–
pDesc
, 
m8
 ) \

160 
	`°
( \

161 
pDesc
->
˘æB
 &~
HAL_DMA_M8
; \

162 
pDesc
->
˘æB
 |(
m8
 << 2); \

163 )

	)

165 
	#HAL_DMA_SET_PRIORITY
–
pDesc
, 
¥i
 ) \

166 
	`°
( \

167 
pDesc
->
˘æB
 &~
HAL_DMA_PRIORITY
; \

168 
pDesc
->
˘æB
 |
¥i
; \

169 )

	)

176 
	#HAL_DMA_VLEN_USE_LEN
 0x00

	)

178 
	#HAL_DMA_VLEN_1_P_VALOFFIRST
 0x01

	)

180 
	#HAL_DMA_VLEN_VALOFFIRST
 0x02

	)

182 
	#HAL_DMA_VLEN_1_P_VALOFFIRST_P_1
 0x03

	)

184 
	#HAL_DMA_VLEN_1_P_VALOFFIRST_P_2
 0x04

	)

186 
	#HAL_DMA_WORDSIZE_BYTE
 0x00

	)

187 
	#HAL_DMA_WORDSIZE_WORD
 0x01

	)

189 
	#HAL_DMA_TMODE_SINGLE
 0x00

	)

190 
	#HAL_DMA_TMODE_BLOCK
 0x01

	)

191 
	#HAL_DMA_TMODE_SINGLE_REPEATED
 0x02

	)

192 
	#HAL_DMA_TMODE_BLOCK_REPEATED
 0x03

	)

194 
	#HAL_DMA_TRIG_NONE
 0

	)

195 
	#HAL_DMA_TRIG_PREV
 1

	)

196 
	#HAL_DMA_TRIG_T1_CH0
 2

	)

197 
	#HAL_DMA_TRIG_T1_CH1
 3

	)

198 
	#HAL_DMA_TRIG_T1_CH2
 4

	)

199 
	#HAL_DMA_TRIG_T2_COMP
 5

	)

200 
	#HAL_DMA_TRIG_T2_OVFL
 6

	)

201 
	#HAL_DMA_TRIG_T3_CH0
 7

	)

202 
	#HAL_DMA_TRIG_T3_CH1
 8

	)

203 
	#HAL_DMA_TRIG_T4_CH0
 9

	)

204 
	#HAL_DMA_TRIG_T4_CH1
 10

	)

205 
	#HAL_DMA_TRIG_ST
 11

	)

206 
	#HAL_DMA_TRIG_IOC_0
 12

	)

207 
	#HAL_DMA_TRIG_IOC_1
 13

	)

208 
	#HAL_DMA_TRIG_URX0
 14

	)

209 
	#HAL_DMA_TRIG_UTX0
 15

	)

210 
	#HAL_DMA_TRIG_URX1
 16

	)

211 
	#HAL_DMA_TRIG_UTX1
 17

	)

212 
	#HAL_DMA_TRIG_FLASH
 18

	)

213 
	#HAL_DMA_TRIG_RADIO
 19

	)

214 
	#HAL_DMA_TRIG_ADC_CHALL
 20

	)

215 
	#HAL_DMA_TRIG_ADC_CH0
 21

	)

216 
	#HAL_DMA_TRIG_ADC_CH1
 22

	)

217 
	#HAL_DMA_TRIG_ADC_CH2
 23

	)

218 
	#HAL_DMA_TRIG_ADC_CH3
 24

	)

219 
	#HAL_DMA_TRIG_ADC_CH4
 25

	)

220 
	#HAL_DMA_TRIG_ADC_CH5
 26

	)

221 
	#HAL_DMA_TRIG_ADC_CH6
 27

	)

222 
	#HAL_DMA_TRIG_ADC_CH7
 28

	)

223 
	#HAL_DMA_TRIG_ENC_DW
 29

	)

224 
	#HAL_DMA_TRIG_ENC_UP
 30

	)

226 
	#HAL_DMA_SRCINC_0
 0x00

	)

227 
	#HAL_DMA_SRCINC_1
 0x01

	)

228 
	#HAL_DMA_SRCINC_2
 0x02

	)

229 
	#HAL_DMA_SRCINC_M1
 0x03

	)

231 
	#HAL_DMA_DSTINC_0
 0x00

	)

232 
	#HAL_DMA_DSTINC_1
 0x01

	)

233 
	#HAL_DMA_DSTINC_2
 0x02

	)

234 
	#HAL_DMA_DSTINC_M1
 0x03

	)

236 
	#HAL_DMA_IRQMASK_DISABLE
 0x00

	)

237 
	#HAL_DMA_IRQMASK_ENABLE
 0x01

	)

239 
	#HAL_DMA_M8_USE_8_BITS
 0x00

	)

240 
	#HAL_DMA_M8_USE_7_BITS
 0x01

	)

242 
	#HAL_DMA_PRI_LOW
 0x00

	)

243 
	#HAL_DMA_PRI_GUARANTEED
 0x01

	)

244 
	#HAL_DMA_PRI_HIGH
 0x02

	)

245 
	#HAL_DMA_PRI_ABSOLUTE
 0x03

	)

247 
	#HAL_DMA_MAX_ARM_CLOCKS
 45

248 

	)

254 
	#HAL_DMA_LEN_V
 0xE0

	)

255 
	#HAL_DMA_LEN_H
 0x1F

	)

258 
	#HAL_DMA_WORD_SIZE
 0x80

	)

259 
	#HAL_DMA_TRIG_MODE
 0x60

	)

260 
	#HAL_DMA_TRIG_SRC
 0x1F

	)

263 
	#HAL_DMA_SRC_INC
 0xC0

	)

264 
	#HAL_DMA_DST_INC
 0x30

	)

265 
	#HAL_DMA_IRQ_MASK
 0x08

	)

266 
	#HAL_DMA_M8
 0x04

	)

267 
	#HAL_DMA_PRIORITY
 0x03

	)

270 
uöt8
 
§cAddrH
;

271 
uöt8
 
§cAddrL
;

272 
uöt8
 
d°AddrH
;

273 
uöt8
 
d°AddrL
;

274 
uöt8
 
x„rLíV
;

275 
uöt8
 
x„rLíL
;

276 
uöt8
 
˘æA
;

277 
uöt8
 
˘æB
;

278 } 
	thÆDMADesc_t
;

284 
hÆDMADesc_t
 
dmaCh0
;

285 
hÆDMADesc_t
 
dmaCh1234
[4];

291 
HÆDmaInô
( );

295 #ifde‡
__˝lu•lus


	@Components/hal/target/CC2530USB/hal_flash.c

45 
	~"hÆ_bﬂrd_cfg.h
"

46 
	~"hÆ_dma.h
"

47 
	~"hÆ_Êash.h
"

48 
	~"hÆ_mcu.h
"

49 
	~"hÆ_ty≥s.h
"

70 
	$HÆFœshRód
(
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
, uöt16 
˙t
)

73 
uöt8
 *
pD©a
 = (uöt8 *)(
off£t
 + 
HAL_FLASH_PAGE_MAP
) +

74 ((
pg
 % 
HAL_FLASH_PAGE_PER_BANK
Ë* 
HAL_FLASH_PAGE_SIZE
);

75 
uöt8
 
mem˘r
 = 
MEMCTR
;

77 #i‡(!
deföed
 
HAL_OAD_BOOT_CODE
Ë&& (!deföed 
HAL_OTA_BOOT_CODE
)

78 
hÆI¡Sèã_t
 
is
;

81 
pg
 /
HAL_FLASH_PAGE_PER_BANK
;

83 #i‡(!
deföed
 
HAL_OAD_BOOT_CODE
Ë&& (!deföed 
HAL_OTA_BOOT_CODE
)

84 
	`HAL_ENTER_CRITICAL_SECTION
(
is
);

88 
MEMCTR
 = (MEMCTR & 0xF8Ë| 
pg
;

90 
˙t
--)

92 *
buf
++ = *
pD©a
++;

95 
MEMCTR
 = 
mem˘r
;

97 #i‡(!
deföed
 
HAL_OAD_BOOT_CODE
Ë&& (!deföed 
HAL_OTA_BOOT_CODE
)

98 
	`HAL_EXIT_CRITICAL_SECTION
(
is
);

100 
	}
}

120 
	$HÆFœshWrôe
(
uöt16
 
addr
, 
uöt8
 *
buf
, uöt16 
˙t
)

122 #i‡(
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
)

123 
hÆDMADesc_t
 *
ch
 = 
	`HAL_NV_DMA_GET_DESC
();

125 
	`HAL_DMA_SET_SOURCE
(
ch
, 
buf
);

126 
	`HAL_DMA_SET_DEST
(
ch
, &
FWDATA
);

127 
	`HAL_DMA_SET_VLEN
(
ch
, 
HAL_DMA_VLEN_USE_LEN
);

128 
	`HAL_DMA_SET_LEN
(
ch
, (
˙t
 * 
HAL_FLASH_WORD_SIZE
));

129 
	`HAL_DMA_SET_WORD_SIZE
(
ch
, 
HAL_DMA_WORDSIZE_BYTE
);

130 
	`HAL_DMA_SET_TRIG_MODE
(
ch
, 
HAL_DMA_TMODE_SINGLE
);

131 
	`HAL_DMA_SET_TRIG_SRC
(
ch
, 
HAL_DMA_TRIG_FLASH
);

132 
	`HAL_DMA_SET_SRC_INC
(
ch
, 
HAL_DMA_SRCINC_1
);

133 
	`HAL_DMA_SET_DST_INC
(
ch
, 
HAL_DMA_DSTINC_0
);

135 
	`HAL_DMA_SET_IRQ
(
ch
, 
HAL_DMA_IRQMASK_DISABLE
);

136 
	`HAL_DMA_SET_M8
–
ch
, 
HAL_DMA_M8_USE_8_BITS
);

137 
	`HAL_DMA_SET_PRIORITY
(
ch
, 
HAL_DMA_PRI_HIGH
);

138 
	`HAL_DMA_CLEAR_IRQ
(
HAL_NV_DMA_CH
);

139 
	`HAL_DMA_ARM_CH
(
HAL_NV_DMA_CH
);

141 
FADDRL
 = (
uöt8
)
addr
;

142 
FADDRH
 = (
uöt8
)(
addr
 >> 8);

143 
FCTL
 |= 0x02;

144 
FCTL
 & 0x80);

146 
	}
}

164 
	$HÆFœshEø£
(
uöt8
 
pg
)

166 
FADDRH
 = 
pg
 * (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
 / 256);

167 
FCTL
 |= 0x01;

168 
	}
}

	@Components/hal/target/CC2530USB/hal_key.c

45 
	~"hÆ_bﬂrd.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"hÆ_key.h
"

48 
	~"hÆ_ty≥s.h
"

49 
	~"oßl.h
"

50 
	~"usb_öãºu±.h
"

57 
	#HAL_KEY_CLR_INT
() \

58 
	`°
 ( \

60 
P1IFG
 = 0; \

61 
P1IF
 = 0; \

62 )

	)

79 
uöt8
 
	gHÆ_KeyI¡E«bÀ
;

91 
hÆKeyCBack_t
 
	gpHÆKeyPro˚ssFun˘i⁄
;

92 vﬁ©ûê
uöt8
 
	gi§Keys
;

93 
uöt8
 
	ghÆKeys
;

116 
	$HÆKeyInô
()

118 
	}
}

137 
	$HÆKeyC⁄fig
(
boﬁ
 
öãºu±E«bÀ
, 
hÆKeyCBack_t
 
cback
)

139 i‡((
HÆ_KeyI¡E«bÀ
 = 
öãºu±E«bÀ
))

141 
	`HAL_KEY_CLR_INT
();

142 
PICTL
 |= 0x01;

143 
P1IEN
 |
PUSH1_BV
 | 
PUSH2_BV
;

144 
IEN2
 |= 0x10;

148 ()
	`oßl_£t_evít
(
HÆ_TaskID
, 
HAL_KEY_EVENT
);

151 
pHÆKeyPro˚ssFun˘i⁄
 = 
cback
;

152 
	}
}

170 
	$HÆKeyPﬁl
()

172 
uöt8
 
√wKeys
;

174 i‡(
HÆ_KeyI¡E«bÀ
)

176 
hÆI¡Sèã_t
 
ötSèã
;

177 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

178 
√wKeys
 = 
i§Keys
;

179 
i§Keys
 = 0;

180 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

184 
uöt8
 
keys
 = 
	`HÆKeyRód
();

185 
√wKeys
 = (
hÆKeys
 ^ 
keys
) & keys;

186 
hÆKeys
 = 
keys
;

189 i‡(
√wKeys
 && 
pHÆKeyPro˚ssFun˘i⁄
)

191 (
pHÆKeyPro˚ssFun˘i⁄
)(
√wKeys
, 
HAL_KEY_STATE_NORMAL
);

193 
	}
}

211 
uöt8
 
	$HÆKeyRód
()

213 
uöt8
 
keys
 = 0;

215 i‡(
	`HAL_PUSH_BUTTON1
())

217 
keys
 |
HAL_KEY_SW_1
;

220 i‡(
	`HAL_PUSH_BUTTON2
())

222 
keys
 |
HAL_KEY_SW_2
;

225  
keys
;

226 
	}
}

237 
	$HÆKeyE¡îSÀï
 ( )

239 
	}
}

250 
uöt8
 
	$HÆKeyExôSÀï
 ( )

253  ( 
	`HÆKeyRód
 () );

254 
	}
}

272 
	$HAL_ISR_FUNCTION
–
usbKeyISR
, 
P1INT_VECTOR
 )

274 
	`HAL_ENTER_ISR
();

276 i‡(
P1IFG
 & 
PUSH1_BV
)

278 
i§Keys
 |
HAL_KEY_SW_1
;

281 i‡(
P1IFG
 & 
PUSH2_BV
)

283 
i§Keys
 |
HAL_KEY_SW_2
;

286 
	`HAL_KEY_CLR_INT
();

287 ()
	`oßl_£t_evít
(
HÆ_TaskID
, 
HAL_KEY_EVENT
);

289 
	`HAL_EXIT_ISR
();

290 
	}
}

	@Components/hal/target/CC2530USB/hal_lcd.c

43 
	~"hÆ_ty≥s.h
"

44 
	~"hÆ_lcd.h
"

45 
	~"OSAL.h
"

46 
	~"OnBﬂrd.h
"

47 
	~"hÆ_as£π.h
"

49 #i‡
deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

50 
	~"DebugTø˚.h
"

71 
	#HAL_LCD_MODE_PORT
 0

	)

72 
	#HAL_LCD_MODE_PIN
 0

	)

74 
	#HAL_LCD_RESET_PORT
 1

	)

75 
	#HAL_LCD_RESET_PIN
 1

	)

77 
	#HAL_LCD_CS_PORT
 1

	)

78 
	#HAL_LCD_CS_PIN
 2

	)

81 
	#HAL_LCD_CLK_PORT
 1

	)

82 
	#HAL_LCD_CLK_PIN
 5

	)

84 
	#HAL_LCD_MOSI_PORT
 1

	)

85 
	#HAL_LCD_MOSI_PIN
 6

	)

87 
	#HAL_LCD_MISO_PORT
 1

	)

88 
	#HAL_LCD_MISO_PIN
 7

	)

91 
	#HAL_SPI_CLOCK_POL_LO
 0x00

	)

92 
	#HAL_SPI_CLOCK_PHA_0
 0x00

	)

93 
	#HAL_SPI_TRANSFER_MSB_FIRST
 0x20

	)

96 
	#LCD_MAX_LINE_COUNT
 3

	)

97 
	#LCD_MAX_LINE_LENGTH
 16

	)

98 
	#LCD_MAX_BUF
 25

	)

103 
	#OSC_OFF
 0x00

	)

104 
	#OSC_ON
 0x01

	)

105 
	#POWER_SAVE_OFF
 0x00

	)

106 
	#POWER_SAVE_ON
 0x02

	)

107 
	#SET_POWER_SAVE_MODE
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x0C | (›ti⁄s))

	)

110 
	#CGROM
 0x00

	)

111 
	#CGRAM
 0x01

	)

112 
	#COM_FORWARD
 0x00

	)

113 
	#COM_BACKWARD
 0x02

	)

114 
	#TWO_LINE
 0x00

	)

115 
	#THREE_LINE
 0x04

	)

116 
	#FUNCTION_SET
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x10 | (›ti⁄s))

	)

119 
	#LINE1
 0x00

	)

120 
	#LINE2
 0x01

	)

121 
	#LINE3
 0x02

	)

122 
	#LINE4
 0x03

	)

123 
	#SET_DISPLAY_START_LINE
(
löe
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x18 | (löe))

	)

126 
	#BIAS_1_5
 0x00

	)

127 
	#BIAS_1_4
 0x01

	)

128 
	#SET_BIAS_CTRL
(
büs
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x1C | (büs))

	)

131 
	#VOLTAGE_DIVIDER_OFF
 0x00

	)

132 
	#VOLTAGE_DIVIDER_ON
 0x01

	)

133 
	#CONVERTER_AND_REG_OFF
 0x00

	)

134 
	#CONVERTER_AND_REG_ON
 0x04

	)

135 
	#SET_POWER_CTRL
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x20 | (›ti⁄s))

	)

138 
	#DISPLAY_CTRL_ON
 0x01

	)

139 
	#DISPLAY_CTRL_OFF
 0x00

	)

140 
	#DISPLAY_CTRL_BLINK_ON
 0x02

	)

141 
	#DISPLAY_CTRL_BLINK_OFF
 0x00

	)

142 
	#DISPLAY_CTRL_CURSOR_ON
 0x04

	)

143 
	#DISPLAY_CTRL_CURSOR_OFF
 0x00

	)

144 
	#SET_DISPLAY_CTRL
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x28 | (›ti⁄s))

	)

147 
	#SET_DDRAM_ADDR
(
ch¨Index
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x80 | (ch¨Index))

	)

148 
	#SET_GCRAM_CHAR
(
•ecIndex
Ë
	`HÆLcd_HW_C⁄åﬁ
(0xC0 | (•ecIndex))

	)

151 
	#CONTRAST_CTRL_REGISTER
 0x10

	)

152 
	#SET_ICONRAM_ADDR
(
addr
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x40 | (addr))

	)

155 
	#LINE_1_AND_2
 0x01

	)

156 
	#LINE_2_AND_3
 0x02

	)

157 
	#NORMAL_DISPLAY
 0x00

	)

158 
	#SET_DOUBLE_HEIGHT
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x08 | (›ti⁄s))

	)

164 
	#HAL_IO_SET
(
p‹t
, 
pö
, 
vÆ
Ë
	`HAL_IO_SET_PREP
’‹t,Öö, vÆ)

	)

165 
	#HAL_IO_SET_PREP
(
p‹t
, 
pö
, 
vÆ
Ë
	`°
–
P
##p‹t##
_
##pö## = vÆ; )

	)

167 
	#HAL_CONFIG_IO_OUTPUT
(
p‹t
, 
pö
, 
vÆ
Ë
	`HAL_CONFIG_IO_OUTPUT_PREP
’‹t,Öö, vÆ)

	)

168 
	#HAL_CONFIG_IO_OUTPUT_PREP
(
p‹t
, 
pö
, 
vÆ
Ë
	`°
–
P
##p‹t##
SEL
 &~
	`BV
(pin); \

169 
P
##
p‹t
##
_
##
pö
## = 
vÆ
; \

170 
P
##
p‹t
##
DIR
 |
	`BV
(
pö
); )

	)

172 
	#HAL_CONFIG_IO_PERIPHERAL
(
p‹t
, 
pö
Ë
	`HAL_CONFIG_IO_PERIPHERAL_PREP
’‹t,Öö)

	)

173 
	#HAL_CONFIG_IO_PERIPHERAL_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
SEL
 |
	`BV
’ö); )

	)

178 
	#LCD_SPI_BEGIN
(Ë
	`HAL_IO_SET
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 0);

	)

179 
	#LCD_SPI_END
() \

181 
	`asm
("NOP"); \

182 
	`asm
("NOP"); \

183 
	`asm
("NOP"); \

184 
	`asm
("NOP"); \

185 
	`HAL_IO_SET
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 1); \

186 }

	)

188 
	#LCD_SPI_TX
(
x
Ë{ 
U1CSR
 &~(
	`BV
(2Ë| BV(1)); 
U1DBUF
 = x;  !(U1CSR & BV(1)Ë); }

	)

189 
	#LCD_SPI_WAIT_RXRDY
(Ë{ !(
U1CSR
 & 
	`BV
(1))); }

	)

193 
	#LCD_DO_WRITE
(Ë
	`HAL_IO_SET
(
HAL_LCD_MODE_PORT
, 
HAL_LCD_MODE_PIN
, 1);

	)

194 
	#LCD_DO_CONTROL
(Ë
	`HAL_IO_SET
(
HAL_LCD_MODE_PORT
, 
HAL_LCD_MODE_PIN
, 0);

	)

196 
	#LCD_ACTIVATE_RESET
(Ë
	`HAL_IO_SET
(
HAL_LCD_RESET_PORT
, 
HAL_LCD_RESET_PIN
, 0);

	)

197 
	#LCD_RELEASE_RESET
(Ë
	`HAL_IO_SET
(
HAL_LCD_RESET_PORT
, 
HAL_LCD_RESET_PIN
, 1);

	)

199 #i‡(
HAL_LCD
 =
TRUE
)

204 
uöt8
 *
	gLcd_Löe1
;

210 
HÆLcd_HW_Inô
();

211 
HÆLcd_HW_WaôUs
(
uöt16
 
i
);

212 
HÆLcd_HW_CÀ¨
();

213 
HÆLcd_HW_CÀ¨AŒS≥cCh¨s
();

214 
HÆLcd_HW_C⁄åﬁ
(
uöt8
 
cmd
);

215 
HÆLcd_HW_Wrôe
(
uöt8
 
d©a
);

216 
HÆLcd_HW_SëC⁄åa°
(
uöt8
 
vÆue
);

217 
HÆLcd_HW_WrôeCh¨
(
uöt8
 
löe
, uöt8 
cﬁ
, 
ãxt
);

218 
HÆLcd_HW_WrôeLöe
(
uöt8
 
löe
, c⁄° *
pText
);

230 
	$HÆLcdInô
()

232 #i‡(
HAL_LCD
 =
TRUE
)

233 
Lcd_Löe1
 = 
NULL
;

234 
	`HÆLcd_HW_Inô
();

236 
	}
}

266 
	$HÆLcdWrôeSåög
 ( *
°r
, 
uöt8
 
›ti⁄
)

268 #i‡(
HAL_LCD
 =
TRUE
)

270 
uöt8
 
°rLí
 = 0;

271 
uöt8
 
tŸÆLí
 = 0;

272 
uöt8
 *
buf
;

273 
uöt8
 
tmpLí
;

275 i‡–
Lcd_Löe1
 =
NULL
 )

277 
Lcd_Löe1
 = 
	`oßl_mem_Æloc
–
HAL_LCD_MAX_CHARS
+1 );

278 
	`HÆLcdWrôeSåög
( "TexasInstruments", 1 );

281 
°rLí
 = (
uöt8
)
	`oßl_°æí
–(*)
°r
 );

284 i‡–
°rLí
 > 
HAL_LCD_MAX_CHARS
 )

285 
°rLí
 = 
HAL_LCD_MAX_CHARS
;

287 i‡–
›ti⁄
 =
HAL_LCD_LINE_1
 )

290 
	`oßl_mem˝y
–
Lcd_Löe1
, 
°r
, 
°rLí
 );

291 
Lcd_Löe1
[
°rLí
] = '\0';

296 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
Lcd_Löe1
 );

297 
tŸÆLí
 = 
tmpLí
 + 1 + 
°rLí
 + 1;

298 
buf
 = 
	`oßl_mem_Æloc
–
tŸÆLí
 );

299 i‡–
buf
 !
NULL
 )

302 
	`oßl_mem˝y
–
buf
, 
Lcd_Löe1
, 
tmpLí
 );

303 
buf
[
tmpLí
++] = ' ';

304 
	`oßl_mem˝y
–&
buf
[
tmpLí
], 
°r
, 
°rLí
 );

305 
buf
[
tmpLí
+
°rLí
] = '\0';

308 #i‡
	`deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

310 #i‡
	`deföed
(
SERIAL_DEBUG_SUPPORTED
)

311 
	`debug_°r
–(
uöt8
*)
buf
 );

317 
	`oßl_mem_‰ì
–
buf
 );

322 
	`HÆLcd_HW_WrôeLöe
 (
›ti⁄
, 
°r
);

326 
	}
}

339 
	$HÆLcdWrôeVÆue
 ( 
uöt32
 
vÆue
, c⁄° 
uöt8
 
ødix
, uöt8 
›ti⁄
)

341 #i‡(
HAL_LCD
 =
TRUE
)

342 
uöt8
 
buf
[
LCD_MAX_BUF
];

344 
	`_…ﬂ
–
vÆue
, &
buf
[0], 
ødix
 );

345 
	`HÆLcdWrôeSåög
–(*)
buf
, 
›ti⁄
 );

347 
	}
}

359 
	$HÆLcdWrôeS¸ìn
–*
löe1
, *
löe2
 )

361 #i‡(
HAL_LCD
 =
TRUE
)

362 
	`HÆLcdWrôeSåög
–
löe1
, 1 );

363 
	`HÆLcdWrôeSåög
–
löe2
, 2 );

365 
	}
}

379 
	$HÆLcdWrôeSåögVÆue
–*
tôÀ
, 
uöt16
 
vÆue
, 
uöt8
 
f‹m©
, uöt8 
löe
 )

381 #i‡(
HAL_LCD
 =
TRUE
)

382 
uöt8
 
tmpLí
;

383 
uöt8
 
buf
[
LCD_MAX_BUF
];

384 
uöt32
 
îr
;

386 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
tôÀ
 );

387 
	`oßl_mem˝y
–
buf
, 
tôÀ
, 
tmpLí
 );

388 
buf
[
tmpLí
] = ' ';

389 
îr
 = (
uöt32
)(
vÆue
);

390 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
+1], 
f‹m©
 );

391 
	`HÆLcdWrôeSåög
–(*)
buf
, 
löe
 );

393 
	}
}

409 
	$HÆLcdWrôeSåögVÆueVÆue
–*
tôÀ
, 
uöt16
 
vÆue1
, 
uöt8
 
f‹m©1
,

410 
uöt16
 
vÆue2
, 
uöt8
 
f‹m©2
, uöt8 
löe
 )

413 #i‡(
HAL_LCD
 =
TRUE
)

415 
uöt8
 
tmpLí
;

416 
uöt8
 
buf
[
LCD_MAX_BUF
];

417 
uöt32
 
îr
;

419 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
tôÀ
 );

420 i‡–
tmpLí
 )

422 
	`oßl_mem˝y
–
buf
, 
tôÀ
, 
tmpLí
 );

423 
buf
[
tmpLí
++] = ' ';

426 
îr
 = (
uöt32
)(
vÆue1
);

427 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
], 
f‹m©1
 );

428 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
buf
 );

430 
buf
[
tmpLí
++] = ',';

431 
buf
[
tmpLí
++] = ' ';

432 
îr
 = (
uöt32
)(
vÆue2
);

433 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
], 
f‹m©2
 );

435 
	`HÆLcdWrôeSåög
–(*)
buf
, 
löe
 );

438 
	}
}

450 
	$HÆLcdDi•œyPî˚¡B¨
–*
tôÀ
, 
uöt8
 
vÆue
 )

452 #i‡(
HAL_LCD
 =
TRUE
)

454 
uöt8
 
≥r˚¡
;

455 
uöt8
 
À·Ovî
;

456 
uöt8
 
buf
[17];

457 
uöt32
 
îr
;

458 
uöt8
 
x
;

461 
	`HÆLcdWrôeSåög
–
tôÀ
, 
HAL_LCD_LINE_1
 );

463 i‡–
vÆue
 > 100 )

464 
vÆue
 = 100;

467 
≥r˚¡
 = (
uöt8
)(
vÆue
 / 10);

468 
À·Ovî
 = (
uöt8
)(
vÆue
 % 10);

471 
	`oßl_mem˝y
–
buf
, "[ ] ", 15 );

473  
x
 = 0; x < 
≥r˚¡
; x ++ )

475 
buf
[1+
x
] = '>';

478 i‡–
À·Ovî
 >= 5 )

479 
buf
[1+
x
] = '+';

481 
îr
 = (
uöt32
)
vÆue
;

482 
	`_…ﬂ
–
îr
, (
uöt8
*)&
buf
[13], 10 );

484 
	`HÆLcdWrôeSåög
–(*)
buf
, 
HAL_LCD_LINE_2
 );

488 
	}
}

490 #i‡(
HAL_LCD
 =
TRUE
)

504 
	$hÆLcd_C⁄figIO
()

507 
	`HAL_CONFIG_IO_OUTPUT
(
HAL_LCD_MODE_PORT
, 
HAL_LCD_MODE_PIN
, 1);

508 
	`HAL_CONFIG_IO_OUTPUT
(
HAL_LCD_RESET_PORT
, 
HAL_LCD_RESET_PIN
, 1);

509 
	`HAL_CONFIG_IO_OUTPUT
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 1);

510 
	}
}

521 
	$hÆLcd_C⁄figSPI
()

525 
uöt8
 
baud_exp⁄ít
;

526 
uöt8
 
baud_m™tisß
;

529 
PERCFG
 |= 0x02;

532 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_CLK_PORT
, 
HAL_LCD_CLK_PIN
);

533 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_MOSI_PORT
, 
HAL_LCD_MOSI_PIN
);

534 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_MISO_PORT
, 
HAL_LCD_MISO_PIN
);

540 
baud_exp⁄ít
 = 15;

541 
baud_m™tisß
 = 0;

544 
U1UCR
 = 0x80;

545 
U1CSR
 = 0x00;

546 
U1GCR
 = 
HAL_SPI_TRANSFER_MSB_FIRST
 | 
HAL_SPI_CLOCK_PHA_0
 | 
HAL_SPI_CLOCK_POL_LO
 | 
baud_exp⁄ít
;

547 
U1BAUD
 = 
baud_m™tisß
;

548 
	}
}

559 
	$HÆLcd_HW_Inô
()

562 
	`hÆLcd_C⁄figIO
();

565 
	`hÆLcd_C⁄figSPI
();

568 
	`LCD_ACTIVATE_RESET
();

569 
	`HÆLcd_HW_WaôUs
(15000);

570 
	`LCD_RELEASE_RESET
();

571 
	`HÆLcd_HW_WaôUs
(15);

574 
	`FUNCTION_SET
(
CGRAM
 | 
COM_FORWARD
 | 
THREE_LINE
);

577 
	`HÆLcd_HW_SëC⁄åa°
(15);

580 
	`SET_POWER_SAVE_MODE
(
OSC_OFF
 | 
POWER_SAVE_ON
);

581 
	`SET_POWER_CTRL
(
VOLTAGE_DIVIDER_ON
 | 
CONVERTER_AND_REG_ON
);

582 
	`SET_BIAS_CTRL
(
BIAS_1_5
);

583 
	`HÆLcd_HW_WaôUs
(21000);

586 
	`HÆLcd_HW_CÀ¨
();

587 
	`HÆLcd_HW_CÀ¨AŒS≥cCh¨s
();

588 
	`SET_DISPLAY_CTRL
(
DISPLAY_CTRL_ON
 | 
DISPLAY_CTRL_BLINK_OFF
 | 
DISPLAY_CTRL_CURSOR_OFF
);

589 
	}
}

600 
	$HÆLcd_HW_C⁄åﬁ
(
uöt8
 
cmd
)

602 
	`LCD_SPI_BEGIN
();

603 
	`LCD_DO_CONTROL
();

604 
	`LCD_SPI_TX
(
cmd
);

605 
	`LCD_SPI_WAIT_RXRDY
();

606 
	`LCD_SPI_END
();

607 
	}
}

618 
	$HÆLcd_HW_Wrôe
(
uöt8
 
d©a
)

620 
	`LCD_SPI_BEGIN
();

621 
	`LCD_DO_WRITE
();

622 
	`LCD_SPI_TX
(
d©a
);

623 
	`LCD_SPI_WAIT_RXRDY
();

624 
	`LCD_SPI_END
();

625 
	}
}

636 
	$HÆLcd_HW_SëC⁄åa°
(
uöt8
 
vÆue
)

638 
	`SET_ICONRAM_ADDR
(
CONTRAST_CTRL_REGISTER
);

639 
	`HÆLcd_HW_Wrôe
(
vÆue
);

640 
	}
}

651 
	$HÆLcd_HW_CÀ¨
()

653 
uöt8
 
n
;

655 
	`SET_DDRAM_ADDR
(0x00);

656 
n
 = 0;Ç < (
LCD_MAX_LINE_COUNT
 * 
LCD_MAX_LINE_LENGTH
);Ç++)

658 
	`HÆLcd_HW_Wrôe
(' ');

660 
	}
}

671 
	$HÆLcd_HW_CÀ¨AŒS≥cCh¨s
()

673 
uöt8
 
n
 = 0;

675 
	`SET_GCRAM_CHAR
(0);

676 
n
 = 0;Ç < (8 * 8);Ç++)

678 
	`HÆLcd_HW_Wrôe
(0x00);

680 
	}
}

692 
	$HÆLcd_HW_WrôeCh¨
(
uöt8
 
löe
, uöt8 
cﬁ
, 
ãxt
)

694 i‡(
cﬁ
 < 
LCD_MAX_LINE_LENGTH
)

696 
	`SET_DDRAM_ADDR
((
löe
 - 1Ë* 
LCD_MAX_LINE_LENGTH
 + 
cﬁ
);

697 
	`HÆLcd_HW_Wrôe
(
ãxt
);

703 
	}
}

715 
	$HÆLcd_HW_WrôeLöe
(
uöt8
 
löe
, c⁄° *
pText
)

717 
uöt8
 
cou¡
;

718 
uöt8
 
tŸÆLígth
 = (uöt8)
	`oßl_°æí
–(*)
pText
 );

721 
cou¡
=0; cou¡<
tŸÆLígth
; count++)

723 
	`HÆLcd_HW_WrôeCh¨
(
löe
, 
cou¡
, (*(
pText
++)));

727 
cou¡
=
tŸÆLígth
; cou¡<
LCD_MAX_LINE_LENGTH
;count++)

729 
	`HÆLcd_HW_WrôeCh¨
(
löe
, 
cou¡
, ' ');

731 
	}
}

742 
	$HÆLcd_HW_WaôUs
(
uöt16
 
mi¸oSecs
)

744 
mi¸oSecs
--)

747 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

748 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

749 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

750 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

751 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

752 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

753 
	`asm
("nop");ásm("nop");

755 
	}
}

	@Components/hal/target/CC2530USB/hal_led.c

43 
	~"hÆ_mcu.h
"

44 
	~"hÆ_defs.h
"

45 
	~"hÆ_ty≥s.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"hÆ_Àd.h
"

48 
	~"oßl.h
"

49 
	~"hÆ_bﬂrd.h
"

64 
uöt8
 
	mmode
;

65 
uöt8
 
	mtodo
;

66 
uöt8
 
	m⁄P˘
;

67 
uöt16
 
	mtime
;

68 
uöt32
 
	m√xt
;

69 } 
	tHÆLedC⁄åﬁ_t
;

73 
HÆLedC⁄åﬁ_t
 
	mHÆLedC⁄åﬁTabÀ
[
HAL_LED_DEFAULT_MAX_LEDS
];

74 
uöt8
 
	m¶ìpA˘ive
;

75 } 
	tHÆLedSètus_t
;

83 
uöt8
 
	gHÆLedSèã
;

85 #i‡
HAL_LED
 =
TRUE


86 
uöt8
 
	gHÆSÀïLedSèã
;

87 
uöt8
 
	g¥eBlökSèã
;

91 #ifde‡
BLINK_LEDS


92 
HÆLedSètus_t
 
	gHÆLedSètusC⁄åﬁ
;

98 #i‡(
HAL_LED
 =
TRUE
)

99 
HÆLedUpd©e
 ();

100 
HÆLedOnOff
 (
uöt8
 
Àds
, uöt8 
mode
);

116 
	$HÆLedInô
 ()

118 #i‡(
HAL_LED
 =
TRUE
)

120 
	`HÆLedSë
 (
HAL_LED_ALL
, 
HAL_LED_MODE_OFF
);

122 #ifde‡
BLINK_LEDS


124 
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
 = 
FALSE
;

126 
	}
}

137 
uöt8
 
	$HÆLedSë
 (
uöt8
 
Àds
, uöt8 
mode
)

140 #i‡(
	`deföed
 (
BLINK_LEDS
)Ë&& (
HAL_LED
 =
TRUE
)

141 
uöt8
 
Àd
;

142 
HÆLedC⁄åﬁ_t
 *
°s
;

144 
mode
)

146 
HAL_LED_MODE_BLINK
:

148 
	`HÆLedBlök
 (
Àds
, 1, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
);

151 
HAL_LED_MODE_FLASH
:

153 
	`HÆLedBlök
 (
Àds
, 
HAL_LED_DEFAULT_FLASH_COUNT
, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
);

156 
HAL_LED_MODE_ON
:

157 
HAL_LED_MODE_OFF
:

158 
HAL_LED_MODE_TOGGLE
:

160 
Àd
 = 
HAL_LED_1
;

161 
Àds
 &
HAL_LED_ALL
;

162 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

164 
Àds
)

166 i‡(
Àds
 & 
Àd
)

168 i‡(
mode
 !
HAL_LED_MODE_TOGGLE
)

170 
°s
->
mode
 = mode;

174 
°s
->
mode
 ^
HAL_LED_MODE_ON
;

176 
	`HÆLedOnOff
 (
Àd
, 
°s
->
mode
);

177 
Àds
 ^
Àd
;

179 
Àd
 <<= 1;

180 
°s
++;

188 #ñi‡(
HAL_LED
 =
TRUE
)

189 
	`LedOnOff
(
Àds
, 
mode
);

192 (Ë
Àds
;

193 (Ë
mode
;

196  ( 
HÆLedSèã
 );

198 
	}
}

213 
	$HÆLedBlök
 (
uöt8
 
Àds
, uöt8 
numBlöks
, uöt8 
≥r˚¡
, 
uöt16
 
≥riod
)

215 #i‡(
	`deföed
 (
BLINK_LEDS
)Ë&& (
HAL_LED
 =
TRUE
)

216 
uöt8
 
Àd
;

217 
HÆLedC⁄åﬁ_t
 *
°s
;

219 i‡(
Àds
 && 
≥r˚¡
 && 
≥riod
)

221 i‡(
≥r˚¡
 < 100)

223 
Àd
 = 
HAL_LED_1
;

224 
Àds
 &
HAL_LED_ALL
;

225 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

227 
Àds
)

229 i‡(
Àds
 & 
Àd
)

232 if(
°s
->
mode
 < 
HAL_LED_MODE_BLINK
 )

233 
¥eBlökSèã
 |(
Àd
 & 
HÆLedSèã
);

235 
°s
->
mode
 = 
HAL_LED_MODE_OFF
;

236 
°s
->
time
 = 
≥riod
;

237 
°s
->
⁄P˘
 = 
≥r˚¡
;

238 
°s
->
todo
 = 
numBlöks
;

239 i‡(!
numBlöks
Ë
°s
->
mode
 |
HAL_LED_MODE_FLASH
;

240 
°s
->
√xt
 = 
	`oßl_GëSy°emClock
();

241 
°s
->
mode
 |
HAL_LED_MODE_BLINK
;

242 
Àds
 ^
Àd
;

244 
Àd
 <<= 1;

245 
°s
++;

248 
	`oßl_°›_timîEx
(
HÆ_TaskID
, 
HAL_LED_BLINK_EVENT
);

249 
	`oßl_£t_evít
 (
HÆ_TaskID
, 
HAL_LED_BLINK_EVENT
);

253 
	`HÆLedSë
 (
Àds
, 
HAL_LED_MODE_ON
);

258 
	`HÆLedSë
 (
Àds
, 
HAL_LED_MODE_OFF
);

260 #ñi‡(
HAL_LED
 =
TRUE
)

261 
≥r˚¡
 = (
Àds
 & 
HÆLedSèã
Ë? 
HAL_LED_MODE_OFF
 : 
HAL_LED_MODE_ON
;

262 
	`HÆLedOnOff
 (
Àds
, 
≥r˚¡
);

265 (Ë
Àds
;

266 (Ë
numBlöks
;

267 (Ë
≥r˚¡
;

268 (Ë
≥riod
;

270 
	}
}

272 #i‡(
HAL_LED
 =
TRUE
)

282 
	$HÆLedUpd©e
 ()

284 
uöt8
 
Àd
;

285 
uöt8
 
p˘
;

286 
uöt8
 
Àds
;

287 
HÆLedC⁄åﬁ_t
 *
°s
;

288 
uöt32
 
time
;

289 
uöt16
 
√xt
;

290 
uöt16
 
waô
;

292 
√xt
 = 0;

293 
Àd
 = 
HAL_LED_1
;

294 
Àds
 = 
HAL_LED_ALL
;

295 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

298 i‡(!
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
)

300 
Àds
)

302 i‡(
Àds
 & 
Àd
)

304 i‡(
°s
->
mode
 & 
HAL_LED_MODE_BLINK
)

306 
time
 = 
	`oßl_GëSy°emClock
();

307 i‡(
time
 >
°s
->
√xt
)

309 i‡(
°s
->
mode
 & 
HAL_LED_MODE_ON
)

311 
p˘
 = 100 - 
°s
->
⁄P˘
;

312 
°s
->
mode
 &~
HAL_LED_MODE_ON
;

313 
	`HÆLedOnOff
 (
Àd
, 
HAL_LED_MODE_OFF
);

315 i‡(!(
°s
->
mode
 & 
HAL_LED_MODE_FLASH
))

317 
°s
->
todo
--;

320 i‡–(!
°s
->
todo
Ë&& !(°s->
mode
 & 
HAL_LED_MODE_FLASH
) )

322 
°s
->
mode
 ^
HAL_LED_MODE_BLINK
;

326 
p˘
 = 
°s
->
⁄P˘
;

327 
°s
->
mode
 |
HAL_LED_MODE_ON
;

328 
	`HÆLedOnOff
 (
Àd
, 
HAL_LED_MODE_ON
);

330 i‡(
°s
->
mode
 & 
HAL_LED_MODE_BLINK
)

332 
waô
 = (((
uöt32
)
p˘
 * (uöt32)
°s
->
time
) / 100);

333 
°s
->
√xt
 = 
time
 + 
waô
;

338 
waô
 = 0;

340 
	`HÆLedSë
 (
Àd
, ((
¥eBlökSèã
 &Üed)!=0)?
HAL_LED_MODE_ON
:
HAL_LED_MODE_OFF
);

342 
¥eBlökSèã
 &(
Àd
 ^ 0xFF);

347 
waô
 = 
°s
->
√xt
 - 
time
;

350 i‡(!
√xt
 || ( 
waô
 && (wait <Çext) ))

352 
√xt
 = 
waô
;

355 
Àds
 ^
Àd
;

357 
Àd
 <<= 1;

358 
°s
++;

361 i‡(
√xt
)

363 
	`oßl_°¨t_timîEx
(
HÆ_TaskID
, 
HAL_LED_BLINK_EVENT
, 
√xt
);

366 
	}
}

378 
	$HÆLedOnOff
 (
uöt8
 
Àds
, uöt8 
mode
)

380 i‡(
Àds
 & 
HAL_LED_1
)

382 i‡(
mode
 =
HAL_LED_MODE_ON
)

384 
	`HAL_TURN_ON_LED1
();

388 
	`HAL_TURN_OFF_LED1
();

392 i‡(
Àds
 & 
HAL_LED_2
)

394 i‡(
mode
 =
HAL_LED_MODE_ON
)

396 
	`HAL_TURN_ON_LED2
();

400 
	`HAL_TURN_OFF_LED2
();

404 i‡(
Àds
 & 
HAL_LED_3
)

406 i‡(
mode
 =
HAL_LED_MODE_ON
)

408 
	`HAL_TURN_ON_LED3
();

412 
	`HAL_TURN_OFF_LED3
();

416 i‡(
Àds
 & 
HAL_LED_4
)

418 i‡(
mode
 =
HAL_LED_MODE_ON
)

420 
	`HAL_TURN_ON_LED4
();

424 
	`HAL_TURN_OFF_LED4
();

429 i‡(
mode
)

431 
HÆLedSèã
 |
Àds
;

435 
HÆLedSèã
 &(
Àds
 ^ 0xFF);

437 
	}
}

449 
uöt8
 
	$HÆLedGëSèã
 ()

451 #i‡(
HAL_LED
 =
TRUE
)

452  
HÆLedSèã
;

456 
	}
}

467 
	$HÆLedE¡îSÀï
( )

469 #ifde‡
BLINK_LEDS


471 
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
 = 
TRUE
;

474 #i‡(
HAL_LED
 =
TRUE
)

476 
HÆSÀïLedSèã
 = 0;

477 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED1
();

478 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED2
() << 1;

479 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED3
() << 2;

480 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED4
() << 3;

483 
	`HÆLedOnOff
 (
HAL_LED_ALL
, 
HAL_LED_MODE_OFF
);

486 
	}
}

497 
	$HÆLedExôSÀï
( )

499 #i‡(
HAL_LED
 =
TRUE
)

501 
	`HÆLedOnOff
(
HÆSÀïLedSèã
, 
HAL_LED_MODE_ON
);

504 
	`HÆLedUpd©e
();

507 #ifde‡
BLINK_LEDS


509 
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
 = 
FALSE
;

511 
	}
}

	@Components/hal/target/CC2530USB/hal_mac_cfg.h

40 #i‚de‡
HAL_MAC_CFG_H


41 
	#HAL_MAC_CFG_H


	)

57 
	#HAL_MAC_RSSI_OFFSET
 -73

	)

58 #i‡
deföed
 (
HAL_PA_LNA
)

60 
	#HAL_MAC_RSSI_LNA_HGM_OFFSET
 -9

	)

61 
	#HAL_MAC_RSSI_LNA_LGM_OFFSET
 4

	)

62 #ñi‡
deföed
 (
HAL_PA_LNA_CC2590
)

64 
	#HAL_MAC_RSSI_LNA_HGM_OFFSET
 -10

	)

65 
	#HAL_MAC_RSSI_LNA_LGM_OFFSET
 0

	)

	@Components/hal/target/CC2530USB/hal_mcu.h

40 #i‚de‡
_HAL_MCU_H


41 
	#_HAL_MCU_H


	)

53 
	~"hÆ_defs.h
"

54 
	~"hÆ_ty≥s.h
"

61 
	#HAL_MCU_CC2530


	)

70 #ifde‡
__IAR_SYSTEMS_ICC__


71 
	~<ioCC2530.h
>

72 
	#HAL_COMPILER_IAR


	)

73 
	#HAL_MCU_LITTLE_ENDIAN
(Ë
__LITTLE_ENDIAN__


	)

74 
	#_PRAGMA
(
x
Ë
	`_Pøgma
(#x)

	)

75 
	#HAL_ISR_FUNC_DECLARATION
(
f
,
v
Ë
	`_PRAGMA
(
ve˘‹
=vË
__√¨_func
 
__öãºu±
 
	`f
()

	)

76 
	#HAL_ISR_FUNC_PROTOTYPE
(
f
,
v
Ë
	`_PRAGMA
(
ve˘‹
=vË
__√¨_func
 
__öãºu±
 
	`f
()

	)

77 
	#HAL_ISR_FUNCTION
(
f
,
v
Ë
	`HAL_ISR_FUNC_PROTOTYPE
(f,v); 
	`HAL_ISR_FUNC_DECLARATION
(f,v)

	)

80 #ñi‡
deföed
 
__KEIL__


81 
	~<CC2530.h
>

82 
	#HAL_COMPILER_KEIL


	)

83 
	#HAL_MCU_LITTLE_ENDIAN
(Ë0

	)

84 
	#HAL_ISR_FUNC_DECLARATION
(
f
,
v
Ë
	`f
(Ë
öãºu±
 
	)
v

85 
	#HAL_ISR_FUNC_PROTOTYPE
(
f
,
v
Ë
	`f
()

	)

86 
	#HAL_ISR_FUNCTION
(
f
,
v
Ë
	`HAL_ISR_FUNC_PROTOTYPE
(f,v); 
	`HAL_ISR_FUNC_DECLARATION
(f,v)

	)

98 
	#HAL_ENABLE_INTERRUPTS
(Ë
	`°
–
EA
 = 1; )

	)

99 
	#HAL_DISABLE_INTERRUPTS
(Ë
	`°
–
EA
 = 0; )

	)

100 
	#HAL_INTERRUPTS_ARE_ENABLED
(Ë(
EA
)

	)

102 
	thÆI¡Sèã_t
;

103 
	#HAL_ENTER_CRITICAL_SECTION
(
x
Ë
	`°
–x = 
EA
; 
	`HAL_DISABLE_INTERRUPTS
(); )

	)

104 
	#HAL_EXIT_CRITICAL_SECTION
(
x
Ë
	`°
–
EA
 = x; )

	)

105 
	#HAL_CRITICAL_STATEMENT
(
x
Ë
	`°
–
hÆI¡Sèã_t
 
_s
; 
	`HAL_ENTER_CRITICAL_SECTION
(_s); x; 
	`HAL_EXIT_CRITICAL_SECTION
(_s); )

	)

107 #ifde‡
__IAR_SYSTEMS_ICC__


113 
	#HAL_ENTER_ISR
(Ë{ 
hÆI¡Sèã_t
 
_i§I¡Sèã
 = 
EA
; 
	`HAL_ENABLE_INTERRUPTS
();

	)

114 
	#HAL_EXIT_ISR
(Ë
EA
 = 
_i§I¡Sèã
; }

	)

116 
	#HAL_ENTER_ISR
()

	)

117 
	#HAL_EXIT_ISR
()

	)

124 
	#WD_EN
 
	`BV
(3)

	)

125 
	#WD_MODE
 
	`BV
(2)

	)

126 
	#WD_INT_1900_USEC
 (
	`BV
(0Ë| BV(1))

	)

127 
	#WD_RESET1
 (0xA0 | 
WD_EN
 | 
WD_INT_1900_USEC
)

	)

128 
	#WD_RESET2
 (0x50 | 
WD_EN
 | 
WD_INT_1900_USEC
)

	)

129 
	#WD_KICK
(Ë
	`°
–
WDCTL
 = (0xA0 | WDCTL & 0x0F); WDCTL = (0x50 | WDCTL & 0x0F); )

	)

132 
	#HAL_SYSTEM_RESET
(Ë
	`°
–
	`HAL_DISABLE_INTERRUPTS
(); 
WDCTL
 = 
WD_RESET1
; WDCTL = 
WD_RESET2
; ;;); )

	)

138 
	#REV_A
 0x00

	)

139 
	#REV_B
 0x11

	)

140 
	#REV_C
 0x20

	)

141 
	#REV_D
 0x21

	)

149 
	#PCON_IDLE
 
	`BV
(0Ë

	)

152 
	#OSC_PD
 
	`BV
(2Ë

	)

153 
	#PMODE
 (
	`BV
(1Ë| BV(0)Ë

	)

156 
	#XOSC_STB
 
	`BV
(6Ë

	)

157 
	#HFRC_STB
 
	`BV
(5Ë

	)

160 
	#OSC_PD
 
	`BV
(2Ë

	)

164 
	#OSC
 
	`BV
(6)

	)

165 
	#TICKSPD
(
x
Ë(x << 3)

	)

166 
	#CLKSPD
(
x
Ë(x << 0)

	)

167 
	#CLKCONCMD_32MHZ
 (0)

	)

168 
	#CLKCONCMD_16MHZ
 (
	`CLKSPD
(1Ë| 
	`TICKSPD
(1Ë| 
OSC
)

	)

171 
	#LDRDY
 
	`BV
(0Ë

	)

175 #ifde‡
POWER_SAVING


176 vﬁ©ûê
__d©a
 
uöt8
 
hÆSÀïPc⁄VÆue
;

181 
	#CLEAR_SLEEP_MODE
(Ë
	`°
–
hÆSÀïPc⁄VÆue
 = 0; )

	)

182 
	#ALLOW_SLEEP_MODE
(Ë
	`°
–
hÆSÀïPc⁄VÆue
 = 
PCON_IDLE
; )

	)

184 
	#CLEAR_SLEEP_MODE
()

	)

185 
	#ALLOW_SLEEP_MODE
()

	)

	@Components/hal/target/CC2530USB/hal_oad.c

48 
	~"comdef.h
"

49 
	~"hÆ_bﬂrd_cfg.h
"

50 
	~"hÆ_dma.h
"

51 
	~"hÆ_Êash.h
"

52 
	~"hÆ_ﬂd.h
"

53 
	~"hÆ_ty≥s.h
"

60 #i‡
HAL_OAD_BOOT_CODE


61 
hÆDMADesc_t
 
	gdmaCh0
;

69 
uöt16
 
runPﬁy
(uöt16 
¸c
, 
uöt8
 
vÆ
);

70 #i‡
HAL_OAD_XNV_IS_SPI


71 
HÆSPIRód
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
);

72 
HÆSPIWrôe
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
);

75 #i‡
HAL_OAD_BOOT_CODE


76 
vddWaô
(
uöt8
 
vdd
);

77 
dl2rc
();

78 
uöt16
 
¸cCÆc
();

96 #¥agm®
loˇti⁄
="NEAR_CODE"

97 
	$maö
()

99 
	`HAL_BOARD_INIT
();

100 
	`vddWaô
(
VDD_MIN_RUN
);

102 #i‡
HAL_OAD_XNV_IS_SPI


103 
	`XNV_SPI_INIT
();

108 
	`HAL_DMA_SET_ADDR_DESC0
–&
dmaCh0
 );

112 
uöt16
 
¸c
[2];

114 
	`HÆFœshRód
(
HAL_OAD_CRC_ADDR
 / 
HAL_FLASH_PAGE_SIZE
,

115 
HAL_OAD_CRC_ADDR
 % 
HAL_FLASH_PAGE_SIZE
,

116 (
uöt8
 *)
¸c
, (crc));

118 i‡(
¸c
[0] == crc[1])

122 i‡((
¸c
[0] !0Ë&& (¸c[0] =
	`¸cCÆc
()))

124 
¸c
[1] = crc[0];

125 
	`HÆFœshWrôe
((
HAL_OAD_CRC_ADDR
 / 
HAL_FLASH_WORD_SIZE
), (
uöt8
 *)
¸c
, 1);

129 
	`dl2rc
();

134 
	`asm
("LJMP 0x800\n");

135 
	}
}

146 
	$vddWaô
(
uöt8
 
vdd
)

148 
uöt8
 
˙t
 = 16;

152 
ADCCON3
 = 0x0F;

153 !(
ADCCON1
 & 0x80));

154 } 
ADCH
 < 
vdd
);

155 } --
˙t
);

156 
	}
}

169 
	$dl2rc
()

171 
¥ómbÀ_t
 
¥ómbÀ
;

172 
uöt32
 
o£t
;

173 
uöt16
 
addr
 = 
HAL_OAD_RC_START
 / 
HAL_FLASH_WORD_SIZE
;

174 
uöt8
 
buf
[4];

176 
	`vddWaô
(
VDD_MIN_OAD
);

177 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_DL
);

179 
o£t
 = 0; o£à< 
¥ómbÀ
.
Àn
; o£à+
HAL_FLASH_WORD_SIZE
)

181 
	`HÆOADRód
(
o£t
, 
buf
, 
HAL_FLASH_WORD_SIZE
, 
HAL_OAD_DL
);

182 i‡((
addr
 % (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
)) == 0)

184 
	`HÆFœshEø£
(
addr
 / (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
));

186 
	`HÆFœshWrôe
(
addr
++, 
buf
, 1);

188 
	}
}

199 
uöt16
 
	$¸cCÆc
()

201 
¥ómbÀ_t
 
¥ómbÀ
;

202 
uöt32
 
o£t
;

203 
uöt16
 
¸c
 = 0;

205 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_RC
);

206 i‡(
¥ómbÀ
.
Àn
 > 
HAL_OAD_DL_SIZE
)

212 
o£t
 = 0; o£à< 
¥ómbÀ
.
Àn
; oset++)

214 i‡(
o£t
 =
HAL_OAD_CRC_OSET
)

216 
o£t
 += 3;

220 
uöt8
 
buf
;

221 
	`HÆOADRód
(
o£t
, &
buf
, 1, 
HAL_OAD_RC
);

222 
¸c
 = 
	`runPﬁy
(¸c, 
buf
);

227 
¸c
 = 
	`runPﬁy
(crc, 0);

228 
¸c
 = 
	`runPﬁy
(crc, 0);

230  
¸c
;

231 
	}
}

244 
uöt16
 
	$runPﬁy
(
uöt16
 
¸c
, 
uöt8
 
vÆ
)

246 c⁄° 
uöt16
 
pﬁy
 = 0x1021;

247 
uöt8
 
˙t
;

249 
˙t
 = 0; c¡ < 8; c¡++, 
vÆ
 <<= 1)

251 
uöt8
 
msb
 = (
¸c
 & 0x8000) ? 1 : 0;

253 
¸c
 <<= 1;

254 i‡(
vÆ
 & 0x80Ë
¸c
 |= 0x0001;

255 i‡(
msb
Ë
¸c
 ^
pﬁy
;

258  
¸c
;

259 
	}
}

270 
uöt8
 
	$HÆOADChkDL
(
uöt8
 
dlImagePªambÀOff£t
)

272 
¥ómbÀ_t
 
¥ómbÀ
;

273 
uöt32
 
o£t
;

274 
uöt16
 
¸c
 = 0, 
¸c2
;

276 
	`HÆOADRód
(
dlImagePªambÀOff£t
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_DL
);

279 
o£t
 = 0; o£à< 
¥ómbÀ
.
Àn
; oset++)

281 i‡((
o£t
 < 
HAL_OAD_CRC_OSET
) || (oset >= HAL_OAD_CRC_OSET+4))

283 
uöt8
 
buf
;

284 
	`HÆOADRód
(
o£t
, &
buf
, 1, 
HAL_OAD_DL
);

285 
¸c
 = 
	`runPﬁy
(¸c, 
buf
);

290 
¸c
 = 
	`runPﬁy
(crc, 0);

291 
¸c
 = 
	`runPﬁy
(crc, 0);

293 
	`HÆOADRód
(
HAL_OAD_CRC_OSET
, (
uöt8
 *)&
¸c2
, (¸c2), 
HAL_OAD_DL
);

294  (
¸c2
 =
¸c
Ë? 
SUCCESS
 : 
FAILURE
;

295 
	}
}

307 
	$HÆOADInvRC
()

309 
uöt16
 
¸c
[2] = {0,0xFFFF};

310 
	`HÆFœshWrôe
((
HAL_OAD_CRC_ADDR
 / 
HAL_FLASH_WORD_SIZE
), (
uöt8
 *)
¸c
, 1);

311 
	}
}

325 
	$HÆOADRód
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
)

327 i‡(
HAL_OAD_RC
 !
ty≥
)

329 #i‡
HAL_OAD_XNV_IS_INT


330 
¥ómbÀ_t
 
¥ómbÀ
;

332 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_RC
);

334 
o£t
 +
HAL_OAD_RC_START
 + 
HAL_OAD_DL_OSET
;

335 #ñi‡
HAL_OAD_XNV_IS_SPI


336 
o£t
 +
HAL_OAD_DL_OSET
;

337 
	`HÆSPIRód
(
o£t
, 
pBuf
, 
Àn
);

343 
o£t
 +
HAL_OAD_RC_START
;

346 
	`HÆFœshRód
(
o£t
 / 
HAL_FLASH_PAGE_SIZE
, o£à% HAL_FLASH_PAGE_SIZE, 
pBuf
, 
Àn
);

347 
	}
}

366 
	$HÆOADWrôe
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
)

368 i‡(
HAL_OAD_RC
 !
ty≥
)

370 #i‡
HAL_OAD_XNV_IS_INT


371 
¥ómbÀ_t
 
¥ómbÀ
;

373 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_RC
);

375 
o£t
 +
HAL_OAD_RC_START
 + 
HAL_OAD_DL_OSET
;

376 #ñi‡
HAL_OAD_XNV_IS_SPI


377 
o£t
 +
HAL_OAD_DL_OSET
;

378 
	`HÆSPIWrôe
(
o£t
, 
pBuf
, 
Àn
);

384 
o£t
 +
HAL_OAD_RC_START
;

387 i‡((
o£t
 % 
HAL_FLASH_PAGE_SIZE
) == 0)

389 
	`HÆFœshEø£
(
o£t
 / 
HAL_FLASH_PAGE_SIZE
);

392 
	`HÆFœshWrôe
(
o£t
 / 
HAL_FLASH_WORD_SIZE
, 
pBuf
, 
Àn
 / HAL_FLASH_WORD_SIZE);

393 
	}
}

395 #i‡
HAL_OAD_XNV_IS_INT


405 
uöt32
 
	$HÆOADAvaû
()

413  
HAL_OAD_DL_MAX
 - 
HAL_OAD_DL_OSET
;

414 
	}
}

416 #ñi‡
HAL_OAD_XNV_IS_SPI


422 
	#XNV_STAT_CMD
 0x05

	)

423 
	#XNV_WREN_CMD
 0x06

	)

424 
	#XNV_WRPG_CMD
 0x0A

	)

425 
	#XNV_READ_CMD
 0x0B

	)

427 
	#XNV_STAT_WIP
 0x01

	)

438 
xnvSPIWrôe
(
uöt8
 
ch
);

439 
	$xnvSPIWrôe
(
uöt8
 
ch
)

441 
	`XNV_SPI_TX
(
ch
);

442 
	`XNV_SPI_WAIT_RXRDY
();

443 
	}
}

454 
uöt32
 
	$HÆOADAvaû
()

456  
HAL_OAD_DL_MAX
 - 
HAL_OAD_DL_OSET
;

457 
	}
}

470 
	$HÆSPIRód
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
)

472 #i‡!
HAL_OAD_BOOT_CODE


473 
uöt8
 
shdw
 = 
P1DIR
;

474 
hÆI¡Sèã_t
 
his
;

475 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

476 
P1DIR
 |
	`BV
(3);

479 
	`XNV_SPI_BEGIN
();

481 
	`xnvSPIWrôe
(
XNV_STAT_CMD
);

482 } 
	`XNV_SPI_RX
(Ë& 
XNV_STAT_WIP
);

483 
	`XNV_SPI_END
();

484 
	`asm
("NOP");ásm("NOP");

486 
	`XNV_SPI_BEGIN
();

487 
	`xnvSPIWrôe
(
XNV_READ_CMD
);

488 
	`xnvSPIWrôe
(
addr
 >> 16);

489 
	`xnvSPIWrôe
(
addr
 >> 8);

490 
	`xnvSPIWrôe
(
addr
);

491 
	`xnvSPIWrôe
(0);

493 
Àn
--)

495 
	`xnvSPIWrôe
(0);

496 *
pBuf
++ = 
	`XNV_SPI_RX
();

498 
	`XNV_SPI_END
();

500 #i‡!
HAL_OAD_BOOT_CODE


501 
P1DIR
 = 
shdw
;

502 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

504 
	}
}

517 
	$HÆSPIWrôe
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
)

519 
uöt8
 
˙t
;

520 #i‡!
HAL_OAD_BOOT_CODE


521 
uöt8
 
shdw
 = 
P1DIR
;

522 
hÆI¡Sèã_t
 
his
;

523 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

524 
P1DIR
 |
	`BV
(3);

527 
Àn
)

529 
	`XNV_SPI_BEGIN
();

531 
	`xnvSPIWrôe
(
XNV_STAT_CMD
);

532 } 
	`XNV_SPI_RX
(Ë& 
XNV_STAT_WIP
);

533 
	`XNV_SPI_END
();

534 
	`asm
("NOP");ásm("NOP");

536 
	`XNV_SPI_BEGIN
();

537 
	`xnvSPIWrôe
(
XNV_WREN_CMD
);

538 
	`XNV_SPI_END
();

539 
	`asm
("NOP");ásm("NOP");

541 
	`XNV_SPI_BEGIN
();

542 
	`xnvSPIWrôe
(
XNV_WRPG_CMD
);

543 
	`xnvSPIWrôe
(
addr
 >> 16);

544 
	`xnvSPIWrôe
(
addr
 >> 8);

545 
	`xnvSPIWrôe
(
addr
);

548 
˙t
 = 0 - (
uöt8
)
addr
;

549 i‡(
˙t
)

551 
addr
 +
˙t
;

555 
addr
 += 256;

560 
	`xnvSPIWrôe
(*
pBuf
++);

561 
˙t
--;

562 
Àn
--;

563 } 
Àn
 && 
˙t
);

564 
	`XNV_SPI_END
();

567 #i‡!
HAL_OAD_BOOT_CODE


568 
P1DIR
 = 
shdw
;

569 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

571 
	}
}

573 #îr‹ 
InvÆid
 
Xåa
-
NV
 
OAD
.

	@Components/hal/target/CC2530USB/hal_oad.h

39 #i‚de‡
HAL_OAD_H


40 
	#HAL_OAD_H


	)

46 
	~"hÆ_bﬂrd_cfg.h
"

47 
	~"hÆ_ty≥s.h
"

53 #i‡!
deföed
 
HAL_OAD_BOOT_CODE


54 
	#HAL_OAD_BOOT_CODE
 
FALSE


	)

58 
	#PACK_1


	)

65 
	#HAL_OAD_RC_START
 0x0800

	)

66 
	#HAL_OAD_CRC_ADDR
 0x0888

	)

67 
	#HAL_OAD_CRC_OSET
 (
HAL_OAD_CRC_ADDR
 - 
HAL_OAD_RC_START
)

	)

72 
	#HAL_OAD_XNV_IS_INT
 
TRUE


	)

73 
	#HAL_OAD_XNV_IS_SPI
 !
HAL_OAD_XNV_IS_INT


	)

79 
	#HAL_OAD_BOOT_PG_CNT
 2

	)

85 #i‡
HAL_OAD_XNV_IS_SPI
 && !
deföed
 
HAL_BOARD_CC2530EB_REV13


86 
	#HAL_OAD_DL_MAX
 0x40000

	)

87 
	#HAL_OAD_DL_SIZE
 (0x40000 - ((
HAL_NV_PAGE_CNT
+
HAL_OAD_BOOT_PG_CNT
)*
HAL_FLASH_PAGE_SIZE
))

	)

88 
	#HAL_OAD_DL_OSET
 0x0

89 #ñ£

	)

90 
	#HAL_OAD_DL_MAX
 (0x40000 - ((
HAL_NV_PAGE_CNT
+
HAL_OAD_BOOT_PG_CNT
)*
HAL_FLASH_PAGE_SIZE
))

	)

91 
	#HAL_OAD_DL_SIZE
 (
HAL_OAD_DL_MAX
 / 2)

	)

92 
	#HAL_OAD_DL_OSET
 (
HAL_OAD_DL_MAX
 / 2)

	)

96 
	#PREAMBLE_OFFSET
 0x8C

	)

98 #i‡
HAL_OAD_XNV_IS_INT


99 
	#VDD_MIN_OAD
 
VDD_MIN_NV


	)

101 #îr‹ 
CC2531
 
OAD
 
by
 
exã∫Æ
 
NV
 
nŸ
 
ch¨a˘îized
.

109 
	mHAL_OAD_RC
,

110 
	mHAL_OAD_DL


111 } 
	timage_t
;

114 
uöt8
 
	mmagic
[2];

115 
uöt32
 
	mÀn
;

116 
uöt16
 
	mvîs
;

117 
uöt16
 
	mm™u
;

118 
uöt16
 
	m¥od
;

119 } 
	t¥ómbÀ_t
;

125 
uöt8
 
HÆOADChkDL
(uöt8 
dlImagePªambÀOff£t
);

126 
HÆOADInvRC
();

127 
uöt32
 
HÆOADAvaû
();

128 
HÆOADRód
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
);

129 
HÆOADWrôe
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
);

	@Components/hal/target/CC2530USB/hal_sleep.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_mcu.h
"

46 
	~"hÆ_bﬂrd.h
"

47 
	~"hÆ_¶ìp.h
"

48 
	~"hÆ_Àd.h
"

49 
	~"hÆ_key.h
"

50 
	~"mac_≠i.h
"

51 
	~"OSAL.h
"

52 
	~"OSAL_Timîs.h
"

53 
	~"OSAL_Tasks.h
"

54 
	~"OSAL_PwrMgr.h
"

55 
	~"OnBﬂrd.h
"

56 
	~"hÆ_drivîs.h
"

57 
	~"hÆ_as£π.h
"

58 
	~"mac_mcu.h
"

60 #i‚de‡
ZG_BUILD_ENDDEVICE_TYPE


61 
	#ZG_BUILD_ENDDEVICE_TYPE
 
FALSE


	)

64 #i‡
ZG_BUILD_ENDDEVICE_TYPE
 && 
deföed
 (
NWK_AUTO_POLL
)

65 
	~"nwk_globÆs.h
"

66 
	~"ZGlobÆs.h
"

77 
	#CC2530_PM0
 0

	)

78 
	#CC2530_PM1
 1

	)

79 
	#CC2530_PM2
 2

	)

80 
	#CC2530_PM3
 3

	)

90 
	#HAL_SLEEP_OFF
 
CC2530_PM0


	)

91 
	#HAL_SLEEP_TIMER
 
CC2530_PM2


	)

92 
	#HAL_SLEEP_DEEP
 
CC2530_PM3


	)

98 
	#MAX_SLEEP_TIME
 510000

	)

99 
	#TICKS_SUBTRACTED
 2

	)

105 #i‡!
deföed
 (
PM_MIN_SLEEP_TIME
)

106 
	#PM_MIN_SLEEP_TIME
 14

	)

112 #¥agm®
loˇti⁄
 = "SLEEP_CODE"

113 
hÆSëSÀïMode
();

123 
	#HAL_SLEEP_ADJ_TICKS
 (11 + 12)

	)

125 #i‚de‡
HAL_SLEEP_DEBUG_POWER_MODE


127 
	#HAL_SLEEP_PREP_POWER_MODE
(
mode
Ë
	`°
–
SLEEPCMD
 &~
PMODE
; \

128 
SLEEPCMD
 |
mode
; \

129 !(
STLOAD
 & 
LDRDY
)); \

130 
hÆSÀïPc⁄VÆue
 = 
PCON_IDLE
; \

131 )

	)

132 
	#HAL_SLEEP_SET_POWER_MODE
(Ë
	`hÆSëSÀïMode
()

	)

135 
	#HAL_SLEEP_PREP_POWER_MODE
(
mode
Ë

	)

136 
	#HAL_SLEEP_SET_POWER_MODE
(Ë
	`°
–
hÆSÀïI¡
 =
FALSE
); \

137 
hÆSÀïI¡
 = 
FALSE
; \

138 
	`HAL_DISABLE_INTERRUPTS
(); \

139 )

	)

143 
	#STIE_BV
 
	`BV
(5)

	)

144 
	#P0IE_BV
 
	`BV
(5)

	)

145 
	#P1IE_BV
 
	`BV
(4)

	)

146 
	#P2IE_BV
 
	`BV
(1)

	)

149 
	#HAL_SLEEP_TIMER_ENABLE_INT
(Ë
	`°
(
IEN0
 |
STIE_BV
;Ë

	)

150 
	#HAL_SLEEP_TIMER_DISABLE_INT
(Ë
	`°
(
IEN0
 &~
STIE_BV
;Ë

	)

151 
	#HAL_SLEEP_TIMER_CLEAR_INT
(Ë
	`°
(
STIF
 = 0;Ë

	)

154 
	#HAL_SLEEP_IE_BACKUP_AND_DISABLE
(
õn0
, 
õn1
, 
õn2
Ë
	`°
(õn0 = 
IEN0
; \

155 
õn1
 = 
IEN1
; \

156 
õn2
 = 
IEN2
; \

157 
IEN0
 &
STIE_BV
; \

158 
IEN1
 &
P0IE_BV
; \

159 
IEN2
 &(
P1IE_BV
|
P2IE_BV
);Ë

	)

162 
	#HAL_SLEEP_IE_RESTORE
(
õn0
, 
õn1
, 
õn2
Ë
	`°
(
IEN0
 = ien0; \

163 
IEN1
 = 
õn1
; \

164 
IEN2
 = 
õn2
;Ë

	)

167 
	#HAL_SLEEP_MS_TO_320US
(
ms
Ë(((((
uöt32
Ë(ms)Ë* 100Ë+ 31Ë/ 32)

	)

170 #i‡
HAL_MCU_LITTLE_ENDIAN
()

171 
	#UINT32_NDX0
 0

	)

172 
	#UINT32_NDX1
 1

	)

173 
	#UINT32_NDX2
 2

	)

174 
	#UINT32_NDX3
 3

	)

176 
	#UINT32_NDX0
 3

	)

177 
	#UINT32_NDX1
 2

	)

178 
	#UINT32_NDX2
 1

	)

179 
	#UINT32_NDX3
 0

	)

182 
uöt32
 
	gmaxSÀïLo›Time
 = 
HAL_SLEEP_MS_TO_320US
(
MAX_SLEEP_TIME
);

189 vﬁ©ûê
__d©a
 
uöt8
 
	ghÆSÀïPc⁄VÆue
 = 
PCON_IDLE
;

198 
uöt8
 
	ghÆPwrMgtMode
 = 
HAL_SLEEP_OFF
;

200 #ifde‡
HAL_SLEEP_DEBUG_POWER_MODE


201 
boﬁ
 
	ghÆSÀïI¡
 = 
FALSE
;

209 
hÆSÀïSëTimî
(
uöt32
 
timeout
);

229 
	$hÆSëSÀïMode
()

231 
PCON
 = 
hÆSÀïPc⁄VÆue
;

232 
	`HAL_DISABLE_INTERRUPTS
();

233 
	}
}

254 
	$hÆSëMaxSÀïLo›Time
(
uöt32
 
rﬁlovîTime
)

256 if–
rﬁlovîTime
 > 
	`HAL_SLEEP_MS_TO_320US
(
MAX_SLEEP_TIME
) )

258 
maxSÀïLo›Time
 = 
	`HAL_SLEEP_MS_TO_320US
(
MAX_SLEEP_TIME
);

260 
maxSÀïLo›Time
 = (
rﬁlovîTime
 - 
TICKS_SUBTRACTED
);

261 
	}
}

280 
	$hÆSÀï
–
uöt16
 
oßl_timeout
 )

282 
uöt32
 
timeout
;

283 
uöt32
 
macTimeout
 = 0;

286 
timeout
 = 
	`HAL_SLEEP_MS_TO_320US
(
oßl_timeout
);

287 i‡(
timeout
 == 0)

289 
timeout
 = 
	`MAC_PwrNextTimeout
();

294 
macTimeout
 = 
	`MAC_PwrNextTimeout
();

297 i‡((
macTimeout
 !0Ë&& (macTimeouà< 
timeout
))

299 
timeout
 = 
macTimeout
;

306 
hÆPwrMgtMode
 = (
timeout
 =0Ë? 
HAL_SLEEP_DEEP
 : 
HAL_SLEEP_TIMER
;

312 #i‡
ZG_BUILD_ENDDEVICE_TYPE
 && 
	`deföed
 (
NWK_AUTO_POLL
)

313 i‡((
timeout
 > 
	`HAL_SLEEP_MS_TO_320US
(
PM_MIN_SLEEP_TIME
)) ||

314 (
timeout
 =0 && 
zgPﬁlR©e
 == 0))

316 i‡((
timeout
 > 
	`HAL_SLEEP_MS_TO_320US
(
PM_MIN_SLEEP_TIME
)) ||

317 (
timeout
 == 0))

320 
hÆI¡Sèã_t
 
õn0
, 
õn1
, 
õn2
;

322 
	`HAL_ASSERT
(
	`HAL_INTERRUPTS_ARE_ENABLED
());

323 
	`HAL_DISABLE_INTERRUPTS
();

326 i‡(
hÆSÀïPc⁄VÆue
 !0 && 
	`MAC_PwrOffReq
(
MAC_PWR_SLEEP_DEEP
Ë=
MAC_SUCCESS
)

332 #i‡((
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
))

334 
	`HÆKeyE¡îSÀï
();

337 #ifde‡
HAL_SLEEP_DEBUG_LED


338 
	`HAL_TURN_OFF_LED3
();

341 
	`HÆLedE¡îSÀï
();

344 if(
timeout
 > 
maxSÀïLo›Time
)

346 
timeout
 = 
maxSÀïLo›Time
;

350 i‡(
timeout
 != 0)

352 i‡(
timeout
 > 
	`HAL_SLEEP_MS_TO_320US
–
MAX_SLEEP_TIME
 ))

354 
timeout
 -
	`HAL_SLEEP_MS_TO_320US
–
MAX_SLEEP_TIME
 );

355 
	`hÆSÀïSëTimî
(
	`HAL_SLEEP_MS_TO_320US
–
MAX_SLEEP_TIME
 ));

360 
	`hÆSÀïSëTimî
(
timeout
);

364 
	`HAL_SLEEP_TIMER_CLEAR_INT
();

365 
	`HAL_SLEEP_TIMER_ENABLE_INT
();

368 #ifde‡
HAL_SLEEP_DEBUG_LED


369 i‡(
hÆPwrMgtMode
 =
CC2530_PM1
)

371 
	`HAL_TURN_ON_LED1
();

375 
	`HAL_TURN_OFF_LED1
();

380 
	`HAL_SLEEP_PREP_POWER_MODE
(
hÆPwrMgtMode
);

383 
	`HAL_SLEEP_IE_BACKUP_AND_DISABLE
(
õn0
, 
õn1
, 
õn2
);

384 
	`HAL_ENABLE_INTERRUPTS
();

392 
	`HAL_SLEEP_SET_POWER_MODE
();

397 
	`HAL_SLEEP_IE_RESTORE
(
õn0
, 
õn1
, 
õn2
);

400 
	`HAL_SLEEP_TIMER_DISABLE_INT
();

402 #ifde‡
HAL_SLEEP_DEBUG_LED


403 
	`HAL_TURN_ON_LED3
();

406 
	`HÆLedExôSÀï
();

409 #i‡((
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
))

411 ()
	`HÆKeyExôSÀï
();

415 
	`MAC_PwrOnReq
();

417 
	`HAL_ENABLE_INTERRUPTS
();

427 
	`macMcuTimî2OvîÊowW‹k¨ound
();

434 
	`HAL_ENABLE_INTERRUPTS
();

437 
	}
}

459 
	$hÆSÀïSëTimî
(
uöt32
 
timeout
)

461 
uöt32
 
ticks
;

464 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX0
] = 
ST0
;

465 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX1
] = 
ST1
;

466 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX2
] = 
ST2
;

467 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX3
] = 0;

472 
ticks
 +(
timeout
 * 671) / 64;

475 
ticks
 -
HAL_SLEEP_ADJ_TICKS
;

478 
ST2
 = ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX2
];

479 
ST1
 = ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX1
];

480 
ST0
 = ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX0
];

481 
	}
}

500 
uöt32
 
	$TimîEœp£d
( )

504 
	}
}

522 
	$hÆRe°‹eSÀïLevñ
( )

525 
	}
}

543 
	$HAL_ISR_FUNCTION
(
hÆSÀïTimîI§
, 
ST_VECTOR
)

545 
	`HAL_ENTER_ISR
();

546 
	`HAL_SLEEP_TIMER_CLEAR_INT
();

548 #ifde‡
HAL_SLEEP_DEBUG_POWER_MODE


549 
hÆSÀïI¡
 = 
TRUE
;

552 
	`CLEAR_SLEEP_MODE
();

553 
	`HAL_EXIT_ISR
();

554 
	}
}

	@Components/hal/target/CC2530USB/hal_startup.c

42 
	~"hÆ_bﬂrd.h
"

43 
	~"hÆ_ty≥s.h
"

45 #ifde‡
__˝lu•lus


49 #¥agm®
œnguage
=
exãnded


54 #¥agm®
loˇti⁄
="CSTART"

59 #i‡(
__CODE_MODEL__
 == 2)

60 
__√¨_func
 
__roŸ
 

62 
__roŸ
 

64 
__low_Àvñ_öô
();

77 #i‡(
__CODE_MODEL__
 == 2)

78 
__√¨_func
 
__roŸ
 

80 
__roŸ
 

82 
__low_Àvñ_öô
()

88 
MEMCTR
 = (MEMCTR & 0xF8) | 0x01;

99 #¥agm®
œnguage
=

101 #ifde‡
__˝lu•lus


	@Components/hal/target/CC2530USB/hal_timer.c

	@Components/hal/target/CC2530USB/hal_types.h

40 #i‚de‡
_HAL_TYPES_H


41 
	#_HAL_TYPES_H


	)

49 sig√d 
	töt8
;

50 
	tuöt8
;

52 sig√d 
	töt16
;

53 
	tuöt16
;

55 sig√d 
	töt32
;

56 
	tuöt32
;

58 
	tboﬁ
;

60 
uöt8
 
	thÆD©aAlign_t
;

69 #ifde‡
__IAR_SYSTEMS_ICC__


70 
	#CODE
 
__code


	)

71 
	#XDATA
 
__xd©a


	)

74 #ñi‡
deföed
 
__KEIL__


75 
	#CODE
 
code


	)

76 
	#XDATA
 
xd©a


	)

88 #i‚de‡
TRUE


89 
	#TRUE
 1

	)

92 #i‚de‡
FALSE


93 
	#FALSE
 0

	)

96 #i‚de‡
NULL


97 
	#NULL
 0

	)

	@Components/hal/target/CC2530USB/hal_uart.c

44 
	~"hÆ_bﬂrd_cfg.h
"

45 
	~"hÆ_defs.h
"

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_u¨t.h
"

77 #i‡
HAL_UART_DMA


78 
	~"_hÆ_u¨t_dma.c
"

80 #i‡
HAL_UART_ISR


81 
	~"_hÆ_u¨t_i§.c
"

83 #i‡
HAL_UART_USB


84 
	~"_hÆ_u¨t_usb.c
"

96 
	$HÆUARTInô
()

98 #i‡
HAL_UART_DMA


99 
	`HÆUARTInôDMA
();

101 #i‡
HAL_UART_ISR


102 
	`HÆUARTInôISR
();

104 #i‡
HAL_UART_USB


105 
	`HÆUARTInôUSB
();

107 
	}
}

119 
uöt8
 
	$HÆUARTO≥n
(
uöt8
 
p‹t
, 
hÆUARTCfg_t
 *
c⁄fig
)

121 ()
p‹t
;

122 ()
c⁄fig
;

124 #i‡(
HAL_UART_DMA
 == 1)

125 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë
	`HÆUARTO≥nDMA
(
c⁄fig
);

127 #i‡(
HAL_UART_DMA
 == 2)

128 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë
	`HÆUARTO≥nDMA
(
c⁄fig
);

130 #i‡(
HAL_UART_ISR
 == 1)

131 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë
	`HÆUARTO≥nISR
(
c⁄fig
);

133 #i‡(
HAL_UART_ISR
 == 2)

134 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë
	`HÆUARTO≥nISR
(
c⁄fig
);

136 #i‡(
HAL_UART_USB
)

137 
	`HÆUARTO≥nUSB
(
c⁄fig
);

140  
HAL_UART_SUCCESS
;

141 
	}
}

154 
uöt16
 
	$HÆUARTRód
(
uöt8
 
p‹t
, uöt8 *
buf
, 
uöt16
 
Àn
)

156 ()
p‹t
;

157 ()
buf
;

158 ()
Àn
;

160 #i‡(
HAL_UART_DMA
 == 1)

161 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRódDMA
(
buf
, 
Àn
);

163 #i‡(
HAL_UART_DMA
 == 2)

164 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRódDMA
(
buf
, 
Àn
);

166 #i‡(
HAL_UART_ISR
 == 1)

167 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRódISR
(
buf
, 
Àn
);

169 #i‡(
HAL_UART_ISR
 == 2)

170 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRódISR
(
buf
, 
Àn
);

173 #i‡
HAL_UART_USB


174  
	`HÆUARTRx
(
buf
, 
Àn
);

178 
	}
}

191 
uöt16
 
	$HÆUARTWrôe
(
uöt8
 
p‹t
, uöt8 *
buf
, 
uöt16
 
Àn
)

193 ()
p‹t
;

194 ()
buf
;

195 ()
Àn
;

197 #i‡(
HAL_UART_DMA
 == 1)

198 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTWrôeDMA
(
buf
, 
Àn
);

200 #i‡(
HAL_UART_DMA
 == 2)

201 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTWrôeDMA
(
buf
, 
Àn
);

203 #i‡(
HAL_UART_ISR
 == 1)

204 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTWrôeISR
(
buf
, 
Àn
);

206 #i‡(
HAL_UART_ISR
 == 2)

207 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTWrôeISR
(
buf
, 
Àn
);

210 #i‡
HAL_UART_USB


211 
	`HÆUARTTx
(
buf
, 
Àn
);

212  
Àn
;

216 
	}
}

227 
	$HÆUARTSu•íd
( )

229 #i‡
HAL_UART_DMA


230 
	`HÆUARTSu•ídDMA
();

232 #i‡
HAL_UART_ISR


233 
	`HÆUARTSu•ídISR
();

235 
	}
}

246 
	$HÆUARTResume
( )

248 #i‡
HAL_UART_DMA


249 
	`HÆUARTResumeDMA
();

251 #i‡
HAL_UART_ISR


252 
	`HÆUARTResumeISR
();

254 
	}
}

265 
	$HÆUARTPﬁl
()

267 #i‡
HAL_UART_DMA


268 
	`HÆUARTPﬁlDMA
();

270 #i‡
HAL_UART_ISR


271 
	`HÆUARTPﬁlISR
();

273 #i‡
HAL_UART_USB


274 
	`HÆUARTPﬁlUSB
();

276 
	}
}

287 
uöt16
 
	$HÆ_UART_RxBufLí
–
uöt8
 
p‹t
 )

289 ()
p‹t
;

291 #i‡(
HAL_UART_DMA
 == 1)

292 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRxAvaûDMA
();

294 #i‡(
HAL_UART_DMA
 == 2)

295 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRxAvaûDMA
();

297 #i‡(
HAL_UART_ISR
 == 1)

298 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRxAvaûISR
();

300 #i‡(
HAL_UART_ISR
 == 2)

301 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRxAvaûISR
();

303 #i‡
HAL_UART_USB


304  
	`HÆUARTRxAvaûUSB
();

308 
	}
}

	@Components/hal/target/CC2530USB/usb/class_cdc/usb_cdc.h

9 #i‚de‡
USB_CDC_H


10 
	#USB_CDC_H


	)

13 
	#CDC_DEVICE
 0x02

	)

16 
	#COMM_INTF
 0x02

	)

19 
	#ABSTRACT_CONTROL_MODEL
 0x02

	)

22 
	#V25TER
 0x01

23 

	)

26 
	#DATA_INTF
 0x0A

	)

29 
	#NO_PROTOCOL
 0x00

30 

	)

33 
	#ABSTRACT_STATE
 0x01

	)

34 
	#COUNTRY_SETTING
 0x02

	)

38 
	#CS_INTERFACE
 0x24

	)

39 
	#CS_ENDPOINT
 0x25

	)

42 
	#DSC_FN_HEADER
 0x00

	)

43 
	#DSC_FN_CALL_MGT
 0x01

	)

44 
	#DSC_FN_ACM
 0x02

45 
	#DSC_FN_DLM
 0x03

46 
	#DSC_FN_TELEPHONE_RINGER
 0x04

	)

47 
	#DSC_FN_RPT_CAPABILITIES
 0x05

	)

48 
	#DSC_FN_UNION
 0x06

	)

49 
	#DSC_FN_COUNTRY_SELECTION
 0x07

	)

50 
	#DSC_FN_TEL_OP_MODES
 0x08

	)

51 
	#DSC_FN_USB_TERMINAL
 0x09

	)

55 
	#CDC_COMM_INTF_ID
 0x00

	)

56 
	#CDC_DATA_INTF_ID
 0x01

	)

61 
	#CDC_SEND_ENCAPSULATED_COMMAND
 0x00

	)

62 
	#CDC_GET_ENCAPSULATED_RESPONSE
 0x01

	)

63 
	#CDC_SET_COMM_FEATURE
 0x02

64 
	#CDC_GET_COMM_FEATURE
 0x03

65 
	#CDC_CLEAR_COMM_FEATURE
 0x04

66 
	#CDC_SET_LINE_CODING
 0x20

67 
	#CDC_GET_LINE_CODING
 0x21

68 
	#CDC_SET_CONTROL_LINE_STATE
 0x22

69 
	#CDC_SEND_BREAK
 0x23

70 

	)

73 
	#CDC_CHAR_FORMAT_1_STOP_BIT
 0

	)

74 
	#CDC_CHAR_FORMAT_1_5_STOP_BIT
 1

	)

75 
	#CDC_CHAR_FORMAT_2_STOP_BIT
 2

	)

77 
	#CDC_PARITY_TYPE_NONE
 0

	)

78 
	#CDC_PARITY_TYPE_ODD
 1

	)

79 
	#CDC_PARITY_TYPE_EVEN
 2

	)

80 
	#CDC_PARITY_TYPE_MARK
 3

	)

81 
	#CDC_PARITY_TYPE_SPACE
 4

	)

	@Components/hal/target/CC2530USB/usb/class_cdc/usb_cdc_hooks.c

16 
	~"usb_cdc.h
"

17 
	~"usb_cdc_hooks.h
"

18 
	~"usb_fúmw¨e_libøry_hódîs.h
"

20 
	~"hÆ_ty≥s.h
"

24 
CDC_LINE_CODING_STRUCTURE
 
	gcuºítLöeCodög
;

32 
	$usb¸HookPro˚ssOut
()

35 i‡(
usbSëupHódî
.
ªque°
 =
CDC_SET_CONTROL_LINE_STATE
) {

37 if(
usbfwD©a
.
ï0Sètus
 =
EP_IDLE
)

39 
usbfwD©a
.
ï0Sètus
 = 
EP_RX
;

43 } if(
usbSëupHódî
.
ªque°
 =
CDC_SET_LINE_CODING
) {

45 if(
usbfwD©a
.
ï0Sètus
 =
EP_IDLE
)

47 
usbSëupD©a
.
pBuf„r
 = (
uöt8
 
__xd©a
 *Ë&
cuºítLöeCodög
;

48 
usbfwD©a
.
ï0Sètus
 = 
EP_RX
;

50 if(
usbfwD©a
.
ï0Sètus
 =
EP_RX
) { }

54 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

56 
	}
}

59 
	$usb¸HookPro˚ssIn
()

62 i‡(
usbSëupHódî
.
ªque°
 =
CDC_GET_LINE_CODING
) {

64 i‡(
usbfwD©a
.
ï0Sètus
 =
EP_IDLE
) {

65 
usbSëupD©a
.
pBuf„r
 = (
uöt8
 
__xd©a
 *Ë&
cuºítLöeCodög
;

66 
usbSëupD©a
.
byãsLe·
 = 7;

67 
usbfwD©a
.
ï0Sètus
 = 
EP_TX
;

69 } i‡(
usbfwD©a
.
ï0Sètus
 =
EP_TX
) {

73 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

75 
	}
}

78 
	$usbvrHookPro˚ssOut
(Ë{
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
; 
	}
}

79 
	$usbvrHookPro˚ssIn
(Ë{
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
; 
	}
}

82 
	$usb§HookSëDes¸ùt‹
(Ë{ 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
; 
	}
}

83 
	$usb§HookSynchFøme
(Ë{ 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
; 
	}
}

84 
	$usb§HookCÀ¨Fótuª
(Ë{ 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
; 
	}
}

85 
	$usb§HookSëFótuª
(Ë{ 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
; 
	}
}

86 
	$usb§HookModifyGëSètus
(
uöt8
 
ªcùõ¡
, uöt8 
ödex
, 
uöt16
 
__xd©a
 *
pSètus
Ë{ 
	}
}

90 
	$usb§HookPro˚ssEvít
(
uöt8
 
evít
, uöt8 
ödex
)

93 
evít
) {

94 
USBSR_EVENT_CONFIGURATION_CHANGING
 :

96 
USBSR_EVENT_CONFIGURATION_CHANGED
 :

98 
USBSR_EVENT_INTERFACE_CHANGING
 :

100 
USBSR_EVENT_INTERFACE_CHANGED
 :

102 
USBSR_EVENT_REMOTE_WAKEUP_ENABLED
 :

104 
USBSR_EVENT_REMOTE_WAKEUP_DISABLED
 :

106 
USBSR_EVENT_EPIN_STALL_CLEARED
 :

108 
USBSR_EVENT_EPIN_STALL_SET
 :

110 
USBSR_EVENT_EPOUT_STALL_CLEARED
 :

112 
USBSR_EVENT_EPOUT_STALL_SET
 :

115 
	}
}

118 
	$usbúqHookPro˚ssEvíts
()

121 
	}
}

	@Components/hal/target/CC2530USB/usb/class_cdc/usb_cdc_hooks.h

8 #i‚de‡
USB_CDC_HOOKS_H


9 
	#USB_CDC_HOOKS_H


	)

11 
	~"hÆ_ty≥s.h
"

14 
uöt32
 
	mdãR©e
;

15 
uöt8
 
	mch¨F‹m©
;

16 
uöt8
 
	m∑rôyTy≥
;

17 
uöt8
 
	md©aBôs
;

18 } 
	tCDC_LINE_CODING_STRUCTURE
;

20 
CDC_LINE_CODING_STRUCTURE
 
cuºítLöeCodög
;

	@Components/hal/target/CC2530USB/usb/class_cdc/usb_firmware_library_config.c

11 
	#USBFIRMWARELIBRARYCONFIG_C


12 
	~"usb_fúmw¨e_libøry_hódîs.h
"

	)

23 
USB_DESCRIPTOR_MARKER
 
	gusbDes¸ùt‹M¨kî
= {

24 (
uöt8
 
__code
 *)&
usbDescSèπ
,

25 (
uöt8
 
__code
 *)&
usbDescEnd
,

26 (
DESC_LUT_INFO
 
__code
 *Ë&
usbDescLut
,

27 (
DESC_LUT_INFO
 
__code
 *Ë&
usbDescLutEnd
,

28 (
DBLBUF_LUT_INFO
 
__code
 *Ë&
usbDblbufLut
,

29 (
DBLBUF_LUT_INFO
 
__code
 *Ë&
usbDblbufLutEnd


	@Components/hal/target/CC2530USB/usb/class_cdc/usb_firmware_library_config.h

8 #i‚de‡
USBFIRMWARELIBRARYCONFIG_H


9 
	#USBFIRMWARELIBRARYCONFIG_H


10 

	)

26 
	#USB_SETUP_MAX_NUMBER_OF_INTERFACES
 5

	)

	@Components/hal/target/CC2530USB/usb/class_cdc/usb_firmware_library_headers.h

9 #i‚de‡
USB_FIRMWARE_LIBRARY_HEADERS_H


10 
	#USB_FIRMWARE_LIBRARY_HEADERS_H


	)

20 
	~"usb_fúmw¨e_libøry_c⁄fig.h
"

21 
	~"usb_des¸ùt‹.h
"

22 
	~"usb_des¸ùt‹_∑r£r.h
"

23 
	~"usb_öãºu±.h
"

24 
	~"usb_‰amew‹k.h
"

25 
	~"usb_ªg.h
"

26 
	~"usb_°™d¨d_ªque°s.h
"

27 
	~"usb_su•íd.h
"

	@Components/hal/target/CC2530USB/usb/library/cc2531/usb_board_cfg.h

41 #i‚de‡
USB_BOARD_CFG_H


42 
	#USB_BOARD_CFG_H


	)

49 
	~"hÆ_bﬂrd_cfg.h
"

50 
	~"hÆ_mcu.h
"

51 
	~"ioCC2531.h
"

52 
	~"usb_ªg.h
"

59 
	#HAL_BOARD_IO_USB_ENABLE_PORT
 1

60 
	#HAL_BOARD_IO_USB_ENABLE_PIN
 0

	)

62 
	#BIT0
 0x01

	)

63 
	#BIT1
 0x02

	)

64 
	#BIT2
 0x04

	)

65 
	#BIT3
 0x08

	)

66 
	#BIT4
 0x10

	)

67 
	#BIT5
 0x20

	)

68 
	#BIT6
 0x40

	)

69 
	#BIT7
 0x80

	)

71 #i‡!
deföed
 
HAL_UART_USB_SUSPEND


72 
	#HAL_UART_USB_SUSPEND
 
FALSE


	)

80 
	#HAL_USB_ENABLE
(Ë
	`°
–
USBCTRL

USBCTRL_PLL_EN
 | 
USBCTRL_USB_EN
; \

81 !(
USBCTRL
&
USBCTRL_PLL_LOCKED
)); )

	)

82 
	#HAL_USB_PLL_DISABLE
(Ë
	`°
–
USBCTRL
&~
USBCTRL_PLL_EN
; \

83 
USBCTRL
&
USBCTRL_PLL_LOCKED
); )

	)

84 
	#HAL_USB_DISABLE
 
	`°
(
USBCTRL
 = 0; USBCTRL & 0x80);)

	)

86 
	#HAL_USB_PULLUP_ENABLE
() \

87 
	`MCU_IO_OUTPUT
(
HAL_BOARD_IO_USB_ENABLE_PORT
, 
HAL_BOARD_IO_USB_ENABLE_PIN
, 1)

	)

88 
	#HAL_USB_PULLUP_DISABLE
() \

89 
	`MCU_IO_OUTPUT
(
HAL_BOARD_IO_USB_ENABLE_PORT
, 
HAL_BOARD_IO_USB_ENABLE_PIN
, 0)

	)

91 #i‡
deföed
 
HAL_SB_BOOT_CODE


92 
	#HAL_USB_INT_ENABLE
()

	)

94 
	#HAL_USB_INT_ENABLE
(Ë
	`°
–
P2IEN
|0x20; 
IEN2
|0x02; )

	)

96 
	#HAL_USB_INT_DISABLE
(Ë
	`°
–
P2IEN
&~0x20; )

	)

97 
	#HAL_USB_INT_CLEAR
(Ë
	`°
–
P2IFG
0; 
P2IF
0; )

	)

99 #i‡
deföed
 
HAL_SB_BOOT_CODE


100 
	#HAL_USB_RESUME_INT_ENABLE
()

	)

102 
	#HAL_USB_RESUME_INT_ENABLE
(Ë
	`°
 ( 
USBCIE
 |0x02; )

	)

104 
	#HAL_USB_RESUME_INT_DISABLE
(Ë
	`°
 ( 
USBCIE
 &~0x02; )

	)

106 
	#USBCTRL_PLL_LOCKED
 0x80

	)

107 
	#USBCTRL_PLL_EN
 0x02

	)

108 
	#USBCTRL_USB_EN
 0x01

	)

110 
	#P2IFG_DPIF
 0x20

	)

112 
	#CC2530_IS_XOSC_STABLE
(Ë(
SLEEPSTA
 & 
XOSC_STB
)

	)

114 
	#NOP
(Ë
	`asm
("NOP")

	)

115 
	#MCU_IO_TRISTATE
 1

116 
	#MCU_IO_PULLUP
 2

	)

117 
	#MCU_IO_PULLDOWN
 3

	)

122 
	#MCU_IO_PERIPHERAL
(
p‹t
, 
pö
Ë
	`MCU_IO_PERIPHERAL_PREP
’‹t,Öö)

	)

123 
	#MCU_IO_INPUT
(
p‹t
, 
pö
, 
func
Ë
	`MCU_IO_INPUT_PREP
’‹t,Öö, func)

	)

124 
	#MCU_IO_OUTPUT
(
p‹t
, 
pö
, 
vÆ
Ë
	`MCU_IO_OUTPUT_PREP
’‹t,Öö, vÆ)

	)

125 
	#MCU_IO_SET
(
p‹t
, 
pö
, 
vÆ
Ë
	`MCU_IO_SET_PREP
’‹t,Öö, vÆ)

	)

126 
	#MCU_IO_SET_HIGH
(
p‹t
, 
pö
Ë
	`MCU_IO_SET_HIGH_PREP
’‹t,Öö)

	)

127 
	#MCU_IO_SET_LOW
(
p‹t
, 
pö
Ë
	`MCU_IO_SET_LOW_PREP
’‹t,Öö)

	)

128 
	#MCU_IO_TGL
(
p‹t
, 
pö
Ë
	`MCU_IO_TGL_PREP
’‹t,Öö)

	)

129 
	#MCU_IO_GET
(
p‹t
, 
pö
Ë
	`MCU_IO_GET_PREP
’‹t,Öö)

	)

131 
	#MCU_IO_DIR_INPUT
(
p‹t
, 
pö
Ë
	`MCU_IO_DIR_INPUT_PREP
’‹t,Öö)

	)

132 
	#MCU_IO_DIR_OUTPUT
(
p‹t
, 
pö
Ë
	`MCU_IO_DIR_OUTPUT_PREP
’‹t,Öö)

	)

137 
	#MCU_IO_PERIPHERAL_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
SEL
 |
	`BV
’ö); )

	)

139 
	#MCU_IO_INPUT_PREP
(
p‹t
, 
pö
, 
func
Ë
	`°
–
P
##p‹t##
SEL
 &~
	`BV
(pin); \

140 
P
##
p‹t
##
DIR
 &~
	`BV
(
pö
); \

141 
func
) { \

142 
MCU_IO_PULLUP
: \

143 
P
##
p‹t
##
INP
 &~
	`BV
(
pö
); \

144 
P2INP
 &~
	`BV
(
p‹t
 + 5); \

146 
MCU_IO_PULLDOWN
: \

147 
P
##
p‹t
##
INP
 &~
	`BV
(
pö
); \

148 
P2INP
 |
	`BV
(
p‹t
 + 5); \

151 
P
##
p‹t
##
INP
 |
	`BV
(
pö
); \

152 ; } )

	)

154 
	#MCU_IO_OUTPUT_PREP
(
p‹t
, 
pö
, 
vÆ
Ë
	`°
–
P
##p‹t##
SEL
 &~
	`BV
(pin); \

155 
P
##
p‹t
##
_
##
pö
## = 
vÆ
; \

156 
P
##
p‹t
##
DIR
 |
	`BV
(
pö
); )

	)

158 
	#MCU_IO_SET_HIGH_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
_
##pö## = 1; )

	)

159 
	#MCU_IO_SET_LOW_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
_
##pö## = 0; )

	)

161 
	#MCU_IO_SET_PREP
(
p‹t
, 
pö
, 
vÆ
Ë
	`°
–
P
##p‹t##
_
##pö## = vÆ; )

	)

162 
	#MCU_IO_TGL_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
_
##pö## ^1; )

	)

163 
	#MCU_IO_GET_PREP
(
p‹t
, 
pö
Ë(
P
##p‹t## & 
	`BV
’ö))

	)

165 
	#MCU_IO_DIR_INPUT_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
DIR
 &~
	`BV
’ö); )

	)

166 
	#MCU_IO_DIR_OUTPUT_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
DIR
 |
	`BV
’ö); )

	)

	@Components/hal/target/CC2530USB/usb/library/cc2531/usb_interrupt.c

11 
	#USBINTERRUPT_C


12 
	~"usb_fúmw¨e_libøry_hódîs.h
"

	)

13 
	~"usb_bﬂrd_cfg.h
"

14 
	~"hÆ_Êash.h
"

15 
	~"hÆ_Àd.h
"

27 
	$usbúqInô
(
uöt16
 
úqMask
)

30 
usbúqD©a
.
evítMask
 = 0x0000;

31 
usbúqD©a
.
öSu•íd
 = 
FALSE
;

32 
usbúqD©a
.
úqMask
 = irqMask;

35 
USBCIE
 = 
úqMask
;

36 
USBIIE
 = 
úqMask
 >> 4;

37 
USBOIE
 = (
úqMask
 >> 9) & 0x3E;

39 
	`HAL_USB_INT_CLEAR
();

40 
	`HAL_USB_INT_ENABLE
();

42 
	}
}

51 #i‡
deföed
 
HAL_SB_BOOT_CODE


52 
	$usbúqH™dÀr
()

54 #¥agm®
ve˘‹
=
P2INT_VECTOR


55 
__öãºu±
 
	$usbúqH™dÀr
()

58 
uöt8
 
usbcif
;

61 !
	`CC2530_IS_XOSC_STABLE
());

64 
usbcif
 = 
USBCIF
;

65 i‡(
usbcif
 & 
USBCIF_RSTIF
) {

69 
USBCIE
 = 
usbúqD©a
.
úqMask
;

70 
USBIIE
 = 
usbúqD©a
.
úqMask
 >> 4;

71 
USBOIE
 = (
usbúqD©a
.
úqMask
 >> 9) & 0x3E;

74 
USBPOW
 |
USBPOW_SUSPEND_EN
;

78 
usbúqD©a
.
evítMask
 |(
uöt16
Ë
usbcif
;

79 
usbúqD©a
.
evítMask
 |(
uöt16
Ë
USBIIF
 << 4;

80 
usbúqD©a
.
evítMask
 |(
uöt16
Ë
USBOIF
 << 9;

85 i‡(
usbcif
 & 
USBCIF_SUSPENDIF
) {

86 
usbúqD©a
.
öSu•íd
 = 
TRUE
;

88 i‡(
usbcif
 & (
USBCIF_RSTIF
 | 
USBCIF_RESUMEIF
)) {

89 
usbúqD©a
.
öSu•íd
 = 
FALSE
;

91 i‡(
P2IFG
 & 
P2IFG_DPIF
) {

93 
P2IFG
 = ~
P2IFG_DPIF
;

94 
usbúqD©a
.
öSu•íd
 = 
FALSE
;

98 
	`usbúqHookPro˚ssEvíts
();

101 
	`HAL_USB_INT_CLEAR
();

103 
	}
}

	@Components/hal/target/CC2530USB/usb/library/cc2531/usb_suspend.c

11 
	~"usb_fúmw¨e_libøry_hódîs.h
"

12 
	~"hÆ_bﬂrd.h
"

13 
	~"hÆ_mcu.h
"

14 
	~"hÆ_Àd.h
"

16 
__xd©a
 
VFPTR
 
	gpFnSu•ídE¡îHook

NULL
;

17 
__xd©a
 
VFPTR
 
	gpFnSu•ídExôHook

NULL
;

19 #i‡
HAL_UART_USB_SUSPEND


20 
hÆE¡îPowîMode
();

30 
	$usbsu•E¡î
()

32 i‡(
pFnSu•ídE¡îHook
!=
NULL
)

33 
	`pFnSu•ídE¡îHook
();

35 
	`HAL_USB_INT_CLEAR
();

36 
	`HAL_USB_INT_ENABLE
();

39 
	`HAL_USB_PLL_DISABLE
();

41 
	`HAL_LED_CLR_1
();

45 
SLEEPCMD
 = 0x05;

46 
	`hÆE¡îPowîMode
();

47 }  
usbúqD©a
.
öSu•íd
 );

52 !
	`CC2530_IS_XOSC_STABLE
());

55 
	`HAL_USB_ENABLE
();

57 i‡(
pFnSu•ídExôHook
!=
NULL
)

58 
	`pFnSu•ídExôHook
();

59 
	}
}

76 
uöt8
 
	$usbsu•DoRemŸeWakeup
()

78 
	`hÆMcuWaôMs
(
uöt16
 
m£c
);

79 
hÆI¡Sèã_t
 
ötSèã
;

82 i‡(!
usbfwD©a
.
ªmŸeWakeup
Ë 
FALSE
;

84 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

87 
usbúqD©a
.
öSu•íd
 = 
FALSE
;

90 
USBPOW
 |
USBPOW_RESUME
;

91 
	`hÆMcuWaôMs
(10);

92 
USBPOW
 &~
USBPOW_RESUME
;

95 
	`HAL_USB_INT_CLEAR
();

97 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

99  
TRUE
;

101 
	}
}

	@Components/hal/target/CC2530USB/usb/library/usb_descriptor.h

8 #i‚de‡
USBDESCRIPTOR_H


9 
	#USBDESCRIPTOR_H


	)

12 #i‚de‡
ASM_FILE


13 
	~"usb_‰amew‹k_°ru˘s.h
"

87 #ifde‡
EXTERN


88 #unde‡
EXTERN


90 #ifde‡
USBDESCRIPTORPARSER_C


91 
	#EXTERN


92 #ñ£

	)

93 
	#EXTERN
 

95 

	)

100 
	#EP0_PACKET_SIZE
 32

102 

	)

105 
	#DESC_TYPE_DEVICE
 0x01

106 
	#DESC_TYPE_CONFIG
 0x02

107 
	#DESC_TYPE_STRING
 0x03

108 
	#DESC_TYPE_INTERFACE
 0x04

109 
	#DESC_TYPE_ENDPOINT
 0x05

111 

	)

114 
	#DESC_TYPE_HID
 0x21

115 
	#DESC_TYPE_HIDREPORT
 0x22

117 

	)

120 
	#EP_ATTR_CTRL
 0x00

121 
	#EP_ATTR_ISO
 0x01

122 
	#EP_ATTR_BULK
 0x02

123 
	#EP_ATTR_INT
 0x03

124 
	#EP_ATTR_TYPE_BM
 0x03

127 

	)

129 #i‚de‡
ASM_FILE


136 
uöt8
 
__code
* c⁄° 
pUsbDescSèπ
;

137 
uöt8
 
__code
* c⁄° 
pUsbDescEnd
;

138 
DESC_LUT_INFO
 
__code
* c⁄° 
pUsbDescLut
;

139 
DESC_LUT_INFO
 
__code
* c⁄° 
pUsbDescLutEnd
;

140 
DBLBUF_LUT_INFO
 
__code
* c⁄° 
pUsbDblbufLut
;

141 
DBLBUF_LUT_INFO
 
__code
* c⁄° 
pUsbDblbufLutEnd
;

142 } 
	tUSB_DESCRIPTOR_MARKER
;

144 
USB_DESCRIPTOR_MARKER
 
__xd©a
 
usbDes¸ùt‹M¨kî
;

152 
__code
* 
usbDescSèπ
;

153 
__code
* 
usbDescEnd
;

154 
__code
* 
usbDescLut
;

155 
__code
* 
usbDescLutEnd
;

156 
__code
* 
usbDblbufLut
;

157 
__code
* 
usbDblbufLutEnd
;

	@Components/hal/target/CC2530USB/usb/library/usb_descriptor_parser.c

11 
	#USBDESCRIPTORPARSER_C


12 
	~"usb_fúmw¨e_libøry_hódîs.h
"

	)

13 
	~"hÆ_Êash.h
"

15 #i‡!
deföed
 
Z_EXTADDR_LEN


16 
	#Z_EXTADDR_LEN
 8

	)

21 
USBDP_DATA
 
__xd©a
 
	gusbdpD©a
;

27 c⁄° 
uöt8
 
	gœnguageId
[4] = {

29 
DESC_TYPE_STRING
,

34 c⁄° 
uöt8
 
	gm™uÁ˘uªr
[36] = {

36 
DESC_TYPE_STRING
,

57 c⁄° 
uöt8
 
	g¥odu˘
[36] = {

59 
DESC_TYPE_STRING
,

80 
uöt8
 
	g£rülNumbî
[42] = {

82 
DESC_TYPE_STRING
,

90 c⁄° 
uöt8
 
	ghexDigô
[16] = {

97 
	$usbdpInô
()

99 
usbdpD©a
.
pDesc
 = (c⁄° 
uöt8
 
__code
 *Ë
usbDes¸ùt‹M¨kî
.
pUsbDescSèπ
;

100 
	}
}

127 
__code
* 
	$usbdpFödNext
(
uöt8
 
w™ãdTy≥
, uöt8 
hÆtAtTy≥
)

129 
__code
 *
pResu…
;

130 
pResu…
 = 
NULL
;

133 
usbdpD©a
.
pDesc
 !(
__code
 *Ë
usbDes¸ùt‹M¨kî
.
pUsbDescEnd
) {

136 i‡(
usbdpD©a
.
pDesc
[
DESC_TYPE_IDX
] =
w™ãdTy≥
) {

137 
pResu…
 = (
__code
*Ë
usbdpD©a
.
pDesc
;

138 
usbdpD©a
.
pDesc
 +usbdpD©a.pDesc[
DESC_LENGTH_IDX
];

142 } i‡(
usbdpD©a
.
pDesc
[
DESC_TYPE_IDX
] =
hÆtAtTy≥
) {

143 i‡(
hÆtAtTy≥
) ;

147 
usbdpD©a
.
pDesc
 +usbdpD©a.pDesc[
DESC_LENGTH_IDX
];

150  
pResu…
;

151 
	}
}

163 
USB_DEVICE_DESCRIPTOR
 
__code
* 
	$usbdpGëDevi˚Desc
()

165 
	`usbdpInô
();

166  
	`usbdpFödNext
(
DESC_TYPE_DEVICE
, 0);

167 
	}
}

189 
USB_CONFIGURATION_DESCRIPTOR
 
__code
* 
	$usbdpGëC⁄figuøti⁄Desc
(
uöt8
 
cfgVÆue
, uöt8 
cfgIndex
)

191 
USB_CONFIGURATION_DESCRIPTOR
 
__code
 *
pC⁄figuøti⁄Desc
;

192 
	`usbdpInô
();

195 
pC⁄figuøti⁄Desc
 = 
	`usbdpFödNext
(
DESC_TYPE_CONFIG
, 0)) {

198 i‡(
cfgVÆue
) {

199 i‡(
cfgVÆue
 =
pC⁄figuøti⁄Desc
->
bC⁄figuøti⁄VÆue
) ;

202 } i‡(!
cfgIndex
--) {

207  
pC⁄figuøti⁄Desc
;

208 
	}
}

231 
USB_INTERFACE_DESCRIPTOR
 
__code
* 
	$usbdpGëI¡îÁ˚Desc
(
uöt8
 
cfgVÆue
, uöt8 
ötNumbî
, uöt8 
ÆtSëtög
)

233 
USB_INTERFACE_DESCRIPTOR
 
__code
 *
pI¡îÁ˚Desc
;

236 
	`usbdpGëC⁄figuøti⁄Desc
(
cfgVÆue
, 0);

239 
pI¡îÁ˚Desc
 = 
	`usbdpFödNext
(
DESC_TYPE_INTERFACE
, 
DESC_TYPE_CONFIG
)) {

240 i‡((
pI¡îÁ˚Desc
->
bI¡îÁ˚Numbî
 =
ötNumbî
Ë&& (pI¡îÁ˚Desc->
bA…î«ãSëtög
 =
ÆtSëtög
)) {

245  
pI¡îÁ˚Desc
;

246 
	}
}

261 
USB_STRING_DESCRIPTOR
* 
	$usbdpGëSåögDesc
(
uöt8
 
°rIndex
)

263 
USB_STRING_DESCRIPTOR
 *
pSåögDesc
 = 
NULL
;

265 #ifde‡
MS_EXT_C_ID


278 
°rIndex
)

281 
pSåögDesc
 = (
USB_STRING_DESCRIPTOR
 *)
œnguageId
;

285 
pSåögDesc
 = (
USB_STRING_DESCRIPTOR
 *)
m™uÁ˘uªr
;

289 
pSåögDesc
 = (
USB_STRING_DESCRIPTOR
 *)
¥odu˘
;

293 i‡(
£rülNumbî
[0] == 0)

295 #i‡(
deföed
 
HAL_SB_BOOT_CODE
 || deföed 
CC253X_MACNP
)

296 
	~<°rög.h
>

297 
uöt8
 
nuŒAddr
[
Z_EXTADDR_LEN
] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

298 
uöt8
 
aExãndedAddªss
[8];

302 
	`HÆFœshRód
(
HAL_FLASH_IEEE_PAGE
, 
HAL_FLASH_IEEE_OSET
, 
aExãndedAddªss
, 
Z_EXTADDR_LEN
);

304 i‡(!
	`memcmp
(
aExãndedAddªss
, 
nuŒAddr
, 
Z_EXTADDR_LEN
))

307 ()
	`mem˝y
(
aExãndedAddªss
, (
uöt8
 *)(
P_INFOPAGE
+
HAL_INFOP_IEEE_OSET
), 
Z_EXTADDR_LEN
);

310 
uöt8
 
aExãndedAddªss
[
Z_EXTADDR_LEN
];

314 
uöt8
 
idx
 = (
£rülNumbî
)-2, 
˙t
 = 0; c¡ < 
Z_EXTADDR_LEN
; cnt++, idx -= 4)

316 
£rülNumbî
[
idx
] = 
hexDigô
[
aExãndedAddªss
[
˙t
] & 0x0F];

317 
£rülNumbî
[
idx
-2] = 
hexDigô
[
aExãndedAddªss
[
˙t
] / 16];

319 
£rülNumbî
[0] = (serialNumber);

321 
pSåögDesc
 = (
USB_STRING_DESCRIPTOR
 *)
£rülNumbî
;

329  
pSåögDesc
;

330 
	}
}

	@Components/hal/target/CC2530USB/usb/library/usb_descriptor_parser.h

9 #i‚de‡
USBDESCRIPTORPARSER_H


10 
	#USBDESCRIPTORPARSER_H


	)

56 
	~"usb_des¸ùt‹.h
"

65 
	#DESC_LENGTH_IDX
 0

66 
	#DESC_TYPE_IDX
 1

67 
	#DESC_CONFIG_LENGTH_LSB_IDX
 2

68 
	#DESC_CONFIG_LENGTH_MSB_IDX
 3

71 

	)

75 
usbdpInô
();

76 
__code
 *
usbdpFödNext
(
uöt8
 
w™ãdTy≥
, uöt8 
hÆtAtTy≥
);

78 
USB_DEVICE_DESCRIPTOR
 
__code
* 
usbdpGëDevi˚Desc
();

79 
USB_CONFIGURATION_DESCRIPTOR
 
__code
* 
usbdpGëC⁄figuøti⁄Desc
(
uöt8
 
cfgVÆue
, uöt8 
cfgIndex
);

80 
USB_INTERFACE_DESCRIPTOR
 
__code
* 
usbdpGëI¡îÁ˚Desc
(
uöt8
 
cfgVÆue
, uöt8 
ötNumbî
, uöt8 
ÆtSëtög
);

81 
USB_STRING_DESCRIPTOR
* 
usbdpGëSåögDesc
(
uöt8
 
°rIndex
);

	@Components/hal/target/CC2530USB/usb/library/usb_framework.c

11 
	#USBFRAMEWORK_C


12 
	~"usb_fúmw¨e_libøry_hódîs.h
"

	)

13 
	~"usb_bﬂrd_cfg.h
"

16 
VFPTR
 
__d©a
 
	gPro˚ssFunc
;

25 
	$usbfwInô
()

28 
usbfwD©a
.
£lfPowîed
 = (
	`usbdpGëC⁄figuøti⁄Desc
(1, 0)->
bmAâribuãs
 & 0x40Ë? 
TRUE
 : 
FALSE
;

29 
usbfwD©a
.
ªmŸeWakeup
 = 
FALSE
;

31 
	`HAL_USB_ENABLE
();

34 
	`HAL_USB_RESUME_INT_ENABLE
();

36 
	}
}

48 
	$usbfwRe£tH™dÀr
()

52 
usbfwD©a
.
usbSèã
 = 
DEV_DEFAULT
;

53 
usbfwD©a
.
c⁄figuøti⁄VÆue
 = 0;

56 
usbfwD©a
.
ï0Sètus
 = 
EP_IDLE
;

57 
	`usbfwSëAŒEpSètus
(
EP_HALT
);

60 
Pro˚ssFunc
 = 
NULL
;

62 
	}
}

77 
	$usbfwSëupH™dÀr
()

79 
uöt8
 
c⁄åﬁReg
;

80 
uöt8
 
byãsNow
;

81 
uöt8
 
ﬁdEndpoöt
;

84 
ﬁdEndpoöt
 = 
	`USBFW_GET_SELECTED_ENDPOINT
();

85 
	`USBFW_SELECT_ENDPOINT
(0);

86 
c⁄åﬁReg
 = 
USBCS0
;

89 i‡(
c⁄åﬁReg
 & 
USBCS0_SETUP_END
) {

90 
USBCS0
 = 
USBCS0_CLR_SETUP_END
;

91 
usbfwD©a
.
ï0Sètus
 = 
EP_CANCEL
;

92 i‡(
Pro˚ssFunc
Ë
	`Pro˚ssFunc
();

93 
usbfwD©a
.
ï0Sètus
 = 
EP_IDLE
;

97 i‡(
c⁄åﬁReg
 & 
USBCS0_SENT_STALL
) {

98 
USBCS0
 = 0x00;

99 
usbfwD©a
.
ï0Sètus
 = 
EP_IDLE
;

103 i‡(
usbfwD©a
.
ï0Sètus
 =
EP_RX
) {

106 
byãsNow
 = 
USBCNT0
;

107 
	`usbfwRódFifo
(&
USBF0
, 
byãsNow
, 
usbSëupD©a
.
pBuf„r
);

108 
usbSëupD©a
.
byãsLe·
 -
byãsNow
;

109 
usbSëupD©a
.
pBuf„r
 +
byãsNow
;

112 
USBCS0
 = 
usbSëupD©a
.
byãsLe·
 ? 
USBCS0_CLR_OUTPKT_RDY
 : (USBCS0_CLR_OUTPKT_RDY | 
USBCS0_DATA_END
);

115 i‡(
usbSëupD©a
.
byãsLe·
 == 0) {

116 i‡(
Pro˚ssFunc
Ë
	`Pro˚ssFunc
();

117 
usbfwD©a
.
ï0Sètus
 = 
EP_IDLE
;

121 
	`USBFW_SELECT_ENDPOINT
(
ﬁdEndpoöt
);

125 } i‡(
usbfwD©a
.
ï0Sètus
 =
EP_MANUAL_RX
) {

126 
	`Pro˚ssFunc
();

130 i‡(
usbfwD©a
.
ï0Sètus
 =
EP_IDLE
) {

131 i‡(
c⁄åﬁReg
 & 
USBCS0_OUTPKT_RDY
) {

132 
	`usbfwRódFifo
(&
USBF0
, 8, (
uöt8
 
__xd©a
 *Ë&
usbSëupHódî
);

135 
Pro˚ssFunc
 = 
NULL
;

136 
usbSëupHódî
.
ªque°Ty≥
 & (
RT_MASK_TYPE
 | 
RT_MASK_DIR
)) {

139 
RT_STD_OUT
:

140 
usbSëupHódî
.
ªque°
) {

141 
SET_ADDRESS
: 
	`usb§SëAddªss
(); ;

142 
SET_FEATURE
: 
	`usb§SëFótuª
(); ;

143 
CLEAR_FEATURE
: 
	`usb§CÀ¨Fótuª
(); ;

144 
SET_CONFIGURATION
: 
	`usb§SëC⁄figuøti⁄
(); ;

145 
SET_INTERFACE
: 
	`usb§SëI¡îÁ˚
(); ;

146 
SET_DESCRIPTOR
:

147 : 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
; ;

152 
RT_STD_IN
:

153 
usbSëupHódî
.
ªque°
) {

154 
GET_STATUS
: 
	`usb§GëSètus
(); ;

155 
GET_DESCRIPTOR
: 
	`usb§GëDes¸ùt‹
(); ;

156 
GET_CONFIGURATION
: 
	`usb§GëC⁄figuøti⁄
(); ;

157 
GET_INTERFACE
: 
	`usb§GëI¡îÁ˚
(); ;

158 
SYNCH_FRAME
:

159 : 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
; ;

164 
RT_VEND_OUT
:

165 
Pro˚ssFunc
 = 
usbvrHookPro˚ssOut
; 
	`usbvrHookPro˚ssOut
();

167 
RT_VEND_IN
:

168 
Pro˚ssFunc
 = 
usbvrHookPro˚ssIn
; 
	`usbvrHookPro˚ssIn
();

172 
RT_CLASS_OUT
:

173 
Pro˚ssFunc
 = 
usb¸HookPro˚ssOut
; 
	`usb¸HookPro˚ssOut
();

175 
RT_CLASS_IN
:

176 
Pro˚ssFunc
 = 
usb¸HookPro˚ssIn
; 
	`usb¸HookPro˚ssIn
();

181 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

186 
USBCS0
 = (
usbfwD©a
.
ï0Sètus
 =
EP_STALL
Ë? (
USBCS0_CLR_OUTPKT_RDY
 | 
USBCS0_SEND_STALL
) : USBCS0_CLR_OUTPKT_RDY;

191 i‡(
usbfwD©a
.
ï0Sètus
 =
EP_TX
) {

192 
c⁄åﬁReg
 = 
USBCS0_INPKT_RDY
;

195 i‡(
usbSëupD©a
.
byãsLe·
 < 
EP0_PACKET_SIZE
) {

196 
byãsNow
 = 
usbSëupD©a
.
byãsLe·
;

197 
c⁄åﬁReg
 |
USBCS0_DATA_END
;

201 
byãsNow
 = 
EP0_PACKET_SIZE
;

205 
	`usbfwWrôeFifo
(&
USBF0
, 
byãsNow
, 
usbSëupD©a
.
pBuf„r
);

206 
usbSëupD©a
.
pBuf„r
 +
byãsNow
;

207 
usbSëupD©a
.
byãsLe·
 -
byãsNow
;

210 
USBCS0
 = 
c⁄åﬁReg
;

213 i‡(
byãsNow
 < 
EP0_PACKET_SIZE
) {

214 i‡(
Pro˚ssFunc
Ë
	`Pro˚ssFunc
();

215 
usbfwD©a
.
ï0Sètus
 = 
EP_IDLE
;

219 } i‡(
usbfwD©a
.
ï0Sètus
 =
EP_MANUAL_TX
) {

220 
	`Pro˚ssFunc
();

224 
	`USBFW_SELECT_ENDPOINT
(
ﬁdEndpoöt
);

226 
	}
}

238 
	$usbfwSëAŒEpSètus
(
EP_STATUS
 
°©us
)

240 
uöt8
 
n
;

241 
n
 = 0;Ç < (
usbfwD©a
.
pEpInSètus
);Ç++)

242 
usbfwD©a
.
pEpInSètus
[
n
] = 
°©us
;

243 
n
 = 0;Ç < (
usbfwD©a
.
pEpOutSètus
);Ç++)

244 
usbfwD©a
.
pEpOutSètus
[
n
] = 
°©us
;

245 
	}
}

262 
	$usbfwRódFifo
(
uöt8
 vﬁ©ûê
__xd©a
 *
pFifo
, uöt8 
cou¡
, 
__gíîic
 *
pD©a
)

264 
uöt8
 
__gíîic
 *
pTemp
 = 
pD©a
;

265 i‡(
cou¡
) {

267 *(
pTemp
++Ë*
pFifo
;

268 } --
cou¡
);

270 
	}
}

287 
	$usbfwWrôeFifo
(
uöt8
 vﬁ©ûê
__xd©a
 *
pFifo
, uöt8 
cou¡
, 
__gíîic
 *
pD©a
)

289 
uöt8
 
__gíîic
 *
pTemp
 = 
pD©a
;

290 i‡(
cou¡
) {

292 *
pFifo
 = *(
pTemp
++);

293 } --
cou¡
);

295 
	}
}

	@Components/hal/target/CC2530USB/usb/library/usb_framework.h

9 #i‚de‡
USBFRAMEWORK_H


10 
	#USBFRAMEWORK_H


	)

182 
	~"usb_bﬂrd_cfg.h
"

183 
	~"usb_‰amew‹k_°ru˘s.h
"

185 #ifde‡
EXTERN


186 #unde‡
EXTERN


188 #ifde‡
USBFRAMEWORK_C


189 
	#EXTERN


190 #ñ£

	)

191 
	#EXTERN
 

193 

	)

198 
EXTERN
 
USBFW_DATA
 
__xd©a
 
usbfwD©a
;

206 
EXTERN
 
USB_SETUP_DATA
 
__xd©a
 
	gusbSëupD©a
;

207 
EXTERN
 
USB_SETUP_HEADER
 
__xd©a
 
	gusbSëupHódî
;

217 
	#RT_MASK_DIR
 0x80

218 
	#RT_MASK_TYPE
 0x60

219 
	#RT_MASK_RECIP
 0x1F

220 

	)

222 
	#RT_DIR_IN
 0x80

223 
	#RT_DIR_OUT
 0x00

224 

	)

226 
	#RT_TYPE_STD
 0x00

227 
	#RT_TYPE_CLASS
 0x20

228 
	#RT_TYPE_VEND
 0x40

229 

	)

231 
	#RT_RECIP_DEV
 0x00

232 
	#RT_RECIP_IF
 0x01

233 
	#RT_RECIP_EP
 0x02

234 
	#RT_RECIP_OTHER
 0x03

235 

	)

237 
	#RT_STD_OUT
 (
RT_TYPE_STD
 | 
RT_DIR_OUT
)

238 
	#RT_STD_IN
 (
RT_TYPE_STD
 | 
RT_DIR_IN
)

239 
	#RT_VEND_OUT
 (
RT_TYPE_VEND
 | 
RT_DIR_OUT
)

240 
	#RT_VEND_IN
 (
RT_TYPE_VEND
 | 
RT_DIR_IN
)

241 
	#RT_CLASS_OUT
 (
RT_TYPE_CLASS
 | 
RT_DIR_OUT
)

242 
	#RT_CLASS_IN
 (
RT_TYPE_CLASS
 | 
RT_DIR_IN
)

243 

	)

245 
	#RT_OUT_DEVICE
 (
RT_DIR_OUT
 | 
RT_RECIP_DEV
)

246 
	#RT_IN_DEVICE
 (
RT_DIR_IN
 | 
RT_RECIP_DEV
)

247 
	#RT_OUT_INTERFACE
 (
RT_DIR_OUT
 | 
RT_RECIP_IF
)

248 
	#RT_IN_INTERFACE
 (
RT_DIR_IN
 | 
RT_RECIP_IF
)

249 
	#RT_OUT_ENDPOINT
 (
RT_DIR_OUT
 | 
RT_RECIP_EP
)

250 
	#RT_IN_ENDPOINT
 (
RT_DIR_IN
 | 
RT_RECIP_EP
)

253 

	)

261 
usb¸HookPro˚ssOut
();

263 
usb¸HookPro˚ssIn
();

265 
usbvrHookPro˚ssOut
();

267 
usbvrHookPro˚ssIn
();

281 
	#USBFW_SELECT_ENDPOINT
(
n
Ë(
USBINDEX
 = (n))

	)

283 
	#USBFW_GET_SELECTED_ENDPOINT
(Ë(
USBINDEX
)

	)

286 
	#USBFW_STALL_IN_ENDPOINT
(Ë
	`°
 (\

287 
USBCSIL
 = 
USBCSIL_SEND_STALL
; \

288 
usbfwD©a
.
pEpInSètus
[
USBINDEX
 - 1] = 
EP_HALT
; )

	)

291 
	#USBFW_IN_ENDPOINT_STALLED
(Ë(
USBCSIL
 & 
USBCSIL_SEND_STALL
)

	)

293 
	#USBFW_FLUSH_IN_ENDPOINT
(Ë
	`°
 (\

294 
USBCSIL
 = 
USBCSIL_FLUSH_PACKET
; \

295 
USBCSIL
 & 
USBCSIL_FLUSH_PACKET
); )

	)

298 
	#USBFW_ARM_IN_ENDPOINT
(Ë(
USBCSIL
 = 
USBCSIL_INPKT_RDY
)

	)

300 
	#USBFW_IN_ENDPOINT_DISARMED
(Ë!(
USBCSIL
 & 
USBCSIL_INPKT_RDY
)

	)

302 
	#USBFW_IN_ENDPOINT_FIFO_EMPTY
(Ë!(
USBCSIL
 & 
USBCSIL_PKT_PRESENT
)

	)

305 
	#USBFW_STALL_OUT_ENDPOINT
(Ë
	`°
 ( \

306 
USBCSOL
 = 
USBCSOL_SEND_STALL
; \

307 
usbfwD©a
.
pEpOutSètus
[
USBINDEX
 - 1] = 
EP_HALT
; \

308 }

	)

311 
	#USBFW_OUT_ENDPOINT_STALLED
(Ë(
USBCSOL
 & 
USBCSOL_SEND_STALL
)

	)

313 
	#USBFW_FLUSH_OUT_ENDPOINT
(Ë
	`°
(\

314 
USBCSOL
 = 
USBCSOL_FLUSH_PACKET
; \

315 
USBCSOL
 & 
USBCSOL_FLUSH_PACKET
); )

	)

318 
	#USBFW_ARM_OUT_ENDPOINT
(Ë(
USBCSOL
 = 0)

	)

320 
	#USBFW_OUT_ENDPOINT_DISARMED
(Ë(
USBCSOL
 & 
USBCSOL_OUTPKT_RDY
)

	)

322 
	#USBFW_GET_OUT_ENDPOINT_COUNT_LOW
(Ë(
USBCNTL
)

	)

324 
	#USBFW_GET_OUT_ENDPOINT_COUNT_HIGH
(Ë(
USBCNTH
)

	)

330 
	#LOBYTEPTR
(
w
Ë–(
uöt8
 
__gíîic
 *)(&(w)Ë+ 1 )

	)

338 
usbfwInô
();

339 
usbfwRe£tH™dÀr
();

340 
usbfwSëupH™dÀr
();

341 
usbfwSëAŒEpSètus
(
EP_STATUS
 
°©us
);

342 
usbfwWrôeFifo
(
uöt8
 vﬁ©ûê
__xd©a
 *
pFifo
, uöt8 
cou¡
, 
__gíîic
 *
pD©a
);

343 
usbfwRódFifo
(
uöt8
 vﬁ©ûê
__xd©a
 *
pFifo
, uöt8 
cou¡
, 
__gíîic
 *
pD©a
);

	@Components/hal/target/CC2530USB/usb/library/usb_framework_structs.h

9 #i‚de‡
USBFRAMEWORKSTRUCTS_H


10 
	#USBFRAMEWORKSTRUCTS_H


	)

17 
	~"hÆ_ty≥s.h
"

18 
	~"usb_fúmw¨e_libøry_c⁄fig.h
"

20 #ifde‡
EXTERN


21 #unde‡
EXTERN


23 #ifde‡
USBFRAMEWORK_C


24 
	#EXTERN


25 #ñ£

	)

26 
	#EXTERN
 

28 

	)

36 
EP_IDLE
 = 0x00,

37 
EP_TX
 = 0x01,

38 
EP_RX
 = 0x02,

39 
EP_HALT
 = 0x03,

40 
EP_STALL
 = 0x04,

41 
EP_MANUAL_TX
 = 0x05,

42 
EP_MANUAL_RX
 = 0x06,

43 
EP_CANCEL
 = 0x07

44 } 
	tEP_STATUS
;

48 
	mDEV_ATTACHED
 = 0x00,

49 
	mDEV_POWERED
 = 0x01,

50 
	mDEV_DEFAULT
 = 0x02,

51 
	mDEV_ADDRESS
 = 0x03,

52 
	mDEV_CONFIGURED
 = 0x04,

53 
	mDEV_SUSPENDED
 = 0x05

54 } 
	tUSB_STATE
;

58 
USB_STATE
 
	musbSèã
;

59 
uöt8
 
	mc⁄figuøti⁄VÆue
;

60 
uöt8
 
	mpA…î«ãSëtög
[
USB_SETUP_MAX_NUMBER_OF_INTERFACES
];

61 
EP_STATUS
 
	mï0Sètus
;

62 
EP_STATUS
 
	mpEpInSètus
[5];

63 
EP_STATUS
 
	mpEpOutSètus
[5];

64 
uöt8
 
	mªmŸeWakeup
;

65 
uöt8
 
	m£lfPowîed
;

66 } 
	tUSBFW_DATA
;

71 
uöt8
 
	mªque°Ty≥
;

72 
uöt8
 
	mªque°
;

73 
uöt16
 
	mvÆue
;

74 
uöt16
 
	mödex
;

75 
uöt16
 
	mÀngth
;

76 } 
	tUSB_SETUP_HEADER
;

80 
uöt8
 
__gíîic
 *
	mpBuf„r
;

81 
uöt16
 
	mbyãsLe·
;

82 } 
	tUSB_SETUP_DATA
;

93 
uöt8
 
	mbLígth
;

94 
uöt8
 
	mbDes¸ùt‹Ty≥
;

95 
uöt16
 
	mbcdUSB
;

96 
uöt8
 
	mbDevi˚Cœss
;

97 
uöt8
 
	mbDevi˚SubCœss
;

98 
uöt8
 
	mbDevi˚PrŸocﬁ
;

99 
uöt8
 
	mbMaxPackëSize0
;

100 
uöt16
 
	midVíd‹
;

101 
uöt16
 
	midProdu˘
;

102 
uöt16
 
	mbcdDevi˚
;

103 
uöt8
 
	miM™uÁ˘uªr
;

104 
uöt8
 
	miProdu˘
;

105 
uöt8
 
	miSîülNumbî
;

106 
uöt8
 
	mbNumC⁄figuøti⁄s
;

107 } 
	tUSB_DEVICE_DESCRIPTOR
;

111 
uöt8
 
	mbLígth
;

112 
uöt8
 
	mbDes¸ùt‹Ty≥
;

113 
uöt16
 
	mwTŸÆLígth
;

114 
uöt8
 
	mbNumI¡îÁ˚s
;

115 
uöt8
 
	mbC⁄figuøti⁄VÆue
;

116 
uöt8
 
	miC⁄figuøti⁄
;

117 
uöt8
 
	mbmAâribuãs
;

118 
uöt8
 
	mbMaxPowî
;

119 } 
	tUSB_CONFIGURATION_DESCRIPTOR
;

123 
uöt8
 
	mbLígth
;

124 
uöt8
 
	mbDes¸ùt‹Ty≥
;

125 
uöt8
 
	mbI¡îÁ˚Numbî
;

126 
uöt8
 
	mbA…î«ãSëtög
;

127 
uöt8
 
	mbNumEndpoöts
;

128 
uöt8
 
	mbI¡îÁ˚Cœss
;

129 
uöt8
 
	mbI¡îÁ˚SubCœss
;

130 
uöt8
 
	mbI¡îÁ˚PrŸocﬁ
;

131 
uöt8
 
	miI¡îÁ˚
;

132 } 
	tUSB_INTERFACE_DESCRIPTOR
;

136 
uöt8
 
	mbLígth
;

137 
uöt8
 
	mbDes¸ùt‹Ty≥
;

138 
uöt8
 
	mbEndpoötAddªss
;

139 
uöt8
 
	mbmAâribuãs
;

140 
uöt16
 
	mwMaxPackëSize
;

141 
uöt8
 
	mbI¡îvÆ
;

142 } 
	tUSB_ENDPOINT_DESCRIPTOR
;

146 
uöt8
 
	mbLígth
;

147 
uöt8
 
	mbDes¸ùt‹Ty≥
;

148 
uöt16
 
	mpSåög
[1];

149 } 
	tUSB_STRING_DESCRIPTOR
;

153 
uöt8
 
	mbLígth
;

154 
uöt8
 
	mbDes¸ùt‹Ty≥
;

155 
uöt16
 
	mbscHID
;

156 
uöt8
 
	mbCou¡ryCode
;

157 
uöt8
 
	mbNumDes¸ùt‹s
;

158 
uöt8
 
	mbRDes¸ùt‹Ty≥
;

159 
uöt16
 
	mwDes¸ùt‹Lígth
;

160 } 
	tUSB_HID_DESCRIPTOR
;

167 
uöt8
 
	mvÆueMsb
;

168 
uöt8
 
	mvÆueLsb
;

169 
uöt8
 
	mödexMsb
;

170 
uöt8
 
	mödexLsb
;

171 
uöt8
 
__code
 *
	mpDescSèπ
;

172 
uöt16
 
	mÀngth
;

173 } 
	tDESC_LUT_INFO
;

177 
USB_INTERFACE_DESCRIPTOR
 
__code
 *
	mpI¡îÁ˚
;

178 
uöt8
 
	möMask
;

179 
uöt8
 
	moutMask
;

180 } 
	tDBLBUF_LUT_INFO
;

186 
uöt16
 
	mevítMask
;

187 
uöt8
 
	möSu•íd
;

188 
uöt16
 
	múqMask
;

189 } 
	tUSBIRQ_DATA
;

194 c⁄° 
uöt8
 
__code
 *
	mpDesc
;

195 } 
	tUSBDP_DATA
;

	@Components/hal/target/CC2530USB/usb/library/usb_interrupt.h

9 #i‚de‡
USBINTERRUPT_H


10 
	#USBINTERRUPT_H


	)

76 
	~"usb_‰amew‹k_°ru˘s.h
"

78 #ifde‡
EXTERN


79 #unde‡
EXTERN


81 #ifde‡
USBINTERRUPT_C


82 
	#EXTERN


83 #ñ£

	)

84 
	#EXTERN
 

86 

	)

95 #ifde‡
USBIRQ_DATA_ADDR


96 
EXTERN
 
__no_öô
 
__d©a
 
USBIRQ_DATA
 
usbúqD©a
 @ 
USBIRQ_DATA_ADDR
;

98 
EXTERN
 
USBIRQ_DATA
 
__d©a
 
	gusbúqD©a
;

109 
	#USBIRQ_EVENT_SUSPEND
 0x0001

	)

111 
	#USBIRQ_EVENT_RESUME
 0x0002

	)

113 
	#USBIRQ_EVENT_RESET
 0x0004

	)

115 
	#USBIRQ_EVENT_START_OF_FRAME
 0x0008

	)

117 
	#USBIRQ_EVENT_SETUP
 0x0010

	)

119 
	#USBIRQ_EVENT_EP1IN
 0x0020

	)

121 
	#USBIRQ_EVENT_EP2IN
 0x0040

	)

123 
	#USBIRQ_EVENT_EP3IN
 0x0080

	)

125 
	#USBIRQ_EVENT_EP4IN
 0x0100

	)

127 
	#USBIRQ_EVENT_EP5IN
 0x0200

	)

129 
	#USBIRQ_EVENT_EP1OUT
 0x0400

	)

131 
	#USBIRQ_EVENT_EP2OUT
 0x0800

	)

133 
	#USBIRQ_EVENT_EP3OUT
 0x1000

	)

135 
	#USBIRQ_EVENT_EP4OUT
 0x2000

	)

137 
	#USBIRQ_EVENT_EP5OUT
 0x4000

	)

147 
	#USBIRQ_CLEAR_EVENTS
(
mask
Ë(
usbúqD©a
.
evítMask
 &~(mask))

	)

149 
	#USBIRQ_GET_EVENT_MASK
(Ë(
usbúqD©a
.
evítMask
)

	)

159 
usbúqHookPro˚ssEvíts
();

167 
usbúqInô
(
uöt16
 
úqMask
);

168 #i‡
deföed
 
HAL_SB_BOOT_CODE


169 
usbúqH™dÀr
();

171 
__öãºu±
 
usbúqH™dÀr
();

	@Components/hal/target/CC2530USB/usb/library/usb_reg.h

9 #i‚de‡
USBREG_H


10 
	#USBREG_H


	)

14 
	#USBADDR_UPDATE
 0x80

	)

15 
	#USBADDR_USBADDR
 0x7F

	)

18 
	#USBPOW_ISO_WAIT_SOF
 0x80

	)

19 
	#USBPOW_RST
 0x08

	)

20 
	#USBPOW_RESUME
 0x04

	)

21 
	#USBPOW_SUSPEND
 0x02

	)

22 
	#USBPOW_SUSPEND_EN
 0x01

	)

25 
	#USBIIF_INEP5IF
 0x20

	)

26 
	#USBIIF_INEP4IF
 0x10

	)

27 
	#USBIIF_INEP3IF
 0x08

	)

28 
	#USBIIF_INEP2IF
 0x04

	)

29 
	#USBIIF_INEP1IF
 0x02

	)

30 
	#USBIIF_EP0IF
 0x01

	)

33 
	#USBOIF_OUTEP5IF
 0x20

	)

34 
	#USBOIF_OUTEP4IF
 0x10

	)

35 
	#USBOIF_OUTEP3IF
 0x08

	)

36 
	#USBOIF_OUTEP2IF
 0x04

	)

37 
	#USBOIF_OUTEP1IF
 0x02

	)

40 
	#USBCIF_SOFIF
 0x08

	)

41 
	#USBCIF_RSTIF
 0x04

	)

42 
	#USBCIF_RESUMEIF
 0x02

	)

43 
	#USBCIF_SUSPENDIF
 0x01

	)

46 
	#USBIIE_INEP5IE
 0x20

	)

47 
	#USBIIE_INEP4IE
 0x10

	)

48 
	#USBIIE_INEP3IE
 0x08

	)

49 
	#USBIIE_INEP2IE
 0x04

	)

50 
	#USBIIE_INEP1IE
 0x02

	)

51 
	#USBIIE_EP0IE
 0x01

	)

54 
	#USBOIE_OUTEP5IE
 0x20

	)

55 
	#USBOIE_OUTEP4IE
 0x10

	)

56 
	#USBOIE_OUTEP3IE
 0x08

	)

57 
	#USBOIE_OUTEP2IE
 0x04

	)

58 
	#USBOIE_OUTEP1IE
 0x02

	)

61 
	#USBCIE_SOFIE
 0x08

	)

62 
	#USBCIE_RSTIE
 0x04

	)

63 
	#USBCIE_RESUMEIE
 0x02

	)

64 
	#USBCIE_SUSPENDIE
 0x01

	)

67 
	#USBCS0_CLR_SETUP_END
 0x80

	)

68 
	#USBCS0_CLR_OUTPKT_RDY
 0x40

	)

69 
	#USBCS0_SEND_STALL
 0x20

	)

70 
	#USBCS0_SETUP_END
 0x10

	)

71 
	#USBCS0_DATA_END
 0x08

	)

72 
	#USBCS0_SENT_STALL
 0x04

	)

73 
	#USBCS0_INPKT_RDY
 0x02

	)

74 
	#USBCS0_OUTPKT_RDY
 0x01

	)

77 
	#USBCSIL_CLR_DATA_TOG
 0x40

	)

78 
	#USBCSIL_SENT_STALL
 0x20

	)

79 
	#USBCSIL_SEND_STALL
 0x10

	)

80 
	#USBCSIL_FLUSH_PACKET
 0x08

	)

81 
	#USBCSIL_UNDERRUN
 0x04

	)

82 
	#USBCSIL_PKT_PRESENT
 0x02

	)

83 
	#USBCSIL_INPKT_RDY
 0x01

	)

86 
	#USBCSIH_AUTOSET
 0x80

	)

87 
	#USBCSIH_ISO
 0x40

	)

88 
	#USBCSIH_FORCE_DATA_TOG
 0x08

	)

89 
	#USBCSIH_IN_DBL_BUF
 0x01

	)

92 
	#USBCSOL_CLR_DATA_TOG
 0x80

	)

93 
	#USBCSOL_SENT_STALL
 0x40

	)

94 
	#USBCSOL_SEND_STALL
 0x20

	)

95 
	#USBCSOL_FLUSH_PACKET
 0x10

	)

96 
	#USBCSOL_DATA_ERROR
 0x08

	)

97 
	#USBCSOL_OVERRUN
 0x04

	)

98 
	#USBCSOL_FIFO_FULL
 0x02

	)

99 
	#USBCSOL_OUTPKT_RDY
 0x01

	)

102 
	#USBCSOH_AUTOCLEAR
 0x80

	)

103 
	#USBCSOH_ISO
 0x40

	)

104 
	#USBCSOH_OUT_DBL_BUF
 0x01

	)

106 
	#SLEEP_USB_EN
 0x80

	)

	@Components/hal/target/CC2530USB/usb/library/usb_standard_requests.c

11 
	~"usb_fúmw¨e_libøry_hódîs.h
"

12 
	~"hÆ_ty≥s.h
"

13 
	~"hÆ_bﬂrd.h
"

37 
	$usb§GëSètus
()

39 
uöt8
 
ídpoöt
;

40 
uöt16
 
__xd©a
 
°©us
;

43 i‡(
usbSëupHódî
.
vÆue
 || 
	`HI_UINT16
(usbSëupHódî.
ödex
Ë|| (usbSëupHódî.
Àngth
 != 2)) {

44 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

48 
usbSëupHódî
.
ªque°Ty≥
) {

53 
RT_IN_DEVICE
:

56 i‡(
	`LO_UINT16
(
usbSëupHódî
.
ödex
)) {

57 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

63 
°©us
 = 
usbfwD©a
.
£lfPowîed
 ? 0x0001 : 0x0000;

66 i‡(
usbfwD©a
.
ªmŸeWakeup
Ë
°©us
 |= 0x0002;

72 
RT_IN_INTERFACE
:

75 i‡(
usbfwD©a
.
usbSèã
 !
DEV_CONFIGURED
) {

76 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

78 
°©us
 = 0x0000;

84 
RT_IN_ENDPOINT
:

85 
ídpoöt
 = 
	`LO_UINT16
(
usbSëupHódî
.
ödex
) & 0x7F;

88 i‡((
usbfwD©a
.
usbSèã
 !
DEV_CONFIGURED
Ë|| (
ídpoöt
 > 5)) {

89 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

95 i‡(
	`LO_UINT16
(
usbSëupHódî
.
ödex
) & 0x80) {

96 
°©us
 = (
usbfwD©a
.
pEpInSètus
[
ídpoöt
 - 1] =
EP_HALT
) ? 0x0001 : 0x0000;

100 
°©us
 = (
usbfwD©a
.
pEpOutSètus
[
ídpoöt
 - 1] =
EP_HALT
) ? 0x0001 : 0x0000;

106 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

110 i‡(
usbfwD©a
.
ï0Sètus
 !
EP_STALL
) {

112 
usbSëupD©a
.
pBuf„r
 = (
uöt8
 
__gíîic
 *)&
°©us
;

113 
usbSëupD©a
.
byãsLe·
 = 2;

114 
usbfwD©a
.
ï0Sètus
 = 
EP_TX
;

117 
	}
}

133 
uöt8
 
	$Ch™geFótuª
(
uöt8
 
£t
)

135 
uöt8
 
ídpoöt
;

138 i‡(
usbSëupHódî
.
Àngth
 || (
usbfwD©a
.
usbSèã
 !
DEV_CONFIGURED
Ë&& (usbSëupHódî.
ödex
 != 0)) {

139 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

143 
usbSëupHódî
.
ªque°Ty≥
 & 
RT_MASK_RECIP
) {

146 
RT_RECIP_DEV
:

149 i‡(
	`LO_UINT16
(
usbSëupHódî
.
vÆue
Ë!
DEVICE_REMOTE_WAKEUP
) {

150  
FALSE
;

152 
usbfwD©a
.
ªmŸeWakeup
 = 
£t
;

153 
	`usb§HookPro˚ssEvít
(
£t
 ? 
USBSR_EVENT_REMOTE_WAKEUP_ENABLED
 : 
USBSR_EVENT_REMOTE_WAKEUP_DISABLED
, 0);

158 
RT_RECIP_IF
:

159  
FALSE
;

162 
RT_RECIP_EP
:

163 
ídpoöt
 = 
	`LO_UINT16
(
usbSëupHódî
.
ödex
) & 0x7F;

166 i‡(
	`LO_UINT16
(
usbSëupHódî
.
vÆue
Ë!
ENDPOINT_HALT
) {

167  
FALSE
;

168 } i‡(
ídpoöt
 > 5) {

169 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

171 
	`USBFW_SELECT_ENDPOINT
(
ídpoöt
);

174 i‡(
	`LO_UINT16
(
usbSëupHódî
.
ödex
) & 0x80) {

175 
USBCSIL
 = 
£t
 ? 
USBCSIL_SEND_STALL
 : 
USBCSIL_CLR_DATA_TOG
;

176 
usbfwD©a
.
pEpInSètus
[
ídpoöt
 - 1] = 
£t
 ? 
EP_HALT
 : 
EP_IDLE
;

177 
	`usb§HookPro˚ssEvít
(
£t
 ? 
USBSR_EVENT_EPIN_STALL_SET
 : 
USBSR_EVENT_EPIN_STALL_CLEARED
, 
ídpoöt
);

181 
USBCSOL
 = 
£t
 ? 
USBCSOL_SEND_STALL
 : 
USBCSOL_CLR_DATA_TOG
;

182 
usbfwD©a
.
pEpOutSètus
[
ídpoöt
 - 1] = 
£t
 ? 
EP_HALT
 : 
EP_IDLE
;

183 
	`usb§HookPro˚ssEvít
(
£t
 ? 
USBSR_EVENT_EPOUT_STALL_SET
 : 
USBSR_EVENT_EPOUT_STALL_CLEARED
, 
ídpoöt
);

185 
	`USBFW_SELECT_ENDPOINT
(0);

190 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

194  
TRUE
;

195 
	}
}

214 
	$usb§CÀ¨Fótuª
()

216 i‡(!
	`Ch™geFótuª
(
FALSE
)) {

217 
	`usb§HookCÀ¨Fótuª
();

219 
	}
}

238 
	$usb§SëFótuª
()

240 i‡(!
	`Ch™geFótuª
(
TRUE
)) {

241 
	`usb§HookSëFótuª
();

243 
	}
}

262 
	$usb§SëAddªss
()

266 i‡(
usbSëupHódî
.
ödex
 || usbSëupHódî.
Àngth
 || 
	`HI_UINT16
(usbSëupHódî.
vÆue
Ë|| (
	`LO_UINT16
(usbSetupHeader.value) & 0x80)) {

267 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

271 
USBADDR
 = 
	`LO_UINT16
(
usbSëupHódî
.
vÆue
);

272 i‡(
	`LO_UINT16
(
usbSëupHódî
.
vÆue
) != 0) {

273 i‡(
usbfwD©a
.
usbSèã
 =
DEV_DEFAULT
ËusbfwD©a.usbSèã = 
DEV_ADDRESS
;

275 i‡(
usbfwD©a
.
usbSèã
 =
DEV_ADDRESS
ËusbfwD©a.usbSèã = 
DEV_DEFAULT
;

279 
	}
}

305 
	$usb§GëDes¸ùt‹
()

307 
uöt8
 
n
;

310 
	`HI_UINT16
(
usbSëupHódî
.
vÆue
)) {

313 
DESC_TYPE_DEVICE
:

314 
usbSëupD©a
.
pBuf„r
 = (
uöt8
 
__code
*Ë
	`usbdpGëDevi˚Desc
();

315 
usbSëupD©a
.
byãsLe·
 = usbSëupD©a.
pBuf„r
[
DESC_LENGTH_IDX
];

319 
DESC_TYPE_CONFIG
:

320 
usbSëupD©a
.
pBuf„r
 = (
uöt8
 
__code
*Ë
	`usbdpGëC⁄figuøti⁄Desc
(0, 
	`LO_UINT16
(
usbSëupHódî
.
vÆue
));

321 
usbSëupD©a
.
byãsLe·
 = usbSëupD©a.
pBuf„r
[
DESC_CONFIG_LENGTH_LSB_IDX
] +

322 
usbSëupD©a
.
pBuf„r
[
DESC_CONFIG_LENGTH_MSB_IDX
] * 256;

326 
DESC_TYPE_STRING
:

328 
usbSëupD©a
.
pBuf„r
 = (
uöt8
 *)
	`usbdpGëSåögDesc
(
	`LO_UINT16
(
usbSëupHódî
.
vÆue
));

329 
usbSëupD©a
.
byãsLe·
 = usbSëupD©a.
pBuf„r
[
DESC_LENGTH_IDX
];

335 
usbSëupD©a
.
pBuf„r
 = 
NULL
;

336 
n
 = 0;Ç < ((
uöt16
)
usbDes¸ùt‹M¨kî
.
pUsbDescLutEnd
 - (uöt16)usbDes¸ùt‹M¨kî.
pUsbDescLut
Ë/ (
DESC_LUT_INFO
);Ç++) {

337 i‡((
usbDes¸ùt‹M¨kî
.
pUsbDescLut
[
n
].
vÆueMsb
 =
	`HI_UINT16
(
usbSëupHódî
.
vÆue
))

338 && (
usbDes¸ùt‹M¨kî
.
pUsbDescLut
[
n
].
vÆueLsb
 =
	`LO_UINT16
(
usbSëupHódî
.
vÆue
))

339 && (
usbDes¸ùt‹M¨kî
.
pUsbDescLut
[
n
].
ödexMsb
 =
	`HI_UINT16
(
usbSëupHódî
.
ödex
))

340 && (
usbDes¸ùt‹M¨kî
.
pUsbDescLut
[
n
].
ödexLsb
 =
	`LO_UINT16
(
usbSëupHódî
.
ödex
)) )

342 
usbSëupD©a
.
pBuf„r
 = 
usbDes¸ùt‹M¨kî
.
pUsbDescLut
[
n
].
pDescSèπ
;

343 
usbSëupD©a
.
byãsLe·
 = 
usbDes¸ùt‹M¨kî
.
pUsbDescLut
[
n
].
Àngth
;

349 i‡(
usbSëupD©a
.
pBuf„r
 =
NULL
Ë
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

351 i‡(
usbfwD©a
.
ï0Sètus
 !
EP_STALL
) {

355 i‡(
usbSëupD©a
.
byãsLe·
 > 
usbSëupHódî
.
Àngth
) {

356 
usbSëupD©a
.
byãsLe·
 = 
usbSëupHódî
.
Àngth
;

359 
usbfwD©a
.
ï0Sètus
 = 
EP_TX
;

362 
	}
}

376 
	$C⁄figuªEndpoöts
(
USB_INTERFACE_DESCRIPTOR
 
__code
 *
pI¡îÁ˚
)

378 
uöt8
 
n
;

379 
uöt16
 
maxpRegVÆue
;

380 
uöt8
 
csRegVÆue
;

381 
uöt8
 
ídpoöt
;

382 
USB_ENDPOINT_DESCRIPTOR
 
__code
 *
pEndpoöt
;

383 
DBLBUF_LUT_INFO
 
__code
 *
pUsbDblbufLutInfo
;

386 i‡(
pI¡îÁ˚
->
bNumEndpoöts
) {

387 
pUsbDblbufLutInfo
 = (
DBLBUF_LUT_INFO
 
__code
*Ë
usbDes¸ùt‹M¨kî
.
pUsbDblbufLut
;

388 
pUsbDblbufLutInfo
->
pI¡îÁ˚
 !=ÖInterface) {

389 
pUsbDblbufLutInfo
++;

394 
n
 = 0;Ç < 
pI¡îÁ˚
->
bNumEndpoöts
;Ç++) {

395 i‡(
pEndpoöt
 = 
	`usbdpFödNext
(
DESC_TYPE_ENDPOINT
, 0)) {

398 
ídpoöt
 = 
pEndpoöt
->
bEndpoötAddªss
 & 0x0F;

399 
	`USBFW_SELECT_ENDPOINT
(
ídpoöt
);

401 
csRegVÆue
 = 0x00;

402 
maxpRegVÆue
 = (
pEndpoöt
->
wMaxPackëSize
 + 7) >> 3;

405 i‡(
pEndpoöt
->
bEndpoötAddªss
 & 0x80) {

408 
USBCSIL
 = 
USBCSIL_CLR_DATA_TOG
 | 
USBCSIL_FLUSH_PACKET
;

409 
USBCSIL
 = 
USBCSIL_FLUSH_PACKET
;

412 i‡((
pEndpoöt
->
bmAâribuãs
 & 
EP_ATTR_TYPE_BM
Ë=
EP_ATTR_ISO
Ë
csRegVÆue
 |
USBCSIH_ISO
;

413 i‡(
pUsbDblbufLutInfo
->
öMask
 & (1 << 
ídpoöt
)Ë
csRegVÆue
 |
USBCSIH_IN_DBL_BUF
;

414 
USBCSIH
 = 
csRegVÆue
;

417 
USBMAXI
 = 
maxpRegVÆue
;

420 
usbfwD©a
.
pEpInSètus
[
ídpoöt
 - 1] = 
EP_IDLE
;

426 
USBCSOL
 = 
USBCSOL_CLR_DATA_TOG
 | 
USBCSOL_FLUSH_PACKET
;

427 
USBCSOL
 = 
USBCSOL_FLUSH_PACKET
;

430 i‡((
pEndpoöt
->
bmAâribuãs
 & 
EP_ATTR_TYPE_BM
Ë=
EP_ATTR_ISO
Ë
csRegVÆue
 |
USBCSOH_ISO
;

431 i‡(
pUsbDblbufLutInfo
->
outMask
 & (1 << 
ídpoöt
)Ë
csRegVÆue
 |
USBCSOH_OUT_DBL_BUF
;

432 
USBCSOH
 = 
csRegVÆue
;

435 
USBMAXO
 = 
maxpRegVÆue
;

438 
usbfwD©a
.
pEpOutSètus
[
ídpoöt
 - 1] = 
EP_IDLE
;

440 
	`USBFW_SELECT_ENDPOINT
(0);

443 
	}
}

461 
	$usb§GëC⁄figuøti⁄
()

465 i‡(
usbSëupHódî
.
vÆue
 || usbSëupHódî.
ödex
 || (usbSëupHódî.
Àngth
 != 1)) {

466 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

470 
usbSëupD©a
.
pBuf„r
 = &
usbfwD©a
.
c⁄figuøti⁄VÆue
;

471 
usbSëupD©a
.
byãsLe·
 = 1;

472 
usbfwD©a
.
ï0Sètus
 = 
EP_TX
;

475 
	}
}

494 
	$usb§SëC⁄figuøti⁄
()

496 
uöt8
 
n
;

497 
USB_CONFIGURATION_DESCRIPTOR
 
__code
 *
pC⁄figuøti⁄
;

498 
USB_INTERFACE_DESCRIPTOR
 
__code
 *
pI¡îÁ˚
;

501 i‡((
usbfwD©a
.
usbSèã
 =
DEV_DEFAULT
Ë|| 
usbSëupHódî
.
ödex
 || usbSëupHódî.
Àngth
 || 
	`HI_UINT16
(usbSëupHódî.
vÆue
)) {

502 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

506 
	`usb§HookPro˚ssEvít
(
USBSR_EVENT_CONFIGURATION_CHANGING
, 0);

509 i‡(
	`LO_UINT16
(
usbSëupHódî
.
vÆue
)) {

512 
pC⁄figuøti⁄
 = 
	`usbdpGëC⁄figuøti⁄Desc
(
	`LO_UINT16
(
usbSëupHódî
.
vÆue
), 0);

515 i‡(
pC⁄figuøti⁄
) {

516 
usbfwD©a
.
usbSèã
 = 
DEV_CONFIGURED
;

517 
usbfwD©a
.
c⁄figuøti⁄VÆue
 = 
	`LO_UINT16
(
usbSëupHódî
.
vÆue
);

520 
n
 = 0;Ç < 
pC⁄figuøti⁄
->
bNumI¡îÁ˚s
;Ç++) {

521 
usbfwD©a
.
pA…î«ãSëtög
[
n
] = 0x00;

525 
pI¡îÁ˚
 = 
	`usbdpFödNext
(
DESC_TYPE_INTERFACE
, 0);

526 } 
pI¡îÁ˚
->
bA…î«ãSëtög
 !
usbfwD©a
.
pA…î«ãSëtög
[
n
]);

529 
	`C⁄figuªEndpoöts
(
pI¡îÁ˚
);

534 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

539 
usbfwD©a
.
c⁄figuøti⁄VÆue
 = 
	`LO_UINT16
(
usbSëupHódî
.
vÆue
);

540 
usbfwD©a
.
usbSèã
 = 
DEV_ADDRESS
;

541 
	`usbfwSëAŒEpSètus
(
EP_HALT
);

543 
	`usb§HookPro˚ssEvít
(
USBSR_EVENT_CONFIGURATION_CHANGED
, 0);

546 
	}
}

565 
	$usb§GëI¡îÁ˚
()

569 i‡((
usbfwD©a
.
usbSèã
 !
DEV_CONFIGURED
Ë|| (
usbSëupHódî
.
ªque°Ty≥
 !
RT_IN_INTERFACE
Ë|| usbSëupHódî.
vÆue
 || (usbSëupHódî.
Àngth
 != 1)) {

570 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

574 
usbSëupD©a
.
pBuf„r
 = &
usbfwD©a
.
pA…î«ãSëtög
[
usbSëupHódî
.
ödex
];

575 
usbSëupD©a
.
byãsLe·
 = 1;

576 
usbfwD©a
.
ï0Sètus
 = 
EP_TX
;

579 
	}
}

598 
	$usb§SëI¡îÁ˚
()

600 
USB_INTERFACE_DESCRIPTOR
 
__code
 *
pI¡îÁ˚
;

603 i‡((
usbfwD©a
.
usbSèã
 !
DEV_CONFIGURED
Ë|| (
usbSëupHódî
.
ªque°Ty≥
 !
RT_OUT_INTERFACE
Ë|| usbSëupHódî.
Àngth
) {

604 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

608 i‡(
pI¡îÁ˚
 = 
	`usbdpGëI¡îÁ˚Desc
(
usbfwD©a
.
c⁄figuøti⁄VÆue
, 
usbSëupHódî
.
ödex
, usbSëupHódî.
vÆue
)) {

609 
	`usb§HookPro˚ssEvít
(
USBSR_EVENT_INTERFACE_CHANGING
, 
usbSëupHódî
.
ödex
);

610 
usbfwD©a
.
pA…î«ãSëtög
[
usbSëupHódî
.
ödex
] = usbSëupHódî.
vÆue
;

613 
	`C⁄figuªEndpoöts
(
pI¡îÁ˚
);

614 
	`usb§HookPro˚ssEvít
(
USBSR_EVENT_INTERFACE_CHANGED
, 
usbSëupHódî
.
ödex
);

618 
usbfwD©a
.
ï0Sètus
 = 
EP_STALL
;

622 
	}
}

	@Components/hal/target/CC2530USB/usb/library/usb_standard_requests.h

9 #i‚de‡
USBSTANDARDREQUESTS_H


10 
	#USBSTANDARDREQUESTS_H


	)

61 
	#GET_STATUS
 0x00

	)

63 
	#CLEAR_FEATURE
 0x01

	)

65 
	#SET_FEATURE
 0x03

	)

67 
	#SET_ADDRESS
 0x05

	)

69 
	#GET_DESCRIPTOR
 0x06

	)

71 
	#SET_DESCRIPTOR
 0x07

	)

73 
	#GET_CONFIGURATION
 0x08

	)

75 
	#SET_CONFIGURATION
 0x09

	)

77 
	#GET_INTERFACE
 0x0A

	)

79 
	#SET_INTERFACE
 0x0B

	)

81 
	#SYNCH_FRAME
 0x0C

	)

91 
	#ENDPOINT_HALT
 0x00

	)

93 
	#DEVICE_REMOTE_WAKEUP
 0x01

	)

103 
	#USBSR_EVENT_CONFIGURATION_CHANGING
 0x01

	)

105 
	#USBSR_EVENT_CONFIGURATION_CHANGED
 0x02

	)

107 
	#USBSR_EVENT_INTERFACE_CHANGING
 0x03

	)

109 
	#USBSR_EVENT_INTERFACE_CHANGED
 0x04

	)

111 
	#USBSR_EVENT_REMOTE_WAKEUP_ENABLED
 0x05

	)

113 
	#USBSR_EVENT_REMOTE_WAKEUP_DISABLED
 0x06

	)

115 
	#USBSR_EVENT_EPIN_STALL_CLEARED
 0x07

	)

117 
	#USBSR_EVENT_EPIN_STALL_SET
 0x08

	)

119 
	#USBSR_EVENT_EPOUT_STALL_CLEARED
 0x09

	)

121 
	#USBSR_EVENT_EPOUT_STALL_SET
 0x0A

	)

133 
usb§HookSëDes¸ùt‹
();

135 
usb§HookSynchFøme
();

137 
usb§HookCÀ¨Fótuª
();

139 
usb§HookSëFótuª
();

141 
usb§HookModifyGëSètus
(
uöt8
 
ªcùõ¡
, uöt8 
ödex
, 
uöt16
 
__xd©a
 *
pSètus
);

143 
usb§HookPro˚ssEvít
(
uöt8
 
evít
, uöt8 
ödex
);

151 
usb§GëSètus
();

152 
usb§CÀ¨Fótuª
();

153 
usb§SëFótuª
();

154 
usb§SëAddªss
();

155 
usb§GëDes¸ùt‹
();

156 
usb§GëC⁄figuøti⁄
();

157 
usb§SëC⁄figuøti⁄
();

158 
usb§GëI¡îÁ˚
();

159 
usb§SëI¡îÁ˚
();

	@Components/hal/target/CC2530USB/usb/library/usb_suspend.h

9 #i‚de‡
USBSUSPEND_H


10 
	#USBSUSPEND_H


	)

90 
	~"usb_fúmw¨e_libøry_hódîs.h
"

92 (*
	tVFPTR
)();

96 
__xd©a
 
VFPTR
 
pFnSu•ídE¡îHook
;

97 
__xd©a
 
VFPTR
 
pFnSu•ídExôHook
;

101 
	`usbsu•E¡î
();

102 
uöt8
 
	`usbsu•DoRemŸeWakeup
();

103 
	`usbsu•St›Pm1
();

	@Components/hal/target/CC2530ZNP/_hal_uart_dma.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_as£π.h
"

46 
	~"hÆ_bﬂrd.h
"

47 
	~"hÆ_defs.h
"

48 
	~"hÆ_dma.h
"

49 
	~"hÆ_mcu.h
"

50 
	~"hÆ_u¨t.h
"

51 #i‡
deföed
 
MT_TASK


52 
	~"mt_u¨t.h
"

54 
	~"oßl.h
"

55 #i‡
deföed
 
POWER_SAVING


56 
	~"OSAL_PwrMgr.h
"

58 
	~"ZComDef.h
"

59 
	~"ZGlobÆs.h
"

60 
	~"ZMac.h
"

61 
	~"z≈_≠p.h
"

68 
	#HAL_UART_ASSERT
(
ex¥
)

	)

70 #i‡
deföed
 
HAL_BOARD_CC2430EB
 || deföed 
HAL_BOARD_CC2430DB
 || deföed 
HAL_BOARD_CC2430BB


71 
	#HAL_UART_DMA_NEW_RX_BYTE
(
IDX
Ë(
DMA_PAD
 =
	`LO_UINT16
(
dmaCfg
.
rxBuf
[(IDX)]))

	)

72 
	#HAL_UART_DMA_GET_RX_BYTE
(
IDX
Ë(
	`HI_UINT16
(
dmaCfg
.
rxBuf
[(IDX)]))

	)

73 
	#HAL_UART_DMA_CLR_RX_BYTE
(
IDX
Ë(
dmaCfg
.
rxBuf
[(IDX)] = 
	`BUILD_UINT16
((
DMA_PAD
 ^ 0xFF), 0))

	)

75 
	#HAL_UART_DMA_NEW_RX_BYTE
(
IDX
Ë(
DMA_PAD
 =
	`HI_UINT16
(
dmaCfg
.
rxBuf
[(IDX)]))

	)

76 
	#HAL_UART_DMA_GET_RX_BYTE
(
IDX
Ë(
	`LO_UINT16
(
dmaCfg
.
rxBuf
[(IDX)]))

	)

77 
	#HAL_UART_DMA_CLR_RX_BYTE
(
IDX
Ë(
dmaCfg
.
rxBuf
[(IDX)] = 
	`BUILD_UINT16
(0, (
DMA_PAD
 ^ 0xFF)))

	)

85 
	#CSR_MODE
 0x80

	)

86 
	#CSR_RE
 0x40

	)

87 
	#CSR_SLAVE
 0x20

	)

88 
	#CSR_FE
 0x10

	)

89 
	#CSR_ERR
 0x08

	)

90 
	#CSR_RX_BYTE
 0x04

	)

91 
	#CSR_TX_BYTE
 0x02

	)

92 
	#CSR_ACTIVE
 0x01

	)

95 
	#UCR_FLUSH
 0x80

	)

96 
	#UCR_FLOW
 0x40

	)

97 
	#UCR_D9
 0x20

	)

98 
	#UCR_BIT9
 0x10

	)

99 
	#UCR_PARITY
 0x08

	)

100 
	#UCR_SPB
 0x04

	)

101 
	#UCR_STOP
 0x02

	)

102 
	#UCR_START
 0x01

	)

104 
	#UTX0IE
 0x04

	)

105 
	#UTX1IE
 0x08

	)

107 
	#P2DIR_PRIPO
 0xC0

	)

110 #unde‡
PxOUT


111 #unde‡
PxDIR


112 #unde‡
PxSEL


113 #unde‡
UxCSR


114 #unde‡
UxUCR


115 #unde‡
UxDBUF


116 #unde‡
UxBAUD


117 #unde‡
UxGCR


118 #unde‡
URXxIE


119 #unde‡
URXxIF


120 #unde‡
UTXxIE


121 #unde‡
UTXxIF


122 #unde‡
HAL_UART_PERCFG_BIT


123 #unde‡
HAL_UART_Px_RTS


124 #unde‡
HAL_UART_Px_CTS


125 #unde‡
HAL_UART_Px_RX_TX


126 #i‡(
HAL_UART_DMA
 == 1)

127 
	#PxOUT
 
P0


	)

128 
	#PxIN
 
P0


	)

129 
	#PxDIR
 
P0DIR


	)

130 
	#PxSEL
 
P0SEL


	)

131 
	#UxCSR
 
U0CSR


	)

132 
	#UxUCR
 
U0UCR


	)

133 
	#UxDBUF
 
U0DBUF


	)

134 
	#UxBAUD
 
U0BAUD


	)

135 
	#UxGCR
 
U0GCR


	)

136 
	#URXxIE
 
URX0IE


	)

137 
	#URXxIF
 
URX0IF


	)

138 
	#UTXxIE
 
UTX0IE


	)

139 
	#UTXxIF
 
UTX0IF


	)

141 
	#PxOUT
 
P1


	)

142 
	#PxIN
 
P1


	)

143 
	#PxDIR
 
P1DIR


	)

144 
	#PxSEL
 
P1SEL


	)

145 
	#UxCSR
 
U1CSR


	)

146 
	#UxUCR
 
U1UCR


	)

147 
	#UxDBUF
 
U1DBUF


	)

148 
	#UxBAUD
 
U1BAUD


	)

149 
	#UxGCR
 
U1GCR


	)

150 
	#URXxIE
 
URX1IE


	)

151 
	#URXxIF
 
URX1IF


	)

152 
	#UTXxIE
 
UTX1IE


	)

153 
	#UTXxIF
 
UTX1IF


	)

156 #i‡(
HAL_UART_DMA
 == 1)

157 
	#HAL_UART_PERCFG_BIT
 0x01

158 
	#HAL_UART_Px_RX_TX
 0x0C

159 
	#HAL_UART_Px_RTS
 0x20

160 
	#HAL_UART_Px_CTS
 0x10

161 #ñ£

	)

162 
	#HAL_UART_PERCFG_BIT
 0x02

163 
	#HAL_UART_Px_RTS
 0x20

164 
	#HAL_UART_Px_CTS
 0x10

165 
	#HAL_UART_Px_RX_TX
 0xC0

167 

	)

169 
	#HAL_UART_MSECS_TO_TICKS
 33

	)

171 #i‡
deföed
 
MT_TASK


172 
	#HAL_UART_DMA_TX_MAX
 
MT_UART_DEFAULT_MAX_TX_BUFF


	)

173 
	#HAL_UART_DMA_RX_MAX
 
MT_UART_DEFAULT_MAX_RX_BUFF


	)

174 
	#HAL_UART_DMA_HIGH
 
MT_UART_DEFAULT_THRESHOLD


	)

175 
	#HAL_UART_DMA_IDLE
 (
MT_UART_DEFAULT_IDLE_TIMEOUT
 * 
HAL_UART_MSECS_TO_TICKS
)

	)

177 #i‡!
deföed
 
HAL_UART_DMA_RX_MAX


178 
	#HAL_UART_DMA_RX_MAX
 256

	)

180 #i‡!
deföed
 
HAL_UART_DMA_TX_MAX


181 
	#HAL_UART_DMA_TX_MAX
 
HAL_UART_DMA_RX_MAX


	)

183 #i‡!
deföed
 
HAL_UART_DMA_HIGH


184 
	#HAL_UART_DMA_HIGH
 (
HAL_UART_DMA_RX_MAX
 / 2 - 16)

	)

186 #i‡!
deföed
 
HAL_UART_DMA_IDLE


187 
	#HAL_UART_DMA_IDLE
 (1 * 
HAL_UART_MSECS_TO_TICKS
)

	)

190 #i‡!
deföed
 
HAL_UART_DMA_FULL


191 
	#HAL_UART_DMA_FULL
 (
HAL_UART_DMA_RX_MAX
 - 16)

	)

194 #i‡
deföed
 
HAL_BOARD_CC2430EB
 || deföed 
HAL_BOARD_CC2430DB
 || deföed 
HAL_BOARD_CC2430BB


195 
	#HAL_DMA_U0DBUF
 0xDFC1

	)

196 
	#HAL_DMA_U1DBUF
 0xDFF9

	)

198 
	#HAL_DMA_U0DBUF
 0x70C1

	)

199 
	#HAL_DMA_U1DBUF
 0x70F9

	)

202 #i‡(
HAL_UART_DMA
 == 1)

203 
	#DMATRIG_RX
 
HAL_DMA_TRIG_URX0


	)

204 
	#DMATRIG_TX
 
HAL_DMA_TRIG_UTX0


	)

205 
	#DMA_UDBUF
 
HAL_DMA_U0DBUF


	)

206 
	#DMA_PAD
 
U0BAUD


	)

208 
	#DMATRIG_RX
 
HAL_DMA_TRIG_URX1


	)

209 
	#DMATRIG_TX
 
HAL_DMA_TRIG_UTX1


	)

210 
	#DMA_UDBUF
 
HAL_DMA_U1DBUF


	)

211 
	#DMA_PAD
 
U1BAUD


	)

218 #i‡
HAL_UART_DMA_RX_MAX
 <= 256

219 
uöt8
 
	trxIdx_t
;

221 
uöt16
 
	trxIdx_t
;

224 #i‡
HAL_UART_DMA_TX_MAX
 <= 256

225 
uöt8
 
	ttxIdx_t
;

227 
uöt16
 
	ttxIdx_t
;

232 
uöt16
 
	mrxBuf
[
HAL_UART_DMA_RX_MAX
];

233 
rxIdx_t
 
	mrxHód
;

234 
rxIdx_t
 
	mrxTaû
;

235 
uöt8
 
	mrxTick
;

236 
uöt8
 
	mrxShdw
;

238 
uöt8
 
	mtxBuf
[2][
HAL_UART_DMA_TX_MAX
];

239 
txIdx_t
 
	mtxIdx
[2];

240 vﬁ©ûê
uöt8
 
	mtxSñ
;

241 
uöt8
 
	mtxMT
;

242 
uöt8
 
	mtxTick
;

247 vﬁ©ûê
uöt8
 
	mtxShdw
;

248 vﬁ©ûê
uöt8
 
	mtxShdwVÆid
;

249 
uöt8
 
	mtxDMAPídög
;

251 
hÆUARTCBack_t
 
	mu¨tCB
;

252 } 
	tu¨tDMACfg_t
;

262 
HÆUARTI§DMA
();

268 
u¨tDMACfg_t
 
	gdmaCfg
;

274 
rxIdx_t
 
födTaû
();

277 
HÆUARTInôDMA
();

278 
HÆUARTO≥nDMA
(
hÆUARTCfg_t
 *
c⁄fig
);

279 
uöt16
 
HÆUARTRódDMA
(
uöt8
 *
buf
, uöt16 
Àn
);

280 
uöt16
 
HÆUARTWrôeDMA
(
uöt8
 *
buf
, uöt16 
Àn
);

281 
HÆUARTPﬁlDMA
();

282 
uöt16
 
HÆUARTRxAvaûDMA
();

283 
HÆUARTSu•ídDMA
();

284 
HÆUARTResumeDMA
();

295 
rxIdx_t
 
	$födTaû
()

297 
rxIdx_t
 
idx
 = 
dmaCfg
.
rxHód
;

301 i‡(!
	`HAL_UART_DMA_NEW_RX_BYTE
(
idx
))

306 #i‡
HAL_UART_DMA_RX_MAX
 == 256

307 
idx
++;

309 i‡(++
idx
 >
HAL_UART_DMA_RX_MAX
)

311 
idx
 = 0;

314 } 
idx
 !
dmaCfg
.
rxHód
);

316  
idx
;

317 
	}
}

328 
	$HÆUARTInôDMA
()

330 
hÆDMADesc_t
 *
ch
;

332 
P2DIR
 &~
P2DIR_PRIPO
;

333 
P2DIR
 |
HAL_UART_PRIPO
;

335 #i‡(
HAL_UART_DMA
 == 1)

336 
PERCFG
 &~
HAL_UART_PERCFG_BIT
;

338 
PERCFG
 |
HAL_UART_PERCFG_BIT
;

340 
PxSEL
 |
HAL_UART_Px_RX_TX
;

341 
ADCCFG
 &~
HAL_UART_Px_RX_TX
;

342 
UxCSR
 = 
CSR_MODE
;

343 
UxUCR
 = 
UCR_FLUSH
;

346 
ch
 = 
	`HAL_DMA_GET_DESC1234
–
HAL_DMA_CH_TX
 );

349 
	`HAL_DMA_SET_DEST
–
ch
, 
DMA_UDBUF
 );

352 
	`HAL_DMA_SET_VLEN
–
ch
, 
HAL_DMA_VLEN_USE_LEN
 );

355 
	`HAL_DMA_SET_WORD_SIZE
–
ch
, 
HAL_DMA_WORDSIZE_BYTE
 );

358 
	`HAL_DMA_SET_TRIG_MODE
–
ch
, 
HAL_DMA_TMODE_SINGLE
 );

359 
	`HAL_DMA_SET_TRIG_SRC
–
ch
, 
DMATRIG_TX
 );

362 
	`HAL_DMA_SET_SRC_INC
–
ch
, 
HAL_DMA_SRCINC_1
 );

365 
	`HAL_DMA_SET_DST_INC
–
ch
, 
HAL_DMA_DSTINC_0
 );

368 
	`HAL_DMA_SET_IRQ
–
ch
, 
HAL_DMA_IRQMASK_ENABLE
 );

371 
	`HAL_DMA_SET_M8
–
ch
, 
HAL_DMA_M8_USE_8_BITS
 );

374 
	`HAL_DMA_SET_PRIORITY
–
ch
, 
HAL_DMA_PRI_HIGH
 );

377 
ch
 = 
	`HAL_DMA_GET_DESC1234
–
HAL_DMA_CH_RX
 );

380 
	`HAL_DMA_SET_SOURCE
–
ch
, 
DMA_UDBUF
 );

383 
	`HAL_DMA_SET_VLEN
–
ch
, 
HAL_DMA_VLEN_USE_LEN
 );

392 
	`HAL_DMA_SET_WORD_SIZE
–
ch
, 
HAL_DMA_WORDSIZE_WORD
 );

395 
	`HAL_DMA_SET_TRIG_MODE
–
ch
, 
HAL_DMA_TMODE_SINGLE_REPEATED
 );

396 
	`HAL_DMA_SET_TRIG_SRC
–
ch
, 
DMATRIG_RX
 );

399 
	`HAL_DMA_SET_SRC_INC
–
ch
, 
HAL_DMA_SRCINC_0
 );

402 
	`HAL_DMA_SET_DST_INC
–
ch
, 
HAL_DMA_DSTINC_1
 );

403 
	`HAL_DMA_SET_DEST
–
ch
, 
dmaCfg
.
rxBuf
 );

404 
	`HAL_DMA_SET_LEN
–
ch
, 
HAL_UART_DMA_RX_MAX
 );

407 
	`HAL_DMA_SET_IRQ
–
ch
, 
HAL_DMA_IRQMASK_DISABLE
 );

410 
	`HAL_DMA_SET_M8
–
ch
, 
HAL_DMA_M8_USE_8_BITS
 );

413 
	`HAL_DMA_SET_PRIORITY
–
ch
, 
HAL_DMA_PRI_HIGH
 );

414 
	}
}

425 
	$HÆUARTO≥nDMA
(
hÆUARTCfg_t
 *
c⁄fig
)

427 
dmaCfg
.
u¨tCB
 = 
c⁄fig
->
ˇŒBackFunc
;

429 
	`HAL_UART_ASSERT
((
c⁄fig
->
baudR©e
 =
HAL_UART_BR_9600
) ||

430 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_19200
) ||

431 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_38400
) ||

432 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
) ||

433 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
));

435 i‡(
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
 ||

436 
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
)

438 
UxBAUD
 = 216;

442 
UxBAUD
 = 59;

445 
c⁄fig
->
baudR©e
)

447 
HAL_UART_BR_9600
:

448 
UxGCR
 = 8;

449 
dmaCfg
.
txTick
 = 35;

452 
HAL_UART_BR_19200
:

453 
UxGCR
 = 9;

454 
dmaCfg
.
txTick
 = 18;

456 
HAL_UART_BR_38400
:

457 
UxGCR
 = 10;

458 
dmaCfg
.
txTick
 = 9;

460 
HAL_UART_BR_57600
:

461 
UxGCR
 = 10;

462 
dmaCfg
.
txTick
 = 6;

466 
UxGCR
 = 11;

467 
dmaCfg
.
txTick
 = 3;

472 i‡(
c⁄fig
->
ÊowC⁄åﬁ
)

474 
UxUCR
 = 
UCR_FLOW
 | 
UCR_STOP
;

475 
PxSEL
 |
HAL_UART_Px_CTS
;

478 
PxOUT
 &~
HAL_UART_Px_RTS
;

479 
PxDIR
 |
HAL_UART_Px_RTS
;

482 
P0IFG
 &~
HAL_UART_Px_CTS
;

483 
P0IEN
 &~
HAL_UART_Px_CTS
;

484 
P0IE
 = 1;

488 
UxUCR
 = 
UCR_STOP
;

491 
dmaCfg
.
rxBuf
[0] = *(vﬁ©ûê
uöt8
 *)
DMA_UDBUF
;

492 
	`HAL_DMA_CLEAR_IRQ
(
HAL_DMA_CH_RX
);

493 
	`HAL_DMA_ARM_CH
(
HAL_DMA_CH_RX
);

494 
	`oßl_mem£t
(
dmaCfg
.
rxBuf
, (
DMA_PAD
 ^ 0xFF), 
HAL_UART_DMA_RX_MAX
*2);

496 
UxCSR
 |
CSR_RE
;

499 
dmaCfg
.
txDMAPídög
 = 
FALSE
;

500 
dmaCfg
.
txShdwVÆid
 = 
FALSE
;

501 
	}
}

513 
uöt16
 
	$HÆUARTRódDMA
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

515 
uöt16
 
˙t
;

517 
˙t
 = 0; c¡ < 
Àn
; cnt++)

519 i‡(!
	`HAL_UART_DMA_NEW_RX_BYTE
(
dmaCfg
.
rxHód
))

523 *
buf
++ = 
	`HAL_UART_DMA_GET_RX_BYTE
(
dmaCfg
.
rxHód
);

524 
	`HAL_UART_DMA_CLR_RX_BYTE
(
dmaCfg
.
rxHód
);

525 #i‡
HAL_UART_DMA_RX_MAX
 == 256

526 (
dmaCfg
.
rxHód
)++;

528 i‡(++(
dmaCfg
.
rxHód
Ë>
HAL_UART_DMA_RX_MAX
)

530 
dmaCfg
.
rxHód
 = 0;

534 
PxOUT
 &~
HAL_UART_Px_RTS
;

536  
˙t
;

537 
	}
}

549 
uöt16
 
	$HÆUARTWrôeDMA
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

551 
uöt16
 
˙t
;

552 
hÆI¡Sèã_t
 
his
;

553 
uöt8
 
txSñ
;

554 
txIdx_t
 
txIdx
;

557 i‡((
Àn
 + 
dmaCfg
.
txIdx
[dmaCfg.
txSñ
]Ë> 
HAL_UART_DMA_TX_MAX
)

562 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

563 
txSñ
 = 
dmaCfg
.txSel;

564 
txIdx
 = 
dmaCfg
.txIdx[
txSñ
];

565 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

567 
˙t
 = 0; c¡ < 
Àn
; cnt++)

569 
dmaCfg
.
txBuf
[
txSñ
][
txIdx
++] = 
buf
[
˙t
];

572 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

573 i‡(
txSñ
 !
dmaCfg
.txSel)

575 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

576 
txSñ
 = 
dmaCfg
.txSel;

577 
txIdx
 = 
dmaCfg
.txIdx[
txSñ
];

579 
˙t
 = 0; c¡ < 
Àn
; cnt++)

581 
dmaCfg
.
txBuf
[
txSñ
][
txIdx
++] = 
buf
[
˙t
];

583 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

586 
dmaCfg
.
txIdx
[
txSñ
] =ÅxIdx;

588 i‡(
dmaCfg
.
txIdx
[(
txSñ
 ^ 1)] == 0)

591 
dmaCfg
.
txDMAPídög
 = 
TRUE
;

593 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

594  
˙t
;

595 
	}
}

606 
	$HÆUARTPﬁlDMA
()

608 
uöt16
 
˙t
 = 0;

609 
uöt8
 
evt
 = 0;

611 i‡(
	`HAL_UART_DMA_NEW_RX_BYTE
(
dmaCfg
.
rxHód
))

613 
rxIdx_t
 
èû
 = 
	`födTaû
();

616 i‡(
dmaCfg
.
rxTaû
 !
èû
)

618 
dmaCfg
.
rxTaû
 = 
èû
;

621 i‡(
dmaCfg
.
rxTick
 == 0)

623 
dmaCfg
.
rxShdw
 = 
ST0
;

625 
dmaCfg
.
rxTick
 = 
HAL_UART_DMA_IDLE
;

627 i‡(
dmaCfg
.
rxTick
)

630 
uöt8
 
de¸
 = 
ST0
 - 
dmaCfg
.
rxShdw
;

632 i‡(
dmaCfg
.
rxTick
 > 
de¸
)

634 
dmaCfg
.
rxTick
 -
de¸
;

635 
dmaCfg
.
rxShdw
 = 
ST0
;

639 
dmaCfg
.
rxTick
 = 0;

642 
˙t
 = 
	`HÆUARTRxAvaûDMA
();

646 
dmaCfg
.
rxTick
 = 0;

649 i‡(
˙t
 >
HAL_UART_DMA_FULL
)

651 
evt
 = 
HAL_UART_RX_FULL
;

653 i‡(
˙t
 >
HAL_UART_DMA_HIGH
)

655 
evt
 = 
HAL_UART_RX_ABOUT_FULL
;

656 
PxOUT
 |
HAL_UART_Px_RTS
;

658 i‡(
˙t
 && !
dmaCfg
.
rxTick
)

660 
evt
 = 
HAL_UART_RX_TIMEOUT
;

663 i‡(
dmaCfg
.
txMT
)

665 
dmaCfg
.
txMT
 = 
FALSE
;

666 
evt
 |
HAL_UART_TX_EMPTY
;

669 i‡(
dmaCfg
.
txShdwVÆid
)

671 
uöt8
 
de¸
 = 
ST0
;

672 
de¸
 -
dmaCfg
.
txShdw
;

673 i‡(
de¸
 > 
dmaCfg
.
txTick
)

678 
dmaCfg
.
txShdwVÆid
 = 
FALSE
;

682 i‡(
dmaCfg
.
txDMAPídög
 && !dmaCfg.
txShdwVÆid
)

686 
hÆDMADesc_t
 *
ch
 = 
	`HAL_DMA_GET_DESC1234
(
HAL_DMA_CH_TX
);

687 
hÆI¡Sèã_t
 
ötSèã
;

690 
dmaCfg
.
txDMAPídög
 = 
FALSE
;

692 
	`HAL_DMA_SET_SOURCE
(
ch
, 
dmaCfg
.
txBuf
[dmaCfg.
txSñ
]);

693 
	`HAL_DMA_SET_LEN
(
ch
, 
dmaCfg
.
txIdx
[dmaCfg.
txSñ
]);

694 
dmaCfg
.
txSñ
 ^= 1;

695 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

696 
	`HAL_DMA_ARM_CH
(
HAL_DMA_CH_TX
);

699 
	`asm
("NOP");

700 } !
	`HAL_DMA_CH_ARMED
(
HAL_DMA_CH_TX
));

701 
	`HAL_DMA_CLEAR_IRQ
(
HAL_DMA_CH_TX
);

702 
	`HAL_DMA_MAN_TRIGGER
(
HAL_DMA_CH_TX
);

703 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

707 
hÆI¡Sèã_t
 
his
;

709 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

710 i‡((
dmaCfg
.
txIdx
[dmaCfg.
txSñ
] !0Ë&& !
	`HAL_DMA_CH_ARMED
(
HAL_DMA_CH_TX
)

711 && !
	`HAL_DMA_CHECK_IRQ
(
HAL_DMA_CH_TX
))

713 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

714 
	`HÆUARTI§DMA
();

718 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

722 i‡(
evt
 && (
dmaCfg
.
u¨tCB
 !
NULL
))

724 
dmaCfg
.
	`u¨tCB
(
HAL_UART_DMA
-1, 
evt
);

727 #i‡
deföed
 
POWER_SAVING


733 
uöt8
 
z≈U¨tA˘iveShdw
;

736 i‡(
ZG_DEVICE_ENDDEVICE_TYPE
 && !(
UxCSR
 & 
CSR_ACTIVE
Ë&& (
PxIN
 & 
HAL_UART_Px_CTS
))

738 i‡(
z≈U¨tA˘iveShdw
)

740 
uöt8
 
rxOnIdÀ
;

741 ()
	`ZMacGëReq
(
ZMacRxOnIdÀ
, &
rxOnIdÀ
);

742 i‡(!
rxOnIdÀ
)

744 
z≈U¨tA˘iveShdw
 = 
FALSE
;

745 i‡(
ZSuc˚ss
 !
	`oßl_°¨t_timîEx
(
z≈TaskId
, 
ZNP_PWRMGR_CONSERVE_EVENT
,

746 
ZNP_PWRMGR_CONSERVE_DELAY
))

748 ()
	`oßl_£t_evít
(
z≈TaskId
, 
ZNP_PWRMGR_CONSERVE_EVENT
);

753 i‡(!
z≈U¨tA˘iveShdw
)

755 
z≈U¨tA˘iveShdw
 = 
TRUE
;

756 ()
	`oßl_°›_timîEx
(
z≈TaskId
, 
ZNP_PWRMGR_CONSERVE_EVENT
);

757 ()
	`oßl_˛ór_evít
(
z≈TaskId
, 
ZNP_PWRMGR_CONSERVE_EVENT
);

758 ()
	`oßl_pwrmgr_èsk_°©e
(
z≈TaskId
, 
PWRMGR_HOLD
);

761 
	}
}

772 
uöt16
 
	$HÆUARTRxAvaûDMA
()

774 
uöt16
 
˙t
 = 0;

776 i‡(
	`HAL_UART_DMA_NEW_RX_BYTE
(
dmaCfg
.
rxHód
))

778 
uöt16
 
idx
;

780 
idx
 = 0; idx < 
HAL_UART_DMA_RX_MAX
; idx++)

782 i‡(
	`HAL_UART_DMA_NEW_RX_BYTE
(
idx
))

784 
˙t
++;

789  
˙t
;

790 
	}
}

801 
	$HÆUARTSu•ídDMA
( )

803 
PxOUT
 |
HAL_UART_Px_RTS
;

804 
UxCSR
 &~
CSR_RE
;

805 
P0IEN
 |
HAL_UART_Px_CTS
;

806 
	}
}

817 
	$HÆUARTResumeDMA
( )

819 
P0IEN
 &~
HAL_UART_Px_CTS
;

820 
UxUCR
 |
UCR_FLUSH
;

821 
UxCSR
 |
CSR_RE
;

822 
PxOUT
 &~
HAL_UART_Px_RTS
;

823 
	}
}

834 
HÆUARTI§DMA
();

835 
	$HÆUARTI§DMA
()

837 
	`HAL_DMA_CLEAR_IRQ
(
HAL_DMA_CH_TX
);

840 
dmaCfg
.
txIdx
[(dmaCfg.
txSñ
 ^ 1)] = 0;

841 
dmaCfg
.
txMT
 = 
TRUE
;

844 
dmaCfg
.
txShdw
 = 
ST0
;

845 
dmaCfg
.
txShdwVÆid
 = 
TRUE
;

848 i‡(
dmaCfg
.
txIdx
[dmaCfg.
txSñ
])

851 
dmaCfg
.
txDMAPídög
 = 
TRUE
;

853 
	}
}

	@Components/hal/target/CC2530ZNP/_hal_uart_isr.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_as£π.h
"

46 
	~"hÆ_bﬂrd.h
"

47 
	~"hÆ_defs.h
"

48 
	~"hÆ_mcu.h
"

49 
	~"hÆ_u¨t.h
"

50 #i‡
deföed
 
MT_TASK


51 
	~"MT_UART.h
"

59 
	#HAL_UART_ASSERT
(
ex¥
)

	)

61 
	#HAL_UART_ISR_RX_AVAIL
() \

62 (
i§Cfg
.
rxTaû
 >i§Cfg.
rxHód
) ? \

63 (
i§Cfg
.
rxTaû
 - i§Cfg.
rxHód
) : \

64 (
HAL_UART_ISR_RX_MAX
 - 
i§Cfg
.
rxHód
 + i§Cfg.
rxTaû
)

	)

66 
	#HAL_UART_ISR_TX_AVAIL
() \

67 (
i§Cfg
.
txHód
 > i§Cfg.
txTaû
) ? \

68 (
i§Cfg
.
txHód
 - i§Cfg.
txTaû
 - 1) : \

69 (
HAL_UART_ISR_TX_MAX
 - 
i§Cfg
.
txTaû
 + i§Cfg.
txHód
 - 1)

	)

76 
	#CSR_MODE
 0x80

	)

77 
	#CSR_RE
 0x40

	)

78 
	#CSR_SLAVE
 0x20

	)

79 
	#CSR_FE
 0x10

	)

80 
	#CSR_ERR
 0x08

	)

81 
	#CSR_RX_BYTE
 0x04

	)

82 
	#CSR_TX_BYTE
 0x02

	)

83 
	#CSR_ACTIVE
 0x01

	)

86 
	#UCR_FLUSH
 0x80

	)

87 
	#UCR_FLOW
 0x40

	)

88 
	#UCR_D9
 0x20

	)

89 
	#UCR_BIT9
 0x10

	)

90 
	#UCR_PARITY
 0x08

	)

91 
	#UCR_SPB
 0x04

	)

92 
	#UCR_STOP
 0x02

	)

93 
	#UCR_START
 0x01

	)

95 
	#UTX0IE
 0x04

	)

96 
	#UTX1IE
 0x08

	)

98 
	#P2DIR_PRIPO
 0xC0

	)

101 #unde‡
PxOUT


102 #unde‡
PxDIR


103 #unde‡
PxSEL


104 #unde‡
UxCSR


105 #unde‡
UxUCR


106 #unde‡
UxDBUF


107 #unde‡
UxBAUD


108 #unde‡
UxGCR


109 #unde‡
URXxIE


110 #unde‡
URXxIF


111 #unde‡
UTXxIE


112 #unde‡
UTXxIF


113 #unde‡
HAL_UART_PERCFG_BIT


114 #unde‡
HAL_UART_Px_RTS


115 #unde‡
HAL_UART_Px_CTS


116 #unde‡
HAL_UART_Px_RX_TX


117 #i‡(
HAL_UART_ISR
 == 1)

118 
	#PxOUT
 
P0


	)

119 
	#PxDIR
 
P0DIR


	)

120 
	#PxSEL
 
P0SEL


	)

121 
	#UxCSR
 
U0CSR


	)

122 
	#UxUCR
 
U0UCR


	)

123 
	#UxDBUF
 
U0DBUF


	)

124 
	#UxBAUD
 
U0BAUD


	)

125 
	#UxGCR
 
U0GCR


	)

126 
	#URXxIE
 
URX0IE


	)

127 
	#URXxIF
 
URX0IF


	)

128 
	#UTXxIE
 
UTX0IE


	)

129 
	#UTXxIF
 
UTX0IF


	)

131 
	#PxOUT
 
P1


	)

132 
	#PxDIR
 
P1DIR


	)

133 
	#PxSEL
 
P1SEL


	)

134 
	#UxCSR
 
U1CSR


	)

135 
	#UxUCR
 
U1UCR


	)

136 
	#UxDBUF
 
U1DBUF


	)

137 
	#UxBAUD
 
U1BAUD


	)

138 
	#UxGCR
 
U1GCR


	)

139 
	#URXxIE
 
URX1IE


	)

140 
	#URXxIF
 
URX1IF


	)

141 
	#UTXxIE
 
UTX1IE


	)

142 
	#UTXxIF
 
UTX1IF


	)

145 #i‡(
HAL_UART_ISR
 == 1)

146 
	#HAL_UART_PERCFG_BIT
 0x01

147 
	#HAL_UART_Px_RX_TX
 0x0C

148 
	#HAL_UART_Px_RTS
 0x20

149 
	#HAL_UART_Px_CTS
 0x10

150 #ñ£

	)

151 
	#HAL_UART_PERCFG_BIT
 0x02

152 
	#HAL_UART_Px_RTS
 0x20

153 
	#HAL_UART_Px_CTS
 0x10

154 
	#HAL_UART_Px_RX_TX
 0xC0

156 

	)

158 
	#HAL_UART_MSECS_TO_TICKS
 33

	)

160 #i‡
deföed
 
MT_TASK


161 
	#HAL_UART_ISR_TX_MAX
 
MT_UART_DEFAULT_MAX_TX_BUFF


	)

162 
	#HAL_UART_ISR_RX_MAX
 
MT_UART_DEFAULT_MAX_RX_BUFF


	)

163 
	#HAL_UART_ISR_HIGH
 
MT_UART_DEFAULT_THRESHOLD


	)

164 
	#HAL_UART_ISR_IDLE
 (
MT_UART_DEFAULT_IDLE_TIMEOUT
 * 
HAL_UART_MSECS_TO_TICKS
)

	)

166 #i‡!
deföed
 
HAL_UART_ISR_RX_MAX


167 
	#HAL_UART_ISR_RX_MAX
 128

	)

169 #i‡!
deföed
 
HAL_UART_ISR_TX_MAX


170 
	#HAL_UART_ISR_TX_MAX
 
HAL_UART_ISR_RX_MAX


	)

172 #i‡!
deföed
 
HAL_UART_ISR_HIGH


173 
	#HAL_UART_ISR_HIGH
 (
HAL_UART_ISR_RX_MAX
 / 2 - 16)

	)

175 #i‡!
deföed
 
HAL_UART_ISR_IDLE


176 
	#HAL_UART_ISR_IDLE
 (6 * 
HAL_UART_MSECS_TO_TICKS
)

	)

186 
uöt8
 
	mrxBuf
[
HAL_UART_ISR_RX_MAX
];

187 #i‡
HAL_UART_ISR_RX_MAX
 < 256

188 
uöt8
 
	mrxHód
;

189 vﬁ©ûê
uöt8
 
	mrxTaû
;

191 
uöt16
 
	mrxHód
;

192 vﬁ©ûê
uöt16
 
	mrxTaû
;

194 
uöt8
 
	mrxTick
;

195 
uöt8
 
	mrxShdw
;

197 
uöt8
 
	mtxBuf
[
HAL_UART_ISR_TX_MAX
];

198 #i‡
HAL_UART_ISR_TX_MAX
 < 256

199 vﬁ©ûê
uöt8
 
	mtxHód
;

200 
uöt8
 
	mtxTaû
;

202 vﬁ©ûê
uöt16
 
	mtxHód
;

203 
uöt16
 
	mtxTaû
;

205 
uöt8
 
	mtxMT
;

207 
hÆUARTCBack_t
 
	mu¨tCB
;

208 } 
	tu¨tISRCfg_t
;

222 
u¨tISRCfg_t
 
	gi§Cfg
;

228 
HÆUARTInôISR
();

229 
HÆUARTO≥nISR
(
hÆUARTCfg_t
 *
c⁄fig
);

230 
uöt16
 
HÆUARTRódISR
(
uöt8
 *
buf
, uöt16 
Àn
);

231 
uöt16
 
HÆUARTWrôeISR
(
uöt8
 *
buf
, uöt16 
Àn
);

232 
HÆUARTPﬁlISR
();

233 
uöt16
 
HÆUARTRxAvaûISR
();

234 
HÆUARTSu•ídISR
();

235 
HÆUARTResumeISR
();

246 
	$HÆUARTInôISR
()

249 
P2DIR
 &~
P2DIR_PRIPO
;

250 
P2DIR
 |
HAL_UART_PRIPO
;

252 #i‡(
HAL_UART_ISR
 == 1)

253 
PERCFG
 &~
HAL_UART_PERCFG_BIT
;

255 
PERCFG
 |
HAL_UART_PERCFG_BIT
;

257 
PxSEL
 |
HAL_UART_Px_RX_TX
;

258 
ADCCFG
 &~
HAL_UART_Px_RX_TX
;

259 
UxCSR
 = 
CSR_MODE
;

260 
UxUCR
 = 
UCR_FLUSH
;

261 
	}
}

272 
	$HÆUARTUnInôISR
()

274 
UxCSR
 = 0;

275 
URXxIE
 = 0;

276 
URXxIF
 = 0;

277 
IEN2
 &~
UTXxIE
;

278 
UTXxIF
 = 0;

279 
	}
}

290 
	$HÆUARTO≥nISR
(
hÆUARTCfg_t
 *
c⁄fig
)

292 
i§Cfg
.
u¨tCB
 = 
c⁄fig
->
ˇŒBackFunc
;

294 
	`HAL_UART_ASSERT
((
c⁄fig
->
baudR©e
 =
HAL_UART_BR_9600
) ||

295 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_19200
) ||

296 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_38400
) ||

297 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
) ||

298 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
));

300 i‡(
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
 ||

301 
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
)

303 
UxBAUD
 = 216;

307 
UxBAUD
 = 59;

310 
c⁄fig
->
baudR©e
)

312 
HAL_UART_BR_9600
:

313 
UxGCR
 = 8;

315 
HAL_UART_BR_19200
:

316 
UxGCR
 = 9;

318 
HAL_UART_BR_38400
:

319 
HAL_UART_BR_57600
:

320 
UxGCR
 = 10;

323 
UxGCR
 = 11;

328 i‡(
c⁄fig
->
ÊowC⁄åﬁ
)

330 
UxUCR
 = 
UCR_FLOW
 | 
UCR_STOP
;

331 
PxSEL
 |
HAL_UART_Px_RTS
 | 
HAL_UART_Px_CTS
;

335 
UxUCR
 = 
UCR_STOP
;

338 
UxCSR
 |
CSR_RE
;

339 
URXxIE
 = 1;

340 
UTXxIF
 = 1;

341 
	}
}

353 
uöt16
 
	$HÆUARTRódISR
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

355 
uöt16
 
˙t
 = 0;

357 (
i§Cfg
.
rxHód
 !i§Cfg.
rxTaû
Ë&& (
˙t
 < 
Àn
))

359 *
buf
++ = 
i§Cfg
.
rxBuf
[i§Cfg.
rxHód
++];

360 i‡(
i§Cfg
.
rxHód
 >
HAL_UART_ISR_RX_MAX
)

362 
i§Cfg
.
rxHód
 = 0;

364 
˙t
++;

367  
˙t
;

368 
	}
}

380 
uöt16
 
	$HÆUARTWrôeISR
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

382 
uöt16
 
˙t
;

385 i‡(
	`HAL_UART_ISR_TX_AVAIL
(Ë< 
Àn
)

390 
˙t
 = 0; c¡ < 
Àn
; cnt++)

392 
i§Cfg
.
txBuf
[i§Cfg.
txTaû
] = *
buf
++;

393 
i§Cfg
.
txMT
 = 0;

395 i‡(
i§Cfg
.
txTaû
 >
HAL_UART_ISR_TX_MAX
-1)

397 
i§Cfg
.
txTaû
 = 0;

401 
i§Cfg
.
txTaû
++;

405 
IEN2
 |
UTXxIE
;

408  
˙t
;

409 
	}
}

420 
	$HÆUARTPﬁlISR
()

422 i‡(
i§Cfg
.
u¨tCB
 !
NULL
)

424 
uöt16
 
˙t
 = 
	`HAL_UART_ISR_RX_AVAIL
();

425 
uöt8
 
evt
 = 0;

427 i‡(
i§Cfg
.
rxTick
)

430 
uöt8
 
de¸
 = 
ST0
 - 
i§Cfg
.
rxShdw
;

432 i‡(
i§Cfg
.
rxTick
 > 
de¸
)

434 
i§Cfg
.
rxTick
 -
de¸
;

438 
i§Cfg
.
rxTick
 = 0;

441 
i§Cfg
.
rxShdw
 = 
ST0
;

443 i‡(
˙t
 >
HAL_UART_ISR_RX_MAX
-1)

445 
evt
 = 
HAL_UART_RX_FULL
;

447 i‡(
˙t
 >
HAL_UART_ISR_HIGH
)

449 
evt
 = 
HAL_UART_RX_ABOUT_FULL
;

451 i‡(
˙t
 && !
i§Cfg
.
rxTick
)

453 
evt
 = 
HAL_UART_RX_TIMEOUT
;

456 i‡(
i§Cfg
.
txMT
)

458 
i§Cfg
.
txMT
 = 0;

459 
evt
 |
HAL_UART_TX_EMPTY
;

462 i‡(
evt
)

464 
i§Cfg
.
	`u¨tCB
(
HAL_UART_ISR
-1, 
evt
);

467 
	}
}

478 
uöt16
 
	$HÆUARTRxAvaûISR
()

480  
	`HAL_UART_ISR_RX_AVAIL
();

481 
	}
}

492 
	$HÆUARTSu•ídISR
( )

494 
UxCSR
 &~
CSR_RE
;

495 
	}
}

506 
	$HÆUARTResumeISR
( )

508 
UxUCR
 |
UCR_FLUSH
;

509 
UxCSR
 |
CSR_RE
;

510 
	}
}

521 #i‡(
HAL_UART_ISR
 == 1)

522 
	$HAL_ISR_FUNCTION
–
hÆU¨t0RxI§
, 
URX0_VECTOR
 )

524 
	$HAL_ISR_FUNCTION
–
hÆU¨t1RxI§
, 
URX1_VECTOR
 )

528 
uöt8
 
tmp
 = 
UxDBUF
;

529 
i§Cfg
.
rxBuf
[i§Cfg.
rxTaû
] = 
tmp
;

532 i‡(
i§Cfg
.
rxHód
 =i§Cfg.
rxTaû
)

534 
i§Cfg
.
rxShdw
 = 
ST0
;

537 i‡(++
i§Cfg
.
rxTaû
 >
HAL_UART_ISR_RX_MAX
)

539 
i§Cfg
.
rxTaû
 = 0;

542 
i§Cfg
.
rxTick
 = 
HAL_UART_ISR_IDLE
;

543 
	}
}

554 #i‡(
HAL_UART_ISR
 == 1)

555 
	$HAL_ISR_FUNCTION
–
hÆU¨t0TxI§
, 
UTX0_VECTOR
 )

557 
	$HAL_ISR_FUNCTION
–
hÆU¨t1TxI§
, 
UTX1_VECTOR
 )

560 i‡(
i§Cfg
.
txHód
 =i§Cfg.
txTaû
)

562 
IEN2
 &~
UTXxIE
;

563 
i§Cfg
.
txMT
 = 1;

567 
UTXxIF
 = 0;

568 
UxDBUF
 = 
i§Cfg
.
txBuf
[i§Cfg.
txHód
++];

570 i‡(
i§Cfg
.
txHód
 >
HAL_UART_ISR_TX_MAX
)

572 
i§Cfg
.
txHód
 = 0;

575 
	}
}

	@Components/hal/target/CC2530ZNP/hal_adc.c

44 
	~"hÆ_adc.h
"

45 
	~"hÆ_defs.h
"

46 
	~"hÆ_mcu.h
"

47 
	~"hÆ_ty≥s.h
"

52 
	#HAL_ADC_EOC
 0x80

	)

53 
	#HAL_ADC_START
 0x40

	)

55 
	#HAL_ADC_STSEL_EXT
 0x00

	)

56 
	#HAL_ADC_STSEL_FULL
 0x10

	)

57 
	#HAL_ADC_STSEL_T1C0
 0x20

	)

58 
	#HAL_ADC_STSEL_ST
 0x30

	)

60 
	#HAL_ADC_RAND_NORM
 0x00

	)

61 
	#HAL_ADC_RAND_LFSR
 0x04

	)

62 
	#HAL_ADC_RAND_SEED
 0x08

	)

63 
	#HAL_ADC_RAND_STOP
 0x0¯

	)

64 
	#HAL_ADC_RAND_BITS
 0x0¯

	)

66 
	#HAL_ADC_DEC_064
 0x00

	)

67 
	#HAL_ADC_DEC_128
 0x10

	)

68 
	#HAL_ADC_DEC_256
 0x20

	)

69 
	#HAL_ADC_DEC_512
 0x30

	)

70 
	#HAL_ADC_DEC_BITS
 0x30

	)

72 
	#HAL_ADC_STSEL
 
HAL_ADC_STSEL_ST


	)

73 
	#HAL_ADC_RAND_GEN
 
HAL_ADC_RAND_STOP


	)

74 
	#HAL_ADC_REF_VOLT
 
HAL_ADC_REF_AVDD


	)

75 
	#HAL_ADC_DEC_RATE
 
HAL_ADC_DEC_064


	)

76 
	#HAL_ADC_SCHN
 
HAL_ADC_CHN_VDD3


	)

77 
	#HAL_ADC_ECHN
 
HAL_ADC_CHN_GND


	)

84 #i‡(
HAL_ADC
 =
TRUE
)

85 
uöt8
 
	gadcRef
;

97 
	$HÆAdcInô
 ()

99 #i‡(
HAL_ADC
 =
TRUE
)

100 
adcRef
 = 
HAL_ADC_REF_VOLT
;

102 
	}
}

117 
uöt16
 
	$HÆAdcRód
 (
uöt8
 
ch™√l
, uöt8 
ªsﬁuti⁄
)

119 
öt16
 
ªadög
 = 0;

121 #i‡(
HAL_ADC
 =
TRUE
)

122 
uöt8
 
i
, 
ªsbôs
;

123 
uöt8
 
adcCh™√l
 = 1;

133 i‡(
ch™√l
 < 8)

135 
i
=0; i < 
ch™√l
; i++)

137 
adcCh™√l
 <<= 1;

142 
ADCCFG
 |
adcCh™√l
;

145 
ªsﬁuti⁄
)

147 
HAL_ADC_RESOLUTION_8
:

148 
ªsbôs
 = 
HAL_ADC_DEC_064
;

150 
HAL_ADC_RESOLUTION_10
:

151 
ªsbôs
 = 
HAL_ADC_DEC_128
;

153 
HAL_ADC_RESOLUTION_12
:

154 
ªsbôs
 = 
HAL_ADC_DEC_256
;

156 
HAL_ADC_RESOLUTION_14
:

158 
ªsbôs
 = 
HAL_ADC_DEC_512
;

163 
ADCCON3
 = 
ch™√l
 | 
ªsbôs
 | 
adcRef
;

166 !(
ADCCON1
 & 
HAL_ADC_EOC
));

169 
ADCCFG
 &(
adcCh™√l
 ^ 0xFF);

172 
ªadög
 = (
öt16
Ë(
ADCL
);

173 
ªadög
 |(
öt16
Ë(
ADCH
 << 8);

176 i‡(
ªadög
 < 0)

177 
ªadög
 = 0;

179 
ªsﬁuti⁄
)

181 
HAL_ADC_RESOLUTION_8
:

182 
ªadög
 >>= 8;

184 
HAL_ADC_RESOLUTION_10
:

185 
ªadög
 >>= 6;

187 
HAL_ADC_RESOLUTION_12
:

188 
ªadög
 >>= 4;

190 
HAL_ADC_RESOLUTION_14
:

192 
ªadög
 >>= 2;

197 (Ë
ch™√l
;

198 (Ë
ªsﬁuti⁄
;

201  ((
uöt16
)
ªadög
);

202 
	}
}

214 
	$HÆAdcSëRe„ªn˚
 ( 
uöt8
 
ª„ªn˚
 )

216 #i‡(
HAL_ADC
 =
TRUE
)

217 
adcRef
 = 
ª„ªn˚
;

219 
	}
}

232 
boﬁ
 
	$HÆAdcCheckVdd
(
uöt8
 
vdd
)

234 
ADCCON3
 = 0x0F;

235 !(
ADCCON1
 & 0x80));

236  (
ADCH
 > 
vdd
);

237 
	}
}

	@Components/hal/target/CC2530ZNP/hal_aes.h

40 #i‚de‡ 
HAL_AES_H_


41 
	#HAL_AES_H_


	)

43 
	~"ZComDef.h
"

45 
	#STATE_BLENGTH
 16

46 
	#KEY_BLENGTH
 16

47 
	#KEY_EXP_LENGTH
 176

48 

	)

53 #i‡((
deföed
 
SOFTWARE_AES
Ë&& (SOFTWARE_AES =
TRUE
)Ë&& ((deföed 
SW_AES_AND_KEY_EXP
) && (SW_AES_AND_KEY_EXP == TRUE))

57 
HÆAesInô
( );

58 
AesLﬂdBlock
–
uöt8
 * );

59 
AesSèπBlock
–
uöt8
 *, uint8 * );

60 
AesSèπSh‹tBlock
–
uöt8
 *, uint8 * );

61 
AesLﬂdIV
(
uöt8
 *);

62 
AesDmaSëup
–
uöt8
 *, 
uöt16
, uint8 *, uint16 );

63 
AesLﬂdKey
–
uöt8
 * );

65 (*
pS•AesEn¸y±
)–
uöt8
 *, uint8 * );

66 
	`s•_HW_KeyInô
 (
uöt8
 *);

67 
	`s•KeyEx∑nsi⁄
 (
uöt8
 *, uint8 *);

69 
	`s•AesEn¸y±HW
 (
uöt8
 *, uint8 *);

70 
	`s•AesEn¸y±KeyExp
 (
uöt8
 *, uint8 *);

71 
	`s•AesEn¸y±Basic
 (
uöt8
 *, uint8 *);

72 
	`s•AesEn¸y±
–
uöt8
 *
key
, uöt8 *
buf
 );

75 
	#AES_BUSY
 0x08

	)

76 
	#ENCRYPT
 0x00

	)

77 
	#DECRYPT
 0x01

	)

80 
	#AES_SETMODE
(
mode
Ëdÿ{ 
ENCCS
 &~0x70; ENCCS |mode; 
	}
} 0)

	)

83 
	#CBC
 0x00

	)

84 
	#CFB
 0x10

	)

85 
	#OFB
 0x20

	)

86 
	#CTR
 0x30

	)

87 
	#ECB
 0x40

	)

88 
	#CBC_MAC
 0x50

	)

91 
	#AES_SET_ENCR_DECR_KEY_IV
(
mode
) \

93 
ENCCS
 = (ENCCS & ~0x07Ë| 
mode
 \

94 } 0)

	)

97 
	#AES_ENCRYPT
 0x00;

	)

98 
	#AES_DECRYPT
 0x02;

	)

99 
	#AES_LOAD_KEY
 0x04;

	)

100 
	#AES_LOAD_IV
 0x06;

	)

104 
	#AES_START
(Ë
ENCCS
 |0x01

	)

107 
	#HAL_DMA_AES_IN
 1

	)

108 
	#HAL_DMA_AES_OUT
 2

	)

111 
	#HAL_AES_IN_ADDR
 0x70B1

	)

112 
	#HAL_AES_OUT_ADDR
 0x70B2

	)

114 #i‡!
deföed
 (
HAL_AES_DMA
Ë|| (HAL_AES_DMA =
FALSE
)

115 
	#HAL_AES_DELAY
() \

117 
uöt8
 
dñay
 = 15; \

118 
dñay
--); \

119 } 0)

	)

	@Components/hal/target/CC2530ZNP/hal_board_cfg.h

41 #i‚de‡
HAL_BOARD_CFG_H


42 
	#HAL_BOARD_CFG_H


	)

50 
	~"hÆ_mcu.h
"

51 
	~"hÆ_defs.h
"

52 
	~"hÆ_ty≥s.h
"

62 
	#xHAL_PA_LNA


	)

63 
	#xHAL_PA_LNA_CC2590


	)

73 #i‡!
deföed
 (
HAL_BOARD_CC2530EB_REV17
Ë&& !deföed (
HAL_BOARD_CC2530EB_REV13
)

74 
	#HAL_BOARD_CC2530EB_REV17


	)

82 
	#HAL_CPU_CLOCK_MHZ
 32

	)

87 
	#HAL_CLOCK_CRYSTAL


	)

90 
	#ZNP_CFG0_32K_XTAL
 1

	)

91 
	#ZNP_CFG0_32K_OSC
 0

	)

92 
	#ZNP_CFG1_SPI
 1

	)

93 
	#ZNP_CFG1_UART
 0

	)

94 
z≈Cfg1
;

95 
z≈Cfg0
;

103 #i‡
deföed
 (
HAL_BOARD_CC2530EB_REV17
Ë&& !deföed (
HAL_PA_LNA
Ë&& !deföed (
HAL_PA_LNA_CC2590
)

104 
	#HAL_NUM_LEDS
 3

	)

105 #ñi‡
deföed
 (
HAL_BOARD_CC2530EB_REV13
Ë|| deföed (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

106 
	#HAL_NUM_LEDS
 1

	)

108 #îr‹ 
Unknown
 
Bﬂrd
 
Indítifõr


111 
	#HAL_LED_BLINK_DELAY
(Ë
	`°
–{ vﬁ©ûê
uöt32
 
i
; i=0; i<0x5800; i++Ë{ }; } )

	)

114 
	#LED1_BV
 
	`BV
(0)

	)

115 
	#LED1_SBIT
 
P1_0


	)

116 
	#LED1_DDR
 
P1DIR


	)

117 
	#LED1_POLARITY
 
ACTIVE_HIGH


	)

119 #i‡
deföed
 (
HAL_BOARD_CC2530EB_REV17
)

121 
	#LED2_BV
 
	`BV
(1)

	)

122 
	#LED2_SBIT
 
P1_1


	)

123 
	#LED2_DDR
 
P1DIR


	)

124 
	#LED2_POLARITY
 
ACTIVE_HIGH


	)

127 
	#LED3_BV
 
	`BV
(4)

	)

128 
	#LED3_SBIT
 
P1_4


	)

129 
	#LED3_DDR
 
P1DIR


	)

130 
	#LED3_POLARITY
 
ACTIVE_HIGH


	)

138 #i‚de‡
HAL_GPIO


139 
	#HAL_GPIO
 
TRUE


	)

142 #i‡
deföed
 
CC2530_MK


143 
	#GPIO_0_PORT
 0

	)

144 
	#GPIO_0_PIN
 6

	)

145 
	#GPIO_1_PORT
 0

	)

146 
	#GPIO_1_PIN
 7

	)

147 
	#GPIO_2_PORT
 1

	)

148 
	#GPIO_2_PIN
 6

	)

149 
	#GPIO_3_PORT
 1

	)

150 
	#GPIO_3_PIN
 7

	)

152 
	#GPIO_0_PORT
 0

	)

153 
	#GPIO_0_PIN
 0

	)

154 
	#GPIO_1_PORT
 0

	)

155 
	#GPIO_1_PIN
 1

	)

156 
	#GPIO_2_PORT
 0

	)

157 
	#GPIO_2_PIN
 6

	)

158 
	#GPIO_3_PORT
 1

	)

159 
	#GPIO_3_PIN
 0

	)

162 
	#GPIO_DIR_IN
(
IDX
Ë
	`MCU_IO_DIR_INPUT
(
GPIO_
##IDX##
_PORT
, GPIO_##IDX##
_PIN
)

	)

163 
	#GPIO_DIR_OUT
(
IDX
Ë
	`MCU_IO_DIR_OUTPUT
(
GPIO_
##IDX##
_PORT
, GPIO_##IDX##
_PIN
)

	)

164 
	#GPIO_TRI
(
IDX
Ë
	`MCU_IO_INPUT
(
GPIO_
##IDX##
_PORT
, GPIO_##IDX##
_PIN
, 
MCU_IO_TRISTATE
)

	)

165 
	#GPIO_PULL_UP
(
IDX
Ë
	`MCU_IO_INPUT
(
GPIO_
##IDX##
_PORT
, GPIO_##IDX##
_PIN
, 
MCU_IO_PULLUP
)

	)

166 
	#GPIO_PULL_DN
(
IDX
Ë
	`MCU_IO_INPUT
(
GPIO_
##IDX##
_PORT
, GPIO_##IDX##
_PIN
, 
MCU_IO_PULLDOWN
)

	)

167 
	#GPIO_SET
(
IDX
Ë
	`MCU_IO_SET_HIGH
(
GPIO_
##IDX##
_PORT
, GPIO_##IDX##
_PIN
)

	)

168 
	#GPIO_CLR
(
IDX
Ë
	`MCU_IO_SET_LOW
(
GPIO_
##IDX##
_PORT
, GPIO_##IDX##
_PIN
)

	)

169 
	#GPIO_TOG
(
IDX
Ë
	`MCU_IO_TGL
(
GPIO_
##IDX##
_PORT
, GPIO_##IDX##
_PIN
)

	)

170 
	#GPIO_GET
(
IDX
Ë
	`MCU_IO_GET
(
GPIO_
##IDX##
_PORT
, GPIO_##IDX##
_PIN
)

	)

171 
	#GPIO_HiD_SET
(Ë(
PICTL
 |
	`BV
(7)Ë

	)

172 
	#GPIO_HiD_CLR
(Ë(
PICTL
 &~
	`BV
(7)Ë

	)

175 
	#MCU_IO_TRISTATE
 1

	)

176 
	#MCU_IO_PULLUP
 2

	)

177 
	#MCU_IO_PULLDOWN
 3

	)

182 
	#MCU_IO_PERIPHERAL
(
p‹t
, 
pö
Ë
	`MCU_IO_PERIPHERAL_PREP
’‹t,Öö)

	)

183 
	#MCU_IO_INPUT
(
p‹t
, 
pö
, 
func
Ë
	`MCU_IO_INPUT_PREP
’‹t,Öö, func)

	)

184 
	#MCU_IO_OUTPUT
(
p‹t
, 
pö
, 
vÆ
Ë
	`MCU_IO_OUTPUT_PREP
’‹t,Öö, vÆ)

	)

185 
	#MCU_IO_SET
(
p‹t
, 
pö
, 
vÆ
Ë
	`MCU_IO_SET_PREP
’‹t,Öö, vÆ)

	)

186 
	#MCU_IO_SET_HIGH
(
p‹t
, 
pö
Ë
	`MCU_IO_SET_HIGH_PREP
’‹t,Öö)

	)

187 
	#MCU_IO_SET_LOW
(
p‹t
, 
pö
Ë
	`MCU_IO_SET_LOW_PREP
’‹t,Öö)

	)

188 
	#MCU_IO_TGL
(
p‹t
, 
pö
Ë
	`MCU_IO_TGL_PREP
’‹t,Öö)

	)

189 
	#MCU_IO_GET
(
p‹t
, 
pö
Ë
	`MCU_IO_GET_PREP
’‹t,Öö)

	)

191 
	#MCU_IO_DIR_INPUT
(
p‹t
, 
pö
Ë
	`MCU_IO_DIR_INPUT_PREP
’‹t,Öö)

	)

192 
	#MCU_IO_DIR_OUTPUT
(
p‹t
, 
pö
Ë
	`MCU_IO_DIR_OUTPUT_PREP
’‹t,Öö)

	)

197 
	#MCU_IO_PERIPHERAL_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
SEL
 |
	`BV
’ö); )

	)

199 
	#MCU_IO_INPUT_PREP
(
p‹t
, 
pö
, 
func
Ë
	`°
–
P
##p‹t##
SEL
 &~
	`BV
(pin); \

200 
P
##
p‹t
##
DIR
 &~
	`BV
(
pö
); \

201 
func
) { \

202 
MCU_IO_PULLUP
: \

203 
P
##
p‹t
##
INP
 &~
	`BV
(
pö
); \

204 
P2INP
 &~
	`BV
(
p‹t
 + 5); \

206 
MCU_IO_PULLDOWN
: \

207 
P
##
p‹t
##
INP
 &~
	`BV
(
pö
); \

208 
P2INP
 |
	`BV
(
p‹t
 + 5); \

211 
P
##
p‹t
##
INP
 |
	`BV
(
pö
); \

212 ; } )

	)

214 
	#MCU_IO_OUTPUT_PREP
(
p‹t
, 
pö
, 
vÆ
Ë
	`°
–
P
##p‹t##
SEL
 &~
	`BV
(pin); \

215 
P
##
p‹t
##
_
##
pö
## = 
vÆ
; \

216 
P
##
p‹t
##
DIR
 |
	`BV
(
pö
); )

	)

218 
	#MCU_IO_SET_HIGH_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
_
##pö## = 1; )

	)

219 
	#MCU_IO_SET_LOW_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
_
##pö## = 0; )

	)

221 
	#MCU_IO_SET_PREP
(
p‹t
, 
pö
, 
vÆ
Ë
	`°
–
P
##p‹t##
_
##pö## = vÆ; )

	)

222 
	#MCU_IO_TGL_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
_
##pö## ^1; )

	)

223 
	#MCU_IO_GET_PREP
(
p‹t
, 
pö
Ë(
P
##p‹t## & 
	`BV
’ö))

	)

225 
	#MCU_IO_DIR_INPUT_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
DIR
 &~
	`BV
’ö); )

	)

226 
	#MCU_IO_DIR_OUTPUT_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
DIR
 |
	`BV
’ö); )

	)

233 
	#ACTIVE_LOW
 !

	)

234 
	#ACTIVE_HIGH
 !!

	)

237 
	#PUSH1_BV
 
	`BV
(1)

	)

238 
	#PUSH1_SBIT
 
P0_1


	)

240 #i‡
deföed
 (
HAL_BOARD_CC2530EB_REV17
)

241 
	#PUSH1_POLARITY
 
ACTIVE_HIGH


	)

242 #ñi‡
deföed
 (
HAL_BOARD_CC2530EB_REV13
)

243 
	#PUSH1_POLARITY
 
ACTIVE_LOW


	)

245 #îr‹ 
Unknown
 
Bﬂrd
 
Indítifõr


249 
	#PUSH2_BV
 
	`BV
(0)

	)

250 
	#PUSH2_SBIT
 
P2_0


	)

251 
	#PUSH2_POLARITY
 
ACTIVE_HIGH


	)

259 
	#HAL_FLASH_PAGE_PER_BANK
 16

	)

261 
	#HAL_FLASH_PAGE_SIZE
 2048

	)

262 
	#HAL_FLASH_WORD_SIZE
 4

	)

265 
	#HAL_FLASH_PAGE_MAP
 0x8000

	)

269 #i‡
deföed
 
NON_BANKED


270 
	#HAL_FLASH_LOCK_BITS
 16

	)

271 
	#HAL_NV_PAGE_END
 30

	)

272 
	#HAL_NV_PAGE_CNT
 2

	)

274 
	#HAL_FLASH_LOCK_BITS
 16

	)

275 
	#HAL_NV_PAGE_END
 126

	)

276 
	#HAL_NV_PAGE_CNT
 6

	)

280 
	#HAL_FLASH_IEEE_SIZE
 8

	)

281 
	#HAL_FLASH_IEEE_PAGE
 (
HAL_NV_PAGE_END
+1)

	)

282 
	#HAL_FLASH_IEEE_OSET
 (
HAL_FLASH_PAGE_SIZE
 - 
HAL_FLASH_LOCK_BITS
 - 
HAL_FLASH_IEEE_SIZE
)

	)

283 
	#HAL_INFOP_IEEE_OSET
 0xC

	)

285 
	#HAL_FLASH_DEV_PRIVATE_KEY_OSET
 0x7D2

	)

286 
	#HAL_FLASH_CA_PUBLIC_KEY_OSET
 0x7BC

	)

287 
	#HAL_FLASH_IMPLICIT_CERT_OSET
 0x78C

	)

289 
	#HAL_NV_PAGE_BEG
 (
HAL_NV_PAGE_END
-
HAL_NV_PAGE_CNT
+1)

	)

292 
	#HAL_NV_DMA_CH
 0

	)

293 
	#HAL_DMA_CH_RX
 3

	)

294 
	#HAL_DMA_CH_TX
 4

	)

296 
	#HAL_NV_DMA_GET_DESC
(Ë
	`HAL_DMA_GET_DESC0
()

	)

297 
	#HAL_NV_DMA_SET_ADDR
(
a
Ë
	`HAL_DMA_SET_ADDR_DESC0
(◊))

	)

304 
	#HAL_SB_IMG_ADDR
 0x2000

	)

305 
	#HAL_SB_CRC_ADDR
 0x2090

	)

307 
	#HAL_SB_IMG_SIZE
 (0x40000 - 0x2000 - 0x3000 - 0x0800)

	)

315 #i‡
deföed
 
HAL_PA_LNA
 || deföed 
HAL_PA_LNA_CC2590


316 
MAC_RfFr⁄ãndSëup
();

317 
	#HAL_BOARD_RF_FRONTEND_SETUP
(Ë
	`MAC_RfFr⁄ãndSëup
()

	)

319 
	#HAL_BOARD_RF_FRONTEND_SETUP
()

	)

323 
	#PREFETCH_ENABLE
(Ë
	`°
–
FCTL
 = 0x08; )

	)

324 
	#PREFETCH_DISABLE
(Ë
	`°
–
FCTL
 = 0x04; )

	)

329 
	#HAL_CLOCK_STABLE
(Ë
	`°
–
uöt8
 
OSC_32KHZ
 = ((
z≈Cfg0
 =
ZNP_CFG0_32K_XTAL
) ? 0x00 : 0x80); \

330 
CLKCONSTA
 !(
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
)); )

	)

332 #i‡
deföed
 
CC2530_MK


333 
	#OSC_32KHZ_VALUE
 0x80

	)

336 
	#OSC_32KHZ_VALUE
 ((
P1_2
 =
ZNP_CFG0_32K_XTAL
Ë? 0x00 : 0x80)

	)

340 #i‡
deföed
 (
HAL_BOARD_CC2530EB_REV17
Ë&& !deföed (
HAL_PA_LNA
Ë&& !deföed (
HAL_PA_LNA_CC2590
)

342 
	#HAL_BOARD_INIT
(Ë
°
 \

344 
uöt8
 
OSC_32KHZ
 = 
OSC_32KHZ_VALUE
; \

345 
uöt16
 
i
; \

347 
SLEEPCMD
 &~
OSC_PD
; \

348 !(
SLEEPSTA
 & 
XOSC_STB
)); \

349 
	`asm
("NOP"); \

350 
i
=0; i<504; i++Ë
	`asm
("NOP"); \

351 
CLKCONCMD
 = (
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
); \

352 
CLKCONSTA
 !(
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
)); \

353 
SLEEPCMD
 |
OSC_PD
; \

356 
	`PREFETCH_ENABLE
(); \

357 )

	)

359 #ñi‡
deföed
 (
HAL_BOARD_CC2530EB_REV13
Ë|| deföed (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

361 
	#HAL_BOARD_INIT
(Ë
°
 \

363 
uöt8
 
OSC_32KHZ
 = 
OSC_32KHZ_VALUE
; \

364 
uöt16
 
i
; \

366 
SLEEPCMD
 &~
OSC_PD
; \

367 !(
SLEEPSTA
 & 
XOSC_STB
)); \

368 
	`asm
("NOP"); \

369 
i
=0; i<504; i++Ë
	`asm
("NOP"); \

370 
CLKCONCMD
 = (
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
); \

371 
CLKCONSTA
 !(
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
)); \

372 
SLEEPCMD
 |
OSC_PD
; \

375 
	`PREFETCH_ENABLE
(); \

378 
LED1_DDR
 |
LED1_BV
; \

381 
P0DIR
 |
	`BV
(7); \

384 
P0INP
 |
PUSH2_BV
; \

387 
	`HAL_BOARD_RF_FRONTEND_SETUP
(); \

388 )

	)

393 
	#HAL_DEBOUNCE
(
ex¥
Ë{ 
i
; i=0; i<500; i++Ë{ i‡(!”x¥)Ëò0; } }

	)

396 
	#HAL_PUSH_BUTTON1
(Ë(
	`PUSH1_POLARITY
 (
PUSH1_SBIT
))

	)

397 
	#HAL_PUSH_BUTTON2
(Ë(
	`PUSH2_POLARITY
 (
PUSH2_SBIT
))

	)

398 
	#HAL_PUSH_BUTTON3
(Ë(0)

	)

399 
	#HAL_PUSH_BUTTON4
(Ë(0)

	)

400 
	#HAL_PUSH_BUTTON5
(Ë(0)

	)

401 
	#HAL_PUSH_BUTTON6
(Ë(0)

	)

404 #i‡
deföed
 (
HAL_BOARD_CC2530EB_REV17
Ë&& !deföed (
HAL_PA_LNA
Ë&& !deföed (
HAL_PA_LNA_CC2590
)

406 
	#HAL_TURN_OFF_LED1
(Ë
	`°
–
LED1_SBIT
 = 
	`LED1_POLARITY
 (0); )

	)

407 
	#HAL_TURN_OFF_LED2
(Ë
	`°
–
LED2_SBIT
 = 
	`LED2_POLARITY
 (0); )

	)

408 
	#HAL_TURN_OFF_LED3
(Ë
	`°
–
LED3_SBIT
 = 
	`LED3_POLARITY
 (0); )

	)

409 
	#HAL_TURN_OFF_LED4
(Ë
	`HAL_TURN_OFF_LED1
()

	)

411 
	#HAL_TURN_ON_LED1
(Ë
	`°
–
LED1_SBIT
 = 
	`LED1_POLARITY
 (1); )

	)

412 
	#HAL_TURN_ON_LED2
(Ë
	`°
–
LED2_SBIT
 = 
	`LED2_POLARITY
 (1); )

	)

413 
	#HAL_TURN_ON_LED3
(Ë
	`°
–
LED3_SBIT
 = 
	`LED3_POLARITY
 (1); )

	)

414 
	#HAL_TURN_ON_LED4
(Ë
	`HAL_TURN_ON_LED1
()

	)

416 
	#HAL_TOGGLE_LED1
(Ë
	`°
–i‡(
LED1_SBIT
Ë{ LED1_SBIT = 0; } { LED1_SBIT = 1;} )

	)

417 
	#HAL_TOGGLE_LED2
(Ë
	`°
–i‡(
LED2_SBIT
Ë{ LED2_SBIT = 0; } { LED2_SBIT = 1;} )

	)

418 
	#HAL_TOGGLE_LED3
(Ë
	`°
–i‡(
LED3_SBIT
Ë{ LED3_SBIT = 0; } { LED3_SBIT = 1;} )

	)

419 
	#HAL_TOGGLE_LED4
(Ë
	`HAL_TOGGLE_LED1
()

	)

421 
	#HAL_STATE_LED1
(Ë(
	`LED1_POLARITY
 (
LED1_SBIT
))

	)

422 
	#HAL_STATE_LED2
(Ë(
	`LED2_POLARITY
 (
LED2_SBIT
))

	)

423 
	#HAL_STATE_LED3
(Ë(
	`LED3_POLARITY
 (
LED3_SBIT
))

	)

424 
	#HAL_STATE_LED4
(Ë
	`HAL_STATE_LED1
()

	)

426 #ñi‡
deföed
 (
HAL_BOARD_CC2530EB_REV13
Ë|| deföed (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

428 
	#HAL_TURN_OFF_LED1
(Ë
	`°
–
LED1_SBIT
 = 
	`LED1_POLARITY
 (0); )

	)

429 
	#HAL_TURN_OFF_LED2
(Ë
	`HAL_TURN_OFF_LED1
()

	)

430 
	#HAL_TURN_OFF_LED3
(Ë
	`HAL_TURN_OFF_LED1
()

	)

431 
	#HAL_TURN_OFF_LED4
(Ë
	`HAL_TURN_OFF_LED1
()

	)

433 
	#HAL_TURN_ON_LED1
(Ë
	`°
–
LED1_SBIT
 = 
	`LED1_POLARITY
 (1); )

	)

434 
	#HAL_TURN_ON_LED2
(Ë
	`HAL_TURN_ON_LED1
()

	)

435 
	#HAL_TURN_ON_LED3
(Ë
	`HAL_TURN_ON_LED1
()

	)

436 
	#HAL_TURN_ON_LED4
(Ë
	`HAL_TURN_ON_LED1
()

	)

438 
	#HAL_TOGGLE_LED1
(Ë
	`°
–i‡(
LED1_SBIT
Ë{ LED1_SBIT = 0; } { LED1_SBIT = 1;} )

	)

439 
	#HAL_TOGGLE_LED2
(Ë
	`HAL_TOGGLE_LED1
()

	)

440 
	#HAL_TOGGLE_LED3
(Ë
	`HAL_TOGGLE_LED1
()

	)

441 
	#HAL_TOGGLE_LED4
(Ë
	`HAL_TOGGLE_LED1
()

	)

443 
	#HAL_STATE_LED1
(Ë(
	`LED1_POLARITY
 (
LED1_SBIT
))

	)

444 
	#HAL_STATE_LED2
(Ë
	`HAL_STATE_LED1
()

	)

445 
	#HAL_STATE_LED3
(Ë
	`HAL_STATE_LED1
()

	)

446 
	#HAL_STATE_LED4
(Ë
	`HAL_STATE_LED1
()

	)

451 
	#XNV_SPI_BEGIN
(Ë
	`°
(
P1_3
 = 0;)

	)

452 
	#XNV_SPI_TX
(
x
Ë
	`°
(
U1CSR
 &~0x02; 
U1DBUF
 = (x);)

	)

453 
	#XNV_SPI_RX
(Ë
U1DBUF


	)

454 
	#XNV_SPI_WAIT_RXRDY
(Ë
	`°
(!(
U1CSR
 & 0x02));)

	)

455 
	#XNV_SPI_END
(Ë
	`°
(
P1_3
 = 1;)

	)

458 
	#XNV_SPI_INIT
() \

459 
	`°
( \

461 
U1CSR
 = 0; \

464 
U1GCR
 = 11; \

465 
U1BAUD
 = 216; \

468 
U1GCR
 |
	`BV
(5); \

471 
PERCFG
 |= 0x02; \

474 
P1SEL
 |= 0xE0; \

476 
P1SEL
 &= ~0x0E; \

477 
P1
 |= 0x0E; \

478 
P1_1
 = 0; \

479 
P1DIR
 |= 0x0E; \

482 
P2SEL
 &= ~0x20; \

485 
U1CSR
 |= 0x40; \

487 
P1_1
 = 1; \

488 )

	)

493 
	#VDD_2_0
 74

494 
	#VDD_2_7
 100

495 

	)

496 
	#VDD_MIN_RUN
 
VDD_2_0


	)

497 
	#VDD_MIN_NV
 (
VDD_2_0
+4)

498 
	#VDD_MIN_XNV
 (
VDD_2_7
+5)

499 

	)

506 #i‚de‡
HAL_TIMER


507 
	#HAL_TIMER
 
FALSE


	)

511 #i‚de‡
HAL_ADC


512 
	#HAL_ADC
 
TRUE


	)

516 #i‚de‡
HAL_DMA


517 
	#HAL_DMA
 
TRUE


	)

521 #i‚de‡
HAL_FLASH


522 
	#HAL_FLASH
 
TRUE


	)

526 #i‚de‡
HAL_AES


527 
	#HAL_AES
 
TRUE


	)

530 #i‚de‡
HAL_AES_DMA


531 
	#HAL_AES_DMA
 
TRUE


	)

535 #i‚de‡
HAL_LCD


536 
	#HAL_LCD
 
FALSE


	)

540 #i‚de‡
HAL_LED


541 
	#HAL_LED
 
FALSE


	)

543 #i‡(!
deföed
 
BLINK_LEDS
Ë&& (
HAL_LED
 =
TRUE
)

544 
	#BLINK_LEDS


	)

548 #i‚de‡
HAL_KEY


549 
	#HAL_KEY
 
FALSE


	)

552 
	#HAL_SPI
 
TRUE


	)

553 
	#HAL_UART
 
TRUE


	)

555 #i‡
deföed
 
HAL_SB_BOOT_CODE


556 
	#HAL_UART_DMA
 0

	)

557 
	#HAL_UART_ISR
 1

	)

559 
	#HAL_UART_DMA
 1

	)

560 
	#HAL_UART_ISR
 0

	)

562 
	#HAL_UART_USB
 0

	)

565 #i‡((
HAL_UART_DMA
 =1Ë|| (
HAL_UART_ISR
 == 1))

566 
	#HAL_UART_PRIPO
 0x00

	)

568 
	#HAL_UART_PRIPO
 0x40

	)

	@Components/hal/target/CC2530ZNP/hal_dma.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_defs.h
"

46 
	~"hÆ_dma.h
"

47 
	~"hÆ_mcu.h
"

48 
	~"hÆ_u¨t.h
"

50 #i‡(
deföed
 
HAL_IRGEN
Ë&& (HAL_IRGEN =
TRUE
)

51 
	~"hÆ_úgí.h
"

54 #i‡(
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)

55 
	~"hÆ_•i.h
"

59 #i‡((
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
))

77 
hÆDMADesc_t
 
	gdmaCh0
;

78 
hÆDMADesc_t
 
	gdmaCh1234
[4];

101 
	$HÆDmaInô
( )

103 
	`HAL_DMA_SET_ADDR_DESC0
–&
dmaCh0
 );

104 
	`HAL_DMA_SET_ADDR_DESC1234
–
dmaCh1234
 );

105 
DMAIE
 = 1;

106 
	}
}

117 
	$HAL_ISR_FUNCTION
–
hÆDmaI§
, 
DMA_VECTOR
 )

119 
	`HAL_ENTER_ISR
();

121 
DMAIF
 = 0;

123 i‡(
ZNP_CFG1_UART
 =
z≈Cfg1
)

125 i‡(
	`HAL_DMA_CHECK_IRQ
(
HAL_DMA_CH_TX
))

127 
	`HÆUARTI§DMA
();

128 
	`HÆUARTI§DMA
();

133 i‡–
	`HAL_DMA_CHECK_IRQ
–
HAL_DMA_CH_RX
 ) )

135 
	`HAL_DMA_CLEAR_IRQ
–
HAL_DMA_CH_RX
 );

136 
	`HÆSpiRxI§
();

139 i‡–
	`HAL_DMA_CHECK_IRQ
–
HAL_DMA_CH_TX
 ) )

141 
	`HAL_DMA_CLEAR_IRQ
–
HAL_DMA_CH_TX
 );

142 
	`HÆSpiTxI§
();

146 
	`HAL_EXIT_ISR
();

147 
	}
}

	@Components/hal/target/CC2530ZNP/hal_dma.h

40 #i‚de‡
HAL_DMA_H


41 
	#HAL_DMA_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"hÆ_bﬂrd.h
"

53 
	~"hÆ_ty≥s.h
"

55 #i‡((
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
))

61 
	#HAL_DMA_SET_ADDR_DESC0
–
a
 ) \

62 
	`°
( \

63 
DMA0CFGH
 = (
uöt8
)–(
uöt16
)(
a
) >> 8 ); \

64 
DMA0CFGL
 = (
uöt8
)–(
uöt16
)(
a
) & 0xFF ); \

65 )

	)

67 
	#HAL_DMA_SET_ADDR_DESC1234
–
a
 ) \

68 
	`°
( \

69 
DMA1CFGH
 = (
uöt8
)–(
uöt16
)(
a
) >> 8 ); \

70 
DMA1CFGL
 = (
uöt8
)–(
uöt16
)(
a
) & 0xFF ); \

71 )

	)

73 
	#HAL_DMA_GET_DESC0
(Ë&
dmaCh0


	)

75 
	#HAL_DMA_GET_DESC1234
–
a
 ) (
dmaCh1234
+(◊)-1))

	)

77 
	#HAL_DMA_ARM_CH
–
ch
 ) 
DMAARM
 = (0x01 << (ch))

	)

79 
	#HAL_DMA_CH_ARMED
–
ch
 ) (
DMAARM
 & (0x01 << (ch)))

	)

81 
	#HAL_DMA_ABORT_CH
–
ch
 ) 
DMAARM
 = (0x80 | (0x01 << (ch)))

	)

82 
	#HAL_DMA_MAN_TRIGGER
–
ch
 ) 
DMAREQ
 = (0x01 << (ch))

	)

83 
	#HAL_DMA_START_CH
–
ch
 ) 
	`HAL_DMA_MAN_TRIGGER
–(chË)

	)

85 
	#HAL_DMA_CLEAR_IRQ
–
ch
 ) 
DMAIRQ
 = ~–1 << (chË)

	)

87 
	#HAL_DMA_CHECK_IRQ
–
ch
 ) (
DMAIRQ
 & ( 1 << (chË))

	)

90 
	#HAL_DMA_SET_SOURCE
–
pDesc
, 
§c
 ) \

91 
	`°
( \

92 
pDesc
->
§cAddrH
 = (
uöt8
)((
uöt16
)(
§c
) >> 8); \

93 
pDesc
->
§cAddrL
 = (
uöt8
)–(
uöt16
)(
§c
) & 0xFF ); \

94 )

	)

97 
	#HAL_DMA_SET_DEST
–
pDesc
, 
d°
 ) \

98 
	`°
( \

99 
pDesc
->
d°AddrH
 = (
uöt8
)((
uöt16
)(
d°
) >> 8); \

100 
pDesc
->
d°AddrL
 = (
uöt8
)–(
uöt16
)(
d°
) & 0xFF ); \

101 )

	)

105 
	#HAL_DMA_SET_LEN
–
pDesc
, 
Àn
 ) \

106 
	`°
( \

107 
pDesc
->
x„rLíL
 = (
uöt8
)–(
uöt16
)(
Àn
) & 0xFF); \

108 
pDesc
->
x„rLíV
 &~
HAL_DMA_LEN_H
; \

109 
pDesc
->
x„rLíV
 |(
uöt8
)((
uöt16
)(
Àn
) >> 8); \

110 )

	)

112 
	#HAL_DMA_GET_LEN
–
pDesc
 ) \

113 (((
uöt16
)(
pDesc
->
x„rLíV
 & 
HAL_DMA_LEN_H
Ë<< 8Ë|ÖDesc->
x„rLíL
)

	)

115 
	#HAL_DMA_SET_VLEN
–
pDesc
, 
vMode
 ) \

116 
	`°
( \

117 
pDesc
->
x„rLíV
 &~
HAL_DMA_LEN_V
; \

118 
pDesc
->
x„rLíV
 |(
vMode
 << 5); \

119 )

	)

121 
	#HAL_DMA_SET_WORD_SIZE
–
pDesc
, 
xSz
 ) \

122 
	`°
( \

123 
pDesc
->
˘æA
 &~
HAL_DMA_WORD_SIZE
; \

124 
pDesc
->
˘æA
 |(
xSz
 << 7); \

125 )

	)

127 
	#HAL_DMA_SET_TRIG_MODE
–
pDesc
, 
tMode
 ) \

128 
	`°
( \

129 
pDesc
->
˘æA
 &~
HAL_DMA_TRIG_MODE
; \

130 
pDesc
->
˘æA
 |(
tMode
 << 5); \

131 )

	)

133 
	#HAL_DMA_GET_TRIG_MODE
–
pDesc
 ) (’Desc->
˘æA
 >> 5Ë& 0x3)

	)

135 
	#HAL_DMA_SET_TRIG_SRC
–
pDesc
, 
tSrc
 ) \

136 
	`°
( \

137 
pDesc
->
˘æA
 &~
HAL_DMA_TRIG_SRC
; \

138 
pDesc
->
˘æA
 |
tSrc
; \

139 )

	)

141 
	#HAL_DMA_SET_SRC_INC
–
pDesc
, 
§cInc
 ) \

142 
	`°
( \

143 
pDesc
->
˘æB
 &~
HAL_DMA_SRC_INC
; \

144 
pDesc
->
˘æB
 |(
§cInc
 << 6); \

145 )

	)

147 
	#HAL_DMA_SET_DST_INC
–
pDesc
, 
d°Inc
 ) \

148 
	`°
( \

149 
pDesc
->
˘æB
 &~
HAL_DMA_DST_INC
; \

150 
pDesc
->
˘æB
 |(
d°Inc
 << 4); \

151 )

	)

153 
	#HAL_DMA_SET_IRQ
–
pDesc
, 
íabÀ
 ) \

154 
	`°
( \

155 
pDesc
->
˘æB
 &~
HAL_DMA_IRQ_MASK
; \

156 
pDesc
->
˘æB
 |(
íabÀ
 << 3); \

157 )

	)

159 
	#HAL_DMA_SET_M8
–
pDesc
, 
m8
 ) \

160 
	`°
( \

161 
pDesc
->
˘æB
 &~
HAL_DMA_M8
; \

162 
pDesc
->
˘æB
 |(
m8
 << 2); \

163 )

	)

165 
	#HAL_DMA_SET_PRIORITY
–
pDesc
, 
¥i
 ) \

166 
	`°
( \

167 
pDesc
->
˘æB
 &~
HAL_DMA_PRIORITY
; \

168 
pDesc
->
˘æB
 |
¥i
; \

169 )

	)

176 
	#HAL_DMA_VLEN_USE_LEN
 0x00

	)

178 
	#HAL_DMA_VLEN_1_P_VALOFFIRST
 0x01

	)

180 
	#HAL_DMA_VLEN_VALOFFIRST
 0x02

	)

182 
	#HAL_DMA_VLEN_1_P_VALOFFIRST_P_1
 0x03

	)

184 
	#HAL_DMA_VLEN_1_P_VALOFFIRST_P_2
 0x04

	)

186 
	#HAL_DMA_WORDSIZE_BYTE
 0x00

	)

187 
	#HAL_DMA_WORDSIZE_WORD
 0x01

	)

189 
	#HAL_DMA_TMODE_SINGLE
 0x00

	)

190 
	#HAL_DMA_TMODE_BLOCK
 0x01

	)

191 
	#HAL_DMA_TMODE_SINGLE_REPEATED
 0x02

	)

192 
	#HAL_DMA_TMODE_BLOCK_REPEATED
 0x03

	)

194 
	#HAL_DMA_TRIG_NONE
 0

	)

195 
	#HAL_DMA_TRIG_PREV
 1

	)

196 
	#HAL_DMA_TRIG_T1_CH0
 2

	)

197 
	#HAL_DMA_TRIG_T1_CH1
 3

	)

198 
	#HAL_DMA_TRIG_T1_CH2
 4

	)

199 
	#HAL_DMA_TRIG_T2_COMP
 5

	)

200 
	#HAL_DMA_TRIG_T2_OVFL
 6

	)

201 
	#HAL_DMA_TRIG_T3_CH0
 7

	)

202 
	#HAL_DMA_TRIG_T3_CH1
 8

	)

203 
	#HAL_DMA_TRIG_T4_CH0
 9

	)

204 
	#HAL_DMA_TRIG_T4_CH1
 10

	)

205 
	#HAL_DMA_TRIG_ST
 11

	)

206 
	#HAL_DMA_TRIG_IOC_0
 12

	)

207 
	#HAL_DMA_TRIG_IOC_1
 13

	)

208 
	#HAL_DMA_TRIG_URX0
 14

	)

209 
	#HAL_DMA_TRIG_UTX0
 15

	)

210 
	#HAL_DMA_TRIG_URX1
 16

	)

211 
	#HAL_DMA_TRIG_UTX1
 17

	)

212 
	#HAL_DMA_TRIG_FLASH
 18

	)

213 
	#HAL_DMA_TRIG_RADIO
 19

	)

214 
	#HAL_DMA_TRIG_ADC_CHALL
 20

	)

215 
	#HAL_DMA_TRIG_ADC_CH0
 21

	)

216 
	#HAL_DMA_TRIG_ADC_CH1
 22

	)

217 
	#HAL_DMA_TRIG_ADC_CH2
 23

	)

218 
	#HAL_DMA_TRIG_ADC_CH3
 24

	)

219 
	#HAL_DMA_TRIG_ADC_CH4
 25

	)

220 
	#HAL_DMA_TRIG_ADC_CH5
 26

	)

221 
	#HAL_DMA_TRIG_ADC_CH6
 27

	)

222 
	#HAL_DMA_TRIG_ADC_CH7
 28

	)

223 
	#HAL_DMA_TRIG_ENC_DW
 29

	)

224 
	#HAL_DMA_TRIG_ENC_UP
 30

	)

226 
	#HAL_DMA_SRCINC_0
 0x00

	)

227 
	#HAL_DMA_SRCINC_1
 0x01

	)

228 
	#HAL_DMA_SRCINC_2
 0x02

	)

229 
	#HAL_DMA_SRCINC_M1
 0x03

	)

231 
	#HAL_DMA_DSTINC_0
 0x00

	)

232 
	#HAL_DMA_DSTINC_1
 0x01

	)

233 
	#HAL_DMA_DSTINC_2
 0x02

	)

234 
	#HAL_DMA_DSTINC_M1
 0x03

	)

236 
	#HAL_DMA_IRQMASK_DISABLE
 0x00

	)

237 
	#HAL_DMA_IRQMASK_ENABLE
 0x01

	)

239 
	#HAL_DMA_M8_USE_8_BITS
 0x00

	)

240 
	#HAL_DMA_M8_USE_7_BITS
 0x01

	)

242 
	#HAL_DMA_PRI_LOW
 0x00

	)

243 
	#HAL_DMA_PRI_GUARANTEED
 0x01

	)

244 
	#HAL_DMA_PRI_HIGH
 0x02

	)

245 
	#HAL_DMA_PRI_ABSOLUTE
 0x03

	)

247 
	#HAL_DMA_MAX_ARM_CLOCKS
 45

248 

	)

254 
	#HAL_DMA_LEN_V
 0xE0

	)

255 
	#HAL_DMA_LEN_H
 0x1F

	)

258 
	#HAL_DMA_WORD_SIZE
 0x80

	)

259 
	#HAL_DMA_TRIG_MODE
 0x60

	)

260 
	#HAL_DMA_TRIG_SRC
 0x1F

	)

263 
	#HAL_DMA_SRC_INC
 0xC0

	)

264 
	#HAL_DMA_DST_INC
 0x30

	)

265 
	#HAL_DMA_IRQ_MASK
 0x08

	)

266 
	#HAL_DMA_M8
 0x04

	)

267 
	#HAL_DMA_PRIORITY
 0x03

	)

270 
uöt8
 
§cAddrH
;

271 
uöt8
 
§cAddrL
;

272 
uöt8
 
d°AddrH
;

273 
uöt8
 
d°AddrL
;

274 
uöt8
 
x„rLíV
;

275 
uöt8
 
x„rLíL
;

276 
uöt8
 
˘æA
;

277 
uöt8
 
˘æB
;

278 } 
	thÆDMADesc_t
;

284 
hÆDMADesc_t
 
dmaCh0
;

285 
hÆDMADesc_t
 
dmaCh1234
[4];

291 
HÆDmaInô
( );

295 #ifde‡
__˝lu•lus


	@Components/hal/target/CC2530ZNP/hal_flash.c

45 
	~"hÆ_bﬂrd_cfg.h
"

46 
	~"hÆ_dma.h
"

47 
	~"hÆ_Êash.h
"

48 
	~"hÆ_mcu.h
"

49 
	~"hÆ_ty≥s.h
"

70 
	$HÆFœshRód
(
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
, uöt16 
˙t
)

73 
uöt8
 *
pD©a
 = (uöt8 *)(
off£t
 + 
HAL_FLASH_PAGE_MAP
) +

74 ((
pg
 % 
HAL_FLASH_PAGE_PER_BANK
Ë* 
HAL_FLASH_PAGE_SIZE
);

75 
uöt8
 
mem˘r
 = 
MEMCTR
;

77 #i‡(!
deföed
 
HAL_OAD_BOOT_CODE
Ë&& (!deföed 
HAL_OTA_BOOT_CODE
)

78 
hÆI¡Sèã_t
 
is
;

81 
pg
 /
HAL_FLASH_PAGE_PER_BANK
;

83 #i‡(!
deföed
 
HAL_OAD_BOOT_CODE
Ë&& (!deföed 
HAL_OTA_BOOT_CODE
)

84 
	`HAL_ENTER_CRITICAL_SECTION
(
is
);

88 
MEMCTR
 = (MEMCTR & 0xF8Ë| 
pg
;

90 
˙t
--)

92 *
buf
++ = *
pD©a
++;

95 
MEMCTR
 = 
mem˘r
;

97 #i‡(!
deföed
 
HAL_OAD_BOOT_CODE
Ë&& (!deföed 
HAL_OTA_BOOT_CODE
)

98 
	`HAL_EXIT_CRITICAL_SECTION
(
is
);

100 
	}
}

120 
	$HÆFœshWrôe
(
uöt16
 
addr
, 
uöt8
 *
buf
, uöt16 
˙t
)

122 #i‡(
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
)

123 
hÆDMADesc_t
 *
ch
 = 
	`HAL_NV_DMA_GET_DESC
();

125 
	`HAL_DMA_SET_SOURCE
(
ch
, 
buf
);

126 
	`HAL_DMA_SET_DEST
(
ch
, &
FWDATA
);

127 
	`HAL_DMA_SET_VLEN
(
ch
, 
HAL_DMA_VLEN_USE_LEN
);

128 
	`HAL_DMA_SET_LEN
(
ch
, (
˙t
 * 
HAL_FLASH_WORD_SIZE
));

129 
	`HAL_DMA_SET_WORD_SIZE
(
ch
, 
HAL_DMA_WORDSIZE_BYTE
);

130 
	`HAL_DMA_SET_TRIG_MODE
(
ch
, 
HAL_DMA_TMODE_SINGLE
);

131 
	`HAL_DMA_SET_TRIG_SRC
(
ch
, 
HAL_DMA_TRIG_FLASH
);

132 
	`HAL_DMA_SET_SRC_INC
(
ch
, 
HAL_DMA_SRCINC_1
);

133 
	`HAL_DMA_SET_DST_INC
(
ch
, 
HAL_DMA_DSTINC_0
);

135 
	`HAL_DMA_SET_IRQ
(
ch
, 
HAL_DMA_IRQMASK_DISABLE
);

136 
	`HAL_DMA_SET_M8
–
ch
, 
HAL_DMA_M8_USE_8_BITS
);

137 
	`HAL_DMA_SET_PRIORITY
(
ch
, 
HAL_DMA_PRI_HIGH
);

138 
	`HAL_DMA_CLEAR_IRQ
(
HAL_NV_DMA_CH
);

139 
	`HAL_DMA_ARM_CH
(
HAL_NV_DMA_CH
);

141 
FADDRL
 = (
uöt8
)
addr
;

142 
FADDRH
 = (
uöt8
)(
addr
 >> 8);

143 
FCTL
 |= 0x02;

144 
FCTL
 & 0x80);

146 
	}
}

164 
	$HÆFœshEø£
(
uöt8
 
pg
)

166 
FADDRH
 = 
pg
 * (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
 / 256);

167 
FCTL
 |= 0x01;

168 
	}
}

	@Components/hal/target/CC2530ZNP/hal_key.c

83 
	~"hÆ_mcu.h
"

84 
	~"hÆ_defs.h
"

85 
	~"hÆ_ty≥s.h
"

86 
	~"hÆ_bﬂrd.h
"

87 
	~"hÆ_drivîs.h
"

88 
	~"hÆ_adc.h
"

89 
	~"hÆ_key.h
"

90 
	~"oßl.h
"

92 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

101 
	#HAL_KEY_RISING_EDGE
 0

	)

102 
	#HAL_KEY_FALLING_EDGE
 1

	)

104 
	#HAL_KEY_DEBOUNCE_VALUE
 25

	)

107 
	#HAL_KEY_CPU_PORT_0_IF
 
P0IF


	)

108 
	#HAL_KEY_CPU_PORT_2_IF
 
P2IF


	)

111 
	#HAL_KEY_SW_6_PORT
 
P0


	)

112 
	#HAL_KEY_SW_6_BIT
 
	`BV
(1)

	)

113 
	#HAL_KEY_SW_6_SEL
 
P0SEL


	)

114 
	#HAL_KEY_SW_6_DIR
 
P0DIR


	)

117 
	#HAL_KEY_SW_6_EDGEBIT
 
	`BV
(0)

	)

118 
	#HAL_KEY_SW_6_EDGE
 
HAL_KEY_FALLING_EDGE


	)

122 
	#HAL_KEY_SW_6_IEN
 
IEN1


	)

123 
	#HAL_KEY_SW_6_IENBIT
 
	`BV
(5Ë

	)

124 
	#HAL_KEY_SW_6_ICTL
 
P0IEN


	)

125 
	#HAL_KEY_SW_6_ICTLBIT
 
	`BV
(1Ë

	)

126 
	#HAL_KEY_SW_6_PXIFG
 
P0IFG


	)

129 
	#HAL_KEY_JOY_MOVE_PORT
 
P2


	)

130 
	#HAL_KEY_JOY_MOVE_BIT
 
	`BV
(0)

	)

131 
	#HAL_KEY_JOY_MOVE_SEL
 
P2SEL


	)

132 
	#HAL_KEY_JOY_MOVE_DIR
 
P2DIR


	)

135 
	#HAL_KEY_JOY_MOVE_EDGEBIT
 
	`BV
(3)

	)

136 
	#HAL_KEY_JOY_MOVE_EDGE
 
HAL_KEY_FALLING_EDGE


	)

139 
	#HAL_KEY_JOY_MOVE_IEN
 
IEN2


	)

140 
	#HAL_KEY_JOY_MOVE_IENBIT
 
	`BV
(1Ë

	)

141 
	#HAL_KEY_JOY_MOVE_ICTL
 
P2IEN


	)

142 
	#HAL_KEY_JOY_MOVE_ICTLBIT
 
	`BV
(0Ë

	)

143 
	#HAL_KEY_JOY_MOVE_PXIFG
 
P2IFG


	)

145 
	#HAL_KEY_JOY_CHN
 
HAL_ADC_CHANNEL_6


	)

156 
uöt8
 
	ghÆKeySavedKeys
;

157 
hÆKeyCBack_t
 
	gpHÆKeyPro˚ssFun˘i⁄
;

158 
uöt8
 
	gHÆKeyC⁄figuªd
;

159 
boﬁ
 
	gHÆ_KeyI¡E«bÀ
;

164 
hÆPro˚ssKeyI¡îru±
();

165 
uöt8
 
hÆGëJoyKeyI≈ut
();

183 
	$HÆKeyInô
( )

186 
hÆKeySavedKeys
 = 0;

188 
HAL_KEY_SW_6_SEL
 &~(
HAL_KEY_SW_6_BIT
);

189 
HAL_KEY_SW_6_DIR
 &~(
HAL_KEY_SW_6_BIT
);

191 
HAL_KEY_JOY_MOVE_SEL
 &~(
HAL_KEY_JOY_MOVE_BIT
);

192 
HAL_KEY_JOY_MOVE_DIR
 &~(
HAL_KEY_JOY_MOVE_BIT
);

196 
pHÆKeyPro˚ssFun˘i⁄
 = 
NULL
;

199 
HÆKeyC⁄figuªd
 = 
FALSE
;

200 
	}
}

213 
	$HÆKeyC⁄fig
 (
boﬁ
 
öãºu±E«bÀ
, 
hÆKeyCBack_t
 
cback
)

216 
HÆ_KeyI¡E«bÀ
 = 
öãºu±E«bÀ
;

219 
pHÆKeyPro˚ssFun˘i⁄
 = 
cback
;

222 i‡(
HÆ_KeyI¡E«bÀ
)

226 
PICTL
 &~(
HAL_KEY_SW_6_EDGEBIT
);

228 #i‡(
HAL_KEY_SW_6_EDGE
 =
HAL_KEY_FALLING_EDGE
)

229 
PICTL
 |
HAL_KEY_SW_6_EDGEBIT
;

238 
HAL_KEY_SW_6_ICTL
 |
HAL_KEY_SW_6_ICTLBIT
;

239 
HAL_KEY_SW_6_IEN
 |
HAL_KEY_SW_6_IENBIT
;

240 
HAL_KEY_SW_6_PXIFG
 = ~(
HAL_KEY_SW_6_BIT
);

246 
HAL_KEY_JOY_MOVE_ICTL
 &~(
HAL_KEY_JOY_MOVE_EDGEBIT
);

248 #i‡(
HAL_KEY_JOY_MOVE_EDGE
 =
HAL_KEY_FALLING_EDGE
)

249 
HAL_KEY_JOY_MOVE_ICTL
 |
HAL_KEY_JOY_MOVE_EDGEBIT
;

258 
HAL_KEY_JOY_MOVE_ICTL
 |
HAL_KEY_JOY_MOVE_ICTLBIT
;

259 
HAL_KEY_JOY_MOVE_IEN
 |
HAL_KEY_JOY_MOVE_IENBIT
;

260 
HAL_KEY_JOY_MOVE_PXIFG
 = ~(
HAL_KEY_JOY_MOVE_BIT
);

264 i‡(
HÆKeyC⁄figuªd
 =
TRUE
)

266 
	`oßl_°›_timîEx
(
HÆ_TaskID
, 
HAL_KEY_EVENT
);

271 
HAL_KEY_SW_6_ICTL
 &~(
HAL_KEY_SW_6_ICTLBIT
);

272 
HAL_KEY_SW_6_IEN
 &~(
HAL_KEY_SW_6_IENBIT
);

274 
	`oßl_£t_evít
(
HÆ_TaskID
, 
HAL_KEY_EVENT
);

278 
HÆKeyC⁄figuªd
 = 
TRUE
;

279 
	}
}

291 
uöt8
 
	$HÆKeyRód
 ( )

293 
uöt8
 
keys
 = 0;

295 i‡(
	`HAL_PUSH_BUTTON1
())

297 
keys
 |
HAL_KEY_SW_6
;

300 i‡((
HAL_KEY_JOY_MOVE_PORT
 & 
HAL_KEY_JOY_MOVE_BIT
))

302 
keys
 |
	`hÆGëJoyKeyI≈ut
();

305  
keys
;

306 
	}
}

318 
	$HÆKeyPﬁl
 ()

320 
uöt8
 
keys
 = 0;

322 i‡((
HAL_KEY_JOY_MOVE_PORT
 & 
HAL_KEY_JOY_MOVE_BIT
))

324 
keys
 = 
	`hÆGëJoyKeyI≈ut
();

330 i‡(!
HÆ_KeyI¡E«bÀ
)

332 i‡(
keys
 =
hÆKeySavedKeys
)

338 
hÆKeySavedKeys
 = 
keys
;

345 i‡(
	`HAL_PUSH_BUTTON1
())

347 
keys
 |
HAL_KEY_SW_6
;

351 i‡(
keys
 && (
pHÆKeyPro˚ssFun˘i⁄
))

353 (
pHÆKeyPro˚ssFun˘i⁄
Ë(
keys
, 
HAL_KEY_STATE_NORMAL
);

355 
	}
}

366 
uöt8
 
	$hÆGëJoyKeyI≈ut
()

371 
uöt8
 
adc
;

372 
uöt8
 
kßve0
 = 0;

373 
uöt8
 
kßve1
;

378 
kßve1
 = 
kßve0
;

380 
adc
 = 
	`HÆAdcRód
 (
HAL_KEY_JOY_CHN
, 
HAL_ADC_RESOLUTION_8
);

382 i‡((
adc
 >= 2) && (adc <= 38))

384 
kßve0
 |
HAL_KEY_UP
;

386 i‡((
adc
 >= 74) && (adc <= 88))

388 
kßve0
 |
HAL_KEY_RIGHT
;

390 i‡((
adc
 >= 60) && (adc <= 73))

392 
kßve0
 |
HAL_KEY_LEFT
;

394 i‡((
adc
 >= 39) && (adc <= 59))

396 
kßve0
 |
HAL_KEY_DOWN
;

398 i‡((
adc
 >= 89) && (adc <= 100))

400 
kßve0
 |
HAL_KEY_CENTER
;

402 } 
kßve0
 !
kßve1
);

404  
kßve0
;

405 
	}
}

421 
	$hÆPro˚ssKeyI¡îru±
 ()

423 
boﬁ
 
vÆid
=
FALSE
;

425 i‡(
HAL_KEY_SW_6_PXIFG
 & 
HAL_KEY_SW_6_BIT
)

427 
HAL_KEY_SW_6_PXIFG
 = ~(
HAL_KEY_SW_6_BIT
);

428 
vÆid
 = 
TRUE
;

431 i‡(
HAL_KEY_JOY_MOVE_PXIFG
 & 
HAL_KEY_JOY_MOVE_BIT
)

433 
HAL_KEY_JOY_MOVE_PXIFG
 = ~(
HAL_KEY_JOY_MOVE_BIT
);

434 
vÆid
 = 
TRUE
;

437 i‡(
vÆid
)

439 
	`oßl_°¨t_timîEx
 (
HÆ_TaskID
, 
HAL_KEY_EVENT
, 
HAL_KEY_DEBOUNCE_VALUE
);

441 
	}
}

452 
	$HÆKeyE¡îSÀï
 ( )

454 
	}
}

465 
uöt8
 
	$HÆKeyExôSÀï
 ( )

468  ( 
	`HÆKeyRód
 () );

469 
	}
}

484 
	$HAL_ISR_FUNCTION
–
hÆKeyP‹t0I§
, 
P0INT_VECTOR
 )

486 
	`HAL_ENTER_ISR
();

488 i‡(
HAL_KEY_SW_6_PXIFG
 & 
HAL_KEY_SW_6_BIT
)

490 
	`hÆPro˚ssKeyI¡îru±
();

497 
HAL_KEY_SW_6_PXIFG
 = 0;

498 
HAL_KEY_CPU_PORT_0_IF
 = 0;

500 
	`CLEAR_SLEEP_MODE
();

501 
	`HAL_EXIT_ISR
();

502 
	}
}

514 
	$HAL_ISR_FUNCTION
–
hÆKeyP‹t2I§
, 
P2INT_VECTOR
 )

516 
	`HAL_ENTER_ISR
();

518 i‡(
HAL_KEY_JOY_MOVE_PXIFG
 & 
HAL_KEY_JOY_MOVE_BIT
)

520 
	`hÆPro˚ssKeyI¡îru±
();

528 
HAL_KEY_JOY_MOVE_PXIFG
 = 0;

529 
HAL_KEY_CPU_PORT_2_IF
 = 0;

531 
	`CLEAR_SLEEP_MODE
();

532 
	`HAL_EXIT_ISR
();

533 
	}
}

538 
	$HÆKeyInô
(){
	}
}

539 
	$HÆKeyC⁄fig
(
boﬁ
 
öãºu±E«bÀ
, 
hÆKeyCBack_t
 
cback
){
	}
}

540 
uöt8
 
	$HÆKeyRód
(){  0;
	}
}

541 
	$HÆKeyPﬁl
(){
	}
}

	@Components/hal/target/CC2530ZNP/hal_lcd.c

43 
	~"hÆ_ty≥s.h
"

44 
	~"hÆ_lcd.h
"

45 
	~"OSAL.h
"

46 
	~"OnBﬂrd.h
"

47 
	~"hÆ_as£π.h
"

49 #i‡
deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

50 
	~"DebugTø˚.h
"

71 
	#HAL_LCD_MODE_PORT
 0

	)

72 
	#HAL_LCD_MODE_PIN
 0

	)

74 
	#HAL_LCD_RESET_PORT
 1

	)

75 
	#HAL_LCD_RESET_PIN
 1

	)

77 
	#HAL_LCD_CS_PORT
 1

	)

78 
	#HAL_LCD_CS_PIN
 2

	)

81 
	#HAL_LCD_CLK_PORT
 1

	)

82 
	#HAL_LCD_CLK_PIN
 5

	)

84 
	#HAL_LCD_MOSI_PORT
 1

	)

85 
	#HAL_LCD_MOSI_PIN
 6

	)

87 
	#HAL_LCD_MISO_PORT
 1

	)

88 
	#HAL_LCD_MISO_PIN
 7

	)

91 
	#HAL_SPI_CLOCK_POL_LO
 0x00

	)

92 
	#HAL_SPI_CLOCK_PHA_0
 0x00

	)

93 
	#HAL_SPI_TRANSFER_MSB_FIRST
 0x20

	)

96 
	#LCD_MAX_LINE_COUNT
 3

	)

97 
	#LCD_MAX_LINE_LENGTH
 16

	)

98 
	#LCD_MAX_BUF
 25

	)

103 
	#OSC_OFF
 0x00

	)

104 
	#OSC_ON
 0x01

	)

105 
	#POWER_SAVE_OFF
 0x00

	)

106 
	#POWER_SAVE_ON
 0x02

	)

107 
	#SET_POWER_SAVE_MODE
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x0C | (›ti⁄s))

	)

110 
	#CGROM
 0x00

	)

111 
	#CGRAM
 0x01

	)

112 
	#COM_FORWARD
 0x00

	)

113 
	#COM_BACKWARD
 0x02

	)

114 
	#TWO_LINE
 0x00

	)

115 
	#THREE_LINE
 0x04

	)

116 
	#FUNCTION_SET
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x10 | (›ti⁄s))

	)

119 
	#LINE1
 0x00

	)

120 
	#LINE2
 0x01

	)

121 
	#LINE3
 0x02

	)

122 
	#LINE4
 0x03

	)

123 
	#SET_DISPLAY_START_LINE
(
löe
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x18 | (löe))

	)

126 
	#BIAS_1_5
 0x00

	)

127 
	#BIAS_1_4
 0x01

	)

128 
	#SET_BIAS_CTRL
(
büs
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x1C | (büs))

	)

131 
	#VOLTAGE_DIVIDER_OFF
 0x00

	)

132 
	#VOLTAGE_DIVIDER_ON
 0x01

	)

133 
	#CONVERTER_AND_REG_OFF
 0x00

	)

134 
	#CONVERTER_AND_REG_ON
 0x04

	)

135 
	#SET_POWER_CTRL
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x20 | (›ti⁄s))

	)

138 
	#DISPLAY_CTRL_ON
 0x01

	)

139 
	#DISPLAY_CTRL_OFF
 0x00

	)

140 
	#DISPLAY_CTRL_BLINK_ON
 0x02

	)

141 
	#DISPLAY_CTRL_BLINK_OFF
 0x00

	)

142 
	#DISPLAY_CTRL_CURSOR_ON
 0x04

	)

143 
	#DISPLAY_CTRL_CURSOR_OFF
 0x00

	)

144 
	#SET_DISPLAY_CTRL
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x28 | (›ti⁄s))

	)

147 
	#SET_DDRAM_ADDR
(
ch¨Index
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x80 | (ch¨Index))

	)

148 
	#SET_GCRAM_CHAR
(
•ecIndex
Ë
	`HÆLcd_HW_C⁄åﬁ
(0xC0 | (•ecIndex))

	)

151 
	#CONTRAST_CTRL_REGISTER
 0x10

	)

152 
	#SET_ICONRAM_ADDR
(
addr
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x40 | (addr))

	)

155 
	#LINE_1_AND_2
 0x01

	)

156 
	#LINE_2_AND_3
 0x02

	)

157 
	#NORMAL_DISPLAY
 0x00

	)

158 
	#SET_DOUBLE_HEIGHT
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x08 | (›ti⁄s))

	)

164 
	#HAL_IO_SET
(
p‹t
, 
pö
, 
vÆ
Ë
	`HAL_IO_SET_PREP
’‹t,Öö, vÆ)

	)

165 
	#HAL_IO_SET_PREP
(
p‹t
, 
pö
, 
vÆ
Ë
	`°
–
P
##p‹t##
_
##pö## = vÆ; )

	)

167 
	#HAL_CONFIG_IO_OUTPUT
(
p‹t
, 
pö
, 
vÆ
Ë
	`HAL_CONFIG_IO_OUTPUT_PREP
’‹t,Öö, vÆ)

	)

168 
	#HAL_CONFIG_IO_OUTPUT_PREP
(
p‹t
, 
pö
, 
vÆ
Ë
	`°
–
P
##p‹t##
SEL
 &~
	`BV
(pin); \

169 
P
##
p‹t
##
_
##
pö
## = 
vÆ
; \

170 
P
##
p‹t
##
DIR
 |
	`BV
(
pö
); )

	)

172 
	#HAL_CONFIG_IO_PERIPHERAL
(
p‹t
, 
pö
Ë
	`HAL_CONFIG_IO_PERIPHERAL_PREP
’‹t,Öö)

	)

173 
	#HAL_CONFIG_IO_PERIPHERAL_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
SEL
 |
	`BV
’ö); )

	)

178 
	#LCD_SPI_BEGIN
(Ë
	`HAL_IO_SET
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 0);

	)

179 
	#LCD_SPI_END
() \

181 
	`asm
("NOP"); \

182 
	`asm
("NOP"); \

183 
	`asm
("NOP"); \

184 
	`asm
("NOP"); \

185 
	`HAL_IO_SET
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 1); \

186 }

	)

188 
	#LCD_SPI_TX
(
x
Ë{ 
U1CSR
 &~(
	`BV
(2Ë| BV(1)); 
U1DBUF
 = x;  !(U1CSR & BV(1)Ë); }

	)

189 
	#LCD_SPI_WAIT_RXRDY
(Ë{ !(
U1CSR
 & 
	`BV
(1))); }

	)

193 
	#LCD_DO_WRITE
(Ë
	`HAL_IO_SET
(
HAL_LCD_MODE_PORT
, 
HAL_LCD_MODE_PIN
, 1);

	)

194 
	#LCD_DO_CONTROL
(Ë
	`HAL_IO_SET
(
HAL_LCD_MODE_PORT
, 
HAL_LCD_MODE_PIN
, 0);

	)

196 
	#LCD_ACTIVATE_RESET
(Ë
	`HAL_IO_SET
(
HAL_LCD_RESET_PORT
, 
HAL_LCD_RESET_PIN
, 0);

	)

197 
	#LCD_RELEASE_RESET
(Ë
	`HAL_IO_SET
(
HAL_LCD_RESET_PORT
, 
HAL_LCD_RESET_PIN
, 1);

	)

199 #i‡(
HAL_LCD
 =
TRUE
)

204 
uöt8
 *
	gLcd_Löe1
;

210 
HÆLcd_HW_Inô
();

211 
HÆLcd_HW_WaôUs
(
uöt16
 
i
);

212 
HÆLcd_HW_CÀ¨
();

213 
HÆLcd_HW_CÀ¨AŒS≥cCh¨s
();

214 
HÆLcd_HW_C⁄åﬁ
(
uöt8
 
cmd
);

215 
HÆLcd_HW_Wrôe
(
uöt8
 
d©a
);

216 
HÆLcd_HW_SëC⁄åa°
(
uöt8
 
vÆue
);

217 
HÆLcd_HW_WrôeCh¨
(
uöt8
 
löe
, uöt8 
cﬁ
, 
ãxt
);

218 
HÆLcd_HW_WrôeLöe
(
uöt8
 
löe
, c⁄° *
pText
);

230 
	$HÆLcdInô
()

232 #i‡(
HAL_LCD
 =
TRUE
)

233 
Lcd_Löe1
 = 
NULL
;

234 
	`HÆLcd_HW_Inô
();

236 
	}
}

266 
	$HÆLcdWrôeSåög
 ( *
°r
, 
uöt8
 
›ti⁄
)

268 #i‡(
HAL_LCD
 =
TRUE
)

270 
uöt8
 
°rLí
 = 0;

271 
uöt8
 
tŸÆLí
 = 0;

272 
uöt8
 *
buf
;

273 
uöt8
 
tmpLí
;

275 i‡–
Lcd_Löe1
 =
NULL
 )

277 
Lcd_Löe1
 = 
	`oßl_mem_Æloc
–
HAL_LCD_MAX_CHARS
+1 );

278 
	`HÆLcdWrôeSåög
( "TexasInstruments", 1 );

281 
°rLí
 = (
uöt8
)
	`oßl_°æí
–(*)
°r
 );

284 i‡–
°rLí
 > 
HAL_LCD_MAX_CHARS
 )

285 
°rLí
 = 
HAL_LCD_MAX_CHARS
;

287 i‡–
›ti⁄
 =
HAL_LCD_LINE_1
 )

290 
	`oßl_mem˝y
–
Lcd_Löe1
, 
°r
, 
°rLí
 );

291 
Lcd_Löe1
[
°rLí
] = '\0';

296 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
Lcd_Löe1
 );

297 
tŸÆLí
 = 
tmpLí
 + 1 + 
°rLí
 + 1;

298 
buf
 = 
	`oßl_mem_Æloc
–
tŸÆLí
 );

299 i‡–
buf
 !
NULL
 )

302 
	`oßl_mem˝y
–
buf
, 
Lcd_Löe1
, 
tmpLí
 );

303 
buf
[
tmpLí
++] = ' ';

304 
	`oßl_mem˝y
–&
buf
[
tmpLí
], 
°r
, 
°rLí
 );

305 
buf
[
tmpLí
+
°rLí
] = '\0';

308 #i‡
	`deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

310 #i‡
	`deföed
(
SERIAL_DEBUG_SUPPORTED
)

311 
	`debug_°r
–(
uöt8
*)
buf
 );

317 
	`oßl_mem_‰ì
–
buf
 );

322 
	`HÆLcd_HW_WrôeLöe
 (
›ti⁄
, 
°r
);

326 
	}
}

339 
	$HÆLcdWrôeVÆue
 ( 
uöt32
 
vÆue
, c⁄° 
uöt8
 
ødix
, uöt8 
›ti⁄
)

341 #i‡(
HAL_LCD
 =
TRUE
)

342 
uöt8
 
buf
[
LCD_MAX_BUF
];

344 
	`_…ﬂ
–
vÆue
, &
buf
[0], 
ødix
 );

345 
	`HÆLcdWrôeSåög
–(*)
buf
, 
›ti⁄
 );

347 
	}
}

359 
	$HÆLcdWrôeS¸ìn
–*
löe1
, *
löe2
 )

361 #i‡(
HAL_LCD
 =
TRUE
)

362 
	`HÆLcdWrôeSåög
–
löe1
, 1 );

363 
	`HÆLcdWrôeSåög
–
löe2
, 2 );

365 
	}
}

379 
	$HÆLcdWrôeSåögVÆue
–*
tôÀ
, 
uöt16
 
vÆue
, 
uöt8
 
f‹m©
, uöt8 
löe
 )

381 #i‡(
HAL_LCD
 =
TRUE
)

382 
uöt8
 
tmpLí
;

383 
uöt8
 
buf
[
LCD_MAX_BUF
];

384 
uöt32
 
îr
;

386 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
tôÀ
 );

387 
	`oßl_mem˝y
–
buf
, 
tôÀ
, 
tmpLí
 );

388 
buf
[
tmpLí
] = ' ';

389 
îr
 = (
uöt32
)(
vÆue
);

390 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
+1], 
f‹m©
 );

391 
	`HÆLcdWrôeSåög
–(*)
buf
, 
löe
 );

393 
	}
}

409 
	$HÆLcdWrôeSåögVÆueVÆue
–*
tôÀ
, 
uöt16
 
vÆue1
, 
uöt8
 
f‹m©1
,

410 
uöt16
 
vÆue2
, 
uöt8
 
f‹m©2
, uöt8 
löe
 )

413 #i‡(
HAL_LCD
 =
TRUE
)

415 
uöt8
 
tmpLí
;

416 
uöt8
 
buf
[
LCD_MAX_BUF
];

417 
uöt32
 
îr
;

419 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
tôÀ
 );

420 i‡–
tmpLí
 )

422 
	`oßl_mem˝y
–
buf
, 
tôÀ
, 
tmpLí
 );

423 
buf
[
tmpLí
++] = ' ';

426 
îr
 = (
uöt32
)(
vÆue1
);

427 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
], 
f‹m©1
 );

428 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
buf
 );

430 
buf
[
tmpLí
++] = ',';

431 
buf
[
tmpLí
++] = ' ';

432 
îr
 = (
uöt32
)(
vÆue2
);

433 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
], 
f‹m©2
 );

435 
	`HÆLcdWrôeSåög
–(*)
buf
, 
löe
 );

438 
	}
}

450 
	$HÆLcdDi•œyPî˚¡B¨
–*
tôÀ
, 
uöt8
 
vÆue
 )

452 #i‡(
HAL_LCD
 =
TRUE
)

454 
uöt8
 
≥r˚¡
;

455 
uöt8
 
À·Ovî
;

456 
uöt8
 
buf
[17];

457 
uöt32
 
îr
;

458 
uöt8
 
x
;

461 
	`HÆLcdWrôeSåög
–
tôÀ
, 
HAL_LCD_LINE_1
 );

463 i‡–
vÆue
 > 100 )

464 
vÆue
 = 100;

467 
≥r˚¡
 = (
uöt8
)(
vÆue
 / 10);

468 
À·Ovî
 = (
uöt8
)(
vÆue
 % 10);

471 
	`oßl_mem˝y
–
buf
, "[ ] ", 15 );

473  
x
 = 0; x < 
≥r˚¡
; x ++ )

475 
buf
[1+
x
] = '>';

478 i‡–
À·Ovî
 >= 5 )

479 
buf
[1+
x
] = '+';

481 
îr
 = (
uöt32
)
vÆue
;

482 
	`_…ﬂ
–
îr
, (
uöt8
*)&
buf
[13], 10 );

484 
	`HÆLcdWrôeSåög
–(*)
buf
, 
HAL_LCD_LINE_2
 );

488 
	}
}

490 #i‡(
HAL_LCD
 =
TRUE
)

504 
	$hÆLcd_C⁄figIO
()

507 
	`HAL_CONFIG_IO_OUTPUT
(
HAL_LCD_MODE_PORT
, 
HAL_LCD_MODE_PIN
, 1);

508 
	`HAL_CONFIG_IO_OUTPUT
(
HAL_LCD_RESET_PORT
, 
HAL_LCD_RESET_PIN
, 1);

509 
	`HAL_CONFIG_IO_OUTPUT
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 1);

510 
	}
}

521 
	$hÆLcd_C⁄figSPI
()

525 
uöt8
 
baud_exp⁄ít
;

526 
uöt8
 
baud_m™tisß
;

529 
PERCFG
 |= 0x02;

532 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_CLK_PORT
, 
HAL_LCD_CLK_PIN
);

533 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_MOSI_PORT
, 
HAL_LCD_MOSI_PIN
);

534 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_MISO_PORT
, 
HAL_LCD_MISO_PIN
);

540 
baud_exp⁄ít
 = 15;

541 
baud_m™tisß
 = 0;

544 
U1UCR
 = 0x80;

545 
U1CSR
 = 0x00;

546 
U1GCR
 = 
HAL_SPI_TRANSFER_MSB_FIRST
 | 
HAL_SPI_CLOCK_PHA_0
 | 
HAL_SPI_CLOCK_POL_LO
 | 
baud_exp⁄ít
;

547 
U1BAUD
 = 
baud_m™tisß
;

548 
	}
}

559 
	$HÆLcd_HW_Inô
()

562 
	`hÆLcd_C⁄figIO
();

565 
	`hÆLcd_C⁄figSPI
();

568 
	`LCD_ACTIVATE_RESET
();

569 
	`HÆLcd_HW_WaôUs
(15000);

570 
	`LCD_RELEASE_RESET
();

571 
	`HÆLcd_HW_WaôUs
(15);

574 
	`FUNCTION_SET
(
CGRAM
 | 
COM_FORWARD
 | 
THREE_LINE
);

577 
	`HÆLcd_HW_SëC⁄åa°
(15);

580 
	`SET_POWER_SAVE_MODE
(
OSC_OFF
 | 
POWER_SAVE_ON
);

581 
	`SET_POWER_CTRL
(
VOLTAGE_DIVIDER_ON
 | 
CONVERTER_AND_REG_ON
);

582 
	`SET_BIAS_CTRL
(
BIAS_1_5
);

583 
	`HÆLcd_HW_WaôUs
(21000);

586 
	`HÆLcd_HW_CÀ¨
();

587 
	`HÆLcd_HW_CÀ¨AŒS≥cCh¨s
();

588 
	`SET_DISPLAY_CTRL
(
DISPLAY_CTRL_ON
 | 
DISPLAY_CTRL_BLINK_OFF
 | 
DISPLAY_CTRL_CURSOR_OFF
);

589 
	}
}

600 
	$HÆLcd_HW_C⁄åﬁ
(
uöt8
 
cmd
)

602 
	`LCD_SPI_BEGIN
();

603 
	`LCD_DO_CONTROL
();

604 
	`LCD_SPI_TX
(
cmd
);

605 
	`LCD_SPI_WAIT_RXRDY
();

606 
	`LCD_SPI_END
();

607 
	}
}

618 
	$HÆLcd_HW_Wrôe
(
uöt8
 
d©a
)

620 
	`LCD_SPI_BEGIN
();

621 
	`LCD_DO_WRITE
();

622 
	`LCD_SPI_TX
(
d©a
);

623 
	`LCD_SPI_WAIT_RXRDY
();

624 
	`LCD_SPI_END
();

625 
	}
}

636 
	$HÆLcd_HW_SëC⁄åa°
(
uöt8
 
vÆue
)

638 
	`SET_ICONRAM_ADDR
(
CONTRAST_CTRL_REGISTER
);

639 
	`HÆLcd_HW_Wrôe
(
vÆue
);

640 
	}
}

651 
	$HÆLcd_HW_CÀ¨
()

653 
uöt8
 
n
;

655 
	`SET_DDRAM_ADDR
(0x00);

656 
n
 = 0;Ç < (
LCD_MAX_LINE_COUNT
 * 
LCD_MAX_LINE_LENGTH
);Ç++)

658 
	`HÆLcd_HW_Wrôe
(' ');

660 
	}
}

671 
	$HÆLcd_HW_CÀ¨AŒS≥cCh¨s
()

673 
uöt8
 
n
 = 0;

675 
	`SET_GCRAM_CHAR
(0);

676 
n
 = 0;Ç < (8 * 8);Ç++)

678 
	`HÆLcd_HW_Wrôe
(0x00);

680 
	}
}

692 
	$HÆLcd_HW_WrôeCh¨
(
uöt8
 
löe
, uöt8 
cﬁ
, 
ãxt
)

694 i‡(
cﬁ
 < 
LCD_MAX_LINE_LENGTH
)

696 
	`SET_DDRAM_ADDR
((
löe
 - 1Ë* 
LCD_MAX_LINE_LENGTH
 + 
cﬁ
);

697 
	`HÆLcd_HW_Wrôe
(
ãxt
);

703 
	}
}

715 
	$HÆLcd_HW_WrôeLöe
(
uöt8
 
löe
, c⁄° *
pText
)

717 
uöt8
 
cou¡
;

718 
uöt8
 
tŸÆLígth
 = (uöt8)
	`oßl_°æí
–(*)
pText
 );

721 
cou¡
=0; cou¡<
tŸÆLígth
; count++)

723 
	`HÆLcd_HW_WrôeCh¨
(
löe
, 
cou¡
, (*(
pText
++)));

727 
cou¡
=
tŸÆLígth
; cou¡<
LCD_MAX_LINE_LENGTH
;count++)

729 
	`HÆLcd_HW_WrôeCh¨
(
löe
, 
cou¡
, ' ');

731 
	}
}

742 
	$HÆLcd_HW_WaôUs
(
uöt16
 
mi¸oSecs
)

744 
mi¸oSecs
--)

747 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

748 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

749 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

750 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

751 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

752 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

753 
	`asm
("nop");ásm("nop");

755 
	}
}

	@Components/hal/target/CC2530ZNP/hal_led.c

43 
	~"hÆ_mcu.h
"

44 
	~"hÆ_defs.h
"

45 
	~"hÆ_ty≥s.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"hÆ_Àd.h
"

48 
	~"oßl.h
"

49 
	~"hÆ_bﬂrd.h
"

64 
uöt8
 
	mmode
;

65 
uöt8
 
	mtodo
;

66 
uöt8
 
	m⁄P˘
;

67 
uöt16
 
	mtime
;

68 
uöt32
 
	m√xt
;

69 } 
	tHÆLedC⁄åﬁ_t
;

73 
HÆLedC⁄åﬁ_t
 
	mHÆLedC⁄åﬁTabÀ
[
HAL_LED_DEFAULT_MAX_LEDS
];

74 
uöt8
 
	m¶ìpA˘ive
;

75 } 
	tHÆLedSètus_t
;

83 
uöt8
 
	gHÆLedSèã
;

85 #i‡
HAL_LED
 =
TRUE


86 
uöt8
 
	gHÆSÀïLedSèã
;

87 
uöt8
 
	g¥eBlökSèã
;

91 #ifde‡
BLINK_LEDS


92 
HÆLedSètus_t
 
	gHÆLedSètusC⁄åﬁ
;

98 #i‡(
HAL_LED
 =
TRUE
)

99 
HÆLedUpd©e
 ();

100 
HÆLedOnOff
 (
uöt8
 
Àds
, uöt8 
mode
);

116 
	$HÆLedInô
 ()

118 #i‡(
HAL_LED
 =
TRUE
)

120 
	`HÆLedSë
 (
HAL_LED_ALL
, 
HAL_LED_MODE_OFF
);

122 #ifde‡
BLINK_LEDS


124 
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
 = 
FALSE
;

126 
	}
}

137 
uöt8
 
	$HÆLedSë
 (
uöt8
 
Àds
, uöt8 
mode
)

140 #i‡(
	`deföed
 (
BLINK_LEDS
)Ë&& (
HAL_LED
 =
TRUE
)

141 
uöt8
 
Àd
;

142 
HÆLedC⁄åﬁ_t
 *
°s
;

144 
mode
)

146 
HAL_LED_MODE_BLINK
:

148 
	`HÆLedBlök
 (
Àds
, 1, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
);

151 
HAL_LED_MODE_FLASH
:

153 
	`HÆLedBlök
 (
Àds
, 
HAL_LED_DEFAULT_FLASH_COUNT
, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
);

156 
HAL_LED_MODE_ON
:

157 
HAL_LED_MODE_OFF
:

158 
HAL_LED_MODE_TOGGLE
:

160 
Àd
 = 
HAL_LED_1
;

161 
Àds
 &
HAL_LED_ALL
;

162 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

164 
Àds
)

166 i‡(
Àds
 & 
Àd
)

168 i‡(
mode
 !
HAL_LED_MODE_TOGGLE
)

170 
°s
->
mode
 = mode;

174 
°s
->
mode
 ^
HAL_LED_MODE_ON
;

176 
	`HÆLedOnOff
 (
Àd
, 
°s
->
mode
);

177 
Àds
 ^
Àd
;

179 
Àd
 <<= 1;

180 
°s
++;

188 #ñi‡(
HAL_LED
 =
TRUE
)

189 
	`LedOnOff
(
Àds
, 
mode
);

192 (Ë
Àds
;

193 (Ë
mode
;

196  ( 
HÆLedSèã
 );

198 
	}
}

213 
	$HÆLedBlök
 (
uöt8
 
Àds
, uöt8 
numBlöks
, uöt8 
≥r˚¡
, 
uöt16
 
≥riod
)

215 #i‡(
	`deföed
 (
BLINK_LEDS
)Ë&& (
HAL_LED
 =
TRUE
)

216 
uöt8
 
Àd
;

217 
HÆLedC⁄åﬁ_t
 *
°s
;

219 i‡(
Àds
 && 
≥r˚¡
 && 
≥riod
)

221 i‡(
≥r˚¡
 < 100)

223 
Àd
 = 
HAL_LED_1
;

224 
Àds
 &
HAL_LED_ALL
;

225 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

227 
Àds
)

229 i‡(
Àds
 & 
Àd
)

232 if(
°s
->
mode
 < 
HAL_LED_MODE_BLINK
 )

233 
¥eBlökSèã
 |(
Àd
 & 
HÆLedSèã
);

235 
°s
->
mode
 = 
HAL_LED_MODE_OFF
;

236 
°s
->
time
 = 
≥riod
;

237 
°s
->
⁄P˘
 = 
≥r˚¡
;

238 
°s
->
todo
 = 
numBlöks
;

239 i‡(!
numBlöks
Ë
°s
->
mode
 |
HAL_LED_MODE_FLASH
;

240 
°s
->
√xt
 = 
	`oßl_GëSy°emClock
();

241 
°s
->
mode
 |
HAL_LED_MODE_BLINK
;

242 
Àds
 ^
Àd
;

244 
Àd
 <<= 1;

245 
°s
++;

248 
	`oßl_°›_timîEx
(
HÆ_TaskID
, 
HAL_LED_BLINK_EVENT
);

249 
	`oßl_£t_evít
 (
HÆ_TaskID
, 
HAL_LED_BLINK_EVENT
);

253 
	`HÆLedSë
 (
Àds
, 
HAL_LED_MODE_ON
);

258 
	`HÆLedSë
 (
Àds
, 
HAL_LED_MODE_OFF
);

260 #ñi‡(
HAL_LED
 =
TRUE
)

261 
≥r˚¡
 = (
Àds
 & 
HÆLedSèã
Ë? 
HAL_LED_MODE_OFF
 : 
HAL_LED_MODE_ON
;

262 
	`HÆLedOnOff
 (
Àds
, 
≥r˚¡
);

265 (Ë
Àds
;

266 (Ë
numBlöks
;

267 (Ë
≥r˚¡
;

268 (Ë
≥riod
;

270 
	}
}

272 #i‡(
HAL_LED
 =
TRUE
)

282 
	$HÆLedUpd©e
 ()

284 
uöt8
 
Àd
;

285 
uöt8
 
p˘
;

286 
uöt8
 
Àds
;

287 
HÆLedC⁄åﬁ_t
 *
°s
;

288 
uöt32
 
time
;

289 
uöt16
 
√xt
;

290 
uöt16
 
waô
;

292 
√xt
 = 0;

293 
Àd
 = 
HAL_LED_1
;

294 
Àds
 = 
HAL_LED_ALL
;

295 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

298 i‡(!
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
)

300 
Àds
)

302 i‡(
Àds
 & 
Àd
)

304 i‡(
°s
->
mode
 & 
HAL_LED_MODE_BLINK
)

306 
time
 = 
	`oßl_GëSy°emClock
();

307 i‡(
time
 >
°s
->
√xt
)

309 i‡(
°s
->
mode
 & 
HAL_LED_MODE_ON
)

311 
p˘
 = 100 - 
°s
->
⁄P˘
;

312 
°s
->
mode
 &~
HAL_LED_MODE_ON
;

313 
	`HÆLedOnOff
 (
Àd
, 
HAL_LED_MODE_OFF
);

315 i‡(!(
°s
->
mode
 & 
HAL_LED_MODE_FLASH
))

317 
°s
->
todo
--;

320 i‡–(!
°s
->
todo
Ë&& !(°s->
mode
 & 
HAL_LED_MODE_FLASH
) )

322 
°s
->
mode
 ^
HAL_LED_MODE_BLINK
;

326 
p˘
 = 
°s
->
⁄P˘
;

327 
°s
->
mode
 |
HAL_LED_MODE_ON
;

328 
	`HÆLedOnOff
 (
Àd
, 
HAL_LED_MODE_ON
);

330 i‡(
°s
->
mode
 & 
HAL_LED_MODE_BLINK
)

332 
waô
 = (((
uöt32
)
p˘
 * (uöt32)
°s
->
time
) / 100);

333 
°s
->
√xt
 = 
time
 + 
waô
;

338 
waô
 = 0;

340 
	`HÆLedSë
 (
Àd
, ((
¥eBlökSèã
 &Üed)!=0)?
HAL_LED_MODE_ON
:
HAL_LED_MODE_OFF
);

342 
¥eBlökSèã
 &(
Àd
 ^ 0xFF);

347 
waô
 = 
°s
->
√xt
 - 
time
;

350 i‡(!
√xt
 || ( 
waô
 && (wait <Çext) ))

352 
√xt
 = 
waô
;

355 
Àds
 ^
Àd
;

357 
Àd
 <<= 1;

358 
°s
++;

361 i‡(
√xt
)

363 
	`oßl_°¨t_timîEx
(
HÆ_TaskID
, 
HAL_LED_BLINK_EVENT
, 
√xt
);

366 
	}
}

378 
	$HÆLedOnOff
 (
uöt8
 
Àds
, uöt8 
mode
)

380 i‡(
Àds
 & 
HAL_LED_1
)

382 i‡(
mode
 =
HAL_LED_MODE_ON
)

384 
	`HAL_TURN_ON_LED1
();

388 
	`HAL_TURN_OFF_LED1
();

392 i‡(
Àds
 & 
HAL_LED_2
)

394 i‡(
mode
 =
HAL_LED_MODE_ON
)

396 
	`HAL_TURN_ON_LED2
();

400 
	`HAL_TURN_OFF_LED2
();

404 i‡(
Àds
 & 
HAL_LED_3
)

406 i‡(
mode
 =
HAL_LED_MODE_ON
)

408 
	`HAL_TURN_ON_LED3
();

412 
	`HAL_TURN_OFF_LED3
();

416 i‡(
Àds
 & 
HAL_LED_4
)

418 i‡(
mode
 =
HAL_LED_MODE_ON
)

420 
	`HAL_TURN_ON_LED4
();

424 
	`HAL_TURN_OFF_LED4
();

429 i‡(
mode
)

431 
HÆLedSèã
 |
Àds
;

435 
HÆLedSèã
 &(
Àds
 ^ 0xFF);

437 
	}
}

449 
uöt8
 
	$HÆLedGëSèã
 ()

451 #i‡(
HAL_LED
 =
TRUE
)

452  
HÆLedSèã
;

456 
	}
}

467 
	$HÆLedE¡îSÀï
( )

469 #ifde‡
BLINK_LEDS


471 
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
 = 
TRUE
;

474 #i‡(
HAL_LED
 =
TRUE
)

476 
HÆSÀïLedSèã
 = 0;

477 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED1
();

478 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED2
() << 1;

479 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED3
() << 2;

480 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED4
() << 3;

483 
	`HÆLedOnOff
 (
HAL_LED_ALL
, 
HAL_LED_MODE_OFF
);

486 
	}
}

497 
	$HÆLedExôSÀï
( )

499 #i‡(
HAL_LED
 =
TRUE
)

501 
	`HÆLedOnOff
(
HÆSÀïLedSèã
, 
HAL_LED_MODE_ON
);

504 
	`HÆLedUpd©e
();

507 #ifde‡
BLINK_LEDS


509 
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
 = 
FALSE
;

511 
	}
}

	@Components/hal/target/CC2530ZNP/hal_mac_cfg.h

40 #i‚de‡
HAL_MAC_CFG_H


41 
	#HAL_MAC_CFG_H


	)

57 
	#HAL_MAC_RSSI_OFFSET
 -73

	)

58 #i‡
deföed
 (
HAL_PA_LNA
)

60 
	#HAL_MAC_RSSI_LNA_HGM_OFFSET
 -9

	)

61 
	#HAL_MAC_RSSI_LNA_LGM_OFFSET
 4

	)

62 #ñi‡
deföed
 (
HAL_PA_LNA_CC2590
)

64 
	#HAL_MAC_RSSI_LNA_HGM_OFFSET
 -10

	)

65 
	#HAL_MAC_RSSI_LNA_LGM_OFFSET
 0

	)

	@Components/hal/target/CC2530ZNP/hal_mcu.h

40 #i‚de‡
_HAL_MCU_H


41 
	#_HAL_MCU_H


	)

53 
	~"hÆ_defs.h
"

54 
	~"hÆ_ty≥s.h
"

61 
	#HAL_MCU_CC2530


	)

70 #ifde‡
__IAR_SYSTEMS_ICC__


71 
	~<ioCC2530.h
>

72 
	#HAL_COMPILER_IAR


	)

73 
	#HAL_MCU_LITTLE_ENDIAN
(Ë
__LITTLE_ENDIAN__


	)

74 
	#_PRAGMA
(
x
Ë
	`_Pøgma
(#x)

	)

75 
	#HAL_ISR_FUNC_DECLARATION
(
f
,
v
Ë
	`_PRAGMA
(
ve˘‹
=vË
__√¨_func
 
__öãºu±
 
	`f
()

	)

76 
	#HAL_ISR_FUNC_PROTOTYPE
(
f
,
v
Ë
	`_PRAGMA
(
ve˘‹
=vË
__√¨_func
 
__öãºu±
 
	`f
()

	)

77 
	#HAL_ISR_FUNCTION
(
f
,
v
Ë
	`HAL_ISR_FUNC_PROTOTYPE
(f,v); 
	`HAL_ISR_FUNC_DECLARATION
(f,v)

	)

80 #ñi‡
deföed
 
__KEIL__


81 
	~<CC2530.h
>

82 
	#HAL_COMPILER_KEIL


	)

83 
	#HAL_MCU_LITTLE_ENDIAN
(Ë0

	)

84 
	#HAL_ISR_FUNC_DECLARATION
(
f
,
v
Ë
	`f
(Ë
öãºu±
 
	)
v

85 
	#HAL_ISR_FUNC_PROTOTYPE
(
f
,
v
Ë
	`f
()

	)

86 
	#HAL_ISR_FUNCTION
(
f
,
v
Ë
	`HAL_ISR_FUNC_PROTOTYPE
(f,v); 
	`HAL_ISR_FUNC_DECLARATION
(f,v)

	)

98 
	#HAL_ENABLE_INTERRUPTS
(Ë
	`°
–
EA
 = 1; )

	)

99 
	#HAL_DISABLE_INTERRUPTS
(Ë
	`°
–
EA
 = 0; )

	)

100 
	#HAL_INTERRUPTS_ARE_ENABLED
(Ë(
EA
)

	)

102 
	thÆI¡Sèã_t
;

103 
	#HAL_ENTER_CRITICAL_SECTION
(
x
Ë
	`°
–x = 
EA
; 
	`HAL_DISABLE_INTERRUPTS
(); )

	)

104 
	#HAL_EXIT_CRITICAL_SECTION
(
x
Ë
	`°
–
EA
 = x; )

	)

105 
	#HAL_CRITICAL_STATEMENT
(
x
Ë
	`°
–
hÆI¡Sèã_t
 
_s
; 
	`HAL_ENTER_CRITICAL_SECTION
(_s); x; 
	`HAL_EXIT_CRITICAL_SECTION
(_s); )

	)

107 #ifde‡
__IAR_SYSTEMS_ICC__


113 
	#HAL_ENTER_ISR
(Ë{ 
hÆI¡Sèã_t
 
_i§I¡Sèã
 = 
EA
; 
	`HAL_ENABLE_INTERRUPTS
();

	)

114 
	#HAL_EXIT_ISR
(Ë
EA
 = 
_i§I¡Sèã
; }

	)

116 
	#HAL_ENTER_ISR
()

	)

117 
	#HAL_EXIT_ISR
()

	)

124 
	#WD_EN
 
	`BV
(3)

	)

125 
	#WD_MODE
 
	`BV
(2)

	)

126 
	#WD_INT_1900_USEC
 (
	`BV
(0Ë| BV(1))

	)

127 
	#WD_RESET1
 (0xA0 | 
WD_EN
 | 
WD_INT_1900_USEC
)

	)

128 
	#WD_RESET2
 (0x50 | 
WD_EN
 | 
WD_INT_1900_USEC
)

	)

129 
	#WD_KICK
(Ë
	`°
–
WDCTL
 = (0xA0 | WDCTL & 0x0F); WDCTL = (0x50 | WDCTL & 0x0F); )

	)

132 
	#HAL_SYSTEM_RESET
(Ë
	`°
–
	`HAL_DISABLE_INTERRUPTS
(); 
WDCTL
 = 
WD_RESET1
; WDCTL = 
WD_RESET2
; ;;); )

	)

138 
	#REV_A
 0x00

	)

139 
	#REV_B
 0x11

	)

140 
	#REV_C
 0x20

	)

141 
	#REV_D
 0x21

	)

149 
	#PCON_IDLE
 
	`BV
(0Ë

	)

152 
	#OSC_PD
 
	`BV
(2Ë

	)

153 
	#PMODE
 (
	`BV
(1Ë| BV(0)Ë

	)

156 
	#XOSC_STB
 
	`BV
(6Ë

	)

157 
	#HFRC_STB
 
	`BV
(5Ë

	)

160 
	#OSC_PD
 
	`BV
(2Ë

	)

164 
	#OSC
 
	`BV
(6)

	)

165 
	#TICKSPD
(
x
Ë(x << 3)

	)

166 
	#CLKSPD
(
x
Ë(x << 0)

	)

167 
	#CLKCONCMD_32MHZ
 (0)

	)

168 
	#CLKCONCMD_16MHZ
 (
	`CLKSPD
(1Ë| 
	`TICKSPD
(1Ë| 
OSC
)

	)

171 
	#LDRDY
 
	`BV
(0Ë

	)

175 #ifde‡
POWER_SAVING


176 vﬁ©ûê
__d©a
 
uöt8
 
hÆSÀïPc⁄VÆue
;

181 
	#CLEAR_SLEEP_MODE
(Ë
	`°
–
hÆSÀïPc⁄VÆue
 = 0; )

	)

182 
	#ALLOW_SLEEP_MODE
(Ë
	`°
–
hÆSÀïPc⁄VÆue
 = 
PCON_IDLE
; )

	)

184 
	#CLEAR_SLEEP_MODE
()

	)

185 
	#ALLOW_SLEEP_MODE
()

	)

	@Components/hal/target/CC2530ZNP/hal_oad.c

48 
	~"comdef.h
"

49 
	~"hÆ_bﬂrd_cfg.h
"

50 
	~"hÆ_dma.h
"

51 
	~"hÆ_Êash.h
"

52 
	~"hÆ_ﬂd.h
"

53 
	~"hÆ_ty≥s.h
"

60 #i‡
HAL_OAD_BOOT_CODE


61 
hÆDMADesc_t
 
	gdmaCh0
;

69 
uöt16
 
runPﬁy
(uöt16 
¸c
, 
uöt8
 
vÆ
);

70 #i‡
HAL_OAD_XNV_IS_SPI


71 
HÆSPIRód
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
);

72 
HÆSPIWrôe
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
);

75 #i‡
HAL_OAD_BOOT_CODE


76 
vddWaô
(
uöt8
 
vdd
);

77 
dl2rc
();

78 
uöt16
 
¸cCÆc
();

96 #¥agm®
loˇti⁄
="NEAR_CODE"

97 
	$maö
()

99 
	`HAL_BOARD_INIT
();

100 
	`vddWaô
(
VDD_MIN_RUN
);

102 #i‡
HAL_OAD_XNV_IS_SPI


103 
	`XNV_SPI_INIT
();

108 
	`HAL_DMA_SET_ADDR_DESC0
–&
dmaCh0
 );

112 
uöt16
 
¸c
[2];

114 
	`HÆFœshRód
(
HAL_OAD_CRC_ADDR
 / 
HAL_FLASH_PAGE_SIZE
,

115 
HAL_OAD_CRC_ADDR
 % 
HAL_FLASH_PAGE_SIZE
,

116 (
uöt8
 *)
¸c
, (crc));

118 i‡(
¸c
[0] == crc[1])

122 i‡((
¸c
[0] !0Ë&& (¸c[0] =
	`¸cCÆc
()))

124 
¸c
[1] = crc[0];

125 
	`HÆFœshWrôe
((
HAL_OAD_CRC_ADDR
 / 
HAL_FLASH_WORD_SIZE
), (
uöt8
 *)
¸c
, 1);

129 
	`dl2rc
();

134 
	`asm
("LJMP 0x800\n");

135 
	}
}

146 
	$vddWaô
(
uöt8
 
vdd
)

148 
uöt8
 
˙t
 = 16;

152 
ADCCON3
 = 0x0F;

153 !(
ADCCON1
 & 0x80));

154 } 
ADCH
 < 
vdd
);

155 } --
˙t
);

156 
	}
}

169 
	$dl2rc
()

171 
¥ómbÀ_t
 
¥ómbÀ
;

172 
uöt32
 
o£t
;

173 
uöt16
 
addr
 = 
HAL_OAD_RC_START
 / 
HAL_FLASH_WORD_SIZE
;

174 
uöt8
 
buf
[4];

176 
	`vddWaô
(
VDD_MIN_OAD
);

177 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_DL
);

179 
o£t
 = 0; o£à< 
¥ómbÀ
.
Àn
; o£à+
HAL_FLASH_WORD_SIZE
)

181 
	`HÆOADRód
(
o£t
, 
buf
, 
HAL_FLASH_WORD_SIZE
, 
HAL_OAD_DL
);

182 i‡((
addr
 % (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
)) == 0)

184 
	`HÆFœshEø£
(
addr
 / (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
));

186 
	`HÆFœshWrôe
(
addr
++, 
buf
, 1);

188 
	}
}

199 
uöt16
 
	$¸cCÆc
()

201 
¥ómbÀ_t
 
¥ómbÀ
;

202 
uöt32
 
o£t
;

203 
uöt16
 
¸c
 = 0;

205 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_RC
);

206 i‡(
¥ómbÀ
.
Àn
 > 
HAL_OAD_DL_SIZE
)

212 
o£t
 = 0; o£à< 
¥ómbÀ
.
Àn
; oset++)

214 i‡(
o£t
 =
HAL_OAD_CRC_OSET
)

216 
o£t
 += 3;

220 
uöt8
 
buf
;

221 
	`HÆOADRód
(
o£t
, &
buf
, 1, 
HAL_OAD_RC
);

222 
¸c
 = 
	`runPﬁy
(¸c, 
buf
);

227 
¸c
 = 
	`runPﬁy
(crc, 0);

228 
¸c
 = 
	`runPﬁy
(crc, 0);

230  
¸c
;

231 
	}
}

244 
uöt16
 
	$runPﬁy
(
uöt16
 
¸c
, 
uöt8
 
vÆ
)

246 c⁄° 
uöt16
 
pﬁy
 = 0x1021;

247 
uöt8
 
˙t
;

249 
˙t
 = 0; c¡ < 8; c¡++, 
vÆ
 <<= 1)

251 
uöt8
 
msb
 = (
¸c
 & 0x8000) ? 1 : 0;

253 
¸c
 <<= 1;

254 i‡(
vÆ
 & 0x80Ë
¸c
 |= 0x0001;

255 i‡(
msb
Ë
¸c
 ^
pﬁy
;

258  
¸c
;

259 
	}
}

270 
uöt8
 
	$HÆOADChkDL
(
uöt8
 
dlImagePªambÀOff£t
)

272 
¥ómbÀ_t
 
¥ómbÀ
;

273 
uöt32
 
o£t
;

274 
uöt16
 
¸c
 = 0, 
¸c2
;

276 
	`HÆOADRód
(
dlImagePªambÀOff£t
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_DL
);

279 
o£t
 = 0; o£à< 
¥ómbÀ
.
Àn
; oset++)

281 i‡((
o£t
 < 
HAL_OAD_CRC_OSET
) || (oset >= HAL_OAD_CRC_OSET+4))

283 
uöt8
 
buf
;

284 
	`HÆOADRód
(
o£t
, &
buf
, 1, 
HAL_OAD_DL
);

285 
¸c
 = 
	`runPﬁy
(¸c, 
buf
);

290 
¸c
 = 
	`runPﬁy
(crc, 0);

291 
¸c
 = 
	`runPﬁy
(crc, 0);

293 
	`HÆOADRód
(
HAL_OAD_CRC_OSET
, (
uöt8
 *)&
¸c2
, (¸c2), 
HAL_OAD_DL
);

294  (
¸c2
 =
¸c
Ë? 
SUCCESS
 : 
FAILURE
;

295 
	}
}

307 
	$HÆOADInvRC
()

309 
uöt16
 
¸c
[2] = {0,0xFFFF};

310 
	`HÆFœshWrôe
((
HAL_OAD_CRC_ADDR
 / 
HAL_FLASH_WORD_SIZE
), (
uöt8
 *)
¸c
, 1);

311 
	}
}

325 
	$HÆOADRód
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
)

327 i‡(
HAL_OAD_RC
 !
ty≥
)

329 #i‡
HAL_OAD_XNV_IS_INT


330 
¥ómbÀ_t
 
¥ómbÀ
;

332 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_RC
);

334 
o£t
 +
HAL_OAD_RC_START
 + 
HAL_OAD_DL_OSET
;

335 #ñi‡
HAL_OAD_XNV_IS_SPI


336 
o£t
 +
HAL_OAD_DL_OSET
;

337 
	`HÆSPIRód
(
o£t
, 
pBuf
, 
Àn
);

343 
o£t
 +
HAL_OAD_RC_START
;

346 
	`HÆFœshRód
(
o£t
 / 
HAL_FLASH_PAGE_SIZE
, o£à% HAL_FLASH_PAGE_SIZE, 
pBuf
, 
Àn
);

347 
	}
}

366 
	$HÆOADWrôe
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
)

368 i‡(
HAL_OAD_RC
 !
ty≥
)

370 #i‡
HAL_OAD_XNV_IS_INT


371 
¥ómbÀ_t
 
¥ómbÀ
;

373 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_RC
);

375 
o£t
 +
HAL_OAD_RC_START
 + 
HAL_OAD_DL_OSET
;

376 #ñi‡
HAL_OAD_XNV_IS_SPI


377 
o£t
 +
HAL_OAD_DL_OSET
;

378 
	`HÆSPIWrôe
(
o£t
, 
pBuf
, 
Àn
);

384 
o£t
 +
HAL_OAD_RC_START
;

387 i‡((
o£t
 % 
HAL_FLASH_PAGE_SIZE
) == 0)

389 
	`HÆFœshEø£
(
o£t
 / 
HAL_FLASH_PAGE_SIZE
);

392 
	`HÆFœshWrôe
(
o£t
 / 
HAL_FLASH_WORD_SIZE
, 
pBuf
, 
Àn
 / HAL_FLASH_WORD_SIZE);

393 
	}
}

395 #i‡
HAL_OAD_XNV_IS_INT


405 
uöt32
 
	$HÆOADAvaû
()

413  
HAL_OAD_DL_MAX
 - 
HAL_OAD_DL_OSET
;

414 
	}
}

416 #ñi‡
HAL_OAD_XNV_IS_SPI


422 
	#XNV_STAT_CMD
 0x05

	)

423 
	#XNV_WREN_CMD
 0x06

	)

424 
	#XNV_WRPG_CMD
 0x0A

	)

425 
	#XNV_READ_CMD
 0x0B

	)

427 
	#XNV_STAT_WIP
 0x01

	)

438 
xnvSPIWrôe
(
uöt8
 
ch
);

439 
	$xnvSPIWrôe
(
uöt8
 
ch
)

441 
	`XNV_SPI_TX
(
ch
);

442 
	`XNV_SPI_WAIT_RXRDY
();

443 
	}
}

454 
uöt32
 
	$HÆOADAvaû
()

456  
HAL_OAD_DL_MAX
 - 
HAL_OAD_DL_OSET
;

457 
	}
}

470 
	$HÆSPIRód
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
)

472 #i‡!
HAL_OAD_BOOT_CODE


473 
uöt8
 
shdw
 = 
P1DIR
;

474 
hÆI¡Sèã_t
 
his
;

475 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

476 
P1DIR
 |
	`BV
(3);

479 
	`XNV_SPI_BEGIN
();

481 
	`xnvSPIWrôe
(
XNV_STAT_CMD
);

482 } 
	`XNV_SPI_RX
(Ë& 
XNV_STAT_WIP
);

483 
	`XNV_SPI_END
();

484 
	`asm
("NOP");ásm("NOP");

486 
	`XNV_SPI_BEGIN
();

487 
	`xnvSPIWrôe
(
XNV_READ_CMD
);

488 
	`xnvSPIWrôe
(
addr
 >> 16);

489 
	`xnvSPIWrôe
(
addr
 >> 8);

490 
	`xnvSPIWrôe
(
addr
);

491 
	`xnvSPIWrôe
(0);

493 
Àn
--)

495 
	`xnvSPIWrôe
(0);

496 *
pBuf
++ = 
	`XNV_SPI_RX
();

498 
	`XNV_SPI_END
();

500 #i‡!
HAL_OAD_BOOT_CODE


501 
P1DIR
 = 
shdw
;

502 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

504 
	}
}

517 
	$HÆSPIWrôe
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
)

519 
uöt8
 
˙t
;

520 #i‡!
HAL_OAD_BOOT_CODE


521 
uöt8
 
shdw
 = 
P1DIR
;

522 
hÆI¡Sèã_t
 
his
;

523 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

524 
P1DIR
 |
	`BV
(3);

527 
Àn
)

529 
	`XNV_SPI_BEGIN
();

531 
	`xnvSPIWrôe
(
XNV_STAT_CMD
);

532 } 
	`XNV_SPI_RX
(Ë& 
XNV_STAT_WIP
);

533 
	`XNV_SPI_END
();

534 
	`asm
("NOP");ásm("NOP");

536 
	`XNV_SPI_BEGIN
();

537 
	`xnvSPIWrôe
(
XNV_WREN_CMD
);

538 
	`XNV_SPI_END
();

539 
	`asm
("NOP");ásm("NOP");

541 
	`XNV_SPI_BEGIN
();

542 
	`xnvSPIWrôe
(
XNV_WRPG_CMD
);

543 
	`xnvSPIWrôe
(
addr
 >> 16);

544 
	`xnvSPIWrôe
(
addr
 >> 8);

545 
	`xnvSPIWrôe
(
addr
);

548 
˙t
 = 0 - (
uöt8
)
addr
;

549 i‡(
˙t
)

551 
addr
 +
˙t
;

555 
addr
 += 256;

560 
	`xnvSPIWrôe
(*
pBuf
++);

561 
˙t
--;

562 
Àn
--;

563 } 
Àn
 && 
˙t
);

564 
	`XNV_SPI_END
();

567 #i‡!
HAL_OAD_BOOT_CODE


568 
P1DIR
 = 
shdw
;

569 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

571 
	}
}

573 #îr‹ 
InvÆid
 
Xåa
-
NV
 
OAD
.

	@Components/hal/target/CC2530ZNP/hal_oad.h

39 #i‚de‡
HAL_OAD_H


40 
	#HAL_OAD_H


	)

46 
	~"hÆ_bﬂrd_cfg.h
"

47 
	~"hÆ_ty≥s.h
"

53 #i‡!
deföed
 
HAL_OAD_BOOT_CODE


54 
	#HAL_OAD_BOOT_CODE
 
FALSE


	)

58 
	#PACK_1


	)

65 
	#HAL_OAD_RC_START
 0x0800

	)

66 
	#HAL_OAD_CRC_ADDR
 0x0888

	)

67 
	#HAL_OAD_CRC_OSET
 (
HAL_OAD_CRC_ADDR
 - 
HAL_OAD_RC_START
)

	)

72 
	#HAL_OAD_XNV_IS_INT
 
FALSE


	)

73 
	#HAL_OAD_XNV_IS_SPI
 !
HAL_OAD_XNV_IS_INT


	)

79 
	#HAL_OAD_BOOT_PG_CNT
 2

	)

85 #i‡
HAL_OAD_XNV_IS_SPI
 && !
deföed
 
HAL_BOARD_CC2530EB_REV13


86 
	#HAL_OAD_DL_MAX
 0x40000

	)

87 
	#HAL_OAD_DL_SIZE
 (0x40000 - ((
HAL_NV_PAGE_CNT
+
HAL_OAD_BOOT_PG_CNT
)*
HAL_FLASH_PAGE_SIZE
))

	)

88 
	#HAL_OAD_DL_OSET
 0x0

89 #ñ£

	)

90 
	#HAL_OAD_DL_MAX
 (0x40000 - ((
HAL_NV_PAGE_CNT
+
HAL_OAD_BOOT_PG_CNT
)*
HAL_FLASH_PAGE_SIZE
))

	)

91 
	#HAL_OAD_DL_SIZE
 (
HAL_OAD_DL_MAX
 / 2)

	)

92 
	#HAL_OAD_DL_OSET
 (
HAL_OAD_DL_MAX
 / 2)

	)

96 
	#PREAMBLE_OFFSET
 0x8C

	)

98 #i‡
HAL_OAD_XNV_IS_INT


99 
	#VDD_MIN_OAD
 
VDD_MIN_NV


	)

101 
	#VDD_MIN_OAD
 
VDD_MIN_XNV


	)

109 
	mHAL_OAD_RC
,

110 
	mHAL_OAD_DL


111 } 
	timage_t
;

114 
uöt8
 
	mmagic
[2];

115 
uöt32
 
	mÀn
;

116 
uöt16
 
	mvîs
;

117 
uöt16
 
	mm™u
;

118 
uöt16
 
	m¥od
;

119 } 
	t¥ómbÀ_t
;

125 
uöt8
 
HÆOADChkDL
(uöt8 
dlImagePªambÀOff£t
);

126 
HÆOADInvRC
();

127 
uöt32
 
HÆOADAvaû
();

128 
HÆOADRód
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
);

129 
HÆOADWrôe
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
);

	@Components/hal/target/CC2530ZNP/hal_sleep.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_mcu.h
"

46 
	~"hÆ_bﬂrd.h
"

47 
	~"hÆ_¶ìp.h
"

48 
	~"hÆ_Àd.h
"

49 
	~"hÆ_key.h
"

50 
	~"mac_≠i.h
"

51 
	~"OSAL.h
"

52 
	~"OSAL_Timîs.h
"

53 
	~"OSAL_Tasks.h
"

54 
	~"OSAL_PwrMgr.h
"

55 
	~"OnBﬂrd.h
"

56 
	~"hÆ_drivîs.h
"

57 
	~"hÆ_as£π.h
"

58 
	~"mac_mcu.h
"

59 
	~"ZGlobÆs.h
"

60 
	~"hÆ_u¨t.h
"

62 #i‡!
deföed
 
ZG_BUILD_ENDDEVICE_TYPE


63 
	#ZG_BUILD_ENDDEVICE_TYPE
 
FALSE


	)

66 #i‡
ZG_BUILD_ENDDEVICE_TYPE
 && 
deföed
 (
NWK_AUTO_POLL
)

67 
	~"nwk_globÆs.h
"

68 
	~"ZGlobÆs.h
"

79 
	#CC2530_PM0
 0

	)

80 
	#CC2530_PM1
 1

	)

81 
	#CC2530_PM2
 2

	)

82 
	#CC2530_PM3
 3

	)

92 
	#HAL_SLEEP_OFF
 
CC2530_PM0


	)

93 
	#HAL_SLEEP_TIMER
 
CC2530_PM2


	)

94 
	#HAL_SLEEP_DEEP
 
CC2530_PM3


	)

100 
	#MAX_SLEEP_TIME
 510000

	)

101 
	#TICKS_SUBTRACTED
 2

	)

107 #i‡!
deföed
 (
PM_MIN_SLEEP_TIME
)

108 
	#PM_MIN_SLEEP_TIME
 14

	)

114 #¥agm®
loˇti⁄
 = "SLEEP_CODE"

115 
hÆSëSÀïMode
();

125 
	#HAL_SLEEP_ADJ_TICKS
 (11 + 12)

	)

127 #i‚de‡
HAL_SLEEP_DEBUG_POWER_MODE


129 
	#HAL_SLEEP_PREP_POWER_MODE
(
mode
Ë
	`°
–
SLEEPCMD
 &~
PMODE
; \

130 
SLEEPCMD
 |
mode
; \

131 !(
STLOAD
 & 
LDRDY
)); \

132 
hÆSÀïPc⁄VÆue
 = 
PCON_IDLE
; \

133 )

	)

134 
	#HAL_SLEEP_SET_POWER_MODE
(Ë
	`hÆSëSÀïMode
()

	)

137 
	#HAL_SLEEP_PREP_POWER_MODE
(
mode
Ë

	)

138 
	#HAL_SLEEP_SET_POWER_MODE
(Ë
	`°
–
hÆSÀïI¡
 =
FALSE
); \

139 
hÆSÀïI¡
 = 
FALSE
; \

140 
	`HAL_DISABLE_INTERRUPTS
(); \

141 )

	)

145 
	#STIE_BV
 
	`BV
(5)

	)

146 
	#P0IE_BV
 
	`BV
(5)

	)

147 
	#P1IE_BV
 
	`BV
(4)

	)

148 
	#P2IE_BV
 
	`BV
(1)

	)

151 
	#HAL_SLEEP_TIMER_ENABLE_INT
(Ë
	`°
(
IEN0
 |
STIE_BV
;Ë

	)

152 
	#HAL_SLEEP_TIMER_DISABLE_INT
(Ë
	`°
(
IEN0
 &~
STIE_BV
;Ë

	)

153 
	#HAL_SLEEP_TIMER_CLEAR_INT
(Ë
	`°
(
STIF
 = 0;Ë

	)

156 
	#HAL_SLEEP_IE_BACKUP_AND_DISABLE
(
õn0
, 
õn1
, 
õn2
Ë
	`°
(õn0 = 
IEN0
; \

157 
õn1
 = 
IEN1
; \

158 
õn2
 = 
IEN2
; \

159 
IEN0
 &
STIE_BV
; \

160 
IEN1
 &
P0IE_BV
; \

161 
IEN2
 &(
P1IE_BV
|
P2IE_BV
);Ë

	)

164 
	#HAL_SLEEP_IE_RESTORE
(
õn0
, 
õn1
, 
õn2
Ë
	`°
(
IEN0
 = ien0; \

165 
IEN1
 = 
õn1
; \

166 
IEN2
 = 
õn2
;Ë

	)

169 
	#HAL_SLEEP_MS_TO_320US
(
ms
Ë(((((
uöt32
Ë(ms)Ë* 100Ë+ 31Ë/ 32)

	)

172 #i‡
HAL_MCU_LITTLE_ENDIAN
()

173 
	#UINT32_NDX0
 0

	)

174 
	#UINT32_NDX1
 1

	)

175 
	#UINT32_NDX2
 2

	)

176 
	#UINT32_NDX3
 3

	)

178 
	#UINT32_NDX0
 3

	)

179 
	#UINT32_NDX1
 2

	)

180 
	#UINT32_NDX2
 1

	)

181 
	#UINT32_NDX3
 0

	)

184 
uöt32
 
	gmaxSÀïLo›Time
 = 
HAL_SLEEP_MS_TO_320US
(
MAX_SLEEP_TIME
);

191 vﬁ©ûê
__d©a
 
uöt8
 
	ghÆSÀïPc⁄VÆue
 = 
PCON_IDLE
;

200 
uöt8
 
	ghÆPwrMgtMode
 = 
HAL_SLEEP_OFF
;

202 #ifde‡
HAL_SLEEP_DEBUG_POWER_MODE


203 
boﬁ
 
	ghÆSÀïI¡
 = 
FALSE
;

211 
hÆSÀïSëTimî
(
uöt32
 
timeout
);

231 
	$hÆSëSÀïMode
()

233 
PCON
 = 
hÆSÀïPc⁄VÆue
;

234 
	`asm
("NOP");

235 
	}
}

256 
	$hÆSëMaxSÀïLo›Time
(
uöt32
 
rﬁlovîTime
)

258 if–
rﬁlovîTime
 > 
	`HAL_SLEEP_MS_TO_320US
(
MAX_SLEEP_TIME
) )

260 
maxSÀïLo›Time
 = 
	`HAL_SLEEP_MS_TO_320US
(
MAX_SLEEP_TIME
);

262 
maxSÀïLo›Time
 = (
rﬁlovîTime
 - 
TICKS_SUBTRACTED
);

263 
	}
}

282 
	$hÆSÀï
–
uöt16
 
oßl_timeout
 )

284 
uöt32
 
timeout
;

285 
uöt32
 
macTimeout
 = 0;

288 
timeout
 = 
	`HAL_SLEEP_MS_TO_320US
(
oßl_timeout
);

289 i‡(
timeout
 == 0)

291 
timeout
 = 
	`MAC_PwrNextTimeout
();

296 
macTimeout
 = 
	`MAC_PwrNextTimeout
();

299 i‡((
macTimeout
 !0Ë&& (macTimeouà< 
timeout
))

301 
timeout
 = 
macTimeout
;

308 
hÆPwrMgtMode
 = (
timeout
 =0Ë? 
HAL_SLEEP_DEEP
 : 
HAL_SLEEP_TIMER
;

314 #i‡
ZG_BUILD_ENDDEVICE_TYPE
 && 
	`deföed
 (
NWK_AUTO_POLL
)

315 i‡((
timeout
 > 
	`HAL_SLEEP_MS_TO_320US
(
PM_MIN_SLEEP_TIME
)) ||

316 (
timeout
 =0 && 
zgPﬁlR©e
 == 0))

318 i‡((
timeout
 > 
	`HAL_SLEEP_MS_TO_320US
(
PM_MIN_SLEEP_TIME
)) ||

319 (
timeout
 == 0))

322 
hÆI¡Sèã_t
 
õn0
, 
õn1
, 
õn2
;

324 
	`HAL_ASSERT
(
	`HAL_INTERRUPTS_ARE_ENABLED
());

325 
	`HAL_DISABLE_INTERRUPTS
();

328 i‡(
hÆSÀïPc⁄VÆue
 !0 && 
	`MAC_PwrOffReq
(
MAC_PWR_SLEEP_DEEP
Ë=
MAC_SUCCESS
)

334 #i‡((
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
))

336 
	`HÆKeyE¡îSÀï
();

339 #ifde‡
HAL_SLEEP_DEBUG_LED


340 
	`HAL_TURN_OFF_LED3
();

343 
	`HÆLedE¡îSÀï
();

346 if(
timeout
 > 
maxSÀïLo›Time
)

348 
timeout
 = 
maxSÀïLo›Time
;

352 i‡(
timeout
 != 0)

354 i‡(
timeout
 > 
	`HAL_SLEEP_MS_TO_320US
–
MAX_SLEEP_TIME
 ))

356 
timeout
 -
	`HAL_SLEEP_MS_TO_320US
–
MAX_SLEEP_TIME
 );

357 
	`hÆSÀïSëTimî
(
	`HAL_SLEEP_MS_TO_320US
–
MAX_SLEEP_TIME
 ));

362 
	`hÆSÀïSëTimî
(
timeout
);

366 
	`HAL_SLEEP_TIMER_CLEAR_INT
();

367 
	`HAL_SLEEP_TIMER_ENABLE_INT
();

370 #ifde‡
HAL_SLEEP_DEBUG_LED


371 i‡(
hÆPwrMgtMode
 =
CC2530_PM1
)

373 
	`HAL_TURN_ON_LED1
();

377 
	`HAL_TURN_OFF_LED1
();

381 i‡(
ZNP_CFG1_UART
 =
z≈Cfg1
)

383 
	`HÆUARTSu•íd
();

387 
	`HAL_SLEEP_PREP_POWER_MODE
(
hÆPwrMgtMode
);

390 
	`HAL_SLEEP_IE_BACKUP_AND_DISABLE
(
õn0
, 
õn1
, 
õn2
);

391 
	`HAL_ENABLE_INTERRUPTS
();

399 
	`HAL_SLEEP_SET_POWER_MODE
();

402 
	`HAL_DISABLE_INTERRUPTS
();

405 
	`HAL_SLEEP_IE_RESTORE
(
õn0
, 
õn1
, 
õn2
);

408 
	`HAL_SLEEP_TIMER_DISABLE_INT
();

410 i‡(
ZNP_CFG1_UART
 =
z≈Cfg1
)

412 
	`HÆUARTResume
();

415 #ifde‡
HAL_SLEEP_DEBUG_LED


416 
	`HAL_TURN_ON_LED3
();

419 
	`HÆLedExôSÀï
();

422 #i‡((
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
))

424 ()
	`HÆKeyExôSÀï
();

428 
	`MAC_PwrOnReq
();

430 
	`HAL_ENABLE_INTERRUPTS
();

440 
	`macMcuTimî2OvîÊowW‹k¨ound
();

447 
	`HAL_ENABLE_INTERRUPTS
();

450 
	}
}

472 
	$hÆSÀïSëTimî
(
uöt32
 
timeout
)

474 
uöt32
 
ticks
;

477 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX0
] = 
ST0
;

478 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX1
] = 
ST1
;

479 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX2
] = 
ST2
;

480 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX3
] = 0;

485 
ticks
 +(
timeout
 * 671) / 64;

488 
ticks
 -
HAL_SLEEP_ADJ_TICKS
;

491 
ST2
 = ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX2
];

492 
ST1
 = ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX1
];

493 
ST0
 = ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX0
];

494 
	}
}

513 
uöt32
 
	$TimîEœp£d
( )

517 
	}
}

535 
	$hÆRe°‹eSÀïLevñ
( )

538 
	}
}

556 
	$HAL_ISR_FUNCTION
(
hÆSÀïTimîI§
, 
ST_VECTOR
)

558 
	`HAL_ENTER_ISR
();

559 
	`HAL_SLEEP_TIMER_CLEAR_INT
();

561 #ifde‡
HAL_SLEEP_DEBUG_POWER_MODE


562 
hÆSÀïI¡
 = 
TRUE
;

565 
	`CLEAR_SLEEP_MODE
();

566 
	`HAL_EXIT_ISR
();

567 
	}
}

	@Components/hal/target/CC2530ZNP/hal_spi.c

44 
	~"hÆ_mcu.h
"

45 
	~"hÆ_defs.h
"

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_•i.h
"

48 
	~"z≈_•i.h
"

50 #i‡(
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)

80 
	$HÆSpiInô
()

82 
	`≈SpiInô
();

83 
	}
}

94 
	$HÆSpiPﬁl
()

96 
	`≈SpiM⁄ô‹
();

97 
	}
}

108 
	$HÆSpiRxI§
()

110 
	`≈SpiRxI§
();

111 
	}
}

122 
	$HÆSpiTxI§
()

124 
	`≈SpiTxI§
();

125 
	}
}

	@Components/hal/target/CC2530ZNP/hal_spi.h

40 #i‚de‡
HAL_SPI_H


41 
	#HAL_SPI_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"hÆ_bﬂrd.h
"

53 
	~"hÆ_ty≥s.h
"

55 #i‡((
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
))

76 
HÆSpiInô
();

77 
HÆSpiPﬁl
();

78 
HÆSpiRxI§
();

79 
HÆSpiTxI§
();

83 #ifde‡
__˝lu•lus


	@Components/hal/target/CC2530ZNP/hal_startup.c

42 
	~"hÆ_bﬂrd.h
"

43 
	~"hÆ_ty≥s.h
"

45 #ifde‡
__˝lu•lus


49 #¥agm®
œnguage
=
exãnded


54 #¥agm®
loˇti⁄
="CSTART"

59 #i‡(
__CODE_MODEL__
 == 2)

60 
__√¨_func
 
__roŸ
 

62 
__roŸ
 

64 
__low_Àvñ_öô
();

77 #i‡(
__CODE_MODEL__
 == 2)

78 
__√¨_func
 
__roŸ
 

80 
__roŸ
 

82 
__low_Àvñ_öô
()

88 
MEMCTR
 = (MEMCTR & 0xF8) | 0x01;

99 #¥agm®
œnguage
=

101 #ifde‡
__˝lu•lus


	@Components/hal/target/CC2530ZNP/hal_timer.c

	@Components/hal/target/CC2530ZNP/hal_types.h

40 #i‚de‡
_HAL_TYPES_H


41 
	#_HAL_TYPES_H


	)

49 sig√d 
	töt8
;

50 
	tuöt8
;

52 sig√d 
	töt16
;

53 
	tuöt16
;

55 sig√d 
	töt32
;

56 
	tuöt32
;

58 
	tboﬁ
;

60 
uöt8
 
	thÆD©aAlign_t
;

69 #ifde‡
__IAR_SYSTEMS_ICC__


70 
	#CODE
 
__code


	)

71 
	#XDATA
 
__xd©a


	)

74 #ñi‡
deföed
 
__KEIL__


75 
	#CODE
 
code


	)

76 
	#XDATA
 
xd©a


	)

88 #i‚de‡
TRUE


89 
	#TRUE
 1

	)

92 #i‚de‡
FALSE


93 
	#FALSE
 0

	)

96 #i‚de‡
NULL


97 
	#NULL
 0

	)

	@Components/hal/target/CC2530ZNP/hal_uart.c

44 
	~"hÆ_bﬂrd_cfg.h
"

45 
	~"hÆ_defs.h
"

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_u¨t.h
"

77 #i‡
HAL_UART_DMA


78 
	~"_hÆ_u¨t_dma.c
"

80 #i‡
HAL_UART_ISR


81 
	~"_hÆ_u¨t_i§.c
"

83 #i‡
HAL_UART_USB


84 
	~"_hÆ_u¨t_usb.c
"

96 
	$HÆUARTInô
()

98 i‡(
ZNP_CFG1_SPI
 =
z≈Cfg1
)

103 #i‡
HAL_UART_DMA


104 
	`HÆUARTInôDMA
();

106 #i‡
HAL_UART_ISR


107 
	`HÆUARTInôISR
();

109 #i‡
HAL_UART_USB


110 
	`HÆUARTInôUSB
();

112 
	}
}

124 
uöt8
 
	$HÆUARTO≥n
(
uöt8
 
p‹t
, 
hÆUARTCfg_t
 *
c⁄fig
)

126 ()
p‹t
;

127 ()
c⁄fig
;

129 #i‡(
HAL_UART_DMA
 == 1)

130 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë
	`HÆUARTO≥nDMA
(
c⁄fig
);

132 #i‡(
HAL_UART_DMA
 == 2)

133 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë
	`HÆUARTO≥nDMA
(
c⁄fig
);

135 #i‡(
HAL_UART_ISR
 == 1)

136 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë
	`HÆUARTO≥nISR
(
c⁄fig
);

138 #i‡(
HAL_UART_ISR
 == 2)

139 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë
	`HÆUARTO≥nISR
(
c⁄fig
);

141 #i‡(
HAL_UART_USB
)

142 
	`HÆUARTO≥nUSB
(
c⁄fig
);

145  
HAL_UART_SUCCESS
;

146 
	}
}

159 
uöt16
 
	$HÆUARTRód
(
uöt8
 
p‹t
, uöt8 *
buf
, 
uöt16
 
Àn
)

161 ()
p‹t
;

162 ()
buf
;

163 ()
Àn
;

165 #i‡(
HAL_UART_DMA
 == 1)

166 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRódDMA
(
buf
, 
Àn
);

168 #i‡(
HAL_UART_DMA
 == 2)

169 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRódDMA
(
buf
, 
Àn
);

171 #i‡(
HAL_UART_ISR
 == 1)

172 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRódISR
(
buf
, 
Àn
);

174 #i‡(
HAL_UART_ISR
 == 2)

175 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRódISR
(
buf
, 
Àn
);

178 #i‡
HAL_UART_USB


179  
	`HÆUARTRx
(
buf
, 
Àn
);

183 
	}
}

196 
uöt16
 
	$HÆUARTWrôe
(
uöt8
 
p‹t
, uöt8 *
buf
, 
uöt16
 
Àn
)

198 ()
p‹t
;

199 ()
buf
;

200 ()
Àn
;

202 #i‡(
HAL_UART_DMA
 == 1)

203 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTWrôeDMA
(
buf
, 
Àn
);

205 #i‡(
HAL_UART_DMA
 == 2)

206 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTWrôeDMA
(
buf
, 
Àn
);

208 #i‡(
HAL_UART_ISR
 == 1)

209 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTWrôeISR
(
buf
, 
Àn
);

211 #i‡(
HAL_UART_ISR
 == 2)

212 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTWrôeISR
(
buf
, 
Àn
);

215 #i‡
HAL_UART_USB


216 
	`HÆUARTTx
(
buf
, 
Àn
);

217  
Àn
;

221 
	}
}

232 
	$HÆUARTSu•íd
( )

234 #i‡
HAL_UART_DMA


235 
	`HÆUARTSu•ídDMA
();

237 #i‡
HAL_UART_ISR


238 
	`HÆUARTSu•ídISR
();

240 
	}
}

251 
	$HÆUARTResume
( )

253 #i‡
HAL_UART_DMA


254 
	`HÆUARTResumeDMA
();

256 #i‡
HAL_UART_ISR


257 
	`HÆUARTResumeISR
();

259 
	}
}

270 
	$HÆUARTPﬁl
()

272 i‡(
ZNP_CFG1_SPI
 =
z≈Cfg1
)

277 #i‡
HAL_UART_DMA


278 
	`HÆUARTPﬁlDMA
();

280 #i‡
HAL_UART_ISR


281 
	`HÆUARTPﬁlISR
();

283 #i‡
HAL_UART_USB


284 
	`HÆUARTPﬁlUSB
();

286 
	}
}

297 
uöt16
 
	$HÆ_UART_RxBufLí
–
uöt8
 
p‹t
 )

299 ()
p‹t
;

301 #i‡(
HAL_UART_DMA
 == 1)

302 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRxAvaûDMA
();

304 #i‡(
HAL_UART_DMA
 == 2)

305 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRxAvaûDMA
();

307 #i‡(
HAL_UART_ISR
 == 1)

308 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRxAvaûISR
();

310 #i‡(
HAL_UART_ISR
 == 2)

311 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRxAvaûISR
();

313 #i‡
HAL_UART_USB


314  
	`HÆUARTRxAvaûUSB
();

318 
	}
}

	@Components/mac/high_level/mac_cfg.c

44 
	~"mac_≠i.h
"

52 #i‚de‡
MAC_CFG_TX_DATA_MAX


53 
	#MAC_CFG_TX_DATA_MAX
 2

	)

57 #i‚de‡
MAC_CFG_TX_MAX


58 
	#MAC_CFG_TX_MAX
 5

	)

62 #i‚de‡
MAC_CFG_RX_MAX


63 
	#MAC_CFG_RX_MAX
 2

	)

67 #i‚de‡
MAC_CFG_DATA_IND_OFFSET


68 
	#MAC_CFG_DATA_IND_OFFSET
 0

	)

72 #i‚de‡
MAC_CFG_APP_PENDING_QUEUE


73 
	#MAC_CFG_APP_PENDING_QUEUE
 
FALSE


	)

82 c⁄° 
macCfg_t
 
	gmacCfg
 =

84 
MAC_CFG_TX_DATA_MAX
,

85 
MAC_CFG_TX_MAX
,

86 
MAC_CFG_RX_MAX
,

87 
MAC_CFG_DATA_IND_OFFSET
,

88 
MAC_CFG_APP_PENDING_QUEUE


	@Components/mac/high_level/mac_data.h

40 #i‚de‡
MAC_DATA_H


41 
	#MAC_DATA_H


	)

48 
	~"OSAL.h
"

49 
	~"mac_high_Àvñ.h
"

57 
	#MAC_INTERNAL_BEACON
 0

	)

58 
	#MAC_INTERNAL_DATA
 1

	)

59 
	#MAC_INTERNAL_ASSOC_REQ
 2

	)

60 
	#MAC_INTERNAL_ASSOC_RSP
 3

	)

61 
	#MAC_INTERNAL_DISASSOC_NOTIF
 4

	)

62 
	#MAC_INTERNAL_DATA_REQ
 5

	)

63 
	#MAC_INTERNAL_PAN_CONFLICT
 6

	)

64 
	#MAC_INTERNAL_ORPHAN_NOTIF
 7

	)

65 
	#MAC_INTERNAL_BEACON_REQ
 8

	)

66 
	#MAC_INTERNAL_COORD_REALIGN
 9

	)

67 
	#MAC_INTERNAL_GTS_REQ
 10

	)

70 
	#MAC_INTERNAL_ZERO_DATA
 
MAC_INTERNAL_DATA


	)

73 
	#MAC_TX_OFFSET_LEN
 1

	)

83 
oßl_msg_q_t
 
	mtxQueue
;

84 
oßl_msg_q_t
 
	mrxQueue
;

85 
uöt16
 
	mduøti⁄
;

86 
uöt8
 
	mödúe˘Cou¡
;

87 
uöt8
 
	mdúe˘Cou¡
;

88 
uöt8
 
	mrxCou¡
;

89 } 
	tmacD©a_t
;

92 (*
	tmacD©aTxF˙_t
)(
	tmacTx_t
 *
	tpMsg
);

95 (*
	tmacRxBóc⁄Crôiˇl_t
)(
	tmacRx_t
 *
	tpBuf
);

98 (*
	tmacTxBóc⁄Com∂ëe_t
)(
	tuöt8
 
	t°©us
);

101 (*
	tmacTxFømeRëønsmô_t
)();

104 
	$uöt8
 (*
	tmacD©aCheckSched_t
)();

107 
	$uöt8
 (*
	tmacD©aCheckTxTime_t
)();

115 c⁄° 
uöt8
 
CODE
 
macTxFømeSuc˚ss
[];

118 c⁄° 
uöt8
 
CODE
 
macTxFømeFaûed
[];

121 
macD©a_t
 
macD©a
;

124 
macD©aTxF˙_t
 
macD©aTxIndúe˘
;

125 
macD©aTxF˙_t
 
macD©aRequeueIndúe˘
;

128 
macRxBóc⁄Crôiˇl_t
 
macD©aRxBóc⁄Crôiˇl
;

131 
macTxBóc⁄Com∂ëe_t
 
macD©aTxBóc⁄Com∂ëe
;

134 
macD©aTxF˙_t
 
macD©aSëSched
;

137 
macD©aCheckSched_t
 
macD©aCheckSched
;

140 
macD©aCheckTxTime_t
 
macD©aCheckTxTime
;

143 
macD©aTxF˙_t
 
macD©aBóc⁄Requeue
;

150 
MAC_INTERNAL_API
 
	`macD©aRe£t
();

151 
MAC_INTERNAL_API
 
macTx_t
 *
	`macAŒocTxBuf„r
(
uöt8
 
cmd
, uöt8 
txO±i⁄s
);

152 
MAC_INTERNAL_API
 
uöt8
 
	`macFømeDuøti⁄
(uöt8 
Àn
, uöt8 
txO±i⁄s
);

153 
MAC_INTERNAL_API
 
	`macD©aRëønsmô
();

154 
MAC_INTERNAL_API
 
	`macBuûdD©aFøme
(
macEvít_t
 *
pEvít
);

155 
MAC_INTERNAL_API
 
uöt8
 
	`macCheckSched
();

156 
MAC_INTERNAL_API
 
	`macSëSched
(
macTx_t
 *
pMsg
);

157 
MAC_INTERNAL_API
 
	`macD©aTxCom∂ëe
(
macTx_t
 *
pMsg
);

158 
MAC_INTERNAL_API
 
	`macD©aTxSíd
();

159 
MAC_INTERNAL_API
 
	`macD©aTxEnqueue
(
macTx_t
 *
pMsg
);

160 
MAC_INTERNAL_API
 
	`macD©aSíd
(
macEvít_t
 *
pEvít
);

161 
MAC_INTERNAL_API
 
	`macApiD©aReq
(
macEvít_t
 *
pEvít
);

162 
MAC_INTERNAL_API
 
	`macD©aRxInd
(
macEvít_t
 *
pEvít
);

	@Components/mac/high_level/mac_high_level.h

40 #i‚de‡
MAC_HIGH_LEVEL_H


41 
	#MAC_HIGH_LEVEL_H


	)

48 
	~"mac_≠i.h
"

54 #i‚de‡
MAC_INTERNAL_API


55 
	#MAC_INTERNAL_API


	)

64 
	#MAC_RX_FLAG_VERSION
 0x03

	)

65 
	#MAC_RX_FLAG_ACK_PENDING
 0x04

	)

66 
	#MAC_RX_FLAG_SECURITY
 0x08

	)

67 
	#MAC_RX_FLAG_PENDING
 0x10

	)

68 
	#MAC_RX_FLAG_ACK_REQUEST
 0x20

	)

69 
	#MAC_RX_FLAG_INTRA_PAN
 0x40

	)

70 
	#MAC_RX_FLAG_CRC_OK
 0x80

	)

81 
macEvítHdr_t
 
	mhdr
;

82 
sD©a_t
 
	mmsdu
;

83 
macTxI¡D©a_t
 
	möã∫Æ
;

84 
macSec_t
 
	m£c
;

85 } 
	tmacTx_t
;

90 
macEvítHdr_t
 
	mhdr
;

91 
sD©a_t
 
	mmsdu
;

92 
macRxI¡D©a_t
 
	möã∫Æ
;

93 
macSec_t
 
	m£c
;

94 
macD©aInd_t
 
	mmac
;

95 
sD©a_t
 
	mmhr
;

96 } 
	tmacRx_t
;

99 (*
	tmacRNGF˙_t
 )(
	tuöt8
* 
	t£ed
);

107 
macTx_t
 *
pMacD©aTx
;

110 
boﬁ
 
macP™Co‹dö©‹
;

118 
MAC_INTERNAL_API
 
uöt8
 *
	`macD©aRxMemAŒoc
(
uöt16
 
Àn
);

119 
MAC_INTERNAL_API
 
uöt8
 
	`macD©aRxMemFªe
(uöt8 **
pMsg
);

120 
MAC_INTERNAL_API
 
uöt8
 
	`macD©aTxTimeAvaûabÀ
();

	@Components/mac/high_level/mac_main.h

40 #i‚de‡
MAC_MAIN_H


41 
	#MAC_MAIN_H


	)

48 
	~"mac_high_Àvñ.h
"

58 
	mMAC_IDLE_ST
,

59 
	mMAC_ASSOCIATING_ST
,

60 
	mMAC_POLLING_ST
,

61 
	mMAC_SCANNING_ST
,

62 
	mMAC_STARTING_ST


68 
	mMAC_API_DATA_REQ_EVT
,

69 
	mMAC_API_PURGE_REQ_EVT
,

70 
	mMAC_API_ASSOCIATE_REQ_EVT
,

71 
	mMAC_API_ASSOCIATE_RSP_EVT
,

72 
	mMAC_API_DISASSOCIATE_REQ_EVT
,

73 
	mMAC_API_ORPHAN_RSP_EVT
,

74 
	mMAC_API_POLL_REQ_EVT
,

75 
	mMAC_API_SCAN_REQ_EVT
,

76 
	mMAC_API_START_REQ_EVT
,

77 
	mMAC_API_SYNC_REQ_EVT
,

78 
	mMAC_API_PWR_ON_REQ_EVT
,

79 
	mMAC_RX_ASSOC_REQ_EVT
,

80 
	mMAC_RX_ASSOC_RSP_EVT
,

81 
	mMAC_RX_DISASSOC_EVT
,

82 
	mMAC_RX_DATA_REQ_EVT
,

83 
	mMAC_RX_PAN_CONFLICT_EVT
,

84 
	mMAC_RX_ORPHAN_EVT
,

85 
	mMAC_RX_BEACON_REQ_EVT
,

86 
	mMAC_RX_REALIGN_EVT
,

87 
	mMAC_RX_GTS_REQ_EVT
,

88 
	mMAC_RX_BEACON_EVT
,

89 
	mMAC_RX_DATA_IND_EVT
,

90 
	mMAC_TX_ASSOC_REQ_OK_EVT
,

91 
	mMAC_TX_ASSOC_REQ_FAIL_EVT
,

92 
	mMAC_TX_ASSOC_RSP_EVT
,

93 
	mMAC_TX_DISASSOC_EVT
,

94 
	mMAC_TX_ORPHAN_OK_EVT
,

95 
	mMAC_TX_ORPHAN_FAIL_EVT
,

96 
	mMAC_TX_BEACON_REQ_OK_EVT
,

97 
	mMAC_TX_BEACON_REQ_FAIL_EVT
,

98 
	mMAC_TX_REALIGN_OK_EVT
,

99 
	mMAC_TX_REALIGN_FAIL_EVT
,

100 
	mMAC_TX_DATA_REQ_OK_EVT
,

101 
	mMAC_TX_DATA_REQ_FAIL_EVT
,

102 
	mMAC_TX_DATA_REQ_PEND_EVT
,

103 
	mMAC_TX_CONFLICT_OK_EVT
,

104 
	mMAC_TIM_RESPONSE_WAIT_EVT
,

105 
	mMAC_TIM_FRAME_RESPONSE_EVT
,

106 
	mMAC_TIM_SCAN_EVT
,

107 
	mMAC_TIM_SYNC_EVT
,

108 
	mMAC_TIM_EXP_INDIRECT_EVT
,

109 
	mMAC_INT_SCAN_COMPLETE_EVT
,

110 
	mMAC_INT_ASSOC_FAILED_EVT
,

111 
	mMAC_INT_AUTO_POLL_EVT
,

112 
	mMAC_INT_START_COMPLETE_EVT
,

113 
	mMAC_INT_TX_COMPLETE_EVT
,

114 
	mMAC_INT_BEACON_RESP_TIM_EVT
,

115 
	mMAC_INT_BROADCAST_PEND_EVT
,

116 
	mMAC_NO_ACTION_EVT


120 
	#MAC_API_EVT_MAX
 
MAC_API_PWR_ON_REQ_EVT


	)

125 
	mMAC_MGMT_ACTION_1
,

126 
	mMAC_MGMT_ACTION_2
,

127 
	mMAC_SCAN_ACTION
,

128 
	mMAC_DEVICE_ACTION_1
,

129 
	mMAC_DEVICE_ACTION_2
,

130 
	mMAC_COORD_ACTION_1
,

131 
	mMAC_COORD_ACTION_2
,

132 
	mMAC_COORD_ACTION_3
,

133 
	mMAC_BEACON_DEVICE_ACTION
,

134 
	mMAC_ACTION_SET_MAX


138 
	#MAC_ACTION_INIT
(
n
Ë(“Ë<< 4)

	)

139 
	#MAC_ACTION_SET
(
n
Ë(“Ë>> 4)

	)

140 
	#MAC_ACTION_ID
(
n
Ë(“Ë& 0x0F)

	)

146 
	mMAC_NO_ACTION
 = 
MAC_ACTION_INIT
(
MAC_MGMT_ACTION_1
),

147 
	mMAC_API_BAD_STATE
,

148 
	mMAC_API_PENDING
,

149 
	mMAC_API_DATA_REQ
,

150 
	mMAC_COMM_STATUS_IND
,

151 
	mMAC_DATA_SEND
,

152 
	mMAC_DATA_RX_IND
,

155 
	mMAC_API_PWR_ON_REQ
 = 
MAC_ACTION_INIT
(
MAC_MGMT_ACTION_2
),

156 
	mMAC_API_DISASSOCIATE_REQ
,

157 
	mMAC_DISASSOC_COMPLETE
,

158 
	mMAC_RX_BEACON
,

159 
	mMAC_RX_DISASSOC
,

162 
	mMAC_API_SCAN_REQ
 = 
MAC_ACTION_INIT
(
MAC_SCAN_ACTION
),

163 
	mMAC_SCAN_COMPLETE
,

164 
	mMAC_SCAN_FAILED_IN_PROGRESS
,

165 
	mMAC_SCAN_NEXT_CHAN
,

166 
	mMAC_SCAN_RX_BEACON
,

167 
	mMAC_SCAN_START_TIMER
,

170 
	mMAC_API_ASSOCIATE_REQ
 = 
MAC_ACTION_INIT
(
MAC_DEVICE_ACTION_1
),

171 
	mMAC_API_POLL_REQ
,

172 
	mMAC_ASSOC_DATA_REQ
,

173 
	mMAC_ASSOC_DATA_REQ_COMPLETE
,

174 
	mMAC_ASSOC_DATA_RX_IND
,

175 
	mMAC_ASSOC_FAILED
,

176 
	mMAC_ASSOC_FRAME_RESPONSE_TIMEOUT
,

177 
	mMAC_POLL_DATA_REQ_COMPLETE
,

178 
	mMAC_POLL_DATA_RX_IND
,

179 
	mMAC_POLL_FRAME_RESPONSE_TIMEOUT
,

180 
	mMAC_POLL_RX_ASSOC_RSP
,

181 
	mMAC_RX_ASSOC_RSP
,

182 
	mMAC_START_FRAME_RESPONSE_TIMER
,

183 
	mMAC_START_RESPONSE_TIMER
,

186 
	mMAC_ASSOC_RX_DISASSOC
 = 
MAC_ACTION_INIT
(
MAC_DEVICE_ACTION_2
),

187 
	mMAC_POLL_RX_DISASSOC
,

188 
	mMAC_SCAN_RX_COORD_REALIGN
,

189 
	mMAC_RX_COORD_REALIGN
,

190 
	mMAC_PAN_CONFLICT_COMPLETE
,

193 
	mMAC_API_START_REQ
 = 
MAC_ACTION_INIT
(
MAC_COORD_ACTION_1
),

194 
	mMAC_START_CONTINUE
,

197 
	mMAC_API_ASSOCIATE_RSP
 = 
MAC_ACTION_INIT
(
MAC_COORD_ACTION_2
),

198 
	mMAC_RX_ASSOC_REQ
,

199 
	mMAC_RX_BEACON_REQ
,

200 
	mMAC_RX_DATA_REQ
,

201 
	mMAC_START_COMPLETE
,

202 
	mMAC_INDIRECT_EXPIRE
,

205 
	mMAC_API_ORPHAN_RSP
 = 
MAC_ACTION_INIT
(
MAC_COORD_ACTION_3
),

206 
	mMAC_API_PURGE_REQ
,

207 
	mMAC_RX_ORPHAN
,

208 
	mMAC_RX_PAN_CONFLICT
,

211 
	mMAC_API_SYNC_REQ
 = 
MAC_ACTION_INIT
(
MAC_BEACON_DEVICE_ACTION
),

212 
	mMAC_AUTO_POLL
,

213 
	mMAC_BEACON_START_FRAME_RSP_TIMER
,

214 
	mMAC_START_BROADCAST_PEND_TIMER


218 
	#MAC_BUF_RESERVED
 0x80

	)

221 
	#MAC_RESPONSE_WAIT_TASK_EVT
 0x01

	)

222 
	#MAC_FRAME_RESPONSE_TASK_EVT
 0x02

	)

223 
	#MAC_SCAN_TASK_EVT
 0x04

	)

224 
	#MAC_EXP_INDIRECT_TASK_EVT
 0x08

	)

225 
	#MAC_TX_COMPLETE_TASK_EVT
 0x10

	)

226 
	#MAC_RX_QUEUE_TASK_EVT
 0x20

	)

227 
	#MAC_START_COMPLETE_TASK_EVT
 0x40

	)

228 
	#MAC_BROADCAST_PEND_TASK_EVT
 0x80

	)

231 
	#MAC_ACTION_POS
 0

	)

232 
	#MAC_NEXT_STATE_POS
 1

	)

233 
	#MAC_NUM_COLS
 2

	)

238 
	mMAC_FEAT_DEVICE
,

239 
	mMAC_FEAT_COORD
,

240 
	mMAC_FEAT_SECURITY
,

241 
	mMAC_FEAT_BEACON_COORD
,

242 
	mMAC_FEAT_BEACON_DEVICE
,

243 
	mMAC_FEAT_GTS_CLIENT
,

244 
	mMAC_FEAT_GTS_SERVER
,

245 
	mMAC_FEAT_MAX


249 
	#MAC_FEAT_DEVICE_MASK
 ((
uöt16
Ë1 << 
MAC_FEAT_DEVICE
)

	)

250 
	#MAC_FEAT_COORD_MASK
 ((
uöt16
Ë1 << 
MAC_FEAT_COORD
)

	)

251 
	#MAC_FEAT_SECURITY_MASK
 ((
uöt16
Ë1 << 
MAC_FEAT_SECURITY
)

	)

252 
	#MAC_FEAT_BEACON_COORD_MASK
 ((
uöt16
Ë1 << 
MAC_FEAT_BEACON_COORD
)

	)

253 
	#MAC_FEAT_BEACON_DEVICE_MASK
 ((
uöt16
Ë1 << 
MAC_FEAT_BEACON_DEVICE
)

	)

254 
	#MAC_FEAT_GTS_CLIENT_MASK
 ((
uöt16
Ë1 << 
MAC_FEAT_GTS_CLIENT
)

	)

255 
	#MAC_FEAT_GTS_SERVER_MASK
 ((
uöt16
Ë1 << 
MAC_FEAT_GTS_SERVER
)

	)

257 
	#MAC_FEAT_GTS_MASK
 (
MAC_FEAT_GTS_CLIENT_MASK
 | 
MAC_FEAT_GTS_SERVER_MASK
)

	)

260 
	#MAC_RX_POLL
 0x01

	)

261 
	#MAC_RX_WHEN_IDLE
 0x02

	)

262 
	#MAC_RX_SCAN
 0x04

	)

263 
	#MAC_RX_BROADCAST_PEND
 0x10

	)

264 
	#MAC_RX_BEACON_DEVICE
 0x20

	)

265 
	#MAC_RX_BEACON_NETWORK
 0x40

	)

266 
	#MAC_RX_BEACON_SYNC
 0x80

	)

269 
	#MAC_TX_MODE_NON_CSMA
 0x01

	)

270 
	#MAC_TX_MODE_SLOTTED
 0x02

	)

271 
	#MAC_TX_MODE_INTERNAL
 0x08

	)

272 
	#MAC_TX_MODE_SCAN_RELATED
 0x10

	)

273 
	#MAC_TX_MODE_BROADCAST
 0x20

	)

274 
	#MAC_TX_MODE_BEACON
 0x40

	)

275 
	#MAC_TX_MODE_REQUESTED
 0x80

	)

278 
	#MAC_TX_SCHED_OUTGOING_CAP
 0x01

	)

279 
	#MAC_TX_SCHED_INCOMING_CAP
 0x02

	)

280 
	#MAC_TX_SCHED_INDIRECT_NO_ACK
 0x04

	)

281 
	#MAC_TX_SCHED_READY
 0x10

	)

282 
	#MAC_TX_SCHED_SCAN_RELATED
 0x20

	)

283 
	#MAC_TX_SCHED_MARKED
 0x40

	)

284 
	#MAC_TX_SCHED_INDIRECT
 0x80

	)

285 
	#MAC_TX_SCHED_INACTIVE
 0xFF

	)

293 #i‡
deföed
(
MAC_NO_PARAM_CHECK
Ë&& MAC_NO_PARAM_CHECK =
TRUE


294 
	#MAC_PARAM_STATUS
(
ex¥
, 
°©us
)

	)

296 
	#MAC_PARAM_STATUS
(
ex¥
, 
°©us
Ëi‡(”x¥Ë=
FALSE
Ë°©u†
MAC_INVALID_PARAMETER


	)

305 c⁄° 
	tuöt8
 (
	tCODE
 * 
	tmacSèãTbl_t
)[
MAC_NUM_COLS
];

310 
macEvítHdr_t
 
	mhdr
;

311 
sD©a_t
 
	mmpdu
;

312 
macTxI¡D©a_t
 
	möã∫Æ
;

315 
macMlmeAssocüãReq_t
 
	massocüãReq
;

316 
macMlmeAssocüãR•_t
 
	massocüãR•
;

317 
macMlmeDißssocüãReq_t
 
	mdißssocüãReq
;

318 
macMlmeOΩh™R•_t
 
	m‹ph™R•
;

319 } 
	mmac
;

320 } 
	tmacApiD©aEvít_t
;

325 
uöt8
 
	mmsduH™dÀ
;

326 } 
	tmacM˝sPurgeReq_t
;

332 
macEvítHdr_t
 
	mhdr
;

335 
macMlmeSˇnReq_t
 
	msˇnReq
;

336 
macMlmeSèπReq_t
 
	m°¨tReq
;

337 
macMlmeSyncReq_t
 
	msyncReq
;

338 
macMlmePﬁlReq_t
 
	mpﬁlReq
;

339 
macM˝sPurgeReq_t
 
	mpurgeReq
;

340 } 
	mmac
;

341 } 
	tmacApiEvít_t
;

346 
macEvítHdr_t
 
	mhdr
;

347 
macApiEvít_t
 
	m≠i
;

348 
macApiD©aEvít_t
 
	m≠iD©a
;

349 
macM˝sD©aReq_t
 
	md©aReq
;

350 
macM˝sD©aInd_t
 
	md©aInd
;

351 
macTx_t
 
	mtx
;

352 
macRx_t
 
	mrx
;

353 
macMlmeBóc⁄NŸifyInd_t
 
	mbóc⁄NŸify
;

354 } 
	tmacEvít_t
;

357 (*
	tmacA˘i⁄_t
)(
	tmacEvít_t
 *
	tpEvít
);

360 c⁄° 
	tmacA˘i⁄_t
 
	tCODE
 * 
	tmacA˘i⁄Së_t
;

365 
macEvít_t
 *
pPídög
;

366 
uöt8
 *
pBuf
;

367 
uöt16
 
„©uªMask
;

368 
uöt8
 
°©e
;

369 } 
	tmacMaö_t
;

372 (*
	tmacRe£t_t
)();

380 c⁄° 
uöt8
 
CODE
 
macIdÀSt
[][
MAC_NUM_COLS
];

381 c⁄° 
uöt8
 
CODE
 
macAssocütögSt
[][
MAC_NUM_COLS
];

382 c⁄° 
uöt8
 
CODE
 
macPﬁlögSt
[][
MAC_NUM_COLS
];

383 c⁄° 
uöt8
 
CODE
 
macSˇ¬ögSt
[][
MAC_NUM_COLS
];

384 c⁄° 
uöt8
 
CODE
 
macSèπögSt
[][
MAC_NUM_COLS
];

387 
macSèãTbl_t
 
macSèãTbl
[];

390 
uöt8
 
macTaskId
;

393 
macMaö_t
 
macMaö
;

396 
macRe£t_t
 
macRe£t
[
MAC_FEAT_MAX
];

399 
macA˘i⁄Së_t
 
macA˘i⁄Së
[
MAC_ACTION_SET_MAX
];

402 c⁄° 
macCfg_t
 
macCfg
;

409 
MAC_INTERNAL_API
 
	`macMaöRe£t
();

410 
MAC_INTERNAL_API
 
	`macSëEvít
(
uöt8
 
evít
);

411 
MAC_INTERNAL_API
 
	`macCbackF‹Evít
(
macEvít_t
 *
pEvít
, 
uöt8
 
°©us
);

412 
MAC_INTERNAL_API
 
boﬁ
 
	`macSèãIdÀ
();

413 
MAC_INTERNAL_API
 
boﬁ
 
	`macSèãIdÀOrPﬁlög
();

414 
MAC_INTERNAL_API
 
boﬁ
 
	`macSèãSˇ¬ög
();

415 
MAC_INTERNAL_API
 
	`macExecuã
(
macEvít_t
 *
pEvít
);

416 
MAC_INTERNAL_API
 
	`macSídMsg
(
uöt8
 
evít
, *
pD©a
);

417 
MAC_INTERNAL_API
 
uöt8
 
	`macSídD©aMsg
(uöt8 
evít
, 
boﬁ
 
£curôy
, *
pD©a
);

418 
MAC_INTERNAL_API
 
	`macMaöRe£rve
(
uöt8
 *
±r
);

419 
MAC_INTERNAL_API
 
	`mac_msg_dóŒoˇã
(
uöt8
 **
msg_±r
);

	@Components/mac/high_level/mac_pib.c

44 
	~"hÆ_mcu.h
"

45 
	~"hÆ_bﬂrd.h
"

46 
	~"mac_≠i.h
"

47 
	~"mac_•ec.h
"

48 
	~"mac_low_Àvñ.h
"

49 
	~"mac_ødio_defs.h
"

50 
	~"mac_maö.h
"

51 
	~"mac_pib.h
"

52 
	~"OSAL.h
"

53 
	~<°ddef.h
>

61 
	#MAC_ATTR_SET1_START
 0x40

	)

62 
	#MAC_ATTR_SET1_END
 0x5D

	)

63 
	#MAC_ATTR_SET1_OFFSET
 0

	)

64 
	#MAC_ATTR_SET2_START
 0xE0

	)

65 
	#MAC_ATTR_SET2_END
 0xE5

	)

66 
	#MAC_ATTR_SET2_OFFSET
 (
MAC_ATTR_SET1_END
 - 
MAC_ATTR_SET1_START
 + 
MAC_ATTR_SET1_OFFSET
 + 1)

	)

69 
	#MAC_MAX_FRAME_RESPONSE_MIN
 143

	)

70 
	#MAC_MAX_FRAME_RESPONSE_MAX
 25776

	)

80 
uöt8
 
	moff£t
;

81 
uöt8
 
	mÀn
;

82 
uöt8
 
	mmö
;

83 
uöt8
 
	mmax
;

84 } 
	tmacPibTbl_t
;

92 
CODE
 c⁄° 
macPib_t
 
	gmacPibDeÁu…s
 =

95 
FALSE
,

96 
TRUE
,

97 
FALSE
,

100 
NULL
,

102 
MAC_BO_NON_BEACON
,

106 {0, 
SADDR_MODE_EXT
},

107 
MAC_SHORT_ADDR_NONE
,

109 
FALSE
,

114 
FALSE
,

115 
FALSE
,

116 
MAC_SHORT_ADDR_NONE
,

118 
MAC_SO_NONE
,

120 
FALSE
,

127 
TRUE
,

128 
FALSE
,

131 #i‡
deföed
 (
HAL_PA_LNA
)

133 #ñi‡
deföed
 (
HAL_PA_LNA_CC2590
)

138 
MAC_CHAN_11
,

139 {0, 
SADDR_MODE_EXT
},

141 
MAC_BO_NON_BEACON
,

147 
CODE
 c⁄° 
macPibTbl_t
 
	gmacPibTbl
[] =

149 {
off£tof
(
macPib_t
, 
ackWaôDuøti⁄
), (
uöt8
), 54, 54},

150 {
off£tof
(
macPib_t
, 
assocüti⁄Pîmô
), (
boﬁ
), 
FALSE
, 
TRUE
},

151 {
off£tof
(
macPib_t
, 
autoReque°
), (
boﬁ
), 
FALSE
, 
TRUE
},

152 {
off£tof
(
macPib_t
, 
b©tLi„Ext
), (
boﬁ
), 
FALSE
, 
TRUE
},

153 {
off£tof
(
macPib_t
, 
b©tLi„ExtPîiods
), (
uöt8
), 6, 6},

155 {
off£tof
(
macPib_t
, 
pBóc⁄Paylﬂd
), (
uöt8
 *), 0, 0},

156 {
off£tof
(
macPib_t
, 
bóc⁄PaylﬂdLígth
), (
uöt8
), 0, 52},

157 {
off£tof
(
macPib_t
, 
bóc⁄Ordî
), (
uöt8
), 0, 15},

158 {
off£tof
(
macPib_t
, 
bóc⁄TxTime
), (
uöt32
), 1, 1},

159 {
off£tof
(
macPib_t
, 
b¢
), (
uöt8
), 0x00, 0xFF},

161 {
off£tof
(
macPib_t
, 
co‹dExãndedAddªss
.
addr
.
extAddr
), (
sAddrExt_t
), 0, 0},

162 {
off£tof
(
macPib_t
, 
co‹dSh‹tAddªss
), (
uöt16
), 0, 0},

163 {
off£tof
(
macPib_t
, 
d¢
), (
uöt8
), 0x00, 0xFF},

164 {
off£tof
(
macPib_t
, 
gtsPîmô
), (
boﬁ
), 
FALSE
, 
TRUE
},

173 {
off£tof
(
macPib_t
, 
maxCsmaBackoffs
), (
uöt8
), 0, 254},

175 {
off£tof
(
macPib_t
, 
möBe
), (
uöt8
), 0, 8},

176 {
off£tof
(
macPib_t
, 
∑nId
), (
uöt16
), 0, 0},

177 {
off£tof
(
macPib_t
, 
¥omiscuousMode
), (
boﬁ
), 
FALSE
, 
TRUE
},

178 {
off£tof
(
macPib_t
, 
rxOnWhíIdÀ
), (
boﬁ
), 
FALSE
, 
TRUE
},

179 {
off£tof
(
macPib_t
, 
sh‹tAddªss
), (
uöt16
), 0, 0},

181 {
off£tof
(
macPib_t
, 
su≥r‰ameOrdî
), (
uöt8
), 0, 15},

182 {
off£tof
(
macPib_t
, 
å™ß˘i⁄Pîsi°í˚Time
), (
uöt16
), 0, 0},

183 {
off£tof
(
macPib_t
, 
assocüãdP™Co‹d
), (
boﬁ
), 
FALSE
, 
TRUE
},

190 {
off£tof
(
macPib_t
, 
maxBe
), (
uöt8
), 0, 8},

191 {
off£tof
(
macPib_t
, 
maxFømeTŸÆWaôTime
), (
uöt16
), 0x00, 0xFF},

193 {
off£tof
(
macPib_t
, 
maxFømeRërõs
), (
uöt8
), 0, 7},

194 {
off£tof
(
macPib_t
, 
ª•⁄£WaôTime
), (
uöt8
), 2, 64},

195 {
off£tof
(
macPib_t
, 
syncSymbﬁOff£t
), (
uöt8
), 0, 0},

196 {
off£tof
(
macPib_t
, 
timeSèmpSuµ‹ãd
), (
boﬁ
), 
FALSE
, 
TRUE
},

197 {
off£tof
(
macPib_t
, 
£curôyE«bÀd
), (
boﬁ
), 
FALSE
, 
TRUE
},

200 {
off£tof
(
macPib_t
, 
phyTønsmôPowî
), (
uöt8
), 0, 0xFF},

201 {
off£tof
(
macPib_t
, 
logiˇlCh™√l
), (
uöt8
), 
MAC_CHAN_11
, 
MAC_CHAN_28
},

202 {
off£tof
(
macPib_t
, 
exãndedAddªss
.
addr
.
extAddr
), (
sAddrExt_t
), 0, 0},

203 {
off£tof
(
macPib_t
, 
ÆtBe
), (
uöt8
), 0, 8},

204 {
off£tof
(
macPib_t
, 
devi˚Bóc⁄Ordî
), (
uöt8
), 0, 15},

205 {
off£tof
(
macPib_t
, 
phyTønsmôPowî
), (
uöt8
), 0, 0},

209 
	#MAC_PIB_INVALID
 ((
uöt8
Ë((
macPibTbl
Ë/ (macPibTbl[0])))

	)

217 
macPib_t
 
	gmacPib
;

236 
MAC_INTERNAL_API
 
	$macPibRe£t
()

239 
macPib
 = 
macPibDeÁu…s
;

242 
macPib
.
d¢
 = 
	`macRadioR™domByã
();

243 
macPib
.
b¢
 = 
	`macRadioR™domByã
();

244 
	}
}

263 
uöt8
 
	$macPibIndex
(
uöt8
 
pibAâribuã
)

265 i‡((
pibAâribuã
 >
MAC_ATTR_SET1_START
Ë&& (pibAâribuã <
MAC_ATTR_SET1_END
))

267  (
pibAâribuã
 - 
MAC_ATTR_SET1_START
 + 
MAC_ATTR_SET1_OFFSET
);

269 i‡((
pibAâribuã
 >
MAC_ATTR_SET2_START
Ë&& (pibAâribuã <
MAC_ATTR_SET2_END
))

271  (
pibAâribuã
 - 
MAC_ATTR_SET2_START
 + 
MAC_ATTR_SET2_OFFSET
);

275  
MAC_PIB_INVALID
;

277 
	}
}

301 
uöt8
 
	$MAC_MlmeGëReq
(
uöt8
 
pibAâribuã
, *
pVÆue
)

303 
uöt8
 
i
;

304 
hÆI¡Sèã_t
 
ötSèã
;

306 i‡((
i
 = 
	`macPibIndex
(
pibAâribuã
)Ë=
MAC_PIB_INVALID
)

308  
MAC_UNSUPPORTED_ATTRIBUTE
;

311 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

312 
	`oßl_mem˝y
(
pVÆue
, (
uöt8
 *Ë&
macPib
 + 
macPibTbl
[
i
].
off£t
, macPibTbl[i].
Àn
);

313 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

314  
MAC_SUCCESS
;

315 
	}
}

338 
uöt8
 
	$MAC_MlmeSëReq
(
uöt8
 
pibAâribuã
, *
pVÆue
)

340 
uöt8
 
i
;

341 
hÆI¡Sèã_t
 
ötSèã
;

343 i‡(
pibAâribuã
 =
MAC_BEACON_PAYLOAD
)

345 
macPib
.
pBóc⁄Paylﬂd
 = 
pVÆue
;

346  
MAC_SUCCESS
;

350 i‡((
i
 = 
	`macPibIndex
(
pibAâribuã
)Ë=
MAC_PIB_INVALID
)

352  
MAC_UNSUPPORTED_ATTRIBUTE
;

356 i‡((
macPibTbl
[
i
].
mö
 !0Ë|| (macPibTbl[i].
max
 != 0))

359 i‡(
macPibTbl
[
i
].
mö
 =macPibTbl[i].
max
)

361  
MAC_READ_ONLY
;

365 i‡(
pibAâribuã
 =
MAC_MAX_FRAME_TOTAL_WAIT_TIME
)

367 i‡((*((
uöt16
 *Ë
pVÆue
Ë< 
MAC_MAX_FRAME_RESPONSE_MIN
) ||

368 (*((
uöt16
 *Ë
pVÆue
Ë> 
MAC_MAX_FRAME_RESPONSE_MAX
))

370  
MAC_INVALID_PARAMETER
;

375 i‡((*((
uöt8
 *Ë
pVÆue
Ë< 
macPibTbl
[
i
].
mö
Ë|| (*((uöt8 *ËpVÆueË> macPibTbl[i].
max
))

377  
MAC_INVALID_PARAMETER
;

383 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

384 
	`oßl_mem˝y
((
uöt8
 *Ë&
macPib
 + 
macPibTbl
[
i
].
off£t
, 
pVÆue
, macPibTbl[i].
Àn
);

385 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

388 
pibAâribuã
)

390 
MAC_PAN_ID
:

392 
	`macRadioSëP™ID
(
macPib
.
∑nId
);

395 
MAC_SHORT_ADDRESS
:

397 
	`macRadioSëSh‹tAddr
(
macPib
.
sh‹tAddªss
);

400 
MAC_RX_ON_WHEN_IDLE
:

402 i‡(
macPib
.
rxOnWhíIdÀ
)

404 
	`macRxE«bÀ
(
MAC_RX_WHEN_IDLE
);

408 
	`macRxDißbÀ
(
MAC_RX_WHEN_IDLE
);

412 
MAC_LOGICAL_CHANNEL
:

413 
	`macRadioSëCh™√l
(
macPib
.
logiˇlCh™√l
);

416 
MAC_EXTENDED_ADDRESS
:

418 
	`macRadioSëIEEEAddr
(
macPib
.
exãndedAddªss
.
addr
.
extAddr
);

421 #i‚de‡
MAC_OBSOLETE_PHY_TRANSMIT_POWER


424 
MAC_PHY_TRANSMIT_POWER
:

426 #i‡!
deföed
 
HAL_MAC_USE_REGISTER_POWER_VALUES
 && \

427 !
deföed
 
HAL_PA_LNA
 && !deföed 
HAL_PA_LNA_CC2590


433 
macPib
.
phyTønsmôPowî
 = (
uöt8
)(-(
öt8
)macPib.phyTransmitPower);

439 
MAC_PHY_TRANSMIT_POWER_SIGNED
:

440 ()
	`macRadioSëTxPowî
(
macPib
.
phyTønsmôPowî
);

447  
MAC_SUCCESS
;

448 
	}
}

	@Components/mac/high_level/mac_pib.h

40 #i‚de‡
MAC_PIB_H


41 
	#MAC_PIB_H


	)

48 
	~"mac_≠i.h
"

49 
	~"mac_high_Àvñ.h
"

59 
uöt8
 
	mackWaôDuøti⁄
;

60 
boﬁ
 
	massocüti⁄Pîmô
;

61 
boﬁ
 
	mautoReque°
;

62 
boﬁ
 
	mb©tLi„Ext
;

63 
uöt8
 
	mb©tLi„ExtPîiods
;

65 
uöt8
 *
	mpBóc⁄Paylﬂd
;

66 
uöt8
 
	mbóc⁄PaylﬂdLígth
;

67 
uöt8
 
	mbóc⁄Ordî
;

68 
uöt32
 
	mbóc⁄TxTime
;

69 
uöt8
 
	mb¢
;

71 
sAddr_t
 
	mco‹dExãndedAddªss
;

72 
uöt16
 
	mco‹dSh‹tAddªss
;

73 
uöt8
 
	md¢
;

74 
boﬁ
 
	mgtsPîmô
;

75 
uöt8
 
	mmaxCsmaBackoffs
;

77 
uöt8
 
	mmöBe
;

78 
uöt16
 
	m∑nId
;

79 
boﬁ
 
	m¥omiscuousMode
;

80 
boﬁ
 
	mrxOnWhíIdÀ
;

81 
uöt16
 
	msh‹tAddªss
;

83 
uöt8
 
	msu≥r‰ameOrdî
;

84 
uöt16
 
	må™ß˘i⁄Pîsi°í˚Time
;

85 
boﬁ
 
	massocüãdP™Co‹d
;

86 
uöt8
 
	mmaxBe
;

87 
uöt16
 
	mmaxFømeTŸÆWaôTime
;

89 
uöt8
 
	mmaxFømeRërõs
;

90 
uöt8
 
	mª•⁄£WaôTime
;

91 
uöt8
 
	msyncSymbﬁOff£t
;

92 
boﬁ
 
	mtimeSèmpSuµ‹ãd
;

93 
boﬁ
 
	m£curôyE«bÀd
;

96 
uöt8
 
	mphyTønsmôPowî
;

97 
uöt8
 
	mlogiˇlCh™√l
;

98 
sAddr_t
 
	mexãndedAddªss
;

99 
uöt8
 
	mÆtBe
;

100 
uöt8
 
	mdevi˚Bóc⁄Ordî
;

102 } 
	tmacPib_t
;

110 
macPib_t
 
macPib
;

117 
MAC_INTERNAL_API
 
macPibRe£t
();

	@Components/mac/high_level/mac_security.h

40 #i‚de‡
MAC_SECURITY_H


41 
	#MAC_SECURITY_H


	)

48 
	~"mac_≠i.h
"

49 
	~"mac_high_Àvñ.h
"

57 
	#MAC_MAX_FRAME_COUNTER
 0xFFFFFFFF

	)

60 
	#MAC_NONCE_LEN
 13

	)

63 
	#MAC_MIC_LEN
 16

	)

66 
	#MAC_CONDITIONALLY_PASSED
 (
MAC_IMPROPER_SECURITY_LEVEL
-1)

	)

69 
	#MAC_DEVICE_LOOKUP_SHORT_LEN
 4

	)

72 
	#MAC_DEVICE_LOOKUP_LONG_LEN
 8

	)

81 
CODE
 c⁄° 
uöt8
 
macAuthTagLí
[];

84 
CODE
 c⁄° 
uöt8
 
macKeySour˚Lí
[];

87 
uöt32
 
macFømeCou¡î
;

115 
MAC_INTERNAL_API
 
uöt8
 
macOutgoögFømeSecurôy
–
macTx_t
 *
pBuf
,

116 
sAddr_t
 *
pD°Addr
,

117 
uöt16
 
d°P™Id
,

118 
uöt8
 **
µKey
 );

143 
MAC_INTERNAL_API
 
uöt8
 
macIncomögFømeSecurôy
–
macRx_t
 *
pMsg
 );

166 
MAC_INTERNAL_API
 
uöt8
 
macCcmSèrTønsf‹m
–uöt8 *
pKey
,

167 
uöt8
 
£curôyLevñ
,

168 
uöt8
 *
pAD©a
,

169 
uöt8
 
aD©aLí
,

170 
uöt8
 *
pMD©a
,

171 
uöt8
 
mD©aLí
 );

	@Components/mac/high_level/mac_spec.h

40 #i‚de‡
MAC_SPEC_H


41 
	#MAC_SPEC_H


	)

49 
	#MAC_PHY_SHR_LEN
 5

	)

50 
	#MAC_PHY_PHR_LEN
 1

	)

53 
	#MAC_FCF_FIELD_LEN
 2

	)

54 
	#MAC_SEQ_NUM_FIELD_LEN
 1

	)

55 
	#MAC_PAN_ID_FIELD_LEN
 2

	)

56 
	#MAC_EXT_ADDR_FIELD_LEN
 8

	)

57 
	#MAC_SHORT_ADDR_FIELD_LEN
 2

	)

58 
	#MAC_FCS_FIELD_LEN
 2

	)

59 
	#MAC_SEC_CONTROL_FIELD_LEN
 1

	)

62 
	#MAC_FCF_OFFSET
 0

	)

63 
	#MAC_SEQ_NUM_OFFSET
 2

	)

64 
	#MAC_DEST_PAN_ID_OFFSET
 3

	)

65 
	#MAC_DEST_ADDR_OFFSET
 5

	)

68 
	#MAC_FCF_FRAME_TYPE_MASK
 0x0007

	)

69 
	#MAC_FCF_SEC_ENABLED_MASK
 0x0008

	)

70 
	#MAC_FCF_FRAME_PENDING_MASK
 0x0010

	)

71 
	#MAC_FCF_ACK_REQUEST_MASK
 0x0020

	)

72 
	#MAC_FCF_INTRA_PAN_MASK
 0x0040

	)

73 
	#MAC_FCF_DST_ADDR_MODE_MASK
 0x0C00

	)

74 
	#MAC_FCF_FRAME_VERSION_MASK
 0x3000

	)

75 
	#MAC_FCF_SRC_ADDR_MODE_MASK
 0xC000

	)

78 
	#MAC_FCF_FRAME_TYPE_POS
 0

	)

79 
	#MAC_FCF_SEC_ENABLED_POS
 3

	)

80 
	#MAC_FCF_FRAME_PENDING_POS
 4

	)

81 
	#MAC_FCF_ACK_REQUEST_POS
 5

	)

82 
	#MAC_FCF_INTRA_PAN_POS
 6

	)

83 
	#MAC_FCF_DST_ADDR_MODE_POS
 10

	)

84 
	#MAC_FCF_FRAME_VERSION_POS
 12

	)

85 
	#MAC_FCF_SRC_ADDR_MODE_POS
 14

	)

88 
	#MAC_SCF_SECURITY_LEVEL_MASK
 0x07

	)

89 
	#MAC_SCF_KEY_IDENTIFIER_MASK
 0x18

	)

92 
	#MAC_SCF_SECURITY_LEVEL_POS
 0

	)

93 
	#MAC_SCF_KEY_IDENTIFIER_POS
 3

	)

96 
	#MAC_SFS_OFFSET
 0

	)

97 
	#MAC_PENDING_ADDR_OFFSET
 3

	)

100 
	#MAC_SFS_BEACON_ORDER_POS
 0

	)

101 
	#MAC_SFS_SUPERFRAME_ORDER_POS
 4

	)

104 
	#MAC_SFS_FINAL_CAP_SLOT_POS
 0

	)

105 
	#MAC_SFS_BATT_LIFE_EXT_POS
 4

	)

106 
	#MAC_SFS_PAN_COORD_POS
 6

	)

107 
	#MAC_SFS_ASSOC_PERMIT_POS
 7

	)

111 
	#MAC_FRAME_TYPE_BEACON
 0

	)

112 
	#MAC_FRAME_TYPE_DATA
 1

	)

113 
	#MAC_FRAME_TYPE_ACK
 2

	)

114 
	#MAC_FRAME_TYPE_COMMAND
 3

	)

115 
	#MAC_FRAME_TYPE_MAX_VALID
 
MAC_FRAME_TYPE_COMMAND


	)

118 
	#MAC_ASSOC_REQ_FRAME
 1

	)

119 
	#MAC_ASSOC_RSP_FRAME
 2

	)

120 
	#MAC_DISASSOC_NOTIF_FRAME
 3

	)

121 
	#MAC_DATA_REQ_FRAME
 4

	)

122 
	#MAC_PAN_CONFLICT_FRAME
 5

	)

123 
	#MAC_ORPHAN_NOTIF_FRAME
 6

	)

124 
	#MAC_BEACON_REQ_FRAME
 7

	)

125 
	#MAC_COORD_REALIGN_FRAME
 8

	)

126 
	#MAC_GTS_REQ_FRAME
 9

	)

129 
	#MAC_ZERO_DATA_PAYLOAD
 0

	)

130 
	#MAC_ASSOC_REQ_PAYLOAD
 2

	)

131 
	#MAC_ASSOC_RSP_PAYLOAD
 4

	)

132 
	#MAC_DISASSOC_NOTIF_PAYLOAD
 2

	)

133 
	#MAC_DATA_REQ_PAYLOAD
 1

	)

134 
	#MAC_PAN_CONFLICT_PAYLOAD
 1

	)

135 
	#MAC_ORPHAN_NOTIF_PAYLOAD
 1

	)

136 
	#MAC_BEACON_REQ_PAYLOAD
 1

	)

137 
	#MAC_COORD_REALIGN_PAYLOAD
 9

	)

138 
	#MAC_GTS_REQ_PAYLOAD
 2

	)

141 
	#MAC_ZERO_DATA_FRAME_LEN
 (21 + 
MAC_ZERO_DATA_PAYLOAD
)

	)

142 
	#MAC_ASSOC_REQ_FRAME_LEN
 (23 + 
MAC_ASSOC_REQ_PAYLOAD
)

	)

143 
	#MAC_ASSOC_RSP_FRAME_LEN
 (23 + 
MAC_ASSOC_RSP_PAYLOAD
)

	)

144 
	#MAC_DISASSOC_NOTIF_FRAME_LEN
 (17 + 
MAC_DISASSOC_NOTIF_PAYLOAD
)

	)

145 
	#MAC_DATA_REQ_FRAME_LEN
 (23 + 
MAC_DATA_REQ_PAYLOAD
)

	)

146 
	#MAC_PAN_CONFLICT_FRAME_LEN
 (23 + 
MAC_PAN_CONFLICT_PAYLOAD
)

	)

147 
	#MAC_ORPHAN_NOTIF_FRAME_LEN
 (17 + 
MAC_ORPHAN_NOTIF_PAYLOAD
)

	)

148 
	#MAC_BEACON_REQ_FRAME_LEN
 (7 + 
MAC_BEACON_REQ_PAYLOAD
)

	)

149 
	#MAC_COORD_REALIGN_FRAME_LEN
 (23 + 
MAC_COORD_REALIGN_PAYLOAD
)

	)

150 
	#MAC_GTS_REQ_FRAME_LEN
 (7 + 
MAC_GTS_REQ_PAYLOAD
)

	)

153 
	#MAC_BEACON_FRAME_BASE_LEN
 (13 + 4)

	)

156 
	#MAC_PEND_ADDR_MAX
 7

	)

159 
	#MAC_ASSOC_SUCCESS
 0

	)

160 
	#MAC_ASSOC_CAPACITY
 1

	)

161 
	#MAC_ASSOC_DENIED
 2

	)

164 
	#MAC_BO_NON_BEACON
 15

	)

165 
	#MAC_SO_NONE
 15

	)

168 
	#MAC_PAN_ID_BROADCAST
 0xFFFF

	)

171 
	#MAC_SYMBOLS_PER_OCTET
 2

	)

174 
	#MAC_A_MAX_PHY_PACKET_SIZE
 127

	)

177 
	#MAC_A_TURNAROUND_TIME
 12

	)

180 
	#MAC_A_BASE_SLOT_DURATION
 3

	)

183 
	#MAC_A_BASE_SUPERFRAME_DURATION
 (
MAC_A_BASE_SLOT_DURATION
 * 
MAC_A_NUM_SUPERFRAME_SLOTS
)

	)

186 
	#MAC_A_MAX_BEACON_OVERHEAD
 75

	)

189 
	#MAC_A_MAX_BEACON_PAYLOAD_LENGTH
 (
MAC_A_MAX_PHY_PACKET_SIZE
 - 
MAC_A_MAX_BEACON_OVERHEAD
)

	)

192 
	#MAC_A_GTS_DESC_PERSISTENCE_TIME
 4

	)

195 
	#MAC_A_MAX_FRAME_OVERHEAD
 25

	)

198 
	#MAC_A_MAX_LOST_BEACONS
 4

	)

201 
	#MAC_A_MAX_FRAME_SIZE
 (
MAC_A_MAX_PHY_PACKET_SIZE
 - 
MAC_A_MAX_FRAME_OVERHEAD
)

	)

204 
	#MAC_A_MAX_SIFS_FRAME_SIZE
 18

	)

207 
	#MAC_A_MIN_CAP_LENGTH
 440

	)

210 
	#MAC_A_MIN_LIFS_PERIOD
 40

	)

213 
	#MAC_A_MIN_SIFS_PERIOD
 12

	)

216 
	#MAC_A_NUM_SUPERFRAME_SLOTS
 16

	)

219 
	#MAC_A_UNIT_BACKOFF_PERIOD
 20

	)

222 
	#MAC_SPEC_ED_MAX
 0xFF

	)

225 
	#MAC_SPEC_ED_MIN_DBM_ABOVE_RECEIVER_SENSITIVITY
 10

	)

231 
	#MAC_SPEC_MIN_RECEIVER_SENSITIVITY
 -85

	)

234 
	#MAC_SPEC_PREAMBLE_FIELD_LENGTH
 8

	)

237 
	#MAC_SPEC_SFD_FIELD_LENGTH
 2

	)

240 
	#MAC_SPEC_USECS_PER_SYMBOL
 16

	)

243 
	#MAC_SPEC_USECS_PER_BACKOFF
 (
MAC_SPEC_USECS_PER_SYMBOL
 * 
MAC_A_UNIT_BACKOFF_PERIOD
)

	)

246 
	#MAC_SPEC_OCTETS_PER_SYMBOL
 2

	)

255 
	#MAC_GTS_FIELDS_LEN
(
gtsS≥c
Ë((
uöt8
)((((gtsS≥cË& 0x07Ë* 3Ë+ (((gtsS≥cË& 0x07Ë? 1 : 0)))

	)

266 
	#MAC_FRAME_TYPE
(
p
Ë(’)[
MAC_FCF_OFFSET
+0] & 0x07)

	)

267 
	#MAC_SEC_ENABLED
(
p
Ë(’)[
MAC_FCF_OFFSET
+0] & 0x08Ë

	)

268 
	#MAC_FRAME_PENDING
(
p
Ë(’)[
MAC_FCF_OFFSET
+0] & 0x10Ë

	)

269 
	#MAC_ACK_REQUEST
(
p
Ë(’)[
MAC_FCF_OFFSET
+0] & 0x20Ë

	)

270 
	#MAC_INTRA_PAN
(
p
Ë(’)[
MAC_FCF_OFFSET
+0] & 0x40Ë

	)

271 
	#MAC_DEST_ADDR_MODE
(
p
Ë((’)[
MAC_FCF_OFFSET
+1] >> 2Ë& 0x3)

	)

272 
	#MAC_FRAME_VERSION
(
p
Ë((’)[
MAC_FCF_OFFSET
+1] >> 4Ë& 0x3)

	)

273 
	#MAC_SRC_ADDR_MODE
(
p
Ë((’)[
MAC_FCF_OFFSET
+1] >> 6Ë& 0x3)

	)

274 
	#MAC_SEQ_NUMBER
(
p
Ë(’)[
MAC_SEQ_NUM_OFFSET
])

	)

	@Components/mac/include/mac_api.h

40 #i‚de‡
MAC_API_H


41 
	#MAC_API_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_ty≥s.h
"

52 
	~"ßddr.h
"

53 
	~"sd©a.h
"

61 
	#MAC_SUCCESS
 0x00

	)

62 
	#MAC_AUTOACK_PENDING_ALL_ON
 0xFE

	)

63 
	#MAC_AUTOACK_PENDING_ALL_OFF
 0xFF

	)

64 
	#MAC_BEACON_LOSS
 0xE0

	)

65 
	#MAC_CHANNEL_ACCESS_FAILURE
 0xE1

	)

67 
	#MAC_COUNTER_ERROR
 0xDB

	)

69 
	#MAC_DENIED
 0xE2

	)

70 
	#MAC_DISABLE_TRX_FAILURE
 0xE3

	)

71 
	#MAC_FRAME_TOO_LONG
 0xE5

	)

73 
	#MAC_IMPROPER_KEY_TYPE
 0xDC

	)

75 
	#MAC_IMPROPER_SECURITY_LEVEL
 0xDD

	)

77 
	#MAC_INVALID_ADDRESS
 0xF5

	)

79 
	#MAC_INVALID_GTS
 0xE6

	)

80 
	#MAC_INVALID_HANDLE
 0xE7

	)

81 
	#MAC_INVALID_INDEX
 0xF9

	)

82 
	#MAC_INVALID_PARAMETER
 0xE8

	)

83 
	#MAC_LIMIT_REACHED
 0xFA

	)

85 
	#MAC_NO_ACK
 0xE9

	)

87 
	#MAC_NO_BEACON
 0xEA

	)

89 
	#MAC_NO_DATA
 0xEB

	)

91 
	#MAC_NO_SHORT_ADDRESS
 0xEC

	)

92 
	#MAC_ON_TIME_TOO_LONG
 0xF6

	)

93 
	#MAC_OUT_OF_CAP
 0xED

	)

94 
	#MAC_PAN_ID_CONFLICT
 0xEE

	)

96 
	#MAC_PAST_TIME
 0xF7

	)

97 
	#MAC_READ_ONLY
 0xFB

	)

98 
	#MAC_REALIGNMENT
 0xEF

	)

99 
	#MAC_SCAN_IN_PROGRESS
 0xFC

	)

100 
	#MAC_SECURITY_ERROR
 0xE4

	)

101 
	#MAC_SUPERFRAME_OVERLAP
 0xFD

	)

102 
	#MAC_TRACKING_OFF
 0xF8

	)

104 
	#MAC_TRANSACTION_EXPIRED
 0xF0

	)

107 
	#MAC_TRANSACTION_OVERFLOW
 0xF1

	)

108 
	#MAC_TX_ACTIVE
 0xF2

	)

109 
	#MAC_UNAVAILABLE_KEY
 0xF3

	)

111 
	#MAC_UNSUPPORTED_ATTRIBUTE
 0xF4

	)

112 
	#MAC_UNSUPPORTED_LEGACY
 0xDE

	)

114 
	#MAC_UNSUPPORTED_SECURITY
 0xDF

	)

115 
	#MAC_UNSUPPORTED
 0x18

	)

116 
	#MAC_BAD_STATE
 0x19

	)

117 
	#MAC_NO_RESOURCES
 0x1A

	)

119 
	#MAC_ACK_PENDING
 0x1B

	)

120 
	#MAC_NO_TIME
 0x1C

	)

121 
	#MAC_TX_ABORTED
 0x1D

	)

122 
	#MAC_DUPLICATED_ENTRY
 0x1E

	)

125 
	#MAC_SEC_LEVEL_NONE
 0x00

	)

126 
	#MAC_SEC_LEVEL_MIC_32
 0x01

	)

127 
	#MAC_SEC_LEVEL_MIC_64
 0x02

	)

128 
	#MAC_SEC_LEVEL_MIC_128
 0x03

	)

129 
	#MAC_SEC_LEVEL_ENC
 0x04

	)

130 
	#MAC_SEC_LEVEL_ENC_MIC_32
 0x05

	)

131 
	#MAC_SEC_LEVEL_ENC_MIC_64
 0x06

	)

132 
	#MAC_SEC_LEVEL_ENC_MIC_128
 0x07

	)

135 
	#MAC_KEY_ID_MODE_NONE
 0x00

	)

136 
	#MAC_KEY_ID_MODE_IMPLICIT
 0x00

	)

137 
	#MAC_KEY_ID_MODE_1
 0x01

	)

138 
	#MAC_KEY_ID_MODE_4
 0x02

	)

139 
	#MAC_KEY_ID_MODE_8
 0x03

	)

142 
	#MAC_KEY_ID_IMPLICIT_LEN
 0

	)

143 
	#MAC_KEY_ID_1_LEN
 1

	)

144 
	#MAC_KEY_ID_4_LEN
 5

	)

145 
	#MAC_KEY_ID_8_LEN
 9

	)

148 
	#MAC_KEY_SOURCE_MAX_LEN
 8

	)

151 
	#MAC_KEY_INDEX_LEN
 1

	)

154 
	#MAC_FRAME_COUNTER_LEN
 4

	)

157 
	#MAC_KEY_MAX_LEN
 16

	)

160 
	#MAC_KEY_LOOKUP_SHORT_LEN
 5

	)

161 
	#MAC_KEY_LOOKUP_LONG_LEN
 9

	)

162 
	#MAC_MAX_KEY_LOOKUP_LEN
 
MAC_KEY_LOOKUP_LONG_LEN


	)

166 #i‡!
deföed
 ( 
MAC_MAX_FRAME_SIZE
 )

167 
	#MAC_MAX_FRAME_SIZE
 102

	)

170 
	#MAC_DATA_OFFSET
 24

	)

171 
	#MAC_ENC_OFFSET
 5

	)

172 
	#MAC_MIC_32_LEN
 4

	)

173 
	#MAC_MIC_64_LEN
 8

	)

174 
	#MAC_MIC_128_LEN
 16

	)

177 
	#MAC_MHR_LEN
 37

	)

180 
	#MAC_TXOPTION_ACK
 0x01

	)

182 
	#MAC_TXOPTION_GTS
 0x02

	)

183 
	#MAC_TXOPTION_INDIRECT
 0x04

	)

186 
	#MAC_TXOPTION_PEND_BIT
 0x08

	)

188 
	#MAC_TXOPTION_NO_RETRANS
 0x10

	)

189 
	#MAC_TXOPTION_NO_CNF
 0x20

	)

191 
	#MAC_TXOPTION_ALT_BE
 0x40

	)

192 
	#MAC_TXOPTION_PWR_CHAN
 0x80

	)

196 
	#MAC_CHAN_11
 11

	)

197 
	#MAC_CHAN_12
 12

	)

198 
	#MAC_CHAN_13
 13

	)

199 
	#MAC_CHAN_14
 14

	)

200 
	#MAC_CHAN_15
 15

	)

201 
	#MAC_CHAN_16
 16

	)

202 
	#MAC_CHAN_17
 17

	)

203 
	#MAC_CHAN_18
 18

	)

204 
	#MAC_CHAN_19
 19

	)

205 
	#MAC_CHAN_20
 20

	)

206 
	#MAC_CHAN_21
 21

	)

207 
	#MAC_CHAN_22
 22

	)

208 
	#MAC_CHAN_23
 23

	)

209 
	#MAC_CHAN_24
 24

	)

210 
	#MAC_CHAN_25
 25

	)

211 
	#MAC_CHAN_26
 26

	)

212 
	#MAC_CHAN_27
 27

	)

213 
	#MAC_CHAN_28
 28

	)

217 
	#MAC_CHAN_MASK
(
ch™
Ë((
uöt32
Ë1 << (ch™))

	)

220 
	#MAC_CHAN_11_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_11
)

	)

221 
	#MAC_CHAN_12_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_12
)

	)

222 
	#MAC_CHAN_13_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_13
)

	)

223 
	#MAC_CHAN_14_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_14
)

	)

224 
	#MAC_CHAN_15_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_15
)

	)

225 
	#MAC_CHAN_16_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_16
)

	)

226 
	#MAC_CHAN_17_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_17
)

	)

227 
	#MAC_CHAN_18_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_18
)

	)

228 
	#MAC_CHAN_19_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_19
)

	)

229 
	#MAC_CHAN_20_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_20
)

	)

230 
	#MAC_CHAN_21_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_21
)

	)

231 
	#MAC_CHAN_22_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_22
)

	)

232 
	#MAC_CHAN_23_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_23
)

	)

233 
	#MAC_CHAN_24_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_24
)

	)

234 
	#MAC_CHAN_25_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_25
)

	)

235 
	#MAC_CHAN_26_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_26
)

	)

236 
	#MAC_CHAN_27_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_27
)

	)

237 
	#MAC_CHAN_28_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_28
)

	)

240 
	#MAC_CHANNEL_PAGE_0
 0

	)

241 
	#MAC_CHANNEL_PAGE_1
 1

	)

242 
	#MAC_CHANNEL_PAGE_2
 2

	)

245 
	#MAC_CAPABLE_PAN_COORD
 0x01

	)

246 
	#MAC_CAPABLE_FFD
 0x02

	)

247 
	#MAC_CAPABLE_MAINS_POWER
 0x04

	)

248 
	#MAC_CAPABLE_RX_ON_IDLE
 0x08

	)

249 
	#MAC_CAPABLE_SECURITY
 0x40

	)

250 
	#MAC_CAPABLE_ALLOC_ADDR
 0x80

	)

253 
	#MAC_ACK_WAIT_DURATION
 0x40

	)

254 
	#MAC_ASSOCIATION_PERMIT
 0x41

	)

255 
	#MAC_AUTO_REQUEST
 0x42

	)

257 
	#MAC_BATT_LIFE_EXT
 0x43

	)

258 
	#MAC_BATT_LIFE_EXT_PERIODS
 0x44

	)

260 
	#MAC_BEACON_PAYLOAD
 0x45

	)

261 
	#MAC_BEACON_PAYLOAD_LENGTH
 0x46

	)

262 
	#MAC_BEACON_ORDER
 0x47

	)

263 
	#MAC_BEACON_TX_TIME
 0x48

	)

265 
	#MAC_BSN
 0x49

	)

266 
	#MAC_COORD_EXTENDED_ADDRESS
 0x4A

	)

268 
	#MAC_COORD_SHORT_ADDRESS
 0x4B

	)

271 
	#MAC_DSN
 0x4C

	)

272 
	#MAC_GTS_PERMIT
 0x4D

	)

273 
	#MAC_MAX_CSMA_BACKOFFS
 0x4E

	)

275 
	#MAC_MIN_BE
 0x4F

	)

280 
	#MAC_PAN_ID
 0x50

	)

282 
	#MAC_PROMISCUOUS_MODE
 0x51

	)

283 
	#MAC_RX_ON_WHEN_IDLE
 0x52

	)

284 
	#MAC_SHORT_ADDRESS
 0x53

	)

289 
	#MAC_SUPERFRAME_ORDER
 0x54

	)

290 
	#MAC_TRANSACTION_PERSISTENCE_TIME
 0x55

	)

292 
	#MAC_ASSOCIATED_PAN_COORD
 0x56

	)

293 
	#MAC_MAX_BE
 0x57

	)

294 
	#MAC_MAX_FRAME_TOTAL_WAIT_TIME
 0x58

	)

297 
	#MAC_MAX_FRAME_RETRIES
 0x59

	)

298 
	#MAC_RESPONSE_WAIT_TIME
 0x5A

	)

301 
	#MAC_SYNC_SYMBOL_OFFSET
 0x5B

	)

302 
	#MAC_TIMESTAMP_SUPPORTED
 0x5C

	)

303 
	#MAC_SECURITY_ENABLED
 0x5D

	)

306 
	#MAC_KEY_TABLE
 0x71

	)

308 
	#MAC_KEY_TABLE_ENTRIES
 0x72

	)

309 
	#MAC_DEVICE_TABLE
 0x73

	)

311 
	#MAC_DEVICE_TABLE_ENTRIES
 0x74

	)

312 
	#MAC_SECURITY_LEVEL_TABLE
 0x75

	)

315 
	#MAC_SECURITY_LEVEL_TABLE_ENTRIES
 0x76

	)

316 
	#MAC_FRAME_COUNTER
 0x77

	)

317 
	#MAC_AUTO_REQUEST_SECURITY_LEVEL
 0x78

	)

318 
	#MAC_AUTO_REQUEST_KEY_ID_MODE
 0x79

	)

319 
	#MAC_AUTO_REQUEST_KEY_SOURCE
 0x7A

	)

320 
	#MAC_AUTO_REQUEST_KEY_INDEX
 0x7B

	)

321 
	#MAC_DEFAULT_KEY_SOURCE
 0x7C

	)

322 
	#MAC_PAN_COORD_EXTENDED_ADDRESS
 0x7D

	)

323 
	#MAC_PAN_COORD_SHORT_ADDRESS
 0x7E

	)

326 
	#MAC_KEY_ID_LOOKUP_ENTRY
 0xD0

	)

327 
	#MAC_KEY_DEVICE_ENTRY
 0xD1

	)

328 
	#MAC_KEY_USAGE_ENTRY
 0xD2

	)

329 
	#MAC_KEY_ENTRY
 0xD3

	)

330 
	#MAC_DEVICE_ENTRY
 0xD4

	)

331 
	#MAC_SECURITY_LEVEL_ENTRY
 0xD5

	)

334 
	#MAC_PHY_TRANSMIT_POWER
 0xE0

	)

335 
	#MAC_LOGICAL_CHANNEL
 0xE1

	)

336 
	#MAC_EXTENDED_ADDRESS
 0xE2

	)

337 
	#MAC_ALT_BE
 0xE3

	)

338 
	#MAC_DEVICE_BEACON_ORDER
 0xE4

	)

339 
	#MAC_PHY_TRANSMIT_POWER_SIGNED
 0xE5

	)

343 
	#MAC_DISASSOC_COORD
 1

	)

344 
	#MAC_DISASSOC_DEVICE
 2

	)

348 
	#MAC_SCAN_ED
 0

	)

351 
	#MAC_SCAN_ACTIVE
 1

	)

354 
	#MAC_SCAN_PASSIVE
 2

	)

356 
	#MAC_SCAN_ORPHAN
 3

	)

361 
	#MAC_ADDR_USE_EXT
 0xFFFE

	)

362 
	#MAC_SHORT_ADDR_BROADCAST
 0xFFFF

	)

363 
	#MAC_SHORT_ADDR_NONE
 0xFFFF

	)

366 
	#MAC_COMM_ASSOCIATE_RSP
 0

	)

367 
	#MAC_COMM_ORPHAN_RSP
 1

	)

368 
	#MAC_COMM_RX_SECURE
 2

	)

371 
	#MAC_PWR_ON
 0

	)

372 
	#MAC_PWR_SLEEP_LITE
 1

	)

373 
	#MAC_PWR_SLEEP_DEEP
 2

	)

376 
	#MAC_MLME_ASSOCIATE_IND
 1

	)

377 
	#MAC_MLME_ASSOCIATE_CNF
 2

	)

378 
	#MAC_MLME_DISASSOCIATE_IND
 3

	)

379 
	#MAC_MLME_DISASSOCIATE_CNF
 4

	)

380 
	#MAC_MLME_BEACON_NOTIFY_IND
 5

	)

381 
	#MAC_MLME_ORPHAN_IND
 6

	)

382 
	#MAC_MLME_SCAN_CNF
 7

	)

383 
	#MAC_MLME_START_CNF
 8

	)

384 
	#MAC_MLME_SYNC_LOSS_IND
 9

	)

385 
	#MAC_MLME_POLL_CNF
 10

	)

386 
	#MAC_MLME_COMM_STATUS_IND
 11

	)

387 
	#MAC_MCPS_DATA_CNF
 12

	)

388 
	#MAC_MCPS_DATA_IND
 13

	)

389 
	#MAC_MCPS_PURGE_CNF
 14

	)

390 
	#MAC_PWR_ON_CNF
 15

	)

391 
	#MAC_MLME_POLL_IND
 16

	)

395 
	#MAC_RANDOM_SEED_LEN
 16

	)

403 
	#MAC_PEND_NUM_SHORT
(
≥ndAddrS≥c
Ë(’ídAddrS≥cË& 0x07)

	)

406 
	#MAC_PEND_NUM_EXT
(
≥ndAddrS≥c
Ë((’ídAddrS≥cË& 0x70Ë>> 4)

	)

409 
	#MAC_PEND_FIELDS_LEN
(
≥ndAddrS≥c
Ë((
	`MAC_PEND_NUM_SHORT
(pendAddrSpec) * 2) + \

410 (
	`MAC_PEND_NUM_EXT
(
≥ndAddrS≥c
Ë* 8))

	)

413 
	#MAC_SFS_BEACON_ORDER
(
s
Ë((sË& 0x0FË

	)

414 
	#MAC_SFS_SUPERFRAME_ORDER
(
s
Ë(((sË>> 4Ë& 0x0FË

	)

415 
	#MAC_SFS_FINAL_CAP_SLOT
(
s
Ë(((sË>> 8Ë& 0x0FË

	)

416 
	#MAC_SFS_BLE
(
s
Ë(((sË>> 12Ë& 0x01Ë

	)

417 
	#MAC_SFS_PAN_COORDINATOR
(
s
Ë(((sË>> 14Ë& 0x01Ë

	)

418 
	#MAC_SFS_ASSOCIATION_PERMIT
(
s
Ë((sË>> 15Ë

	)

428 
uöt8
 
evít
;

429 
uöt8
 
°©us
;

430 } 
	tmacEvítHdr_t
;

435 
uöt8
 
keySour˚
[
MAC_KEY_SOURCE_MAX_LEN
];

436 
uöt8
 
£curôyLevñ
;

437 
uöt8
 
keyIdMode
;

438 
uöt8
 
keyIndex
;

439 } 
	tmacSec_t
;

444 
uöt8
 
lookupD©a
[
MAC_MAX_KEY_LOOKUP_LEN
];

445 
uöt8
 
lookupD©aSize
;

446 } 
	tkeyIdLookupDes¸ùt‹_t
;

451 
uöt8
 
devi˚Des¸ùt‹H™dÀ
;

452 
boﬁ
 
uniqueDevi˚
;

453 
boﬁ
 
bœckLi°ed
;

454 } 
	tkeyDevi˚Des¸ùt‹_t
;

459 
uöt8
 
‰ameTy≥
;

460 
uöt8
 
cmdFømeId
;

461 } 
	tkeyUßgeDes¸ùt‹_t
;

466 
keyIdLookupDes¸ùt‹_t
 *
keyIdLookupLi°
;

467 
uöt8
 
keyIdLookupE¡rõs
;

469 
keyDevi˚Des¸ùt‹_t
 *
keyDevi˚Li°
;

472 
uöt8
 
keyDevi˚Li°E¡rõs
;

474 
keyUßgeDes¸ùt‹_t
 *
keyUßgeLi°
;

476 
uöt8
 
keyUßgeLi°E¡rõs
;

478 
uöt8
 
key
[
MAC_KEY_MAX_LEN
];

479 } 
	tkeyDes¸ùt‹_t
;

484 
uöt16
 
∑nID
;

485 
uöt16
 
sh‹tAddªss
;

486 
sAddrExt_t
 
extAddªss
;

489 
uöt32
 
‰ameCou¡î
;

492 
boﬁ
 
exem±
;

494 } 
	tdevi˚Des¸ùt‹_t
;

499 
uöt8
 
‰ameTy≥
;

500 
uöt8
 
comm™dFømeIdítifõr
;

501 
uöt8
 
£curôyMöimum
;

503 
boﬁ
 
£curôyOvîrideSecurôyMöimum
;

512 } 
	t£curôyLevñDes¸ùt‹_t
;

517 
uöt32
 
time°amp
;

518 
uöt16
 
time°amp2
;

519 
uöt16
 
timeToLive
;

520 
uöt8
 
‰ameTy≥
;

521 
uöt8
 
txO±i⁄s
;

522 
uöt8
 
txMode
;

523 
uöt8
 
txSched
;

524 
uöt8
 
ªåõs
;

525 
uöt8
 
ch™√l
;

526 
uöt8
 
powî
;

527 
uöt8
 
mpduLökQuÆôy
;

528 
uöt8
 
c‹ªœti⁄
;

529 
öt8
 
rssi
;

530 } 
	tmacTxI¡D©a_t
;

535 
uöt8
 
‰ameTy≥
;

536 
uöt8
 
Êags
;

537 } 
	tmacRxI¡D©a_t
;

542 
sAddr_t
 
d°Addr
;

543 
uöt16
 
d°P™Id
;

544 
uöt8
 
§cAddrMode
;

545 
uöt8
 
msduH™dÀ
;

546 
uöt8
 
txO±i⁄s
;

547 
uöt8
 
ch™√l
;

548 
uöt8
 
powî
;

549 } 
	tmacD©aReq_t
;

554 
macEvítHdr_t
 
hdr
;

555 
sD©a_t
 
msdu
;

556 
macTxI¡D©a_t
 
öã∫Æ
;

557 
macSec_t
 
£c
;

558 
macD©aReq_t
 
mac
;

559 } 
	tmacM˝sD©aReq_t
;

564 
sAddr_t
 
§cAddr
;

565 
sAddr_t
 
d°Addr
;

566 
uöt32
 
time°amp
;

567 
uöt16
 
time°amp2
;

569 
uöt16
 
§cP™Id
;

570 
uöt16
 
d°P™Id
;

571 
uöt8
 
mpduLökQuÆôy
;

572 
uöt8
 
c‹ªœti⁄
;

573 
öt8
 
rssi
;

574 
uöt8
 
d¢
;

575 } 
	tmacD©aInd_t
;

581 
macEvítHdr_t
 
hdr
;

582 
sD©a_t
 
msdu
;

583 
macRxI¡D©a_t
 
öã∫Æ
;

584 
macSec_t
 
£c
;

585 
macD©aInd_t
 
mac
;

586 } 
	tmacM˝sD©aInd_t
;

591 
macEvítHdr_t
 
hdr
;

592 
uöt8
 
msduH™dÀ
;

593 
macM˝sD©aReq_t
 *
pD©aReq
;

594 
uöt32
 
time°amp
;

595 
uöt16
 
time°amp2
;

597 
uöt8
 
ªåõs
;

598 
uöt8
 
mpduLökQuÆôy
;

599 
uöt8
 
c‹ªœti⁄
;

600 
öt8
 
rssi
;

601 } 
	tmacM˝sD©aCnf_t
;

607 
macEvítHdr_t
 
hdr
;

608 
uöt8
 
msduH™dÀ
;

609 } 
	tmacM˝sPurgeCnf_t
;

614 
sAddr_t
 
co‹dAddªss
;

615 
uöt16
 
co‹dP™Id
;

616 
uöt16
 
su≥r‰ameS≥c
;

617 
uöt8
 
logiˇlCh™√l
;

618 
uöt8
 
ch™√lPage
;

619 
boﬁ
 
gtsPîmô
;

620 
uöt8
 
lökQuÆôy
;

621 
uöt32
 
time°amp
;

622 
boﬁ
 
£curôyFaûuª
;

623 
macSec_t
 
£c
;

624 } 
	tmacP™Desc_t
;

629 
uöt8
 
logiˇlCh™√l
;

630 
uöt8
 
ch™√lPage
;

631 
sAddr_t
 
co‹dAddªss
;

632 
uöt16
 
co‹dP™Id
;

633 
uöt8
 
ˇ∑bûôyInf‹m©i⁄
;

634 
macSec_t
 
£c
;

635 } 
	tmacMlmeAssocüãReq_t
;

640 
sAddrExt_t
 
devi˚Addªss
;

641 
uöt16
 
assocSh‹tAddªss
;

642 
uöt8
 
°©us
;

643 
macSec_t
 
£c
;

644 } 
	tmacMlmeAssocüãR•_t
;

649 
sAddr_t
 
devi˚Addªss
;

650 
uöt16
 
devi˚P™Id
;

651 
uöt8
 
dißssocüãRós⁄
;

652 
boﬁ
 
txIndúe˘
;

653 
macSec_t
 
£c
;

654 } 
	tmacMlmeDißssocüãReq_t
;

660 
sAddrExt_t
 
‹ph™Addªss
;

661 
uöt16
 
sh‹tAddªss
;

662 
boﬁ
 
assocüãdMembî
;

663 
macSec_t
 
£c
;

664 } 
	tmacMlmeOΩh™R•_t
;

669 
sAddr_t
 
co‹dAddªss
;

670 
uöt16
 
co‹dP™Id
;

671 
macSec_t
 
£c
;

672 } 
	tmacMlmePﬁlReq_t
;

677 
uöt32
 
sˇnCh™√ls
;

678 
uöt8
 
sˇnTy≥
;

679 
uöt8
 
sˇnDuøti⁄
;

680 
uöt8
 
ch™√lPage
;

681 
uöt8
 
maxResu…s
;

682 
macSec_t
 
£c
;

684 
uöt8
 *
pE√rgyDëe˘
;

685 
macP™Desc_t
 *
pP™Des¸ùt‹
;

686 } 
ªsu…
;

687 } 
	tmacMlmeSˇnReq_t
;

692 
uöt32
 
°¨tTime
;

693 
uöt16
 
∑nId
;

694 
uöt8
 
logiˇlCh™√l
;

695 
uöt8
 
ch™√lPage
;

696 
uöt8
 
bóc⁄Ordî
;

697 
uöt8
 
su≥r‰ameOrdî
;

698 
boﬁ
 
∑nCo‹dö©‹
;

699 
boﬁ
 
b©ãryLi„Ext
;

701 
boﬁ
 
co‹dRólignmít
;

703 
macSec_t
 
ªÆignSec
;

704 
macSec_t
 
bóc⁄Sec
;

705 } 
	tmacMlmeSèπReq_t
;

710 
uöt8
 
logiˇlCh™√l
;

711 
uöt8
 
ch™√lPage
;

712 
boﬁ
 
åackBóc⁄
;

714 } 
	tmacMlmeSyncReq_t
;

719 
macEvítHdr_t
 
hdr
;

720 
sAddrExt_t
 
devi˚Addªss
;

721 
uöt8
 
ˇ∑bûôyInf‹m©i⁄
;

722 
macSec_t
 
£c
;

723 } 
	tmacMlmeAssocüãInd_t
;

728 
macEvítHdr_t
 
hdr
;

729 
uöt16
 
assocSh‹tAddªss
;

730 
macSec_t
 
£c
;

731 } 
	tmacMlmeAssocüãCnf_t
;

736 
macEvítHdr_t
 
hdr
;

737 
sAddrExt_t
 
devi˚Addªss
;

738 
uöt8
 
dißssocüãRós⁄
;

739 
macSec_t
 
£c
;

740 } 
	tmacMlmeDißssocüãInd_t
;

745 
macEvítHdr_t
 
hdr
;

746 
sAddr_t
 
devi˚Addªss
;

748 
uöt16
 
∑nId
;

750 } 
	tmacMlmeDißssocüãCnf_t
;

755 
macEvítHdr_t
 
hdr
;

756 
uöt8
 
b¢
;

757 
macP™Desc_t
 *
pP™Desc
;

758 
uöt8
 
≥ndAddrS≥c
;

759 
uöt8
 *
pAddrLi°
;

760 
uöt8
 
sduLígth
;

761 
uöt8
 *
pSdu
;

762 } 
	tmacMlmeBóc⁄NŸifyInd_t
;

767 
macEvítHdr_t
 
hdr
;

768 
sAddrExt_t
 
‹ph™Addªss
;

769 
macSec_t
 
£c
;

770 } 
	tmacMlmeOΩh™Ind_t
;

775 
macEvítHdr_t
 
hdr
;

776 
uöt8
 
sˇnTy≥
;

777 
uöt8
 
ch™√lPage
;

778 
uöt32
 
unsˇ¬edCh™√ls
;

779 
uöt8
 
ªsu…Li°Size
;

782 
uöt8
 *
pE√rgyDëe˘
;

783 
macP™Desc_t
 *
pP™Des¸ùt‹
;

784 } 
ªsu…
;

785 } 
	tmacMlmeSˇnCnf_t
;

790 
macEvítHdr_t
 
hdr
;

791 } 
	tmacMlmeSèπCnf_t
;

796 
macEvítHdr_t
 
hdr
;

797 
uöt16
 
∑nId
;

798 
uöt8
 
logiˇlCh™√l
;

799 
uöt8
 
ch™√lPage
;

800 
macSec_t
 
£c
;

801 } 
	tmacMlmeSyncLossInd_t
;

806 
macEvítHdr_t
 
hdr
;

807 } 
	tmacMlmePﬁlCnf_t
;

812 
macEvítHdr_t
 
hdr
;

813 
sAddr_t
 
§cAddr
;

814 
sAddr_t
 
d°Addr
;

815 
uöt16
 
∑nId
;

816 
uöt8
 
ªas⁄
;

817 
macSec_t
 
£c
;

818 } 
	tmacMlmeCommSètusInd_t
;

823 
macEvítHdr_t
 
hdr
;

824 
uöt16
 
§cSh‹tAddr
;

825 
uöt16
 
§cP™Id
;

826 } 
	tmacMlmePﬁlInd_t
;

831 
macEvítHdr_t
 
hdr
;

832 
macMlmeAssocüãInd_t
 
assocüãInd
;

833 
macMlmeAssocüãCnf_t
 
assocüãCnf
;

834 
macMlmeDißssocüãInd_t
 
dißssocüãInd
;

835 
macMlmeDißssocüãCnf_t
 
dißssocüãCnf
;

836 
macMlmeBóc⁄NŸifyInd_t
 
bóc⁄NŸifyInd
;

837 
macMlmeOΩh™Ind_t
 
‹ph™Ind
;

838 
macMlmeSˇnCnf_t
 
sˇnCnf
;

839 
macMlmeSèπCnf_t
 
°¨tCnf
;

840 
macMlmeSyncLossInd_t
 
syncLossInd
;

841 
macMlmePﬁlCnf_t
 
pﬁlCnf
;

842 
macMlmeCommSètusInd_t
 
commSètusInd
;

843 
macMlmePﬁlInd_t
 
pﬁlInd
;

844 
macM˝sD©aCnf_t
 
d©aCnf
;

845 
macM˝sD©aInd_t
 
d©aInd
;

846 
macM˝sPurgeCnf_t
 
purgeCnf
;

847 } 
	tmacCbackEvít_t
;

852 
uöt8
 
txD©aMax
;

853 
uöt8
 
txMax
;

854 
uöt8
 
rxMax
;

855 
uöt8
 
d©aIndOff£t
;

857 
boﬁ
 
≠pPídögQueue
;

859 } 
	tmacCfg_t
;

870 
macTaskInô
(
uöt8
 
èskId
);

871 
uöt16
 
macEvítLo›
(
uöt8
 
èskId
, uöt16 
evíts
);

897 
MAC_Inô
();

919 
MAC_InôDevi˚
();

944 
MAC_InôCo‹d
();

965 
MAC_InôSecurôy
();

986 
MAC_InôBóc⁄Co‹d
();

1008 
MAC_InôBóc⁄Devi˚
();

1027 
MAC_M˝sD©aReq
(
macM˝sD©aReq_t
 *
pD©a
);

1047 
MAC_M˝sPurgeReq
(
uöt8
 
msduH™dÀ
);

1070 
macM˝sD©aReq_t
 *
MAC_M˝sD©aAŒoc
(
uöt8
 
Àn
, uöt8 
£curôyLevñ
, uöt8 
keyIdMode
);

1096 
MAC_MlmeAssocüãReq
(
macMlmeAssocüãReq_t
 *
pD©a
);

1118 
uöt8
 
MAC_MlmeAssocüãR•
(
macMlmeAssocüãR•_t
 *
pD©a
);

1140 
MAC_MlmeDißssocüãReq
(
macMlmeDißssocüãReq_t
 *
pD©a
);

1163 
uöt8
 
MAC_MlmeGëReq
(uöt8 
pibAâribuã
, *
pVÆue
);

1187 
uöt8
 
MAC_MlmeGëSecurôyReq
(uöt8 
pibAâribuã
, *
pVÆue
);

1209 
MAC_MlmeOΩh™R•
(
macMlmeOΩh™R•_t
 *
pD©a
);

1232 
MAC_MlmePﬁlReq
(
macMlmePﬁlReq_t
 *
pD©a
);

1254 
uöt8
 
MAC_MlmeRe£tReq
(
boﬁ
 
£tDeÁu…Pib
);

1280 
MAC_MlmeSˇnReq
(
macMlmeSˇnReq_t
 *
pD©a
);

1303 
uöt8
 
MAC_MlmeSëReq
(uöt8 
pibAâribuã
, *
pVÆue
);

1327 
uöt8
 
MAC_MlmeSëSecurôyReq
(uöt8 
pibAâribuã
, *
pVÆue
);

1351 
MAC_MlmeSèπReq
(
macMlmeSèπReq_t
 *
pD©a
);

1375 
MAC_MlmeSyncReq
(
macMlmeSyncReq_t
 *
pD©a
);

1402 
uöt8
 
MAC_PwrOffReq
(uöt8 
mode
);

1422 
MAC_PwrOnReq
();

1440 
uöt8
 
MAC_PwrMode
();

1459 
uöt32
 
MAC_PwrNextTimeout
();

1477 
uöt8
 
MAC_R™domByã
();

1495 
uöt8
 
MAC_SrcM©chE«bÀ
 ( uöt8 
addrTy≥
, uöt8 
num
 );

1515 
uöt8
 
MAC_SrcM©chAddE¡ry
 ( 
sAddr_t
 *
addr
, 
uöt16
 
∑nID
 );

1534 
uöt8
 
MAC_SrcM©chDñëeE¡ry
 ( 
sAddr_t
 *
addr
, 
uöt16
 
∑nID
 );

1552 
MAC_SrcM©chAckAŒPídög
 ( 
uöt8
 
›ti⁄
 );

1566 
uöt8
 
MAC_SrcM©chCheckAŒPídög
 ( );

1581 
MAC_SëRadioRegTabÀ
 ( 
uöt8
 
txPwrTblIdx
, uöt8 
rssiAdjIdx
 );

1606 
MAC_CbackEvít
(
macCbackEvít_t
 *
pD©a
);

1628 
uöt8
 
MAC_CbackCheckPídög
();

1633 #ifde‡
__˝lu•lus


	@Components/mac/low_level/srf04/mac_assert.h

40 #i‚de‡
MAC_ASSERT_H


41 
	#MAC_ASSERT_H


	)

47 
	~"hÆ_as£π.h
"

73 #ifde‡
MACNODEBUG


74 
	#MAC_ASSERT
(
ex¥
)

	)

75 
	#MAC_ASSERT_FORCED
()

	)

76 
	#MAC_ASSERT_STATEMENT
(
°©emít
)

	)

77 
	#MAC_ASSERT_DECLARATION
(
de˛¨©i⁄
)

	)

79 
	#MAC_ASSERT
(
ex¥
Ë
	`HAL_ASSERT
–ex¥ )

	)

80 
	#MAC_ASSERT_FORCED
(Ë
	`HAL_ASSERT_FORCED
()

	)

81 
	#MAC_ASSERT_STATEMENT
(
°©emít
Ë
	`HAL_ASSERT_STATEMENT
–°©emíà)

	)

82 
	#MAC_ASSERT_DECLARATION
(
de˛¨©i⁄
Ë
	`HAL_ASSERT_DECLARATION
–de˛¨©i⁄ )

	)

	@Components/mac/low_level/srf04/mac_autopend.c

41 
	~"mac_≠i.h
"

42 
	~"mac_ødio_defs.h
"

45 
	~"OSAL.h
"

46 
	~"ßddr.h
"

47 
	~"ZComDef.h
"

49 
	~"mac_aut›íd.h
"

55 
	#MAC_SRCMATCH_INVALID_INDEX
 0xFF

	)

57 
	#MAC_SRCMATCH_SHORT_ENTRY_SIZE
 4

	)

58 
	#MAC_SRCMATCH_EXT_ENTRY_SIZE
 
Z_EXTADDR_LEN


	)

60 
	#MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES
 24

	)

61 
	#MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES
 12

	)

63 
	#MAC_SRCMATCH_ENABLE_BITMAP_LEN
 3

	)

69 
boﬁ
 
	gmacSrcM©chIsE«bÀd
 = 
FALSE
;

80 
uöt8
 
	gmacSrcM©chMaxNumE¡rõs
 = 0;

81 
uöt8
 
	gmacSrcM©chAddrMode
 = 
SADDR_MODE_SHORT
;

82 
boﬁ
 
	gmacSrcM©chIsAckAŒPídög
 = 
FALSE
;

88 
uöt8
 
macSrcM©chFödEm±yE¡ry
( );

89 
uöt8
 
macSrcM©chCheckSrcAddr
 ( 
sAddr_t
 *
addr
, 
uöt16
 
∑nID
 );

90 
macSrcM©chSëPídEnBô
–
uöt8
 
ödex
 );

91 
macSrcM©chSëE«bÀBô
–
uöt8
 
ödex
, 
boﬁ
 
›ti⁄
 );

92 
boﬁ
 
macSrcM©chCheckE«bÀBô
–
uöt8
 
ödex
 );

93 
uöt24
 
macSrcM©chGëE«bÀBô
( );

94 
uöt24
 
macSrcM©chGëPídEnBô
( );

111 
uöt8
 
	$MAC_SrcM©chE«bÀ
 ( 
uöt8
 
addrTy≥
, uöt8 
num
 )

113 
uöt8
 
πn
;

114 
uöt8
 
maxNum
;

117 if–
addrTy≥
 !
SADDR_MODE_SHORT
 &&áddrTy≥ !
SADDR_MODE_EXT
 )

119  
MAC_INVALID_PARAMETER
;

122 
maxNum
 = ( 
addrTy≥
 =
SADDR_MODE_SHORT
 ) ?

123 
MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES
 : 
MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES
;

125 if–
num
 > 
maxNum
 )

127 
πn
 = 
MAC_INVALID_PARAMETER
;

128 
num
 = 
maxNum
;

132 
πn
 = 
MAC_SUCCESS
;

136 
	`MAC_RADIO_TURN_ON_RX_FRAME_FILTERING
();

139 
	`MAC_RADIO_TURN_ON_AUTO_ACK
();

142 
	`MAC_RADIO_TURN_ON_SRC_MATCH
();

145 
	`MAC_RADIO_TURN_ON_AUTOPEND
();

148 
macSrcM©chIsE«bÀd
 = 
TRUE
;

149 
macSrcM©chMaxNumE¡rõs
 = 
num
;

150 
macSrcM©chAddrMode
 = 
addrTy≥
;

152  
πn
;

153 
	}
}

171 
uöt8
 
	$MAC_SrcM©chAddE¡ry
 ( 
sAddr_t
 *
addr
, 
uöt16
 
∑nID
 )

173 
uöt8
 
ödex
;

174 
uöt8
 
íåy
[
MAC_SRCMATCH_SHORT_ENTRY_SIZE
];

177 i‡–
addr
 =
NULL
 ||áddr->
addrMode
 !
macSrcM©chAddrMode
 )

179  
MAC_INVALID_PARAMETER
;

183 i‡–
	`macSrcM©chCheckSrcAddr
–
addr
, 
∑nID
 ) !
MAC_SRCMATCH_INVALID_INDEX
 )

185  
MAC_DUPLICATED_ENTRY
;

191 
ödex
 = 
	`macSrcM©chFödEm±yE¡ry
();

192 i‡–
ödex
 =
macSrcM©chMaxNumE¡rõs
 )

194  
MAC_NO_RESOURCES
;

197 i‡–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

200 
íåy
[0] = 
	`LO_UINT16
–
∑nID
 );

201 
íåy
[1] = 
	`HI_UINT16
–
∑nID
 );

202 
íåy
[2] = 
	`LO_UINT16
–
addr
->addr.
sh‹tAddr
 );

203 
íåy
[3] = 
	`HI_UINT16
–
addr
->addr.
sh‹tAddr
 );

204 
	`MAC_RADIO_SRC_MATCH_TABLE_WRITE
––
ödex
 * 
MAC_SRCMATCH_SHORT_ENTRY_SIZE
 ),

205 
íåy
, 
MAC_SRCMATCH_SHORT_ENTRY_SIZE
 );

210 
	`MAC_RADIO_SRC_MATCH_TABLE_WRITE
––
ödex
 * 
MAC_SRCMATCH_EXT_ENTRY_SIZE
 ),

211 
addr
->addr.
extAddr
, 
MAC_SRCMATCH_EXT_ENTRY_SIZE
 );

215 
	`macSrcM©chSëPídEnBô
–
ödex
 );

218 
	`macSrcM©chSëE«bÀBô
–
ödex
, 
TRUE
 );

220  
MAC_SUCCESS
;

221 
	}
}

238 
uöt8
 
	$MAC_SrcM©chDñëeE¡ry
 ( 
sAddr_t
 *
addr
, 
uöt16
 
∑nID
 )

240 
uöt8
 
ödex
;

242 i‡–
addr
 =
NULL
 ||áddr->
addrMode
 !
macSrcM©chAddrMode
 )

244  
MAC_INVALID_PARAMETER
;

248 
ödex
 = 
	`macSrcM©chCheckSrcAddr
–
addr
, 
∑nID
 );

250 if–
ödex
 =
MAC_SRCMATCH_INVALID_INDEX
 )

252  
MAC_INVALID_PARAMETER
;

256 
	`macSrcM©chSëE«bÀBô
–
ödex
, 
FALSE
 );

258  
MAC_SUCCESS
;

259 
	}
}

275 
	$MAC_SrcM©chAckAŒPídög
 ( 
uöt8
 
›ti⁄
 )

277 if–
›ti⁄
 =
TRUE
 )

279 
macSrcM©chIsAckAŒPídög
 = 
TRUE
;

282 
	`MAC_RADIO_TURN_ON_PENDING_OR
();

286 
macSrcM©chIsAckAŒPídög
 = 
FALSE
;

289 
	`MAC_RADIO_TURN_OFF_PENDING_OR
();

291 
	}
}

303 
uöt8
 
	$MAC_SrcM©chCheckAŒPídög
 ( )

305 if–
macSrcM©chIsAckAŒPídög
 =
TRUE
 )

307  
MAC_AUTOACK_PENDING_ALL_ON
;

310  
MAC_AUTOACK_PENDING_ALL_OFF
;

311 
	}
}

322 
MAC_INTERNAL_API
 
boﬁ
 
	$MAC_SrcM©chCheckResu…
( )

324 
uöt8
 
ªsIndex
;

326 i‡–
macSrcM©chIsAckAŒPídög
 )

328  (
TRUE
);

331 
	`MAC_RADIO_SRC_MATCH_RESINDEX
–
ªsIndex
 );

333  ( 
ªsIndex
 & 
AUTOPEND_RES
 );

334 
	}
}

345 
uöt8
 
	$macSrcM©chFödEm±yE¡ry
( )

347 
uöt8
 
ödex
;

348 
uöt24
 
íabÀ
;

350 
íabÀ
 = 
	`MAC_RADIO_SRC_MATCH_GET_EN
();

352 if–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

354  
ödex
 = 0; index < 
macSrcM©chMaxNumE¡rõs
; index++ )

356 if––
íabÀ
 & ( (
uöt24
)0x01 << 
ödex
 ) ) == 0 )

358  
ödex
;

364  
ödex
 = 0; index < 
macSrcM©chMaxNumE¡rõs
; index++ )

366 if––
íabÀ
 & ( (
uöt24
)0x01 << ( 
ödex
 * 2 ) ) ) == 0 )

368  
ödex
;

377  
ödex
;

378 
	}
}

395 
uöt8
 
	$macSrcM©chCheckSrcAddr
 ( 
sAddr_t
 *
addr
, 
uöt16
 
∑nID
 )

397 
uöt8
 
ödex
;

398 
uöt8
 *
pAddr
;

399 
uöt8
 
íåySize
;

400 
uöt8
 
íåy
[
MAC_SRCMATCH_SHORT_ENTRY_SIZE
];

401 
uöt8
 
ømE¡ry
[
MAC_SRCMATCH_EXT_ENTRY_SIZE
];

407 if–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

409 
íåy
[0] = 
	`LO_UINT16
–
∑nID
 );

410 
íåy
[1] = 
	`HI_UINT16
–
∑nID
 );

411 
íåy
[2] = 
	`LO_UINT16
–
addr
->addr.
sh‹tAddr
 );

412 
íåy
[3] = 
	`HI_UINT16
–
addr
->addr.
sh‹tAddr
 );

413 
pAddr
 = 
íåy
;

414 
íåySize
 = 
MAC_SRCMATCH_SHORT_ENTRY_SIZE
;

418 
pAddr
 = 
addr
->addr.
extAddr
;

419 
íåySize
 = 
MAC_SRCMATCH_EXT_ENTRY_SIZE
;

422  
ödex
 = 0; index < 
macSrcM©chMaxNumE¡rõs
; index++ )

425 if–
	`macSrcM©chCheckE«bÀBô
–
ödex
 ) =
FALSE
 )

431 
	`MAC_RADIO_SRC_MATCH_TABLE_READ
––
ödex
 * 
íåySize
 ), 
ømE¡ry
,ÉntrySize );

433 if–
	`oßl_memcmp
–
pAddr
, 
ømE¡ry
, 
íåySize
 ) =
TRUE
 )

436  
ödex
;

440  
MAC_SRCMATCH_INVALID_INDEX
;

441 
	}
}

452 
	$macSrcM©chSëPídEnBô
–
uöt8
 
ödex
 )

454 
uöt24
 
íabÀ
;

455 
uöt8
 
buf
[
MAC_SRCMATCH_ENABLE_BITMAP_LEN
];

457 
íabÀ
 = 
	`MAC_RADIO_SRC_MATCH_GET_PENDEN
();

459 if–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

461 
íabÀ
 |–(
uöt24
)0x01 << 
ödex
 );

462 
	`oßl_buf„r_uöt24
–
buf
, 
íabÀ
 );

463 
	`MAC_RADIO_SRC_MATCH_SET_SHORTPENDEN
–
buf
 );

467 
íabÀ
 |–(
uöt24
)0x01 << ( 
ödex
 * 2 ) );

468 
	`oßl_buf„r_uöt24
–
buf
, 
íabÀ
 );

469 
	`MAC_RADIO_SRC_MATCH_SET_EXTPENDEN
–
buf
 );

471 
	}
}

483 
	$macSrcM©chSëE«bÀBô
–
uöt8
 
ödex
, 
boﬁ
 
›ti⁄
 )

485 
uöt24
 
íabÀ
;

487 
íabÀ
 = 
	`MAC_RADIO_SRC_MATCH_GET_EN
();

489 if–
›ti⁄
 =
TRUE
 )

491 if–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

493 
íabÀ
 |–(
uöt24
)0x01 << 
ödex
 );

494 
	`MAC_RADIO_SRC_MATCH_SET_SHORTEN
–
íabÀ
 );

498 
íabÀ
 |–(
uöt24
)0x01 << ( 
ödex
 * 2 ) );

499 
	`MAC_RADIO_SRC_MATCH_SET_EXTEN
–
íabÀ
 );

504 if–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

506 
íabÀ
 &~–(
uöt24
)0x01 << 
ödex
 );

507 
	`MAC_RADIO_SRC_MATCH_SET_SHORTEN
–
íabÀ
 );

511 
íabÀ
 &~–(
uöt24
)0x01 << ( 
ödex
 * 2 ) );

512 
	`MAC_RADIO_SRC_MATCH_SET_EXTEN
–
íabÀ
 );

515 
	}
}

526 
boﬁ
 
	$macSrcM©chCheckE«bÀBô
–
uöt8
 
ödex
 )

528 
uöt24
 
íabÀ
;

530 if–
macSrcM©chAddrMode
 =
SADDR_MODE_EXT
 )

532 
ödex
 *= 2;

535 
íabÀ
 = 
	`MAC_RADIO_SRC_MATCH_GET_EN
();

537 if–
íabÀ
 & ( (
uöt24
)0x01 << 
ödex
 ) )

539  
TRUE
;

542  
FALSE
;

543 
	}
}

554 
uöt24
 
	$macSrcM©chGëE«bÀBô
( )

556 
uöt8
 
buf
[
MAC_SRCMATCH_ENABLE_BITMAP_LEN
];

558 if–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

560 
	`MAC_RADIO_GET_SRC_SHORTEN
–
buf
 );

564 
	`MAC_RADIO_GET_SRC_EXTEN
–
buf
 );

567  
	`oßl_buûd_uöt32
–
buf
, 
MAC_SRCMATCH_ENABLE_BITMAP_LEN
 );

568 
	}
}

579 
uöt24
 
	$macSrcM©chGëPídEnBô
( )

581 
uöt8
 
buf
[
MAC_SRCMATCH_ENABLE_BITMAP_LEN
];

583 if–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

585 
	`MAC_RADIO_GET_SRC_SHORTPENDEN
–
buf
 );

589 
	`MAC_RADIO_GET_SRC_EXTENPEND
–
buf
 );

592  
	`oßl_buûd_uöt32
–
buf
, 
MAC_SRCMATCH_ENABLE_BITMAP_LEN
 );

593 
	}
}

	@Components/mac/low_level/srf04/mac_autopend.h

40 #i‚de‡
MAC_AUTOPEND_H


41 
	#MAC_AUTOPEND_H


	)

47 
	~"mac_high_Àvñ.h
"

58 
boﬁ
 
macSrcM©chIsE«bÀd
;

64 
MAC_INTERNAL_API
 
boﬁ
 
MAC_SrcM©chCheckResu…
();

	@Components/mac/low_level/srf04/mac_backoff_timer.c

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_mcu.h
"

50 
	~"mac_•ec.h
"

53 
	~"mac_low_Àvñ.h
"

56 
	~"mac_backoff_timî.h
"

57 
	~"mac_tx.h
"

60 
	~"mac_ødio_defs.h
"

63 
	~"mac_as£π.h
"

70 
	#COMPARE_STATE_ROLLOVER_BV
 
	`BV
(0)

	)

71 
	#COMPARE_STATE_TRIGGER_BV
 
	`BV
(1)

	)

72 
	#COMPARE_STATE_ARM_BV
 
	`BV
(2)

	)

74 
	#COMPARE_STATE_TRIGGER
 
COMPARE_STATE_TRIGGER_BV


	)

75 
	#COMPARE_STATE_ROLLOVER
 
COMPARE_STATE_ROLLOVER_BV


	)

76 
	#COMPARE_STATE_ROLLOVER_AND_TRIGGER
 (
COMPARE_STATE_ROLLOVER_BV
 | 
COMPARE_STATE_TRIGGER_BV
)

	)

77 
	#COMPARE_STATE_ROLLOVER_AND_ARM_TRIGGER
 (
COMPARE_STATE_ROLLOVER_BV
 | 
COMPARE_STATE_ARM_BV
)

	)

85 
	#RX_TX_PROP_DELAY_AVG_USEC
 ((
MAC_RADIO_RX_TX_PROP_DELAY_MIN_USEC
 + 
MAC_RADIO_RX_TX_PROP_DELAY_MAX_USEC
Ë/ 2)

	)

86 
	#RX_TX_PROP_DELAY_AVG_TIMER_TICKS
 ((
uöt16
)(
	`MAC_RADIO_TIMER_TICKS_PER_USEC
(Ë* 
RX_TX_PROP_DELAY_AVG_USEC
 + 0.5))

	)

104 
	#SYMBOLS_FROM_STROBE_TO_PREAMBLE
 12

	)

105 
	#SYMBOLS_FROM_PREAMBLE_TO_SFD
 (
MAC_SPEC_PREAMBLE_FIELD_LENGTH
 + 
MAC_SPEC_SFD_FIELD_LENGTH
)

	)

106 
	#SYMBOLS_FROM_STROBE_TO_SFD
 (
SYMBOLS_FROM_STROBE_TO_PREAMBLE
 + 
SYMBOLS_FROM_PREAMBLE_TO_SFD
)

	)

107 
	#SYMBOLS_EXPECTED_AT_SFD
 (
SYMBOLS_FROM_STROBE_TO_SFD
 % 
MAC_A_UNIT_BACKOFF_PERIOD
)

	)

110 #i‡(
SYMBOLS_EXPECTED_AT_SFD
 != 2)

123 
	#TIMER_TICKS_EXPECTED_AT_SFD
 ((
SYMBOLS_EXPECTED_AT_SFD
 * 
	`MAC_RADIO_TIMER_TICKS_PER_SYMBOL
()) \

124 + 
RX_TX_PROP_DELAY_AVG_TIMER_TICKS
)

	)

131 
uöt32
 
	gbackoffTimîRﬁlovî
;

132 
uöt32
 
	gbackoffTimîTriggî
;

145 
MAC_INTERNAL_API
 
	$macBackoffTimîInô
()

147 
	`MAC_RADIO_BACKOFF_SET_COUNT
(0);

148 
	`macBackoffTimîSëRﬁlovî
(
MAC_BACKOFF_TIMER_DEFAULT_ROLLOVER
);

149 
	`MAC_RADIO_BACKOFF_PERIOD_CLEAR_INTERRUPT
();

150 
	`MAC_RADIO_BACKOFF_PERIOD_ENABLE_INTERRUPT
();

151 
	`MAC_RADIO_BACKOFF_COMPARE_CLEAR_INTERRUPT
();

152 
	`MAC_RADIO_BACKOFF_COMPARE_ENABLE_INTERRUPT
();

153 
	}
}

166 
MAC_INTERNAL_API
 
	$macBackoffTimîRe£t
()

168 
	`MAC_RADIO_BACKOFF_COMPARE_DISABLE_INTERRUPT
();

169 
	`MAC_RADIO_BACKOFF_PERIOD_DISABLE_INTERRUPT
();

170 
	`macBackoffTimîInô
();

171 
	}
}

184 
MAC_INTERNAL_API
 
	$macBackoffTimîSëRﬁlovî
(
uöt32
 
rﬁlovîBackoff
)

186 
hÆI¡Sèã_t
 
s
;

188 
	`MAC_ASSERT
(
rﬁlovîBackoff
 > 
	`MAC_RADIO_BACKOFF_COUNT
());

190 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

191 
backoffTimîRﬁlovî
 = 
rﬁlovîBackoff
;

192 
	`MAC_RADIO_BACKOFF_SET_PERIOD
(
rﬁlovîBackoff
);

193 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

194 
	}
}

207 
MAC_INTERNAL_API
 
	$macBackoffTimîSëCou¡
(
uöt32
 
backoff
)

209 
hÆI¡Sèã_t
 
s
;

211 
	`MAC_ASSERT
(
backoff
 < 
backoffTimîRﬁlovî
);

212 
	`MAC_ASSERT
(!(
backoff
 & 0x80000000));

214 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

215 
	`MAC_RADIO_BACKOFF_SET_COUNT
(
backoff
);

216 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

217 
	}
}

230 
MAC_INTERNAL_API
 
uöt32
 
	$macBackoffTimîCou¡
()

232 
hÆI¡Sèã_t
 
s
;

233 
uöt32
 
backoffCou¡
;

235 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

236 
backoffCou¡
 = 
	`MAC_RADIO_BACKOFF_COUNT
();

237 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

239 #ifde‡
MAC_RADIO_FEATURE_HARDWARE_OVERFLOW_NO_ROLLOVER


257 i‡(
backoffCou¡
 >
backoffTimîRﬁlovî
)

263 (
backoffCou¡
);

264 
	}
}

277 
MAC_INTERNAL_API
 
uöt32
 
	$macBackoffTimîC≠tuª
()

279 
hÆI¡Sèã_t
 
s
;

280 
uöt32
 
backoffC≠tuª
;

282 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

283 
backoffC≠tuª
 = 
	`MAC_RADIO_BACKOFF_CAPTURE
();

284 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

286 #ifde‡
MAC_RADIO_FEATURE_HARDWARE_OVERFLOW_NO_ROLLOVER


291 i‡(
backoffC≠tuª
 >
backoffTimîRﬁlovî
)

297 (
backoffC≠tuª
);

298 
	}
}

311 
MAC_INTERNAL_API
 
uöt32
 
	$macBackoffTimîGëTriggî
()

313 (
backoffTimîTriggî
);

314 
	}
}

328 
MAC_INTERNAL_API
 
	$macBackoffTimîSëTriggî
(
uöt32
 
åiggîBackoff
)

330 
hÆI¡Sèã_t
 
s
;

332 
	`MAC_ASSERT
(
åiggîBackoff
 < 
backoffTimîRﬁlovî
);

334 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

335 
backoffTimîTriggî
 = 
åiggîBackoff
;

336 
	`MAC_RADIO_BACKOFF_SET_COMPARE
(
åiggîBackoff
);

337 i‡(
åiggîBackoff
 =
	`MAC_RADIO_BACKOFF_COUNT
())

340 
	`MAC_RADIO_BACKOFF_COMPARE_CLEAR_INTERRUPT
();

341 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

342 
	`macBackoffTimîTriggîCÆlback
();

346 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

348 
	}
}

361 
MAC_INTERNAL_API
 
	$macBackoffTimîC™˚lTriggî
()

364 
	}
}

385 
MAC_INTERNAL_API
 
öt32
 
	$macBackoffTimîRólign
(
macRx_t
 *
pMsg
)

387 
uöt16
 
timîDñayTicks
;

388 
öt32
 
backoffDñè
;

389 
öt32
 
backoffCou¡
;

391 
	`MAC_ASSERT
(!
	`MAC_TX_IS_PHYSICALLY_ACTIVE
());

399 
backoffDñè
 = 
pMsg
->
mac
.
time°amp
;

402 i‡(((
uöt32
Ë
backoffDñè
Ë> (
backoffTimîRﬁlovî
 / 2))

404 
backoffDñè
 = backoffDñè - 
backoffTimîRﬁlovî
;

413 
timîDñayTicks
 = 
pMsg
->
mac
.
time°amp2
;

420 i‡(
timîDñayTicks
 >
TIMER_TICKS_EXPECTED_AT_SFD
)

423 
timîDñayTicks
 =ÅimîDñayTick†- 
TIMER_TICKS_EXPECTED_AT_SFD
;

432 
timîDñayTicks
 =ÅimîDñayTick†- 
TIMER_TICKS_EXPECTED_AT_SFD
 + 
	`MAC_RADIO_TIMER_TICKS_PER_BACKOFF
();

433 
backoffDñè
--;

440 
backoffCou¡
 = 
	`MAC_RADIO_BACKOFF_COUNT
(Ë- 
backoffDñè
;

442 i‡(
backoffCou¡
 >((
öt32
Ë
backoffTimîRﬁlovî
))

444 
backoffCou¡
 -
backoffTimîRﬁlovî
;

446 i‡(
backoffCou¡
 < 0)

448 
backoffCou¡
 +
backoffTimîRﬁlovî
;

451 
	`MAC_RADIO_TIMER_FORCE_DELAY
(
timîDñayTicks
);

452 
	`MAC_RADIO_BACKOFF_SET_COUNT
(
backoffCou¡
);

454 (
backoffDñè
);

455 
	}
}

469 
MAC_INTERNAL_API
 
	$macBackoffTimîCom∑ªI§
()

471 
	`macBackoffTimîTriggîCÆlback
();

472 
	}
}

485 
MAC_INTERNAL_API
 
	$macBackoffTimîPîiodI§
()

487 
	`macMcuAccumuœãdOvîFlow
();

488 
	`macBackoffTimîRﬁlovîCÆlback
();

489 
	}
}

501 
MAC_INTERNAL_API
 
uöt32
 
	$macGëBackOffTimîRﬁlovî
()

503  
backoffTimîRﬁlovî
;

504 
	}
}

	@Components/mac/low_level/srf04/mac_backoff_timer.h

40 #i‚de‡
MAC_BACKOFF_TIMER_H


41 
	#MAC_BACKOFF_TIMER_H


	)

47 
	~"mac_high_Àvñ.h
"

53 
MAC_INTERNAL_API
 
macBackoffTimîInô
();

54 
MAC_INTERNAL_API
 
macBackoffTimîRe£t
();

55 
MAC_INTERNAL_API
 
uöt32
 
macBackoffTimîC≠tuª
();

56 
MAC_INTERNAL_API
 
macBackoffTimîCom∑ªI§
();

57 
MAC_INTERNAL_API
 
macBackoffTimîPîiodI§
();

58 
MAC_INTERNAL_API
 
uöt32
 
macGëBackOffTimîRﬁlovî
();

	@Components/mac/low_level/srf04/mac_low_level.c

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_mcu.h
"

50 
	~"mac_low_Àvñ.h
"

53 
	~"mac_ødio.h
"

54 
	~"mac_rx.h
"

55 
	~"mac_tx.h
"

56 
	~"mac_rx_⁄off.h
"

57 
	~"mac_backoff_timî.h
"

58 
	~"mac_¶ìp.h
"

61 
	~"mac_ødio_defs.h
"

64 
	~"mac_as£π.h
"

66 #i‡!
deföed
 ( 
HAL_CLOCK_CRYSTAL
 )

68 c⁄° 
uöt16
 
CODE
 
	gmacBóc⁄M¨göDCO
[] =

99 
MAC_INTERNAL_API
 
	$macLowLevñInô
()

102 
	`MAC_RADIO_MCU_INIT
();

105 #i‡!
	`deföed
 ( 
HAL_CLOCK_CRYSTAL
 )

107 
uöt8
 
i
;

109 
i
 = 0; i < (
macBóc⁄M¨göDCO
)/(macBeaconMarginDCO[0]); i++)

111 
macBóc⁄M¨gö
[
i
] = 
macBóc⁄M¨göDCO
[i];

117 
	`macRadioInô
();

118 
	`macRxOnOffInô
();

119 
	`macRxInô
();

120 
	`macTxInô
();

121 
	`macBackoffTimîInô
();

122 
	}
}

135 
MAC_INTERNAL_API
 
	$macLowLevñRe£t
()

137 
	`MAC_ASSERT
(!
	`HAL_INTERRUPTS_ARE_ENABLED
());

140 i‡(
macSÀïSèã
 =
MAC_SLEEP_STATE_AWAKE
)

142 
	`macRxTxRe£t
();

143 
	`macRadioRe£t
();

147 
	`macBackoffTimîRe£t
();

150 
	`macSÀïWakeUp
();

151 
	}
}

	@Components/mac/low_level/srf04/mac_low_level.h

40 #i‚de‡
MAC_LOW_LEVEL_H


41 
	#MAC_LOW_LEVEL_H


	)

47 
	~"hÆ_ty≥s.h
"

48 
	~"mac_high_Àvñ.h
"

56 
	#MAC_LOW_LEVEL_SMARTRF04


	)

58 
	#MAC_BACKOFF_TIMER_DEFAULT_ROLLOVER
 (((
uöt32
Ë
MAC_A_BASE_SUPERFRAME_DURATION
Ë<< 14)

	)

61 
	#MAC_TX_TYPE_SLOTTED_CSMA
 0x00

	)

62 
	#MAC_TX_TYPE_UNSLOTTED_CSMA
 0x01

	)

63 
	#MAC_TX_TYPE_SLOTTED
 0x02

	)

66 
	#MAC_SLEEP_STATE_OSC_OFF
 0x01

	)

67 
	#MAC_SLEEP_STATE_RADIO_OFF
 0x02

	)

70 
	#MAC_PROMISCUOUS_MODE_OFF
 0x00

	)

71 
	#MAC_PROMISCUOUS_MODE_COMPLIANT
 0x01

	)

72 
	#MAC_PROMISCUOUS_MODE_WITH_BAD_CRC
 0x02

	)

79 
uöt8
 c⁄° 
macTxSlŸãdDñay
;

82 
uöt16
 
macBóc⁄M¨gö
[];

91 
MAC_INTERNAL_API
 
macLowLevñInô
();

92 
MAC_INTERNAL_API
 
macLowLevñRe£t
();

95 
MAC_INTERNAL_API
 
macSÀïWakeUp
();

96 
MAC_INTERNAL_API
 
uöt8
 
macSÀï
(uöt8 
¶ìpSèã
);

99 
MAC_INTERNAL_API
 
uöt8
 
macRadioR™domByã
();

100 
MAC_INTERNAL_API
 
macRadioSëP™Co‹dö©‹
(
uöt8
 
∑nCo‹dö©‹
);

101 
MAC_INTERNAL_API
 
macRadioSëP™ID
(
uöt16
 
∑nID
);

102 
MAC_INTERNAL_API
 
macRadioSëSh‹tAddr
(
uöt16
 
sh‹tAddr
);

103 
MAC_INTERNAL_API
 
macRadioSëIEEEAddr
(
uöt8
 * 
pIEEEAddr
);

104 
MAC_INTERNAL_API
 
uöt8
 
macRadioSëTxPowî
(uöt8 
txPowî
);

105 
MAC_INTERNAL_API
 
macRadioSëCh™√l
(
uöt8
 
ch™√l
);

106 
MAC_INTERNAL_API
 
macRadioSèπSˇn
(
uöt8
 
sˇnTy≥
);

107 
MAC_INTERNAL_API
 
macRadioSt›Sˇn
();

108 
macRadioE√rgyDëe˘Sèπ
();

109 
uöt8
 
macRadioE√rgyDëe˘St›
();

112 
MAC_INTERNAL_API
 
macBackoffTimîSëRﬁlovî
(
uöt32
 
rﬁlovîBackoff
);

113 
MAC_INTERNAL_API
 
macBackoffTimîSëCou¡
(
uöt32
 
backoff
);

114 
MAC_INTERNAL_API
 
uöt32
 
macBackoffTimîCou¡
();

115 
MAC_INTERNAL_API
 
uöt32
 
macBackoffTimîGëTriggî
();

116 
MAC_INTERNAL_API
 
macBackoffTimîSëTriggî
(
uöt32
 
åiggîBackoff
);

117 
MAC_INTERNAL_API
 
macBackoffTimîC™˚lTriggî
();

118 
MAC_INTERNAL_API
 
macBackoffTimîTriggîCÆlback
();

119 
MAC_INTERNAL_API
 
macBackoffTimîRﬁlovîCÆlback
();

120 
MAC_INTERNAL_API
 
öt32
 
macBackoffTimîRólign
(
macRx_t
 *
pMsg
);

123 
MAC_INTERNAL_API
 
macTxFøme
(
uöt8
 
txTy≥
);

124 
MAC_INTERNAL_API
 
macTxFømeRëønsmô
();

125 
MAC_INTERNAL_API
 
macTxCom∂ëeCÆlback
(
uöt8
 
°©us
);

128 
MAC_INTERNAL_API
 
boﬁ
 
macRxCheckPídögCÆlback
();

129 
MAC_INTERNAL_API
 
boﬁ
 
macRxCheckMACPídögCÆlback
();

130 
MAC_INTERNAL_API
 
macRxCom∂ëeCÆlback
(
macRx_t
 * 
pMsg
);

131 
MAC_INTERNAL_API
 
macRxPromiscuousMode
(
uöt8
 
mode
);

134 
MAC_INTERNAL_API
 
macRxE«bÀ
(
uöt8
 
Êags
);

135 
MAC_INTERNAL_API
 
macRxSo·E«bÀ
(
uöt8
 
Êags
);

136 
MAC_INTERNAL_API
 
macRxDißbÀ
(
uöt8
 
Êags
);

137 
MAC_INTERNAL_API
 
macRxH¨dDißbÀ
();

	@Components/mac/low_level/srf04/mac_radio.c

46 
	~"hÆ_ty≥s.h
"

49 
	~"mac_pib.h
"

52 
	~"mac_low_Àvñ.h
"

55 
	~"mac_ødio.h
"

56 
	~"mac_tx.h
"

57 
	~"mac_rx.h
"

58 
	~"mac_rx_⁄off.h
"

59 
	~"mac_¶ìp.h
"

60 
	~"mac_backoff_timî.h
"

63 
	~"mac_ødio_defs.h
"

66 
	~"mac_as£π.h
"

73 
	#ED_RF_POWER_MIN_DBM
 (
MAC_RADIO_RECEIVER_SENSITIVITY_DBM
 + 
MAC_SPEC_ED_MIN_DBM_ABOVE_RECEIVER_SENSITIVITY
)

	)

74 
	#ED_RF_POWER_MAX_DBM
 
MAC_RADIO_RECEIVER_SATURATION_DBM


	)

81 
uöt8
 
	gmacPhyTxPowî
;

82 
uöt8
 
	gmacPhyCh™√l
;

89 
uöt8
 
	gªqCh™√l
;

90 
uöt8
 
	gªqTxPowî
;

97 
uöt8
 
ødioCompuãED
(
öt8
 
rssiDbm
);

110 
MAC_INTERNAL_API
 
	$macRadioInô
()

113 
ªqCh™√l
 = 
MAC_RADIO_CHANNEL_DEFAULT
;

114 
macPhyCh™√l
 = 
MAC_RADIO_CHANNEL_INVALID
;

115 
ªqTxPowî
 = 
MAC_RADIO_TX_POWER_INVALID
;

116 
macPhyTxPowî
 = 
MAC_RADIO_TX_POWER_INVALID
;

117 
	}
}

130 
MAC_INTERNAL_API
 
	$macRadioRe£t
()

132 
	`macRadioSt›Sˇn
();

133 
	`macRadioE√rgyDëe˘St›
();

134 
	}
}

147 
MAC_INTERNAL_API
 
uöt8
 
	$macRadioR™domByã
()

149 (
	`MAC_RADIO_RANDOM_BYTE
());

150 
	}
}

164 
MAC_INTERNAL_API
 
	$macRadioSëP™Co‹dö©‹
(
uöt8
 
∑nCo‹dFœg
)

167 
	`MAC_RADIO_SET_PAN_COORDINATOR
(
∑nCo‹dFœg
);

168 
	}
}

181 
	$macRadioSëP™ID
(
uöt16
 
∑nID
)

184 
	`MAC_RADIO_SET_PAN_ID
(
∑nID
);

185 
	}
}

198 
MAC_INTERNAL_API
 
	$macRadioSëSh‹tAddr
(
uöt16
 
sh‹tAddr
)

201 
	`MAC_RADIO_SET_SHORT_ADDR
(
sh‹tAddr
);

202 
	}
}

216 
MAC_INTERNAL_API
 
	$macRadioSëIEEEAddr
(
uöt8
 * 
pIEEEAddr
)

219 
	`MAC_RADIO_SET_IEEE_ADDR
(
pIEEEAddr
);

220 
	}
}

236 #i‚de‡
HAL_MAC_USE_REGISTER_POWER_VALUES


239 
MAC_INTERNAL_API
 
uöt8
 
	$macRadioSëTxPowî
(
uöt8
 
txPowî
)

241 
hÆI¡Sèã_t
 
s
;

242 #i‡
deföed
 
MAC_RUNTIME_CC2591
 || deföed 
MAC_RUNTIME_CC2590


243 c⁄° 
uöt8
 
CODE
 *
pTabÀ
 = 
macRadioDefsTxPwrTabÀs
[
macRadioDefsRefTabÀId
 >> 4];

244 #ñi‡
deföed
 
HAL_PA_LNA
 || deföed 
HAL_PA_LNA_CC2590


245 c⁄° 
uöt8
 
CODE
 *
pTabÀ
 = 
macRadioDefsTxPwrTabÀs
[0];

247 c⁄° 
uöt8
 
CODE
 *
pTabÀ
 = 
macRadioDefsTxPwrB¨e
;

251 i‡((
öt8
)
txPowî
 > (öt8)
pTabÀ
[
MAC_RADIO_DEFS_TBL_TXPWR_FIRST_ENTRY
])

254 
txPowî
 = 
pTabÀ
[
MAC_RADIO_DEFS_TBL_TXPWR_FIRST_ENTRY
];

256 i‡((
öt8
)
txPowî
 < (öt8)
pTabÀ
[
MAC_RADIO_DEFS_TBL_TXPWR_LAST_ENTRY
])

259 
txPowî
 = 
pTabÀ
[
MAC_RADIO_DEFS_TBL_TXPWR_LAST_ENTRY
];

269 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

277 
uöt8
 
ödex
 = 
pTabÀ
[
MAC_RADIO_DEFS_TBL_TXPWR_FIRST_ENTRY
] - 
txPowî


278 + 
MAC_RADIO_DEFS_TBL_TXPWR_ENTRIES
;

279 
ªqTxPowî
 = 
pTabÀ
[
ödex
];

281 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

284 
	`macRadioUpd©eTxPowî
();

286  
txPowî
;

287 
	}
}

292 
MAC_INTERNAL_API
 
uöt8
 
	$macRadioSëTxPowî
(
uöt8
 
txPowî
)

294 
hÆI¡Sèã_t
 
s
;

297 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

298 
ªqTxPowî
 = 
txPowî
;

299 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

302 
	`macRadioUpd©eTxPowî
();

304  
txPowî
;

305 
	}
}

321 
MAC_INTERNAL_API
 
	$macRadioUpd©eTxPowî
()

323 
hÆI¡Sèã_t
 
s
;

329 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

330 i‡(
ªqTxPowî
 !
macPhyTxPowî
)

338 i‡(!
macRxOutgoögAckFœg
 && !
	`MAC_TX_IS_PHYSICALLY_ACTIVE
())

344 
macPhyTxPowî
 = 
ªqTxPowî
;

345 
	`MAC_RADIO_SET_TX_POWER
(
macPhyTxPowî
);

348 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

349 
	}
}

363 
MAC_INTERNAL_API
 
	$macRadioSëCh™√l
(
uöt8
 
ch™√l
)

365 
hÆI¡Sèã_t
 
s
;

367 
	`MAC_ASSERT
((
ch™√l
 >= 11) && (channel <= 28));

370 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

373 
ªqCh™√l
 = 
ch™√l
;

379 i‡(!
macTxA˘ive
)

381 
	`macRadioUpd©eCh™√l
();

384 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

385 
	}
}

398 
MAC_INTERNAL_API
 
	$macRadioUpd©eCh™√l
()

400 
hÆI¡Sèã_t
 
s
;

402 
	`MAC_ASSERT
(!
macTxA˘ive
);

405 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

406 i‡(
ªqCh™√l
 !
macPhyCh™√l
)

408 
macPhyCh™√l
 = 
ªqCh™√l
;

409 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

412 
	`macRxOff
();

413 
	`MAC_RADIO_SET_CHANNEL
(
macPhyCh™√l
);

418 
	`macRxHÆtCÀ™up
();

420 
	`macRxOnReque°
();

424 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

426 
	}
}

439 
MAC_INTERNAL_API
 
	$macRadioSèπSˇn
(
uöt8
 
sˇnMode
)

441 
	`MAC_ASSERT
(
macSÀïSèã
 =
MAC_SLEEP_STATE_AWAKE
);

442 
	`MAC_ASSERT
(
macRxFûãr
 =
RX_FILTER_OFF
);

445 i‡(
sˇnMode
 =
MAC_SCAN_ED
)

447 
macRxFûãr
 = 
RX_FILTER_ALL
;

449 i‡(
sˇnMode
 =
MAC_SCAN_ORPHAN
)

451 
macRxFûãr
 = 
RX_FILTER_NON_COMMAND_FRAMES
;

455 
	`MAC_ASSERT
((
sˇnMode
 =
MAC_SCAN_ACTIVE
Ë|| (sˇnModê=
MAC_SCAN_PASSIVE
));

456 
macRxFûãr
 = 
RX_FILTER_NON_BEACON_FRAMES
;

459 
	`MAC_RADIO_SET_PAN_ID
(0xFFFF);

461 
	}
}

474 
MAC_INTERNAL_API
 
	$macRadioSt›Sˇn
()

476 
macRxFûãr
 = 
RX_FILTER_OFF
;

479 
	`MAC_RADIO_SET_PAN_ID
(
macPib
.
∑nId
);

480 
	}
}

494 
	$macRadioE√rgyDëe˘Sèπ
()

497 
	`COMPRESSION_WORKAROUND_OFF
();

499 
	`MAC_RADIO_RECORD_MAX_RSSI_START
();

500 
	}
}

514 
uöt8
 
	$macRadioE√rgyDëe˘St›
()

516 
uöt8
 
rssiDbm
;

517 
uöt8
 
íîgyDëe˘Mósuªmít
;

519 
rssiDbm
 = 
	`MAC_RADIO_RECORD_MAX_RSSI_STOP
(Ë+ 
MAC_RADIO_RSSI_OFFSET
;

520 
	`MAC_RADIO_RSSI_LNA_OFFSET
(
rssiDbm
);

521 
íîgyDëe˘Mósuªmít
 = 
	`ødioCompuãED
(
rssiDbm
);

524 
	`COMPRESSION_WORKAROUND_ON
();

526 (
íîgyDëe˘Mósuªmít
);

527 
	}
}

539 
uöt8
 
	$ødioCompuãED
(
öt8
 
rssiDbm
)

541 
uöt8
 
ed
;

547 i‡(
rssiDbm
 < 
ED_RF_POWER_MIN_DBM
)

549 
rssiDbm
 = 
ED_RF_POWER_MIN_DBM
;

551 i‡(
rssiDbm
 > 
ED_RF_POWER_MAX_DBM
)

553 
rssiDbm
 = 
ED_RF_POWER_MAX_DBM
;

563 
ed
 = (
MAC_SPEC_ED_MAX
 * (
rssiDbm
 - 
ED_RF_POWER_MIN_DBM
)Ë/ (
ED_RF_POWER_MAX_DBM
 - ED_RF_POWER_MIN_DBM);

565 (
ed
);

566 
	}
}

580 
MAC_INTERNAL_API
 
uöt8
 
	$macRadioCompuãLQI
(
öt8
 
rssiDbm
, 
uöt8
 
c‹r
)

582 (Ë
c‹r
;

589 (
	`ødioCompuãED
(
rssiDbm
));

590 
	}
}

	@Components/mac/low_level/srf04/mac_radio.h

40 #i‚de‡
MAC_RADIO_H


41 
	#MAC_RADIO_H


	)

47 
	~"hÆ_ty≥s.h
"

48 
	~"mac_high_Àvñ.h
"

55 
uöt8
 
macPhyCh™√l
;

56 
uöt8
 
macPhyTxPowî
;

63 
MAC_INTERNAL_API
 
macRadioInô
();

64 
MAC_INTERNAL_API
 
macRadioRe£t
();

65 
MAC_INTERNAL_API
 
macRadioUpd©eTxPowî
();

66 
MAC_INTERNAL_API
 
macRadioUpd©eCh™√l
();

67 
MAC_INTERNAL_API
 
uöt8
 
macRadioCompuãLQI
(
öt8
 
rssiDbm
, uöt8 
c‹ªœti⁄
);

	@Components/mac/low_level/srf04/mac_rx.c

46 
	~"hÆ_defs.h
"

47 
	~"hÆ_ty≥s.h
"

50 
	~"OSAL.h
"

53 
	~"mac_high_Àvñ.h
"

54 
	~"mac_•ec.h
"

57 
	~"mac_£curôy.h
"

60 
	~"mac_low_Àvñ.h
"

63 
	~"mac_rx.h
"

64 
	~"mac_tx.h
"

65 
	~"mac_rx_⁄off.h
"

66 
	~"mac_ødio.h
"

69 
	~"mac_ødio_defs.h
"

70 
	~"mac_aut›íd.h
"

73 
	~"mac_as£π.h
"

80 
	#MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT
 16

	)

83 
	#RX_THRESHOLD_START_LEN
 (
MAC_PHY_PHR_LEN
 + \

84 
MAC_FCF_FIELD_LEN
 + \

85 
MAC_SEQ_NUM_FIELD_LEN
 + \

86 
MAC_FCS_FIELD_LEN
)

	)

89 
	#MAX_ADDR_FIELDS_LEN
 ((
MAC_EXT_ADDR_FIELD_LEN
 + 
MAC_PAN_ID_FIELD_LEN
Ë* 2)

	)

92 
	#ADDR_MODE_RESERVERED
 1

	)

95 
	#CMD_FRAME_ID_LEN
 1

	)

98 
	#PHY_PACKET_SIZE_MASK
 0x7F

	)

101 
	#PROMISCUOUS_MODE_OFF
 0x00

	)

104 
	#PROPRIETARY_FCS_CRC_OK_BIT
 0x80

	)

107 
	#DUMMY_LEN
 0xBE

	)

110 
	#RX_THRESHOLD_INT_STATE_INACTIVE
 0

	)

111 
	#RX_THRESHOLD_INT_STATE_ACTIVE
 1

	)

112 
	#RX_THRESHOLD_INT_STATE_RESET
 2

	)

119 
	#MEM_ALLOC
(
x
Ë
	`macD©aRxMemAŒoc
(x)

	)

120 
	#MEM_FREE
(
x
Ë
	`macD©aRxMemFªe
((
uöt8
 **)x)

	)

127 
	#INTERNAL_FCF_FLAGS
(
p
Ë(((’)[1] >> 4Ë& 0x03Ë| (’)[0] & 0x78))

	)

138 
	#PROPRIETARY_FCS_RSSI
(
p
Ë((
öt8
)(’)[0]))

	)

139 
	#PROPRIETARY_FCS_CRC_OK
(
p
Ë(’)[1] & 
PROPRIETARY_FCS_CRC_OK_BIT
)

	)

140 
	#PROPRIETARY_FCS_CORRELATION_VALUE
(
p
Ë(’)[1] & ~
PROPRIETARY_FCS_CRC_OK_BIT
)

	)

145 
	#SECURITY_LEVEL
(
s
Ë(†& 0x07)

	)

146 
	#KEY_IDENTIFIER_MODE
(
s
Ë((†& 0x18Ë>> 3)

	)

147 
	#SECURITY_CONTROL_RESERVED
(
s
Ë((†& 0xE0Ë>> 5)

	)

153 
uöt8
 
	gmacRxA˘ive
;

154 
uöt8
 
	gmacRxFûãr
;

155 
uöt8
 
	gmacRxOutgoögAckFœg
;

162 c⁄° 
uöt8
 
CODE
 
	gmacRxAddrLí
[] =

165 
DUMMY_LEN
,

166 
MAC_PAN_ID_FIELD_LEN
 + 
MAC_SHORT_ADDR_FIELD_LEN
,

167 
MAC_PAN_ID_FIELD_LEN
 + 
MAC_EXT_ADDR_FIELD_LEN


175 
rxHÆtCÀ™upFöÆSãp
();

177 
rxSèπI§
();

178 
rxAddrI§
();

180 #ifde‡
MAC_SECURITY


181 
rxSecurôyHdrI§
();

184 
rxPaylﬂdI§
();

185 
rxDisˇrdI§
();

186 
rxFcsI§
();

188 
rxPªpPaylﬂd
();

189 
rxDisˇrdFøme
();

190 
rxD⁄e
();

191 
rxPo°RxUpd©es
();

198 (* 
pFuncRxSèã
)();

199 
macRx_t
 * 
pRxBuf
;

201 
uöt8
 
rxBuf
[
MAC_PHY_PHR_LEN
 + 
MAC_FCF_FIELD_LEN
 + 
MAC_SEQ_NUM_FIELD_LEN
];

202 
uöt8
 
rxUƒódLí
;

203 
uöt8
 
rxNextLí
;

204 
uöt8
 
rxPaylﬂdLí
;

205 
uöt8
 
rxFûãr
;

206 
uöt8
 
rxPromiscuousMode
;

207 
uöt8
 
rxI§A˘iveFœg
;

208 
uöt8
 
rxRe£tFœg
;

209 
uöt8
 
rxFifoOvîÊowCou¡
;

211 #ifde‡
PACKET_FILTER_STATS


212 
uöt32
 
rxCrcFaûuª
 = 0;

213 
uöt32
 
rxCrcSuc˚ss
 = 0;

216 #ifde‡
CC2591_COMPRESSION_WORKAROUND


217 
	`macRxRe£tRssi
();

230 
MAC_INTERNAL_API
 
	$macRxInô
()

232 
macRxFûãr
 = 
RX_FILTER_OFF
;

233 
rxPromiscuousMode
 = 
PROMISCUOUS_MODE_OFF
;

234 
pRxBuf
 = 
NULL
;

235 
macRxA˘ive
 = 
MAC_RX_ACTIVE_NO_ACTIVITY
;

236 
pFuncRxSèã
 = &
rxSèπI§
;

237 
macRxOutgoögAckFœg
 = 0;

238 
rxI§A˘iveFœg
 = 0;

239 
rxRe£tFœg
 = 0;

240 
rxFifoOvîÊowCou¡
 = 0;

241 
	}
}

254 
MAC_INTERNAL_API
 
	$macRxRadioPowîUpInô
()

257 
	`MAC_RADIO_SET_RX_THRESHOLD
(
RX_THRESHOLD_START_LEN
);

260 
	`MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG
();

263 
	`MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT
();

264 
	}
}

277 
MAC_INTERNAL_API
 
	$macRxTxRe£t
()

280 
	`macRxH¨dDißbÀ
();

288 
macRxFûãr
 = 
RX_FILTER_OFF
;

291 
	`macRxPromiscuousMode
(
MAC_PROMISCUOUS_MODE_OFF
);

292 
	}
}

305 
MAC_INTERNAL_API
 
	$macRxHÆtCÀ™up
()

307 
rxRe£tFœg
 = 1;

308 i‡(!
rxI§A˘iveFœg
)

310 
	`rxHÆtCÀ™upFöÆSãp
();

311 
rxRe£tFœg
 = 0;

313 
	}
}

326 
	$rxHÆtCÀ™upFöÆSãp
()

329 
	`MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK
();

332 
	`MAC_RADIO_SET_RX_THRESHOLD
(
RX_THRESHOLD_START_LEN
);

335 
	`MAC_RADIO_FLUSH_RX_FIFO
();

338 
	`MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG
();

341 i‡(
pRxBuf
 !
NULL
)

343 
	`MEM_FREE
((
uöt8
 **)&
pRxBuf
);

347 
pFuncRxSèã
 = &
rxSèπI§
;

350 i‡(
macRxA˘ive
 || 
macRxOutgoögAckFœg
)

352 
macRxA˘ive
 = 
MAC_RX_ACTIVE_NO_ACTIVITY
;

353 
macRxOutgoögAckFœg
 = 0;

355 
	`rxPo°RxUpd©es
();

357 
	}
}

371 
MAC_INTERNAL_API
 
	$macRxThªshﬁdI§
()

374 i‡(
rxRe£tFœg
)

386 
rxI§A˘iveFœg
 = 1;

387 (*
pFuncRxSèã
)();

388 
rxI§A˘iveFœg
 = 0;

391 i‡(
rxRe£tFœg
)

393 
	`rxHÆtCÀ™upFöÆSãp
();

394 
rxRe£tFœg
 = 0;

396 
	}
}

411 
	$rxSèπI§
()

413 
uöt8
 
addrLí
;

414 
uöt8
 
ackWôhPídög
;

415 
uöt8
 
d°AddrMode
;

416 
uöt8
 
§cAddrMode
;

417 
uöt8
 
mhrLí
 = 0;

419 
	`MAC_ASSERT
(!
macRxA˘ive
);

422 
macRxA˘ive
 = 
MAC_RX_ACTIVE_STARTED
;

441 i‡(!
macRxOnFœg
 || 
	`MAC_RADIO_RX_FIFO_IS_EMPTY
())

444 
macRxA˘ive
 = 
MAC_RX_ACTIVE_NO_ACTIVITY
;

450 
	`rxPo°RxUpd©es
();

461 
	`MAC_RADIO_FORCE_TX_DONE_IF_PENDING
();

469 
	`MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK
();

470 
macRxOutgoögAckFœg
 = 0;

476 
rxFûãr
 = 
macRxFûãr
;

491 
	`MAC_RADIO_READ_RX_FIFO
(
rxBuf
, 
MAC_PHY_PHR_LEN
 + 
MAC_FCF_FIELD_LEN
 + 
MAC_SEQ_NUM_FIELD_LEN
);

494 
rxUƒódLí
 = (
rxBuf
[0] & 
PHY_PACKET_SIZE_MASK
Ë- 
MAC_FCF_FIELD_LEN
 - 
MAC_SEQ_NUM_FIELD_LEN
;

505 i‡(
macChùVîsi⁄
 =
REV_A
)

507 i‡((
rxUƒódLí
 > (
MAC_A_MAX_PHY_PACKET_SIZE
 - 
MAC_FCF_FIELD_LEN
 - 
MAC_SEQ_NUM_FIELD_LEN
)) ||

508 (
	`MAC_FRAME_TYPE
(&
rxBuf
[1]Ë> 
MAC_FRAME_TYPE_MAX_VALID
))

510 
	`MAC_RADIO_FLUSH_RX_FIFO
();

511 
	`rxD⁄e
();

518 
	`MAC_ASSERT
(
rxUƒódLí
 <(
MAC_A_MAX_PHY_PACKET_SIZE
 - 
MAC_FCF_FIELD_LEN
 - 
MAC_SEQ_NUM_FIELD_LEN
));

532 i‡((
	`MAC_FRAME_TYPE
(&
rxBuf
[1]Ë=
MAC_FRAME_TYPE_ACK
Ë&& (
rxPromiscuousMode
 =
PROMISCUOUS_MODE_OFF
))

534 
hÆI¡Sèã_t
 
s
;

535 
uöt8
 
fcsBuf
[
MAC_FCF_FIELD_LEN
];

542 
	`MAC_RADIO_READ_RX_FIFO
(
fcsBuf
, 
MAC_FCS_FIELD_LEN
);

548 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

551 i‡(
macTxA˘ive
 =
MAC_TX_ACTIVE_LISTEN_FOR_ACK
)

553 
	`MAC_ASSERT
(
pMacD©aTx
 !
NULL
);

557 
öt8
 
rssiDbm
;

558 
uöt8
 
c‹r
;

560 
rssiDbm
 = 
	`PROPRIETARY_FCS_RSSI
(
fcsBuf
Ë+ 
MAC_RADIO_RSSI_OFFSET
;

561 
	`MAC_RADIO_RSSI_LNA_OFFSET
(
rssiDbm
);

562 
c‹r
 = 
	`PROPRIETARY_FCS_CORRELATION_VALUE
(
fcsBuf
);

564 
pMacD©aTx
->
öã∫Æ
.
mpduLökQuÆôy
 = 
	`macRadioCompuãLQI
(
rssiDbm
, 
c‹r
);

565 
pMacD©aTx
->
öã∫Æ
.
c‹ªœti⁄
 = 
c‹r
;

566 
pMacD©aTx
->
öã∫Æ
.
rssi

rssiDbm
;

573 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

580 i‡(
	`PROPRIETARY_FCS_CRC_OK
(
fcsBuf
))

583 
	`macTxAckRe˚ivedCÆlback
(
	`MAC_SEQ_NUMBER
(&
rxBuf
[1]), 
	`MAC_FRAME_PENDING
(&rxBuf[1]));

587 
	`macTxAckNŸRe˚ivedCÆlback
();

592 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

596 
	`rxD⁄e
();

599 i‡(
macTxA˘ive
 =
MAC_TX_ACTIVE_LISTEN_FOR_ACK
)

601 
	`macTxAckNŸRe˚ivedCÆlback
();

611 i‡((
rxFûãr
 !
RX_FILTER_OFF
Ë&& !
rxPromiscuousMode
)

614 (
rxFûãr
 =
RX_FILTER_ALL
) ||

617 ((
rxFûãr
 =
RX_FILTER_NON_BEACON_FRAMES
) &&

618 (
	`MAC_FRAME_TYPE
(&
rxBuf
[1]Ë!
MAC_FRAME_TYPE_BEACON
)) ||

621 ((
rxFûãr
 =
RX_FILTER_NON_COMMAND_FRAMES
) &&

622 ((
	`MAC_FRAME_TYPE
(&
rxBuf
[1]Ë!
MAC_FRAME_TYPE_COMMAND
))))

625 
	`rxDisˇrdFøme
();

635 
d°AddrMode
 = 
	`MAC_DEST_ADDR_MODE
(&
rxBuf
[1]);

636 
§cAddrMode
 = 
	`MAC_SRC_ADDR_MODE
(&
rxBuf
[1]);

643 i‡(
macChùVîsi⁄
 =
REV_A
)

645 i‡((
§cAddrMode
 =
ADDR_MODE_RESERVERED
Ë|| (
d°AddrMode
 == ADDR_MODE_RESERVERED))

647 
	`MAC_RADIO_FLUSH_RX_FIFO
();

648 
	`rxD⁄e
();

659 
addrLí
 = 
macRxAddrLí
[
d°AddrMode
] + macRxAddrLí[
§cAddrMode
];

660 i‡((
§cAddrMode
 !
SADDR_MODE_NONE
Ë&& 
	`MAC_INTRA_PAN
(&
rxBuf
[1]))

662 
addrLí
 -
MAC_PAN_ID_FIELD_LEN
;

669 i‡((
addrLí
 + 
MAC_FCS_FIELD_LEN
Ë> 
rxUƒódLí
)

672 
	`rxDisˇrdFøme
();

679 
rxPaylﬂdLí
 = 
rxUƒódLí
 - 
addrLí
 - 
MAC_FCS_FIELD_LEN
;

684 i‡(
	`MAC_SEC_ENABLED
(&
rxBuf
[1]))

687 
mhrLí
 = 
MAC_MHR_LEN
;

690 
pRxBuf
 = (
macRx_t
 *Ë
	`MEM_ALLOC
((macRx_tË+ 
mhrLí
 + 
rxPaylﬂdLí
);

691 i‡(
pRxBuf
 =
NULL
)

694 
	`MAC_RADIO_CANCEL_TX_ACK
();

697 
	`rxDisˇrdFøme
();

704 
ackWôhPídög
 = 0;

705 i‡(!
rxPromiscuousMode
)

707 
macRxOutgoögAckFœg
 = 
	`MAC_ACK_REQUEST
(&
rxBuf
[1]);

713 i‡(
macRxOutgoögAckFœg
)

715 
hÆI¡Sèã_t
 
s
;

721 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

724 if–
	`MAC_FRAME_TYPE
(&
rxBuf
[1]Ë=
MAC_FRAME_TYPE_COMMAND
 )

726 if–
	`macRxCheckMACPídögCÆlback
())

729 
ackWôhPídög
 = 
MAC_RX_FLAG_ACK_PENDING
;

733 if–
macSrcM©chIsE«bÀd
 )

736 if–
	`MAC_SrcM©chCheckAŒPídög
(Ë=
MAC_AUTOACK_PENDING_ALL_ON
 )

738 
ackWôhPídög
 = 
MAC_RX_FLAG_ACK_PENDING
;

744 if–
	`macRxCheckPídögCÆlback
() )

746 
ackWôhPídög
 = 
MAC_RX_FLAG_ACK_PENDING
;

752 if–
ackWôhPídög
 =
MAC_RX_FLAG_ACK_PENDING
 )

754 
	`MAC_RADIO_TX_ACK_PEND
();

758 
	`MAC_RADIO_TX_ACK
();

763 
	`MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK
();

764 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

774 
pRxBuf
->
mhr
.
p
 =ÖRxBuf->
msdu
.∞(
uöt8
 *) (pRxBuf + 1);

775 
pRxBuf
->
mhr
.
Àn
 =ÖRxBuf->
msdu
.À¿
rxPaylﬂdLí
;

777 i‡(
	`MAC_SEC_ENABLED
(&
rxBuf
[1]))

780 
pRxBuf
->
mhr
.
Àn
 = 
MAC_FCF_FIELD_LEN
 + 
MAC_SEQ_NUM_FIELD_LEN
;

781 
	`oßl_mem˝y
(
pRxBuf
->
mhr
.
p
, &
rxBuf
[1],ÖRxBuf->mhr.
Àn
);

782 
pRxBuf
->
mhr
.
p
 +pRxBuf->mhr.
Àn
;

786 
pRxBuf
->
mac
.
§cAddr
.
addrMode
 = 
§cAddrMode
;

787 
pRxBuf
->
mac
.
d°Addr
.
addrMode
 = 
d°AddrMode
;

788 
pRxBuf
->
mac
.
time°amp
 = 
	`MAC_RADIO_BACKOFF_CAPTURE
();

789 
pRxBuf
->
mac
.
time°amp2
 = 
	`MAC_RADIO_TIMER_CAPTURE
();

790 
pRxBuf
->
öã∫Æ
.
‰ameTy≥
 = 
	`MAC_FRAME_TYPE
(&
rxBuf
[1]);

791 
pRxBuf
->
mac
.
d¢
 = 
	`MAC_SEQ_NUMBER
(&
rxBuf
[1]);

792 
pRxBuf
->
öã∫Æ
.
Êags
 = 
	`INTERNAL_FCF_FLAGS
(&
rxBuf
[1]Ë| 
ackWôhPídög
;

799 i‡(
addrLí
 == 0)

802 
pFuncRxSèã
 = &
rxPaylﬂdI§
;

803 
	`rxPªpPaylﬂd
();

808 
rxNextLí
 = 
addrLí
;

809 i‡(
	`MAC_SEC_ENABLED
(&
rxBuf
[1]))

812 
	`MAC_RADIO_SET_RX_THRESHOLD
(
rxNextLí
 + 
MAC_SEC_CONTROL_FIELD_LEN
);

816 
	`MAC_RADIO_SET_RX_THRESHOLD
(
rxNextLí
);

818 
pFuncRxSèã
 = &
rxAddrI§
;

820 
	}
}

834 
	$rxAddrI§
()

836 
uöt8
 
buf
[
MAX_ADDR_FIELDS_LEN
];

837 
uöt8
 
d°AddrMode
;

838 
uöt8
 
§cAddrMode
;

839 #ifde‡
MAC_SECURITY


840 
uöt8
 
£curôyC⁄åﬁ
;

842 
uöt8
 * 
p
;

844 
	`MAC_ASSERT
(
rxNextLí
 != 0);

847 
	`MAC_RADIO_READ_RX_FIFO
(
buf
, 
rxNextLí
);

850 
p
 = 
buf
;

853 
d°AddrMode
 = 
	`MAC_DEST_ADDR_MODE
(&
rxBuf
[1]);

854 i‡(
d°AddrMode
 !
SADDR_MODE_NONE
)

856 
pRxBuf
->
mac
.
§cP™Id
 =ÖRxBuf->mac.
d°P™Id
 = 
	`BUILD_UINT16
(
p
[0],Ö[1]);

857 
p
 +
MAC_PAN_ID_FIELD_LEN
;

858 i‡(
d°AddrMode
 =
SADDR_MODE_EXT
)

860 
	`sAddrExtCpy
(
pRxBuf
->
mac
.
d°Addr
.
addr
.
extAddr
, 
p
);

861 
p
 +
MAC_EXT_ADDR_FIELD_LEN
;

865 
pRxBuf
->
mac
.
d°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
(
p
[0],Ö[1]);

866 
p
 +
MAC_SHORT_ADDR_FIELD_LEN
;

871 
§cAddrMode
 = 
	`MAC_SRC_ADDR_MODE
(&
rxBuf
[1]);

872 i‡(
§cAddrMode
 !
SADDR_MODE_NONE
)

874 i‡(!(
pRxBuf
->
öã∫Æ
.
Êags
 & 
MAC_RX_FLAG_INTRA_PAN
))

876 
pRxBuf
->
mac
.
§cP™Id
 = 
	`BUILD_UINT16
(
p
[0],Ö[1]);

877 
p
 +
MAC_PAN_ID_FIELD_LEN
;

879 i‡(
§cAddrMode
 =
SADDR_MODE_EXT
)

881 
	`sAddrExtCpy
(
pRxBuf
->
mac
.
§cAddr
.
addr
.
extAddr
, 
p
);

885 
pRxBuf
->
mac
.
§cAddr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
(
p
[0],Ö[1]);

889 #ifde‡
MAC_SECURITY


890 i‡(
	`MAC_SEC_ENABLED
(&
rxBuf
[1]))

892 
uöt8
 
keyIdMode
;

894 i‡(
	`MAC_FRAME_VERSION
(&
rxBuf
[1]) == 0)

899 
	`MAC_RADIO_CANCEL_TX_ACK
();

902 
	`macRxHÆtCÀ™up
();

907 
	`oßl_mem˝y
(
pRxBuf
->
mhr
.
p
, 
buf
, 
rxNextLí
);

908 
pRxBuf
->
mhr
.
p
 +
rxNextLí
;

909 
pRxBuf
->
mhr
.
Àn
 +
rxNextLí
;

916 
	`MAC_RADIO_READ_RX_FIFO
(&
£curôyC⁄åﬁ
, 
MAC_SEC_CONTROL_FIELD_LEN
);

919 *
pRxBuf
->
mhr
.
p
 = 
£curôyC⁄åﬁ
;

920 
pRxBuf
->
mhr
.
p
 +
MAC_SEC_CONTROL_FIELD_LEN
;

921 
pRxBuf
->
mhr
.
Àn
 +
MAC_SEC_CONTROL_FIELD_LEN
;

924 
pRxBuf
->
£c
.
£curôyLevñ
 = 
	`SECURITY_LEVEL
(
£curôyC⁄åﬁ
);

925 
pRxBuf
->
£c
.
keyIdMode
 = keyIdModê
	`KEY_IDENTIFIER_MODE
(
£curôyC⁄åﬁ
);

928 i‡((
keyIdMode
 > 
MAC_KEY_ID_MODE_8
)

932 || ((
macKeySour˚Lí
[
keyIdMode
] + 
MAC_FRAME_COUNTER_LEN
Ë>
rxPaylﬂdLí
)

936 || (
pRxBuf
->
£c
.
£curôyLevñ
 =
MAC_SEC_LEVEL_NONE
))

939 
	`MAC_RADIO_CANCEL_TX_ACK
();

942 
	`macRxHÆtCÀ™up
();

949 
rxNextLí
 = 
macKeySour˚Lí
[
keyIdMode
] + 
MAC_FRAME_COUNTER_LEN
;

950 
	`MAC_RADIO_SET_RX_THRESHOLD
(
rxNextLí
);

951 
pFuncRxSèã
 = &
rxSecurôyHdrI§
;

957 
pRxBuf
->
£c
.
£curôyLevñ
 = 
MAC_SEC_LEVEL_NONE
;

962 
pFuncRxSèã
 = &
rxPaylﬂdI§
;

963 
	`rxPªpPaylﬂd
();

965 
	}
}

968 #ifde‡
MAC_SECURITY


979 
	$rxSecurôyHdrI§
()

981 
uöt8
 
buf
[
MAC_FRAME_COUNTER_LEN
 + 
MAC_KEY_ID_8_LEN
];

984 
	`MAC_RADIO_READ_RX_FIFO
(
buf
, 
rxNextLí
);

987 
macFømeCou¡î
 = 
	`BUILD_UINT32
(
buf
[0], buf[1], buf[2], buf[3]);

988 i‡(
rxNextLí
 - 
MAC_FRAME_COUNTER_LEN
 > 0)

991 
	`oßl_mem˝y
(
pRxBuf
->
£c
.
keySour˚
, &
buf
[
MAC_FRAME_COUNTER_LEN
], 
rxNextLí
 - MAC_FRAME_COUNTER_LEN - 1);

992 
pRxBuf
->
£c
.
keyIndex
 = 
buf
[
rxNextLí
 - 
MAC_KEY_INDEX_LEN
];

996 
	`oßl_mem˝y
(
pRxBuf
->
mhr
.
p
, 
buf
, 
rxNextLí
);

997 
pRxBuf
->
mhr
.
p
 +
rxNextLí
;

998 
pRxBuf
->
mhr
.
Àn
 +
rxNextLí
;

1003 
rxPaylﬂdLí
 -(
rxNextLí
 + 
MAC_SEC_CONTROL_FIELD_LEN
);

1004 
pRxBuf
->
msdu
.
Àn
 = 
rxPaylﬂdLí
;

1005 
pRxBuf
->
mhr
.
Àn
 +
rxPaylﬂdLí
;

1010 
pFuncRxSèã
 = &
rxPaylﬂdI§
;

1011 
	`rxPªpPaylﬂd
();

1012 
	}
}

1026 
	$rxPªpPaylﬂd
()

1028 i‡(
rxPaylﬂdLí
 == 0)

1030 
	`MAC_RADIO_SET_RX_THRESHOLD
(
MAC_FCS_FIELD_LEN
);

1031 
pFuncRxSèã
 = &
rxFcsI§
;

1035 
rxNextLí
 = 
	`MIN
(
rxPaylﬂdLí
, 
MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT
);

1036 
	`MAC_RADIO_SET_RX_THRESHOLD
(
rxNextLí
);

1038 
	}
}

1051 
	$rxPaylﬂdI§
()

1053 
	`MAC_RADIO_READ_RX_FIFO
(
pRxBuf
->
mhr
.
p
, 
rxNextLí
);

1054 
pRxBuf
->
mhr
.
p
 +
rxNextLí
;

1056 
rxPaylﬂdLí
 -
rxNextLí
;

1058 
	`rxPªpPaylﬂd
();

1059 
	}
}

1072 
	$rxFcsI§
()

1074 
uöt8
 
¸cOK
;

1075 
uöt8
 
ackWôhPídög
 = 0;

1078 
	`MAC_RADIO_READ_RX_FIFO
(
rxBuf
, 
MAC_FCS_FIELD_LEN
);

1089 
¸cOK
 = 
	`PROPRIETARY_FCS_CRC_OK
(
rxBuf
);

1096 i‡(
¸cOK
 || (
rxPromiscuousMode
 =
MAC_PROMISCUOUS_MODE_WITH_BAD_CRC
))

1098 
öt8
 
rssiDbm
;

1099 
uöt8
 
c‹r
;

1101 #ifde‡
PACKET_FILTER_STATS


1102 
rxCrcSuc˚ss
++;

1113 
macRxA˘ive
 = 
MAC_RX_ACTIVE_DONE
;

1114 
	`macRxOffReque°
();

1117 
rssiDbm
 = 
	`PROPRIETARY_FCS_RSSI
(
rxBuf
Ë+ 
MAC_RADIO_RSSI_OFFSET
;

1118 
	`MAC_RADIO_RSSI_LNA_OFFSET
(
rssiDbm
);

1119 
c‹r
 = 
	`PROPRIETARY_FCS_CORRELATION_VALUE
(
rxBuf
);

1122 if–
macSrcM©chIsE«bÀd
 && 
	`MAC_RADIO_SRC_MATCH_RESULT
() )

1125 
ackWôhPídög
 = 
MAC_RX_FLAG_ACK_PENDING
;

1129 
pRxBuf
->
öã∫Æ
.
Êags
 |–
¸cOK
 | 
ackWôhPídög
 );

1130 
pRxBuf
->
mac
.
mpduLökQuÆôy
 = 
	`macRadioCompuãLQI
(
rssiDbm
, 
c‹r
);

1131 
pRxBuf
->
mac
.
rssi
 = 
rssiDbm
;

1132 
pRxBuf
->
mac
.
c‹ªœti⁄
 = 
c‹r
;

1135 
pRxBuf
->
mhr
.
p
 = (
uöt8
 *) (pRxBuf + 1);

1136 
pRxBuf
->
msdu
.
p
 +’RxBuf->
mhr
.
Àn
 -ÖRxBuf->msdu.len);

1139 
	`macRxCom∂ëeCÆlback
(
pRxBuf
);

1140 
pRxBuf
 = 
NULL
;

1144 #ifde‡
PACKET_FILTER_STATS


1145 
rxCrcFaûuª
++;

1153 
	`MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK
();

1154 
macRxOutgoögAckFœg
 = 0;

1157 
	`MEM_FREE
((
uöt8
 **)&
pRxBuf
);

1158 
pRxBuf
 = 
NULL
;

1162 
	`MAC_RADIO_SET_RX_THRESHOLD
(
RX_THRESHOLD_START_LEN
);

1163 
pFuncRxSèã
 = &
rxSèπI§
;

1164 
	`rxD⁄e
();

1165 
	}
}

1178 
	$rxD⁄e
()

1181 
	`COMPRESSION_WORKAROUND_RESET_RSSI
();

1184 i‡(
	`MAC_RADIO_RX_FIFO_HAS_OVERFLOWED
())

1186 
	`MAC_RADIO_FLUSH_RX_FIFO
();

1190 
macRxA˘ive
 = 
MAC_RX_ACTIVE_NO_ACTIVITY
;

1193 i‡(!
macRxOutgoögAckFœg
)

1195 
	`rxPo°RxUpd©es
();

1197 
	}
}

1210 
	$macRxAckTxD⁄eCÆlback
()

1212 
macRxOutgoögAckFœg
 = 0;

1221 i‡(!
macRxA˘ive
)

1223 
	`rxPo°RxUpd©es
();

1225 
	}
}

1243 
	$rxPo°RxUpd©es
()

1246 
	`macRxOffReque°
();

1249 
	`macRadioUpd©eTxPowî
();

1252 
	`macTxSèπQueuedFøme
();

1253 
	}
}

1266 
	$rxDisˇrdFøme
()

1268 
	`MAC_ASSERT
(
pFuncRxSèã
 =&
rxSèπI§
);

1270 i‡(
rxUƒódLí
 == 0)

1272 
	`rxD⁄e
();

1276 
rxNextLí
 = 
	`MIN
(
rxUƒódLí
, 
MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT
);

1277 
	`MAC_RADIO_SET_RX_THRESHOLD
(
rxNextLí
);

1278 
pFuncRxSèã
 = &
rxDisˇrdI§
;

1280 
	}
}

1293 
	$rxDisˇrdI§
()

1295 
uöt8
 
buf
[
MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT
];

1297 
	`MAC_RADIO_READ_RX_FIFO
(
buf
, 
rxNextLí
);

1298 
rxUƒódLí
 -
rxNextLí
;

1301 i‡(
rxUƒódLí
 != 0)

1303 i‡(
rxUƒódLí
 < 
MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT
)

1305 
rxNextLí
 = 
rxUƒódLí
;

1306 
	`MAC_RADIO_SET_RX_THRESHOLD
(
rxNextLí
);

1312 
	`MAC_RADIO_SET_RX_THRESHOLD
(
RX_THRESHOLD_START_LEN
);

1313 
pFuncRxSèã
 = &
rxSèπI§
;

1314 
	`rxD⁄e
();

1316 
	}
}

1331 
MAC_INTERNAL_API
 
	$macRxFifoOvîÊowI§
()

1333 
rxFifoOvîÊowCou¡
++;

1334 
	`macRxHÆtCÀ™up
();

1335 
	}
}

1348 
MAC_INTERNAL_API
 
	$macRxPromiscuousMode
(
uöt8
 
mode
)

1350 
rxPromiscuousMode
 = 
mode
;

1352 i‡(
rxPromiscuousMode
 =
MAC_PROMISCUOUS_MODE_OFF
)

1354 
	`MAC_RADIO_TURN_ON_RX_FRAME_FILTERING
();

1358 
	`MAC_ASSERT
((
mode
 =
MAC_PROMISCUOUS_MODE_WITH_BAD_CRC
) ||

1359 (
mode
 =
MAC_PROMISCUOUS_MODE_COMPLIANT
));

1361 
	`MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING
();

1363 
	}
}

1365 #ifde‡
CC2591_COMPRESSION_WORKAROUND


1376 
	$macRxRe£tRssi
()

1378 i‡–!(
macRxA˘ive
 || 
macRxOutgoögAckFœg
 || 
macTxA˘ive
) )

1380 
	`COMPRESSION_WORKAROUND_RESET_RSSI
();

1382 
	}
}

1391 #i‡((
MAC_A_MAX_PHY_PACKET_SIZE
 != 0x7F ) || \

1392 (
	gMAC_FCF_FIELD_LEN
 != 2 ) || \

1393 (
MAC_FCF_FRAME_TYPE_POS
 != 0 ) || \

1394 (
MAC_FCF_FRAME_PENDING_POS
 != 4 ) || \

1395 (
MAC_FCF_ACK_REQUEST_POS
 != 5 ) || \

1396 (
MAC_FCF_INTRA_PAN_POS
 != 6 ) || \

1397 (
MAC_FCF_DST_ADDR_MODE_POS
 != 10 ) || \

1398 (
MAC_FCF_FRAME_VERSION_POS
 != 12 ) || \

1399 (
MAC_FCF_SRC_ADDR_MODE_POS
 != 14 ))

1404 #i‡((
MAC_RX_FLAG_VERSION
 != 0x03) || \

1405 (
MAC_RX_FLAG_ACK_PENDING
 != 0x04) || \

1406 (
MAC_RX_FLAG_SECURITY
 != 0x08) || \

1407 (
MAC_RX_FLAG_PENDING
 != 0x10) || \

1408 (
MAC_RX_FLAG_ACK_REQUEST
 != 0x20) || \

1409 (
MAC_RX_FLAG_INTRA_PAN
 != 0x40))

1414 #i‡(
MAC_RX_FLAG_CRC_OK
 !
PROPRIETARY_FCS_CRC_OK_BIT
)

1418 #i‡(
MAC_RX_ACTIVE_NO_ACTIVITY
 != 0x00)

1422 #i‡(
MAC_PROMISCUOUS_MODE_OFF
 != 0x00)

	@Components/mac/low_level/srf04/mac_rx.h

40 #i‚de‡
MAC_RX_H


41 
	#MAC_RX_H


	)

47 
	~"hÆ_ty≥s.h
"

48 
	~"mac_high_Àvñ.h
"

55 
	#RX_FILTER_OFF
 0

	)

56 
	#RX_FILTER_ALL
 1

	)

57 
	#RX_FILTER_NON_BEACON_FRAMES
 2

	)

58 
	#RX_FILTER_NON_COMMAND_FRAMES
 3

	)

61 
	#MAC_RX_ACTIVE_PHYSICAL_BV
 0x80

	)

63 
	#MAC_RX_ACTIVE_NO_ACTIVITY
 0x00

	)

64 
	#MAC_RX_ACTIVE_STARTED
 (0x01 | 
MAC_RX_ACTIVE_PHYSICAL_BV
)

	)

65 
	#MAC_RX_ACTIVE_DONE
 0x02

	)

72 
	#MAC_RX_IS_PHYSICALLY_ACTIVE
(Ë((
macRxA˘ive
 & 
MAC_RX_ACTIVE_PHYSICAL_BV
Ë|| 
macRxOutgoögAckFœg
)

	)

79 
uöt8
 
macRxA˘ive
;

80 
uöt8
 
macRxFûãr
;

81 
uöt8
 
macRxOutgoögAckFœg
;

83 #ifde‡
PACKET_FILTER_STATS


84 
uöt32
 
rxCrcFaûuª
;

85 
uöt32
 
rxCrcSuc˚ss
;

88 #ifde‡
CC2591_COMPRESSION_WORKAROUND


89 
macRxRe£tRssi
();

96 
MAC_INTERNAL_API
 
macRxInô
();

97 
MAC_INTERNAL_API
 
macRxRadioPowîUpInô
();

98 
MAC_INTERNAL_API
 
macRxTxRe£t
();

99 
MAC_INTERNAL_API
 
macRxHÆtCÀ™up
();

100 
MAC_INTERNAL_API
 
macRxThªshﬁdI§
();

101 
MAC_INTERNAL_API
 
macRxFifoOvîÊowI§
();

102 
MAC_INTERNAL_API
 
macRxAckTxD⁄eCÆlback
();

	@Components/mac/low_level/srf04/mac_rx_onoff.c

46 
	~"hÆ_defs.h
"

47 
	~"hÆ_ty≥s.h
"

50 
	~"mac_low_Àvñ.h
"

53 
	~"mac_rx_⁄off.h
"

54 
	~"mac_rx.h
"

55 
	~"mac_tx.h
"

58 
	~"mac_ødio_defs.h
"

61 
	~"mac_as£π.h
"

68 
uöt8
 
	gmacRxOnFœg
;

69 
uöt8
 
	gmacRxE«bÀFœgs
;

82 
MAC_INTERNAL_API
 
	$macRxOnOffInô
()

84 
macRxE«bÀFœgs
 = 0;

85 
macRxOnFœg
 = 0;

86 
	}
}

99 
MAC_INTERNAL_API
 
	$macRxE«bÀ
(
uöt8
 
Êags
)

101 
hÆI¡Sèã_t
 
s
;

103 
	`MAC_ASSERT
(
Êags
 != 0);

106 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

107 
macRxE«bÀFœgs
 |
Êags
;

108 
	`macRxOn
();

109 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

110 
	}
}

124 
MAC_INTERNAL_API
 
	$macRxSo·E«bÀ
(
uöt8
 
Êags
)

126 
hÆI¡Sèã_t
 
s
;

128 
	`MAC_ASSERT
(
Êags
 != 0);

131 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

132 
macRxE«bÀFœgs
 |
Êags
;

133 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

134 
	}
}

148 
MAC_INTERNAL_API
 
	$macRxDißbÀ
(
uöt8
 
Êags
)

150 
hÆI¡Sèã_t
 
s
;

152 
	`MAC_ASSERT
(
Êags
 != 0);

155 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

156 
macRxE«bÀFœgs
 &(
Êags
 ^ 0xFF);

157 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

160 
	`macRxOffReque°
();

161 
	}
}

174 
MAC_INTERNAL_API
 
	$macRxH¨dDißbÀ
()

176 
hÆI¡Sèã_t
 
s
;

178 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

180 
macRxE«bÀFœgs
 = 0;

181 
macRxOnFœg
 = 0;

184 
	`MAC_RADIO_RXTX_OFF
();

185 
	`MAC_RADIO_FLUSH_RX_FIFO
();

186 
	`MAC_DEBUG_TURN_OFF_RX_LED
();

188 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

191 
	`macRxHÆtCÀ™up
();

192 
	}
}

204 
MAC_INTERNAL_API
 
	$macRxOnReque°
()

206 
hÆI¡Sèã_t
 
s
;

208 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

209 i‡(
macRxE«bÀFœgs
)

211 
	`macRxOn
();

213 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

214 
	}
}

227 
MAC_INTERNAL_API
 
	$macRxOffReque°
()

229 
hÆI¡Sèã_t
 
s
;

231 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

232 i‡(!
macRxE«bÀFœgs
)

234 i‡(!
	`MAC_RX_IS_PHYSICALLY_ACTIVE
(Ë&& !
	`MAC_TX_IS_PHYSICALLY_ACTIVE
())

236 
	`macRxOff
();

239 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

240 
	}
}

253 
MAC_INTERNAL_API
 
	$macRxOn
()

255 
hÆI¡Sèã_t
 
s
;

257 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

258 i‡(!
macRxOnFœg
)

260 
macRxOnFœg
 = 1;

261 
	`MAC_RADIO_RX_ON
();

262 
	`MAC_DEBUG_TURN_ON_RX_LED
();

264 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

265 
	}
}

278 
MAC_INTERNAL_API
 
	$macRxOff
()

280 
hÆI¡Sèã_t
 
s
;

282 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

283 i‡(
macRxOnFœg
)

285 
macRxOnFœg
 = 0;

286 
	`MAC_RADIO_RXTX_OFF
();

287 
	`MAC_DEBUG_TURN_OFF_RX_LED
();

290 
	`MAC_RADIO_FLUSH_RX_FIFO
();

293 
	`MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG
();

296 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

297 
	}
}

	@Components/mac/low_level/srf04/mac_rx_onoff.h

40 #i‚de‡
MAC_RX_ONOFF_H


41 
	#MAC_RX_ONOFF_H


	)

47 
	~"hÆ_defs.h
"

48 
	~"hÆ_ty≥s.h
"

49 
	~"mac_high_Àvñ.h
"

55 
MAC_INTERNAL_API
 
macRxOnOffInô
();

56 
MAC_INTERNAL_API
 
macRxOnReque°
();

57 
MAC_INTERNAL_API
 
macRxOffReque°
();

58 
MAC_INTERNAL_API
 
macRxOn
();

59 
MAC_INTERNAL_API
 
macRxOff
();

66 
uöt8
 
macRxOnFœg
;

67 
uöt8
 
macRxE«bÀFœgs
;

76 #ifde‡
MAC_RX_ONOFF_DEBUG_LED


77 
	~"hÆ_bﬂrd.h
"

78 
	#MAC_DEBUG_TURN_ON_RX_LED
(Ë
	`HAL_TURN_ON_LED2
()

	)

79 
	#MAC_DEBUG_TURN_OFF_RX_LED
(Ë
	`HAL_TURN_OFF_LED2
()

	)

81 
	#MAC_DEBUG_TURN_ON_RX_LED
()

	)

82 
	#MAC_DEBUG_TURN_OFF_RX_LED
()

	)

86 
	#MAC_RX_WAS_FORCED_OFF
(Ë
	`°
–
macRxOnFœg
 = 0; 
	`MAC_DEBUG_TURN_OFF_RX_LED
(); )

	)

87 
	#MAC_RX_WAS_FORCED_ON
(Ë
	`°
–
macRxOnFœg
 = 1; 
	`MAC_DEBUG_TURN_ON_RX_LED
(); )

	)

	@Components/mac/low_level/srf04/mac_sleep.c

46 
	~"hÆ_ty≥s.h
"

49 
	~"mac_pib.h
"

52 
	~"mac_low_Àvñ.h
"

55 
	~"mac_¶ìp.h
"

56 
	~"mac_ødio.h
"

57 
	~"mac_tx.h
"

58 
	~"mac_rx.h
"

59 
	~"mac_rx_⁄off.h
"

62 
	~"mac_ødio_defs.h
"

65 
	~"mac_as£π.h
"

72 
uöt8
 
	gmacSÀïSèã
 = 
MAC_SLEEP_STATE_RADIO_OFF
;

85 
MAC_INTERNAL_API
 
	$macSÀïWakeUp
()

88 i‡(
macSÀïSèã
 =
MAC_SLEEP_STATE_AWAKE
)

94 
	`MAC_RADIO_TIMER_WAKE_UP
();

97 i‡(
macSÀïSèã
 =
MAC_SLEEP_STATE_RADIO_OFF
)

100 
	`MAC_RADIO_TURN_ON_POWER
();

103 
	`macRxRadioPowîUpInô
();

107 
	`MAC_ASSERT
(
macSÀïSèã
 =
MAC_SLEEP_STATE_OSC_OFF
);

110 
	`MAC_RADIO_TURN_ON_OSC
();

114 
macSÀïSèã
 = 
MAC_SLEEP_STATE_AWAKE
;

117 
	`macRxOnReque°
();

118 
	}
}

132 
MAC_INTERNAL_API
 
uöt8
 
	$macSÀï
(
uöt8
 
¶ìpSèã
)

134 
hÆI¡Sèã_t
 
s
;

137 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

140 
	`MAC_ASSERT
(
macSÀïSèã
 =
MAC_SLEEP_STATE_AWAKE
);

141 
	`MAC_ASSERT
(
macRxFûãr
 =
RX_FILTER_OFF
);

144 i‡(
macRxA˘ive
 || 
macRxOutgoögAckFœg
 || 
macTxA˘ive
 || 
macRxE«bÀFœgs
)

146 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

147 (
FALSE
);

151 
	`macRxOff
();

154 
macSÀïSèã
 = 
¶ìpSèã
;

157 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

160 
	`MAC_RADIO_TIMER_SLEEP
();

163 i‡(
¶ìpSèã
 =
MAC_SLEEP_STATE_OSC_OFF
)

165 
	`MAC_RADIO_TURN_OFF_OSC
();

169 
	`MAC_ASSERT
(
¶ìpSèã
 =
MAC_SLEEP_STATE_RADIO_OFF
);

170 
	`MAC_RADIO_TURN_OFF_POWER
();

174 (
TRUE
);

175 
	}
}

183 #i‡((
MAC_SLEEP_STATE_AWAKE
 =
MAC_SLEEP_STATE_OSC_OFF
) || \

184 (
	gMAC_SLEEP_STATE_AWAKE
 =
MAC_SLEEP_STATE_RADIO_OFF
))

	@Components/mac/low_level/srf04/mac_sleep.h

40 #i‚de‡
MAC_SLEEP_H


41 
	#MAC_SLEEP_H


	)

47 
	~"hÆ_ty≥s.h
"

54 
	#MAC_SLEEP_STATE_AWAKE
 0x00

	)

61 
uöt8
 
macSÀïSèã
;

	@Components/mac/low_level/srf04/mac_tx.c

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_defs.h
"

48 
	~"hÆ_mcu.h
"

49 
	~"hÆ_mac_cfg.h
"

52 
	~"mac_•ec.h
"

53 
	~"mac_pib.h
"

56 
	~"mac_low_Àvñ.h
"

59 
	~"mac_tx.h
"

60 
	~"mac_backoff_timî.h
"

61 
	~"mac_rx.h
"

62 
	~"mac_rx_⁄off.h
"

63 
	~"mac_ødio.h
"

64 
	~"mac_¶ìp.h
"

67 
	~"mac_ødio_defs.h
"

70 
	~"mac_as£π.h
"

77 
	#MFR_LEN
 
MAC_FCS_FIELD_LEN


	)

78 
	#PREPENDED_BYTE_LEN
 1

	)

94 #i‚de‡
HAL_MAC_TX_SLOTTED_DELAY


95 
	#HAL_MAC_TX_SLOTTED_DELAY
 3

	)

97 
uöt8
 c⁄° 
	gmacTxSlŸãdDñay
 = 
HAL_MAC_TX_SLOTTED_DELAY
;

104 
uöt8
 
	gmacTxA˘ive
;

105 
uöt8
 
	gmacTxTy≥
;

106 
uöt8
 
	gmacTxBe
;

107 
uöt8
 
	gmacTxCsmaBackoffDñay
;

114 
uöt8
 
	gnb
;

115 
uöt8
 
	gtxSeqn
;

116 
uöt8
 
	gtxAckReq
;

117 
uöt8
 
	gtxRëønsmôFœg
;

124 
txCsmaPªp
();

125 
txGo
();

126 
txCsmaGo
();

127 
txCom∂ëe
(
uöt8
 
°©us
);

140 
MAC_INTERNAL_API
 
	$macTxInô
()

142 
macTxA˘ive
 = 
MAC_TX_ACTIVE_NO_ACTIVITY
;

143 
txRëønsmôFœg
 = 0;

144 
	}
}

157 
MAC_INTERNAL_API
 
	$macTxHÆtCÀ™up
()

159 
	`MAC_RADIO_TX_RESET
();

160 
	`macTxInô
();

161 
	}
}

175 
MAC_INTERNAL_API
 
	$macTxFøme
(
uöt8
 
txTy≥
)

177 
	`MAC_ASSERT
(!
macTxA˘ive
);

180 
macTxA˘ive
 = 
MAC_TX_ACTIVE_INITIALIZE
;

188 i‡(
macSÀïSèã
 !
MAC_SLEEP_STATE_AWAKE
)

191 
	`txCom∂ëe
(
MAC_TX_ABORTED
);

198 
macTxTy≥
 = 
txTy≥
;

203 i‡(
macTxTy≥
 =
MAC_TX_TYPE_SLOTTED
)

205 
	`MAC_RADIO_TX_PREP_SLOTTED
();

209 
	`MAC_ASSERT
((
macTxTy≥
 =
MAC_TX_TYPE_SLOTTED_CSMA
Ë|| (macTxTy≥ =
MAC_TX_TYPE_UNSLOTTED_CSMA
));

211 
nb
 = 0;

212 
macTxBe
 = (
pMacD©aTx
->
öã∫Æ
.
txO±i⁄s
 & 
MAC_TXOPTION_ALT_BE
Ë? 
macPib
.
ÆtBe
 : macPib.
möBe
;

214 i‡((
macTxTy≥
 =
MAC_TX_TYPE_SLOTTED_CSMA
Ë&& (
macPib
.
b©tLi„Ext
))

216 
macTxBe
 = 
	`MIN
(2, macTxBe);

219 
	`txCsmaPªp
();

226 i‡(!
txRëønsmôFœg
)

228 
uöt8
 * 
p
;

229 
uöt8
 
ÀnMhrMsdu
;

231 
	`MAC_ASSERT
(
pMacD©aTx
 !
NULL
);

234 
txAckReq
 = 
	`MAC_ACK_REQUEST
(
pMacD©aTx
->
msdu
.
p
);

235 
txSeqn
 = 
	`MAC_SEQ_NUMBER
(
pMacD©aTx
->
msdu
.
p
);

238 
ÀnMhrMsdu
 = 
pMacD©aTx
->
msdu
.
Àn
;

241 
p
 = 
pMacD©aTx
->
msdu
.∞- 
PREPENDED_BYTE_LEN
;

244 *
p
 = 
ÀnMhrMsdu
 + 
MFR_LEN
;

252 
	`MAC_RADIO_FLUSH_TX_FIFO
();

255 
	`MAC_RADIO_WRITE_TX_FIFO
(
p
, 
PREPENDED_BYTE_LEN
 + 
ÀnMhrMsdu
);

267 
hÆI¡Sèã_t
 
s
;

269 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

270 i‡(!
macRxA˘ive
 && !
macRxOutgoögAckFœg
)

272 
macTxA˘ive
 = 
MAC_TX_ACTIVE_GO
;

273 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

274 
	`txGo
();

278 
macTxA˘ive
 = 
MAC_TX_ACTIVE_QUEUED
;

279 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

282 
	}
}

295 
	$txCsmaPªp
()

297 
macTxCsmaBackoffDñay
 = 
	`macRadioR™domByã
(Ë& ((1 << 
macTxBe
) - 1);

299 i‡(
macTxTy≥
 =
MAC_TX_TYPE_SLOTTED_CSMA
)

301 
	`MAC_RADIO_TX_PREP_CSMA_SLOTTED
();

305 
	`MAC_RADIO_TX_PREP_CSMA_UNSLOTTED
();

307 
	}
}

320 
	$txGo
()

327 
	`MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK
();

328 
macRxOutgoögAckFœg
 = 0;

331 i‡(
macTxTy≥
 =
MAC_TX_TYPE_SLOTTED
)

333 
	`MAC_RADIO_TX_GO_SLOTTED
();

337 
	`txCsmaGo
();

339 
	}
}

352 
	$txCsmaGo
()

357 
	`COMPRESSION_WORKAROUND_OFF
();

359 i‡(
macTxTy≥
 =
MAC_TX_TYPE_SLOTTED_CSMA
)

361 i‡(
macTxCsmaBackoffDñay
 >
	`macD©aTxTimeAvaûabÀ
())

363 
	`txCom∂ëe
(
MAC_NO_TIME
);

366 
	`MAC_RADIO_TX_GO_SLOTTED_CSMA
();

370 
	`MAC_RADIO_TX_GO_CSMA
();

372 
	}
}

385 
MAC_INTERNAL_API
 
	$macTxFømeRëønsmô
()

387 
txRëønsmôFœg
 = 1;

388 
	`macTxFøme
(
macTxTy≥
);

389 
	}
}

403 
MAC_INTERNAL_API
 
	$macTxSèπQueuedFøme
()

405 
hÆI¡Sèã_t
 
s
;

407 
	`MAC_ASSERT
(!
macRxA˘ive
 && !
macRxOutgoögAckFœg
);

413 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

414 i‡(
macTxA˘ive
 =
MAC_TX_ACTIVE_QUEUED
)

416 
macTxA˘ive
 = 
MAC_TX_ACTIVE_GO
;

417 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

418 
	`txGo
();

422 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

424 
	}
}

438 
MAC_INTERNAL_API
 
	$macTxCh™√lBusyCÆlback
()

440 
	`MAC_ASSERT
((
macTxTy≥
 =
MAC_TX_TYPE_SLOTTED_CSMA
Ë|| (macTxTy≥ =
MAC_TX_TYPE_UNSLOTTED_CSMA
));

443 
macTxA˘ive
 = 
MAC_TX_ACTIVE_CHANNEL_BUSY
;

444 
	`macRxOffReque°
();

447 
nb
++;

448 i‡(
nb
 > 
macPib
.
maxCsmaBackoffs
)

450 
	`txCom∂ëe
(
MAC_CHANNEL_ACCESS_FAILURE
);

454 
macTxBe
 = 
	`MIN
(macTxBe+1, 
macPib
.
maxBe
);

455 
	`txCsmaPªp
();

456 
macTxA˘ive
 = 
MAC_TX_ACTIVE_GO
;

457 
	`txCsmaGo
();

459 
	}
}

472 
MAC_INTERNAL_API
 
	$macTxD⁄eCÆlback
()

474 
hÆI¡Sèã_t
 
s
;

481 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

482 i‡(
macTxA˘ive
 =
MAC_TX_ACTIVE_GO
)

485 i‡(!
txAckReq
)

487 
macTxA˘ive
 = 
MAC_TX_ACTIVE_DONE
;

488 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

491 
	`txCom∂ëe
(
MAC_SUCCESS
);

502 
macTxA˘ive
 = 
MAC_TX_ACTIVE_LISTEN_FOR_ACK
;

503 
	`MAC_RADIO_TX_REQUEST_ACK_TIMEOUT_CALLBACK
();

504 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

509 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

511 
	}
}

526 
MAC_INTERNAL_API
 
	$macTxAckRe˚ivedCÆlback
(
uöt8
 
£qn
, uöt8 
≥ndögFœg
)

528 
hÆI¡Sèã_t
 
s
;

531 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

532 i‡(
macTxA˘ive
 =
MAC_TX_ACTIVE_LISTEN_FOR_ACK
)

534 
macTxA˘ive
 = 
MAC_TX_ACTIVE_POST_ACK
;

535 
	`MAC_RADIO_TX_CANCEL_ACK_TIMEOUT_CALLBACK
();

536 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

539 i‡(
£qn
 =
txSeqn
)

545 i‡(
≥ndögFœg
)

547 
	`txCom∂ëe
(
MAC_ACK_PENDING
);

551 
	`txCom∂ëe
(
MAC_SUCCESS
);

557 
	`txCom∂ëe
(
MAC_NO_ACK
);

562 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

564 
	}
}

581 
MAC_INTERNAL_API
 
	$macTxAckNŸRe˚ivedCÆlback
()

583 
hÆI¡Sèã_t
 
s
;

586 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

587 i‡(
macTxA˘ive
 =
MAC_TX_ACTIVE_LISTEN_FOR_ACK
)

589 
macTxA˘ive
 = 
MAC_TX_ACTIVE_POST_ACK
;

590 
	`MAC_RADIO_TX_CANCEL_ACK_TIMEOUT_CALLBACK
();

591 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

594 
	`txCom∂ëe
(
MAC_NO_ACK
);

598 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

600 
	}
}

614 
	$txCom∂ëe
(
uöt8
 
°©us
)

617 
txRëønsmôFœg
 = 0;

620 
macTxA˘ive
 = 
MAC_TX_ACTIVE_NO_ACTIVITY
;

623 
	`macRxOffReque°
();

626 
	`macRadioUpd©eTxPowî
();

633 
	`macRadioUpd©eCh™√l
();

636 
	`macTxCom∂ëeCÆlback
(
°©us
);

637 
	}
}

651 
MAC_INTERNAL_API
 
	$macTxTime°ampCÆlback
()

653 
	`MAC_ASSERT
(
pMacD©aTx
 !
NULL
);

655 
pMacD©aTx
->
öã∫Æ
.
time°amp
 = 
	`macBackoffTimîC≠tuª
();

656 
pMacD©aTx
->
öã∫Æ
.
time°amp2
 = 
	`MAC_RADIO_TIMER_CAPTURE
();

657 
	}
}

670 
MAC_INTERNAL_API
 
	$macTxCﬁlisi⁄WôhRxCÆlback
()

672 
	`macRxHÆtCÀ™up
();

673 
	}
}

681 #i‡(
MAC_TX_ACTIVE_NO_ACTIVITY
 != 0x00)

	@Components/mac/low_level/srf04/mac_tx.h

40 #i‚de‡
MAC_TX_H


41 
	#MAC_TX_H


	)

47 
	~"hÆ_ty≥s.h
"

48 
	~"mac_high_Àvñ.h
"

56 
	#MAC_TX_ACTIVE_PHYSICALLY_BV
 0x80

	)

59 
	#MAC_TX_ACTIVE_NO_ACTIVITY
 0x00

	)

60 
	#MAC_TX_ACTIVE_INITIALIZE
 0x01

	)

61 
	#MAC_TX_ACTIVE_QUEUED
 0x02

	)

62 
	#MAC_TX_ACTIVE_GO
 (0x03 | 
MAC_TX_ACTIVE_PHYSICALLY_BV
)

	)

63 
	#MAC_TX_ACTIVE_CHANNEL_BUSY
 0x04

	)

64 
	#MAC_TX_ACTIVE_DONE
 (0x05 | 
MAC_TX_ACTIVE_PHYSICALLY_BV
)

	)

65 
	#MAC_TX_ACTIVE_LISTEN_FOR_ACK
 (0x06 | 
MAC_TX_ACTIVE_PHYSICALLY_BV
)

	)

66 
	#MAC_TX_ACTIVE_POST_ACK
 (0x07 | 
MAC_TX_ACTIVE_PHYSICALLY_BV
)

	)

73 
	#MAC_TX_IS_PHYSICALLY_ACTIVE
(Ë(
macTxA˘ive
 & 
MAC_TX_ACTIVE_PHYSICALLY_BV
)

	)

80 
uöt8
 
macTxA˘ive
;

81 
uöt8
 
macTxBe
;

82 
uöt8
 
macTxTy≥
;

83 
uöt8
 
macTxCsmaBackoffDñay
;

90 
MAC_INTERNAL_API
 
macTxInô
();

91 
MAC_INTERNAL_API
 
macTxHÆtCÀ™up
();

92 
MAC_INTERNAL_API
 
macTxSèπQueuedFøme
();

93 
MAC_INTERNAL_API
 
macTxCh™√lBusyCÆlback
();

94 
MAC_INTERNAL_API
 
macTxD⁄eCÆlback
();

95 
MAC_INTERNAL_API
 
macTxAckRe˚ivedCÆlback
(
uöt8
 
£qn
, uöt8 
≥ndögFœg
);

96 
MAC_INTERNAL_API
 
macTxAckNŸRe˚ivedCÆlback
();

97 
MAC_INTERNAL_API
 
macTxTime°ampCÆlback
();

98 
MAC_INTERNAL_API
 
macTxCﬁlisi⁄WôhRxCÆlback
();

	@Components/mac/low_level/srf04/single_chip/mac_csp_tx.c

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_mcu.h
"

50 
	~"mac_•ec.h
"

51 
	~"mac_pib.h
"

54 
	~"mac_low_Àvñ.h
"

57 
	~"mac_c•_tx.h
"

58 
	~"mac_tx.h
"

59 
	~"mac_rx.h
"

60 
	~"mac_rx_⁄off.h
"

63 
	~"mac_ødio_defs.h
"

66 
	~"mac_as£π.h
"

74 
	#ISSTART
 0xE1

	)

75 
	#ISSTOP
 0xE2

	)

76 
	#ISCLEAR
 0xFF

	)

79 
	#SKIP
(
s
,
c
Ë(0x00 | (((sË& 0x07Ë<< 4Ë| ((cË& 0x0F)Ë

	)

80 
	#WHILE
(
c
Ë
	`SKIP
(0,cË

	)

81 
	#WAITW
(
w
Ë(0x80 | ((wË& 0x1F)Ë

	)

82 
	#WEVENT1
 (0xB8Ë

	)

83 
	#WAITX
 (0xBCË

	)

84 
	#LABEL
 (0xBBË

	)

85 
	#RPT
(
c
Ë(0xA0 | ((cË& 0x0F)Ë

	)

86 
	#INT
 (0xBAË

	)

87 
	#INCY
 (0xC1Ë

	)

88 
	#INCMAXY
(
m
Ë(0xC8 | ((mË& 0x07)Ë

	)

89 
	#DECY
 (0xC4Ë

	)

90 
	#DECZ
 (0xC5Ë

	)

91 
	#RANDXY
 (0xBDË

	)

94 
	#SSTOP
 (0xD2Ë

	)

95 
	#SNOP
 (0xD0Ë

	)

96 
	#STXCAL
 (0xDCË

	)

97 
	#SRXON
 (0xD3Ë

	)

98 
	#STXON
 (0xD9Ë

	)

99 
	#STXONCCA
 (0xDAË

	)

100 
	#SRFOFF
 (0xDFË

	)

101 
	#SFLUSHRX
 (0xDDË

	)

102 
	#SFLUSHTX
 (0xDEË

	)

103 
	#SACK
 (0xD6Ë

	)

104 
	#SACKPEND
 (0xD7Ë

	)

107 
	#C_CCA_IS_VALID
 0x00

	)

108 
	#C_SFD_IS_ACTIVE
 0x01

	)

109 
	#C_CPU_CTRL_IS_ON
 0x02

	)

110 
	#C_END_INSTR_MEM
 0x03

	)

111 
	#C_CSPX_IS_ZERO
 0x04

	)

112 
	#C_CSPY_IS_ZERO
 0x05

	)

113 
	#C_CSPZ_IS_ZERO
 0x06

	)

114 
	#C_RSSI_IS_VALID
 0x07

	)

117 
	#C_NEGATE
(
c
Ë((cË| 0x08)

	)

118 
	#C_CCA_IS_INVALID
 
	`C_NEGATE
(
C_CCA_IS_VALID
)

	)

119 
	#C_SFD_IS_INACTIVE
 
	`C_NEGATE
(
C_SFD_IS_ACTIVE
)

	)

120 
	#C_CPU_CTRL_IS_OFF
 
	`C_NEGATE
(
C_CPU_CTRL_IS_ON
)

	)

121 
	#C_NOT_END_INSTR_MEM
 
	`C_NEGATE
(
C_END_INSTR_MEM
)

	)

122 
	#C_CSPX_IS_NON_ZERO
 
	`C_NEGATE
(
C_CSPX_IS_ZERO
)

	)

123 
	#C_CSPY_IS_NON_ZERO
 
	`C_NEGATE
(
C_CSPY_IS_ZERO
)

	)

124 
	#C_CSPZ_IS_NON_ZERO
 
	`C_NEGATE
(
C_CSPZ_IS_ZERO
)

	)

125 
	#C_RSSI_IS_INVALID
 
	`C_NEGATE
(
C_RSSI_IS_VALID
)

	)

134 
	#CSPZ_CODE_TX_DONE
 0

	)

135 
	#CSPZ_CODE_CHANNEL_BUSY
 1

	)

136 
	#CSPZ_CODE_TX_ACK_TIME_OUT
 2

	)

143 
c•PªpF‹TxProgøm
();

144 
c•WevítSëTriggîNow
();

145 
c•WevítSëTriggîSymbﬁs
(
uöt8
 
symbﬁs
);

146 
uöt8
 
c•RódCou¡Symbﬁs
();

154 
	#CSP_STOP_AND_CLEAR_PROGRAM
(Ë
	`°
–
RFST
 = 
ISSTOP
; RFST = 
ISCLEAR
; )

	)

155 
	#CSP_START_PROGRAM
(Ë
	`°
–
RFST
 = 
ISSTART
; )

	)

173 
	#T2THD_TICKS_PER_SYMBOL
 (
	`MAC_RADIO_TIMER_TICKS_PER_SYMBOL
(Ë>> 8)

	)

175 
	#CSP_WEVENT_CLEAR_TRIGGER
(Ë
	`°
–
T2IRQF
 = ~
TIMER2_COMPARE1F
; )

	)

176 
	#CSP_WEVENT_SET_TRIGGER_NOW
(Ë
	`c•WevítSëTriggîNow
()

	)

177 
	#CSP_WEVENT_SET_TRIGGER_SYMBOLS
(
x
Ë
	`c•WevítSëTriggîSymbﬁs
(x)

	)

178 
	#CSP_WEVENT_READ_COUNT_SYMBOLS
(Ë
	`c•RódCou¡Symbﬁs
()

	)

186 
	#SLOTTED_TX_MAX_BACKOFF_COUNTDOWN_NUM_BITS
 4

	)

187 
	#SLOTTED_TX_MAX_BACKOFF_COUNTDOWN
 (1 << 
SLOTTED_TX_MAX_BACKOFF_COUNTDOWN_NUM_BITS
)

	)

188 
	#SLOTTED_TX_BACKOFF_COUNT_ALIGN_BIT_MASK
 (
SLOTTED_TX_MAX_BACKOFF_COUNTDOWN
 - 1)

	)

201 
MAC_INTERNAL_API
 
	$macC•TxRe£t
()

203 
	`MAC_MCU_CSP_STOP_DISABLE_INTERRUPT
();

204 
	`MAC_MCU_CSP_INT_DISABLE_INTERRUPT
();

205 
	`CSP_STOP_AND_CLEAR_PROGRAM
();

206 
	}
}

219 
	$c•WevítSëTriggîNow
()

221 
hÆI¡Sèã_t
 
s
;

222 
uöt8
 
ãmp0
, 
ãmp1
;

225 
	`CSP_WEVENT_CLEAR_TRIGGER
();

228 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

229 
	`MAC_MCU_T2_ACCESS_COUNT_VALUE
();

230 
ãmp0
 = 
T2M0
;

231 
ãmp1
 = 
T2M1
;

236 i‡((
macChùVîsi⁄
 <
REV_B
Ë&& (
ãmp0
 =0Ë&& (
ãmp1
 == 0))

238 
ãmp0
++;

241 
	`MAC_MCU_T2_ACCESS_CMP1_VALUE
();

242 
T2M0
 = 
ãmp0
;

243 
T2M1
 = 
ãmp1
;

244 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

245 
	}
}

258 
	$c•WevítSëTriggîSymbﬁs
(
uöt8
 
symbﬁs
)

260 
hÆI¡Sèã_t
 
s
;

261 
uöt16
 
cmp
;

263 
	`MAC_ASSERT
(
symbﬁs
 <
MAC_A_UNIT_BACKOFF_PERIOD
);

266 
	`CSP_WEVENT_CLEAR_TRIGGER
();

268 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

269 
	`MAC_MCU_T2_ACCESS_CMP1_VALUE
();

270 
cmp
 = (
symbﬁs
Ë* 
	`MAC_RADIO_TIMER_TICKS_PER_SYMBOL
();

275 i‡((
macChùVîsi⁄
 <
REV_B
Ë&& (
cmp
 == 0))

277 
cmp
++;

279 
T2M0
 = (
cmp
 & 0xFF);

280 
T2M1
 = (
cmp
 >> 8);

281 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

282 
	}
}

295 
uöt8
 
	$c•RódCou¡Symbﬁs
()

297 
uöt8
 
cou¡Low
, 
cou¡High
;

298 
hÆI¡Sèã_t
 
s
;

300 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

301 
	`MAC_MCU_T2_ACCESS_COUNT_VALUE
();

302 
cou¡Low
 = 
T2M0
;

303 
cou¡High
 = 
T2M1
;

304 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

306  (((
cou¡High
 << 8Ë| 
cou¡Low
Ë/ 
	`MAC_RADIO_TIMER_TICKS_PER_SYMBOL
());

307 
	}
}

321 
	$c•PªpF‹TxProgøm
()

323 
	`MAC_ASSERT
(!(
RFIRQM1
 & 
IM_CSP_STOP
));

326 
	`MAC_MCU_CONFIG_CSP_EVENT1
();

329 
CSPZ
 = 
CSPZ_CODE_CHANNEL_BUSY
;

332 
	`CSP_STOP_AND_CLEAR_PROGRAM
();

333 
	`MAC_MCU_CSP_STOP_CLEAR_INTERRUPT
();

334 
	`MAC_MCU_CSP_INT_CLEAR_INTERRUPT
();

335 
	}
}

348 
MAC_INTERNAL_API
 
	$macC•TxPªpCsmaUn¶Ÿãd
()

350 
	`c•PªpF‹TxProgøm
();

360 
RFST
 = 
WAITX
;

361 
RFST
 = 
WEVENT1
;

364 
RFST
 = 
	`WHILE
(
C_RSSI_IS_INVALID
);

367 
RFST
 = 
	`SKIP
(1, 
C_CCA_IS_VALID
);

368 
RFST
 = 
SSTOP
;

371 
RFST
 = 
STXON
;

380 
RFST
 = 
	`WHILE
(
C_SFD_IS_ACTIVE
);

381 
RFST
 = 
	`WHILE
(
C_SFD_IS_INACTIVE
);

388 
RFST
 = 
INT
;

394 
RFST
 = 
	`WHILE
(
C_SFD_IS_ACTIVE
);

395 
RFST
 = 
DECZ
;

400 
RFST
 = 
SSTOP
;

401 
	}
}

414 
MAC_INTERNAL_API
 
	$macC•TxPªpCsmaSlŸãd
()

416 
	`c•PªpF‹TxProgøm
();

423 
RFST
 = 
WAITX
;

426 
RFST
 = 
	`SKIP
(1, 
C_RSSI_IS_VALID
);

429 
RFST
 = 
	`WAITW
(1);

432 
RFST
 = 
	`SKIP
(1, 
C_CCA_IS_VALID
);

433 
RFST
 = 
SSTOP
;

436 
RFST
 = 
	`WAITW
(1);

439 
RFST
 = 
	`SKIP
(1, 
C_CCA_IS_VALID
);

440 
RFST
 = 
SSTOP
;

443 
RFST
 = 
STXON
;

452 
RFST
 = 
	`WHILE
(
C_SFD_IS_ACTIVE
);

453 
RFST
 = 
	`WHILE
(
C_SFD_IS_INACTIVE
);

460 
RFST
 = 
INT
;

466 
RFST
 = 
	`WHILE
(
C_SFD_IS_ACTIVE
);

467 
RFST
 = 
DECZ
;

472 
RFST
 = 
SSTOP
;

473 
	}
}

489 
MAC_INTERNAL_API
 
	$macC•TxGoCsma
()

494 
CSPX
 = 
macTxCsmaBackoffDñay
;

500 
	`CSP_WEVENT_SET_TRIGGER_NOW
();

507 
	`MAC_MCU_CSP_STOP_ENABLE_INTERRUPT
();

508 
	`MAC_MCU_CSP_INT_ENABLE_INTERRUPT
();

514 
	`macRxOn
();

517 
	`CSP_START_PROGRAM
();

518 
	}
}

532 
MAC_INTERNAL_API
 
	$macC•TxPªpSlŸãd
()

534 
	`c•PªpF‹TxProgøm
();

541 
RFST
 = 
WAITX
;

544 
RFST
 = 
STXON
;

553 
RFST
 = 
	`WHILE
(
C_SFD_IS_ACTIVE
);

554 
RFST
 = 
	`WHILE
(
C_SFD_IS_INACTIVE
);

561 
RFST
 = 
INT
;

567 
RFST
 = 
	`WHILE
(
C_SFD_IS_ACTIVE
);

568 
RFST
 = 
DECZ
;

573 
RFST
 = 
SSTOP
;

575 
	}
}

590 
MAC_INTERNAL_API
 
	$macC•TxGoSlŸãd
()

592 
hÆI¡Sèã_t
 
s
;

593 
uöt8
 
lowByãOfBackoffCou¡
;

594 
uöt8
 
backoffCou¡down
;

601 
	`MAC_MCU_CSP_STOP_ENABLE_INTERRUPT
();

602 
	`MAC_MCU_CSP_INT_ENABLE_INTERRUPT
();

605 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

608 
	`MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE
();

611 
T2M0
;

612 
lowByãOfBackoffCou¡
 = 
T2MOVF0
;

620 
backoffCou¡down
 = 
SLOTTED_TX_MAX_BACKOFF_COUNTDOWN
 - (
lowByãOfBackoffCou¡
 & 
SLOTTED_TX_BACKOFF_COUNT_ALIGN_BIT_MASK
) - 1;

630 
CSPX
 = 
backoffCou¡down
;

633 
	`macRxH¨dDißbÀ
();

641 
	`MAC_RX_WAS_FORCED_ON
();

644 
	`CSP_START_PROGRAM
();

668 
	`MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE
();

671 
T2M0
;

672 i‡((
lowByãOfBackoffCou¡
 !
T2MOVF0
Ë&& (
backoffCou¡down
 > 1))

674 
CSPX
 = 
backoffCou¡down
 - 1;

677 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

678 
	}
}

693 
MAC_INTERNAL_API
 
	$macC•F‹˚TxD⁄eIfPídög
()

695 i‡((
CSPZ
 =
CSPZ_CODE_TX_DONE
Ë&& 
	`MAC_MCU_CSP_STOP_INTERRUPT_IS_ENABLED
())

697 
	`MAC_MCU_CSP_STOP_DISABLE_INTERRUPT
();

698 i‡(
	`MAC_MCU_CSP_INT_INTERRUPT_IS_ENABLED
())

700 
	`macC•TxI¡I§
();

702 
	`macTxD⁄eCÆlback
();

704 
	}
}

718 
MAC_INTERNAL_API
 
	$macC•TxReque°AckTimeoutCÆlback
()

720 
uöt8
 
°¨tSymbﬁ
;

721 
uöt8
 
symbﬁs
;

722 
uöt8
 
rﬁlovîs
;

724 
	`MAC_ASSERT
(!(
RFIRQM1
 & 
IM_CSP_STOP
));

727 
°¨tSymbﬁ
 = 
	`CSP_WEVENT_READ_COUNT_SYMBOLS
();

730 
symbﬁs
 = 
macPib
.
ackWaôDuøti⁄
;

733 
	`MAC_ASSERT
(
symbﬁs
 > 
MAC_A_UNIT_BACKOFF_PERIOD
);

736 
symbﬁs
 = symbﬁ†- (
MAC_A_UNIT_BACKOFF_PERIOD
 - 
°¨tSymbﬁ
);

739 
rﬁlovîs
 = 
symbﬁs
 / 
MAC_A_UNIT_BACKOFF_PERIOD
;

742 
symbﬁs
 = symbﬁ†- (
rﬁlovîs
 * 
MAC_A_UNIT_BACKOFF_PERIOD
);

745 
rﬁlovîs
++;

748 
CSPZ
 = 
CSPZ_CODE_TX_ACK_TIME_OUT
;

749 
CSPX
 = 
rﬁlovîs
;

750 
	`CSP_WEVENT_SET_TRIGGER_SYMBOLS
(
symbﬁs
);

753 
	`CSP_STOP_AND_CLEAR_PROGRAM
();

754 
	`MAC_MCU_CSP_STOP_CLEAR_INTERRUPT
();

759 
RFST
 = 
WAITX
;

760 
RFST
 = 
WEVENT1
;

761 
RFST
 = 
SSTOP
;

767 
	`MAC_MCU_CSP_STOP_ENABLE_INTERRUPT
();

768 
	`CSP_START_PROGRAM
();

778 i‡(
	`CSP_WEVENT_READ_COUNT_SYMBOLS
(Ë< 
°¨tSymbﬁ
)

781 i‡(
CSPX
 =
rﬁlovîs
)

794 
CSPX
--;

797 
	}
}

810 
MAC_INTERNAL_API
 
	$macC•TxC™˚lAckTimeoutCÆlback
()

812 
	`MAC_MCU_CSP_STOP_DISABLE_INTERRUPT
();

813 
	`CSP_STOP_AND_CLEAR_PROGRAM
();

814 
	}
}

831 
MAC_INTERNAL_API
 
	$macC•TxI¡I§
()

833 
	`MAC_MCU_CSP_INT_DISABLE_INTERRUPT
();

836 
	`macTxTime°ampCÆlback
();

837 
	}
}

856 
MAC_INTERNAL_API
 
	$macC•TxSt›I§
()

858 
	`MAC_MCU_CSP_STOP_DISABLE_INTERRUPT
();

863 
	`COMPRESSION_WORKAROUND_ON
();

865 i‡(
CSPZ
 =
CSPZ_CODE_TX_DONE
)

867 
	`macTxD⁄eCÆlback
();

869 i‡(
CSPZ
 =
CSPZ_CODE_CHANNEL_BUSY
)

871 
	`macTxCh™√lBusyCÆlback
();

875 
	`MAC_ASSERT
(
CSPZ
 =
CSPZ_CODE_TX_ACK_TIME_OUT
);

876 
	`macTxAckNŸRe˚ivedCÆlback
();

878 
	}
}

887 #i‡((
CSPZ_CODE_TX_DONE
 !0Ë|| (
CSPZ_CODE_CHANNEL_BUSY
 != 1))

891 #i‡(
MAC_TX_TYPE_SLOTTED_CSMA
 != 0)

895 #i‡(
T2THD_TICKS_PER_SYMBOL
 == 0)

899 
	#BACKOFFS_PER_BASE_SUPERFRAME
 (
MAC_A_BASE_SLOT_DURATION
 * 
MAC_A_NUM_SUPERFRAME_SLOTS
)

	)

900 #i‡(((
BACKOFFS_PER_BASE_SUPERFRAME
 - 1Ë& 
SLOTTED_TX_BACKOFF_COUNT_ALIGN_BIT_MASK
) != SLOTTED_TX_BACKOFF_COUNT_ALIGN_BIT_MASK)

911 #i‡(
SLOTTED_TX_MAX_BACKOFF_COUNTDOWN_NUM_BITS
 < 2)

	@Components/mac/low_level/srf04/single_chip/mac_csp_tx.h

40 #i‚de‡
MAC_CSP_TX_H


41 
	#MAC_CSP_TX_H


	)

47 
	~"hÆ_mcu.h
"

48 
	~"mac_mcu.h
"

49 
	~"mac_high_Àvñ.h
"

56 
MAC_INTERNAL_API
 
macC•TxRe£t
();

58 
MAC_INTERNAL_API
 
macC•TxPªpCsmaUn¶Ÿãd
();

59 
MAC_INTERNAL_API
 
macC•TxPªpCsmaSlŸãd
();

60 
MAC_INTERNAL_API
 
macC•TxPªpSlŸãd
();

62 
MAC_INTERNAL_API
 
macC•TxGoCsma
();

63 
MAC_INTERNAL_API
 
macC•TxGoSlŸãd
();

65 
MAC_INTERNAL_API
 
macC•F‹˚TxD⁄eIfPídög
();

67 
MAC_INTERNAL_API
 
macC•TxReque°AckTimeoutCÆlback
();

68 
MAC_INTERNAL_API
 
macC•TxC™˚lAckTimeoutCÆlback
();

70 
MAC_INTERNAL_API
 
macC•TxSt›I§
();

71 
MAC_INTERNAL_API
 
macC•TxI¡I§
();

	@Components/mac/low_level/srf04/single_chip/mac_mcu.c

46 
	~"hÆ_defs.h
"

47 
	~"hÆ_mcu.h
"

50 
	~"mac_rx.h
"

51 
	~"mac_tx.h
"

52 
	~"mac_backoff_timî.h
"

53 
	~"mac_c•_tx.h
"

54 
	~"mac_rx_⁄off.h
"

55 
	~"mac_low_Àvñ.h
"

58 
	~"mac_mcu.h
"

59 
	~"mac_ødio_defs.h
"

62 
	~"mac_as£π.h
"

71 #i‡
HAL_MCU_LITTLE_ENDIAN
()

72 
	#UINT32_NDX0
 0

	)

73 
	#UINT32_NDX1
 1

	)

74 
	#UINT32_NDX2
 2

	)

75 
	#UINT32_NDX3
 3

	)

77 
	#UINT32_NDX0
 3

	)

78 
	#UINT32_NDX1
 2

	)

79 
	#UINT32_NDX2
 1

	)

80 
	#UINT32_NDX3
 0

	)

87 
uöt8
 
	gmacChùVîsi⁄
 = 0;

88 
öt8
 
	gmaxRssi
;

89 
uöt32
 
	g¥evAccumuœãdOvîÊowCou¡
 = 0;

90 
boﬁ
 
	gupd©eRﬁlovîÊag
 = 
FALSE
;

91 
uöt32
 
	g¥evovîÊowCou¡
 = 0;

98 
uöt32
 
	gaccumuœãdOvîÊowCou¡
 = 0;

101 
macRNGF˙_t
 
	gpR™domSìdCB
 = 
NULL
;

106 
mcuRec‹dMaxRssiI§
();

107 
uöt32
 
macMcuOvîÊowGëCom∑ª
();

109 
MAC_SëR™domSìdCB
(
macRNGF˙_t
 
pCBF˙
);

121 
	$MAC_SëR™domSìdCB
(
macRNGF˙_t
 
pCBF˙
)

123 
pR™domSìdCB
 = 
pCBF˙
;

124 
	}
}

136 
MAC_INTERNAL_API
 
	$macMcuInô
()

138 
hÆI¡Sèã_t
 
s
;

146 
MDMCTRL1
 = 
CORR_THR
;

148 #ifde‡
FEATURE_CC253X_LOW_POWER_RX


152 
RXCTRL
 = 0x00;

153 
FSCTRL
 = 0x50;

156 
RXCTRL
 = 0x3F;

159 
FSCTRL
 = 0x55;

162 #i‡!(
deföed
 
HAL_PA_LNA
 || deföed 
HAL_PA_LNA_CC2590
)

165 
CCACTRL0
 = 
CCA_THR
;

168 #ifde‡
CC2591_COMPRESSION_WORKAROUND


170 
MDMCTRL0
 = 0x95;

178 
MDMCTRL0
 = 0x85;

181 i‡(*(
uöt8
 *)(
P_INFOPAGE
+0x03) == 0x95)

184 
	#IVCTRL
 
	`XREG
–0x6265 )

	)

185 
IVCTRL
 = 0xF;

188 
FSCAL1
 = 0x00;

191 
AGCCTRL1
 = 0x15;

194 
SRCMATCH
 = 0;

197 
ADCTEST0
 = 0x10;

198 
ADCTEST1
 = 0x0E;

199 
ADCTEST2
 = 0x03;

204 
TXFILTCFG
 = 
TXFILTCFG_RESET_VALUE
;

207 
CSPT
 = 0xFF;

210 
IEN2
 |
RFIE
;

213 
IEN0
 |
RFERRIE
;

216 
IP0
 |
IP_RFERR_RF_DMA_BV
;

217 
IP1
 &~
IP_RFERR_RF_DMA_BV
;

222 
IP0
 |
IP_RXTX0_T2_BV
;

223 
IP1
 &~
IP_RXTX0_T2_BV
;

226 
macChùVîsi⁄
 = 
CHVER
;

233 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

234 
	`MAC_MCU_T2_ACCESS_PERIOD_VALUE
();

235 
T2M0
 = 
	`MAC_RADIO_TIMER_TICKS_PER_BACKOFF
() & 0xFF;

236 
T2M1
 = 
	`MAC_RADIO_TIMER_TICKS_PER_BACKOFF
() >> 8;

237 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

240 
	`MAC_RADIO_TIMER_WAKE_UP
();

245 
T2CTRL
 |(
LATCH_MODE
 | 
TIMER2_SYNC
);

248 
T2IE
 = 1;

258 
FRMCTRL0
 = 
FRMCTRL0_RESET_VALUE
 | 
RX_MODE_INFINITE_RECEPTION
;

261 
	`macRxOn
();

267 !(
RSSISTAT
 & 0x01));

271 
uöt16
 
∫dSìd
;

272 
uöt8
 
i
;

274 
∫dSìd
 = 0;

276 
i
=0; i<16; i++)

279 
∫dSìd
 = (∫dSìd << 1Ë| (
RFRND
 & 0x01);

287 i‡(
∫dSìd
 == 0x0000 ||ÑndSeed == 0x0380)

289 
∫dSìd
 = 0xBABE;

296 
RNDL
 = 
∫dSìd
 & 0xFF;

297 
RNDL
 = 
∫dSìd
 >> 8;

302 if–
pR™domSìdCB
 )

304 
uöt8
 
øndomSìd
[
MAC_RANDOM_SEED_LEN
];

305 
uöt8
 
i
,
j
;

307 
i
 = 0; i < 16; i++)

309 
uöt8
 
∫dByã
 = 0;

310 
j
 = 0; j < 8; j++)

314 
∫dByã
 = (∫dByã << 1Ë| (
RFRND
 & 0x01);

316 
øndomSìd
[
i
] = 
∫dByã
;

319 
	`pR™domSìdCB
–
øndomSìd
 );

323 
	`macRxOff
();

326 
FRMCTRL0
 = 
FRMCTRL0_RESET_VALUE
 | 
RX_MODE_NORMAL_OPERATION
;

329 
	`MAC_RADIO_TURN_ON_AUTO_ACK
();

332 
	`MAC_RADIO_SRC_MATCH_INIT_EXTPENDEN
();

333 
	`MAC_RADIO_SRC_MATCH_INIT_SHORTPENDEN
();

334 
	}
}

348 
MAC_INTERNAL_API
 
uöt8
 
	$macMcuR™domByã
()

351 
ADCCON1
 = (ADCCON1 & ~
RCTRL_BITS
Ë| 
RCTRL_CLOCK_LFSR
;

354 (
RNDH
);

355 
	}
}

369 
MAC_INTERNAL_API
 
uöt16
 
	$macMcuR™domW‹d
()

371 
uöt16
 
øndom_w‹d
;

374 
ADCCON1
 = (ADCCON1 & ~
RCTRL_BITS
Ë| 
RCTRL_CLOCK_LFSR
;

377 
øndom_w‹d
 = (
RNDH
 << 8);

378 
øndom_w‹d
 +
RNDL
;

381 (
øndom_w‹d
);

382 
	}
}

395 
MAC_INTERNAL_API
 
	$macMcuTimîF‹˚Dñay
(
uöt16
 
x
)

397 
hÆI¡Sèã_t
 
s
;

399 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

400 
	`MAC_MCU_T2_ACCESS_COUNT_VALUE
();

401 
T2M0
 = (
x
) & 0xFF;

402 
T2M1
 = (
x
) >> 8;

403 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

404 
	}
}

417 
MAC_INTERNAL_API
 
uöt16
 
	$macMcuTimîC≠tuª
()

419 
uöt16
 
timîC≠tuª
;

420 
hÆI¡Sèã_t
 
s
;

422 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

423 
	`MAC_MCU_T2_ACCESS_CAPTURE_VALUE
();

424 
timîC≠tuª
 = 
T2M1
 << 8;

425 
timîC≠tuª
 |
T2M0
;

426 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

428  (
timîC≠tuª
);

429 
	}
}

443 
MAC_INTERNAL_API
 
uöt32
 
	$macMcuOvîÊowCou¡
()

445 
uöt32
 
ovîÊowCou¡
;

446 
hÆI¡Sèã_t
 
s
;

450 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

453 
	`MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE
();

456 
T2M0
;

457 ((
uöt8
 *)&
ovîÊowCou¡
)[
UINT32_NDX0
] = 
T2MOVF0
;

458 ((
uöt8
 *)&
ovîÊowCou¡
)[
UINT32_NDX1
] = 
T2MOVF1
;

459 ((
uöt8
 *)&
ovîÊowCou¡
)[
UINT32_NDX2
] = 
T2MOVF2
;

460 ((
uöt8
 *)&
ovîÊowCou¡
)[
UINT32_NDX3
] = 0;

461 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

463  (
ovîÊowCou¡
);

464 
	}
}

478 
MAC_INTERNAL_API
 
uöt32
 
	$macMcuOvîÊowC≠tuª
()

480 
uöt32
 
ovîÊowC≠tuª
;

481 
hÆI¡Sèã_t
 
s
;

484 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

485 
	`MAC_MCU_T2_ACCESS_OVF_CAPTURE_VALUE
();

486 ((
uöt8
 *)&
ovîÊowC≠tuª
)[
UINT32_NDX0
] = 
T2MOVF0
;

487 ((
uöt8
 *)&
ovîÊowC≠tuª
)[
UINT32_NDX1
] = 
T2MOVF1
;

488 ((
uöt8
 *)&
ovîÊowC≠tuª
)[
UINT32_NDX2
] = 
T2MOVF2
;

489 ((
uöt8
 *)&
ovîÊowC≠tuª
)[
UINT32_NDX3
] = 0;

490 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

492  (
ovîÊowC≠tuª
);

493 
	}
}

506 
MAC_INTERNAL_API
 
	$macMcuOvîÊowSëCou¡
(
uöt32
 
cou¡
)

508 
hÆI¡Sèã_t
 
s
;

510 
	`MAC_ASSERT
(! (
cou¡
 >> 24) );

513 
accumuœãdOvîÊowCou¡
 +
	`macMcuOvîÊowCou¡
();

516 
accumuœãdOvîÊowCou¡
 -
cou¡
;

518 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

519 
	`MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE
();

523 
T2MOVF0
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX0
];

524 
T2MOVF1
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX1
];

525 
T2MOVF2
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX2
];

526 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

527 
	}
}

541 
MAC_INTERNAL_API
 
	$macMcuOvîÊowSëCom∑ª
(
uöt32
 
cou¡
)

543 
hÆI¡Sèã_t
 
s
;

544 
uöt8
 
íabÀCom∑ªI¡
 = 0;

546 
	`MAC_ASSERT
–!(
cou¡
 >> 24) );

548 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

551 i‡(
T2IRQM
 & 
TIMER2_OVF_COMPARE1M
)

553 
íabÀCom∑ªI¡
 = 1;

554 
T2IRQM
 &~
TIMER2_OVF_COMPARE1M
;

557 
	`MAC_MCU_T2_ACCESS_OVF_CMP1_VALUE
();

560 
T2MOVF0
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX0
];

561 
T2MOVF1
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX1
];

562 
T2MOVF2
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX2
];

568 
T2IRQF
 = ~
TIMER2_OVF_COMPARE1F
;

571 i‡(
íabÀCom∑ªI¡
)

573 
T2IRQM
 |
TIMER2_OVF_COMPARE1M
;

576 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

577 
	}
}

591 
MAC_INTERNAL_API
 
	$macMcuOvîÊowSëPîiod
(
uöt32
 
cou¡
)

593 
hÆI¡Sèã_t
 
s
;

594 
uöt8
 
íabÀCom∑ªI¡
 = 0;

596 
	`MAC_ASSERT
–!(
cou¡
 >> 24) );

598 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

601 i‡(
T2IRQM
 & 
TIMER2_OVF_PERM
)

603 
íabÀCom∑ªI¡
 = 1;

604 
T2IRQM
 &~
TIMER2_OVF_PERM
;

607 
	`MAC_MCU_T2_ACCESS_OVF_PERIOD_VALUE
();

610 
T2MOVF0
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX0
];

611 
T2MOVF1
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX1
];

612 
T2MOVF2
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX2
];

618 
T2IRQF
 &~
TIMER2_OVF_PERF
;

621 i‡(
íabÀCom∑ªI¡
)

623 
T2IRQM
 |
TIMER2_OVF_PERM
;

626 
	`hÆSëMaxSÀïLo›Time
(
cou¡
);

627 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

628 
	}
}

641 
MAC_INTERNAL_API
 
uöt32
 
	$macMcuOvîÊowGëCom∑ª
()

643 
hÆI¡Sèã_t
 
s
;

644 
uöt32
 
com∑ª
;

646 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

648 
	`MAC_MCU_T2_ACCESS_OVF_CMP1_VALUE
();

651 ((
uöt8
 *)&
com∑ª
)[
UINT32_NDX0
] = 
T2MOVF0
;

652 ((
uöt8
 *)&
com∑ª
)[
UINT32_NDX1
] = 
T2MOVF1
;

653 ((
uöt8
 *)&
com∑ª
)[
UINT32_NDX2
] = 
T2MOVF2
;

654 ((
uöt8
 *)&
com∑ª
)[
UINT32_NDX3
] = 0;

656 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

658 (
com∑ª
);

659 
	}
}

672 
	$HAL_ISR_FUNCTION
–
macMcuTimî2I§
, 
T2_VECTOR
 )

674 
uöt8
 
t2úqm
;

675 
uöt8
 
t2úqf
;

677 
	`HAL_ENTER_ISR
();

679 
t2úqm
 = 
T2IRQM
;

680 
t2úqf
 = 
T2IRQF
;

686 i‡((
t2úqf
 & 
TIMER2_OVF_COMPARE1F
Ë& 
t2úqm
)

690 
	`macBackoffTimîCom∑ªI§
();

693 
T2IRQF
 = ~
TIMER2_OVF_COMPARE1F
;

700 i‡((
t2úqf
 & 
TIMER2_OVF_PERF
Ë& 
t2úqm
)

704 
	`macBackoffTimîPîiodI§
();

707 
T2IRQF
 = ~
TIMER2_OVF_PERF
;

713 i‡((
t2úqf
 & 
TIMER2_PERF
Ë& 
t2úqm
)

716 
	`mcuRec‹dMaxRssiI§
();

719 
T2IRQF
 = ~
TIMER2_PERF
;

722 
	`CLEAR_SLEEP_MODE
();

723 
	`HAL_EXIT_ISR
();

724 
	}
}

742 
	$macMcuTimî2OvîÊowW‹k¨ound
()

744 i‡(
T2IRQM
 & 
TIMER2_OVF_COMPARE1F
)

747 i‡(!(
T2IRQF
 & 
TIMER2_OVF_COMPARE1F
))

749 i‡(
	`MAC_RADIO_BACKOFF_COUNT
(Ë> 
	`macMcuOvîÊowGëCom∑ª
())

752 
	`macBackoffTimîCom∑ªI§
();

753 
T2IRQF
 = ~
TIMER2_OVF_COMPARE1F
;

757 
	}
}

771 
uöt32
 
	$macMcuPªcisi⁄Cou¡
()

773 
uöt32
 
ovîÊowCou¡
 = 0;

774 
hÆI¡Sèã_t
 
s
;

776 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

779 
	`MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE
();

784 
T2M0
;

785 ((
uöt8
 *)&
ovîÊowCou¡
)[
UINT32_NDX0
] = 
T2MOVF0
;

786 ((
uöt8
 *)&
ovîÊowCou¡
)[
UINT32_NDX1
] = 
T2MOVF1
;

787 ((
uöt8
 *)&
ovîÊowCou¡
)[
UINT32_NDX2
] = 
T2MOVF2
;

791 
ovîÊowCou¡
 +
accumuœãdOvîÊowCou¡
;

798 if((
¥evovîÊowCou¡
 > 
ovîÊowCou¡
Ë&& (
¥evAccumuœãdOvîÊowCou¡
 =
accumuœãdOvîÊowCou¡
))

800 
accumuœãdOvîÊowCou¡
 +
	`macGëBackOffTimîRﬁlovî
();

801 
ovîÊowCou¡
 +
	`macGëBackOffTimîRﬁlovî
();

803 
upd©eRﬁlovîÊag
 = 
TRUE
;

807 
¥evovîÊowCou¡
 = 
ovîÊowCou¡
;

808 
¥evAccumuœãdOvîÊowCou¡
 = 
accumuœãdOvîÊowCou¡
;

809 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

811 (
ovîÊowCou¡
);

812 
	}
}

826 
	$HAL_ISR_FUNCTION
–
macMcuRfI§
, 
RF_VECTOR
 )

828 
uöt8
 
rfim
;

830 
	`HAL_ENTER_ISR
();

832 
rfim
 = 
RFIRQM1
;

837 
S1CON
 = 0x00;

839 i‡((
RFIRQF1
 & 
IRQ_CSP_MANINT
Ë& 
rfim
)

847 
RFIRQF1
 = ~
IRQ_CSP_MANINT
;

848 
	`macC•TxI¡I§
();

850 i‡((
RFIRQF1
 & 
IRQ_CSP_STOP
Ë& 
rfim
)

853 
RFIRQF1
 = ~
IRQ_CSP_STOP
;

854 
	`macC•TxSt›I§
();

856 i‡((
RFIRQF1
 & 
IRQ_TXACKDONE
Ë& 
rfim
)

859 
RFIRQM1
 &~
IM_TXACKDONE
;

860 
	`macRxAckTxD⁄eCÆlback
();

863 
rfim
 = 
RFIRQM0
;

866 i‡((
RFIRQF0
 & 
IRQ_FIFOP
Ë& 
rfim
)

871 
	`macRxThªshﬁdI§
();

872 
RFIRQF0
 = ~
IRQ_FIFOP
;

873 } 
FSMSTAT1
 & 
FIFOP
);

876 
	`CLEAR_SLEEP_MODE
();

877 
	`HAL_EXIT_ISR
();

878 
	}
}

892 
	$HAL_ISR_FUNCTION
–
macMcuRfEºI§
, 
RFERR_VECTOR
 )

894 
uöt8
 
r„ºm
;

896 
	`HAL_ENTER_ISR
();

898 
r„ºm
 = 
RFERRM
;

900 i‡((
RFERRF
 & 
RFERR_RXOVERF
Ë& 
r„ºm
)

902 
RFERRF
 = ~
RFERR_RXOVERF
;

903 
	`macRxFifoOvîÊowI§
();

906 
	`CLEAR_SLEEP_MODE
();

907 
	`HAL_EXIT_ISR
();

908 
	}
}

921 
MAC_INTERNAL_API
 
	$macMcuRec‹dMaxRssiSèπ
()

924 
maxRssi
 = -128;

927 
T2IRQM
 |
TIMER2_PERM
;

928 
	}
}

942 
MAC_INTERNAL_API
 
öt8
 
	$macMcuRec‹dMaxRssiSt›
()

945 
T2IRQM
 &~
TIMER2_PERM
;

947 (
maxRssi
);

948 
	}
}

961 
	$mcuRec‹dMaxRssiI§
()

963 
öt8
 
rssi
;

966 
rssi
 = 
RSSI
;

969 i‡(
rssi
 > 
maxRssi
)

971 
maxRssi
 = 
rssi
;

973 
	}
}

986 
MAC_INTERNAL_API
 
	$macMcuAccumuœãdOvîFlow
()

988 
hÆI¡Sèã_t
 
s
;

989 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

991 if(
upd©eRﬁlovîÊag
 =
FALSE
)

993 
accumuœãdOvîÊowCou¡
 +
	`macGëBackOffTimîRﬁlovî
();

997 
upd©eRﬁlovîÊag
 = 
FALSE
;

1000 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

1001 
	}
}

1007 #i‡((
IRQ_SFD
 !
IM_SFD
Ë|| (
IRQ_FIFOP
 !
IM_FIFOP
Ë|| (
IRQ_TXACKDONE
 !
IM_TXACKDONE
))

1011 #i‡
deföed
 (
FEATURE_CC253X_LOW_POWER_RX
Ë&& !(deföed (
HAL_MCU_CC2530
Ë|| deföed (
HAL_MCU_CC2533
))

	@Components/mac/low_level/srf04/single_chip/mac_mcu.h

40 #i‚de‡
MAC_MCU_H


41 
	#MAC_MCU_H


	)

47 
	~"hÆ_mcu.h
"

48 
	~"hÆ_ty≥s.h
"

49 
	~"hÆ_defs.h
"

50 
	~"hÆ_bﬂrd.h
"

51 
	~"mac_high_Àvñ.h
"

59 
	#IPX_0
 
	`BV
(0)

	)

60 
	#IPX_1
 
	`BV
(1)

	)

61 
	#IPX_2
 
	`BV
(2)

	)

62 
	#IP_RFERR_RF_DMA_BV
 
IPX_0


	)

63 
	#IP_RXTX0_T2_BV
 
IPX_2


	)

66 
	#LATCH_MODE
 
	`BV
(3)

	)

67 
	#TIMER2_STATE
 
	`BV
(2)

	)

68 
	#TIMER2_SYNC
 
	`BV
(1)

	)

69 
	#TIMER2_RUN
 
	`BV
(0)

	)

72 
	#TIMER2_OVF_COMPARE2F
 
	`BV
(5)

	)

73 
	#TIMER2_OVF_COMPARE1F
 
	`BV
(4)

	)

74 
	#TIMER2_OVF_PERF
 
	`BV
(3)

	)

75 
	#TIMER2_COMPARE2F
 
	`BV
(2)

	)

76 
	#TIMER2_COMPARE1F
 
	`BV
(1)

	)

77 
	#TIMER2_PERF
 
	`BV
(0)

	)

80 
	#TIMER2_OVF_COMPARE2M
 
	`BV
(5)

	)

81 
	#TIMER2_OVF_COMPARE1M
 
	`BV
(4)

	)

82 
	#TIMER2_OVF_PERM
 
	`BV
(3)

	)

83 
	#TIMER2_COMPARE2M
 
	`BV
(2)

	)

84 
	#TIMER2_COMPARE1M
 
	`BV
(1)

	)

85 
	#TIMER2_PERM
 
	`BV
(0)

	)

88 
	#CMPIM
 
	`BV
(7)

	)

89 
	#PERIM
 
	`BV
(6)

	)

90 
	#OFCMPIM
 
	`BV
(5)

	)

91 
	#PEROF2_BITS
 (
	`BV
(3Ë| BV(2Ë| BV(1Ë| BV(0))

	)

94 
	#IRQ_SFD
 
	`BV
(1)

	)

95 
	#IRQ_FIFOP
 
	`BV
(2)

	)

98 
	#IRQ_TXACKDONE
 
	`BV
(0)

	)

99 
	#IRQ_TXDONE
 
	`BV
(1)

	)

100 
	#IRQ_CSP_MANINT
 
	`BV
(3)

	)

101 
	#IRQ_CSP_STOP
 
	`BV
(4)

	)

104 
	#IM_SFD
 
	`BV
(1)

	)

105 
	#IM_FIFOP
 
	`BV
(2)

	)

108 
	#IM_TXACKDONE
 
	`BV
(0)

	)

109 
	#IM_TXDONE
 
	`BV
(1)

	)

110 
	#IM_CSP_MANINT
 
	`BV
(3)

	)

111 
	#IM_CSP_STOP
 
	`BV
(4)

	)

114 
	#TXACK
 
	`BV
(0)

	)

117 
	#RFERR_RXOVERF
 
	`BV
(2)

	)

124 
	#MAC_MCU_WRITE_RFIRQF0
(
x
Ë
	`HAL_CRITICAL_STATEMENT
–
S1CON
 = 0x00; 
RFIRQF0
 = x; )

	)

125 
	#MAC_MCU_WRITE_RFIRQF1
(
x
Ë
	`HAL_CRITICAL_STATEMENT
–
S1CON
 = 0x00; 
RFIRQF1
 = x; )

	)

126 
	#MAC_MCU_OR_RFIRQM0
(
x
Ë
	`°
–
RFIRQM0
 |x; )

	)

127 
	#MAC_MCU_AND_RFIRQM0
(
x
Ë
	`°
–
RFIRQM0
 &x; )

	)

128 
	#MAC_MCU_OR_RFIRQM1
(
x
Ë
	`°
–
RFIRQM1
 |x; )

	)

129 
	#MAC_MCU_AND_RFIRQM1
(
x
Ë
	`°
–
RFIRQM1
 &x; )

	)

131 
	#MAC_MCU_FIFOP_ENABLE_INTERRUPT
(Ë
	`MAC_MCU_OR_RFIRQM0
(
IM_FIFOP
)

	)

132 
	#MAC_MCU_FIFOP_DISABLE_INTERRUPT
(Ë
	`MAC_MCU_AND_RFIRQM0
(~
IM_FIFOP
)

	)

133 
	#MAC_MCU_FIFOP_CLEAR_INTERRUPT
(Ë
	`MAC_MCU_WRITE_RFIRQF0
(~
IRQ_FIFOP
)

	)

135 
	#MAC_MCU_TXACKDONE_ENABLE_INTERRUPT
(Ë
	`MAC_MCU_OR_RFIRQM1
(
IM_TXACKDONE
)

	)

136 
	#MAC_MCU_TXACKDONE_DISABLE_INTERRUPT
(Ë
	`MAC_MCU_AND_RFIRQM1
(~
IM_TXACKDONE
)

	)

137 
	#MAC_MCU_TXACKDONE_CLEAR_INTERRUPT
(Ë
	`MAC_MCU_WRITE_RFIRQF1
(~
IRQ_TXACKDONE
)

	)

139 
	#MAC_MCU_CSP_STOP_ENABLE_INTERRUPT
(Ë
	`MAC_MCU_OR_RFIRQM1
(
IM_CSP_STOP
)

	)

140 
	#MAC_MCU_CSP_STOP_DISABLE_INTERRUPT
(Ë
	`MAC_MCU_AND_RFIRQM1
(~
IM_CSP_STOP
)

	)

141 
	#MAC_MCU_CSP_STOP_CLEAR_INTERRUPT
(Ë
	`MAC_MCU_WRITE_RFIRQF1
(~
IRQ_CSP_STOP
)

	)

142 
	#MAC_MCU_CSP_STOP_INTERRUPT_IS_ENABLED
(Ë(
RFIRQM1
 & 
IM_CSP_STOP
)

	)

144 
	#MAC_MCU_CSP_INT_ENABLE_INTERRUPT
(Ë
	`MAC_MCU_OR_RFIRQM1
(
IM_CSP_MANINT
)

	)

145 
	#MAC_MCU_CSP_INT_DISABLE_INTERRUPT
(Ë
	`MAC_MCU_AND_RFIRQM1
(~
IM_CSP_MANINT
)

	)

146 
	#MAC_MCU_CSP_INT_CLEAR_INTERRUPT
(Ë
	`MAC_MCU_WRITE_RFIRQF1
(~
IRQ_CSP_MANINT
)

	)

147 
	#MAC_MCU_CSP_INT_INTERRUPT_IS_ENABLED
(Ë(
RFIRQM1
 & 
IM_CSP_MANINT
)

	)

149 
	#MAC_MCU_RFERR_ENABLE_INTERRUPT
(Ë
	`°
–
RFERRM
 |
RFERR_RXOVERF
; )

	)

150 
	#MAC_MCU_RFERR_DISABLE_INTERRUPT
(Ë
	`°
–
RFERRM
 &~
RFERR_RXOVERF
; )

	)

156 
	#T2M_OVF_BITS
 (
	`BV
(6Ë| BV(5Ë| BV(4))

	)

157 
	#T2M_BITS
 (
	`BV
(2Ë| BV(1Ë| BV(0))

	)

159 
	#T2M_OVFSEL
(
x
Ë((xË<< 4)

	)

160 
	#T2M_SEL
(
x
Ë(x)

	)

162 
	#T2M_T2OVF
 
	`T2M_OVFSEL
(0)

	)

163 
	#T2M_T2OVF_CAP
 
	`T2M_OVFSEL
(1)

	)

164 
	#T2M_T2OVF_PER
 
	`T2M_OVFSEL
(2)

	)

165 
	#T2M_T2OVF_CMP1
 
	`T2M_OVFSEL
(3)

	)

166 
	#T2M_T2OVF_CMP2
 
	`T2M_OVFSEL
(4)

	)

168 
	#T2M_T2TIM
 
	`T2M_SEL
(0)

	)

169 
	#T2M_T2_CAP
 
	`T2M_SEL
(1)

	)

170 
	#T2M_T2_PER
 
	`T2M_SEL
(2)

	)

171 
	#T2M_T2_CMP1
 
	`T2M_SEL
(3)

	)

172 
	#T2M_T2_CMP2
 
	`T2M_SEL
(4)

	)

174 
	#MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2OVF
; )

	)

175 
	#MAC_MCU_T2_ACCESS_OVF_CAPTURE_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2OVF_CAP
; )

	)

176 
	#MAC_MCU_T2_ACCESS_OVF_PERIOD_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2OVF_PER
; )

	)

177 
	#MAC_MCU_T2_ACCESS_OVF_CMP1_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2OVF_CMP1
; )

	)

178 
	#MAC_MCU_T2_ACCESS_OVF_CMP2_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2OVF_CMP2
; )

	)

180 
	#MAC_MCU_T2_ACCESS_COUNT_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2TIM
; )

	)

181 
	#MAC_MCU_T2_ACCESS_CAPTURE_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2_CAP
; )

	)

182 
	#MAC_MCU_T2_ACCESS_PERIOD_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2_PER
; )

	)

183 
	#MAC_MCU_T2_ACCESS_CMP1_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2_CMP1
; )

	)

184 
	#MAC_MCU_T2_ACCESS_CMP2_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2_CMP2
; )

	)

186 
	#MAC_MCU_CONFIG_CSP_EVENT1
(Ë
	`°
–
T2CSPCFG
 = 1; )

	)

193 
uöt8
 
macChùVîsi⁄
;

200 
MAC_INTERNAL_API
 
macMcuInô
();

201 
MAC_INTERNAL_API
 
uöt8
 
macMcuR™domByã
();

202 
MAC_INTERNAL_API
 
uöt16
 
macMcuR™domW‹d
();

203 
MAC_INTERNAL_API
 
macMcuTimîF‹˚Dñay
(
uöt16
 
cou¡
);

204 
MAC_INTERNAL_API
 
uöt16
 
macMcuTimîC≠tuª
();

205 
MAC_INTERNAL_API
 
uöt32
 
macMcuOvîÊowCou¡
();

206 
MAC_INTERNAL_API
 
uöt32
 
macMcuOvîÊowC≠tuª
();

207 
MAC_INTERNAL_API
 
macMcuOvîÊowSëCou¡
(
uöt32
 
cou¡
);

208 
MAC_INTERNAL_API
 
macMcuOvîÊowSëCom∑ª
(
uöt32
 
cou¡
);

209 
MAC_INTERNAL_API
 
macMcuOvîÊowSëPîiod
(
uöt32
 
cou¡
);

210 
MAC_INTERNAL_API
 
macMcuRec‹dMaxRssiSèπ
();

211 
MAC_INTERNAL_API
 
öt8
 
macMcuRec‹dMaxRssiSt›
();

212 
MAC_INTERNAL_API
 
macMcuRec‹dMaxRssiI§
();

213 
MAC_INTERNAL_API
 
macMcuAccumuœãdOvîFlow
();

214 
uöt32
 
macMcuPªcisi⁄Cou¡
();

215 
macMcuTimî2OvîÊowW‹k¨ound
();

	@Components/mac/low_level/srf04/single_chip/mac_mem.c

46 
	~"hÆ_ty≥s.h
"

49 
	~"mac_mem.h
"

52 
	~"hÆ_mcu.h
"

55 
	~"mac_as£π.h
"

68 
uöt8
 
	$macMemRódRamByã
(
macRam_t
 * 
pRam
)

70 (*
pRam
);

71 
	}
}

86 
MAC_INTERNAL_API
 
	$macMemWrôeRam
(
macRam_t
 * 
pRam
, 
uöt8
 * 
pD©a
, uöt8 
Àn
)

88 
Àn
)

90 
Àn
--;

91 *
pRam
 = *
pD©a
;

92 
pRam
++;

93 
pD©a
++;

95 
	}
}

110 
MAC_INTERNAL_API
 
	$macMemRódRam
(
macRam_t
 * 
pRam
, 
uöt8
 * 
pD©a
, uöt8 
Àn
)

112 
Àn
)

114 
Àn
--;

115 *
pD©a
 = *
pRam
;

116 
pRam
++;

117 
pD©a
++;

119 
	}
}

133 
MAC_INTERNAL_API
 
	$macMemWrôeTxFifo
(
uöt8
 * 
pD©a
, uöt8 
Àn
)

135 
	`MAC_ASSERT
(
Àn
 != 0);

139 
RFD
 = *
pD©a
;

140 
pD©a
++;

141 
Àn
--;

143 
Àn
);

144 
	}
}

158 
MAC_INTERNAL_API
 
	$macMemRódRxFifo
(
uöt8
 * 
pD©a
, uöt8 
Àn
)

160 
	`MAC_ASSERT
(
Àn
 != 0);

164 *
pD©a
 = 
RFD
;

165 
pD©a
++;

166 
Àn
--;

168 
Àn
);

169 
	}
}

	@Components/mac/low_level/srf04/single_chip/mac_mem.h

40 #i‚de‡
MAC_MEM_H


41 
	#MAC_MEM_H


	)

47 
	~"hÆ_ty≥s.h
"

48 
	~"mac_high_Àvñ.h
"

55 vﬁ©ûê
	tXDATA
 
	tmacRam_t
;

62 
MAC_INTERNAL_API
 
uöt8
 
macMemRódRamByã
(
macRam_t
 * 
pRam
);

63 
MAC_INTERNAL_API
 
macMemWrôeRam
(
macRam_t
 * 
pRam
, 
uöt8
 * 
pD©a
, uöt8 
Àn
);

64 
MAC_INTERNAL_API
 
macMemRódRam
(
macRam_t
 * 
pRam
, 
uöt8
 * 
pD©a
, uöt8 
Àn
);

65 
MAC_INTERNAL_API
 
macMemWrôeTxFifo
(
uöt8
 * 
pD©a
, uöt8 
Àn
);

66 
MAC_INTERNAL_API
 
macMemRódRxFifo
(
uöt8
 * 
pD©a
, uöt8 
Àn
);

	@Components/mac/low_level/srf04/single_chip/mac_radio_defs.c

44 
	~"mac_ødio_defs.h
"

45 
	~"hÆ_ty≥s.h
"

46 
	~"hÆ_as£π.h
"

47 
	~"hÆ_mcu.h
"

48 
	~"mac_pib.h
"

55 #i‡
deföed
 
MAC_RUNTIME_CC2591
 || deföed 
MAC_RUNTIME_CC2590
 || \

56 (!
deföed
 
	gHAL_PA_LNA
 && !deföed 
	gHAL_PA_LNA_CC2590
)

58 #ifde‡
HAL_MCU_CC2533


59 c⁄° 
uöt8
 
CODE
 
	gmacRadioDefsTxPwrB¨e
[] =

62 (
uöt8
)(
öt8
)-21,

91 c⁄° 
uöt8
 
CODE
 
	gmacRadioDefsTxPwrB¨e
[] =

94 (
uöt8
)(
öt8
)-22,

124 (!
deföed
 
	gHAL_PA_LNA
 && !deföed 
	gHAL_PA_LNA_CC2590
) */

126 #i‡
deföed
 
HAL_PA_LNA
 || deföed 
MAC_RUNTIME_CC2591


127 c⁄° 
uöt8
 
CODE
 
	gmacRadioDefsTxPwrCC2591
[] =

130 (
uöt8
)(
öt8
)10,

147 #i‡
deföed
 
HAL_PA_LNA_CC2590
 || deföed 
MAC_RUNTIME_CC2590


148 c⁄° 
uöt8
 
CODE
 
	gmacRadioDefsTxPwrCC2590
[] =

151 (
uöt8
)(
öt8
)-12,

180 #i‡
deföed
 
MAC_RUNTIME_CC2591
 || deföed 
MAC_RUNTIME_CC2590
 || \

181 
deföed
 
	gHAL_PA_LNA
 || deföed 
HAL_PA_LNA_CC2590


184 c⁄° 
uöt8
 
CODE
 *c⁄° CODE 
	gmacRadioDefsTxPwrTabÀs
[] =

186 #i‡
deföed
 
MAC_RUNTIME_CC2591
 || deföed 
MAC_RUNTIME_CC2590
 || \

187 (!
deföed
 
HAL_PA_LNA
 && !deföed 
HAL_PA_LNA_CC2590
)

188 
macRadioDefsTxPwrB¨e
,

191 #i‡
deföed
 
HAL_PA_LNA
 || deföed 
MAC_RUNTIME_CC2591


192 
macRadioDefsTxPwrCC2591
,

195 #i‡
deföed
 
HAL_PA_LNA_CC2590
 || deföed 
MAC_RUNTIME_CC2590


196 
macRadioDefsTxPwrCC2590
,

201 c⁄° 
öt8
 
CODE
 
	gmacRadioDefsRssiAdj
[] =

203 #i‡
deföed
 
MAC_RUNTIME_CC2591
 || deföed 
MAC_RUNTIME_CC2590
 || \

204 (!
deföed
 
HAL_PA_LNA
 && !deföed 
HAL_PA_LNA_CC2590
)

208 #i‡
deföed
 
HAL_PA_LNA
 || deföed 
MAC_RUNTIME_CC2591


213 #i‡
deföed
 
HAL_PA_LNA_CC2590
 || deföed 
MAC_RUNTIME_CC2590


221 #i‡
deföed
 
MAC_RUNTIME_CC2591
 || deföed 
MAC_RUNTIME_CC2590
 || \

222 
deföed
 
	gHAL_PA_LNA
 || deföed 
HAL_PA_LNA_CC2590


223 
uöt8
 
	gmacRadioDefsRefTabÀId
 = 0;

227 
	#RFC_OBS_CTRL_PA_PD_INV
 0x68

	)

230 
	#RFC_OBS_CTRL_LNAMIX_PD_INV
 0x6A

	)

233 
	#OBSSEL_OBS_CTRL0
 0xFB

	)

236 
	#OBSSEL_OBS_CTRL1
 0xFC

	)

251 
	$MAC_SëRadioRegTabÀ
 ( 
uöt8
 
txPwrTblIdx
, uöt8 
rssiAdjIdx
 )

254 (Ë
txPwrTblIdx
;

255 (Ë
rssiAdjIdx
;

257 #i‡
deföed
 
MAC_RUNTIME_CC2591
 || deföed 
MAC_RUNTIME_CC2590


258 i‡(
txPwrTblIdx
 >(
macRadioDefsTxPwrTabÀs
)/(macRadioDefsTxPwrTables[0]))

260 
txPwrTblIdx
 = 0;

264 #i‡
deföed
 
MAC_RUNTIME_CC2591
 || deföed 
MAC_RUNTIME_CC2590
 || \

265 
deföed
 
HAL_PA_LNA
 || deföed 
HAL_PA_LNA_CC2590


267 i‡(
rssiAdjIdx
 >(
macRadioDefsRssiAdj
)/(macRadioDefsRssiAdj[0]))

269 
rssiAdjIdx
 = 0;

272 
macRadioDefsRefTabÀId
 = (
txPwrTblIdx
 << 4Ë| 
rssiAdjIdx
;

275 
	}
}

288 
MAC_INTERNAL_API
 
	$macRadioTu∫OnPowî
()

291 
	`MAC_MCU_RFERR_ENABLE_INTERRUPT
();

293 #i‡
deföed
 
MAC_RUNTIME_CC2591
 || deföed 
MAC_RUNTIME_CC2590


295 i‡(
macRadioDefsRefTabÀId
 & 0xf0)

298 #i‡
deföed
 
MAC_RUNTIME_CC2591
 || deföed 
MAC_RUNTIME_CC2590
 || \

299 
deföed
 
HAL_PA_LNA
 || deföed 
HAL_PA_LNA_CC2590


307 
RFC_OBS_CTRL0
 = 
RFC_OBS_CTRL_PA_PD_INV
;

308 
OBSSEL1
 = 
OBSSEL_OBS_CTRL0
;

311 
RFC_OBS_CTRL1
 = 
RFC_OBS_CTRL_LNAMIX_PD_INV
;

312 
OBSSEL4
 = 
OBSSEL_OBS_CTRL1
;

318 
	`COMPRESSION_WORKAROUND_ON
();

322 i‡(
macChùVîsi⁄
 <
REV_B
)

325 
	`MAC_RADIO_SET_PAN_ID
(
macPib
.
∑nId
);

326 
	`MAC_RADIO_SET_SHORT_ADDR
(
macPib
.
sh‹tAddªss
);

327 
	`MAC_RADIO_SET_IEEE_ADDR
(
macPib
.
exãndedAddªss
.
addr
.
extAddr
);

331 
	`MAC_RADIO_TURN_ON_RX_FRAME_FILTERING
();

332 
	}
}

345 
MAC_INTERNAL_API
 
	$macRadioTu∫OffPowî
()

348 
	`MAC_MCU_RFERR_DISABLE_INTERRUPT
();

349 
	}
}

356 #i‡(
HAL_CPU_CLOCK_MHZ
 != 32)

360 #i‡(
MAC_RADIO_RECEIVER_SENSITIVITY_DBM
 > 
MAC_SPEC_MIN_RECEIVER_SENSITIVITY
)

364 #i‡
deföed
 (
HAL_PA_LNA
Ë&& deföed (
HAL_PA_LNA_CC2590
)

368 #i‡
deföed
 (
HAL_PA_LNA
Ë&& deföed (
MAC_RUNTIME_CC2591
)

372 #i‡
deföed
 (
HAL_PA_LNA_CC2590
Ë&& deföed (
MAC_RUNTIME_CC2590
)

376 #i‡
deföed
 (
CC2591_COMPRESSION_WORKAROUND
Ë&& !deföed (
HAL_PA_LNA
)

380 #i‡
deföed
 (
CC2591_COMPRESSION_WORKAROUND
)

	@Components/mac/low_level/srf04/single_chip/mac_radio_defs.h

40 #i‚de‡
MAC_RADIO_DEFS_H


41 
	#MAC_RADIO_DEFS_H


	)

47 
	~"hÆ_defs.h
"

48 
	~"hÆ_bﬂrd_cfg.h
"

49 
	~"hÆ_mac_cfg.h
"

50 
	~"mac_•ec.h
"

51 
	~"mac_mcu.h
"

52 
	~"mac_mem.h
"

53 
	~"mac_c•_tx.h
"

54 
	~"mac_as£π.h
"

55 
	~"mac_high_Àvñ.h
"

56 
	~"hÆ_¶ìp.h
"

65 
	#ISTXCAL
 0xEC

	)

66 
	#ISRXON
 0xE3

	)

67 
	#ISTXON
 0xE9

	)

68 
	#ISTXONCCA
 0xEA

	)

69 
	#ISRFOFF
 0xEF

	)

70 
	#ISFLUSHRX
 0xED

	)

71 
	#ISFLUSHTX
 0xEE

	)

72 
	#ISACK
 0xE6

	)

73 
	#ISACKPEND
 0xE7

	)

74 
	#ISNACK
 0xE8

	)

77 
	#FREQ_2405MHZ
 0x0B

	)

80 
	#TX_ACTIVE
 
	`BV
(1)

	)

81 
	#CCA
 
	`BV
(4)

	)

82 
	#SFD
 
	`BV
(5)

	)

83 
	#FIFOP
 
	`BV
(6)

	)

84 
	#FIFO
 
	`BV
(7)

	)

87 
	#RFERRIE
 
	`BV
(0)

	)

90 
	#RFIE
 
	`BV
(0)

	)

93 
	#FRMCTRL0_RESET_VALUE
 0x40

	)

94 
	#ENERGY_SCAN
 
	`BV
(4)

	)

95 
	#AUTOACK
 
	`BV
(5)

	)

96 
	#RX_MODE
(
x
Ë((xË<< 2)

	)

97 
	#RX_MODE_INFINITE_RECEPTION
 
	`RX_MODE
(2)

	)

98 
	#RX_MODE_NORMAL_OPERATION
 
	`RX_MODE
(0)

	)

101 
	#PENDING_OR
 
	`BV
(2)

	)

104 
	#PAN_COORDINATOR
 
	`BV
(1)

	)

105 
	#FRAME_FILTER_EN
 
	`BV
(0)

	)

107 
	#FRAME_VERSION
(
x
Ë((xË<< 2)

	)

108 
	#FRAME_FILTER_MAX_VERSION
 
	`FRAME_VERSION
(1)

	)

111 
	#PEND_DATAREQ_ONLY
 
	`BV
(2)

	)

112 
	#AUTOPEND
 
	`BV
(1)

	)

113 
	#SRC_MATCH_EN
 
	`BV
(0)

	)

116 
	#AUTOPEND_RES
 
	`BV
(6)

	)

119 
	#CORR_THR_SFD
 
	`BV
(5)

	)

120 
	#CORR_THR
 0x14

	)

123 
	#CCA_THR
 0xFC

	)

124 
	#CCA_THR_HGM
 0x06

	)

125 
	#CCA_THR_MINUS_20
 0x38

	)

128 
	#CCA_OTHER_MODE_11
 0x1A

	)

129 
	#CCA_OTHER_MODE_01
 0x0A

	)

132 
	#FSM_FFCTRL_STATE_RX_INF
 31

	)

135 
	#RCTRL1
 
	`BV
(3)

	)

136 
	#RCTRL0
 
	`BV
(2)

	)

137 
	#RCTRL_BITS
 (
RCTRL1
 | 
RCTRL0
)

	)

138 
	#RCTRL_CLOCK_LFSR
 
RCTRL0


	)

141 
	#CPU_CTRL
 
	`BV
(0)

	)

142 
	#CPU_CTRL_ON
 
CPU_CTRL


	)

143 
	#CPU_CTRL_OFF
 (!(
CPU_CTRL
))

	)

146 
	#TXFILTCFG
 
	`XREG
–0x61FA )

	)

147 
	#TXFILTCFG_RESET_VALUE
 0x09

	)

153 
	#MAC_RADIO_CC2530


	)

154 
	#MAC_RADIO_FEATURE_HARDWARE_OVERFLOW_NO_ROLLOVER


	)

161 
	#MAC_RADIO_CHANNEL_DEFAULT
 11

	)

162 
	#MAC_RADIO_CHANNEL_INVALID
 0xFF

	)

163 
	#MAC_RADIO_TX_POWER_INVALID
 0xFF

	)

165 
	#MAC_RADIO_RECEIVER_SENSITIVITY_DBM
 -97

	)

166 
	#MAC_RADIO_RECEIVER_SATURATION_DBM
 10

	)

171 #ifde‡
FEATURE_CC253X_LOW_POWER_RX


172 #unde‡
HAL_MAC_RSSI_OFFSET


173 
	#HAL_MAC_RSSI_OFFSET
 -61

	)

177 
	#MAC_RADIO_RSSI_OFFSET
 
HAL_MAC_RSSI_OFFSET


	)

179 #i‡
deföed
 
MAC_RUNTIME_CC2591
 || deföed 
MAC_RUNTIME_CC2590
 || \

180 
deföed
 
	gHAL_PA_LNA
 || deföed 
	gHAL_PA_LNA_CC2590


181 
	#MAC_RADIO_RSSI_LNA_OFFSET
(
x
Ë
	`°
–x +
macRadioDefsRssiAdj
[
macRadioDefsRefTabÀId
&0x0F]; )

	)

183 
	#MAC_RADIO_RSSI_LNA_OFFSET
(
x
)

	)

187 
	#MAC_RADIO_RX_TX_PROP_DELAY_MIN_USEC
 3.076

	)

188 
	#MAC_RADIO_RX_TX_PROP_DELAY_MAX_USEC
 3.284

	)

191 
	#MAC_RADIO_DEFS_TBL_TXPWR_FIRST_ENTRY
 0

	)

192 
	#MAC_RADIO_DEFS_TBL_TXPWR_LAST_ENTRY
 1

	)

193 
	#MAC_RADIO_DEFS_TBL_TXPWR_ENTRIES
 2

	)

196 
	#RFC_OBS_CTRL_PA_PD_INV
 0x68

	)

199 
	#RFC_OBS_CTRL_LNAMIX_PD_INV
 0x6A

	)

204 
	#RFC_OBS_CTRL_DEMOD_CCA
 0x0D

	)

207 
	#OBSSEL_OBS_CTRL0
 0xFB

	)

210 
	#OBSSEL_OBS_CTRL1
 0xFC

	)

217 
	#MAC_RADIO_MCU_INIT
(Ë
	`macMcuInô
()

	)

219 
	#MAC_RADIO_TURN_ON_POWER
(Ë
	`macRadioTu∫OnPowî
()

	)

220 
	#MAC_RADIO_TURN_OFF_POWER
(Ë
	`macRadioTu∫OffPowî
()

	)

221 
	#MAC_RADIO_TURN_ON_OSC
(Ë
	`MAC_ASSERT
(
SLEEPSTA
 & 
XOSC_STB
)

	)

222 
	#MAC_RADIO_TURN_OFF_OSC
(Ë

	)

224 
	#MAC_RADIO_RX_FIFO_HAS_OVERFLOWED
(Ë((
FSMSTAT1
 & 
FIFOP
Ë&& !(FSMSTAT1 & 
FIFO
))

	)

225 
	#MAC_RADIO_RX_FIFO_IS_EMPTY
(Ë(!(
FSMSTAT1
 & 
FIFO
Ë&& !(FSMSTAT1 & 
FIFOP
))

	)

227 
	#MAC_RADIO_SET_RX_THRESHOLD
(
x
Ë
	`°
–
FIFOPCTRL
 = ((x)-1); )

	)

228 
	#MAC_RADIO_RX_IS_AT_THRESHOLD
(Ë(
FSMSTAT1
 & 
FIFOP
)

	)

229 
	#MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT
(Ë
	`MAC_MCU_FIFOP_ENABLE_INTERRUPT
()

	)

230 
	#MAC_RADIO_DISABLE_RX_THRESHOLD_INTERRUPT
(Ë
	`MAC_MCU_FIFOP_DISABLE_INTERRUPT
()

	)

231 
	#MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG
(Ë
	`MAC_MCU_FIFOP_CLEAR_INTERRUPT
()

	)

233 
	#MAC_RADIO_TX_ACK
(Ë
	`MAC_RADIO_TURN_OFF_PENDING_OR
()

	)

234 
	#MAC_RADIO_TX_ACK_PEND
(Ë
	`MAC_RADIO_TURN_ON_PENDING_OR
()

	)

236 
	#MAC_RADIO_RX_ON
(Ë
	`°
–
RFST
 = 
ISRXON
; )

	)

237 
	#MAC_RADIO_RXTX_OFF
(Ë
	`°
–
RFST
 = 
ISRFOFF
; )

	)

238 
	#MAC_RADIO_FLUSH_RX_FIFO
(Ë
	`°
–
RFST
 = 
ISFLUSHRX
; RFST = ISFLUSHRX; )

	)

239 
	#MAC_RADIO_FLUSH_TX_FIFO
(Ë
	`°
–
RFST
 = 
ISFLUSHTX
; )

	)

241 
	#MAC_RADIO_READ_RX_FIFO
(
pD©a
,
Àn
Ë
	`macMemRódRxFifo
(’D©a),(
uöt8
)÷í))

	)

242 
	#MAC_RADIO_WRITE_TX_FIFO
(
pD©a
,
Àn
Ë
	`macMemWrôeTxFifo
(’D©a),(
uöt8
)÷í))

	)

244 
	#MAC_RADIO_SET_PAN_COORDINATOR
(
b
Ë
	`°
–
FRMFILT0
 = (FRMFILT0 & ~
PAN_COORDINATOR
Ë| (PAN_COORDINATOR * (b!=0)); )

	)

245 
	#MAC_RADIO_SET_CHANNEL
(
x
Ë
	`°
–
FREQCTRL
 = 
FREQ_2405MHZ
 + 5 * ((xË- 11); )

	)

246 
	#MAC_RADIO_SET_TX_POWER
(
x
Ë
	`°
–
TXPOWER
 = x; )

	)

248 
	#MAC_RADIO_SET_PAN_ID
(
x
Ë
	`°
–
PAN_ID0
 = (xË& 0xFF; 
PAN_ID1
 = (xË>> 8; )

	)

249 
	#MAC_RADIO_SET_SHORT_ADDR
(
x
Ë
	`°
–
SHORT_ADDR0
 = (xË& 0xFF; 
SHORT_ADDR1
 = (xË>> 8; )

	)

250 
	#MAC_RADIO_SET_IEEE_ADDR
(
p
Ë
	`macMemWrôeRam
((
macRam_t
 *Ë&
EXT_ADDR0
,Ö, 8)

	)

252 
	#MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK
(Ë
	`°
–
	`MAC_MCU_TXACKDONE_CLEAR_INTERRUPT
(); 
	`MAC_MCU_TXACKDONE_ENABLE_INTERRUPT
(); )

	)

253 
	#MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK
(Ë
	`MAC_MCU_TXACKDONE_DISABLE_INTERRUPT
()

	)

255 
	#MAC_RADIO_RANDOM_BYTE
(Ë
	`macMcuR™domByã
()

	)

256 
	#MAC_RADIO_RANDOM_WORD
(Ë
	`macMcuR™domW‹d
()

	)

258 
	#MAC_RADIO_TX_RESET
(Ë
	`macC•TxRe£t
()

	)

259 
	#MAC_RADIO_TX_PREP_CSMA_UNSLOTTED
(Ë
	`macC•TxPªpCsmaUn¶Ÿãd
()

	)

260 
	#MAC_RADIO_TX_PREP_CSMA_SLOTTED
(Ë
	`macC•TxPªpCsmaSlŸãd
()

	)

261 
	#MAC_RADIO_TX_PREP_SLOTTED
(Ë
	`macC•TxPªpSlŸãd
()

	)

262 
	#MAC_RADIO_TX_GO_CSMA
(Ë
	`macC•TxGoCsma
()

	)

263 
	#MAC_RADIO_TX_GO_SLOTTED
(Ë
	`macC•TxGoSlŸãd
()

	)

264 
	#MAC_RADIO_TX_GO_SLOTTED_CSMA
(Ë
	`macC•TxGoCsma
()

	)

266 
	#MAC_RADIO_FORCE_TX_DONE_IF_PENDING
(Ë
	`macC•F‹˚TxD⁄eIfPídög
()

	)

268 
	#MAC_RADIO_TX_REQUEST_ACK_TIMEOUT_CALLBACK
(Ë
	`macC•TxReque°AckTimeoutCÆlback
()

	)

269 
	#MAC_RADIO_TX_CANCEL_ACK_TIMEOUT_CALLBACK
(Ë
	`macC•TxC™˚lAckTimeoutCÆlback
()

	)

271 
	#MAC_RADIO_TIMER_TICKS_PER_USEC
(Ë
HAL_CPU_CLOCK_MHZ


	)

272 
	#MAC_RADIO_TIMER_TICKS_PER_BACKOFF
(Ë(
HAL_CPU_CLOCK_MHZ
 * 
MAC_SPEC_USECS_PER_BACKOFF
)

	)

273 
	#MAC_RADIO_TIMER_TICKS_PER_SYMBOL
(Ë(
HAL_CPU_CLOCK_MHZ
 * 
MAC_SPEC_USECS_PER_SYMBOL
)

	)

275 
	#MAC_RADIO_TIMER_CAPTURE
(Ë
	`macMcuTimîC≠tuª
()

	)

276 
	#MAC_RADIO_TIMER_FORCE_DELAY
(
x
Ë
	`macMcuTimîF‹˚Dñay
(x)

	)

278 
	#MAC_RADIO_TIMER_SLEEP
(Ë
	`°
–
T2CTRL
 &~
TIMER2_RUN
; T2CTRL & 
TIMER2_STATE
); )

	)

279 
	#MAC_RADIO_TIMER_WAKE_UP
(Ë
	`°
–
	`HAL_CLOCK_STABLE
(); \

280 
T2CTRL
 |(
TIMER2_RUN
 | 
TIMER2_SYNC
); \

281 !(
T2CTRL
 & 
TIMER2_STATE
)); )

	)

283 
	#MAC_RADIO_BACKOFF_COUNT
(Ë
	`macMcuOvîÊowCou¡
()

	)

284 
	#MAC_RADIO_BACKOFF_CAPTURE
(Ë
	`macMcuOvîÊowC≠tuª
()

	)

285 
	#MAC_RADIO_BACKOFF_SET_COUNT
(
x
Ë
	`macMcuOvîÊowSëCou¡
(x)

	)

286 
	#MAC_RADIO_BACKOFF_SET_COMPARE
(
x
Ë
	`macMcuOvîÊowSëCom∑ª
(x)

	)

288 
	#MAC_RADIO_BACKOFF_COMPARE_CLEAR_INTERRUPT
(Ë
	`°
–
T2IRQF
 = ~
TIMER2_OVF_COMPARE1F
; )

	)

289 
	#MAC_RADIO_BACKOFF_COMPARE_ENABLE_INTERRUPT
(Ë
	`°
–
T2IRQM
 |
TIMER2_OVF_COMPARE1M
; )

	)

290 
	#MAC_RADIO_BACKOFF_COMPARE_DISABLE_INTERRUPT
(Ë
	`°
–
T2IRQM
 &~
TIMER2_OVF_COMPARE1M
; )

	)

292 
	#MAC_RADIO_BACKOFF_SET_PERIOD
(
x
Ë
	`macMcuOvîÊowSëPîiod
(x)

	)

293 
	#MAC_RADIO_BACKOFF_PERIOD_CLEAR_INTERRUPT
(Ë
	`°
–
T2IRQF
 = ~
TIMER2_OVF_PERF
; )

	)

294 
	#MAC_RADIO_BACKOFF_PERIOD_ENABLE_INTERRUPT
(Ë
	`°
–
T2IRQM
 |
TIMER2_OVF_PERM
; )

	)

295 
	#MAC_RADIO_BACKOFF_PERIOD_DISABLE_INTERRUPT
(Ë
	`°
–
T2IRQM
 &~
TIMER2_OVF_PERM
; )

	)

297 
	#MAC_RADIO_RECORD_MAX_RSSI_START
(Ë
	`macMcuRec‹dMaxRssiSèπ
()

	)

298 
	#MAC_RADIO_RECORD_MAX_RSSI_STOP
(Ë
	`macMcuRec‹dMaxRssiSt›
()

	)

300 
	#MAC_RADIO_TURN_ON_RX_FRAME_FILTERING
(Ë
	`°
–
FRMFILT0
 = 0; \

301 
FRMFILT0
 |(
FRAME_FILTER_EN
 | 
FRAME_FILTER_MAX_VERSION
); )

	)

302 
	#MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING
(Ë
	`°
–
FRMFILT0
 &~
FRAME_FILTER_EN
; )

	)

306 
	#MAC_RADIO_TURN_ON_AUTO_ACK
(Ë
	`°
–
FRMCTRL0
 |
AUTOACK
; )

	)

307 
	#MAC_RADIO_CANCEL_TX_ACK
(Ë
	`°
–
RFST
 = 
ISNACK
; )

	)

309 
	#MAC_RADIO_TURN_ON_SRC_MATCH
(Ë
	`°
–
SRCMATCH
 |
SRC_MATCH_EN
; )

	)

310 
	#MAC_RADIO_TURN_ON_AUTOPEND
(Ë
	`°
–
SRCMATCH
 |
AUTOPEND
; )

	)

311 
	#MAC_RADIO_IS_AUTOPEND_ON
(Ë–
SRCMATCH
 & 
AUTOPEND
 )

	)

312 
	#MAC_RADIO_SRC_MATCH_RESINDEX
(
p
Ë
	`°
–∞
SRCRESINDEX
; )

	)

314 
	#MAC_RADIO_TURN_ON_PENDING_OR
(Ë
	`°
–
FRMCTRL1
 |
PENDING_OR
; )

	)

315 
	#MAC_RADIO_TURN_OFF_PENDING_OR
(Ë
	`°
–
FRMCTRL1
 &~
PENDING_OR
; )

	)

317 
	#MAC_RADIO_SRC_MATCH_GET_EN
(Ë
	`macSrcM©chGëE«bÀBô
()

	)

318 
	#MAC_RADIO_SRC_MATCH_GET_PENDEN
(Ë
	`macSrcM©chGëPídEnBô
()

	)

320 
	#MAC_RADIO_GET_SRC_SHORTPENDEN
(
p
Ë
	`macMemRódRam
–(
uöt8
*)&
SRCSHORTPENDEN0
, (p), 3 )

	)

321 
	#MAC_RADIO_GET_SRC_EXTENPEND
(
p
Ë
	`macMemRódRam
–(
uöt8
*)&
SRCEXTPENDEN0
, (p), 3 )

	)

322 
	#MAC_RADIO_GET_SRC_SHORTEN
(
p
Ë
	`macMemRódRam
–(
uöt8
*)&
SRCSHORTEN0
, (p), 3 )

	)

323 
	#MAC_RADIO_GET_SRC_EXTEN
(
p
Ë
	`macMemRódRam
–(
uöt8
*)&
SRCEXTEN0
, (p), 3 )

	)

325 
	#MAC_RADIO_SRC_MATCH_SET_SHORTPENDEN
(
p
Ë
	`macMemWrôeRam
–(
uöt8
*)&
SRCSHORTPENDEN0
, (p), 3 )

	)

326 
	#MAC_RADIO_SRC_MATCH_SET_EXTPENDEN
(
p
Ë
	`macMemWrôeRam
–(
uöt8
*)&
SRCEXTPENDEN0
, (p), 3 )

	)

327 
	#MAC_RADIO_SRC_MATCH_SET_SHORTEN
(
x
Ë
	`oßl_buf„r_uöt24
–(
uöt8
*)&
SRCSHORTEN0
, (xË)

	)

328 
	#MAC_RADIO_SRC_MATCH_SET_EXTEN
(
x
Ë
	`oßl_buf„r_uöt24
–(
uöt8
*)&
SRCEXTEN0
, (xË)

	)

329 
	#MAC_RADIO_SRC_MATCH_RESULT
(Ë
	`MAC_SrcM©chCheckResu…
()

	)

331 
	#MAC_RADIO_SRC_MATCH_INIT_EXTPENDEN
(Ë
	`°
–
SRCEXTPENDEN0
 = 0; \

332 
SRCEXTPENDEN1
 = 0; \

333 
SRCEXTPENDEN2
 = 0; )

	)

334 
	#MAC_RADIO_SRC_MATCH_INIT_SHORTPENDEN
(Ë
	`°
–
SRCSHORTPENDEN0
 = 0; \

335 
SRCSHORTPENDEN1
 = 0; \

336 
SRCSHORTPENDEN2
 = 0; )

	)

338 
	#MAC_RADIO_SRC_MATCH_TABLE_WRITE
(
off£t
, 
p
, 
Àn
Ë
	`macMemWrôeRam
–(
macRam_t
 *)(
SRC_ADDR_TABLE
 + (off£t)), (p), (ÀnË)

	)

339 
	#MAC_RADIO_SRC_MATCH_TABLE_READ
(
off£t
, 
p
, 
Àn
Ë
	`macMemRódRam
–
SRC_ADDR_TABLE
 + (off£t), (p), (Àn))

	)

343 
	#HAL_PA_LNA_RX_HGM
(Ë
	`°
–
P0_7
 = 1; )

	)

344 
	#HAL_PA_LNA_RX_LGM
(Ë
	`°
–
P0_7
 = 0; )

	)

346 #ifde‡
CC2591_COMPRESSION_WORKAROUND


351 
	#COMPRESSION_WORKAROUND_ON
(Ë
	`°
–
CCACTRL0
 = 
CCA_THR_MINUS_20
; \

352 
CCACTRL1
 = 
CCA_OTHER_MODE_01
; \

353 
FRMCTRL0
 |
ENERGY_SCAN
; \

354 
RFC_OBS_CTRL1
 = 
RFC_OBS_CTRL_DEMOD_CCA
; \

355 
OBSSEL4
 = 
OBSSEL_OBS_CTRL1
; )

	)

357 
	#COMPRESSION_WORKAROUND_OFF
(Ë
	`°
–
CCACTRL0
 = 
CCA_THR
; \

358 
CCACTRL1
 = 
CCA_OTHER_MODE_11
; \

359 
FRMCTRL0
 &~
ENERGY_SCAN
; \

360 
RFC_OBS_CTRL1
 = 
RFC_OBS_CTRL_LNAMIX_PD_INV
; \

361 
OBSSEL4
 = 
OBSSEL_OBS_CTRL1
; )

	)

363 
	#COMPRESSION_WORKAROUND_RESET_RSSI
(Ë
	`°
–
FRMCTRL0
 &~
ENERGY_SCAN
; \

364 
	`asm
("NOP"); \

365 
	`asm
("NOP"); \

366 
FRMCTRL0
 |
ENERGY_SCAN
; )

	)

369 
	#COMPRESSION_WORKAROUND_ON
(Ë

	)

370 
	#COMPRESSION_WORKAROUND_OFF
(Ë

	)

371 
	#COMPRESSION_WORKAROUND_RESET_RSSI
(Ë

	)

378 
uöt8
 
macRadioDefsRefTabÀId
;

379 c⁄° 
uöt8
 
CODE
 *c⁄° CODE 
macRadioDefsTxPwrTabÀs
[];

380 c⁄° 
öt8
 
CODE
 
macRadioDefsRssiAdj
[];

381 c⁄° 
uöt8
 
CODE
 
macRadioDefsTxPwrB¨e
[];

384 
MAC_INTERNAL_API
 
macRadioTu∫OnPowî
();

385 
MAC_INTERNAL_API
 
macRadioTu∫OffPowî
();

	@Components/mac/low_level/srf04/single_chip/mac_rffrontend.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_bﬂrd_cfg.h
"

46 
	~"hÆ_as£π.h
"

47 
	~"mac_≠i.h
"

48 
	~"mac_ødio_defs.h
"

57 
	#MAC_CC2591_TX_PWR_TABLE_IDX
 1

	)

58 
	#MAC_CC2590_TX_PWR_TABLE_IDX
 2

	)

59 
	#MAC_CC2591_HGM_RSSI_ADJ_IDX
 1

	)

60 
	#MAC_CC2591_LGM_RSSI_ADJ_IDX
 2

	)

61 
	#MAC_CC2590_HGM_RSSI_ADJ_IDX
 3

	)

62 
	#MAC_CC2590_LGM_RSSI_ADJ_IDX
 4

	)

73 
MAC_RfFr⁄ãndSëup
();

85 
	$MAC_RfFr⁄ãndSëup
()

90 
	`HAL_PA_LNA_RX_HGM
();

94 
CCACTRL0
 = 
CCA_THR_HGM
;

97 
	`MAC_SëRadioRegTabÀ
(
MAC_CC2591_TX_PWR_TABLE_IDX
, 
MAC_CC2591_HGM_RSSI_ADJ_IDX
);

98 
	}
}

	@Components/mt/DebugTrace.c

43 #i‡
deföed
–
MT_TASK
 ) || deföed–
APP_DEBUG
 )

48 
	~"ZComDef.h
"

49 
	~"OSAL.h
"

50 
	~"MT.h
"

51 
	~"MT_TASK.h
"

52 
	~"MT_DEBUG.h
"

53 
	~"DebugTø˚.h
"

55 #i‡
deföed
 ( 
APP_DEBUG
 )

56 
	~"DebugAµ.h
"

115 
	$debug_msg
–
byã
 
compID
, byã 
£vîôy
, byã 
numP¨ams
, 
UINT16
 
∑øm1
,

116 
UINT16
 
∑øm2
, UINT16 
∑øm3
 )

119 
mtDebugMsg_t
 *
mtDebugMsg
;

120 
UINT16
 
time°amp
;

122 i‡–
debugThªshﬁd
 =0 || 
debugCompId
 !
compID
 )

126 
time°amp
 = 0;

129 
mtDebugMsg
 = (
mtDebugMsg_t
 *)
	`oßl_msg_Æloˇã
( ( mtDebugMsg_t ) );

130 i‡–
mtDebugMsg
 )

132 
mtDebugMsg
->
hdr
.
evít
 = 
CMD_DEBUG_MSG
;

133 
mtDebugMsg
->
compID
 = compID;

134 
mtDebugMsg
->
£vîôy
 = severity;

135 
mtDebugMsg
->
numP¨ams
 =ÇumParams;

137 
mtDebugMsg
->
∑øm1
 =Öaram1;

138 
mtDebugMsg
->
∑øm2
 =Öaram2;

139 
mtDebugMsg
->
∑øm3
 =Öaram3;

140 
mtDebugMsg
->
time°amp
 =Åimestamp;

142 
	`oßl_msg_£nd
–
MT_TaskID
, (
uöt8
 *)
mtDebugMsg
 );

145 
	}
}

163 
	$debug_°r
–
byã
 *
°r_±r
 )

165 
mtDebugSå_t
 *
msg
;

166 
byã
 
m 
;

167 
byã
 
°rLí
;

170 
°rLí
 = (
byã
)
	`oßl_°æí
–(*)
°r_±r
 );

173 
m 
 =  ( 
mtDebugSå_t
 ) + 
°rLí
;

176 
msg
 = (
mtDebugSå_t
 *)
	`oßl_msg_Æloˇã
–
m 
 );

177 i‡–
msg
 )

180 
msg
->
hdr
.
evít
 = 
CMD_DEBUG_STR
;

181 
msg
->
°rLí
 = strLen;

184 
msg
->
pSåög
 = (
uöt8
 *)(msg+1);

185 
	`oßl_mem˝y
 ( 
msg
->
pSåög
, 
°r_±r
, 
°rLí
 );

187 
	`oßl_msg_£nd
–
MT_TaskID
, (
uöt8
 *)
msg
 );

189 
	}
}

	@Components/mt/DebugTrace.h

42 #i‚de‡
DEBUGTRACE_H


43 
	#DEBUGTRACE_H


	)

45 #ifde‡
__˝lu•lus


63 
	#CMDID_RTG_ADD
 1

	)

64 
	#CMDID_RTG_EXP
 0x81

	)

65 
	#CMDID_RREQ_SEND
 2

	)

66 
	#CMDID_RREQ_DROP
 0x82

	)

67 
	#CMDID_RREP_SEND
 3

	)

68 
	#CMDID_RREP_DROP
 0x83

	)

69 
	#CMDID_RREQ_EXP
 4

	)

71 
	#CMDID_DATA_SEND
 6

	)

72 
	#CMDID_DATA_FORWARD
 7

	)

73 
	#CMDID_DATA_RECEIVE
 8

	)

75 
	#CMDID_BCAST_RCV
 0x10

	)

76 
	#CMDID_BCAST_ACK
 0x11

	)

77 
	#CMDID_BCAST_RETX
 0x12

	)

79 
	#CMDID_BCAST_EXP
 0x13

	)

80 
	#CMDID_BCAST_ERR
 0x15

	)

82 
	#WPRINTSTR
–
s
 )

	)

84 #i‡
deföed
 ( 
MT_TASK
 )

90 
	#TRACE_MSG
–
compID
, 
nP¨ams
, 
p1
, 
p2
, 
p3
 ) 
	`debug_msg
–compID, 
SEVERITY_TRACE
,ÇP¨ams,Ö1,Ö2,Ö3 )

	)

98 
	#DEBUG_INFO
–
compID
, 
subCompID
, 
nP¨ams
, 
p1
, 
p2
, 
p3
 ) 
	`debug_msg
–compID, subCompID,ÇP¨ams,Ö1,Ö2,Ö3 )

	)

102 
	#DBG_NWK_STARTUP
 
	`debug_msg
–
COMPID_TEST_NWK_STARTUP
, 
SEVERITY_INFORMATION
, 0, 0, 0, 0 )

	)

103 
	#DBG_SCAN_CONFIRM
 
	`debug_msg
–
COMPID_TEST_SCAN_CONFIRM
, 
SEVERITY_INFORMATION
, 0, 0, 0, 0 )

	)

104 
	#DBG_ASSOC_CONFIRM
 
	`debug_msg
–
COMPID_TEST_ASSOC_CONFIRM
, 
SEVERITY_INFORMATION
, 0, 0, 0, 0 )

	)

105 
	#DBG_REMOTE_DATA_CONFIRM
 
	`debug_msg
–
COMPID_TEST_REMOTE_DATA_CONFIRM
, 
SEVERITY_INFORMATION
, 0, 0, 0, 0 )

	)

109 
	#TRACE_MSG
–
compID
, 
nP¨ams
, 
p1
, 
p2
, 
p3
 )

	)

110 
	#DEBUG_INFO
–
compID
, 
subCompID
, 
nP¨ams
, 
p1
, 
p2
, 
p3
 )

	)

111 
	#DBG_NWK_STARTUP


	)

112 
	#DBG_SCAN_CONFIRM


	)

113 
	#DBG_ASSOC_CONFIRM


	)

114 
	#DBG_REMOTE_DATA_CONFIRM


	)

122 
	#SEVERITY_CRITICAL
 0x01

	)

123 
	#SEVERITY_ERROR
 0x02

	)

124 
	#SEVERITY_INFORMATION
 0x03

	)

125 
	#SEVERITY_TRACE
 0x04

	)

127 
	#NO_PARAM_DEBUG_LEN
 5

	)

145 
debug_msg
–
uöt8
 
compID
, uöt8 
£vîôy
, uöt8 
numP¨ams
,

146 
uöt16
 
∑øm1
, uöt16 
∑øm2
, uöt16 
∑øm3
 );

148 
debug_°r
–
uöt8
 *
°r_±r
 );

153 #ifde‡
__˝lu•lus


	@Components/mt/MT.c

46 
	~"ZComDef.h
"

47 
	~"MT.h
"

48 
	~"MT_APP.h
"

49 
	~"MT_DEBUG.h
"

50 
	~"MT_UTIL.h
"

51 
	~"MT_SYS.h
"

53 
	~"OnBﬂrd.h
"

54 
	~"OSAL.h
"

55 
	~"OSAL_Mem‹y.h
"

56 
	~"OSAL_Nv.h
"

58 
	~"DebugTø˚.h
"

59 
	~"ZMAC.h
"

61 #i‡!
deföed
 ( 
NONWK
 )

62 
	~"NLMEDE.h
"

63 
	~"nwk_bufs.h
"

64 
	~"ZDObje˘.h
"

65 
	~"s•.h
"

66 
	~"nwk_utû.h
"

67 
	~"AF.h
"

68 
	~"MT_SAPI.h
"

71 #i‡
deföed
–
MT_MAC_FUNC
 ) || deföed–
MT_MAC_CB_FUNC
 )

72 
	~"MT_MAC.h
"

74 #i‡
deföed
–
MT_NWK_FUNC
 ) || deföed–
MT_NWK_CB_FUNC
 )

75 
	~"MT_NWK.h
"

76 
	~"nwk.h
"

77 
	~"nwk_bufs.h
"

79 #i‡
deföed
–
MT_AF_FUNC
 ) || deföed–
MT_AF_CB_FUNC
 )

80 
	~"MT_AF.h
"

82 #i‡
deföed
–
MT_USER_TEST_FUNC
 )

83 
	~"AF.h
"

85 #i‡
deföed
–
MT_ZDO_FUNC
 )

86 
	~"MT_ZDO.h
"

88 #i‡
deföed
 (
MT_SAPI_FUNC
)

89 
	~"MT_SAPI.h
"

91 #i‡
deföed
 (
MT_OTA_FUNC
)

92 
	~"MT_OTA.h
"

95 #i‡
deföed
–
APP_TP
 )

96 
	~"Te°Profûe.h
"

98 #i‡
deföed
–
APP_TP2
 )

99 
	~"Te°Profûe2.h
"

102 #i‡
deföed
(
APP_TGEN
)

103 
	~"TøfficGíAµ.h
"

105 #i‡
deföed
(
APP_DEBUG
)

106 
	~"DebugAµ.h
"

108 #i‡
deföed
 (
NWK_TEST
)

109 
	~"HWTTAµ.h
"

113 
	~"hÆ_u¨t.h
"

114 
	~"hÆ_Àd.h
"

115 
	~"hÆ_key.h
"

116 
	~"MT_UART.h
"

122 
mtPro˚ssMsg_t
 
	gmtPro˚ssIncomög
[] =

124 
NULL
,

126 #i‡
deföed
 (
MT_SYS_FUNC
)

127 
MT_SysComm™dPro˚ssög
,

129 
NULL
,

132 #i‡
deföed
 (
MT_MAC_FUNC
)

133 
MT_MacComm™dPro˚ssög
,

135 
NULL
,

138 #i‡
deföed
 (
MT_NWK_FUNC
)

139 
MT_NwkComm™dPro˚ssög
,

141 
NULL
,

144 #i‡
deföed
 (
MT_AF_FUNC
)

145 
MT_AfComm™dPro˚ssög
,

147 
NULL
,

150 #i‡
deföed
 (
MT_ZDO_FUNC
)

151 
MT_ZdoComm™dPro˚ssög
,

153 
NULL
,

156 #i‡
deföed
 (
MT_SAPI_FUNC
)

157 
MT_S≠iComm™dPro˚ssög
,

159 
NULL
,

162 #i‡
deföed
 (
MT_UTIL_FUNC
)

163 
MT_UtûComm™dPro˚ssög
,

165 
NULL
,

168 #i‡
deföed
 (
MT_DEBUG_FUNC
)

169 
MT_DebugComm™dPro˚ssög
,

171 
NULL
,

174 #i‡
deföed
 (
MT_APP_FUNC
)

175 
MT_AµComm™dPro˚ssög
,

177 
NULL
,

180 #i‡
deföed
 (
MT_OTA_FUNC
)

181 
MT_OèComm™dPro˚ssög
,

183 
NULL
,

191 
byã
 
	gdebugThªshﬁd
;

192 
byã
 
	gdebugCompId
;

198 
MT_MsgQueueInô
( );

199 
MT_Re£tMsgQueue
( );

200 
byã
 
MT_QueueMsg
–byã *
msg
 , byã 
Àn
 );

201 
MT_Pro˚ssQueue
( );

203 #i‡
deföed
 ( 
MT_USER_TEST_FUNC
 )

204 
MT_Pro˚ssAµU£rCmd
–
byã
 *
pD©a
 );

229 
	$MT_Inô
()

231 #i‡
	`deföed
 (
MT_ZDO_FUNC
)

232 
	`MT_ZdoInô
();

234 
	`MT_SysRe£tInd
();

235 
	}
}

251 
	$MT_BuûdSPIMsg
–
uöt8
 
cmdTy≥
, uöt8 
cmdId
, 
byã
 *
msg
, byã 
d©aLí
, byã *
pD©a
 )

254 *
msg
++ = 
d©aLí
;

255 *
msg
++ = 
cmdTy≥
;

256 *
msg
++ = 
cmdId
;

259 i‡–
pD©a
 )

261 
	`oßl_mem˝y
–
msg
, 
pD©a
, 
d©aLí
 );

263 
	}
}

276 
	$MT_BuûdAndSídZToﬁRe•⁄£
(
uöt8
 
cmdTy≥
, uöt8 
cmdId
, uöt8 
d©aLí
, uöt8 *
pD©a
)

278 
uöt8
 *
msg_±r
;

281 
msg_±r
 = 
	`MT_Tøn•‹tAŒoc
((
mtRpcCmdTy≥_t
)(
cmdTy≥
 & 0xE0), 
d©aLí
);

283 i‡(
msg_±r
)

286 
	`MT_BuûdSPIMsg
(
cmdTy≥
, 
cmdId
, 
msg_±r
, 
d©aLí
, 
pD©a
);

288 
	`MT_Tøn•‹tSíd
(
msg_±r
);

290 
	}
}

301 
	$MT_Pro˚ssIncomög
(
uöt8
 *
pBuf
)

303 
mtPro˚ssMsg_t
 
func
;

304 
uöt8
 
r•
[
MT_RPC_FRAME_HDR_SZ
];

307 
r•
[1] = 
pBuf
[
MT_RPC_POS_CMD0
];

308 
r•
[2] = 
pBuf
[
MT_RPC_POS_CMD1
];

311 i‡(
pBuf
[
MT_RPC_POS_LEN
] > 
MT_RPC_DATA_MAX
)

313 
r•
[0] = 
MT_RPC_ERR_LENGTH
;

316 i‡((
r•
[1] & 
MT_RPC_SUBSYSTEM_MASK
Ë< 
MT_RPC_SYS_MAX
)

319 
func
 = 
mtPro˚ssIncomög
[
r•
[1] & 
MT_RPC_SUBSYSTEM_MASK
];

320 i‡(
func
)

323 
r•
[0] = (*
func
)(
pBuf
);

327 
r•
[0] = 
MT_RPC_ERR_SUBSYSTEM
;

332 
r•
[0] = 
MT_RPC_ERR_SUBSYSTEM
;

336 i‡((
r•
[0] !
MT_RPC_SUCCESS
Ë&& (‘•[1] & 
MT_RPC_CMD_TYPE_MASK
Ë=
MT_RPC_CMD_SREQ
))

338 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_RES0
), 0,

339 
MT_RPC_FRAME_HDR_SZ
, 
r•
);

341 
	}
}

354 
	$MTPro˚ssAµR•Msg
–
byã
 *
pD©a
, byã 
Àn
 )

357 
	`MT_BuûdAndSídZToﬁRe•⁄£
–((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_APP
), 
MT_APP_RSP
, 
Àn
, 
pD©a
 );

358 
	}
}

373 
	$MT_Revî£Byãs
–
byã
 *
pD©a
, byã 
Àn
 )

375 
byã
 
i
,
j
;

376 
byã
 
ãmp
;

378  
i
 = 0, 
j
 = 
Àn
-1;Üen > 1;Üen-=2 )

380 
ãmp
 = 
pD©a
[
i
];

381 
pD©a
[
i
++] =ÖD©a[
j
];

382 
pD©a
[
j
--] = 
ãmp
;

384 
	}
}

398 
uöt8
 *
	$MT_W‹d2Buf
–
uöt8
 *
pBuf
, 
uöt16
 *
pW‹d
, uöt8 
Àn
 )

400  
Àn
-- > 0 )

402 *
pBuf
++ = 
	`LO_UINT16
–*
pW‹d
 );

403 *
pBuf
++ = 
	`HI_UINT16
–*
pW‹d
 );

404 
pW‹d
++;

407  
pBuf
;

408 
	}
}

409 #i‡!
deföed
(
NONWK
)

419 
uöt8
 
	$MT_BuûdEndpoötDesc
–
uöt8
 *
pBuf
, *
∑øm
 )

421 
uöt8
 
i
;

422 
uöt8
 
ªt
 = 
ZSuc˚ss
;

423 
ídPoötDesc_t
 *
ïDesc
;

425 
ïDesc
 = (
ídPoötDesc_t
 *)
∑øm
;

427 i‡–
	`afFödEndPoötDesc
–*
pBuf
 ) !
NULL
 )

429 
ªt
 = 
ZApsDu∂iˇãE¡ry
;

431 i‡–
ïDesc
 )

433 
ïDesc
->
ídPoöt
 = *
pBuf
;

436 
ïDesc
->
œãncyReq
 = 
noL©ícyReqs
;

439 
ïDesc
->
sim∂eDesc
 = (
Sim∂eDes¸ùti⁄F‹m©_t
 *Ë
	`oßl_mem_Æloc
((SimpleDescriptionFormat_t));

440 i‡(
ïDesc
->
sim∂eDesc
)

443 
ïDesc
->
sim∂eDesc
->
EndPoöt
 = *
pBuf
++;

446 
ïDesc
->
sim∂eDesc
->
AµProfId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

447 
pBuf
 +(
uöt16
);

450 
ïDesc
->
sim∂eDesc
->
AµDevi˚Id
 = 
	`BUILD_UINT16
(
pBuf
[0],pBuf[1]);

451 
pBuf
 +(
uöt16
);

454 
ïDesc
->
sim∂eDesc
->
AµDevVî
 = (*
pBuf
++Ë& 
AF_APP_DEV_VER_MASK
 ;

457 
pBuf
++;

460 
ïDesc
->
sim∂eDesc
->
AµNumInClu°îs
 = *
pBuf
++;

461 i‡(
ïDesc
->
sim∂eDesc
->
AµNumInClu°îs
)

463 
ïDesc
->
sim∂eDesc
->
pAµInClu°îLi°
 = (
uöt16
 *)

464 
	`oßl_mem_Æloc
((
ïDesc
->
sim∂eDesc
->
AµNumInClu°îs
)*(
uöt16
));

465 i‡–
ïDesc
->
sim∂eDesc
->
pAµInClu°îLi°
 )

467 
i
=0; i<(
ïDesc
->
sim∂eDesc
->
AµNumInClu°îs
); i++)

469 
ïDesc
->
sim∂eDesc
->
pAµInClu°îLi°
[
i
] = 
	`BUILD_UINT16
(*
pBuf
, *(pBuf+1));

470 
pBuf
 += 2;

475 
ªt
 = 
ZMemEº‹
;

480 
ïDesc
->
sim∂eDesc
->
AµNumOutClu°îs
 = *
pBuf
++;

481 i‡(
ïDesc
->
sim∂eDesc
->
AµNumOutClu°îs
)

483 
ïDesc
->
sim∂eDesc
->
pAµOutClu°îLi°
 = (
uöt16
 *)

484 
	`oßl_mem_Æloc
((
ïDesc
->
sim∂eDesc
->
AµNumOutClu°îs
)*(
uöt16
));

485 i‡(
ïDesc
->
sim∂eDesc
->
pAµOutClu°îLi°
)

487 
i
=0; i<(
ïDesc
->
sim∂eDesc
->
AµNumOutClu°îs
); i++)

489 
ïDesc
->
sim∂eDesc
->
pAµOutClu°îLi°
[
i
] = 
	`BUILD_UINT16
(*
pBuf
, *(pBuf+1));

490 
pBuf
 += 2;

495 
ªt
 = 
ZMemEº‹
;

500 i‡–
ªt
 =
ZMemEº‹
 )

502 i‡(
ïDesc
->
sim∂eDesc
->
pAµInClu°îLi°
)

504 
	`oßl_mem_‰ì
(
ïDesc
->
sim∂eDesc
->
pAµInClu°îLi°
);

507 i‡(
ïDesc
->
sim∂eDesc
->
AµNumOutClu°îs
)

509 
	`oßl_mem_‰ì
(
ïDesc
->
sim∂eDesc
->
pAµOutClu°îLi°
);

512 
	`oßl_mem_‰ì
(
ïDesc
->
sim∂eDesc
);

517 
ªt
 = 
ZMemEº‹
;

521  
ªt
;

522 
	}
}

	@Components/mt/MT.h

39 #i‚de‡
MT_H


40 
	#MT_H


	)

42 #ifde‡
__˝lu•lus


51 
	~"MT_RPC.h
"

52 
	~"ZComDef.h
"

62 
	#ZTEST_DEFAULT_PARAM_LEN
 0x10

63 
	#ZTEST_DEFAULT_ADDR_LEN
 0x08

64 
	#ZTEST_DEFAULT_DATA_LEN
 0x66

65 
	#ZTEST_DEFAULT_AF_DATA_LEN
 0x20

66 
	#ZTEST_DEFAULT_SEC_LEN
 0x0B

	)

67 
	#ZTEST_DEFAULT_SEC_PARAM_LEN
 0x1C

68 

	)

74 
	#MT_SYS_RESET_REQ
 0x00

	)

77 
	#MT_SYS_PING
 0x01

	)

78 
	#MT_SYS_VERSION
 0x02

	)

79 
	#MT_SYS_SET_EXTADDR
 0x03

	)

80 
	#MT_SYS_GET_EXTADDR
 0x04

	)

81 
	#MT_SYS_RAM_READ
 0x05

	)

82 
	#MT_SYS_RAM_WRITE
 0x06

	)

83 
	#MT_SYS_OSAL_NV_ITEM_INIT
 0x07

	)

84 
	#MT_SYS_OSAL_NV_READ
 0x08

	)

85 
	#MT_SYS_OSAL_NV_WRITE
 0x09

	)

86 
	#MT_SYS_OSAL_START_TIMER
 0x0A

	)

87 
	#MT_SYS_OSAL_STOP_TIMER
 0x0B

	)

88 
	#MT_SYS_RANDOM
 0x0C

	)

89 
	#MT_SYS_ADC_READ
 0x0D

	)

90 
	#MT_SYS_GPIO
 0x0E

	)

91 
	#MT_SYS_STACK_TUNE
 0x0F

	)

92 
	#MT_SYS_SET_TIME
 0x10

	)

93 
	#MT_SYS_GET_TIME
 0x11

	)

94 
	#MT_SYS_OSAL_NV_DELETE
 0x12

	)

95 
	#MT_SYS_OSAL_NV_LENGTH
 0x13

	)

96 
	#MT_SYS_SET_TX_POWER
 0x14

	)

99 
	#MT_SYS_RESET_IND
 0x80

	)

100 
	#MT_SYS_OSAL_TIMER_EXPIRED
 0x81

	)

106 
	#MT_MAC_RESET_REQ
 0x01

	)

107 
	#MT_MAC_INIT
 0x02

	)

108 
	#MT_MAC_START_REQ
 0x03

	)

109 
	#MT_MAC_SYNC_REQ
 0x04

	)

110 
	#MT_MAC_DATA_REQ
 0x05

	)

111 
	#MT_MAC_ASSOCIATE_REQ
 0x06

	)

112 
	#MT_MAC_DISASSOCIATE_REQ
 0x07

	)

113 
	#MT_MAC_GET_REQ
 0x08

	)

114 
	#MT_MAC_SET_REQ
 0x09

	)

115 
	#MT_MAC_GTS_REQ
 0x0a

	)

116 
	#MT_MAC_RX_ENABLE_REQ
 0x0b

	)

117 
	#MT_MAC_SCAN_REQ
 0x0c

	)

118 
	#MT_MAC_POLL_REQ
 0x0d

	)

119 
	#MT_MAC_PURGE_REQ
 0x0e

	)

120 
	#MT_MAC_SET_RX_GAIN_REQ
 0x0f

	)

123 
	#MT_MAC_SECURITY_GET_REQ
 0x10

	)

124 
	#MT_MAC_SECURITY_SET_REQ
 0x11

	)

127 
	#MT_MAC_ASSOCIATE_RSP
 0x50

	)

128 
	#MT_MAC_ORPHAN_RSP
 0x51

	)

131 
	#MT_MAC_SYNC_LOSS_IND
 0x80

	)

132 
	#MT_MAC_ASSOCIATE_IND
 0x81

	)

133 
	#MT_MAC_ASSOCIATE_CNF
 0x82

	)

134 
	#MT_MAC_BEACON_NOTIFY_IND
 0x83

	)

135 
	#MT_MAC_DATA_CNF
 0x84

	)

136 
	#MT_MAC_DATA_IND
 0x85

	)

137 
	#MT_MAC_DISASSOCIATE_IND
 0x86

	)

138 
	#MT_MAC_DISASSOCIATE_CNF
 0x87

	)

139 
	#MT_MAC_GTS_CNF
 0x88

	)

140 
	#MT_MAC_GTS_IND
 0x89

	)

141 
	#MT_MAC_ORPHAN_IND
 0x8a

	)

142 
	#MT_MAC_POLL_CNF
 0x8b

	)

143 
	#MT_MAC_SCAN_CNF
 0x8c

	)

144 
	#MT_MAC_COMM_STATUS_IND
 0x8d

	)

145 
	#MT_MAC_START_CNF
 0x8e

	)

146 
	#MT_MAC_RX_ENABLE_CNF
 0x8f

	)

147 
	#MT_MAC_PURGE_CNF
 0x90

	)

154 
	#MT_NWK_INIT
 0x00

	)

157 
	#MT_NLDE_DATA_REQ
 0x01

	)

158 
	#MT_NLME_NETWORK_FORMATION_REQ
 0x02

	)

159 
	#MT_NLME_PERMIT_JOINING_REQ
 0x03

	)

160 
	#MT_NLME_JOIN_REQ
 0x04

	)

161 
	#MT_NLME_LEAVE_REQ
 0x05

	)

162 
	#MT_NLME_RESET_REQ
 0x06

	)

163 
	#MT_NLME_GET_REQ
 0x07

	)

164 
	#MT_NLME_SET_REQ
 0x08

	)

165 
	#MT_NLME_NETWORK_DISCOVERY_REQ
 0x09

	)

166 
	#MT_NLME_ROUTE_DISCOVERY_REQ
 0x0A

	)

167 
	#MT_NLME_DIRECT_JOIN_REQ
 0x0B

	)

168 
	#MT_NLME_ORPHAN_JOIN_REQ
 0x0C

	)

169 
	#MT_NLME_START_ROUTER_REQ
 0x0D

	)

172 
	#MT_NLDE_DATA_CONF
 0x80

	)

173 
	#MT_NLDE_DATA_IND
 0x81

	)

174 
	#MT_NLME_NETWORK_FORMATION_CONF
 0x82

	)

175 
	#MT_NLME_JOIN_CONF
 0x83

	)

176 
	#MT_NLME_JOIN_IND
 0x84

	)

177 
	#MT_NLME_LEAVE_CONF
 0x85

	)

178 
	#MT_NLME_LEAVE_IND
 0x86

	)

179 
	#MT_NLME_POLL_CONF
 0x87

	)

180 
	#MT_NLME_SYNC_IND
 0x88

	)

181 
	#MT_NLME_NETWORK_DISCOVERY_CONF
 0x89

	)

182 
	#MT_NLME_START_ROUTER_CONF
 0x8A

	)

189 
	#MT_AF_REGISTER
 0x00

	)

190 
	#MT_AF_DATA_REQUEST
 0x01

	)

191 
	#MT_AF_DATA_REQUEST_EXT
 0x02

	)

192 
	#MT_AF_DATA_REQUEST_SRCRTG
 0x03

	)

194 
	#MT_AF_INTER_PAN_CTL
 0x10

	)

195 
	#MT_AF_DATA_STORE
 0x11

	)

196 
	#MT_AF_DATA_RETRIEVE
 0x12

	)

197 
	#MT_AF_APSF_CONFIG_SET
 0x13

	)

200 
	#MT_AF_DATA_CONFIRM
 0x80

	)

201 
	#MT_AF_INCOMING_MSG
 0x81

	)

202 
	#MT_AF_INCOMING_MSG_EXT
 0x82

	)

209 
	#MT_ZDO_NWK_ADDR_REQ
 0x00

	)

210 
	#MT_ZDO_IEEE_ADDR_REQ
 0x01

	)

211 
	#MT_ZDO_NODE_DESC_REQ
 0x02

	)

212 
	#MT_ZDO_POWER_DESC_REQ
 0x03

	)

213 
	#MT_ZDO_SIMPLE_DESC_REQ
 0x04

	)

214 
	#MT_ZDO_ACTIVE_EP_REQ
 0x05

	)

215 
	#MT_ZDO_MATCH_DESC_REQ
 0x06

	)

216 
	#MT_ZDO_COMPLEX_DESC_REQ
 0x07

	)

217 
	#MT_ZDO_USER_DESC_REQ
 0x08

	)

218 
	#MT_ZDO_END_DEV_ANNCE
 0x0A

	)

219 
	#MT_ZDO_USER_DESC_SET
 0x0B

	)

220 
	#MT_ZDO_SERVICE_DISC_REQ
 0x0C

	)

221 
	#MT_ZDO_END_DEV_BIND_REQ
 0x20

	)

222 
	#MT_ZDO_BIND_REQ
 0x21

	)

223 
	#MT_ZDO_UNBIND_REQ
 0x22

	)

225 
	#MT_ZDO_SET_LINK_KEY
 0x23

	)

226 
	#MT_ZDO_REMOVE_LINK_KEY
 0x24

	)

227 
	#MT_ZDO_GET_LINK_KEY
 0x25

	)

228 
	#MT_ZDO_NWK_DISCOVERY_REQ
 0x26

	)

229 
	#MT_ZDO_JOIN_REQ
 0x27

	)

231 
	#MT_ZDO_MGMT_NWKDISC_REQ
 0x30

	)

232 
	#MT_ZDO_MGMT_LQI_REQ
 0x31

	)

233 
	#MT_ZDO_MGMT_RTG_REQ
 0x32

	)

234 
	#MT_ZDO_MGMT_BIND_REQ
 0x33

	)

235 
	#MT_ZDO_MGMT_LEAVE_REQ
 0x34

	)

236 
	#MT_ZDO_MGMT_DIRECT_JOIN_REQ
 0x35

	)

237 
	#MT_ZDO_MGMT_PERMIT_JOIN_REQ
 0x36

	)

238 
	#MT_ZDO_MGMT_NWK_UPDATE_REQ
 0x37

	)

241 
	#MT_ZDO_MSG_CB_REGISTER
 0x3E

	)

242 
	#MT_ZDO_MSG_CB_REMOVE
 0x3F

	)

243 
	#MT_ZDO_STARTUP_FROM_APP
 0x40

	)

246 
	#MT_ZDO_AUTO_FIND_DESTINATION_REQ
 0x41

	)

249 
	#MT_ZDO_AREQ_TO_HOST
 0x80

	)

250 
	#MT_ZDO_NWK_ADDR_RSP
 ((
uöt8
)
NWK_addr_ªq
 | 0x80)

	)

251 
	#MT_ZDO_IEEE_ADDR_RSP
 ((
uöt8
)
IEEE_addr_ªq
 | 0x80)

	)

252 
	#MT_ZDO_NODE_DESC_RSP
 ((
uöt8
)
Node_Desc_ªq
 | 0x80)

	)

253 
	#MT_ZDO_POWER_DESC_RSP
 ((
uöt8
)
Powî_Desc_ªq
 | 0x80)

	)

254 
	#MT_ZDO_SIMPLE_DESC_RSP
 ((
uöt8
)
Sim∂e_Desc_ªq
 | 0x80)

	)

255 
	#MT_ZDO_ACTIVE_EP_RSP
 ((
uöt8
)
A˘ive_EP_ªq
 | 0x80)

	)

256 
	#MT_ZDO_MATCH_DESC_RSP
 ((
uöt8
)
M©ch_Desc_ªq
 | 0x80)

	)

258 
	#MT_ZDO_COMPLEX_DESC_RSP
 0x87

	)

259 
	#MT_ZDO_USER_DESC_RSP
 0x88

	)

261 
	#MT_ZDO_USER_DESC_CONF
 0x89

	)

262 
	#MT_ZDO_SERVER_DISC_RSP
 0x8A

	)

264 
	#MT_ZDO_END_DEVICE_BIND_RSP
 ((
uöt8
)
End_Devi˚_Böd_ªq
 | 0x80)

	)

265 
	#MT_ZDO_BIND_RSP
 ((
uöt8
)
Böd_ªq
 | 0x80)

	)

266 
	#MT_ZDO_UNBIND_RSP
 ((
uöt8
)
Unböd_ªq
 | 0x80)

	)

268 
	#MT_ZDO_MGMT_NWK_DISC_RSP
 ((
uöt8
)
Mgmt_NWK_Disc_ªq
 | 0x80)

	)

269 
	#MT_ZDO_MGMT_LQI_RSP
 ((
uöt8
)
Mgmt_Lqi_ªq
 | 0x80)

	)

270 
	#MT_ZDO_MGMT_RTG_RSP
 ((
uöt8
)
Mgmt_Rtg_ªq
 | 0x80)

	)

271 
	#MT_ZDO_MGMT_BIND_RSP
 ((
uöt8
)
Mgmt_Böd_ªq
 | 0x80)

	)

272 
	#MT_ZDO_MGMT_LEAVE_RSP
 ((
uöt8
)
Mgmt_Lóve_ªq
 | 0x80)

	)

273 
	#MT_ZDO_MGMT_DIRECT_JOIN_RSP
 ((
uöt8
)
Mgmt_Dúe˘_Joö_ªq
 | 0x80)

	)

274 
	#MT_ZDO_MGMT_PERMIT_JOIN_RSP
 ((
uöt8
)
Mgmt_Pîmô_Joö_ªq
 | 0x80)

	)

278 
	#MT_ZDO_STATE_CHANGE_IND
 0xC0

	)

279 
	#MT_ZDO_END_DEVICE_ANNCE_IND
 0xC1

	)

280 
	#MT_ZDO_MATCH_DESC_RSP_SENT
 0xC2

	)

281 
	#MT_ZDO_STATUS_ERROR_RSP
 0xC3

	)

282 
	#MT_ZDO_SRC_RTG_IND
 0xC4

	)

283 
	#MT_ZDO_BEACON_NOTIFY_IND
 0xC5

	)

284 
	#MT_ZDO_JOIN_CNF
 0xC6

	)

285 
	#MT_ZDO_NWK_DISCOVERY_CNF
 0xC7

	)

286 
	#MT_ZDO_CONCENTRATOR_IND_CB
 0xC8

	)

287 
	#MT_ZDO_LEAVE_IND
 0xC9

	)

289 
	#MT_ZDO_MSG_CB_INCOMING
 0xFF

	)

292 
	#MtZdoDef_r•
 0x0040

	)

300 
	#MT_SAPI_SYS_RESET
 0x09

	)

303 
	#MT_SAPI_START_REQ
 0x00

	)

304 
	#MT_SAPI_BIND_DEVICE_REQ
 0x01

	)

305 
	#MT_SAPI_ALLOW_BIND_REQ
 0x02

	)

306 
	#MT_SAPI_SEND_DATA_REQ
 0x03

	)

307 
	#MT_SAPI_READ_CFG_REQ
 0x04

	)

308 
	#MT_SAPI_WRITE_CFG_REQ
 0x05

	)

309 
	#MT_SAPI_GET_DEV_INFO_REQ
 0x06

	)

310 
	#MT_SAPI_FIND_DEV_REQ
 0x07

	)

311 
	#MT_SAPI_PMT_JOIN_REQ
 0x08

	)

312 
	#MT_SAPI_APP_REGISTER_REQ
 0x0a

	)

315 
	#MT_SAPI_START_CNF
 0x80

	)

316 
	#MT_SAPI_BIND_CNF
 0x81

	)

317 
	#MT_SAPI_ALLOW_BIND_CNF
 0x82

	)

318 
	#MT_SAPI_SEND_DATA_CNF
 0x83

	)

319 
	#MT_SAPI_READ_CFG_RSP
 0x84

	)

320 
	#MT_SAPI_FIND_DEV_CNF
 0x85

	)

321 
	#MT_SAPI_DEV_INFO_RSP
 0x86

	)

322 
	#MT_SAPI_RCV_DATA_IND
 0x87

	)

330 
	#MT_UTIL_GET_DEVICE_INFO
 0x00

	)

331 
	#MT_UTIL_GET_NV_INFO
 0x01

	)

332 
	#MT_UTIL_SET_PANID
 0x02

	)

333 
	#MT_UTIL_SET_CHANNELS
 0x03

	)

334 
	#MT_UTIL_SET_SECLEVEL
 0x04

	)

335 
	#MT_UTIL_SET_PRECFGKEY
 0x05

	)

336 
	#MT_UTIL_CALLBACK_SUB_CMD
 0x06

	)

337 
	#MT_UTIL_KEY_EVENT
 0x07

	)

338 
	#MT_UTIL_TIME_ALIVE
 0x09

	)

339 
	#MT_UTIL_LED_CONTROL
 0x0A

	)

341 
	#MT_UTIL_TEST_LOOPBACK
 0x10

	)

342 
	#MT_UTIL_DATA_REQ
 0x11

	)

344 
	#MT_UTIL_SRC_MATCH_ENABLE
 0x20

	)

345 
	#MT_UTIL_SRC_MATCH_ADD_ENTRY
 0x21

	)

346 
	#MT_UTIL_SRC_MATCH_DEL_ENTRY
 0x22

	)

347 
	#MT_UTIL_SRC_MATCH_CHECK_SRC_ADDR
 0x23

	)

348 
	#MT_UTIL_SRC_MATCH_ACK_ALL_PENDING
 0x24

	)

349 
	#MT_UTIL_SRC_MATCH_CHECK_ALL_PENDING
 0x25

	)

351 
	#MT_UTIL_ADDRMGR_EXT_ADDR_LOOKUP
 0x40

	)

352 
	#MT_UTIL_ADDRMGR_NWK_ADDR_LOOKUP
 0x41

	)

353 
	#MT_UTIL_APSME_LINK_KEY_DATA_GET
 0x44

	)

354 
	#MT_UTIL_APSME_LINK_KEY_NV_ID_GET
 0x45

	)

355 
	#MT_UTIL_ASSOC_COUNT
 0x48

	)

356 
	#MT_UTIL_ASSOC_FIND_DEVICE
 0x49

	)

357 
	#MT_UTIL_ASSOC_GET_WITH_ADDRESS
 0x4A

	)

358 
	#MT_UTIL_APSME_REQUEST_KEY_CMD
 0x4B

	)

360 
	#MT_UTIL_ZCL_KEY_EST_INIT_EST
 0x80

	)

361 
	#MT_UTIL_ZCL_KEY_EST_SIGN
 0x81

	)

364 
	#MT_UTIL_SYNC_REQ
 0xE0

	)

365 
	#MT_UTIL_ZCL_KEY_ESTABLISH_IND
 0xE1

	)

372 
	#MT_DEBUG_SET_THRESHOLD
 0x00

	)

374 
	#MT_DEBUG_MAC_DATA_DUMP
 0x10

	)

377 
	#MT_DEBUG_MSG
 0x80

	)

384 
	#MT_APP_MSG
 0x00

	)

385 
	#MT_APP_USER_TEST
 0x01

	)

388 
	#MT_APP_RSP
 0x80

	)

393 
	#MT_OTA_FILE_READ_REQ
 0x00

	)

394 
	#MT_OTA_NEXT_IMG_REQ
 0x01

	)

396 
	#MT_OTA_FILE_READ_RSP
 0x80

	)

397 
	#MT_OTA_NEXT_IMG_RSP
 0x81

	)

398 
	#MT_OTA_STATUS_IND
 0x82

	)

407 
	#MT_ZTOOL_SERIAL_RCV_CHAR
 0x0001

	)

408 
	#MT_ZTOOL_SERIAL_RCV_BUFFER_FULL
 0x0002

	)

409 
	#MT_SERIAL_ZTOOL_XMT_READY
 0x0004

	)

410 
	#MT_ZAPP_SERIAL_RCV_CHAR
 
MT_ZTOOL_SERIAL_RCV_CHAR


	)

411 
	#MT_ZAPP_SERIAL_RCV_BUFFER_FULL
 
MT_ZTOOL_SERIAL_RCV_BUFFER_FULL


	)

412 
	#MT_SERIAL_ZAPP_XMT_READY
 
MT_SERIAL_ZTOOL_XMT_READY


	)

413 
	#MT_AF_EXEC_EVT
 0x0008

	)

414 
	#MT_SECONDARY_INIT_EVENT
 0x0010

	)

416 
	#MT_MSG_SEQUENCE_EVT
 0x0040

	)

417 
	#MT_KEYPRESS_POLL_EVT
 0x0080

	)

420 
	#MT_SYS_OSAL_EVENT_0
 0x0800

	)

421 
	#MT_SYS_OSAL_EVENT_1
 0x0400

	)

422 
	#MT_SYS_OSAL_EVENT_2
 0x0200

	)

423 
	#MT_SYS_OSAL_EVENT_3
 0x0100

	)

424 
	#MT_SYS_OSAL_EVENT_MASK
 (
MT_SYS_OSAL_EVENT_0
 | 
MT_SYS_OSAL_EVENT_1
 | \

425 
MT_SYS_OSAL_EVENT_2
 | 
MT_SYS_OSAL_EVENT_3
)

	)

428 
	#CMD_SERIAL_MSG
 0x01

	)

429 
	#CMD_DEBUG_MSG
 0x02

	)

430 
	#CMD_TX_MSG
 0x03

	)

431 
	#CB_FUNC
 0x04

	)

432 
	#CMD_SEQUENCE_MSG
 0x05

	)

433 
	#CMD_DEBUG_STR
 0x06

	)

434 
	#AF_INCOMING_MSG_FOR_MT
 0x0F

	)

437 
	#UNRECOGNIZED_COMMAND
 0x00

	)

438 
	#UNSUPPORTED_COMMAND
 0x01

	)

439 
	#RECEIVE_BUFFER_FULL
 0x02

	)

442 
	#SPI_CMD_DEBUG_MSG
 0x4003

	)

443 
	#SPI_CMD_TRACE_SUB
 0x0004

	)

444 
	#SPI_CMD_TRACE_MSG
 0x4004

	)

447 
	#SPI_CMD_USER0
 0x000A

	)

448 
	#SPI_CMD_USER1
 0x000B

	)

449 
	#SPI_CMD_USER2
 0x000C

	)

450 
	#SPI_CMD_USER3
 0x000D

	)

451 
	#SPI_CMD_USER4
 0x000E

	)

452 
	#SPI_CMD_USER5
 0x000F

	)

455 
	#SPI_SYS_STRING_MSG
 0x0015

	)

456 
	#SPI_CMD_SYS_NETWORK_START
 0x0020

	)

457 
	#SPI_CMD_ZIGNET_DATA
 0x0022

	)

460 
	#SPI_CB_SYS_CALLBACK_SUB_RSP
 0x1006

	)

461 
	#SPI_CB_SYS_PING_RSP
 0x1007

	)

462 
	#SPI_CB_SYS_GET_DEVICE_INFO_RSP
 0x1014

	)

463 
	#SPI_CB_SYS_KEY_EVENT_RSP
 0x1016

	)

464 
	#SPI_CB_SYS_HEARTBEAT_RSP
 0x1017

	)

465 
	#SPI_CB_SYS_LED_CONTROL_RSP
 0x1019

	)

468 
	#SPI_CMD_SEQ_START
 0x0600

	)

469 
	#SPI_CMD_SEQ_WAIT
 0x0601

	)

470 
	#SPI_CMD_SEQ_END
 0x0602

	)

471 
	#SPI_CMD_SEQ_RESET
 0x0603

	)

472 
	#DEFAULT_WAIT_INTERVAL
 5000

473 

	)

475 
	#SPI_RESPONSE_BIT
 0x1000

	)

476 
	#SPI_SUBSCRIPTION_BIT
 0x2000

	)

477 
	#SPI_DEBUGTRACE_BIT
 0x4000

	)

479 
	#SPI_0DATA_MSG_LEN
 5

	)

480 
	#SPI_RESP_MSG_LEN_DEFAULT
 6

	)

482 
	#LEN_MAC_BEACON_MSDU
 15

	)

483 
	#LEN_MAC_COORDEXTND_ADDR
 8

	)

484 
	#LEN_MAC_ATTR_BYTE
 1

	)

485 
	#LEN_MAC_ATTR_INT
 2

	)

487 
	#SOP_FIELD
 0

	)

488 
	#CMD_FIELD_HI
 1

	)

489 
	#CMD_FIELD_LO
 2

	)

490 
	#DATALEN_FIELD
 3

	)

491 
	#DATA_BEGIN
 4

	)

494 
	#MT_MAC_CB_ID
 0

	)

495 
	#MT_OFFSET
 1

	)

496 
	#MT_SOP_FIELD
 
MT_OFFSET
 + 
SOP_FIELD


	)

497 
	#MT_CMD_FIELD_HI
 
MT_OFFSET
 + 
CMD_FIELD_HI


	)

498 
	#MT_CMD_FIELD_LO
 
MT_OFFSET
 + 
CMD_FIELD_LO


	)

499 
	#MT_DATALEN_FIELD
 
MT_OFFSET
 + 
DATALEN_FIELD


	)

500 
	#MT_DATA_BEGIN
 
MT_OFFSET
 + 
DATA_BEGIN


	)

502 
	#MT_INFO_HEADER_LEN
 1

	)

503 
	#MT_RAM_READ_RESP_LEN
 0x02

	)

504 
	#MT_RAM_WRITE_RESP_LEN
 0x01

	)

507 
	#AF_INTERFACE_BITS
 0x07

	)

508 
	#AF_INTERFACE_OFFSET
 0x05

	)

509 
	#AF_APP_DEV_VER_MASK
 0x0F

	)

510 
	#AF_APP_FLAGS_MASK
 0x0F

	)

511 
	#AF_TRANSTYPE_MASK
 0x0F

	)

512 
	#AF_TRANSDATATYPE_MASK
 0x0F

	)

514 
	#TGEN_START
 0x000a

	)

515 
	#TGEN_STOP
 0x000b

	)

516 
	#TGEN_COUNT
 0x000c

	)

517 
	#DEBUG_GET
 0x000d

	)

518 
	#HW_TEST
 0x000e

	)

519 
	#HW_DISPLAY_RESULT
 0x000f

	)

520 
	#HW_SEND_STATUS
 0x0010

	)

522 #i‡
deföed
–
APP_TP
 ) || deföed ( 
APP_TP2
 )

523 #i‡
deföed
–
APP_TP
 )

524 
	#TP_SEND_NODATA
 0x0011

	)

526 
	#TP_SEND_BCAST_RSP
 0x0011

	)

528 
	#TP_SEND_BUFFERTEST
 0x0012

	)

529 #i‡
deföed
 (
APP_TP
)

530 
	#TP_SEND_UINT8
 0x0013

	)

531 
	#TP_SEND_INT8
 0x0014

	)

532 
	#TP_SEND_UINT16
 0x0015

	)

533 
	#TP_SEND_INT16
 0x0016

	)

534 
	#TP_SEND_SEMIPREC
 0x0017

	)

536 
	#TP_SEND_FREEFORM
 0x0018

	)

537 #i‡
deföed
–
APP_TP
 )

538 
	#TP_SEND_ABS_TIME
 0x0019

	)

539 
	#TP_SEND_REL_TIME
 0x001A

	)

540 
	#TP_SEND_CHAR_STRING
 0x001B

	)

541 
	#TP_SEND_OCTET_STRING
 0x001C

	)

543 
	#TP_SET_DSTADDRESS
 0x001D

	)

544 #i‡
deföed
–
APP_TP2
 )

545 
	#TP_SEND_BUFFER_GROUP
 0x001E

	)

547 
	#TP_SEND_BUFFER
 0x001F

	)

548 #i‡
deföed
–
APP_TP
 )

549 
	#TP_SEND_CON_INT8
 0x0020

	)

550 
	#TP_SEND_CON_INT16
 0x0021

	)

551 
	#TP_SEND_CON_TIME
 0x0022

	)

553 
	#TP_SEND_MULT_KVP_8BIT
 0x0023

	)

554 
	#TP_SEND_MULT_KVP_16BIT
 0x0024

	)

555 
	#TP_SEND_MULT_KVP_TIME
 0x0025

	)

556 
	#TP_SEND_MULT_KVP_STRING
 0x0026

	)

559 
	#TP_SEND_COUNTED_PKTS
 0x0027

	)

560 
	#TP_SEND_RESET_COUNTER
 0x0028

	)

561 
	#TP_SEND_GET_COUNTER
 0x0029

	)

563 #i‡
deföed
–
APP_TP
 )

564 
	#TP_SEND_MULTI_KVP_STR_TIME
 0x0030

	)

567 
	#TP_SET_PERMIT_JOIN
 0x0040

	)

569 
	#TP_ADD_GROUP
 0x0041

	)

570 
	#TP_REMOVE_GROUP
 0x0042

	)

572 
	#TP_SEND_UPDATE_KEY
 0x0043

	)

573 
	#TP_SEND_SWITCH_KEY
 0x0044

	)

575 #i‡
deföed
–
APP_TP2
 )

576 
	#TP_SEND_BUFFERTEST_GROUP
 0x0045

	)

577 
	#TP_SEND_ROUTE_DISC_REQ
 0x0046

	)

578 
	#TP_SEND_ROUTE_DISCOVERY
 0x0047

	)

579 
	#TP_SEND_NEW_ADDR
 0x0048

	)

580 
	#TP_SEND_NWK_UPDATE
 0x0049

	)

581 
	#TP_AK_SETUP_PARTNER
 0x0050

	)

582 
	#TP_AK_REQ_KEY
 0x0051

	)

583 
	#TP_AK_PARTNER_NWKADDR
 0x0052

	)

584 
	#TP_AK_PARTNER_EXTADDR7654
 0x0053

	)

585 
	#TP_AK_PARTNER_EXTADDR3210
 0x0054

	)

586 
	#TP_AK_PARTNER_SET
 0x0055

	)

587 
	#TP_AK_TYPE_SET
 0x0056

	)

588 
	#TP_FRAG_SKIP_BLOCK
 0x0057

	)

589 
	#TP_APS_REMOVE
 0x0058

	)

590 
	#TP_NWK_ADDR_CONFLICT
 0x0059

	)

595 #i‡
deföed
 ( 
OSAL_TOTAL_MEM
 )

596 
	#OSAL_MEM_STACK_HIGH_WATER
 0x0100

	)

597 
	#OSAL_MEM_HEAP_HIGH_WATER
 0x0101

	)

602 #i‡
deföed
 (
MT_SYS_FUNC
)

603 
	#MT_CAP_SYS
 0x0001

	)

605 
	#MT_CAP_SYS
 0x0000

	)

608 #i‡
deföed
 ( 
MT_MAC_FUNC
 )

609 
	#MT_CAP_MAC
 0x0002

	)

611 
	#MT_CAP_MAC
 0x0000

	)

614 #i‡
deföed
 ( 
MT_NWK_FUNC
 )

615 
	#MT_CAP_NWK
 0x0004

	)

617 
	#MT_CAP_NWK
 0x0000

	)

620 #i‡
deföed
 ( 
MT_AF_FUNC
 )

621 
	#MT_CAP_AF
 0x0008

	)

623 
	#MT_CAP_AF
 0x0000

	)

626 #i‡
deföed
 ( 
MT_ZDO_FUNC
 )

627 
	#MT_CAP_ZDO
 0x0010

	)

629 
	#MT_CAP_ZDO
 0x0000

	)

632 #i‡
deföed
 ( 
MT_SAPI_FUNC
 )

633 
	#MT_CAP_SAPI
 0x0020

	)

635 
	#MT_CAP_SAPI
 0x0000

	)

638 #i‡
deföed
 ( 
MT_UTIL_FUNC
 )

639 
	#MT_CAP_UTIL
 0x0040

	)

641 
	#MT_CAP_UTIL
 0x0000

	)

644 #i‡
deföed
 ( 
MT_DEBUG_FUNC
 )

645 
	#MT_CAP_DEBUG
 0x0080

	)

647 
	#MT_CAP_DEBUG
 0x0000

	)

650 #i‡
deföed
 ( 
MT_APP_FUNC
 )

651 
	#MT_CAP_APP
 0x0100

	)

653 
	#MT_CAP_APP
 0x0000

	)

656 #i‡
deföed
 ( 
ZPORT
 )

657 
	#MT_CAP_ZOAD
 0x1000

	)

659 
	#MT_CAP_ZOAD
 0x0000

	)

663 
	#ZNP_NV_APP_ITEM_1
 0x0F01

	)

664 
	#ZNP_NV_APP_ITEM_2
 0x0F02

	)

665 
	#ZNP_NV_APP_ITEM_3
 0x0F03

	)

666 
	#ZNP_NV_APP_ITEM_4
 0x0F04

	)

667 
	#ZNP_NV_APP_ITEM_5
 0x0F05

	)

668 
	#ZNP_NV_APP_ITEM_6
 0x0F06

	)

670 
	#ZNP_NV_RF_TEST_PARMS
 0x0F07

	)

677 
uöt16
 
waôI¡îvÆ
;

678 
byã
 *
msg
;

679 *
√xt
;

680 } 
	tMT_msg_queue_t
;

685 
byã
 
MT_TaskID
;

686 
byã
 
debugThªshﬁd
;

687 
byã
 
debugCompId
;

689 
byã
 
queueMsgs
;

690 
MT_msg_queue_t
 *
_pMtMsgQueue
;

691 
MT_msg_queue_t
 *
_pLa°InQueue
;

692 
MT_msg_queue_t
 *
_pCurQueueEÀm
;

697 
MT_BuûdAndSídZToﬁRe•⁄£
(
uöt8
 
cmdTy≥
, uöt8 
cmdId
, uöt8 
d©aLí
, uöt8 *
d©aPå
);

702 
MT_BuûdSPIMsg
–
uöt8
 
cmdTy≥
, uöt8 
cmdId
, 
byã
 *
msg
, byã 
d©aLí
, byã *
d©aPå
 );

707 
MT_Pro˚ssU£rCmd
–
byã
 
cmd
 );

712 
MT_RadioComm™dPro˚ssög
–
uöt16
 
cmd_id
 , 
byã
 
Àn
 , byã *
pD©a
 );

717 
MT_PhyComm™dPro˚ssög
–
uöt16
 
cmd_id
 , 
byã
 
Àn
 , byã *
pD©a
 );

722 
uöt8
 *
MT_W‹d2Buf
–uöt8 *
pBuf
, 
uöt16
 *
pW‹d
, uöt8 
Àn
 );

727 
MT_Revî£Byãs
–
byã
 *
pD©a
, byã 
Àn
 );

732 
MTPro˚ssAµR•Msg
(
byã
 *
pD©a
, byã 
Àn
);

737 
MT_Inô
();

742 
MT_Pro˚ssIncomög
(
uöt8
 *
pBuf
);

747 
uöt8
 *
MT_Tøn•‹tAŒoc
(uöt8 
cmd0
, uöt8 
Àn
);

752 
MT_Tøn•‹tSíd
(
uöt8
 *
pBuf
);

757 
uöt8
 
MT_BuûdEndpoötDesc
–uöt8 *
pBuf
, *
∑øm
 );

762 #ifde‡
__˝lu•lus


	@Components/mt/MT_AF.c

46 
	~"ZComDef.h
"

47 
	~"OSAL.h
"

48 
	~"MT.h
"

49 
	~"MT_AF.h
"

50 
	~"MT_ZDO.h
"

51 
	~"nwk.h
"

52 
	~"OnBﬂrd.h
"

53 
	~"MT_UART.h
"

55 #i‡
deföed
 
INTER_PAN


56 
	~"°ub_≠s.h
"

64 #i‡!
deföed
 
MT_AF_EXEC_CNT


65 
	#MT_AF_EXEC_CNT
 15

	)

68 #i‡!
deföed
 
MT_AF_EXEC_DLY


69 
	#MT_AF_EXEC_DLY
 1000

	)

79 
uöt8
 *
	md©a
;

80 
afAddrTy≥_t
 
	md°Addr
;

81 
ídPoötDesc_t
 *
	mïDesc
;

82 
uöt16
 
	mcId
;

83 
uöt16
 
	md©aLí
;

84 
uöt8
 
	må™sId
;

85 
uöt8
 
	mtxO±s
;

86 
uöt8
 
	mødius
;

87 
uöt8
 
	mtick
;

88 } 
	tmtAfD©aReq_t
;

90 
	s_mtAfInMsgLi°_t


92 
_mtAfInMsgLi°_t
 *
	m√xt
;

93 
uöt8
 *
	md©a
;

94 
uöt32
 
	mtime°amp
;

95 
uöt8
 
	mtick
;

96 } 
	tmtAfInMsgLi°_t
;

103 
mtAfInMsgLi°_t
 *
	gpMtAfInMsgLi°
 = 
NULL
;

104 
mtAfD©aReq_t
 *
	gpMtAfD©aReq
 = 
NULL
;

111 #i‡
deföed
 ( 
MT_AF_CB_FUNC
 )

112 
uöt16
 
	g_afCÆlbackSub
;

120 
MT_AfRegi°î
(
uöt8
 *
pBuf
);

121 
MT_AfD©aReque°
(
uöt8
 *
pBuf
);

123 #i‡
deföed
 ( 
ZIGBEE_SOURCE_ROUTING
 )

124 
MT_AfD©aReque°SrcRtg
(
uöt8
 *
pBuf
);

127 #i‡
deföed
 
INTER_PAN


128 
MT_AfI¡îP™Cé
(
uöt8
 *
pBuf
);

131 
MT_AfD©aRërõve
(
uöt8
 *
pBuf
);

132 
MT_AfD©aSt‹e
(
uöt8
 *
pBuf
);

133 
MT_AfAPSF_C⁄figSë
(
uöt8
 *
pBuf
);

151 
	$MT_AfExec
()

153 
mtAfInMsgLi°_t
 *
pPªv
, *
pIãm
 = 
pMtAfInMsgLi°
;

155 
pIãm
 !
NULL
)

157 i‡(--(
pIãm
->
tick
) == 0)

159 i‡(
pMtAfInMsgLi°
 =
pIãm
)

161 
pMtAfInMsgLi°
 = 
pIãm
->
√xt
;

162 ()
	`oßl_mem_‰ì
(
pIãm
);

163 
pIãm
 = 
pMtAfInMsgLi°
;

167 
pPªv
->
√xt
 = 
pIãm
->next;

168 ()
	`oßl_mem_‰ì
(
pIãm
);

169 
pIãm
 = 
pPªv
->
√xt
;

174 
pPªv
 = 
pIãm
;

175 
pIãm
 =ÖIãm->
√xt
;

179 i‡(
pMtAfD©aReq
 !
NULL
)

181 i‡(--(
pMtAfD©aReq
->
tick
) == 0)

183 ()
	`oßl_mem_‰ì
(
pMtAfD©aReq
);

184 
pMtAfD©aReq
 = 
NULL
;

188 i‡((
pMtAfInMsgLi°
 !
NULL
Ë|| (
pMtAfD©aReq
 != NULL))

190 i‡(
ZSuc˚ss
 !
	`oßl_°¨t_timîEx
(
MT_TaskID
, 
MT_AF_EXEC_EVT
, 
MT_AF_EXEC_DLY
))

192 
	`oßl_£t_evít
(
MT_TaskID
, 
MT_AF_EXEC_EVT
);

195 
	}
}

206 
uöt8
 
	$MT_AfComm™dPro˚ssög
(
uöt8
 *
pBuf
)

208 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

210 
pBuf
[
MT_RPC_POS_CMD1
])

212 
MT_AF_REGISTER
:

213 
	`MT_AfRegi°î
(
pBuf
);

216 
MT_AF_DATA_REQUEST
:

217 
MT_AF_DATA_REQUEST_EXT
:

218 
	`MT_AfD©aReque°
(
pBuf
);

221 #i‡
	`deföed
 ( 
ZIGBEE_SOURCE_ROUTING
 )

222 
MT_AF_DATA_REQUEST_SRCRTG
:

223 
	`MT_AfD©aReque°SrcRtg
(
pBuf
);

227 #i‡
deföed
 
INTER_PAN


228 
MT_AF_INTER_PAN_CTL
:

229 
	`MT_AfI¡îP™Cé
(
pBuf
);

233 
MT_AF_DATA_RETRIEVE
:

234 
	`MT_AfD©aRërõve
(
pBuf
);

237 
MT_AF_DATA_STORE
:

238 
	`MT_AfD©aSt‹e
(
pBuf
);

241 
MT_AF_APSF_CONFIG_SET
:

242 
	`MT_AfAPSF_C⁄figSë
(
pBuf
);

246 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

250  
°©us
;

251 
	}
}

262 
	$MT_AfRegi°î
(
uöt8
 *
pBuf
)

264 
uöt8
 
cmdId
;

265 
uöt8
 
ªtVÆue
 = 
ZMemEº‹
;

266 
ídPoötDesc_t
 *
ïDesc
;

269 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

270 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

272 
ïDesc
 = (
ídPoötDesc_t
 *)
	`oßl_mem_Æloc
((endPointDesc_t));

273 i‡–
ïDesc
 )

275 
ïDesc
->
èsk_id
 = &
MT_TaskID
;

276 
ªtVÆue
 = 
	`MT_BuûdEndpoötDesc
–
pBuf
, 
ïDesc
 );

277 i‡–
ªtVÆue
 =
ZSuc˚ss
 )

279 
ªtVÆue
 = 
	`afRegi°î
–
ïDesc
 );

282 i‡–
ªtVÆue
 !
ZSuc˚ss
 )

284 
	`oßl_mem_‰ì
–
ïDesc
 );

289 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_AF
), 
cmdId
, 1, &
ªtVÆue
);

290 
	}
}

301 
	$MT_AfD©aReque°
(
uöt8
 *
pBuf
)

303 
	#MT_AF_REQ_MSG_LEN
 10

	)

304 
	#MT_AF_REQ_MSG_EXT
 10

	)

306 
ídPoötDesc_t
 *
ïDesc
;

307 
afAddrTy≥_t
 
d°Addr
;

308 
cId_t
 
cId
;

309 
uöt8
 
å™sId
, 
txO±s
, 
ødius
;

310 
uöt8
 
cmd0
, 
cmd1
;

311 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

312 
uöt16
 
d©aLí
, 
ãmpLí
;

315 
cmd0
 = 
pBuf
[
MT_RPC_POS_CMD0
];

316 
cmd1
 = 
pBuf
[
MT_RPC_POS_CMD1
];

317 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

319 i‡(
cmd1
 =
MT_AF_DATA_REQUEST_EXT
)

321 
d°Addr
.
addrMode
 = (
afAddrMode_t
)*
pBuf
++;

323 i‡(
d°Addr
.
addrMode
 =
afAddr64Bô
)

325 ()
	`oßl_mem˝y
(
d°Addr
.
addr
.
extAddr
, 
pBuf
, 
Z_EXTADDR_LEN
);

329 
d°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

331 
pBuf
 +
Z_EXTADDR_LEN
;

333 
d°Addr
.
ídPoöt
 = *
pBuf
++;

334 
d°Addr
.
∑nId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

335 
pBuf
 += 2;

340 
d°Addr
.
addrMode
 = 
afAddr16Bô
;

341 
d°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

342 
pBuf
 += 2;

345 
d°Addr
.
ídPoöt
 = *
pBuf
++;

346 
d°Addr
.
∑nId
 = 0;

350 
ïDesc
 = 
	`afFödEndPoötDesc
(*
pBuf
++);

353 
cId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

354 
pBuf
 +=2;

357 
å™sId
 = *
pBuf
++;

360 
txO±s
 = *
pBuf
++;

363 
ødius
 = *
pBuf
++;

366 i‡(
cmd1
 =
MT_AF_DATA_REQUEST_EXT
)

368 
d©aLí
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

369 
ãmpLí
 = 
d©aLí
 + 
MT_AF_REQ_MSG_LEN
 + 
MT_AF_REQ_MSG_EXT
;

370 
pBuf
 += 2;

374 
d©aLí
 = *
pBuf
++;

375 
ãmpLí
 = 
d©aLí
 + 
MT_AF_REQ_MSG_LEN
;

378 i‡–
ïDesc
 =
NULL
 )

380 
ªtVÆue
 = 
afSètus_INVALID_PARAMETER
;

382 i‡(
ãmpLí
 > (
uöt16
)
MT_RPC_DATA_MAX
)

384 i‡(
pMtAfD©aReq
 !
NULL
)

386 
ªtVÆue
 = 
afSètus_INVALID_PARAMETER
;

388 i‡((
pMtAfD©aReq
 = 
	`oßl_mem_Æloc
((
mtAfD©aReq_t
Ë+ 
d©aLí
)Ë=
NULL
)

390 
ªtVÆue
 = 
afSètus_MEM_FAIL
;

394 
ªtVÆue
 = 
afSètus_SUCCESS
;

396 
pMtAfD©aReq
->
d©a
 = (
uöt8
 *)(pMtAfDataReq+1);

397 ()
	`oßl_mem˝y
(&(
pMtAfD©aReq
->
d°Addr
), &d°Addr, (
afAddrTy≥_t
));

398 
pMtAfD©aReq
->
ïDesc
 =ÉpDesc;

399 
pMtAfD©aReq
->
cId
 = cId;

400 
pMtAfD©aReq
->
d©aLí
 = dataLen;

401 
pMtAfD©aReq
->
å™sId
 =ÅransId;

402 
pMtAfD©aReq
->
txO±s
 =ÅxOpts;

403 
pMtAfD©aReq
->
ødius
 =Ñadius;

406 
pMtAfD©aReq
->
tick
 = 
MT_AF_EXEC_CNT
;

407 i‡(
ZSuc˚ss
 !
	`oßl_°¨t_timîEx
(
MT_TaskID
, 
MT_AF_EXEC_EVT
, 
MT_AF_EXEC_DLY
))

409 ()
	`oßl_£t_evít
(
MT_TaskID
, 
MT_AF_EXEC_EVT
);

415 
ªtVÆue
 = 
	`AF_D©aReque°
(&
d°Addr
, 
ïDesc
, 
cId
, 
d©aLí
, 
pBuf
, &
å™sId
, 
txO±s
, 
ødius
);

418 i‡(
MT_RPC_CMD_SREQ
 =(
cmd0
 & 
MT_RPC_CMD_TYPE_MASK
))

420 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
|(uöt8)
MT_RPC_SYS_AF
), 
cmd1
, 1, &
ªtVÆue
);

422 
	}
}

424 #i‡
deföed
 ( 
ZIGBEE_SOURCE_ROUTING
 )

435 
	$MT_AfD©aReque°SrcRtg
(
uöt8
 *
pBuf
)

437 
uöt8
 
cmdId
, 
d©aLí
 = 0;

438 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

439 
ídPoötDesc_t
 *
ïDesc
;

440 
byã
 
å™sId
;

441 
afAddrTy≥_t
 
d°Addr
;

442 
cId_t
 
cId
;

443 
byã
 
txO±s
, 
ødius
, 
§cEP
, 
ªœyC¡
;

444 
uöt16
 *
pRñayLi°
;

445 
uöt8
 
i
;

448 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

449 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

453 
	`oßl_mem£t
–&
d°Addr
, 0, (
afAddrTy≥_t
) );

454 
d°Addr
.
addrMode
 = 
afAddr16Bô
;

455 
d°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

456 
pBuf
 += 2;

459 
d°Addr
.
ídPoöt
 = *
pBuf
++;

462 
§cEP
 = *
pBuf
++;

463 
ïDesc
 = 
	`afFödEndPoötDesc
–
§cEP
 );

466 
cId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

467 
pBuf
 +=2;

470 
å™sId
 = *
pBuf
++;

473 
txO±s
 = *
pBuf
++;

476 
ødius
 = *
pBuf
++;

479 
ªœyC¡
 = *
pBuf
++;

482 if–(
pRñayLi°
 = 
	`oßl_mem_Æloc
–
ªœyC¡
 * –
uöt16
 ))Ë!
NULL
 )

484  
i
 = 0; i < 
ªœyC¡
; i++ )

486 
pRñayLi°
[
i
] = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

487 
pBuf
 += 2;

491 
d©aLí
 = *
pBuf
++;

493 i‡–
ïDesc
 =
NULL
 )

495 
ªtVÆue
 = 
afSètus_INVALID_PARAMETER
;

499 
ªtVÆue
 = 
	`AF_D©aReque°SrcRtg
–&
d°Addr
, 
ïDesc
, 
cId
, 
d©aLí
, 
pBuf
,

500 &
å™sId
, 
txO±s
, 
ødius
, 
ªœyC¡
, 
pRñayLi°
 );

504 
	`oßl_mem_‰ì
–
pRñayLi°
 );

508 
ªtVÆue
 = 
afSètus_MEM_FAIL
;

513 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_AF
), 
cmdId
, 1, &
ªtVÆue
);

514 
	}
}

517 #i‡
deföed
 
INTER_PAN


527 
	$MT_AfI¡îP™Cé
(
uöt8
 *
pBuf
)

529 
uöt8
 
cmd
, 
π∫
;

530 
uöt16
 
∑nId
;

531 
ídPoötDesc_t
 *
pEP
;

533 
cmd
 = 
pBuf
[
MT_RPC_POS_CMD1
];

534 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

536 *
pBuf
++)

538 
I¡îP™CÃ
:

539 
π∫
 = 
	`StubAPS_SëI¡øP™Ch™√l
();

542 
I¡îP™Së
:

543 
π∫
 = 
	`StubAPS_SëI¡îP™Ch™√l
(*
pBuf
);

546 
I¡îP™Reg
:

547 i‡((
pEP
 = 
	`afFödEndPoötDesc
(*
pBuf
)))

549 
	`StubAPS_Regi°îAµ
(
pEP
);

550 
π∫
 = 
SUCCESS
;

554 
π∫
 = 
FAILURE
;

558 
I¡îP™Chk
:

559 
∑nId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

560 
π∫
 = (
	`StubAPS_I¡îP™
(
∑nId
, 
pBuf
[2])Ë? 
ZSuc˚ss
 : 
ZFaûuª
;

564 
π∫
 = 
afSètus_INVALID_PARAMETER
;

568 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_AF
), 
cmd
, 1, &
π∫
);

569 
	}
}

581 
	$MT_AfD©aC⁄fúm
(
afD©aC⁄fúm_t
 *
pMsg
)

583 
uöt8
 
ªtAºay
[3];

585 
ªtAºay
[0] = 
pMsg
->
hdr
.
°©us
;

586 
ªtAºay
[1] = 
pMsg
->
ídpoöt
;

587 
ªtAºay
[2] = 
pMsg
->
å™sID
;

590 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_AF
), 
MT_AF_DATA_CONFIRM
, 3, 
ªtAºay
);

591 
	}
}

602 
	$MT_AfIncomögMsg
(
afIncomögMSGPackë_t
 *
pMsg
)

604 
	#MT_AF_INC_MSG_LEN
 17

	)

605 
	#MT_AF_INC_MSG_EXT
 10

	)

607 
uöt16
 
d©aLí
 = 
pMsg
->
cmd
.
D©aLígth
;

608 
uöt16
 
ª•Lí
 = 
MT_AF_INC_MSG_LEN
 + 
d©aLí
;

609 
uöt8
 
cmd
 = 
MT_AF_INCOMING_MSG
;

610 
uöt8
 *
pR•
, *
pTmp
;

611 
mtAfInMsgLi°_t
 *
pIãm
 = 
NULL
;

613 #i‡
deföed
 
INTER_PAN


614 i‡(
	`StubAPS_I¡îP™
(
pMsg
->
§cAddr
.
∑nId
,ÖMsg->§cAddr.
ídPoöt
))

616 
cmd
 = 
MT_AF_INCOMING_MSG_EXT
;

620 i‡((
pMsg
->
§cAddr
.
addrMode
 =
afAddr64Bô
) ||

621 (
ª•Lí
 > (
uöt16
)(
MT_RPC_DATA_MAX
 - 
MT_AF_INC_MSG_EXT
)))

623 
cmd
 = 
MT_AF_INCOMING_MSG_EXT
;

626 i‡(
cmd
 =
MT_AF_INCOMING_MSG_EXT
)

628 
ª•Lí
 +
MT_AF_INC_MSG_EXT
;

631 i‡(
ª•Lí
 > (
uöt16
)
MT_RPC_DATA_MAX
)

633 i‡((
pIãm
 = (
mtAfInMsgLi°_t
 *)
	`oßl_mem_Æloc
((mtAfInMsgLi°_tË+ 
d©aLí
)Ë=
NULL
)

638 
pIãm
->
d©a
 = (
uöt8
 *)(pItem+1);

639 
ª•Lí
 -
d©aLí
;

643 i‡((
pR•
 = 
	`oßl_mem_Æloc
(
ª•Lí
)Ë=
NULL
)

645 i‡(
pIãm
 !
NULL
)

647 ()
	`oßl_mem_‰ì
(
pIãm
);

651 
pTmp
 = 
pR•
;

654 *
pTmp
++ = 
	`LO_UINT16
(
pMsg
->
groupId
);

655 *
pTmp
++ = 
	`HI_UINT16
(
pMsg
->
groupId
);

658 *
pTmp
++ = 
	`LO_UINT16
(
pMsg
->
˛u°îId
);

659 *
pTmp
++ = 
	`HI_UINT16
(
pMsg
->
˛u°îId
);

661 i‡(
cmd
 =
MT_AF_INCOMING_MSG_EXT
)

663 *
pTmp
++ = 
pMsg
->
§cAddr
.
addrMode
;

665 i‡(
pMsg
->
§cAddr
.
addrMode
 =
afAddr64Bô
)

667 ()
	`oßl_mem˝y
(
pTmp
, 
pMsg
->
§cAddr
.
addr
.
extAddr
, 
Z_EXTADDR_LEN
);

671 
pTmp
[0] = 
	`LO_UINT16
(
pMsg
->
§cAddr
.
addr
.
sh‹tAddr
);

672 
pTmp
[1] = 
	`HI_UINT16
(
pMsg
->
§cAddr
.
addr
.
sh‹tAddr
);

674 
pTmp
 +
Z_EXTADDR_LEN
;

676 *
pTmp
++ = 
pMsg
->
§cAddr
.
ídPoöt
;

677 #i‡
deföed
 
INTER_PAN


678 *
pTmp
++ = 
	`LO_UINT16
(
pMsg
->
§cAddr
.
∑nId
);

679 *
pTmp
++ = 
	`HI_UINT16
(
pMsg
->
§cAddr
.
∑nId
);

681 *
pTmp
++ = 0;

682 *
pTmp
++ = 0;

688 *
pTmp
++ = 
	`LO_UINT16
(
pMsg
->
§cAddr
.
addr
.
sh‹tAddr
);

689 *
pTmp
++ = 
	`HI_UINT16
(
pMsg
->
§cAddr
.
addr
.
sh‹tAddr
);

692 *
pTmp
++ = 
pMsg
->
§cAddr
.
ídPoöt
;

696 *
pTmp
++ = 
pMsg
->
ídPoöt
;

699 *
pTmp
++ = 
pMsg
->
wasBrﬂdˇ°
;

702 *
pTmp
++ = 
pMsg
->
LökQuÆôy
;

705 *
pTmp
++ = 
pMsg
->
SecurôyU£
;

708 *
pTmp
++ = 
	`BREAK_UINT32
(
pMsg
->
time°amp
, 0);

709 *
pTmp
++ = 
	`BREAK_UINT32
(
pMsg
->
time°amp
, 1);

710 *
pTmp
++ = 
	`BREAK_UINT32
(
pMsg
->
time°amp
, 2);

711 *
pTmp
++ = 
	`BREAK_UINT32
(
pMsg
->
time°amp
, 3);

715 i‡(
cmd
 =
MT_AF_INCOMING_MSG_EXT
)

721 *
pTmp
++ = 0;

722 *
pTmp
++ = 
	`LO_UINT16
(
d©aLí
);

723 *
pTmp
++ = 
	`HI_UINT16
(
d©aLí
);

727 *
pTmp
++ = 
pMsg
->
cmd
.
TønsSeqNumbî
;

728 *
pTmp
++ = 
d©aLí
;

732 i‡(
pIãm
 !
NULL
)

735 
pIãm
->
√xt
 = 
pMtAfInMsgLi°
;

736 
pMtAfInMsgLi°
 = 
pIãm
;

739 
pIãm
->
tick
 = 
MT_AF_EXEC_CNT
;

740 i‡(
ZSuc˚ss
 !
	`oßl_°¨t_timîEx
(
MT_TaskID
, 
MT_AF_EXEC_EVT
, 
MT_AF_EXEC_DLY
))

742 ()
	`oßl_£t_evít
(
MT_TaskID
, 
MT_AF_EXEC_EVT
);

745 
pIãm
->
time°amp
 = 
pMsg
->timestamp;

746 ()
	`oßl_mem˝y
(
pIãm
->
d©a
, 
pMsg
->
cmd
.
D©a
, 
d©aLí
);

750 ()
	`oßl_mem˝y
(
pTmp
, 
pMsg
->
cmd
.
D©a
, 
d©aLí
);

754 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
|(uöt8)
MT_RPC_SYS_AF
), 
cmd
, 
ª•Lí
, 
pR•
);

756 ()
	`oßl_mem_‰ì
(
pR•
);

757 
	}
}

776 
	$MT_AfD©aRërõve
(
uöt8
 *
pBuf
)

778 
	#MT_AF_RTV_HDR_SZ
 2

	)

780 
uöt32
 
time°amp
;

781 
mtAfInMsgLi°_t
 *
pPªv
, *
pIãm
 = 
pMtAfInMsgLi°
;

782 
uöt8
 
π∫
 = 
afSètus_FAILED
;

783 
uöt8
 
Àn
 = 0;

785 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

786 
time°amp
 = 
	`BUILD_UINT32
(
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3]);

788 
pIãm
 !
NULL
)

790 
pPªv
 = 
pIãm
;

791 i‡(
pIãm
->
time°amp
 ==Åimestamp)

795 
pIãm
 =ÖIãm->
√xt
;

798 i‡(
pIãm
 !
NULL
)

800 
uöt16
 
idx
;

801 
uöt8
 *
pR•
;

803 
pBuf
 += 4;

804 
idx
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

805 
Àn
 = 
pBuf
[2];

807 i‡(
Àn
 == 0)

809 i‡(
pMtAfInMsgLi°
 =
pIãm
)

811 
pMtAfInMsgLi°
 = 
pIãm
->
√xt
;

815 
pPªv
->
√xt
 = 
pIãm
->next;

817 ()
	`oßl_mem_‰ì
(
pIãm
);

818 
π∫
 = 
afSètus_SUCCESS
;

820 i‡((
pR•
 = 
	`oßl_mem_Æloc
(
Àn
 + 
MT_AF_RTV_HDR_SZ
)Ë=
NULL
)

822 
π∫
 = 
afSètus_MEM_FAIL
;

823 
Àn
 = 0;

827 
pR•
[0] = 
ZSuc˚ss
;

828 
pR•
[1] = 
Àn
;

829 ()
	`oßl_mem˝y
(
pR•
 + 
MT_AF_RTV_HDR_SZ
, 
pIãm
->
d©a
+
idx
, 
Àn
);

830 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_AF
),

831 
MT_AF_DATA_RETRIEVE
, 
Àn
 + 
MT_AF_RTV_HDR_SZ
, 
pR•
);

832 ()
	`oßl_mem_‰ì
(
pR•
);

837 
pBuf
[0] = 
π∫
;

838 
pBuf
[1] = 
Àn
;

839 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_AF
),

840 
MT_AF_DATA_RETRIEVE
, 
MT_AF_RTV_HDR_SZ
, 
pBuf
);

841 
	}
}

860 
	$MT_AfD©aSt‹e
(
uöt8
 *
pBuf
)

862 
uöt16
 
idx
;

863 
uöt8
 
Àn
, 
π∫
 = 
afSètus_FAILED
;

865 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

866 
idx
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

867 
Àn
 = 
pBuf
[2];

868 
pBuf
 += 3;

870 i‡(
pMtAfD©aReq
 =
NULL
)

872 
π∫
 = 
afSètus_MEM_FAIL
;

874 i‡(
Àn
 == 0)

876 
π∫
 = 
	`AF_D©aReque°
(&(
pMtAfD©aReq
->
d°Addr
),ÖMtAfD©aReq->
ïDesc
,ÖMtAfD©aReq->
cId
,

877 
pMtAfD©aReq
->
d©aLí
,ÖMtAfD©aReq->
d©a
,

878 &(
pMtAfD©aReq
->
å™sId
),ÖMtAfD©aReq->
txO±s
,ÖMtAfD©aReq->
ødius
);

879 ()
	`oßl_mem_‰ì
(
pMtAfD©aReq
);

880 
pMtAfD©aReq
 = 
NULL
;

884 ()
	`oßl_mem˝y
(
pMtAfD©aReq
->
d©a
+
idx
, 
pBuf
, 
Àn
);

885 
π∫
 = 
afSètus_SUCCESS
;

888 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_AF
),

889 
MT_AF_DATA_STORE
, 1, &
π∫
);

890 
	}
}

907 
	$MT_AfAPSF_C⁄figSë
(
uöt8
 *
pBuf
)

909 
afAPSF_C⁄fig_t
 
cfg
 = { 
pBuf
[
MT_RPC_POS_DAT0
+1],ÖBuf[MT_RPC_POS_DAT0+2] };

910 
afSètus_t
 
π∫
 = 
	`afAPSF_C⁄figSë
(
pBuf
[
MT_RPC_POS_DAT0
], &
cfg
);

912 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_AF
),

913 
MT_AF_APSF_CONFIG_SET
, 1, (
uöt8
 *)&
π∫
);

914 
	}
}

	@Components/mt/MT_AF.h

40 #i‚de‡
MT_AF_H


41 
	#MT_AF_H


	)

46 
	~"ZComDef.h
"

47 
	~"MT.h
"

48 
	~"AF.h
"

49 
	~"OnBﬂrd.h
"

52 
	#AFCB_CHECK
(
cbi
,
èsk
Ë((1Ë&& (èsk =
MT_TaskID
))

	)

57 #i‡
deföed
 ( 
MT_AF_CB_FUNC
 )

58 
	#CB_ID_AF_DATA_IND
 0x0001

	)

59 
	#CB_ID_AF_DATA_CNF
 0x0002

	)

60 
	#SPI_AF_CB_TYPE
 0x0900

	)

63 #i‡
deföed
 (
INTER_PAN
)

65 
	mI¡îP™CÃ
,

66 
	mI¡îP™Së
,

67 
	mI¡îP™Reg
,

68 
	mI¡îP™Chk


69 } 
	tI¡îP™Cé_t
;

74 
uöt16
 
_afCÆlbackSub
;

79 
MT_AfExec
();

84 
uöt8
 
MT_AfComm™dPro˚ssög
(uöt8 *
pBuf
);

89 
MT_AfIncomögMsg
(
afIncomögMSGPackë_t
 *
pMsg
);

94 
MT_AfD©aC⁄fúm
(
afD©aC⁄fúm_t
 *
pMsg
);

	@Components/mt/MT_APP.c

43 
	~"ZComDef.h
"

44 
	~"MT.h
"

45 
	~"MT_APP.h
"

46 
	~"MT_AF.h
"

47 
	~"MT_RPC.h
"

49 #i‡
deföed
–
APP_TP
 )

50 
	~"Te°Profûe.h
"

52 #i‡
deföed
–
APP_TP2
 )

53 
	~"Te°Profûe2.h
"

54 
	~"nwk_utû.h
"

60 #i‡
deföed
 (
MT_APP_FUNC
)

61 
MT_AµMsg
(
uöt8
 *
pBuf
);

62 
MT_AµU£rCmd
(
byã
 *
pD©a
);

65 #i‡
deföed
 (
MT_APP_FUNC
)

75 
uöt8
 
	$MT_AµComm™dPro˚ssög
(
uöt8
 *
pBuf
)

77 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

79 
pBuf
[
MT_RPC_POS_CMD1
])

81 
MT_APP_MSG
:

82 
	`MT_AµMsg
(
pBuf
);

85 
MT_APP_USER_TEST
:

86 
	`MT_AµU£rCmd
(
pBuf
);

90 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

94  
°©us
;

95 
	}
}

106 
	$MT_AµMsg
(
uöt8
 *
pBuf
)

108 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

109 
uöt8
 
ídpoöt
;

110 
ídPoötDesc_t
 *
ïDesc
;

111 
mtSysAµMsg_t
 *
msg
;

112 
uöt8
 
cmdId
, 
d©aLí
;

115 
d©aLí
 = 
pBuf
[
MT_RPC_POS_LEN
];

116 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

117 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

120 
ídpoöt
 = *
pBuf
++;

121 
d©aLí
--;

124 
ïDesc
 = 
	`afFödEndPoötDesc
–
ídpoöt
 );

126 i‡(
ïDesc
)

129 
msg
 = (
mtSysAµMsg_t
 *)
	`oßl_msg_Æloˇã
((mtSysAµMsg_tË+ (
d©aLí
));

130 i‡–
msg
 )

133 
msg
->
hdr
.
evít
 = 
MT_SYS_APP_MSG
;

134 
msg
->
ídpoöt
 =Éndpoint;

135 
msg
->
≠pD©aLí
 = 
d©aLí
;

136 
msg
->
≠pD©a
 = (
uöt8
*)(msg+1);

137 
	`oßl_mem˝y
–
msg
->
≠pD©a
, 
pBuf
, 
d©aLí
);

138 
	`oßl_msg_£nd
–*(
ïDesc
->
èsk_id
), (
uöt8
 *)
msg
 );

141 
ªtVÆue
 = 
ZSuc˚ss
;

146 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_APP
), 
cmdId
, 1, &
ªtVÆue
);

147 
	}
}

158 
	$MT_AµU£rCmd
(
uöt8
 *
pBuf
)

161 
uöt8
 
ªtVÆue
, 
cmdId
;

163 #i‡
	`deföed
 (
APP_TGEN
Ë|| deföed (
NWK_TEST
Ë|| deföed (
APP_TP
Ë|| deföed (
APP_TP2
Ë|| deföed (
OSAL_TOTAL_MEM
Ë|| deföed (
APP_DEBUG
)

164 
uöt16
 
≠p_cmd
;

165 
uöt8
 
§cEp
;

166 
uöt16
 
∑øm1
;

167 
uöt16
 
∑øm2
;

169 #i‡
	`deföed
 (
OSAL_TOTAL_MEM
)

170 
uöt8
 
pD©a
[2];

174 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

175 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

177 
ªtVÆue
 = 
INVALID_TASK
;

179 #i‡
	`deföed
 (
APP_TGEN
Ë|| deföed (
NWK_TEST
Ë|| deföed (
APP_TP
Ë|| deföed (
APP_TP2
Ë|| deföed (
OSAL_TOTAL_MEM
Ë|| deföed (
APP_DEBUG
)

181 
§cEp
 = *
pBuf
++;

183 
≠p_cmd
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

184 
pBuf
 =ÖBu‡+ –
uöt16
 );

186 
∑øm1
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

187 
pBuf
 =ÖBu‡+ –
uöt16
 );

189 
∑øm2
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

191  
≠p_cmd
 )

194 #i‡
	`deföed
 (
APP_TGEN
)

195 
TGEN_START
:

196 
	`TøfficGíAµ_SídCmdMSG
–
∑øm1
, 
∑øm2
, 
TRAFFICGENAPP_CMD_START
 );

197 
ªtVÆue
 = 
ZSUCCESS
;

200 
TGEN_STOP
:

201 
	`TøfficGíAµ_SídCmdMSG
–
∑øm1
, 
∑øm2
, 
TRAFFICGENAPP_CMD_STOP
 );

202 
ªtVÆue
 = 
ZSUCCESS
;

205 
TGEN_COUNT
:

206 
ªtVÆue
 = 
	`TøfficGíAµ_Cou¡Pkt
–
∑øm1
, 
∑øm2
 );

211 #i‡
	`deföed
 (
NWK_TEST
)

212 
HW_TEST
:

213 
	`HwAµ_Sèπ
–
	`HI_UINT16
(
∑øm1
), 
	`LO_UINT16
’¨am1), HI_UINT16(
∑øm2
),

214 1000, 
	`LO_UINT16
(
∑øm2
), 3, 0 );

217 
HW_DISPLAY_RESULT
:

218 
	`HwAµ_Te°Info
();

221 
HW_SEND_STATUS
:

222 
	`HwAµ_SídSèts
();

226 #i‡
	`deföed
–
APP_TP
 ) || deföed ( 
APP_TP2
 )

227 #i‡
	`deföed
–
APP_TP
 )

228 
TP_SEND_NODATA
:

229 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídNoD©a
–
§cEp
, (
byã
)
∑øm1
 );

233 
TP_SEND_BUFFERTEST
:

234 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídBuf„rReq
–
§cEp
, (
byã
)
∑øm1
 );

237 #i‡
	`deföed
–
APP_TP
 )

238 
TP_SEND_UINT8
:

239 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídUöt8
–
§cEp
, (
byã
)
∑øm1
 );

242 
TP_SEND_INT8
:

243 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídI¡8
–
§cEp
, (
byã
)
∑øm1
 );

246 
TP_SEND_UINT16
:

247 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídUöt16
–
§cEp
, (
byã
)
∑øm1
 );

250 
TP_SEND_INT16
:

251 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídI¡16
–
§cEp
, (
byã
)
∑øm1
 );

254 
TP_SEND_SEMIPREC
:

255 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídSemiPªc
–
§cEp
, (
byã
)
∑øm1
 );

258 
TP_SEND_FREEFORM
:

259 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídFªeF‹mReq
–
§cEp
, (
byã
)
∑øm1
 );

263 
TP_SEND_FREEFORM
:

264 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídFªeF‹mReq
(
§cEp
, (
byã
)
∑øm1
, (byã)
∑øm2
);

268 #i‡
	`deföed
–
APP_TP
 )

269 
TP_SEND_ABS_TIME
:

270 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídAbsTime
–
§cEp
, (
byã
)
∑øm1
 );

273 
TP_SEND_REL_TIME
:

274 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídRñ©iveTime
–
§cEp
, (
byã
)
∑øm1
 );

277 
TP_SEND_CHAR_STRING
:

278 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídCh¨Såög
–
§cEp
, (
byã
)
∑øm1
 );

281 
TP_SEND_OCTET_STRING
:

282 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídO˘ëSåög
–
§cEp
, (
byã
)
∑øm1
 );

286 
TP_SET_DSTADDRESS
:

287 
ªtVÆue
 = 
	`Te°ProfûeAµ_SëDe°Addªss
(
	`HI_UINT16
(
∑øm1
), 
	`LO_UINT16
’¨am1), 
∑øm2
);

290 #i‡
	`deföed
–
APP_TP2
 )

291 
TP_SEND_BUFFER_GROUP
:

292 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídBuf„rGroup
–
§cEp
, (
byã
)
∑øm1
 );

296 
TP_SEND_BUFFER
:

297 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídBuf„r
–
§cEp
, (
byã
)
∑øm1
 );

300 #i‡
	`deföed
–
APP_TP
 )

301 
TP_SEND_MULT_KVP_8BIT
:

302 
	`Te°ProfûeAµ_SídMu…iKVP_8bô
–
§cEp
, (
byã
)
∑øm1
 );

303 
ªtVÆue
 = 
ZSuc˚ss
;

306 
TP_SEND_MULT_KVP_16BIT
:

307 
	`Te°ProfûeAµ_SídMu…iKVP_16bô
–
§cEp
, (
byã
)
∑øm1
 );

308 
ªtVÆue
 = 
ZSuc˚ss
;

311 
TP_SEND_MULT_KVP_TIME
:

312 
	`Te°ProfûeAµ_SídMu…iKVP_Time
–
§cEp
, (
byã
)
∑øm1
 );

313 
ªtVÆue
 = 
ZSuc˚ss
;

316 
TP_SEND_MULT_KVP_STRING
:

317 
	`Te°ProfûeAµ_SídMu…iKVP_Såög
–
§cEp
, (
byã
)
∑øm1
 );

318 
ªtVÆue
 = 
ZSuc˚ss
;

321 
TP_SEND_MULTI_KVP_STR_TIME
:

322 
ªtVÆue
 = 
ZSuc˚ss
;

323 
	`Te°ProfûeAµ_SídMu…iKVP_Såög_Time
–
§cEp
, (
byã
)
∑øm1
 );

327 
TP_SEND_COUNTED_PKTS
:

328 
	`Te°ProfûeAµ_SídCou¡edPktsReq
(
	`HI_UINT16
(
∑øm1
), 
	`LO_UINT16
’¨am1), 
∑øm2
);

329 
ªtVÆue
 = 
ZSuc˚ss
;

332 
TP_SEND_RESET_COUNTER
:

333 
	`Te°ProfûeAµ_Cou¡edPakts_Re£tCou¡îReq
–(
byã
)
∑øm1
 );

334 
ªtVÆue
 = 
ZSuc˚ss
;

337 
TP_SEND_GET_COUNTER
:

338 
	`Te°ProfûeAµ_Cou¡edPakts_GëCou¡îReq
–
§cEp
, (
byã
)
∑øm1
 );

339 
ªtVÆue
 = 
ZSuc˚ss
;

342 
TP_SET_PERMIT_JOIN
:

343 i‡–
ZG_BUILD_RTR_TYPE
 && 
ZG_DEVICE_RTR_TYPE
 )

345 
	`NLME_PîmôJoöögReque°
–(
byã
)
∑øm1
 );

346 
ªtVÆue
 = 
ZSuc˚ss
;

350 
ªtVÆue
 = 
ZFaûuª
;

354 #i‡
	`deföed
 ( 
APP_TP2
 )

355 
TP_ADD_GROUP
:

356 
ªtVÆue
 = 
	`Te°ProfûeAµ_SëGroup
–
§cEp
, 
∑øm1
 );

359 
TP_REMOVE_GROUP
:

360 
ªtVÆue
 = 
	`Te°ProfûeAµ_RemoveGroup
–
§cEp
, 
∑øm1
 );

363 
TP_SEND_UPDATE_KEY
:

364 
ªtVÆue
 = 
	`Te°ProfûeAµ_Upd©eKey
–
§cEp
, (
uöt8
)
∑øm1
, 
∑øm2
 );

367 
TP_SEND_SWITCH_KEY
:

368 
ªtVÆue
 = 
	`Te°ProfûeAµ_SwôchKey
–
§cEp
, (
uöt8
)
∑øm1
, 
∑øm2
 );

371 
TP_SEND_BUFFERTEST_GROUP
:

372 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídBuf„rGroupReq
–
§cEp
, (
byã
)
∑øm1
, (byã)
∑øm2
 );

375 
TP_SEND_ROUTE_DISC_REQ
:

376 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídRouãDiscReq
–
§cEp
, 
∑øm1
,

377 
	`HI_UINT16
–
∑øm2
 ), 
	`LO_UINT16
(Öaram2 ) );

380 
TP_SEND_ROUTE_DISCOVERY
:

381 i‡–
ZG_BUILD_RTR_TYPE
 && 
ZG_DEVICE_RTR_TYPE
 )

383 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídRouãDiscovîy
–
∑øm1
,

384 
	`HI_UINT16
–
∑øm2
 ), 
	`LO_UINT16
(Öaram2 ) );

388 
TP_SEND_NEW_ADDR
:

389 
ªtVÆue
 = 
	`Te°ProfûeAµ_Ch™geSh‹tAddr
–
∑øm1
, 
	`LO_UINT16
(
∑øm2
) );

392 
TP_SEND_NWK_UPDATE
:

394 
ªtVÆue
 = 
	`NLME_SídNëw‹kUpd©e
–
NWK_BROADCAST_SHORTADDR
, 
NWKUPDATE_PANID_UPDATE
,

395 
_NIB
.
exãndedPANID
, _NIB.
nwkUpd©eId
+1, 
∑øm1
 );

398 
TP_NWK_ADDR_CONFLICT
:

399 
ªtVÆue
 = 
	`NLME_SídNëw‹kSètus
–
NWK_BROADCAST_SHORTADDR_DEVZCZR
, 
∑øm1
,

400 
NWKSTAT_ADDRESS_CONFLICT
, 
FALSE
 );

403 #i‡(
ZG_BUILD_JOINING_TYPE
)

404 
TP_AK_SETUP_PARTNER
:

405 
ªtVÆue
 = 
	`Te°ProfûeAµ_AµKeySëupP¨äî
–
§cEp
, 
∑øm1
, 
∑øm2
 );

408 
TP_AK_REQ_KEY
:

409 
ªtVÆue
 = 
	`Te°ProfûeAµ_AµKeyReque°
–
§cEp
, 
∑øm1
, 
∑øm2
 );

412 
TP_AK_PARTNER_NWKADDR
:

413 
ªtVÆue
 = 
	`Te°ProfûeAµ_SëP¨äîNwkAddr
–
§cEp
, 
∑øm1
, 
∑øm2
 );

416 
TP_AK_PARTNER_EXTADDR7654
:

417 
ªtVÆue
 = 
	`Te°ProfûeAµ_SëP¨äîExtAddr7654
–
§cEp
, 
∑øm1
, 
∑øm2
 );

420 
TP_AK_PARTNER_EXTADDR3210
:

421 
ªtVÆue
 = 
	`Te°ProfûeAµ_SëP¨äîExtAddr3210
–
§cEp
, 
∑øm1
, 
∑øm2
 );

424 
TP_AK_PARTNER_SET
:

425 
ªtVÆue
 = 
	`Te°ProfûeAµ_SëP¨äî
–
§cEp
, 
∑øm1
, 
∑øm2
 );

429 #i‡(
ZG_BUILD_COORDINATOR_TYPE
)

430 
TP_AK_TYPE_SET
:

431 
ªtVÆue
 = 
	`Te°ProfûeAµ_AµKeyTy≥Së
–
§cEp
, 
∑øm1
, 
∑øm2
 );

435 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

436 
TP_FRAG_SKIP_BLOCK
:

437 
ªtVÆue
 = 
	`Te°ProfûeAµ_FøgSkùBlock
–(
uöt8
)
∑øm1
 );

441 
TP_APS_REMOVE
:

442 
ªtVÆue
 = 
	`Te°ProfûeAµ_APSRemove
–
∑øm1
, 
∑øm2
 );

448 #i‡
	`deföed
 ( 
OSAL_TOTAL_MEM
 )

449 
OSAL_MEM_STACK_HIGH_WATER
:

450 
OSAL_MEM_HEAP_HIGH_WATER
:

451 i‡–
≠p_cmd
 =
OSAL_MEM_STACK_HIGH_WATER
)

453 
∑øm1
 = 
	`oßl_°ack_u£d
();

457 
∑øm1
 = 
	`oßl_hóp_high_w©î
();

460 
pD©a
[0] = 
	`LO_UINT16
–
∑øm1
 );

461 
pD©a
[1] = 
	`HI_UINT16
–
∑øm1
 );

463 
	`MT_BuûdAndSídZToﬁRe•⁄£
((
MT_RPC_CMD_SRSP
 | (
uöt8
)
MT_RPC_SYS_APP
), 
cmdId
, 2, 
pD©a
);

467 #i‡
	`deföed
 ( 
APP_DEBUG
 )

468 
DEBUG_GET
:

469 
	`DebugAµ_SídQuîy
–
∑øm1
 );

470 
ªtVÆue
 = 
ZSUCCESS
;

474 #i‡
	`deföed
 ( 
APP_TP2
 )

475 
TP_SEND_BCAST_RSP
:

476 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídBˇ°R•
–
§cEp
, (
byã
)
∑øm1
 );

486 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_APP
), 
cmdId
, 1, &
ªtVÆue
);

487 
	}
}

	@Components/mt/MT_APP.h

39 #i‚de‡
MT_APP_H


40 
	#MT_APP_H


	)

42 #ifde‡
__˝lu•lus


50 
	~"OSAL.h
"

58 
oßl_evít_hdr_t
 
hdr
;

59 
uöt8
 
ídpoöt
;

60 
uöt8
 
≠pD©aLí
;

61 
uöt8
 *
≠pD©a
;

62 } 
	tmtSysAµMsg_t
;

67 #i‡
deföed
 (
MT_APP_FUNC
)

71 
uöt8
 
MT_AµComm™dPro˚ssög
(uöt8 *
pBuf
);

74 #ifde‡
__˝lu•lus


	@Components/mt/MT_DEBUG.c

44 
	~"ZComDef.h
"

45 
	~"MT.h
"

46 
	~"MT_DEBUG.h
"

47 
	~"MT_UART.h
"

48 
	~"mac_maö.h
"

49 
	~"mac_d©a.h
"

50 
	~"mac_rx.h
"

51 
	~"mac_tx.h
"

52 
	~"nwk_globÆs.h
"

58 #i‡
deföed
 (
MT_DEBUG_FUNC
)

59 
MT_DebugSëThªshﬁd
(
uöt8
 *
pBuf
);

60 
MT_DebugMacD©aDump
();

63 #i‡
deföed
 (
MT_DEBUG_FUNC
)

73 
uöt8
 
	$MT_DebugComm™dPro˚ssög
(
uöt8
 *
pBuf
)

75 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

77 
pBuf
[
MT_RPC_POS_CMD1
])

79 
MT_DEBUG_SET_THRESHOLD
:

80 
	`MT_DebugSëThªshﬁd
(
pBuf
);

83 
MT_DEBUG_MAC_DATA_DUMP
:

84 
	`MT_DebugMacD©aDump
();

88 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

92  
°©us
;

93 
	}
}

104 
	$MT_DebugSëThªshﬁd
(
uöt8
 *
pBuf
)

106 
uöt8
 
ªtVÆue
 = 
ZSuc˚ss
;

107 
uöt8
 
cmdId
;

110 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

111 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

114 
debugCompId
 = *
pBuf
++;

115 
debugThªshﬁd
 = *
pBuf
++;

118 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_DBG
), 
cmdId
, 1, &
ªtVÆue
);

119 
	}
}

130 
	$MT_DebugMacD©aDump
()

132 
uöt8
 
buf
[(
mtDebugMacD©aDump_t
)];

133 
uöt8
 *
pBuf
 = 
buf
;

135 #ifde‡
PACKET_FILTER_STATS


136 *
pBuf
++ = 
	`BREAK_UINT32
(
nwkInvÆidPackës
, 0);

137 *
pBuf
++ = 
	`BREAK_UINT32
(
nwkInvÆidPackës
, 1);

138 *
pBuf
++ = 
	`BREAK_UINT32
(
nwkInvÆidPackës
, 2);

139 *
pBuf
++ = 
	`BREAK_UINT32
(
nwkInvÆidPackës
, 3);

140 *
pBuf
++ = 
	`BREAK_UINT32
(
rxCrcFaûuª
, 0);

141 *
pBuf
++ = 
	`BREAK_UINT32
(
rxCrcFaûuª
, 1);

142 *
pBuf
++ = 
	`BREAK_UINT32
(
rxCrcFaûuª
, 2);

143 *
pBuf
++ = 
	`BREAK_UINT32
(
rxCrcFaûuª
, 3);

144 *
pBuf
++ = 
	`BREAK_UINT32
(
rxCrcSuc˚ss
, 0);

145 *
pBuf
++ = 
	`BREAK_UINT32
(
rxCrcSuc˚ss
, 1);

146 *
pBuf
++ = 
	`BREAK_UINT32
(
rxCrcSuc˚ss
, 2);

147 *
pBuf
++ = 
	`BREAK_UINT32
(
rxCrcSuc˚ss
, 3);

149 #i‡
deföed
 
HAL_MCU_CC2530


150 *
pBuf
++ = 
FSMSTAT0
;

151 *
pBuf
++ = 
FSMSTAT1
;

153 *
pBuf
++ = 
	`macSpiRódReg
(
FSMSTAT0
);

154 *
pBuf
++ = 
	`macSpiRódReg
(
FSMSTAT1
);

156 *
pBuf
++ = 
macD©a
.
rxCou¡
;

157 *
pBuf
++ = 
macD©a
.
dúe˘Cou¡
;

158 *
pBuf
++ = 
macMaö
.
°©e
;

159 *
pBuf
++ = 
macRxA˘ive
;

160 *
pBuf
 = 
macTxA˘ive
;

162 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_DBG
),

163 
MT_DEBUG_MAC_DATA_DUMP
, (
buf
), buf);

164 
	}
}

176 
	$MT_Pro˚ssDebugMsg
–
mtDebugMsg_t
 *
msg
 )

178 
byã
 *
msg_±r
;

179 
byã
 
d©aLí
;

180 
uöt8
 
buf
[11];

181 
uöt8
 *
pBuf
;

184 
d©aLí
 = 5 + (
msg
->
numP¨ams
 *  ( 
uöt16
 ));

187 
msg_±r
 = 
	`oßl_msg_Æloˇã
–(
byã
)(
SPI_0DATA_MSG_LEN
 + 
d©aLí
 + 1) );

188 i‡–
msg_±r
 )

191 
pBuf
 = 
buf
;

192 *
pBuf
++ = 
msg
->
compID
;

193 *
pBuf
++ = 
msg
->
£vîôy
;

194 *
pBuf
++ = 
msg
->
numP¨ams
;

196 i‡–
msg
->
numP¨ams
 >= 1 )

198 *
pBuf
++ = 
	`LO_UINT16
–
msg
->
∑øm1
 );

199 *
pBuf
++ = 
	`HI_UINT16
–
msg
->
∑øm1
 );

202 i‡–
msg
->
numP¨ams
 >= 2 )

204 *
pBuf
++ = 
	`LO_UINT16
–
msg
->
∑øm2
 );

205 *
pBuf
++ = 
	`HI_UINT16
–
msg
->
∑øm2
 );

208 i‡–
msg
->
numP¨ams
 == 3 )

210 *
pBuf
++ = 
	`LO_UINT16
–
msg
->
∑øm3
 );

211 *
pBuf
++ = 
	`HI_UINT16
–
msg
->
∑øm3
 );

214 *
pBuf
++ = 
	`LO_UINT16
–
msg
->
time°amp
 );

215 *
pBuf
++ = 
	`HI_UINT16
–
msg
->
time°amp
 );

217 #ifde‡
MT_UART_DEFAULT_PORT


220 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_DBG
), 0x80, 
d©aLí
, 
buf
);

222 
	`oßl_msg_dóŒoˇã
–
msg_±r
 );

224 
	}
}

235 
	$MT_Pro˚ssDebugSå
(
mtDebugSå_t
 *
d°r
)

237 
byã
 *
msg_±r
;

240 
msg_±r
 = 
	`oßl_mem_Æloc
–(
byã
)(
SPI_0DATA_MSG_LEN
 + 
d°r
->
°rLí
) );

241 i‡–
msg_±r
 )

243 #ifde‡
MT_UART_DEFAULT_PORT


246 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_DBG
), 
MT_DEBUG_MSG
, 
d°r
->
°rLí
, d°r->
pSåög
);

248 
	`oßl_mem_‰ì
–
msg_±r
 );

250 
	}
}

	@Components/mt/MT_DEBUG.h

39 #i‚de‡
MT_DEBUG_H


40 
	#MT_DEBUG_H


	)

42 #ifde‡
__˝lu•lus


50 
	~"OSAL.h
"

58 
oßl_evít_hdr_t
 
hdr
;

59 
uöt8
 
compID
;

60 
uöt8
 
£vîôy
;

61 
uöt8
 
numP¨ams
;

62 
uöt16
 
∑øm1
;

63 
uöt16
 
∑øm2
;

64 
uöt16
 
∑øm3
;

65 
uöt16
 
time°amp
;

66 } 
	tmtDebugMsg_t
;

70 
oßl_evít_hdr_t
 
hdr
;

71 
uöt8
 
°rLí
;

72 
uöt8
 *
pSåög
;

73 } 
	tmtDebugSå_t
;

76 #ifde‡
PACKET_FILTER_STATS


77 
uöt32
 
nwkInvÆidPackës
;

78 
uöt32
 
rxCrcFaûuª
;

79 
uöt32
 
rxCrcSuc˚ss
;

81 
uöt8
 
fsm°©0
;

82 
uöt8
 
fsm°©1
;

83 
uöt8
 
macD©a_rxCou¡
;

84 
uöt8
 
macD©a_dúe˘Cou¡
;

85 
uöt8
 
macMaö_°©e
;

86 
uöt8
 
macRxA˘ive
;

87 
uöt8
 
macTxA˘ive
;

88 } 
	tmtDebugMacD©aDump_t
;

94 #i‡
deföed
 (
MT_DEBUG_FUNC
)

98 
uöt8
 
MT_DebugComm™dPro˚ssög
(uöt8 *
pBuf
);

104 
MT_Pro˚ssDebugMsg
(
mtDebugMsg_t
 *
pD©a
);

109 
MT_Pro˚ssDebugSå
(
mtDebugSå_t
 *
pD©a
);

113 #ifde‡
__˝lu•lus


	@Components/mt/MT_MAC.c

40 #i‡
deföed
 (
MT_MAC_FUNC
Ë|| deföed (
MT_MAC_CB_FUNC
)

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"MT.h
"

47 
	~"MT_UART.h
"

48 
	~"ZMAC.h
"

49 
	~"MT_MAC.h
"

51 #i‡!
deföed
–
WIN32
 )

52 
	~"OnBﬂrd.h
"

56 
	~"mac_ødio_defs.h
"

59 
	~"hÆ_u¨t.h
"

61 #ifde‡
MAC_SECURITY


62 
	~"mac_£curôy_pib.h
"

70 
	#MT_MAC_PEND_LEN
(
≥ndAddrS≥c
) ((((pendAddrSpec) & 0x07) * 2) + \

71 ((((
≥ndAddrS≥c
Ë& 0x70Ë>> 4Ë* 8))

	)

74 
	#MT_MAC_ED_SCAN_MAXCHANNELS
 27

	)

77 
	#MT_MAC_PEND_LEN_MAX
 32

	)

80 
	#MT_MAC_SDU_LEN_MAX
 32

	)

83 
	#MT_MAC_SCAN_RESULT_LEN_MAX
 32

	)

86 
	#MT_MAC_BEACON_PAYLOAD_MAX
 16

	)

91 
	#DEFAULT_NSDU_HANDLE
 0x00

	)

93 
	#MT_MAC_LEN_ASSOCIATE_IND
 0x14

	)

94 
	#MT_MAC_LEN_ASSOCIATE_CNF
 0x0E

	)

95 
	#MT_MAC_LEN_DISASSOCIATE_IND
 0x14

	)

96 
	#MT_MAC_LEN_DISASSOCIATE_CNF
 0x0¯

	)

97 
	#MT_MAC_LEN_BEACON_NOTIFY_IND
 0x63

	)

98 
	#MT_MAC_LEN_ORPHAN_IND
 0x13

	)

99 
	#MT_MAC_LEN_SCAN_CNF
 0x09

	)

100 
	#MT_MAC_LEN_SYNC_LOSS_IND
 0x10

	)

101 
	#MT_MAC_LEN_COMM_STATUS_IND
 0x21

	)

102 
	#MT_MAC_LEN_DATA_CNF
 0x08

	)

103 
	#MT_MAC_LEN_DATA_IND
 0x2C

	)

104 
	#MT_MAC_LEN_PURGE_CNF
 0x02

	)

109 
uöt16
 
	g_macCÆlbackSub
;

112 
uöt8
 
	gmtMacBóc⁄Paylﬂd
[
MT_MAC_BEACON_PAYLOAD_MAX
];

117 
MT_MacSpi2Sec
–
ZMacSec_t
 *
pSec
, 
uöt8
 *
pSrc
 );

118 
MT_MacSpi2Addr
–
zAddrTy≥_t
 *
pD°
, 
uöt8
 *
pSrc
 );

119 
MT_MacAddr2Spi
–
uöt8
 *
pD°
, 
zAddrTy≥_t
 *
pSrc
 );

120 
MT_MacExtCpy
–
uöt8
 *
pD°
, uöt8 *
pSrc
 );

121 
MT_MacRevExtCpy
–
uöt8
 *
pD°
, uöt8 *
pSrc
 );

123 
MT_MacRe£tReq
(
uöt8
 *
pBuf
);

124 
MT_MacInô
(
uöt8
 *
pBuf
);

125 
MT_MacSèπReq
(
uöt8
 *
pBuf
);

126 
MT_MacSyncReq
(
uöt8
 *
pBuf
);

127 
MT_MacD©aReq
(
uöt8
 *
pBuf
);

128 
MT_MacAssocüãReq
(
uöt8
 *
pBuf
);

129 
MT_MacDißssocüãReq
(
uöt8
 *
pBuf
);

130 
MT_MacGëReq
(
uöt8
 *
pBuf
);

131 
MT_MacSëReq
(
uöt8
 *
pBuf
);

132 #ifde‡
MAC_SECURITY


133 
MT_MacSecurôyGëReq
(
uöt8
 *
pBuf
);

134 
MT_MacSecurôySëReq
(
uöt8
 *
pBuf
);

136 
MT_MacSˇnReq
(
uöt8
 * 
pBuf
);

137 
MT_MacPﬁlReq
(
uöt8
 *
pBuf
);

138 
MT_MacPurgeReq
(
uöt8
 *
pBuf
);

139 
MT_MacSëRxGaöReq
(
uöt8
 *
pBuf
);

140 
MT_MacAssocüãR•
(
uöt8
 *
pBuf
);

141 
MT_MacOΩh™R•
(
uöt8
 *
pBuf
);

155 
uöt8
 
	$MT_MacComm™dPro˚ssög
 (
uöt8
 *
pBuf
)

157 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

159 
pBuf
[
MT_RPC_POS_CMD1
])

161 
MT_MAC_RESET_REQ
:

162 
	`MT_MacRe£tReq
(
pBuf
);

165 
MT_MAC_INIT
:

166 
	`MT_MacInô
(
pBuf
);

169 
MT_MAC_START_REQ
:

170 
	`MT_MacSèπReq
(
pBuf
);

173 
MT_MAC_SYNC_REQ
:

174 
	`MT_MacSyncReq
(
pBuf
);

177 
MT_MAC_DATA_REQ
:

178 
	`MT_MacD©aReq
(
pBuf
);

181 
MT_MAC_ASSOCIATE_REQ
:

182 
	`MT_MacAssocüãReq
(
pBuf
);

185 
MT_MAC_DISASSOCIATE_REQ
:

186 
	`MT_MacDißssocüãReq
(
pBuf
);

189 
MT_MAC_GET_REQ
:

190 
	`MT_MacGëReq
(
pBuf
);

193 
MT_MAC_SET_REQ
:

194 
	`MT_MacSëReq
(
pBuf
);

197 #ifde‡
MAC_SECURITY


198 
MT_MAC_SECURITY_GET_REQ
:

199 
	`MT_MacSecurôyGëReq
(
pBuf
);

202 
MT_MAC_SECURITY_SET_REQ
:

203 
	`MT_MacSecurôySëReq
(
pBuf
);

207 
MT_MAC_GTS_REQ
:

211 
MT_MAC_SCAN_REQ
:

212 
	`MT_MacSˇnReq
(
pBuf
);

215 
MT_MAC_POLL_REQ
:

216 
	`MT_MacPﬁlReq
(
pBuf
);

219 
MT_MAC_PURGE_REQ
:

220 
	`MT_MacPurgeReq
(
pBuf
);

223 
MT_MAC_SET_RX_GAIN_REQ
:

224 
	`MT_MacSëRxGaöReq
(
pBuf
);

227 
MT_MAC_ASSOCIATE_RSP
:

228 
	`MT_MacAssocüãR•
(
pBuf
);

231 
MT_MAC_ORPHAN_RSP
:

232 
	`MT_MacOΩh™R•
(
pBuf
);

236 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

240  
°©us
;

241 
	}
}

252 
	$MT_MacRe£tReq
(
uöt8
 *
pBuf
)

254 
uöt8
 
ªtVÆue
, 
cmdId
;

257 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

258 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

260 
ªtVÆue
 = 
	`ZMacRe£t
(*
pBuf
);

263 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

264 
	}
}

275 
	$MT_MacInô
(
uöt8
 *
pBuf
)

277 
uöt8
 
ªtVÆue
, 
cmdId
;

280 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

281 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

283 
ªtVÆue
 = 
	`ZMacInô
();

286 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

287 
	}
}

298 
	$MT_MacSèπReq
(
uöt8
 *
pBuf
)

300 
uöt8
 
ªtVÆue
, 
cmdId
;

301 #ifde‡
RTR_NWK


302 
ZMacSèπReq_t
 
°¨tReq
;

306 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

307 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

309 #ifde‡
RTR_NWK


312 
°¨tReq
.
SèπTime
 = 
	`BUILD_UINT32
 (
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3]);

313 
pBuf
 += 4;

316 
°¨tReq
.
PANID
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

317 
pBuf
 += 2;

321 
°¨tReq
.
LogiˇlCh™√l
 = *
pBuf
++;

322 
°¨tReq
.
Ch™√lPage
 = *
pBuf
++;

323 
°¨tReq
.
Bóc⁄Ordî
 = *
pBuf
++;

324 
°¨tReq
.
Su≥r‰ameOrdî
 = *
pBuf
++;

325 
°¨tReq
.
PANCo‹dö©‹
 = *
pBuf
++;

326 
°¨tReq
.
B©ãryLi„Ext
 = *
pBuf
++;

327 
°¨tReq
.
Co‹dRólignmít
 = *
pBuf
++;

330 
	`MT_MacSpi2Sec
–&
°¨tReq
.
RólignSec
, 
pBuf
 );

331 
pBuf
 +
ZTEST_DEFAULT_SEC_LEN
;

334 
	`MT_MacSpi2Sec
–&
°¨tReq
.
Bóc⁄Sec
, 
pBuf
 );

337 
ªtVÆue
 = 
	`ZMacSèπReq
–&
°¨tReq
 );

341 
ªtVÆue
 = 
ZMacDíõd
;

346 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

347 
	}
}

358 
	$MT_MacSyncReq
(
uöt8
 *
pBuf
)

360 
uöt8
 
ªtVÆue
, 
cmdId
;

361 
ZMacSyncReq_t
 
syncReq
;

364 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

365 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

368 
syncReq
.
LogiˇlCh™√l
 = *
pBuf
++;

371 
syncReq
.
Ch™√lPage
 = *
pBuf
++;

374 
syncReq
.
TøckBóc⁄
 = *
pBuf
;

377 
ªtVÆue
 = 
	`ZMacSyncReq
–&
syncReq
 );

380 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

381 
	}
}

392 
	$MT_MacD©aReq
(
uöt8
 *
pBuf
)

394 
uöt8
 
ªtVÆue
, 
cmdId
;

395 
ZMacD©aReq_t
 
d©aReq
;

398 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

399 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

402 
d©aReq
.
D°Addr
.
addrMode
 = *
pBuf
++;

405 
	`MT_MacSpi2Addr
–&
d©aReq
.
D°Addr
, 
pBuf
);

406 
pBuf
 +
Z_EXTADDR_LEN
;

409 
d©aReq
.
D°PANId
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

410 
pBuf
 += 2;

413 
d©aReq
.
SrcAddrMode
 = *
pBuf
++;

416 
d©aReq
.
H™dÀ
 = *
pBuf
++;

419 
d©aReq
.
TxO±i⁄s
 = *
pBuf
++;

422 
d©aReq
.
Ch™√l
 = *
pBuf
++;

425 
d©aReq
.
Powî
 = *
pBuf
++;

428 
	`MT_MacSpi2Sec
–&
d©aReq
.
Sec
, 
pBuf
 );

429 
pBuf
 +
ZTEST_DEFAULT_SEC_LEN
;

432 
d©aReq
.
msduLígth
 = *
pBuf
++;

435 
d©aReq
.
msdu
 = 
pBuf
;

438 
ªtVÆue
 = 
	`ZMacD©aReq
–&
d©aReq
 );

441 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

442 
	}
}

453 
	$MT_MacAssocüãReq
(
uöt8
 *
pBuf
)

455 
uöt8
 
ªtVÆue
, 
cmdId
;

456 
ZMacAssocüãReq_t
 
assocReq
;

459 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

460 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

463 
assocReq
.
LogiˇlCh™√l
 = *
pBuf
++;

466 
assocReq
.
Ch™√lPage
 = *
pBuf
++;

469 
assocReq
.
Co‹dAddªss
.
addrMode
 = *
pBuf
++;

472 
	`MT_MacSpi2Addr
–&
assocReq
.
Co‹dAddªss
, 
pBuf
 );

473 
pBuf
 +
Z_EXTADDR_LEN
;

476 
assocReq
.
Co‹dPANId
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

477 
pBuf
 += 2;

480 
assocReq
.
C≠abûôyFœgs
 = *
pBuf
++;

483 
	`MT_MacSpi2Sec
–&
assocReq
.
Sec
, 
pBuf
 );

486 
ªtVÆue
 = 
	`ZMacAssocüãReq
–&
assocReq
 );

489 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

490 
	}
}

501 
	$MT_MacDißssocüãReq
(
uöt8
 *
pBuf
)

503 
uöt8
 
ªtVÆue
, 
cmdId
;

504 
ZMacDißssocüãReq_t
 
dißssocReq
;

507 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

508 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

511 
dißssocReq
.
Devi˚Addªss
.
addrMode
 = *
pBuf
++;

514 
	`MT_MacSpi2Addr
–&
dißssocReq
.
Devi˚Addªss
, 
pBuf
);

515 
pBuf
 +
Z_EXTADDR_LEN
;

518 
dißssocReq
.
Devi˚P™Id
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

519 
pBuf
 += 2;

522 
dißssocReq
.
DißssocüãRós⁄
 = *
pBuf
++;

525 
dißssocReq
.
TxIndúe˘
 = *
pBuf
++;

528 
	`MT_MacSpi2Sec
–&
dißssocReq
.
Sec
, 
pBuf
 );

531 
ªtVÆue
 = 
	`ZMacDißssocüãReq
–&
dißssocReq
 );

534 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

535 
	}
}

546 
	$MT_MacGëReq
(
uöt8
 *
pBuf
)

548 
uöt8
 
ª•Lí
, 
cmdId
, 
©å
;

549 
uöt8
 *
pRëBuf
;

552 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

553 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

556 
ª•Lí
 = 
ZTEST_DEFAULT_PARAM_LEN
;

559 
pRëBuf
 = 
	`oßl_mem_Æloc
(
ª•Lí
);

562 
©å
 = *
pBuf
;

564 i‡(
pRëBuf
)

567 
	`oßl_mem£t
(
pRëBuf
, 0, 
ª•Lí
);

569 
pRëBuf
[0] = 
ZFaûuª
;

571 
pRëBuf
[0] = 
	`ZMacGëReq
(
©å
, &pRetBuf[1]);

574 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 
ª•Lí
, 
pRëBuf
 );

577 
	`oßl_mem_‰ì
(
pRëBuf
);

579 
	}
}

590 
	$MT_MacSëReq
(
uöt8
 *
pBuf
)

592 
uöt8
 
ªtVÆue
, 
cmdId
, 
©å
;

595 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

596 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

603 
©å
 = *
pBuf
;

606 i‡–
©å
 =
ZMacBóc⁄MSDU
 )

608 
	`oßl_mem˝y
–
mtMacBóc⁄Paylﬂd
, 
pBuf
 + 1, 
MT_MAC_BEACON_PAYLOAD_MAX
 );

609 
ªtVÆue
 = 
	`ZMacSëReq
–(
ZMacAâribuãs_t
)
©å
 , (
byã
 *Ë&
mtMacBóc⁄Paylﬂd
 );

613 
ªtVÆue
 = 
	`ZMacSëReq
–(
ZMacAâribuãs_t
)
©å
 , 
pBuf
 + 1 );

617 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

618 
	}
}

620 #ifde‡
MAC_SECURITY


630 
	$MT_MacSecurôyGëReq
(
uöt8
 *
pBuf
)

632 
uöt8
 
ª•Lí
, 
cmdId
, 
©å
;

633 
uöt8
 *
pRëBuf
;

636 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

637 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

640 
ª•Lí
 = 
ZTEST_DEFAULT_SEC_PARAM_LEN
;

643 
pRëBuf
 = 
	`oßl_mem_Æloc
(
ª•Lí
);

646 
©å
 = *
pBuf
++;

648 i‡(
pRëBuf
)

651 
	`oßl_mem£t
(
pRëBuf
, 0, 
ª•Lí
);

653 
©å
)

655 
MAC_KEY_ID_LOOKUP_ENTRY
:

656 
MAC_KEY_DEVICE_ENTRY
:

657 
MAC_KEY_USAGE_ENTRY
:

659 
pRëBuf
[1] = *
pBuf
++;

660 
pRëBuf
[2] = *
pBuf
;

662 
MAC_KEY_ENTRY
:

663 
MAC_DEVICE_ENTRY
:

664 
MAC_SECURITY_LEVEL_ENTRY
:

666 
pRëBuf
[1] = *
pBuf
;

671 
pRëBuf
[0] = 
	`ZMacSecurôyGëReq
(
©å
, &pRetBuf[1]);

674 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 
ª•Lí
, 
pRëBuf
 );

677 
	`oßl_mem_‰ì
(
pRëBuf
);

679 
	}
}

690 
	$MT_MacSecurôySëReq
(
uöt8
 *
pBuf
)

692 
uöt8
 
cmdId
, 
©å
;

693 
uöt8
 
ªtVÆue
 = 
ZMAC_SUCCESS
;

696 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

697 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

704 
©å
 = *
pBuf
++;

705 i‡(
©å
 =
MAC_KEY_TABLE
 ||áâ∏=
MAC_DEVICE_TABLE
 ||áâ∏=
MAC_SECURITY_LEVEL_TABLE
)

707 
pBuf
 = 
NULL
;

709 
ªtVÆue
 = 
	`ZMacSecurôySëReq
–(
ZMacAâribuãs_t
)
©å
 , 
pBuf
 );

712 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

713 
	}
}

725 
	$MT_MacSˇnReq
(
uöt8
 * 
pBuf
)

727 
uöt8
 
ªtVÆue
, 
cmdId
;

728 
ZMacSˇnReq_t
 
sˇnReq
;

731 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

732 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

735 
sˇnReq
.
SˇnCh™√ls
 = 
	`BUILD_UINT32
 (
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3]);

736 
pBuf
 += 4;

739 
sˇnReq
.
SˇnTy≥
 = *
pBuf
++;

742 
sˇnReq
.
SˇnDuøti⁄
 = *
pBuf
++;

745 
sˇnReq
.
Ch™√lPage
 = *
pBuf
++;

748 
sˇnReq
.
MaxResu…s
 = *
pBuf
++;

751 
	`MT_MacSpi2Sec
–&
sˇnReq
.
Sec
, 
pBuf
 );

754 
ªtVÆue
 = 
	`ZMacSˇnReq
–&
sˇnReq
 );

757 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

758 
	}
}

769 
	$MT_MacPﬁlReq
(
uöt8
 *
pBuf
)

771 
uöt8
 
ªtVÆue
, 
cmdId
;

772 
ZMacPﬁlReq_t
 
pﬁlReq
;

775 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

776 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

779 
pﬁlReq
.
Co‹dAddªss
.
addrMode
 = *
pBuf
++;

782 
	`MT_MacSpi2Addr
–&
pﬁlReq
.
Co‹dAddªss
, 
pBuf
);

783 
pBuf
 +
Z_EXTADDR_LEN
;

786 
pﬁlReq
.
Co‹dP™Id
 = 
	`BUILD_UINT16
(
pBuf
[0] ,ÖBuf[1]);

787 
pBuf
 += 2;

790 
	`MT_MacSpi2Sec
(&
pﬁlReq
.
Sec
, 
pBuf
);

793 
ªtVÆue
 = 
	`ZMacPﬁlReq
–&
pﬁlReq
 );

796 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

797 
	}
}

808 
	$MT_MacPurgeReq
(
uöt8
 *
pBuf
)

810 
uöt8
 
ªtVÆue
, 
cmdId
;

813 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

814 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

817 
ªtVÆue
 = 
	`ZMacPurgeReq
 (*
pBuf
);

820 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

821 
	}
}

832 
	$MT_MacSëRxGaöReq
(
uöt8
 *
pBuf
)

834 
uöt8
 
ªtVÆue
, 
cmdId
;

837 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

838 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

840 #ifde‡
HAL_PA_LNA


842 i‡(*
pBuf
)

844 
	`HAL_PA_LNA_RX_HGM
();

848 
	`HAL_PA_LNA_RX_LGM
();

850 
ªtVÆue
 = 
ZSuc˚ss
;

852 
ªtVÆue
 = 
ZFaûuª
;

857 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

858 
	}
}

869 
	$MT_MacAssocüãR•
(
uöt8
 *
pBuf
)

871 
uöt8
 
ªtVÆue
, 
cmdId
;

872 
ZMacAssocüãR•_t
 
assocR•
;

875 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

876 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

878 #ifde‡
RTR_NWK


881 
	`MT_MacExtCpy
(
assocR•
.
Devi˚Addªss
, 
pBuf
);

882 
pBuf
 +
Z_EXTADDR_LEN
;

885 
assocR•
.
AssocSh‹tAddªss
 = 
	`BUILD_UINT16
(
pBuf
[0],pBuf[1]);

886 
pBuf
 += 2;

889 
assocR•
.
Sètus
 = *
pBuf
++;

892 
	`MT_MacSpi2Sec
–&
assocR•
.
Sec
, 
pBuf
 );

895 
ªtVÆue
 = 
	`ZMacAssocüãR•
–&
assocR•
 );

899 
ªtVÆue
 = 
ZMacDíõd
;

904 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
);

905 
	}
}

916 
	$MT_MacOΩh™R•
(
uöt8
 *
pBuf
)

918 
uöt8
 
ªtVÆue
, 
cmdId
;

919 
ZMacOΩh™R•_t
 
‹ph™R•
;

922 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

923 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

926 
	`MT_MacRevExtCpy
–
‹ph™R•
.
OΩh™Addªss
, 
pBuf
 );

927 
pBuf
 +
Z_EXTADDR_LEN
;

930 
‹ph™R•
.
Sh‹tAddªss
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

931 
pBuf
 += 2;

934 
‹ph™R•
.
AssocüãdMembî
 = *
pBuf
++;

937 
	`MT_MacSpi2Sec
–&
‹ph™R•
.
Sec
, 
pBuf
 );

940 
ªtVÆue
 = 
	`ZMacOΩh™R•
–&
‹ph™R•
 );

943 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
);

944 
	}
}

946 #i‡
deföed
 ( 
MT_MAC_CB_FUNC
 )

957 
	$nwk_MTCÆlbackSubNwkSyncLossInd
–
ZMacSyncLossInd_t
 *
∑øm
 )

959 
uöt8
 
ª•Lí
;

960 
uöt8
 *
pRëBuf
, *
ç
;

962 
ª•Lí
 = 
MT_MAC_LEN_SYNC_LOSS_IND
;

964 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

966 i‡–
pRëBuf
 )

968 
ç
 = 
pRëBuf
;

971 *
ç
++ = 
∑øm
->
hdr
.
Sètus
;

974 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
PANId
 );

975 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
PANId
 );

978 *
ç
++ = 
∑øm
->
LogiˇlCh™√l
;

981 *
ç
++ = 
∑øm
->
Ch™√lPage
;

984 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
Sec
);

987 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_SYNC_LOSS_IND
, 
ª•Lí
, 
pRëBuf
);

990 
	`oßl_mem_‰ì
(
pRëBuf
);

992 
	}
}

1003 
	$nwk_MTCÆlbackSubNwkAssocüãInd
–
ZMacAssocüãInd_t
 *
∑øm
 )

1005 
uöt8
 
ª•Lí
;

1006 
uöt8
 *
pRëBuf
, *
ç
;

1008 
ª•Lí
 = 
MT_MAC_LEN_ASSOCIATE_IND
;

1010 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1012 i‡–
pRëBuf
 )

1014 
ç
 = 
pRëBuf
;

1017 
	`MT_MacAddr2Spi
(
pRëBuf
, (
zAddrTy≥_t
*)
∑øm
->
Devi˚Addªss
);

1018 
ç
 +
Z_EXTADDR_LEN
;

1021 *
ç
++ = 
∑øm
->
C≠abûôyFœgs
;

1024 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
Sec
);

1027 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_ASSOCIATE_IND
, 
ª•Lí
, 
pRëBuf
);

1030 
	`oßl_mem_‰ì
(
pRëBuf
);

1032 
	}
}

1043 
	$nwk_MTCÆlbackSubNwkAssocüãCnf
–
ZMacAssocüãCnf_t
 *
∑øm
 )

1045 
uöt8
 
ª•Lí
;

1046 
uöt8
 *
pRëBuf
, *
ç
;

1048 
ª•Lí
 = 
MT_MAC_LEN_ASSOCIATE_CNF
;

1050 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1052 i‡–
pRëBuf
 )

1054 
ç
 = 
pRëBuf
;

1057 *
ç
++ = 
∑øm
->
hdr
.
Sètus
;

1060 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
AssocSh‹tAddªss
 );

1061 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
AssocSh‹tAddªss
 );

1064 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
Sec
);

1067 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_ASSOCIATE_CNF
, 
ª•Lí
, 
pRëBuf
);

1070 
	`oßl_mem_‰ì
(
pRëBuf
);

1072 
	}
}

1084 
	$nwk_MTCÆlbackSubNwkBóc⁄NŸifyInd
 ( 
ZMacBóc⁄NŸifyInd_t
 *
∑øm
 )

1086 
uöt8
 
ª•Lí
;

1087 
uöt8
 *
pRëBuf
, *
ç
;

1089 
ª•Lí
 = 
MT_MAC_LEN_BEACON_NOTIFY_IND
;

1091 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1093 i‡–
pRëBuf
 )

1095 
ç
 = 
pRëBuf
;

1098 *
ç
++ = 
∑øm
->
BSN
;

1101 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
pP™Desc
->
TimeSèmp
, 0 );

1102 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
pP™Desc
->
TimeSèmp
, 1 );

1103 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
pP™Desc
->
TimeSèmp
, 2 );

1104 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
pP™Desc
->
TimeSèmp
, 3 );

1107 *
ç
++ = 
∑øm
->
pP™Desc
->
Co‹dAddªss
.
addrMode
;

1110 
	`MT_MacAddr2Spi
–
ç
, &
∑øm
->
pP™Desc
->
Co‹dAddªss
 );

1111 
ç
 +
Z_EXTADDR_LEN
;

1114 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
pP™Desc
->
Co‹dPANId
 );

1115 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
pP™Desc
->
Co‹dPANId
 );

1118 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
pP™Desc
->
Su≥r‰ameS≥c
 );

1119 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
pP™Desc
->
Su≥r‰ameS≥c
 );

1122 *
ç
++ = 
∑øm
->
pP™Desc
->
LogiˇlCh™√l
;

1125 *
ç
++ = 
∑øm
->
pP™Desc
->
GTSPîmô
;

1128 *
ç
++ = 
∑øm
->
pP™Desc
->
LökQuÆôy
;

1131 *
ç
++ = 
∑øm
->
pP™Desc
->
SecurôyFaûuª
;

1134 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
pP™Desc
->
Sec
);

1135 
ç
 +
ZTEST_DEFAULT_SEC_LEN
;

1138 *
ç
++ = 
∑øm
->
PídAddrS≥c
;

1141 
	`oßl_mem£t
–
ç
, 0, 
MT_MAC_PEND_LEN_MAX
 );

1142 
	`oßl_mem˝y
–
ç
, 
∑øm
->
AddrLi°
, 
	`MIN
(
MT_MAC_PEND_LEN_MAX
, 
	`MT_MAC_PEND_LEN
’¨am->
PídAddrS≥c
)) );

1143 
ç
 +
MT_MAC_PEND_LEN_MAX
;

1146 *
ç
++ = 
∑øm
->
sduLígth
;

1149 
	`oßl_mem£t
–
ç
, 0, 
MT_MAC_SDU_LEN_MAX
 );

1150 
	`oßl_mem˝y
–
ç
, 
∑øm
->
sdu
, 
	`MIN
(
MT_MAC_SDU_LEN_MAX
,Ö¨am->
sduLígth
) );

1153 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_BEACON_NOTIFY_IND
, 
ª•Lí
, 
pRëBuf
);

1156 
	`oßl_mem_‰ì
(
pRëBuf
);

1159 
	}
}

1170 
	$nwk_MTCÆlbackSubNwkD©aCnf
–
ZMacD©aCnf_t
 *
∑øm
 )

1172 
uöt8
 *
pRëBuf
, *
ç
;

1175 
pRëBuf
 = 
	`oßl_mem_Æloc
(
MT_MAC_LEN_DATA_CNF
);

1177 i‡(
pRëBuf
)

1179 
ç
 = 
pRëBuf
;

1182 *
ç
++ = 
∑øm
->
hdr
.
Sètus
;

1185 *
ç
++ = 
∑øm
->
msduH™dÀ
;

1188 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 0 );

1189 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 1 );

1190 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 2 );

1191 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 3 );

1194 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
Time°amp2
);

1195 *
ç
 = 
	`HI_UINT16
–
∑øm
->
Time°amp2
);

1198 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_DATA_CNF
, 
MT_MAC_LEN_DATA_CNF
, 
pRëBuf
);

1201 
	`oßl_mem_‰ì
(
pRëBuf
);

1203 
	}
}

1214 
	$nwk_MTCÆlbackSubNwkD©aInd
–
ZMacD©aInd_t
 *
∑øm
 )

1216 
uöt8
 
ª•Lí
, 
ãmpLí
;

1217 
uöt8
 *
pRëBuf
, *
ç
;

1220 
ª•Lí
 = 
MT_MAC_LEN_DATA_IND
 + 
ZTEST_DEFAULT_DATA_LEN
;

1222 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1224 i‡–
pRëBuf
 )

1226 
ç
 = 
pRëBuf
;

1229 *
ç
++ = 
∑øm
->
SrcAddr
.
addrMode
;

1231 i‡(
∑øm
->
SrcAddr
.
addrMode
 !
SADDR_MODE_NONE
)

1234 
	`MT_MacAddr2Spi
–
ç
, &
∑øm
->
SrcAddr
 );

1239  
uöt8
 
i
 = 0; i< 
Z_EXTADDR_LEN
; i++ )

1241 
ç
[
i
] = 0x00;

1244 
ç
 +
Z_EXTADDR_LEN
;

1247 *
ç
++ = 
∑øm
->
D°Addr
.
addrMode
;

1250 
	`MT_MacAddr2Spi
–
ç
, &
∑øm
->
D°Addr
 );

1251 
ç
 +
Z_EXTADDR_LEN
;

1254 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 0 );

1255 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 1 );

1256 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 2 );

1257 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 3 );

1260 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
Time°amp2
);

1261 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
Time°amp2
);

1264 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
SrcPANId
 );

1265 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
SrcPANId
 );

1268 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
D°PANId
 );

1269 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
D°PANId
 );

1272 *
ç
++ = 
∑øm
->
mpduLökQuÆôy
;

1275 *
ç
++ = 
∑øm
->
C‹ªœti⁄
;

1278 *
ç
++ = 
∑øm
->
Rssi
;

1281 *
ç
++ = 
∑øm
->
D¢
;

1284 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
Sec
);

1285 
ç
 +
ZTEST_DEFAULT_SEC_LEN
;

1288 i‡–
∑øm
->
msduLígth
 < 
ZTEST_DEFAULT_DATA_LEN
 )

1289 
ãmpLí
 = 
∑øm
->
msduLígth
;

1291 
ãmpLí
 = 
ZTEST_DEFAULT_DATA_LEN
;

1294 *
ç
++ = 
ãmpLí
;

1297 
	`oßl_mem£t
–
ç
, 0, 
ZTEST_DEFAULT_DATA_LEN
 );

1298 
	`oßl_mem˝y
–
ç
, 
∑øm
->
msdu
, 
ãmpLí
 );

1301 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_DATA_IND
, 
ª•Lí
, 
pRëBuf
);

1304 
	`oßl_mem_‰ì
(
pRëBuf
);

1306 
	}
}

1317 
	$nwk_MTCÆlbackSubNwkDißssocüãInd
–
ZMacDißssocüãInd_t
 *
∑øm
 )

1319 
uöt8
 
ª•Lí
;

1320 
uöt8
 *
pRëBuf
, *
ç
;

1322 
ª•Lí
 = 
MT_MAC_LEN_DISASSOCIATE_IND
;

1324 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1326 i‡–
pRëBuf
 )

1328 
ç
 = 
pRëBuf
;

1331 
	`MT_MacRevExtCpy
–
pRëBuf
, 
∑øm
->
Devi˚Addªss
 );

1332 
ç
 +
Z_EXTADDR_LEN
;

1335 *
ç
++ = 
∑øm
->
DißssocüãRós⁄
;

1338 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
Sec
);

1341 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_DISASSOCIATE_IND
, 
ª•Lí
, 
pRëBuf
);

1344 
	`oßl_mem_‰ì
(
pRëBuf
);

1346 
	}
}

1357 
	$nwk_MTCÆlbackSubNwkDißssocüãCnf
–
ZMacDißssocüãCnf_t
 *
∑øm
 )

1359 
uöt8
 
ª•Lí
;

1360 
uöt8
 *
pRëBuf
, *
ç
;

1362 
ª•Lí
 = 
MT_MAC_LEN_DISASSOCIATE_CNF
;

1364 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1366 i‡–
pRëBuf
 )

1368 
ç
 = 
pRëBuf
;

1371 *
ç
++ = 
∑øm
->
hdr
.
Sètus
;

1374 *
ç
++ = 
∑øm
->
Devi˚Addªss
.
addrMode
;

1377 
	`MT_MacAddr2Spi
–
ç
, &
∑øm
->
Devi˚Addªss
 );

1378 
ç
 +
Z_EXTADDR_LEN
;

1381 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
∑nID
 );

1382 *
ç
 = 
	`HI_UINT16
–
∑øm
->
∑nID
 );

1385 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_DISASSOCIATE_CNF
, 
ª•Lí
, 
pRëBuf
);

1388 
	`oßl_mem_‰ì
(
pRëBuf
);

1390 
	}
}

1401 
	$nwk_MTCÆlbackSubNwkOΩh™Ind
–
ZMacOΩh™Ind_t
 *
∑øm
 )

1403 
uöt8
 
ª•Lí
;

1404 
uöt8
 *
pRëBuf
, *
ç
;

1406 
ª•Lí
 = 
MT_MAC_LEN_ORPHAN_IND
;

1408 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1410 i‡–
pRëBuf
 )

1412 
ç
 = 
pRëBuf
;

1415 
	`MT_MacRevExtCpy
–
ç
, 
∑øm
->
OΩh™Addªss
 );

1416 
ç
 +
Z_EXTADDR_LEN
;

1419 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
Sec
);

1422 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_ORPHAN_IND
, 
ª•Lí
, 
pRëBuf
);

1425 
	`oßl_mem_‰ì
(
pRëBuf
);

1427 
	}
}

1438 
	$nwk_MTCÆlbackSubNwkPﬁlCnf
–
byã
 
Sètus
 )

1440 
uöt8
 
ªtVÆue
;

1443 
ªtVÆue
 = 
Sètus
;

1446 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_POLL_CNF
, 1, &
ªtVÆue
);

1447 
	}
}

1458 
	$nwk_MTCÆlbackSubNwkSˇnCnf
–
ZMacSˇnCnf_t
 *
∑øm
 )

1460 
uöt8
 
ª•Lí
, 
ªsu…Lí
;

1461 
uöt8
 *
pRëBuf
, *
ç
;

1464 i‡–
∑øm
->
SˇnTy≥
 =
ZMAC_ED_SCAN
 )

1465 
ªsu…Lí
 = 
MT_MAC_ED_SCAN_MAXCHANNELS
;

1466 i‡–
∑øm
->
SˇnTy≥
 =
ZMAC_ACTIVE_SCAN
 )

1467 
ªsu…Lí
 = (
∑øm
->
Resu…Li°Size
 * –
ZMacP™Desc_t
 ));

1468 i‡–
∑øm
->
SˇnTy≥
 =
ZMAC_PASSIVE_SCAN
 )

1469 
ªsu…Lí
 = (
∑øm
->
Resu…Li°Size
 * –
ZMacP™Desc_t
 ));

1470 i‡–
∑øm
->
SˇnTy≥
 =
ZMAC_ORPHAN_SCAN
 )

1471 
ªsu…Lí
 = 0;

1476 
ªsu…Lí
 = 
	`MIN
‘esu…Lí, 
MT_MAC_SCAN_RESULT_LEN_MAX
);

1478 
ª•Lí
 = 
MT_MAC_LEN_SCAN_CNF
 + 
MT_MAC_SCAN_RESULT_LEN_MAX
 + 1;

1481 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1483 i‡–
pRëBuf
 )

1485 
ç
 = 
pRëBuf
;

1488 *
ç
++ = 
∑øm
->
hdr
.
Sètus
;

1491 *
ç
++ = 0;

1494 *
ç
++ = 
∑øm
->
SˇnTy≥
;

1497 *
ç
++ = 
∑øm
->
Ch™√lPage
;

1500 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Unsˇ¬edCh™√ls
, 0 );

1501 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Unsˇ¬edCh™√ls
, 1 );

1502 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Unsˇ¬edCh™√ls
, 2 );

1503 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Unsˇ¬edCh™√ls
, 3 );

1506 *
ç
++ = 
∑øm
->
Resu…Li°Size
;

1509 *
ç
++ = 
MT_MAC_SCAN_RESULT_LEN_MAX
;

1512 
	`oßl_mem˝y
–
ç
, 
∑øm
->
Resu…
.
pP™Des¸ùt‹
, 
ªsu…Lí
 );

1515 
	`oßl_mem£t
–
ç
, 0, (
MT_MAC_SCAN_RESULT_LEN_MAX
 - 
ªsu…Lí
));

1518 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_SCAN_CNF
, 
ª•Lí
, 
pRëBuf
);

1521 
	`oßl_mem_‰ì
(
pRëBuf
);

1523 
	}
}

1534 
	$nwk_MTCÆlbackSubCommSètusInd
 ( 
ZMacCommSètusInd_t
 *
∑øm
 )

1536 
uöt8
 
ª•Lí
;

1537 
uöt8
 *
pRëBuf
, *
ç
;

1539 
ª•Lí
 = 
MT_MAC_LEN_COMM_STATUS_IND
;

1541 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1543 i‡–
pRëBuf
 )

1545 
ç
 = 
pRëBuf
;

1548 *
ç
++ = 
∑øm
->
hdr
.
Sètus
;

1551 *
ç
++ = 
∑øm
->
SrcAddªss
.
addrMode
;

1552 
	`MT_MacAddr2Spi
–
ç
, &
∑øm
->
SrcAddªss
 );

1553 
ç
 +
Z_EXTADDR_LEN
;

1556 *
ç
++ = 
∑øm
->
D°Addªss
.
addrMode
;

1557 
	`MT_MacAddr2Spi
–
ç
, &
∑øm
->
D°Addªss
 );

1558 
ç
 +
Z_EXTADDR_LEN
;

1561 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
PANId
 );

1562 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
PANId
 );

1565 *
ç
++ = 
∑øm
->
Rós⁄
;

1568 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
Sec
);

1571 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_COMM_STATUS_IND
, 
ª•Lí
, 
pRëBuf
);

1574 
	`oßl_mem_‰ì
(
pRëBuf
);

1576 
	}
}

1587 
	$nwk_MTCÆlbackSubNwkSèπCnf
–
uöt8
 
Sètus
 )

1589 
uöt8
 
ªtVÆue
;

1591 
ªtVÆue
 = 
Sètus
;

1594 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_START_CNF
, 1, &
ªtVÆue
);

1595 
	}
}

1606 
	$nwk_MTCÆlbackSubNwkRxE«bÀCnf
 ( 
byã
 
Sètus
 )

1608 
uöt8
 
ªtVÆue
;

1611 
ªtVÆue
 = 
Sètus
;

1614 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_RX_ENABLE_CNF
, 1, &
ªtVÆue
);

1615 
	}
}

1626 
	$nwk_MTCÆlbackSubNwkPurgeCnf
–
ZMacPurgeCnf_t
 *
∑øm
 )

1628 
uöt8
 
ª•Lí
;

1629 
uöt8
 *
pRëBuf
, *
ç
;

1631 
ª•Lí
 = 
MT_MAC_LEN_PURGE_CNF
;

1633 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1635 i‡–
pRëBuf
 )

1637 
ç
 = 
pRëBuf
;

1640 *
ç
++ = 
∑øm
->
hdr
.
Sètus
;

1643 *
ç
 = 
∑øm
->
msduH™dÀ
;

1646 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_PURGE_CNF
, 
ª•Lí
, 
pRëBuf
);

1649 
	`oßl_mem_‰ì
(
pRëBuf
);

1651 
	}
}

1671 
	$MT_MacExtCpy
–
uöt8
 *
pD°
, uöt8 *
pSrc
 )

1673 
öt8
 
i
;

1675  
i
 = 0; i < 
Z_EXTADDR_LEN
; i++ )

1677 *
pD°
++ = 
pSrc
[
i
];

1679 
	}
}

1693 
	$MT_MacRevExtCpy
–
uöt8
 *
pD°
, uöt8 *
pSrc
 )

1695 
öt8
 
i
;

1697  
i
 = 
Z_EXTADDR_LEN
 - 1; i >= 0; i-- )

1699 *
pD°
++ = 
pSrc
[
i
];

1701 
	}
}

1714 
	$MT_MacSpi2Addr
–
zAddrTy≥_t
 *
pD°
, 
uöt8
 *
pSrc
 )

1716 i‡–
pD°
->
addrMode
 =
Addr16Bô
 )

1718 
pD°
->
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pSrc
[0] ,ÖSrc[1] );

1720 i‡–
pD°
->
addrMode
 =
Addr64Bô
 )

1722 
	`MT_MacRevExtCpy
–
pD°
->
addr
.
extAddr
, 
pSrc
 );

1724 
	}
}

1736 
	$MT_MacSpi2Sec
–
ZMacSec_t
 *
pSec
, 
uöt8
 *
pSrc
 )

1739 
	`oßl_mem˝y
 (
pSec
, 
pSrc
,  (
ZMacSec_t
));

1740 
	}
}

1752 
	$MT_MacAddr2Spi
–
uöt8
 *
pD°
, 
zAddrTy≥_t
 *
pSrc
 )

1754 i‡–
pSrc
->
addrMode
 =
Addr16Bô
 )

1756 *
pD°
++ = 
	`LO_UINT16
–
pSrc
->
addr
.
sh‹tAddr
 );

1757 *
pD°
++ = 
	`HI_UINT16
–
pSrc
->
addr
.
sh‹tAddr
 );

1758 *
pD°
++ = 0; *pDst++ = 0; *pDst++ = 0;

1759 *
pD°
++ = 0; *pDst++ = 0; *pDst = 0;

1761 i‡–
pSrc
->
addrMode
 =
Addr64Bô
 )

1763  
uöt8
 
i
 = 0; i< 
Z_EXTADDR_LEN
; i++ )

1765 *
pD°
++ = 
pSrc
->
addr
.
extAddr
[
i
];

1770  
uöt8
 
i
 = 0; i< 
Z_EXTADDR_LEN
; i++ )

1772 *
pD°
++ = 
pSrc
->
addr
.
extAddr
[
i
];

1775 
	}
}

	@Components/mt/MT_MAC.h

40 #i‚de‡
MT_MAC_H


41 
	#MT_MAC_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"ZMAC.h
"

62 #i‡
deföed
 (
MT_MAC_CB_FUNC
)

64 
	#CB_ID_NWK_SYNC_LOSS_IND
 0x0001

	)

65 
	#CB_ID_NWK_ASSOCIATE_IND
 0x0002

	)

66 
	#CB_ID_NWK_ASSOCIATE_CNF
 0x0004

	)

67 
	#CB_ID_NWK_BEACON_NOTIFY_IND
 0x0008

	)

68 
	#CB_ID_NWK_DATA_CNF
 0x0010

	)

69 
	#CB_ID_NWK_DATA_IND
 0x0020

	)

70 
	#CB_ID_NWK_DISASSOCIATE_IND
 0x0040

	)

71 
	#CB_ID_NWK_DISASSOCIATE_CNF
 0x0080

	)

72 
	#CB_ID_NWK_PURGE_CNF
 0x0100

	)

73 
	#CB_ID_NWK_ORPHAN_IND
 0x0400

	)

74 
	#CB_ID_NWK_POLL_CNF
 0x0800

	)

75 
	#CB_ID_NWK_SCAN_CNF
 0x1000

	)

76 
	#CB_ID_NWK_COMM_STATUS_IND
 0x2000

	)

77 
	#CB_ID_NWK_START_CNF
 0x4000

	)

78 
	#CB_ID_NWK_RX_ENABLE_CNF
 0x8000

	)

88 
uöt16
 
_macCÆlbackSub
;

105 #ifde‡
MT_MAC_FUNC


110 
uöt8
 
MT_MacComm™dPro˚ssög
–uöt8 *
pBuf
 );

115 #i‡
deföed
 ( 
MT_MAC_CB_FUNC
 )

120 
nwk_MTCÆlbackSubNwkAssocüãInd
–
ZMacAssocüãInd_t
 *
∑øm
 );

125 
nwk_MTCÆlbackSubNwkAssocüãCnf
–
ZMacAssocüãCnf_t
 *
∑øm
 );

130 
nwk_MTCÆlbackSubNwkD©aCnf
–
ZMacD©aCnf_t
 *
∑øm
 );

135 
nwk_MTCÆlbackSubNwkD©aInd
–
ZMacD©aInd_t
 *
∑øm
 );

141 
nwk_MTCÆlbackSubNwkDißssocüãInd
–
ZMacDißssocüãInd_t
 *
∑øm
 );

146 
nwk_MTCÆlbackSubNwkDißssocüãCnf
–
ZMacDißssocüãCnf_t
 *
∑øm
 );

151 
nwk_MTCÆlbackSubNwkOΩh™Ind
–
ZMacOΩh™Ind_t
 *
∑øm
 );

156 
nwk_MTCÆlbackSubNwkPﬁlCnf
–
byã
 
Sètus
 );

161 
nwk_MTCÆlbackSubNwkSˇnCnf
–
ZMacSˇnCnf_t
 *
∑øm
 );

166 
nwk_MTCÆlbackSubNwkSèπCnf
–
uöt8
 
Sètus
 );

171 
nwk_MTCÆlbackSubNwkSyncLossInd
–
ZMacSyncLossInd_t
 *
∑øm
 );

176 
nwk_MTCÆlbackSubNwkRxE«bÀCnf
 ( 
byã
 
Sètus
 );

181 
nwk_MTCÆlbackSubCommSètusInd
 ( 
ZMacCommSètusInd_t
 *
∑øm
 );

186 
nwk_MTCÆlbackSubNwkPurgeCnf
–
ZMacPurgeCnf_t
 *
∑øm
 );

191 
nwk_MTCÆlbackSubNwkBóc⁄NŸifyInd
 ( 
ZMacBóc⁄NŸifyInd_t
 *
∑øm
 );

197 #ifde‡
__˝lu•lus


	@Components/mt/MT_NWK.c

44 
	~"ZComDef.h
"

45 
	~"MT.h
"

46 
	~"MT_NWK.h
"

47 
	~"NLMEDE.h
"

48 
	~"nwk.h
"

49 
	~"nwk_globÆs.h
"

50 
	~"nwk_utû.h
"

51 
	~"OSAL.h
"

52 
	~"ZDAµ.h
"

54 #i‡!
deföed
–
WIN32
 )

55 
	~"OnBﬂrd.h
"

61 
uöt16
 
	g_nwkCÆlbackSub
;

70 #i‡
deföed
 (
MT_NWK_FUNC
)

71 
MT_NldeD©aReque°
(
uöt8
 *
pBuf
);

72 
MT_NlmeNëw‹kF‹m©i⁄Reque°
(
uöt8
 *
pBuf
);

73 
MT_NlmePîmôJoöögReque°
(
uöt8
 *
pBuf
);

74 
MT_NlmeSèπRouãrReque°
(
uöt8
 *
pBuf
);

75 
MT_NlmeJoöReque°
(
uöt8
 *
pBuf
);

76 
MT_NlmeLóveReque°
(
uöt8
 *
pBuf
);

77 
MT_NlmeRe£tReque°
(
uöt8
 *
pBuf
);

78 
MT_NlmeGëReque°
(
uöt8
 *
pBuf
);

79 
MT_NlmeSëReque°
(
uöt8
 *
pBuf
);

80 
MT_NlmeNëw‹kDiscovîyReque°
(
uöt8
 *
pBuf
);

81 
MT_NlmeRouãDiscovîyReque°
(
uöt8
 *
pBuf
);

82 
MT_NlmeDúe˘JoöReque°
(
uöt8
 *
pBuf
);

83 
MT_NlmeOΩh™JoöReque°
(
uöt8
 *
pBuf
);

85 
uöt8
 
MT_Nwk_D©aReque°
–
uöt16
 
d°Addr
, uöt8 
nsduLí
, uöt8* 
nsdu
,

86 
uöt8
 
nsduH™dÀ
, 
uöt16
 
nsduH™dÀO±i⁄s
,

87 
uöt8
 
£cuª
, uöt8 
discovîRouã
,

88 
uöt8
 
ødius
);

91 #i‡
deföed
 (
MT_NWK_FUNC
)

105 
uöt8
 
	$MT_NwkComm™dPro˚ssög
(
uöt8
 *
pBuf
)

107 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

109 
pBuf
[
MT_RPC_POS_CMD1
])

111 
MT_NWK_INIT
:

112 
	`nwk_öô
(
NWK_TaskID
);

115 
MT_NLDE_DATA_REQ
:

116 
	`MT_NldeD©aReque°
(
pBuf
);

119 
MT_NLME_NETWORK_FORMATION_REQ
:

120 
	`MT_NlmeNëw‹kF‹m©i⁄Reque°
(
pBuf
);

123 
MT_NLME_PERMIT_JOINING_REQ
:

124 
	`MT_NlmePîmôJoöögReque°
(
pBuf
);

127 
MT_NLME_JOIN_REQ
:

128 
	`MT_NlmeJoöReque°
(
pBuf
);

131 
MT_NLME_LEAVE_REQ
:

132 
	`MT_NlmeLóveReque°
(
pBuf
);

135 
MT_NLME_RESET_REQ
:

136 
	`MT_NlmeRe£tReque°
(
pBuf
);

139 
MT_NLME_GET_REQ
:

140 
	`MT_NlmeGëReque°
(
pBuf
);

143 
MT_NLME_SET_REQ
:

144 
	`MT_NlmeSëReque°
(
pBuf
);

147 
MT_NLME_NETWORK_DISCOVERY_REQ
:

148 
	`MT_NlmeNëw‹kDiscovîyReque°
(
pBuf
);

151 
MT_NLME_ROUTE_DISCOVERY_REQ
:

152 
	`MT_NlmeRouãDiscovîyReque°
(
pBuf
);

155 
MT_NLME_DIRECT_JOIN_REQ
:

156 
	`MT_NlmeDúe˘JoöReque°
(
pBuf
);

159 
MT_NLME_ORPHAN_JOIN_REQ
:

160 
	`MT_NlmeOΩh™JoöReque°
(
pBuf
);

163 
MT_NLME_START_ROUTER_REQ
:

164 
	`MT_NlmeSèπRouãrReque°
(
pBuf
);

168 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

172  
°©us
;

173 
	}
}

184 
	$MT_NldeD©aReque°
(
uöt8
 *
pBuf
)

186 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

187 
uöt16
 
d°Addr
;

188 
uöt8
 
d©aLí
 = 0;

189 
uöt8
 *
d©aPå
;

190 
uöt8
 
cmdId
;

193 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

194 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

197 
d°Addr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

198 
pBuf
 +–
d°Addr
 );

201 
d©aLí
 = *
pBuf
++;

202 
d©aPå
 = 
pBuf
;

205 
pBuf
 +
ZTEST_DEFAULT_DATA_LEN
;

208 
ªtVÆue
 = 
	`MT_Nwk_D©aReque°
(
d°Addr
, 
d©aLí
, 
d©aPå
, 
pBuf
[0], 
	`BUILD_UINT16
(pBuf[1],ÖBuf[2]),

209 
pBuf
[3],ÖBuf[4],ÖBuf[5]);

212 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

213 
	}
}

225 
	$MT_NlmeNëw‹kF‹m©i⁄Reque°
(
uöt8
 *
pBuf
)

227 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

228 
uöt16
 
∑nId
;

229 
uöt32
 
ch™√lLi°
;

230 
uöt8
 
cmdId
;

233 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

234 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

237 
∑nId
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

238 
pBuf
 +(
uöt16
);

241 
ch™√lLi°
 = 
	`oßl_buûd_uöt32
(
pBuf
, 4);

242 
pBuf
 +(
uöt32
);

244 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

246 
ªtVÆue
 = 
	`NLME_Nëw‹kF‹m©i⁄Reque°
–
∑nId
, 
NULL
, 
ch™√lLi°
, 
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3] );

250 
ªtVÆue
 = 
ZUnsuµ‹ãdMode
;

254 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

255 
	}
}

266 
	$MT_NlmePîmôJoöögReque°
(
uöt8
 *
pBuf
)

268 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

269 
uöt8
 
cmdId
;

272 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

273 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

275 i‡(
ZSTACK_ROUTER_BUILD
)

277 
ªtVÆue
 = 
	`NLME_PîmôJoöögReque°
(*
pBuf
);

281 
ªtVÆue
 = 
ZUnsuµ‹ãdMode
;

285 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

286 
	}
}

297 
	$MT_NlmeSèπRouãrReque°
(
uöt8
 *
pBuf
)

299 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

300 
uöt8
 
cmdId
;

303 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

304 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

306 i‡–
ZSTACK_ROUTER_BUILD
 )

308 
ªtVÆue
 = (
uöt8
)
	`NLME_SèπRouãrReque°
(
pBuf
[0],ÖBuf[1],ÖBuf[2]);

312 
ªtVÆue
 = 
ZUnsuµ‹ãdMode
;

316 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

317 
	}
}

328 
	$MT_NlmeJoöReque°
(
uöt8
 *
pBuf
)

330 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

331 
uöt8
 
dummyExPANID
[
Z_EXTADDR_LEN
] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

332 
uöt16
 
∑nID
;

333 
uöt8
 
cmdId
;

334 
√tw‹kDesc_t
 *
pNwkDesc
;

337 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

338 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

339 
∑nID
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

341 if((
pNwkDesc
 = 
	`nwk_gëNëw‹kDesc
(
dummyExPANID
,
∑nID
, 
pBuf
[2])Ë!
NULL
 )

343 i‡(
pNwkDesc
->
cho£nRouãr
 =
INVALID_NODE_ADDR
 )

345 
ªtVÆue
 = 
ZNwkNŸPîmôãd
;

349 
ªtVÆue
 = 
	`NLME_JoöReque°
–
dummyExPANID
, 
∑nID
, 
pBuf
[2],ÖBuf[3],

350 
pNwkDesc
->
cho£nRouãr
,ÖNwkDesc->
cho£nRouãrDïth
 );

355 
ªtVÆue
 = 
ZNwkNŸPîmôãd
;

358 i‡–
pBuf
[3] & 
CAPINFO_RCVR_ON_IDLE
 )

361 
	`NLME_SëPﬁlR©e
( 0 );

362 
	`NLME_SëQueuedPﬁlR©e
( 0 );

363 
	`NLME_SëRe•⁄£R©e
( 0 );

367 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

368 
	}
}

379 
	$MT_NlmeLóveReque°
(
uöt8
 *
pBuf
)

381 
NLME_LóveReq_t
 
ªq
;

382 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

383 
uöt8
 
ödex
, 
cmdId
;

386 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

387 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

390 
ödex
=0;((ödex < 
Z_EXTADDR_LEN
Ë&& (
pBuf
[index] == 0));index++);

392 i‡(
ödex
 =
Z_EXTADDR_LEN
)

394 
ªq
.
extAddr
 = 
NULL
;

398 
ªq
.
extAddr
 = 
pBuf
;

402 
pBuf
 +
Z_EXTADDR_LEN
;

404 
ªq
.
ªmoveChûdªn
 = 
FALSE
;

405 
ªq
.
ªjoö
 = 
FALSE
;

406 
ªq
.
sûít
 = 
FALSE
;

408 
ªtVÆue
 = 
	`NLME_LóveReq
(&
ªq
);

411 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

412 
	}
}

424 
	$MT_NlmeRe£tReque°
(
uöt8
 *
pBuf
)

426 
uöt8
 
ªtVÆue
 = 
	`NLME_Re£tReque°
();

429 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_RESET_REQ
, 1, &
ªtVÆue
);

430 
	}
}

441 
	$MT_NlmeGëReque°
(
uöt8
 *
pBuf
)

443 
uöt8
 
d©aBuf
[11];

444 
uöt8
 
©å
, 
ödex
, 
cmdId
;

447 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

448 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

450 
©å
 = *
pBuf
++;

451 
ödex
 = *
pBuf
;

453 
d©aBuf
[0] = 
	`NLME_GëReque°
((
ZNwkAâribuãs_t
 )
©å
, 
ödex
, &dataBuf[1]);

456 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
,

457 11, 
d©aBuf
 );

458 
	}
}

469 
	$MT_NlmeSëReque°
(
uöt8
 *
pBuf
)

471 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

472 
uöt8
 
cmdId
;

475 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

476 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

478 
ªtVÆue
 = 
	`NLME_SëReque°
((
ZNwkAâribuãs_t
)
pBuf
[0],ÖBuf[1], &pBuf[2]);

481 
	`ZDAµ_NVUpd©e
();

484 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
 );

485 
	}
}

496 
	$MT_NlmeNëw‹kDiscovîyReque°
(
uöt8
 *
pBuf
)

498 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

499 
uöt8
 
cmdId
;

500 
uöt32
 
sˇnCh™√ls
;

503 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

504 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

507 
sˇnCh™√ls
 = 
	`oßl_buûd_uöt32
(
pBuf
, 4);

508 
pBuf
 +(
uöt32
);

510 
ªtVÆue
 = 
	`NLME_Nëw‹kDiscovîyReque°
(
sˇnCh™√ls
, *
pBuf
);

513 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
 );

514 
	}
}

525 
	$MT_NlmeRouãDiscovîyReque°
(
uöt8
 *
pBuf
)

527 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

528 
uöt8
 
cmdId
;

531 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

532 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

534 i‡–
ZSTACK_ROUTER_BUILD
 )

536 
ªtVÆue
 = 
	`NLME_RouãDiscovîyReque°
(
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]),ÖBuf[2],ÖBuf[3]);

540 
ªtVÆue
 = 
ZUnsuµ‹ãdMode
;

544 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

545 
	}
}

556 
	$MT_NlmeDúe˘JoöReque°
(
uöt8
 *
pBuf
)

558 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

559 
uöt8
 
cmdId
;

562 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

563 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

565 i‡–
ZSTACK_ROUTER_BUILD
 )

567 
ªtVÆue
 = 
	`NLME_Dúe˘JoöReque°
–
pBuf
,ÖBuf[8] );

571 
ªtVÆue
 = 
ZUnsuµ‹ãdMode
;

575 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

576 
	}
}

587 
	$MT_NlmeOΩh™JoöReque°
(
uöt8
 *
pBuf
)

589 
uöt8
 
i
, 
j
, 
©å
;

590 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

591 
uöt32
 
ch™√lLi°
;

592 
uöt8
 
cmdId
;

594 i‡–
ZSTACK_END_DEVICE_BUILD
 )

597 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

598 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

601 
ch™√lLi°
 = 
	`oßl_buûd_uöt32
(
pBuf
, 4);

602 
pBuf
 +(
uöt32
);

605 
j
 = 
©å
 = 0;

607 
i
 = 0; i < 
ED_SCAN_MAXCHANNELS
; i++)

609 i‡(
ch™√lLi°
 & (1 << 
i
))

611 
j
++;

612 
©å
 = 
i
;

617 i‡(
j
 == 1)

619 
_NIB
.
sˇnDuøti⁄
 = *
pBuf
;

620 
_NIB
.
nwkLogiˇlCh™√l
 = 
©å
;

621 
_NIB
.
ch™√lLi°
 = channelList;

622 i‡–!
_NIB
.
C≠abûôyFœgs
 )

624 
_NIB
.
C≠abûôyFœgs
 = 
ZDO_C⁄fig_Node_Des¸ùt‹
.CapabilityFlags;

627 
devSèã
 = 
DEV_NWK_ORPHAN
;

628 
ªtVÆue
 = (
uöt8
)
	`NLME_OΩh™JoöReque°
(
ch™√lLi°
, *
pBuf
);

632 
ªtVÆue
 = 
ZNwkInvÆidP¨am
;

637 
ªtVÆue
 = 
ZUnsuµ‹ãdMode
;

641 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

642 
	}
}

653 
uöt8
 
	$MT_Nwk_D©aReque°
(
uöt16
 
d°Addr
, 
uöt8
 
nsduLí
, uöt8* 
nsdu
,

654 
uöt8
 
nsduH™dÀ
, 
uöt16
 
nsduH™dÀO±i⁄s
,

655 
uöt8
 
£cuª
, uöt8 
discovîRouã
,

656 
uöt8
 
ødius
)

658 
uöt8
 
°©us
;

659 
NLDE_D©aReqAŒoc_t
 
dø
;

660 
NLDE_D©aReq_t
* 
ªq
;

663 
dø
.
ovîhód
 = (
NLDE_D©aReq_t
);

664 
dø
.
nsduLí
 =ÇsduLen;

665 
dø
.
£cuª
 = secure;

667 
ªq
 = 
	`NLDE_D©aReqAŒoc
(&
dø
);

669 i‡–
ªq
 !
NULL
 )

671 
	`oßl_mem˝y
(
ªq
->
nfd
.
nsdu
,Çsdu, 
nsduLí
);

673 
ªq
->
nfd
.
d°Addr
 = dstAddr;

674 
ªq
->
nfd
.
nsduH™dÀO±i⁄s
 =ÇsduHandleOptions;

675 
ªq
->
nfd
.
discovîRouã
 = discoverRoute;

676 
ªq
->
nfd
.
ødius
 =Ñadius;

678 
°©us
 = 
	`NLDE_D©aReq
–
ªq
 );

682 
°©us
 = 
ZMemEº‹
;

685  
°©us
;

686 
	}
}

689 #i‡
deföed
 ( 
MT_NWK_CB_FUNC
 )

700 
	$nwk_MTCÆlbackSubD©aC⁄fúm
(
uöt8
 
nsduH™dÀ
, 
ZSètus_t
 
°©us
)

702 
uöt8
 
buf
[2];

704 
buf
[0] = 
nsduH™dÀ
;

705 
buf
[1] = (
uöt8
)
°©us
;

707 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLDE_DATA_CONF
, 2, 
buf
 );

708 
	}
}

723 
	$nwk_MTCÆlbackSubD©aIndiˇti⁄
(
uöt16
 
SrcAddªss
, 
öt16
 
nsduLígth
, 
uöt8
 *
nsdu
, uöt8 
LökQuÆôy
)

725 
uöt8
 *
msgPå
;

726 
uöt8
 *
msg
;

727 
uöt8
 
msgLí
;

729 
msgLí
 = –
uöt16
 ) + –
uöt8
 ) + 
ZTEST_DEFAULT_DATA_LEN


730 + –
uöt8
);

732 
msgPå
 = 
	`oßl_mem_Æloc
–
msgLí
 );

733 i‡–
msgPå
 )

736 
msg
 = 
msgPå
;

739 *
msg
++ = 
	`LO_UINT16
–
SrcAddªss
 );

740 *
msg
++ = 
	`HI_UINT16
–
SrcAddªss
 );

744 *
msg
++ = ( 
uöt8
 ) 
nsduLígth
;

746 
	`oßl_mem£t
–
msg
, 
NULL
, 
ZTEST_DEFAULT_DATA_LEN
 );

747 
	`oßl_mem˝y
–
msg
, 
nsdu
, 
nsduLígth
 );

748 
msg
 +
ZTEST_DEFAULT_DATA_LEN
;

750 *
msg
++ = 
LökQuÆôy
;

752 
	`MT_BuûdAndSídZToﬁRe•⁄£
–((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLDE_DATA_IND
, 
msgLí
, 
msgPå
 );

754 
	`oßl_mem_‰ì
–
msgPå
 );

756 
	}
}

767 
	$nwk_MTCÆlbackSubInôCo‹dC⁄fúm
–
ZSètus_t
 
Sètus
 )

769 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_NETWORK_FORMATION_CONF
,

770 (
uöt8
), (uöt8*)&
Sètus
);

771 
	}
}

782 
	$nwk_MTCÆlbackSubSèπRouãrC⁄fúm
–
ZSètus_t
 
Sètus
 )

784 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_START_ROUTER_CONF
,

785 (
uöt8
), (uöt8*)&
Sètus
);

786 
	}
}

797 
	$nwk_MTCÆlbackSubJoöC⁄fúm
(
uöt16
 
P™Id
, 
ZSètus_t
 
Sètus
)

799 
uöt8
 
msg
[
Z_EXTADDR_LEN
 + 3];

802 
	`ZMacGëReq
–
ZMacExtAddr
, 
msg
 );

804 
msg
[
Z_EXTADDR_LEN
 + 0] = 
	`LO_UINT16
(
P™Id
);

805 
msg
[
Z_EXTADDR_LEN
 + 1] = 
	`HI_UINT16
(
P™Id
);

806 
msg
[
Z_EXTADDR_LEN
 + 2] = (
uöt8
)
Sètus
;

808 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_JOIN_CONF
, 
Z_EXTADDR_LEN
 + 3, 
msg
 );

809 
	}
}

820 
	$nwk_MTCÆlbackSubNëw‹kDiscovîyC⁄fúm
–
uöt8
 
Resu…Cou¡
, 
√tw‹kDesc_t
 *
Nëw‹kLi°
 )

822 
uöt8
 
Àn
;

823 
uöt8
 *
msgPå
;

824 
uöt8
 *
msg
;

825 
uöt8
 
i
;

828 i‡(
Resu…Cou¡
 * (
√tw‹kDesc_t
Ë> 
MT_UART_TX_BUFF_MAX
 - (1 + 
SPI_0DATA_MSG_LEN
))

830 
Resu…Cou¡
 = (
MT_UART_TX_BUFF_MAX
 - (1 + 
SPI_0DATA_MSG_LEN
)Ë/ (
√tw‹kDesc_t
);

833 
Àn
 = 1 + 
Resu…Cou¡
 * (
√tw‹kDesc_t
);

834 
msgPå
 = 
	`oßl_mem_Æloc
–
Àn
 );

835 i‡–
msgPå
 )

838 
msg
 = 
msgPå
;

840 *
msg
++ = 
Resu…Cou¡
;

842  
i
 = 0; i < 
Resu…Cou¡
; i++ )

844 *
msg
++ = 
	`LO_UINT16
–
Nëw‹kLi°
->
∑nId
 );

845 *
msg
++ = 
	`HI_UINT16
–
Nëw‹kLi°
->
∑nId
 );

846 *
msg
++ = 
Nëw‹kLi°
->
logiˇlCh™√l
;

847 *
msg
++ = 
BEACON_ORDER_NO_BEACONS
;

848 *
msg
++ = 
BEACON_ORDER_NO_BEACONS
;

849 *
msg
++ = 
Nëw‹kLi°
->
rouãrC≠acôy
;

850 *
msg
++ = 
Nëw‹kLi°
->
devi˚C≠acôy
;

851 *
msg
++ = 
Nëw‹kLi°
->
vîsi⁄
;

852 *
msg
++ = 
Nëw‹kLi°
->
°ackProfûe
;

855 
Nëw‹kLi°
 = (
√tw‹kDesc_t
*)Nëw‹kLi°->
√xtDesc
;

858 
	`MT_BuûdAndSídZToﬁRe•⁄£
 (((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_NETWORK_DISCOVERY_CONF
, 
Àn
, 
msgPå
);

860 
	`oßl_mem_‰ì
–
msgPå
 );

862 
	}
}

874 
	$nwk_MTCÆlbackSubJoöIndiˇti⁄
–
uöt16
 
Sh‹tAddªss
, 
uöt8
 *
ExãndedAddªss
,

875 
uöt8
 
C≠abûôyFœgs
 )

877 
uöt8
 *
msgPå
;

878 
uöt8
 *
msg
;

879 
uöt8
 
Àn
;

881 
Àn
 = –
uöt16
 ) + 
Z_EXTADDR_LEN
 + –
uöt8
 );

882 
msgPå
 = 
	`oßl_mem_Æloc
–
Àn
 );

884 i‡–
msgPå
 )

887 
msg
 = 
msgPå
;

890 *
msg
++ = 
	`LO_UINT16
–
Sh‹tAddªss
 );

891 *
msg
++ = 
	`HI_UINT16
–
Sh‹tAddªss
 );

893 
	`oßl_˝yExtAddr
–
msg
, 
ExãndedAddªss
 );

894 
msg
 +
Z_EXTADDR_LEN
;

896 *
msg
 = 
C≠abûôyFœgs
;

898 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_JOIN_IND
, 
Àn
, 
msgPå
 );

900 
	`oßl_mem_‰ì
–
msgPå
 );

902 
	}
}

914 
	$nwk_MTCÆlbackSubLóveC⁄fúm
–
uöt8
 *
Devi˚Addªss
, 
ZSètus_t
 
Sètus
 )

916 
uöt8
 *
msgPå
;

917 
uöt8
 *
msg
;

919 
msgPå
 = 
	`oßl_mem_Æloc
–
Z_EXTADDR_LEN
 + –
uöt8
 ) );

920 i‡–
msgPå
 )

923 
msg
 = 
msgPå
;

926 
	`oßl_˝yExtAddr
–
msg
, 
Devi˚Addªss
 );

927 
msg
 +
Z_EXTADDR_LEN
;

929 *
msg
 = (
uöt8
)
Sètus
;

931 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_LEAVE_CONF
,

932 
Z_EXTADDR_LEN
 + –
uöt8
 ), 
msgPå
 );

934 
	`oßl_mem_‰ì
–
msgPå
 );

936 
	}
}

946 
	$nwk_MTCÆlbackSubLóveIndiˇti⁄
–
uöt8
 *
Devi˚Addªss
 )

948 
uöt8
 
msg
[
Z_EXTADDR_LEN
+1];

951 i‡–
Devi˚Addªss
 )

953 
	`oßl_˝yExtAddr
–
msg
, 
Devi˚Addªss
 );

957 
	`oßl_mem£t
–
msg
, 0, 
Z_EXTADDR_LEN
 );

961 
msg
[
Z_EXTADDR_LEN
] = 0;

963 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_LEAVE_IND
, 
Z_EXTADDR_LEN
+1, 
msg
 );

964 
	}
}

974 
	$nwk_MTCÆlbackSubSyncIndiˇti⁄
( )

976 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_SYNC_IND
, 0, 
NULL
 );

977 
	}
}

988 
	$nwk_MTCÆlbackSubPﬁlC⁄fúm
–
uöt8
 
°©us
 )

990 
uöt8
 
msg
 = 
°©us
;

992 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_POLL_CONF
, 1, &
msg
 );

993 
	}
}

	@Components/mt/MT_NWK.h

46 
	~"hÆ_ty≥s.h
"

47 
	~"NLMEDE.h
"

52 
	#NWKCB_CHECK
(
cbi
Ë(
_nwkCÆlbackSub
 & (cbi))

	)

58 
	#CB_ID_NLDE_DATA_CNF
 0x0001

	)

59 
	#CB_ID_NLDE_DATA_IND
 0x0002

	)

60 
	#CB_ID_NLME_INIT_COORD_CNF
 0x0004

	)

61 
	#CB_ID_NLME_JOIN_CNF
 0x0008

	)

62 
	#CB_ID_NLME_JOIN_IND
 0x0010

	)

63 
	#CB_ID_NLME_LEAVE_CNF
 0x0020

	)

64 
	#CB_ID_NLME_LEAVE_IND
 0x0040

	)

65 
	#CB_ID_NLME_POLL_CNF
 0x0080

	)

66 
	#CB_ID_NLME_SYNC_IND
 0x0200

	)

67 
	#CB_ID_NLME_NWK_DISC_CNF
 0x2000

	)

68 
	#CB_ID_NLME_START_ROUTER_CNF
 0x8000

	)

73 
uöt16
 
_nwkCÆlbackSub
;

79 #ifde‡
MT_NWK_FUNC


83 
uöt8
 
MT_NwkComm™dPro˚ssög
 (
byã
 *
pBuf
);

87 #ifde‡
MT_NWK_CB_FUNC


91 
nwk_MTCÆlbackSubD©aC⁄fúm
(
byã
 
nsduH™dÀ
, 
ZSètus_t
 
°©us
);

96 
nwk_MTCÆlbackSubD©aIndiˇti⁄
(
uöt16
 
SrcAddªss
, 
öt16
 
nsduLígth
,

97 
byã
 *
nsdu
, byã 
LökQuÆôy
);

102 
nwk_MTCÆlbackSubInôCo‹dC⁄fúm
(
ZSètus_t
 
Sètus
);

107 
nwk_MTCÆlbackSubSèπRouãrC⁄fúm
(
ZSètus_t
 
Sètus
);

112 
nwk_MTCÆlbackSubNëw‹kDiscovîyC⁄fúm
(
byã
 
Resu…Cou¡
, 
√tw‹kDesc_t
 *
Nëw‹kLi°
);

117 
nwk_MTCÆlbackSubJoöC⁄fúm
(
uöt16
 
P™Id
, 
ZSètus_t
 
Sètus
);

122 
nwk_MTCÆlbackSubJoöIndiˇti⁄
(
uöt16
 
Sh‹tAddªss
, 
byã
 *
ExãndedAddªss
,

123 
byã
 
C≠abûôyFœgs
);

128 
nwk_MTCÆlbackSubLóveC⁄fúm
(
byã
 *
Devi˚Addªss
, 
ZSètus_t
 
Sètus
);

133 
nwk_MTCÆlbackSubLóveIndiˇti⁄
(
byã
 *
Devi˚Addªss
);

138 
nwk_MTCÆlbackSubSyncIndiˇti⁄
();

143 
nwk_MTCÆlbackSubPﬁlC⁄fúm
(
byã
 
°©us
);

150 
nwk_MTCÆlbackPögC⁄fúm
(
uöt16
 
D°Addªss
, 
byã
 
pögSeqNo
,

151 
uöt16
 
dñay
, 
byã
 
rouãC¡
, byã *
rouãAddr
);

	@Components/mt/MT_OTA.c

40 #ifde‡
MT_OTA_FUNC


45 
	~"ZComDef.h
"

46 
	~"OSAL.h
"

47 
	~"MT.h
"

48 
	~"MT_OTA.h
"

50 #i‡!
deföed
–
WIN32
 )

51 
	~"OnBﬂrd.h
"

61 
uöt8
 
	gOTA_Task
 = 0xFF;

80 
	$MT_OèRegi°î
(
uöt8
 
èskId
)

82 
OTA_Task
 = 
èskId
;

83 
	}
}

97 
uöt8
 
	$MT_OèComm™dPro˚ssög
(
uöt8
* 
pBuf
)

99 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

100 
uöt8
 
Àn
;

101 
OTA_MtMsg_t
 *
pMsg
;

102 
uöt8
 
cmd
 = 
pBuf
[
MT_RPC_POS_CMD1
];

104 i‡(
cmd
 =
MT_OTA_FILE_READ_RSP
 || cmd =
MT_OTA_NEXT_IMG_RSP
)

107 i‡(
OTA_Task
 != 0xff)

109 
Àn
 = 
pBuf
[
MT_RPC_POS_LEN
];

110 
pMsg
 = (
OTA_MtMsg_t
*Ë
	`oßl_msg_Æloˇã
(
Àn
 + (OTA_MtMsg_t));

112 i‡(
pMsg
)

114 
pMsg
->
hdr
.
evít
 = 
MT_SYS_OTA_MSG
;

115 
pMsg
->
cmd
 = cmd;

117 
	`oßl_mem˝y
(
pMsg
->
d©a
, &
pBuf
[
MT_RPC_POS_DAT0
], 
Àn
);

118 
	`oßl_msg_£nd
(
OTA_Task
, (
uöt8
*Ë
pMsg
);

124 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

127  
°©us
;

128 
	}
}

142 
uöt8
 
	$MT_OèFûeRódReq
(
afAddrTy≥_t
 *
pAddr
, 
z˛OTA_FûeID_t
 *
pFûeId
, 
uöt8
 
Àn
, 
uöt32
 
off£t
)

144 
uöt8
 
msgLí
;

145 
uöt8
 *
pBuf
;

146 
uöt8
 *
p
;

149 i‡(
Àn
 + 
MT_OTA_FILE_READ_RSP_LEN
 + 
SPI_0DATA_MSG_LEN
 > 
MT_UART_RX_BUFF_MAX
)

153 
msgLí
 = 
MT_OTA_FILE_READ_REQ_LEN
;

156 i‡((
p
 = 
pBuf
 = 
	`MT_Tøn•‹tAŒoc
(0, 
msgLí
)Ë!
NULL
)

159 *
p
++ = 
msgLí
;

160 *
p
++ = (
uöt8
Ë
MT_RPC_CMD_AREQ
 | (uöt8Ë
MT_RPC_SYS_OTA
;

161 *
p
++ = 
MT_OTA_FILE_READ_REQ
;

164 
p
 = 
	`OTA_FûeIdToSåóm
(
pFûeId
,Ö);

167 
p
 = 
	`OTA_AfAddrToSåóm
(
pAddr
,Ö);

170 *
p
++ = 
	`BREAK_UINT32
(
off£t
, 0);

171 *
p
++ = 
	`BREAK_UINT32
(
off£t
, 1);

172 *
p
++ = 
	`BREAK_UINT32
(
off£t
, 2);

173 *
p
++ = 
	`BREAK_UINT32
(
off£t
, 3);

175 *
p
 = 
Àn
;

178 
	`MT_Tøn•‹tSíd
(
pBuf
);

180  
ZSuc˚ss
;

183  
ZMemEº‹
;

184 
	}
}

200 
uöt8
 
	$MT_OèGëImage
(
afAddrTy≥_t
 *
pAddr
, 
z˛OTA_FûeID_t
 *
pFûeId
, 
uöt16
 
hwVî
,

201 
uöt8
 *
õì
, uöt8 
›ti⁄s
)

203 
uöt8
 
msgLí
;

204 
uöt8
 *
pBuf
;

205 
uöt8
 *
p
;

208 
msgLí
 = 
MT_OTA_GET_IMG_MSG_LEN
;

211 i‡((
p
 = 
pBuf
 = 
	`MT_Tøn•‹tAŒoc
(0, 
msgLí
)Ë!
NULL
)

214 *
p
++ = 
msgLí
;

215 *
p
++ = (
uöt8
Ë
MT_RPC_CMD_AREQ
 | (uöt8Ë
MT_RPC_SYS_OTA
;

216 *
p
++ = 
MT_OTA_NEXT_IMG_REQ
;

219 
p
 = 
	`OTA_FûeIdToSåóm
(
pFûeId
,Ö);

222 
p
 = 
	`OTA_AfAddrToSåóm
(
pAddr
,Ö);

225 *
p
++ = 
›ti⁄s
;

228 *
p
++ = 
	`LO_UINT16
(
hwVî
);

229 *
p
 = 
	`HI_UINT16
(
hwVî
);

231 i‡(
õì
)

232 
	`oßl_mem˝y
(
p
, 
õì
, 
Z_EXTADDR_LEN
);

235 
	`MT_Tøn•‹tSíd
(
pBuf
);

237  
ZSuc˚ss
;

240  
ZMemEº‹
;

241 
	}
}

256 
uöt8
 
	$MT_OèSídSètus
(
uöt16
 
sh‹tAddr
, 
uöt8
 
ty≥
, uöt8 
°©us
, uöt8 
›ti⁄Æ
)

258 
uöt8
 
msgLí
;

259 
uöt8
 *
pBuf
;

260 
uöt8
 *
p
;

263 
msgLí
 = 7;

266 i‡((
p
 = 
pBuf
 = 
	`MT_Tøn•‹tAŒoc
(0, 
msgLí
)Ë!
NULL
)

269 *
p
++ = 
msgLí
;

270 *
p
++ = (
uöt8
Ë
MT_RPC_CMD_AREQ
 | (uöt8Ë
MT_RPC_SYS_OTA
;

271 *
p
++ = 
MT_OTA_STATUS_IND
;

274 *
p
++ = 
	`LO_UINT16
(
_NIB
.
nwkP™Id
);

275 *
p
++ = 
	`HI_UINT16
(
_NIB
.
nwkP™Id
);

276 *
p
++ = 
	`LO_UINT16
(
sh‹tAddr
);

277 *
p
++ = 
	`HI_UINT16
(
sh‹tAddr
);

278 *
p
++ = 
ty≥
;

279 *
p
++ = 
°©us
;

280 *
p
 = 
›ti⁄Æ
;

283 
	`MT_Tøn•‹tSíd
(
pBuf
);

285  
ZSuc˚ss
;

288  
ZMemEº‹
;

289 
	}
}

	@Components/mt/MT_OTA.h

44 
	~"ZComDef.h
"

45 
	~"MT.h
"

46 
	~"APSMEDE.h
"

47 
	~"AF.h
"

48 
	~"Ÿa_comm⁄.h
"

50 #i‡!
deföed
–
WIN32
 )

51 
	~"OnBﬂrd.h
"

56 
oßl_evít_hdr_t
 
	mhdr
;

57 
uöt8
 
	mcmd
;

58 
uöt8
 
	md©a
[];

59 } 
	tOTA_MtMsg_t
;

65 
	#MT_OTA_FILE_READ_REQ_LEN
 26

	)

66 
	#MT_OTA_FILE_READ_RSP_LEN
 26

	)

68 
	#MT_OTA_GET_IMG_MSG_LEN
 31

	)

78 
uöt8
 
MT_OèComm™dPro˚ssög
(uöt8* 
pBuf
);

83 
uöt8
 
MT_OèFûeRódReq
(
afAddrTy≥_t
 *
pAddr
, 
z˛OTA_FûeID_t
 *
pFûeId
,

84 
uöt8
 
Àn
, 
uöt32
 
off£t
);

86 
uöt8
 
MT_OèGëImage
(
afAddrTy≥_t
 *
pAddr
, 
z˛OTA_FûeID_t
 *
pFûeId
,

87 
uöt16
 
hwVî
, 
uöt8
 *
õì
, uöt8 
›ti⁄s
);

89 
uöt8
 
MT_OèSídSètus
(
uöt16
 
sh‹tAddr
, uöt8 
ty≥
, uöt8 
°©us
, uöt8 
›ti⁄Æ
);

94 
MT_OèRegi°î
(
uöt8
 
èskId
);

	@Components/mt/MT_RPC.h

40 #i‚de‡
MT_RPC_H


41 
	#MT_RPC_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_ty≥s.h
"

58 
	#MT_RPC_FRAME_HDR_SZ
 3

	)

65 
	#MT_RPC_DATA_MAX
 250

	)

68 
	#MT_RPC_CMD_TYPE_MASK
 0xE0

	)

71 
	#MT_RPC_SUBSYSTEM_MASK
 0x1F

	)

74 
	#MT_RPC_POS_LEN
 0

	)

75 
	#MT_RPC_POS_CMD0
 1

	)

76 
	#MT_RPC_POS_CMD1
 2

	)

77 
	#MT_RPC_POS_DAT0
 3

	)

80 
	#MT_RPC_SUCCESS
 0

	)

81 
	#MT_RPC_ERR_SUBSYSTEM
 1

	)

82 
	#MT_RPC_ERR_COMMAND_ID
 2

	)

83 
	#MT_RPC_ERR_PARAMETER
 3

	)

84 
	#MT_RPC_ERR_LENGTH
 4

	)

91 
MT_RPC_CMD_POLL
 = 0x00,

92 
MT_RPC_CMD_SREQ
 = 0x20,

93 
MT_RPC_CMD_AREQ
 = 0x40,

94 
MT_RPC_CMD_SRSP
 = 0x60,

95 
MT_RPC_CMD_RES4
 = 0x80,

96 
MT_RPC_CMD_RES5
 = 0xA0,

97 
MT_RPC_CMD_RES6
 = 0xC0,

98 
MT_RPC_CMD_RES7
 = 0xE0

99 } 
	tmtRpcCmdTy≥_t
;

102 
MT_RPC_SYS_RES0
,

103 
MT_RPC_SYS_SYS
,

104 
MT_RPC_SYS_MAC
,

105 
MT_RPC_SYS_NWK
,

106 
MT_RPC_SYS_AF
,

107 
MT_RPC_SYS_ZDO
,

108 
MT_RPC_SYS_SAPI
,

109 
MT_RPC_SYS_UTIL
,

110 
MT_RPC_SYS_DBG
,

111 
MT_RPC_SYS_APP
,

112 
MT_RPC_SYS_OTA
,

113 
MT_RPC_SYS_MAX


115 } 
	tmtRpcSysTy≥_t
;

119 
uöt8
 *(*
Æloc
)(
mtRpcCmdTy≥_t
 
ty≥
, uöt8 
Àn
);

120 (*
£nd
)(
uöt8
 *
pBuf
);

121 } 
	tmtTøn•‹t_t
;

123 
uöt8
 (*
	tmtPro˚ssMsg_t
)(
	tuöt8
 *
	tpBuf
);

128 #ifde‡
__˝lu•lus


	@Components/mt/MT_SAPI.c

44 
	~"ZComDef.h
"

45 
	~"AddrMgr.h
"

46 
	~"OSAL.h
"

47 
	~"OSAL_Nv.h
"

48 
	~"OnBﬂrd.h
"

49 
	~"MT.h
"

50 
	~"MT_SAPI.h
"

51 
	~"MT_UART.h
"

56 #i‡
deföed
 ( 
MT_SAPI_CB_FUNC
 )

57 
uöt16
 
	g_ßpiCÆlbackSub
;

63 
MT_S≠iSy°emRe£t
(
uöt8
 *
pBuf
);

64 
MT_S≠iSèπ
(
uöt8
* 
pBuf
);

65 
MT_S≠iBödDevi˚
(
uöt8
 *
pBuf
);

66 
MT_S≠iAŒowBöd
(
uöt8
 *
pBuf
);

67 
MT_S≠iSídD©a
(
uöt8
 *
pBuf
);

68 
MT_S≠iRódCfg
(
uöt8
 *
pBuf
);

69 
MT_S≠iWrôeCfg
(
uöt8
 *
pBuf
);

70 
MT_S≠iGëDevInfo
(
uöt8
 *
pBuf
);

71 
MT_S≠iFödDev
(
uöt8
 *
pBuf
);

72 
MT_S≠iPîmôJoö
(
uöt8
 *
pBuf
);

73 
MT_S≠iAµRegi°î
(
uöt8
 *
pBuf
);

75 #i‡
deföed
 ( 
MT_SAPI_FUNC
 )

85 
uöt8
 
	$MT_S≠iComm™dPro˚ssög
(
uöt8
 *
pBuf
)

87 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

89 
pBuf
[
MT_RPC_POS_CMD1
])

91 
MT_SAPI_START_REQ
:

92 
	`MT_S≠iSèπ
(
pBuf
);

95 
MT_SAPI_BIND_DEVICE_REQ
:

96 
	`MT_S≠iBödDevi˚
(
pBuf
);

99 
MT_SAPI_ALLOW_BIND_REQ
:

100 
	`MT_S≠iAŒowBöd
(
pBuf
);

103 
MT_SAPI_SEND_DATA_REQ
:

104 
	`MT_S≠iSídD©a
(
pBuf
);

107 
MT_SAPI_READ_CFG_REQ
:

108 
	`MT_S≠iRódCfg
(
pBuf
);

111 
MT_SAPI_WRITE_CFG_REQ
:

112 
	`MT_S≠iWrôeCfg
(
pBuf
);

115 
MT_SAPI_GET_DEV_INFO_REQ
:

116 
	`MT_S≠iGëDevInfo
(
pBuf
);

119 
MT_SAPI_FIND_DEV_REQ
:

120 
	`MT_S≠iFödDev
(
pBuf
);

123 
MT_SAPI_PMT_JOIN_REQ
:

124 
	`MT_S≠iPîmôJoö
(
pBuf
);

127 
MT_SAPI_SYS_RESET
:

128 
	`MT_S≠iSy°emRe£t
(
pBuf
);

131 
MT_SAPI_APP_REGISTER_REQ
:

132 
	`MT_S≠iAµRegi°î
(
pBuf
);

136 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

140  
°©us
;

141 
	}
}

152 
	$MT_S≠iSy°emRe£t
(
uöt8
 *
pBuf
)

154 
	`zb_Sy°emRe£t
();

155 
	}
}

166 
	$MT_S≠iSèπ
(
uöt8
 *
pBuf
)

168 
	`zb_SèπReque°
();

171 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
MT_SAPI_START_REQ
, 0, 
NULL
);

172 
	}
}

182 
	$MT_S≠iAµRegi°î
(
uöt8
 *
pBuf
)

184 
uöt8
 
ªt
 = 
ZApsIŒegÆReque°
;

187 i‡–(
ßpi_ïDesc
.
ídPoöt
 =0Ë&& (*
pBuf
 != 0) )

189 
ªt
 = 
	`MT_BuûdEndpoötDesc
–
pBuf
+
MT_RPC_FRAME_HDR_SZ
, &
ßpi_ïDesc
 );

190 i‡–
ªt
 =
ZSuc˚ss
 )

192 
ªt
 = 
	`afRegi°î
–&
ßpi_ïDesc
 );

194 
	`afSëM©ch
(
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
, 
FALSE
);

197 i‡–
ªt
 !
ZSuc˚ss
 )

199 
ßpi_ïDesc
.
ídPoöt
 = 0;

204 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
),

205 
MT_SAPI_APP_REGISTER_REQ
, 1, &
ªt
);

206 
	}
}

216 
	$MT_S≠iBödDevi˚
(
uöt8
 *
pBuf
)

218 
uöt8
 
cmdId
;

221 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

222 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

224 i‡(
	`AddrMgrExtAddrVÆid
(
pBuf
+3))

226 
	`zb_BödDevi˚
(
pBuf
[0], 
	`BUILD_UINT16
(pBuf[1],ÖBuf[2]), &pBuf[3]);

230 
	`zb_BödDevi˚
(
pBuf
[0], 
	`BUILD_UINT16
’Buf[1],ÖBuf[2]), (
uöt8
 *)
NULL
);

234 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 0, 
NULL
);

235 
	}
}

246 
	$MT_S≠iAŒowBöd
(
uöt8
 *
pBuf
)

248 
uöt8
 
cmdId
;

251 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

252 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

254 
	`zb_AŒowBöd
(
pBuf
[0]);

257 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 0, 
NULL
);

258 
	}
}

269 
	$MT_S≠iSídD©a
(
uöt8
 *
pBuf
)

271 
uöt8
 
cmdId
;

272 
uöt16
 
de°ö©i⁄
, 
comm™d
;

273 
uöt8
 
Àn
, 
h™dÀ
, 
txO±i⁄
, 
ødius
;

276 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

277 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

280 
de°ö©i⁄
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

282 
comm™d
 = 
	`BUILD_UINT16
(
pBuf
[2],ÖBuf[3]);

284 
h™dÀ
 = 
pBuf
[4];

286 
txO±i⁄
 = 
pBuf
[5];

288 
ødius
 = 
pBuf
[6];

290 
Àn
 = 
pBuf
[7];

292 
	`zb_SídD©aReque°
(
de°ö©i⁄
, 
comm™d
, 
Àn
, &
pBuf
[8], 
h™dÀ
, 
txO±i⁄
, 
ødius
);

295 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 0, 
NULL
);

296 
	}
}

307 
	$MT_S≠iRódCfg
(
uöt8
 *
pBuf
)

309 
uöt8
 
Àn
, 
ªtSètus
;

310 
uöt8
 
cfgId
, 
cmdId
;

311 
uöt8
 *
pRëBuf
;

314 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

315 
cfgId
 = 
pBuf
[
MT_RPC_POS_DAT0
];

318 
Àn
 = (
uöt8
)
	`oßl_nv_ôem_Àn
(
cfgId
);

320 
pRëBuf
 = 
	`oßl_mem_Æloc
(
Àn
+3);

321 i‡(
pRëBuf
 !
NULL
)

323 i‡(
Àn
 && ((
cfgId
 !
ZCD_NV_NIB
Ë&& (cfgId !
ZCD_NV_DEVICE_LIST
) &&

324 (
cfgId
 !
ZCD_NV_ADDRMGR
Ë&& (cfgId !
ZCD_NV_NWKKEY
)))

326 i‡((
	`zb_RódC⁄figuøti⁄
(
cfgId
, 
Àn
, 
pRëBuf
+3)Ë=
ZSUCCESS
)

328 
ªtSètus
 = 
ZSuc˚ss
;

332 
ªtSètus
 = 
ZFaûuª
;

337 
ªtSètus
 = 
ZInvÆidP¨amëî
;

340 i‡(
ªtSètus
 !
ZSuc˚ss
)

343 
Àn
 = 0;

347 
pRëBuf
[0] = 
ªtSètus
;

349 
pRëBuf
[1] = 
cfgId
;

351 
pRëBuf
[2] = 
Àn
;

354 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 
Àn
+3, 
pRëBuf
 );

356 
	`oßl_mem_‰ì
(
pRëBuf
);

358 
	}
}

369 
	$MT_S≠iWrôeCfg
(
uöt8
 *
pBuf
)

371 
uöt8
 
ªtVÆue
, 
cmdId
;

374 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

375 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

377 i‡((
pBuf
[0] !
ZCD_NV_NIB
Ë&& (pBuf[0] !
ZCD_NV_DEVICE_LIST
) &&

378 (
pBuf
[0] !
ZCD_NV_ADDRMGR
Ë&& (pBuf[0] !
ZCD_NV_NWKKEY
))

380 i‡((
	`zb_WrôeC⁄figuøti⁄
(
pBuf
[0],ÖBuf[1], &pBuf[2])Ë=
ZSUCCESS
)

382 
ªtVÆue
 = 
ZSuc˚ss
;

386 
ªtVÆue
 = 
ZFaûuª
;

391 
ªtVÆue
 = 
ZInvÆidP¨amëî
;

395 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 1, &
ªtVÆue
 );

396 
	}
}

407 
	$MT_S≠iGëDevInfo
(
uöt8
 *
pBuf
)

409 
uöt8
 *
pRëBuf
;

410 
uöt8
 
cmdId
;

413 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

414 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

416 
pRëBuf
 = 
	`oßl_mem_Æloc
(
Z_EXTADDR_LEN
+1);

417 i‡(
pRëBuf
)

419 
	`zb_GëDevi˚Info
(
pBuf
[0], 
pRëBuf
+1);

420 
pRëBuf
[0] = 
pBuf
[0];

423 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 
Z_EXTADDR_LEN
+1, 
pRëBuf
 );

425 
	`oßl_mem_‰ì
(
pRëBuf
);

427 
	}
}

438 
	$MT_S≠iFödDev
(
uöt8
 *
pBuf
)

440 
uöt8
 
cmdId
;

443 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

444 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

447 
	`zb_FödDevi˚Reque°
(
ZB_IEEE_SEARCH
, 
pBuf
);

450 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 0, 
NULL
 );

451 
	}
}

462 
	$MT_S≠iPîmôJoö
(
uöt8
 *
pBuf
)

464 
uöt8
 
ªtVÆue
, 
cmdId
;

467 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

468 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

470 
ªtVÆue
 = (
	`zb_PîmôJoöögReque°
(
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]),ÖBuf[2]));

473 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 1, &
ªtVÆue
 );

475 
	}
}

478 #i‡
deföed
 ( 
MT_SAPI_CB_FUNC
 )

488 
	$zb_MTCÆlbackSèπC⁄fúm
–
uöt8
 
°©us
 )

491 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SAPI
), 
MT_SAPI_START_CNF
, 1, &
°©us
);

492 
	}
}

503 
	$zb_MTCÆlbackSídD©aC⁄fúm
(
uöt8
 
h™dÀ
, uöt8 
°©us
)

505 
uöt8
 
ªtAºay
[2];

507 
ªtAºay
[0] = 
h™dÀ
;

508 
ªtAºay
[1] = 
°©us
;

511 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SAPI
), 
MT_SAPI_SEND_DATA_CNF
, 2, 
ªtAºay
);

513 
	}
}

524 
	$zb_MTCÆlbackBödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 )

526 
uöt8
 
ªtAºay
[3];

528 
ªtAºay
[0] = 
	`LO_UINT16
(
comm™dId
);

529 
ªtAºay
[1] = 
	`HI_UINT16
(
comm™dId
);

530 
ªtAºay
[2] = 
°©us
;

533 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SAPI
), 
MT_SAPI_BIND_CNF
, 3, 
ªtAºay
);

535 
	}
}

545 
	$zb_MTCÆlbackAŒowBödC⁄fúm
–
uöt16
 
sour˚
 )

547 
uöt8
 
ªtAºay
[2];

549 
ªtAºay
[0] = 
	`LO_UINT16
(
sour˚
);

550 
ªtAºay
[1] = 
	`HI_UINT16
(
sour˚
);

553 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SAPI
), 
MT_SAPI_ALLOW_BIND_CNF
, 3, 
ªtAºay
);

555 
	}
}

565 
	$zb_MTCÆlbackFödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
, uöt8 *
£¨chKey
, uöt8 *
ªsu…
 )

567 
uöt8
 
ªtAºay
[
SPI_CB_SAPI_FIND_DEV_CNF_LEN
];

568 
uöt16
 
addr
 = *((uöt16*)
£¨chKey
);

571 
ªtAºay
[0] = 
ZB_IEEE_SEARCH
;

572 
ªtAºay
[1] = 
	`LO_UINT16
(
addr
);

573 
ªtAºay
[2] = 
	`HI_UINT16
(
addr
);

574 
	`oßl_mem˝y
(&
ªtAºay
[3], 
ªsu…
, 
Z_EXTADDR_LEN
);

577 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SAPI
), 
MT_SAPI_FIND_DEV_CNF
, 11, 
ªtAºay
);

579 
	}
}

590 
	$zb_MTCÆlbackRe˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 )

592 
uöt8
 *
memPå
;

593 
öt8
 
i
;

594 
uöt8
 
msgLí
 = 6 + 
Àn
;

596 
memPå
 = 
	`oßl_mem_Æloc
(
msgLí
);

598 i‡(
memPå
)

600 
memPå
[0] = 
	`LO_UINT16
(
sour˚
);

601 
memPå
[1] = 
	`HI_UINT16
(
sour˚
);

602 
memPå
[2] = 
	`LO_UINT16
(
comm™d
);

603 
memPå
[3] = 
	`HI_UINT16
(
comm™d
);

604 
memPå
[4] = 
	`LO_UINT16
(
Àn
);

605 
memPå
[5] = 
	`HI_UINT16
(
Àn
);

607 
i
=0; i<
Àn
; i++)

609 
memPå
[6+
i
] = 
pD©a
[i];

613 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SAPI
), 
MT_SAPI_RCV_DATA_IND
, 
msgLí
, 
memPå
);

615 
	`oßl_mem_‰ì
–
memPå
 );

617 
	}
}

	@Components/mt/MT_SAPI.h

41 #i‚de‡
MT_SAPI_H


42 
	#MT_SAPI_H


	)

47 
	~"ZComDef.h
"

48 
	~"MT.h
"

49 
	~"ßpi.h
"

51 
	~"OnBﬂrd.h
"

57 #i‡!
deföed
 (
SAPI_OSAL_ADD_TASK_ENABLED
)

58 
	#SAPICB_CHECK
(
cbi
Ë1

	)

60 
	#SAPICB_CHECK
(
cbi
Ë(
_ßpiCÆlbackSub
 & (cbi))

	)

68 
	#SPI_CB_SAPI_START_CNF_LEN
 1

	)

69 
	#SPI_CB_SAPI_SEND_DATA_CNF_LEN
 2

	)

70 
	#SPI_CB_SAPI_BIND_CNF_LEN
 3

	)

71 
	#SPI_CB_SAPI_DISC_NET_CNF_LEN
 1

	)

72 
	#SPI_CB_SAPI_FIND_DEV_CNF_LEN
 11

	)

73 
	#SPI_CB_SAPI_RCV_DATA_IND_LEN
 6

	)

74 
	#SPI_CB_SAPI_ALLOW_BIND_CNF_LEN
 2

	)

83 #i‡
deföed
 ( 
MT_SAPI_CB_FUNC
 )

84 
uöt16
 
_ßpiCÆlbackSub
;

103 #i‡
deföed
 ( 
MT_SAPI_FUNC
 )

105 
uöt8
 
MT_S≠iComm™dPro˚ssög
(uöt8 *
pBuf
);

109 #i‡
deföed
 ( 
MT_SAPI_CB_FUNC
 )

111 
zb_MTCÆlbackSèπC⁄fúm
–
uöt8
 
°©us
 );

113 
zb_MTCÆlbackSídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 );

115 
zb_MTCÆlbackBödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 );

117 
zb_MTCÆlbackFödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
,

118 
uöt8
 *
£¨chKey
, uöt8 *
ªsu…
 );

120 
zb_MTCÆlbackRe˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
,

121 
uöt16
 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 );

123 
zb_MTCÆlbackAŒowBödC⁄fúm
–
uöt16
 
sour˚
 );

	@Components/mt/MT_SYS.c

43 
	~"ZComDef.h
"

44 
	~"MT.h
"

45 
	~"MT_SYS.h
"

46 
	~"MT_VERSION.h
"

47 
	~"nwk_utû.h
"

48 
	~"OSAL.h
"

49 
	~"OSAL_NV.h
"

50 
	~"Onbﬂrd.h
"

51 
	~"hÆ_adc.h
"

52 
	~"ZGlobÆs.h
"

53 
	~"OSAL_Clock.h
"

54 
	~"mac_low_Àvñ.h
"

60 
	#MT_SYS_DEVICE_INFO_RESPONSE_LEN
 14

	)

61 
	#MT_NV_ITEM_MAX_LENGTH
 250

	)

63 #i‡!
deföed
 
HAL_GPIO
 || !HAL_GPIO

64 
	#GPIO_DIR_IN
(
IDX
)

	)

65 
	#GPIO_DIR_OUT
(
IDX
)

	)

66 
	#GPIO_TRI
(
IDX
)

	)

67 
	#GPIO_PULL_UP
(
IDX
)

	)

68 
	#GPIO_PULL_DN
(
IDX
)

	)

69 
	#GPIO_SET
(
IDX
)

	)

70 
	#GPIO_CLR
(
IDX
)

	)

71 
	#GPIO_TOG
(
IDX
)

	)

72 
	#GPIO_GET
(
IDX
Ë0

	)

73 
	#GPIO_HiD_SET
(Ë(
vÆ
 = 0)

	)

74 
	#GPIO_HiD_CLR
(Ë(
vÆ
 = 0)

	)

81 #i‡!
deföed
 
MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA


82 
	#MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
 
FALSE


	)

85 c⁄° 
uöt16
 
	gMT_SysOßlEvítId
 [] = {

86 
MT_SYS_OSAL_EVENT_0
,

87 
MT_SYS_OSAL_EVENT_1
,

88 
MT_SYS_OSAL_EVENT_2
,

89 
MT_SYS_OSAL_EVENT_3


93 
	mGPIO_DIR
,

94 
	mGPIO_TRI
,

95 
	mGPIO_SET
,

96 
	mGPIO_CLR
,

97 
	mGPIO_TOG
,

98 
	mGPIO_GET
,

99 
	mGPIO_HiD
 = 0x12

100 } 
	tGPIO_Op_t
;

105 #i‡
deföed
 (
MT_SYS_FUNC
)

106 
MT_SysRe£t
(
uöt8
 *
pBuf
);

107 
MT_SysPög
();

108 
MT_SysVîsi⁄
();

109 
MT_SysSëExtAddr
(
uöt8
 *
pBuf
);

110 
MT_SysGëExtAddr
();

111 
MT_SysOßlNVIãmInô
(
uöt8
 *
pBuf
);

112 
MT_SysOßlNVDñëe
(
uöt8
 *
pBuf
);

113 
MT_SysOßlNVLígth
(
uöt8
 *
pBuf
);

114 
MT_SysOßlNVRód
(
uöt8
 *
pBuf
);

115 
MT_SysOßlNVWrôe
(
uöt8
 *
pBuf
);

116 
MT_SysOßlSèπTimî
(
uöt8
 *
pBuf
);

117 
MT_SysOßlSt›Timî
(
uöt8
 *
pBuf
);

118 
MT_SysR™dom
();

119 
MT_SysAdcRód
(
uöt8
 *
pBuf
);

120 
MT_SysGpio
(
uöt8
 *
pBuf
);

121 
MT_SysSèckTu√
(
uöt8
 *
pBuf
);

122 
MT_SysGëDevi˚Info
(
uöt8
 *
pBuf
);

123 
MT_SysSëUtcTime
(
uöt8
 *
pBuf
);

124 
MT_SysGëUtcTime
();

125 
MT_SysSëTxPowî
(
uöt8
 *
pBuf
);

128 #i‡
deföed
 (
MT_SYS_FUNC
)

141 
uöt8
 
	$MT_SysComm™dPro˚ssög
(
uöt8
 *
pBuf
)

143 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

145 
pBuf
[
MT_RPC_POS_CMD1
])

147 
MT_SYS_RESET_REQ
:

148 
	`MT_SysRe£t
(
pBuf
);

151 
MT_SYS_PING
:

152 
	`MT_SysPög
();

155 
MT_SYS_VERSION
:

156 
	`MT_SysVîsi⁄
();

159 
MT_SYS_SET_EXTADDR
:

160 
	`MT_SysSëExtAddr
(
pBuf
);

163 
MT_SYS_GET_EXTADDR
:

164 
	`MT_SysGëExtAddr
();

168 #i‡!
	`deföed
(
CC253X_MACNP
)

169 
MT_SYS_OSAL_NV_DELETE
:

170 
	`MT_SysOßlNVDñëe
(
pBuf
);

173 
MT_SYS_OSAL_NV_ITEM_INIT
:

174 
	`MT_SysOßlNVIãmInô
(
pBuf
);

177 
MT_SYS_OSAL_NV_LENGTH
:

178 
	`MT_SysOßlNVLígth
(
pBuf
);

181 
MT_SYS_OSAL_NV_READ
:

182 
	`MT_SysOßlNVRód
(
pBuf
);

185 
MT_SYS_OSAL_NV_WRITE
:

186 
	`MT_SysOßlNVWrôe
(
pBuf
);

190 
MT_SYS_OSAL_START_TIMER
:

191 
	`MT_SysOßlSèπTimî
(
pBuf
);

194 
MT_SYS_OSAL_STOP_TIMER
:

195 
	`MT_SysOßlSt›Timî
(
pBuf
);

198 
MT_SYS_RANDOM
:

199 
	`MT_SysR™dom
();

202 
MT_SYS_ADC_READ
:

203 
	`MT_SysAdcRód
(
pBuf
);

206 
MT_SYS_GPIO
:

207 
	`MT_SysGpio
(
pBuf
);

210 
MT_SYS_STACK_TUNE
:

211 
	`MT_SysSèckTu√
(
pBuf
);

214 
MT_SYS_SET_TIME
:

215 
	`MT_SysSëUtcTime
(
pBuf
);

218 
MT_SYS_GET_TIME
:

219 
	`MT_SysGëUtcTime
();

222 
MT_SYS_SET_TX_POWER
:

223 
	`MT_SysSëTxPowî
(
pBuf
);

227 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

231  
°©us
;

232 
	}
}

242 
	$MT_SysRe£t
(
uöt8
 *
pBuf
)

244 i‡(
pBuf
[
MT_RPC_POS_DAT0
] == 0)

246 
	`Sy°emRe£t
();

248 #i‡!(
	`deföed
(
HAL_BOARD_F2618
Ë|| deföed(
HAL_BOARD_F5438
Ë|| deföed(
HAL_BOARD_LM3S
))

251 
	`Sy°emRe£tSo·
();

255 
	}
}

266 
	$MT_SysPög
()

268 
uöt16
 
tmp16
;

269 
uöt8
 
ªtAºay
[2];

272 
tmp16
 = 
MT_CAP_SYS
 | 
MT_CAP_MAC
 | 
MT_CAP_NWK
 | 
MT_CAP_AF
 | 
MT_CAP_ZDO
 |

273 
MT_CAP_SAPI
 | 
MT_CAP_UTIL
 | 
MT_CAP_DEBUG
 | 
MT_CAP_APP
 | 
MT_CAP_ZOAD
;

276 
ªtAºay
[0] = 
	`LO_UINT16
–
tmp16
 );

277 
ªtAºay
[1] = 
	`HI_UINT16
–
tmp16
 );

280 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
MT_SYS_PING
,

281  (
tmp16
), 
ªtAºay
 );

282 
	}
}

293 
	$MT_SysVîsi⁄
()

295 
byã
 *
vîSå
 = (byã *)
MTVîsi⁄Såög
;

296 
uöt8
 
ª•Lí
 = (
MTVîsi⁄Såög
);

299 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
MT_SYS_VERSION
,

300 
ª•Lí
, 
vîSå
);

301 
	}
}

312 
	$MT_SysSëExtAddr
(
uöt8
 *
pBuf
)

314 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

315 
uöt8
 
cmdId
;

318 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

319 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

321 i‡–
	`ZMacSëReq
(
ZMacExtAddr
, 
pBuf
Ë=
ZMacSuc˚ss
 )

324 #i‡!
	`deföed
(
CC253X_MACNP
)

325 
ªtVÆue
 = 
	`oßl_nv_wrôe
(
ZCD_NV_EXTADDR
, 0, 
Z_EXTADDR_LEN
, 
pBuf
);

330 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
cmdId
, 1, &
ªtVÆue
);

332 
	}
}

343 
	$MT_SysGëExtAddr
()

345 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

347 
	`ZMacGëReq
–
ZMacExtAddr
, 
extAddr
 );

350 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
MT_SYS_GET_EXTADDR
,

351 
Z_EXTADDR_LEN
, 
extAddr
);

352 
	}
}

363 
	$MT_SysOßlNVRód
(
uöt8
 *
pBuf
)

365 
uöt16
 
nvId
;

366 
uöt8
 
nvIãmLí
=0, 
nvIãmOff£t
=0;

367 
uöt8
 *
pRëBuf
=
NULL
;

368 
uöt8
 
ª•Lí
;

371 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

374 
nvId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

376 
nvIãmOff£t
 = 
pBuf
[2];

378 #i‡!
MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA


379 i‡((
ZCD_NV_IMPLICIT_CERTIFICATE
 =
nvId
) ||

380 (
ZCD_NV_CA_PUBLIC_KEY
 =
nvId
) ||

381 (
ZCD_NV_DEVICE_PRIVATE_KEY
 =
nvId
))

383 
uöt8
 
tmp
[2] = { 
INVALIDPARAMETER
, 0 };

384 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
),

385 
MT_SYS_OSAL_NV_READ
, 2, 
tmp
);

390 #i‡!
MT_SYS_KEY_MANAGEMENT


391 i‡–(
nvId
 =
ZCD_NV_NWK_ACTIVE_KEY_INFO
) ||

392 (
nvId
 =
ZCD_NV_NWK_ALTERN_KEY_INFO
) ||

393 ((
nvId
 >
ZCD_NV_TCLK_TABLE_START
Ë&& (nvId <
ZCD_NV_TCLK_TABLE_END
)) ||

394 ((
nvId
 >
ZCD_NV_APS_LINK_KEY_DATA_START
Ë&& (nvId <
ZCD_NV_APS_LINK_KEY_DATA_END
)) ||

395 ((
nvId
 >
ZCD_NV_MASTER_KEY_DATA_START
Ë&& (nvId <
ZCD_NV_MASTER_KEY_DATA_END
)) ||

396 (
nvId
 =
ZCD_NV_PRECFGKEY
) )

398 
uöt8
 
tmp1
[2] = { 
INVALIDPARAMETER
, 0 };

399 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
),

400 
MT_SYS_OSAL_NV_READ
, 2, 
tmp1
);

405 
nvIãmLí
 = 
	`oßl_nv_ôem_Àn
(
nvId
);

408 i‡(
nvIãmLí
 > 
MT_NV_ITEM_MAX_LENGTH
)

410 
nvIãmLí
 = 
MT_NV_ITEM_MAX_LENGTH
;

413 i‡((
nvIãmLí
 > 0Ë&& (“vIãmLí - 
nvIãmOff£t
) > 0))

415 
ª•Lí
 = 
nvIãmLí
 - 
nvIãmOff£t
 + 2;

419 
ª•Lí
 = 2;

422 
pRëBuf
 = 
	`oßl_mem_Æloc
(
ª•Lí
);

424 i‡(
pRëBuf
 !
NULL
)

426 
	`oßl_mem£t
(
pRëBuf
, 0, 
ª•Lí
);

429 
pRëBuf
[0] = 
ZFaûuª
;

431 i‡(
ª•Lí
 > 2)

433 i‡(((
	`oßl_nv_ªad
–
nvId
, (
uöt16
)
nvIãmOff£t
, (uöt16)
nvIãmLí
, &
pRëBuf
[2])Ë=
ZSUCCESS
Ë&& (
ª•Lí
 > 2))

435 
pRëBuf
[0] = 
ZSuc˚ss
;

437 
pRëBuf
[1] = 
nvIãmLí
 - 
nvIãmOff£t
;

441 
pRëBuf
[1] = 0;

445 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
),

446 
MT_SYS_OSAL_NV_READ
, 
ª•Lí
, 
pRëBuf
 );

448 
	`oßl_mem_‰ì
(
pRëBuf
);

450 
	}
}

461 
	$MT_SysOßlNVWrôe
(
uöt8
 *
pBuf
)

463 
uöt16
 
nvId
;

464 
uöt8
 
nvIãmLí
=0, 
nvIãmOff£t
=0;

465 
uöt8
 
π∫
;

468 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

471 
nvId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

473 
nvIãmOff£t
 = 
pBuf
[2];

475 
nvIãmLí
 = 
pBuf
[3];

476 
pBuf
 += 4;

479 
π∫
 = 
ZFaûuª
;

482 
	`zgSëIãm
–
nvId
, (
uöt16
)
nvIãmLí
, 
pBuf
 );

484 i‡((
	`oßl_nv_wrôe
(
nvId
, (
uöt16
)
nvIãmOff£t
, (uöt16)
nvIãmLí
, 
pBuf
)Ë=
ZSUCCESS
)

486 i‡(
nvId
 =
ZCD_NV_EXTADDR
)

488 
π∫
 = 
	`ZMacSëReq
(
ZMacExtAddr
, 
pBuf
);

492 
π∫
 = 
ZSuc˚ss
;

497 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
),

498 
MT_SYS_OSAL_NV_WRITE
, 1, &
π∫
);

499 
	}
}

510 
	$MT_SysOßlNVIãmInô
(
uöt8
 *
pBuf
)

512 
uöt8
 
ªt
;

513 
uöt8
 
idLí
;

514 
uöt16
 
nvId
;

515 
uöt16
 
nvLí
;

518 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

521 
nvId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

523 
nvLí
 = 
	`BUILD_UINT16
(
pBuf
[2],ÖBuf[3]);

525 
idLí
 = 
pBuf
[4];

526 
pBuf
 += 5;

528 i‡–
idLí
 < 
nvLí
 )

531 
ªt
 = 
	`oßl_nv_ôem_öô
–
nvId
, 
nvLí
, 
NULL
 );

532 i‡–(
ªt
 =
NV_ITEM_UNINIT
Ë&& (
idLí
 > 0) )

535 (Ë
	`oßl_nv_wrôe
–
nvId
, 0, (
uöt16
)
idLí
, 
pBuf
 );

541 
ªt
 = 
	`oßl_nv_ôem_öô
–
nvId
, 
nvLí
, 
pBuf
 );

545 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
),

546 
MT_SYS_OSAL_NV_ITEM_INIT
, 1, &
ªt
);

547 
	}
}

558 
	$MT_SysOßlNVDñëe
(
uöt8
 *
pBuf
)

560 
uöt16
 
nvId
;

561 
uöt16
 
nvLí
;

562 
uöt8
 
ªt
;

565 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

568 
nvId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

570 
nvLí
 = 
	`BUILD_UINT16
(
pBuf
[2],ÖBuf[3]);

573 
ªt
 = 
	`oßl_nv_dñëe
–
nvId
, 
nvLí
 );

576 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
),

577 
MT_SYS_OSAL_NV_DELETE
, 1, &
ªt
);

578 
	}
}

589 
	$MT_SysOßlNVLígth
(
uöt8
 *
pBuf
)

591 
uöt16
 
nvId
;

592 
uöt16
 
nvLí
;

593 
uöt8
 
r•
[2];

596 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

599 
nvId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

602 
nvLí
 = 
	`oßl_nv_ôem_Àn
–
nvId
 );

603 
r•
[0] = 
	`LO_UINT16
–
nvLí
 );

604 
r•
[1] = 
	`HI_UINT16
–
nvLí
 );

607 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
),

608 
MT_SYS_OSAL_NV_LENGTH
, 2, 
r•
);

609 
	}
}

620 
	$MT_SysOßlSèπTimî
(
uöt8
 *
pBuf
)

622 
uöt16
 
evítId
;

623 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

624 
uöt8
 
cmdId
;

627 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

628 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

630 i‡(*
pBuf
 <= 3)

632 
evítId
 = (
uöt16
Ë
MT_SysOßlEvítId
[*
pBuf
];

633 
ªtVÆue
 = 
	`oßl_°¨t_timîEx
(
MT_TaskID
, 
evítId
, 
	`BUILD_UINT16
(
pBuf
[1],ÖBuf[2]));

637 
ªtVÆue
 = 
ZInvÆidP¨amëî
;

641 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
cmdId
, 1, &
ªtVÆue
);

642 
	}
}

653 
	$MT_SysOßlSt›Timî
(
uöt8
 *
pBuf
)

655 
uöt16
 
evítId
;

656 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

657 
uöt8
 
cmdId
;

660 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

661 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

663 i‡(*
pBuf
 <= 3)

665 
evítId
 = (
uöt16
Ë
MT_SysOßlEvítId
[*
pBuf
];

666 
ªtVÆue
 = 
	`oßl_°›_timîEx
(
MT_TaskID
, 
evítId
);

670 
ªtVÆue
 = 
ZInvÆidP¨amëî
;

674 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
cmdId
, 1, &
ªtVÆue
 );

675 
	}
}

686 
	$MT_SysR™dom
()

688 
uöt16
 
øndVÆue
 = 
	`Onbﬂrd_ønd
();

689 
uöt8
 
ªtAºay
[2];

691 
ªtAºay
[0] = 
	`LO_UINT16
(
øndVÆue
);

692 
ªtAºay
[1] = 
	`HI_UINT16
(
øndVÆue
);

695 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
MT_SYS_RANDOM
, 2, 
ªtAºay
 );

696 
	}
}

707 
	$MT_SysAdcRód
(
uöt8
 *
pBuf
)

709 #i‚de‡
HAL_BOARD_LM3S


710 
uöt8
 
ch™√l
, 
ªsﬁuti⁄
;

711 
uöt16
 
ãmpVÆue
;

712 
uöt8
 
ªtAºay
[2];

713 
uöt8
 
cmdId
;

716 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

717 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

720 
ch™√l
 = *
pBuf
++;

723 
ªsﬁuti⁄
 = *
pBuf
++;

726 
ch™√l
)

729 
HAL_ADC_CHANNEL_0
:

730 
HAL_ADC_CHANNEL_1
:

731 
HAL_ADC_CHANNEL_2
:

732 
HAL_ADC_CHANNEL_3
:

733 
HAL_ADC_CHANNEL_4
:

734 
HAL_ADC_CHANNEL_5
:

735 
HAL_ADC_CHANNEL_6
:

736 
HAL_ADC_CHANNEL_7
:

737 
ãmpVÆue
 = 
	`HÆAdcRód
(
ch™√l
, 
ªsﬁuti⁄
);

741 (
HAL_ADC_CHANNEL_TEMP
):

742 
ãmpVÆue
 = 
	`HÆAdcRód
(
HAL_ADC_CHANNEL_TEMP
, 
HAL_ADC_RESOLUTION_14
);

746 (
HAL_ADC_CHANNEL_VDD
):

747 
ãmpVÆue
 = 
	`HÆAdcRód
(
HAL_ADC_CHANNEL_VDD
, 
HAL_ADC_RESOLUTION_14
);

752 
ãmpVÆue
 = 0x00;

756 
ªtAºay
[0] = 
	`LO_UINT16
(
ãmpVÆue
);

757 
ªtAºay
[1] = 
	`HI_UINT16
(
ãmpVÆue
);

760 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
cmdId
, 2, 
ªtAºay
);

762 
	}
}

773 
	$MT_SysGpio
(
uöt8
 *
pBuf
)

775 
uöt8
 
cmd
, 
vÆ
;

776 
GPIO_Op_t
 
›
;

778 
cmd
 = 
pBuf
[
MT_RPC_POS_CMD1
];

779 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

781 
›
 = (
GPIO_Op_t
)(*
pBuf
++);

782 
vÆ
 = *
pBuf
;

784 
›
)

786 
GPIO_DIR
:

787 i‡(
vÆ
 & 
	`BV
(0)Ë{
	`GPIO_DIR_OUT
(0);} {
	`GPIO_DIR_IN
(0);}

788 i‡(
vÆ
 & 
	`BV
(1)Ë{
	`GPIO_DIR_OUT
(1);} {
	`GPIO_DIR_IN
(1);}

789 i‡(
vÆ
 & 
	`BV
(2)Ë{
	`GPIO_DIR_OUT
(2);} {
	`GPIO_DIR_IN
(2);}

790 i‡(
vÆ
 & 
	`BV
(3)Ë{
	`GPIO_DIR_OUT
(3);} {
	`GPIO_DIR_IN
(3);}

793 
GPIO_TRI
:

794 if(
vÆ
 & 
	`BV
(0)Ë{
	`GPIO_TRI
(0);} if(vÆ & BV(4)Ë{
	`GPIO_PULL_DN
(0);} {
	`GPIO_PULL_UP
(0);}

795 if(
vÆ
 & 
	`BV
(1)Ë{
	`GPIO_TRI
(1);} if(vÆ & BV(5)Ë{
	`GPIO_PULL_DN
(1);} {
	`GPIO_PULL_UP
(1);}

796 if(
vÆ
 & 
	`BV
(2)Ë{
	`GPIO_TRI
(2);} if(vÆ & BV(6)Ë{
	`GPIO_PULL_DN
(2);} {
	`GPIO_PULL_UP
(2);}

797 if(
vÆ
 & 
	`BV
(3)Ë{
	`GPIO_TRI
(3);} if(vÆ & BV(7)Ë{
	`GPIO_PULL_DN
(3);} {
	`GPIO_PULL_UP
(3);}

800 
GPIO_SET
:

801 i‡(
vÆ
 & 
	`BV
(0)Ë{
	`GPIO_SET
(0);}

802 i‡(
vÆ
 & 
	`BV
(1)Ë{
	`GPIO_SET
(1);}

803 i‡(
vÆ
 & 
	`BV
(2)Ë{
	`GPIO_SET
(2);}

804 i‡(
vÆ
 & 
	`BV
(3)Ë{
	`GPIO_SET
(3);}

807 
GPIO_CLR
:

808 i‡(
vÆ
 & 
	`BV
(0)Ë{
	`GPIO_CLR
(0);}

809 i‡(
vÆ
 & 
	`BV
(1)Ë{
	`GPIO_CLR
(1);}

810 i‡(
vÆ
 & 
	`BV
(2)Ë{
	`GPIO_CLR
(2);}

811 i‡(
vÆ
 & 
	`BV
(3)Ë{
	`GPIO_CLR
(3);}

814 
GPIO_TOG
:

815 i‡(
vÆ
 & 
	`BV
(0)Ë{
	`GPIO_TOG
(0);}

816 i‡(
vÆ
 & 
	`BV
(1)Ë{
	`GPIO_TOG
(1);}

817 i‡(
vÆ
 & 
	`BV
(2)Ë{
	`GPIO_TOG
(2);}

818 i‡(
vÆ
 & 
	`BV
(3)Ë{
	`GPIO_TOG
(3);}

821 
GPIO_GET
:

824 
GPIO_HiD
:

825 (
vÆ
Ë? 
	`GPIO_HiD_SET
(Ë: 
	`GPIO_HiD_CLR
();

832 
vÆ
 = (
	`GPIO_GET
(0)Ë? 
	`BV
(0) : 0;

833 
vÆ
 |(
	`GPIO_GET
(1)Ë? 
	`BV
(1) : 0;

834 
vÆ
 |(
	`GPIO_GET
(2)Ë? 
	`BV
(2) : 0;

835 
vÆ
 |(
	`GPIO_GET
(3)Ë? 
	`BV
(3) : 0;

838 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
cmd
, 1, &
vÆ
);

839 
	}
}

850 
	$MT_SysSèckTu√
(
uöt8
 *
pBuf
)

852 
uöt8
 
cmd
, 
π∫
;

854 
cmd
 = 
pBuf
[
MT_RPC_POS_CMD1
];

855 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

857 *
pBuf
++)

859 
STK_TX_PWR
:

860 
π∫
 = 
	`ZMacSëReq
(
ZMacPhyTønsmôPowîSig√d
, 
pBuf
);

863 
STK_RX_ON_IDLE
:

864 i‡((*
pBuf
 !
TRUE
Ë&& (*pBu‡!
FALSE
))

866 ()
	`ZMacGëReq
(
ZMacRxOnIdÀ
, &
π∫
);

870 
π∫
 = 
	`ZMacSëReq
(
ZMacRxOnIdÀ
, 
pBuf
);

875 
π∫
 = 
ZInvÆidP¨amëî
;

879 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
cmd
, 1, &
π∫
);

880 
	}
}

891 
	$MT_SysSëUtcTime
(
uöt8
 *
pBuf
)

893 
uöt8
 
cmdId
;

894 
uöt8
 
ªtSèt
;

895 
UTCTime
 
utcSecs
;

898 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

899 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

901 
utcSecs
 = 
	`oßl_buûd_uöt32
–
pBuf
, 4 );

902 i‡–
utcSecs
 == 0 )

904 
UTCTimeSåu˘
 
utc
;

907 
pBuf
 += 4;

910 
utc
.
hour
 = *
pBuf
++;

911 
utc
.
möuãs
 = *
pBuf
++;

912 
utc
.
£c⁄ds
 = *
pBuf
++;

913 
utc
.
m⁄th
 = (*
pBuf
++) - 1;

914 
utc
.
day
 = (*
pBuf
++) - 1;

915 
utc
.
yór
 = 
	`oßl_buûd_uöt16
 ( 
pBuf
 );

917 i‡((
utc
.
hour
 < 24Ë&& (utc.
möuãs
 < 60Ë&& (utc.
£c⁄ds
 < 60) &&

918 (
utc
.
m⁄th
 < 12Ë&& (utc.
day
 < 31Ë&& (utc.
yór
 > 1999) && (utc.year < 2136))

921 i‡((
utc
.
m⁄th
 !1Ë|| (utc.
day
 < (
	`IsLópYór
–utc.
yór
 ) ? 29 : 28)))

924 
utcSecs
 = 
	`oßl_C⁄vîtUTCSecs
–&
utc
 );

929 i‡–
utcSecs
 == 0 )

932 
ªtSèt
 = 
ZInvÆidP¨amëî
;

937 
	`oßl_£tClock
–
utcSecs
 );

938 
ªtSèt
 = 
ZSuc˚ss
;

942 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
),

943 
cmdId
, 1, &
ªtSèt
);

944 
	}
}

955 
	$MT_SysGëUtcTime
()

957 
uöt8
 
Àn
;

958 
uöt8
 *
buf
;

960 
Àn
 = –
UTCTime
 ) + –
UTCTimeSåu˘
 );

962 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

963 i‡–
buf
 )

965 
uöt8
 *
pBuf
;

966 
UTCTime
 
utcSecs
;

967 
UTCTimeSåu˘
 
utcTime
;

970 
utcSecs
 = 
	`oßl_gëClock
();

971 
	`oßl_C⁄vîtUTCTime
–&
utcTime
, 
utcSecs
 );

974 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
utcSecs
 );

977 *
pBuf
++ = 
utcTime
.
hour
;

978 *
pBuf
++ = 
utcTime
.
möuãs
;

979 *
pBuf
++ = 
utcTime
.
£c⁄ds
;

980 *
pBuf
++ = 
utcTime
.
m⁄th
 + 1;

981 *
pBuf
++ = 
utcTime
.
day
 + 1;

982 *
pBuf
++ = 
	`LO_UINT16
–
utcTime
.
yór
 );

983 *
pBuf
++ = 
	`HI_UINT16
–
utcTime
.
yór
 );

986 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
),

987 
MT_SYS_GET_TIME
, (
uöt8
)(
pBuf
-
buf
), buf);

989 
	`oßl_mem_‰ì
–
buf
 );

991 
	}
}

1002 
	$MT_SysSëTxPowî
(
uöt8
 *
pBuf
)

1005 
uöt8
 
sig√d_dBm_of_TxPowî_ªque£ãd
;

1013 
uöt8
 
sig√d_dBm_of_TxPowî_ønge_c‹ª˘ed
;

1016 
sig√d_dBm_of_TxPowî_ªque£ãd
 = 
pBuf
[
MT_RPC_POS_DAT0
];

1027 
sig√d_dBm_of_TxPowî_ønge_c‹ª˘ed
 = 
	`macRadioSëTxPowî
(
sig√d_dBm_of_TxPowî_ªque£ãd
);

1034 ()
	`MAC_MlmeSëReq
(
MAC_PHY_TRANSMIT_POWER_SIGNED
, &
sig√d_dBm_of_TxPowî_ªque£ãd
);

1037 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
),

1038 
MT_SYS_SET_TX_POWER
, 1,

1039 &
sig√d_dBm_of_TxPowî_ønge_c‹ª˘ed
);

1040 
	}
}

1057 
	$MT_SysRe£tInd
()

1059 
uöt8
 
ªtAºay
[6];

1061 
ªtAºay
[0] = 
	`Re£tRós⁄
();

1062 
	`oßl_mem˝y
–&
ªtAºay
[1], 
MTVîsi⁄Såög
, 5 );

1065 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SYS
), 
MT_SYS_RESET_IND
,

1066 (
ªtAºay
),ÑetArray);

1067 
	}
}

1079 
	$MT_SysOßlTimîExpúed
(
uöt8
 
Id
)

1081 
uöt8
 
ªtVÆue
;

1082 
ªtVÆue
 = 
Id
;

1083 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SYS
), 
MT_SYS_OSAL_TIMER_EXPIRED
, 1, &
ªtVÆue
);

1084 
	}
}

	@Components/mt/MT_SYS.h

39 #i‚de‡
MT_SYS_H


40 
	#MT_SYS_H


	)

42 #ifde‡
__˝lu•lus


52 
STK_TX_PWR
,

53 
STK_RX_ON_IDLE


54 } 
	tSTK_Tu√_t
;

60 #i‡
deföed
 (
MT_SYS_FUNC
)

64 
uöt8
 
MT_SysComm™dPro˚ssög
(uöt8 *
pBuf
);

70 
MT_SysRe£tInd
( );

75 
MT_SysOßlTimîExpúed
(
uöt8
 
Id
);

77 #ifde‡
__˝lu•lus


	@Components/mt/MT_TASK.c

43 
	~"ZComDef.h
"

44 
	~"MT_TASK.h
"

45 
	~"MT.h
"

46 
	~"MT_DEBUG.h
"

47 
	~"MT_UART.h
"

48 
	~"MT_UTIL.h
"

49 
	~"MT_SYS.h
"

51 #i‡!
deföed
–
NONWK
 )

52 
	~"MT_ZDO.h
"

53 
	~"MT_AF.h
"

56 
	~"hÆ_u¨t.h
"

57 
	~"OSAL_Mem‹y.h
"

63 
MT_Pro˚ssIncomögComm™d
–
mtOSALSîülD©a_t
 *
msg
 );

69 
uöt8
 
	gMT_TaskID
;

81 
	$MT_TaskInô
(
uöt8
 
èsk_id
)

83 
MT_TaskID
 = 
èsk_id
;

86 
	`MT_U¨tInô
();

89 
	`MT_U¨tRegi°îTaskID
(
èsk_id
);

91 
	`oßl_£t_evít
(
èsk_id
, 
MT_SECONDARY_INIT_EVENT
);

92 
	}
}

104 
UINT16
 
	$MT_Pro˚ssEvít
(
uöt8
 
èsk_id
, 
uöt16
 
evíts
)

107 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

109 
uöt8
 *
msg_±r
 = 
	`oßl_msg_ª˚ive
(
èsk_id
);

111 i‡(
msg_±r
 !
NULL
)

113 
	`MT_Pro˚ssIncomögComm™d
((
mtOSALSîülD©a_t
 *)
msg_±r
);

115 
	`oßl_msg_dóŒoˇã
(
msg_±r
);

119  (
evíts
 ^ 
SYS_EVENT_MSG
);

122 i‡–
evíts
 & 
MT_SECONDARY_INIT_EVENT
 )

124 
	`MT_Inô
();

126  (
evíts
 ^ 
MT_SECONDARY_INIT_EVENT
);

129 i‡–
evíts
 & 
MT_ZTOOL_SERIAL_RCV_BUFFER_FULL
 )

132  (
evíts
 ^ 
MT_ZTOOL_SERIAL_RCV_BUFFER_FULL
);

135 #i‡!
	`deföed
–
NONWK
 )

136 i‡–
evíts
 & 
MT_AF_EXEC_EVT
 )

138 
	`MT_AfExec
();

139  (
evíts
 ^ 
MT_AF_EXEC_EVT
);

144 #i‡
deföed
 
MT_SYS_FUNC


145 i‡–
evíts
 & (
MT_SYS_OSAL_EVENT_MASK
))

147 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_0
)

149 
	`MT_SysOßlTimîExpúed
(0x00);

150 
evíts
 ^
MT_SYS_OSAL_EVENT_0
;

153 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_1
)

155 
	`MT_SysOßlTimîExpúed
(0x01);

156 
evíts
 ^
MT_SYS_OSAL_EVENT_1
;

159 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_2
)

161 
	`MT_SysOßlTimîExpúed
(0x02);

162 
evíts
 ^
MT_SYS_OSAL_EVENT_2
;

165 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_3
)

167 
	`MT_SysOßlTimîExpúed
(0x03);

168 
evíts
 ^
MT_SYS_OSAL_EVENT_3
;

171  
evíts
;

178 
	}
}

191 
	$MT_Pro˚ssIncomögComm™d
–
mtOSALSîülD©a_t
 *
msg
 )

193 
uöt8
 
Àn
, *
msg_±r
 = 
msg
->msg;

196  
msg
->
hdr
.
evít
 )

198 
CMD_SERIAL_MSG
:

199 
	`MT_Pro˚ssIncomög
(
msg_±r
);

202 
CMD_DEBUG_MSG
:

203 
	`MT_Pro˚ssDebugMsg
–(
mtDebugMsg_t
 *)
msg
 );

206 
CB_FUNC
:

213 
Àn
 = 
SPI_0DATA_MSG_LEN
 + 
msg_±r
[
DATALEN_FIELD
];

219 
msg_±r
[
Àn
-1] = 
	`MT_U¨tCÆcFCS
(msg_±∏+ 1, (
uöt8
)(len-2));

221 #ifde‡
MT_UART_DEFAULT_PORT


222 
	`HÆUARTWrôe
 ( 
MT_UART_DEFAULT_PORT
, 
msg_±r
, 
Àn
 );

226 
CMD_DEBUG_STR
:

227 
	`MT_Pro˚ssDebugSå
–(
mtDebugSå_t
 *)
msg
 );

230 #i‡!
	`deföed
 ( 
NONWK
 )

231 
MT_SYS_APP_RSP_MSG
:

232 
Àn
 = 
SPI_0DATA_MSG_LEN
 + 
msg_±r
[
DATALEN_FIELD
];

233 
	`MTPro˚ssAµR•Msg
–
msg_±r
, 
Àn
 );

237 #i‡
	`deföed
 (
MT_UTIL_FUNC
)

238 #i‡
deföed
 
ZCL_KEY_ESTABLISH


239 
ZCL_KEY_ESTABLISH_IND
:

240 
	`MT_UtûKeyE°ablishInd
((
keyE°ablishmítInd_t
 *)
msg
);

244 #ifde‡
MT_ZDO_CB_FUNC


245 
ZDO_STATE_CHANGE
:

246 
	`MT_ZdoSèãCh™geCB
((
oßl_evít_hdr_t
 *)
msg
);

253 
	}
}

255 #ifde‡
MT_TASK


266 
uöt8
 *
	$MT_Tøn•‹tAŒoc
(
uöt8
 
cmd0
, uöt8 
Àn
)

268 
uöt8
 *
p
;

270 ()
cmd0
;

273 
p
 = 
	`oßl_msg_Æloˇã
(
Àn
 + 
SPI_0DATA_MSG_LEN
);

275 i‡(
p
)

277 
p
++;

278  
p
;

282  
NULL
;

284 
	}
}

295 
	$MT_Tøn•‹tSíd
(
uöt8
 *
pBuf
)

297 
uöt8
 *
msgPå
;

298 
uöt8
 
d©aLí
 = 
pBuf
[0];

301 
msgPå
 = 
pBuf
-1;

304 
msgPå
[0] = 
MT_UART_SOF
;

307 
msgPå
[
SPI_0DATA_MSG_LEN
 - 1 + 
d©aLí
] = 
	`MT_U¨tCÆcFCS
 (
pBuf
, (3 + dataLen));

310 #ifde‡
MT_UART_DEFAULT_PORT


311 
	`HÆUARTWrôe
(
MT_UART_DEFAULT_PORT
, 
msgPå
, 
d©aLí
 + 
SPI_0DATA_MSG_LEN
);

315 
	`oßl_msg_dóŒoˇã
(
msgPå
);

316 
	}
}

	@Components/mt/MT_TASK.h

40 #i‚de‡
MT_TASK_H


41 
	#MT_TASK_H


	)

43 #ifde‡
__˝lu•lus


59 
MT_TaskInô
(
uöt8
 
èsk_id
);

64 
UINT16
 
MT_Pro˚ssEvít
(
uöt8
 
èsk_id
, 
uöt16
 
evít
);

67 #ifde‡
__˝lu•lus


	@Components/mt/MT_UART.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

45 
	~"hÆ_u¨t.h
"

46 
	~"MT.h
"

47 
	~"MT_UART.h
"

48 
	~"OSAL_Mem‹y.h
"

59 
	#SOP_STATE
 0x00

	)

60 
	#CMD_STATE1
 0x01

	)

61 
	#CMD_STATE2
 0x02

	)

62 
	#LEN_STATE
 0x03

	)

63 
	#DATA_STATE
 0x04

	)

64 
	#FCS_STATE
 0x05

	)

70 
byã
 
	gAµ_TaskID
;

73 
uöt8
 
	g°©e
;

74 
uöt8
 
	gCMD_Tokí
[2];

75 
uöt8
 
	gLEN_Tokí
;

76 
uöt8
 
	gFSC_Tokí
;

77 
mtOSALSîülD©a_t
 *
	gpMsg
;

78 
uöt8
 
	gãmpD©aLí
;

80 #i‡
deföed
 (
ZAPP_P1
Ë|| deföed (
ZAPP_P2
)

81 
uöt16
 
	gMT_U¨tMaxZAµBufLí
;

82 
boﬁ
 
	gMT_U¨tZAµRxSètus
;

99 
	$MT_U¨tInô
 ()

101 
hÆUARTCfg_t
 
u¨tC⁄fig
;

104 
Aµ_TaskID
 = 0;

107 
u¨tC⁄fig
.
c⁄figuªd
 = 
TRUE
;

108 
u¨tC⁄fig
.
baudR©e
 = 
MT_UART_DEFAULT_BAUDRATE
;

109 
u¨tC⁄fig
.
ÊowC⁄åﬁ
 = 
MT_UART_DEFAULT_OVERFLOW
;

110 
u¨tC⁄fig
.
ÊowC⁄åﬁThªshﬁd
 = 
MT_UART_DEFAULT_THRESHOLD
;

111 
u¨tC⁄fig
.
rx
.
maxBufSize
 = 
MT_UART_DEFAULT_MAX_RX_BUFF
;

112 
u¨tC⁄fig
.
tx
.
maxBufSize
 = 
MT_UART_DEFAULT_MAX_TX_BUFF
;

113 
u¨tC⁄fig
.
idÀTimeout
 = 
MT_UART_DEFAULT_IDLE_TIMEOUT
;

114 
u¨tC⁄fig
.
ötE«bÀ
 = 
TRUE
;

115 #i‡
	`deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

116 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
MT_U¨tPro˚ssZToﬁD©a
;

117 #ñi‡
	`deföed
 (
ZAPP_P1
Ë|| deföed (
ZAPP_P2
)

118 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
MT_U¨tPro˚ssZAµD©a
;

120 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
NULL
;

124 #i‡
	`deföed
 (
MT_UART_DEFAULT_PORT
)

125 
	`HÆUARTO≥n
 (
MT_UART_DEFAULT_PORT
, &
u¨tC⁄fig
);

128 ()
u¨tC⁄fig
;

132 #i‡
	`deföed
 (
ZAPP_P1
Ë|| deföed (
ZAPP_P2
)

134 
MT_U¨tMaxZAµBufLí
 = 1;

135 
MT_U¨tZAµRxSètus
 = 
MT_UART_ZAPP_RX_READY
;

138 
	}
}

150 
	$MT_U¨tRegi°îTaskID
–
byã
 
èskID
 )

152 
Aµ_TaskID
 = 
èskID
;

153 
	}
}

166 
byã
 
	$MT_U¨tCÆcFCS
–
uöt8
 *
msg_±r
, uöt8 
Àn
 )

168 
byã
 
x
;

169 
byã
 
x‹Resu…
;

171 
x‹Resu…
 = 0;

173  
x
 = 0; x < 
Àn
; x++, 
msg_±r
++ )

174 
x‹Resu…
 = x‹Resu… ^ *
msg_±r
;

176  ( 
x‹Resu…
 );

177 
	}
}

195 
	$MT_U¨tPro˚ssZToﬁD©a
 ( 
uöt8
 
p‹t
, uöt8 
evít
 )

197 
uöt8
 
ch
;

198 
uöt8
 
byãsInRxBuf„r
;

200 ()
evít
;

202 
	`HÆ_UART_RxBufLí
(
p‹t
))

204 
	`HÆUARTRód
 (
p‹t
, &
ch
, 1);

206 
°©e
)

208 
SOP_STATE
:

209 i‡(
ch
 =
MT_UART_SOF
)

210 
°©e
 = 
LEN_STATE
;

213 
LEN_STATE
:

214 
LEN_Tokí
 = 
ch
;

216 
ãmpD©aLí
 = 0;

219 
pMsg
 = (
mtOSALSîülD©a_t
 *)
	`oßl_msg_Æloˇã
(  ( mtOSALSerialData_t ) +

220 
MT_RPC_FRAME_HDR_SZ
 + 
LEN_Tokí
 );

222 i‡(
pMsg
)

225 
pMsg
->
hdr
.
evít
 = 
CMD_SERIAL_MSG
;

226 
pMsg
->
msg
 = (
uöt8
*)(pMsg+1);

227 
pMsg
->
msg
[
MT_RPC_POS_LEN
] = 
LEN_Tokí
;

228 
°©e
 = 
CMD_STATE1
;

232 
°©e
 = 
SOP_STATE
;

237 
CMD_STATE1
:

238 
pMsg
->
msg
[
MT_RPC_POS_CMD0
] = 
ch
;

239 
°©e
 = 
CMD_STATE2
;

242 
CMD_STATE2
:

243 
pMsg
->
msg
[
MT_RPC_POS_CMD1
] = 
ch
;

245 i‡(
LEN_Tokí
)

247 
°©e
 = 
DATA_STATE
;

251 
°©e
 = 
FCS_STATE
;

255 
DATA_STATE
:

258 
pMsg
->
msg
[
MT_RPC_FRAME_HDR_SZ
 + 
ãmpD©aLí
++] = 
ch
;

261 
byãsInRxBuf„r
 = 
	`HÆ_UART_RxBufLí
(
p‹t
);

264 i‡(
byãsInRxBuf„r
 <
LEN_Tokí
 - 
ãmpD©aLí
)

266 
	`HÆUARTRód
 (
p‹t
, &
pMsg
->
msg
[
MT_RPC_FRAME_HDR_SZ
 + 
ãmpD©aLí
], 
byãsInRxBuf„r
);

267 
ãmpD©aLí
 +
byãsInRxBuf„r
;

271 
	`HÆUARTRód
 (
p‹t
, &
pMsg
->
msg
[
MT_RPC_FRAME_HDR_SZ
 + 
ãmpD©aLí
], 
LEN_Tokí
 -ÅempDataLen);

272 
ãmpD©aLí
 +(
LEN_Tokí
 -ÅempDataLen);

276 i‡–
ãmpD©aLí
 =
LEN_Tokí
 )

277 
°©e
 = 
FCS_STATE
;

281 
FCS_STATE
:

283 
FSC_Tokí
 = 
ch
;

286 i‡((
	`MT_U¨tCÆcFCS
 ((
uöt8
*)&
pMsg
->
msg
[0], 
MT_RPC_FRAME_HDR_SZ
 + 
LEN_Tokí
Ë=
FSC_Tokí
))

288 
	`oßl_msg_£nd
–
Aµ_TaskID
, (
byã
 *)
pMsg
 );

293 
	`oßl_msg_dóŒoˇã
 ( (
uöt8
 *)
pMsg
 );

297 
°©e
 = 
SOP_STATE
;

305 
	}
}

307 #i‡
deföed
 (
ZAPP_P1
Ë|| deföed (
ZAPP_P2
)

323 
	$MT_U¨tPro˚ssZAµD©a
 ( 
uöt8
 
p‹t
, uöt8 
evít
 )

326 
oßl_evít_hdr_t
 *
msg_±r
;

327 
uöt16
 
Àngth
 = 0;

328 
uöt16
 
rxBufLí
 = 
	`HÆ_UART_RxBufLí
(
MT_UART_DEFAULT_PORT
);

334 i‡((
MT_U¨tMaxZAµBufLí
 !0Ë&& (MT_U¨tMaxZAµBufLí <
rxBufLí
))

336 
Àngth
 = 
MT_U¨tMaxZAµBufLí
;

340 
Àngth
 = 
rxBufLí
;

344 i‡(
evít
 =
HAL_UART_TX_FULL
)

350 i‡(
evít
 & ( 
HAL_UART_RX_FULL
 | 
HAL_UART_RX_ABOUT_FULL
 | 
HAL_UART_RX_TIMEOUT
))

352 i‡–
Aµ_TaskID
 )

358 i‡((
MT_U¨tZAµRxSètus
 =
MT_UART_ZAPP_RX_READY
 ) && (
Àngth
 != 0))

361 
	`MT_U¨tAµFlowC⁄åﬁ
 (
MT_UART_ZAPP_RX_NOT_READY
);

364 
msg_±r
 = (
oßl_evít_hdr_t
 *)
	`oßl_msg_Æloˇã
–
Àngth
 + (osal_event_hdr_t) );

365 i‡–
msg_±r
 )

367 
msg_±r
->
evít
 = 
SPI_INCOMING_ZAPP_DATA
;

368 
msg_±r
->
°©us
 = 
Àngth
;

371 
	`HÆUARTRód
–
MT_UART_DEFAULT_PORT
, (
uöt8
 *)(
msg_±r
 + 1), 
Àngth
 );

374 
	`oßl_msg_£nd
–
Aµ_TaskID
, (
uöt8
 *)
msg_±r
 );

379 
	}
}

391 
	$MT_U¨tZAµBuf„rLígthRegi°î
 ( 
uöt16
 
maxLí
 )

394 i‡(
maxLí
 <
MT_UART_DEFAULT_MAX_RX_BUFF
)

395 
MT_U¨tMaxZAµBufLí
 = 
maxLí
;

397 
MT_U¨tMaxZAµBufLí
 = 1;

398 
	}
}

410 
	$MT_U¨tAµFlowC⁄åﬁ
 ( 
boﬁ
 
°©us
 )

414 i‡(
°©us
 !
MT_U¨tZAµRxSètus
 )

416 
MT_U¨tZAµRxSètus
 = 
°©us
;

420 i‡(
°©us
 =
MT_UART_ZAPP_RX_READY
)

422 
	`MT_U¨tPro˚ssZAµD©a
 (
MT_UART_DEFAULT_PORT
, 
HAL_UART_RX_TIMEOUT
 );

425 
	}
}

	@Components/mt/MT_UART.h

39 #i‚de‡
MT_UART_H


40 
	#MT_UART_H


	)

42 #ifde‡
__˝lu•lus


50 
	~"Onbﬂrd.h
"

51 
	~"OSAL.h
"

58 
	#MT_UART_SOF
 0xFE

	)

61 
	#MT_UART_FRAME_OVHD
 2

	)

64 #i‡
deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

65 
	#MT_UART_DEFAULT_PORT
 
ZTOOL_PORT


	)

66 #ñi‡
deföed
 (
ZAPP_P1
Ë|| deföed (
ZAPP_P2
)

67 
	#MT_UART_DEFAULT_PORT
 
ZAPP_PORT


	)

70 #i‡!
deföed
–
MT_UART_DEFAULT_OVERFLOW
 )

71 
	#MT_UART_DEFAULT_OVERFLOW
 
TRUE


	)

74 #i‡!
deföed
 
MT_UART_DEFAULT_BAUDRATE


75 
	#MT_UART_DEFAULT_BAUDRATE
 
HAL_UART_BR_38400


	)

77 
	#MT_UART_DEFAULT_THRESHOLD
 
MT_UART_THRESHOLD


	)

78 
	#MT_UART_DEFAULT_MAX_RX_BUFF
 
MT_UART_RX_BUFF_MAX


	)

79 #i‡!
deföed
–
MT_UART_DEFAULT_MAX_TX_BUFF
 )

80 
	#MT_UART_DEFAULT_MAX_TX_BUFF
 
MT_UART_TX_BUFF_MAX


	)

82 
	#MT_UART_DEFAULT_IDLE_TIMEOUT
 
MT_UART_IDLE_TIMEOUT


	)

85 
	#MT_UART_ZAPP_RX_NOT_READY
 0x00

	)

86 
	#MT_UART_ZAPP_RX_READY
 0x01

	)

90 
oßl_evít_hdr_t
 
hdr
;

91 
uöt8
 *
msg
;

92 } 
	tmtOSALSîülD©a_t
;

97 
MT_U¨tInô
 ();

102 
MT_U¨tPro˚ssZToﬁD©a
 ( 
uöt8
 
p‹t
, uöt8 
èskId
 );

107 
MT_U¨tPro˚ssZAµD©a
 ( 
uöt8
 
p‹t
, uöt8 
evít
 );

112 
uöt8
 
MT_U¨tCÆcFCS
–uöt8 *
msg_±r
, uöt8 
Àngth
 );

117 
MT_U¨tRegi°îTaskID
–
uöt8
 
èskID
 );

122 
MT_U¨tZAµBuf„rLígthRegi°î
 ( 
uöt16
 
maxLí
 );

127 
MT_U¨tAµFlowC⁄åﬁ
 ( 
uöt8
 
°©us
 );

	@Components/mt/MT_UTIL.c

43 
	~"ZComDef.h
"

45 
	~"AddrMgr.h
"

47 
	~"OnBﬂrd.h
"

48 
	~"hÆ_key.h
"

49 
	~"hÆ_Àd.h
"

50 
	~"OSAL_Nv.h
"

51 
	~"oßl.h
"

52 
	~"NLMEDE.h
"

53 
	~"MT.h
"

54 
	~"MT_UTIL.h
"

55 
	~"MT_MAC.h
"

56 
	~"s•.h
"

57 #i‡
deföed
 
ZCL_KEY_ESTABLISH


58 
	~"z˛_key_e°ablish.h
"

60 #i‡
deföed
 
TC_LINKKEY_JOIN


61 
	~"z˛_£.h
"

64 #i‡!
deföed
 
NONWK


65 
	~"MT_ZDO.h
"

66 
	~"MT_SAPI.h
"

67 
	~"MT_NWK.h
"

68 
	~"MT_AF.h
"

69 
	~"AssocLi°.h
"

70 
	~"ZDAµ.h
"

71 
	~"ZDSecMgr.h
"

76 
	#MT_UTIL_DEVICE_INFO_RESPONSE_LEN
 14

	)

77 
	#MT_UTIL_STATUS_LEN
 1

	)

78 
	#MT_UTIL_FRM_CTR_LEN
 4

	)

80 
	#MT_APSME_LINKKEY_GET_RSP_LEN
 (
MT_UTIL_STATUS_LEN
 + 
SEC_KEY_LEN
 + (
MT_UTIL_FRM_CTR_LEN
 * 2))

	)

82 
	#MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN
 (
MT_UTIL_STATUS_LEN
 + 2)

	)

87 #i‡
deföed
 
ZCL_KEY_ESTABLISH


88 
uöt8
 
	gz˛_key_e°ablish_èsk_id
;

94 #ifde‡
AUTO_PEND


95 
MT_UtûRevExtCpy
–
uöt8
 *
pD°
, uöt8 *
pSrc
 );

96 
MT_UtûSpi2Addr
–
zAddrTy≥_t
 *
pD°
, 
uöt8
 *
pSrc
 );

99 #i‡
deföed
 (
MT_UTIL_FUNC
)

100 
MT_UtûGëDevi˚Info
();

101 
MT_UtûGëNvInfo
();

102 
MT_UtûSëP™ID
(
uöt8
 *
pBuf
);

103 
MT_UtûSëCh™√ls
(
uöt8
 *
pBuf
);

104 
MT_UtûSëSecLevñ
(
uöt8
 *
pBuf
);

105 
MT_UtûSëPªCfgKey
(
uöt8
 *
pBuf
);

106 
MT_UtûCÆlbackSub
(
uöt8
 *
pD©a
);

107 
MT_UtûKeyEvít
(
uöt8
 *
pBuf
);

108 
MT_UtûTimeAlive
();

109 
MT_UtûLedC⁄åﬁ
(
uöt8
 *
pBuf
);

110 
MT_UtûSrcM©chE«bÀ
 (
uöt8
 *
pBuf
);

111 
MT_UtûSrcM©chAddE¡ry
 (
uöt8
 *
pBuf
);

112 
MT_UtûSrcM©chDñëeE¡ry
 (
uöt8
 *
pBuf
);

113 
MT_UtûSrcM©chCheckSrcAddr
 (
uöt8
 *
pBuf
);

114 
MT_UtûSrcM©chAckAŒPídög
 (
uöt8
 *
pBuf
);

115 
MT_UtûSrcM©chCheckAŒPídög
 (
uöt8
 *
pBuf
);

117 #i‡!
deföed
 
NONWK


118 
MT_UtûD©aReq
(
uöt8
 *
pBuf
);

119 
MT_UtûAddrMgrE¡ryLookupExt
(
uöt8
 *
pBuf
);

120 
MT_UtûAddrMgrE¡ryLookupNwk
(
uöt8
 *
pBuf
);

121 #i‡
deföed
 
MT_SYS_KEY_MANAGEMENT


122 
MT_UtûAPSME_LökKeyD©aGë
(
uöt8
 *
pBuf
);

123 
MT_UtûAPSME_LökKeyNvIdGë
(
uöt8
 *
pBuf
);

125 
MT_UtûAPSME_Reque°KeyCmd
(
uöt8
 *
pBuf
);

126 
MT_UtûAssocCou¡
(
uöt8
 *
pBuf
);

127 
MT_UtûAssocFödDevi˚
(
uöt8
 *
pBuf
);

128 
MT_UtûAssocGëWôhAddªss
(
uöt8
 *
pBuf
);

129 
∑ckDev_t
(
uöt8
 *
pBuf
, 
assocüãd_devi˚s_t
 *
pDev
);

130 #i‡
deföed
 
ZCL_KEY_ESTABLISH


131 
MT_Utûz˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
uöt8
 *
pBuf
);

132 
MT_Utûz˛GíîÆ_KeyE°ablishmít_ECDSASign
(
uöt8
 *
pBuf
);

134 
MT_UtûSync
();

138 #i‡
deföed
 (
MT_UTIL_FUNC
)

148 
uöt8
 
	$MT_UtûComm™dPro˚ssög
(
uöt8
 *
pBuf
)

150 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

152 
pBuf
[
MT_RPC_POS_CMD1
])

155 #i‡!
	`deföed
(
CC253X_MACNP
)

156 
MT_UTIL_GET_DEVICE_INFO
:

157 
	`MT_UtûGëDevi˚Info
();

160 
MT_UTIL_GET_NV_INFO
:

161 
	`MT_UtûGëNvInfo
();

164 
MT_UTIL_SET_PANID
:

165 
	`MT_UtûSëP™ID
(
pBuf
);

168 
MT_UTIL_SET_CHANNELS
:

169 
	`MT_UtûSëCh™√ls
(
pBuf
);

172 
MT_UTIL_SET_SECLEVEL
:

173 
	`MT_UtûSëSecLevñ
(
pBuf
);

176 
MT_UTIL_SET_PRECFGKEY
:

177 
	`MT_UtûSëPªCfgKey
(
pBuf
);

180 
MT_UTIL_CALLBACK_SUB_CMD
:

181 
	`MT_UtûCÆlbackSub
(
pBuf
);

184 
MT_UTIL_KEY_EVENT
:

185 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

186 
	`MT_UtûKeyEvít
(
pBuf
);

190 
MT_UTIL_TIME_ALIVE
:

191 
	`MT_UtûTimeAlive
();

194 
MT_UTIL_LED_CONTROL
:

195 #i‡(
deföed
 
HAL_LED
Ë&& (HAL_LED =
TRUE
)

196 
	`MT_UtûLedC⁄åﬁ
(
pBuf
);

200 
MT_UTIL_SRC_MATCH_ENABLE
:

201 
	`MT_UtûSrcM©chE«bÀ
(
pBuf
);

204 
MT_UTIL_SRC_MATCH_ADD_ENTRY
:

205 
	`MT_UtûSrcM©chAddE¡ry
(
pBuf
);

208 
MT_UTIL_SRC_MATCH_DEL_ENTRY
:

209 
	`MT_UtûSrcM©chDñëeE¡ry
(
pBuf
);

212 
MT_UTIL_SRC_MATCH_CHECK_SRC_ADDR
:

213 
	`MT_UtûSrcM©chCheckSrcAddr
(
pBuf
);

216 
MT_UTIL_SRC_MATCH_ACK_ALL_PENDING
:

217 
	`MT_UtûSrcM©chAckAŒPídög
(
pBuf
);

220 
MT_UTIL_SRC_MATCH_CHECK_ALL_PENDING
:

221 
	`MT_UtûSrcM©chCheckAŒPídög
(
pBuf
);

224 
MT_UTIL_TEST_LOOPBACK
:

225 
	`MT_BuûdAndSídZToﬁRe•⁄£
((
MT_RPC_CMD_SRSP
|(
uöt8
)
MT_RPC_SYS_UTIL
), 
MT_UTIL_TEST_LOOPBACK
,

226 
pBuf
[
MT_RPC_POS_LEN
], (pBuf+
MT_RPC_FRAME_HDR_SZ
));

229 #i‡!
deföed
 
NONWK


230 
MT_UTIL_DATA_REQ
:

231 
	`MT_UtûD©aReq
(
pBuf
);

234 
MT_UTIL_ADDRMGR_EXT_ADDR_LOOKUP
:

235 
	`MT_UtûAddrMgrE¡ryLookupExt
(
pBuf
);

238 
MT_UTIL_ADDRMGR_NWK_ADDR_LOOKUP
:

239 
	`MT_UtûAddrMgrE¡ryLookupNwk
(
pBuf
);

242 #i‡
deföed
 
MT_SYS_KEY_MANAGEMENT


243 
MT_UTIL_APSME_LINK_KEY_DATA_GET
:

244 
	`MT_UtûAPSME_LökKeyD©aGë
(
pBuf
);

247 
MT_UTIL_APSME_LINK_KEY_NV_ID_GET
:

248 
	`MT_UtûAPSME_LökKeyNvIdGë
(
pBuf
);

252 
MT_UTIL_APSME_REQUEST_KEY_CMD
:

253 
	`MT_UtûAPSME_Reque°KeyCmd
(
pBuf
);

256 
MT_UTIL_ASSOC_COUNT
:

257 
	`MT_UtûAssocCou¡
(
pBuf
);

260 
MT_UTIL_ASSOC_FIND_DEVICE
:

261 
	`MT_UtûAssocFödDevi˚
(
pBuf
);

264 
MT_UTIL_ASSOC_GET_WITH_ADDRESS
:

265 
	`MT_UtûAssocGëWôhAddªss
(
pBuf
);

268 #i‡
deföed
 
ZCL_KEY_ESTABLISH


269 
MT_UTIL_ZCL_KEY_EST_INIT_EST
:

270 
	`MT_Utûz˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
pBuf
);

273 
MT_UTIL_ZCL_KEY_EST_SIGN
:

274 
	`MT_Utûz˛GíîÆ_KeyE°ablishmít_ECDSASign
(
pBuf
);

278 
MT_UTIL_SYNC_REQ
:

279 
	`MT_UtûSync
();

284 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

288  
°©us
;

289 
	}
}

300 
	$MT_UtûGëDevi˚Info
()

302 
uöt8
 *
buf
;

303 
uöt8
 *
pBuf
;

304 
uöt8
 
bufLí
 = 
MT_UTIL_DEVICE_INFO_RESPONSE_LEN
;

305 
uöt16
 *
assocLi°
 = 
NULL
;

307 #i‡!
deföed
 
NONWK


308 
uöt8
 
assocC¡
 = 0;

310 i‡(
ZG_DEVICE_RTR_TYPE
)

312 
assocLi°
 = 
	`AssocMakeLi°
–&
assocC¡
 );

313 
bufLí
 +(
assocC¡
 * (
uöt16
));

317 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

318 i‡–
buf
 )

320 
pBuf
 = 
buf
;

322 *
pBuf
++ = 
ZSUCCESS
;

324 
	`oßl_nv_ªad
–
ZCD_NV_EXTADDR
, 0, 
Z_EXTADDR_LEN
, 
pBuf
 );

325 
pBuf
 +
Z_EXTADDR_LEN
;

327 #i‡
deföed
 
NONWK


329 *
pBuf
++ = 0;

330 *
pBuf
++ = 0;

331 *
pBuf
++ = 0;

332 *
pBuf
++ = 0;

333 *
pBuf
 = 0;

336 
uöt16
 
sh‹tAddr
 = 
	`NLME_GëSh‹tAddr
();

337 *
pBuf
++ = 
	`LO_UINT16
–
sh‹tAddr
 );

338 *
pBuf
++ = 
	`HI_UINT16
–
sh‹tAddr
 );

342 *
pBuf
++ = 
ZSTACK_DEVICE_BUILD
;

345 *
pBuf
++ = (
uöt8
)
devSèã
;

347 i‡(
ZG_DEVICE_RTR_TYPE
)

349 *
pBuf
++ = 
assocC¡
;

351 i‡–
assocC¡
 )

353 
uöt8
 
x
;

354 
uöt16
 *
puöt16
 = 
assocLi°
;

356  
x
 = 0; x < 
assocC¡
; x++, 
puöt16
++ )

358 *
pBuf
++ = 
	`LO_UINT16
–*
puöt16
 );

359 *
pBuf
++ = 
	`HI_UINT16
–*
puöt16
 );

365 *
pBuf
++ = 0;

369 
	`MT_BuûdAndSídZToﬁRe•⁄£
–((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
),

370 
MT_UTIL_GET_DEVICE_INFO
,

371 
bufLí
, 
buf
 );

373 
	`oßl_mem_‰ì
–
buf
 );

376 i‡–
assocLi°
 )

378 
	`oßl_mem_‰ì
–
assocLi°
 );

380 
	}
}

391 
	$MT_UtûGëNvInfo
()

393 
uöt8
 
Àn
;

394 
uöt8
 
°©
;

395 
uöt8
 *
buf
;

396 
uöt8
 *
pBuf
;

397 
uöt16
 
tmp16
;

398 
uöt32
 
tmp32
;

404 
Àn
 = 1 + 
Z_EXTADDR_LEN
 + 4 + 2 + 1 + 
SEC_KEY_LEN
;

406 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

407 i‡–
buf
 )

410 
	`oßl_mem£t
–
buf
, 0xFF, 
Àn
 );

413 
pBuf
 = 
buf
 + 1;

416 
°©
 = 
	`oßl_nv_ªad
–
ZCD_NV_EXTADDR
, 0, 
Z_EXTADDR_LEN
, 
pBuf
 );

417 i‡–
°©
 ) stat = 0x01;

418 
pBuf
 +
Z_EXTADDR_LEN
;

421 i‡–
	`oßl_nv_ªad
–
ZCD_NV_CHANLIST
, 0, –
tmp32
 ), &tmp32 ) )

422 
°©
 |= 0x02;

425 
pBuf
[0] = 
	`BREAK_UINT32
–
tmp32
, 3 );

426 
pBuf
[1] = 
	`BREAK_UINT32
–
tmp32
, 2 );

427 
pBuf
[2] = 
	`BREAK_UINT32
–
tmp32
, 1 );

428 
pBuf
[3] = 
	`BREAK_UINT32
–
tmp32
, 0 );

430 
pBuf
 +–
tmp32
 );

433 i‡–
	`oßl_nv_ªad
–
ZCD_NV_PANID
, 0, –
tmp16
 ), &tmp16 ) )

434 
°©
 |= 0x04;

437 
pBuf
[0] = 
	`LO_UINT16
–
tmp16
 );

438 
pBuf
[1] = 
	`HI_UINT16
–
tmp16
 );

440 
pBuf
 +–
tmp16
 );

443 i‡–
	`oßl_nv_ªad
–
ZCD_NV_SECURITY_LEVEL
, 0, –
uöt8
 ), 
pBuf
++ ) )

444 
°©
 |= 0x08;

447 i‡–
	`oßl_nv_ªad
–
ZCD_NV_PRECFGKEY
, 0, 
SEC_KEY_LEN
, 
pBuf
 ) )

448 
°©
 |= 0x10;

451 *
buf
 = 
°©
;

453 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
MT_UTIL_GET_NV_INFO
,

454 
Àn
, 
buf
 );

456 
	`oßl_mem_‰ì
–
buf
 );

458 
	}
}

469 
	$MT_UtûSëP™ID
(
uöt8
 *
pBuf
)

471 
uöt16
 
ãmp16
;

472 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

473 
uöt8
 
cmdId
;

476 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

477 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

479 
ãmp16
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

480 
pBuf
 +(
uöt16
);

482 
ªtVÆue
 = 
	`oßl_nv_wrôe
(
ZCD_NV_PANID
, 0, 
	`oßl_nv_ôem_Àn
–ZCD_NV_PANID ), &
ãmp16
);

485 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
);

486 
	}
}

497 
	$MT_UtûSëCh™√ls
(
uöt8
 *
pBuf
)

499 
uöt32
 
tmp32
;

500 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

501 
uöt8
 
cmdId
;

504 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

505 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

507 
tmp32
 = 
	`BUILD_UINT32
(
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3]);

509 
ªtVÆue
 = 
	`oßl_nv_wrôe
(
ZCD_NV_CHANLIST
, 0, 
	`oßl_nv_ôem_Àn
–ZCD_NV_CHANLIST ), &
tmp32
);

512 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
);

513 
	}
}

524 
	$MT_UtûSëSecLevñ
(
uöt8
 *
pBuf
)

526 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

527 
uöt8
 
cmdId
;

530 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

531 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

533 
ªtVÆue
 = 
	`oßl_nv_wrôe
–
ZCD_NV_SECURITY_LEVEL
, 0, 
	`oßl_nv_ôem_Àn
–ZCD_NV_SECURITY_LEVEL ), 
pBuf
);

536 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
 );

538 
	}
}

549 
	$MT_UtûSëPªCfgKey
(
uöt8
 *
pBuf
)

551 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

552 
uöt8
 
cmdId
;

555 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

556 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

558 
ªtVÆue
 = 
	`oßl_nv_wrôe
–
ZCD_NV_PRECFGKEY
, 0, 
	`oßl_nv_ôem_Àn
–ZCD_NV_PRECFGKEY ), 
pBuf
);

561 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
 );

563 
	}
}

574 
	$MT_UtûCÆlbackSub
(
uöt8
 *
pBuf
)

576 
uöt8
 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

577 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

579 #i‡
	`deföed
(
MT_MAC_CB_FUNC
Ë|| deföed(
MT_NWK_CB_FUNC
Ë|| deföed(
MT_ZDO_CB_FUNC
Ë|| deföed(
MT_AF_CB_FUNC
Ë|| deföed(
MT_SAPI_CB_FUNC
)

580 
uöt8
 
subSy°em
;

581 
uöt16
 
subs¸ibed_comm™d
;

584 
ªtVÆue
 = 
ZSuc˚ss
;

585 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

588 
subs¸ibed_comm™d
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

589 
pBuf
 += 2;

592 
subSy°em
 = 
	`HI_UINT16
(
subs¸ibed_comm™d
) & 0x1F ;

595 i‡(*
pBuf
)

598 #i‡
	`deföed
–
MT_MAC_CB_FUNC
 )

599 i‡((
subSy°em
 =
MT_RPC_SYS_MAC
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

600 
_macCÆlbackSub
 = 0xFFFF;

603 #i‡
	`deföed
–
MT_NWK_CB_FUNC
 )

604 i‡((
subSy°em
 =
MT_RPC_SYS_NWK
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

605 
_nwkCÆlbackSub
 = 0xFFFF;

608 #i‡
	`deföed
–
MT_ZDO_CB_FUNC
 )

609 i‡((
subSy°em
 =
MT_RPC_SYS_ZDO
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

610 
_zdoCÆlbackSub
 = 0xFFFFFFFF;

613 #i‡
	`deföed
–
MT_AF_CB_FUNC
 )

614 i‡((
subSy°em
 =
MT_RPC_SYS_AF
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

615 
_afCÆlbackSub
 = 0xFFFF;

618 #i‡
	`deföed
–
MT_SAPI_CB_FUNC
 )

619 i‡((
subSy°em
 =
MT_RPC_SYS_SAPI
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

620 
_ßpiCÆlbackSub
 = 0xFFFF;

626 #i‡
	`deföed
–
MT_MAC_CB_FUNC
 )

627 i‡((
subSy°em
 =
MT_RPC_SYS_MAC
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

628 
_macCÆlbackSub
 = 0x0000;

631 #i‡
	`deföed
–
MT_NWK_CB_FUNC
 )

632 i‡((
subSy°em
 =
MT_RPC_SYS_NWK
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

633 
_nwkCÆlbackSub
 = 0x0000;

636 #i‡
	`deföed
–
MT_ZDO_CB_FUNC
 )

637 i‡((
subSy°em
 =
MT_RPC_SYS_ZDO
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

638 
_zdoCÆlbackSub
 = 0x00000000;

641 #i‡
	`deföed
–
MT_AF_CB_FUNC
 )

642 i‡((
subSy°em
 =
MT_RPC_SYS_AF
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

643 
_afCÆlbackSub
 = 0x0000;

646 #i‡
	`deföed
–
MT_SAPI_CB_FUNC
 )

647 i‡((
subSy°em
 =
MT_RPC_SYS_SAPI
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

648 
_ßpiCÆlbackSub
 = 0x0000;

654 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
 );

655 
	}
}

657 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

667 
	$MT_UtûKeyEvít
(
uöt8
 *
pBuf
)

669 
uöt8
 
x
 = 0;

670 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

671 
uöt8
 
cmdId
;

674 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

675 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

678 i‡–*
pBuf
 & 0x01 )

679 
x
 |
HAL_KEY_SW_1
;

680 i‡–*
pBuf
 & 0x02 )

681 
x
 |
HAL_KEY_SW_2
;

682 i‡–*
pBuf
 & 0x04 )

683 
x
 |
HAL_KEY_SW_3
;

684 i‡–*
pBuf
 & 0x08 )

685 
x
 |
HAL_KEY_SW_4
;

686 #i‡
	`deföed
 ( 
HAL_KEY_SW_5
 )

687 i‡–*
pBuf
 & 0x10 )

688 
x
 |
HAL_KEY_SW_5
;

690 #i‡
	`deföed
 ( 
HAL_KEY_SW_6
 )

691 i‡–*
pBuf
 & 0x20 )

692 
x
 |
HAL_KEY_SW_6
;

694 #i‡
	`deföed
 ( 
HAL_KEY_SW_7
 )

695 i‡–*
pBuf
 & 0x40 )

696 
x
 |
HAL_KEY_SW_7
;

698 #i‡
	`deföed
 ( 
HAL_KEY_SW_8
 )

699 i‡–*
pBuf
 & 0x80 )

700 
x
 |
HAL_KEY_SW_8
;

702 
pBuf
++;

704 
ªtVÆue
 = 
	`OnBﬂrd_SídKeys
(
x
, *
pBuf
);

707 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
 );

708 
	}
}

720 
	$MT_UtûTimeAlive
()

722 
uöt8
 
timeAlive
[4];

723 
uöt32
 
tmp32
;

726 
tmp32
 = 
	`oßl_GëSy°emClock
() / 1000;

729 
timeAlive
[0] = 
	`BREAK_UINT32
(
tmp32
, 0);

730 
timeAlive
[1] = 
	`BREAK_UINT32
(
tmp32
, 1);

731 
timeAlive
[2] = 
	`BREAK_UINT32
(
tmp32
, 2);

732 
timeAlive
[3] = 
	`BREAK_UINT32
(
tmp32
, 3);

735 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
),

736 
MT_UTIL_TIME_ALIVE
, (
timeAlive
),ÅimeAlive);

737 
	}
}

739 #i‡(
deföed
 
HAL_LED
Ë&& (HAL_LED =
TRUE
)

749 
	$MT_UtûLedC⁄åﬁ
(
uöt8
 *
pBuf
)

751 
uöt8
 
iLed
, 
Led
, 
iMode
, 
Mode
, 
cmdId
;

752 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

755 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

756 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

759 
iLed
 = *
pBuf
++;

760 
iMode
 = *
pBuf
;

762 i‡–
iLed
 == 1 )

763 
Led
 = 
HAL_LED_1
;

764 i‡–
iLed
 == 2 )

765 
Led
 = 
HAL_LED_2
;

766 i‡–
iLed
 == 3 )

767 
Led
 = 
HAL_LED_3
;

768 i‡–
iLed
 == 4 )

769 
Led
 = 
HAL_LED_4
;

770 i‡–
iLed
 == 0xFF )

771 
Led
 = 
HAL_LED_ALL
;

773 
Led
 = 0;

775 i‡–
iMode
 == 0 )

776 
Mode
 = 
HAL_LED_MODE_OFF
;

777 i‡–
iMode
 == 1 )

778 
Mode
 = 
HAL_LED_MODE_ON
;

779 i‡–
iMode
 == 2 )

780 
Mode
 = 
HAL_LED_MODE_BLINK
;

781 i‡–
iMode
 == 3 )

782 
Mode
 = 
HAL_LED_MODE_FLASH
;

783 i‡–
iMode
 == 4 )

784 
Mode
 = 
HAL_LED_MODE_TOGGLE
;

786 
Led
 = 0;

788 i‡–
Led
 != 0 )

790 
	`HÆLedSë
 (
Led
, 
Mode
);

791 
ªtVÆue
 = 
ZSuc˚ss
;

795 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
 );

796 
	}
}

809 
	$MT_UtûSrcM©chE«bÀ
 (
uöt8
 *
pBuf
)

811 
uöt8
 
ªtVÆue
, 
cmdId
;

814 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

815 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

817 #ifde‡
AUTO_PEND


819 
ªtVÆue
 = 
	`ZMacSrcM©chE«bÀ
 (
pBuf
[0],ÖBuf[1]);

821 
ªtVÆue
 = 
ZMacUnsuµ‹ãd
;

825 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
 );

827 
	}
}

838 
	$MT_UtûSrcM©chAddE¡ry
 (
uöt8
 *
pBuf
)

840 
uöt8
 
ªtVÆue
, 
cmdId
;

843 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

844 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

846 #ifde‡
AUTO_PEND


847 
uöt16
 
∑nID
;

848 
zAddrTy≥_t
 
devAddr
;

851 
devAddr
.
addrMode
 = *
pBuf
++;

854 
	`MT_UtûSpi2Addr
–&
devAddr
, 
pBuf
);

855 
pBuf
 +
Z_EXTADDR_LEN
;

858 
∑nID
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

861 
ªtVÆue
 = 
	`ZMacSrcM©chAddE¡ry
 (&
devAddr
, 
∑nID
);

863 
ªtVÆue
 = 
ZMacUnsuµ‹ãd
;

867 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
 );

868 
	}
}

879 
	$MT_UtûSrcM©chDñëeE¡ry
 (
uöt8
 *
pBuf
)

881 
uöt8
 
ªtVÆue
, 
cmdId
;

884 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

885 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

887 #ifde‡
AUTO_PEND


888 
uöt16
 
∑nID
;

889 
zAddrTy≥_t
 
devAddr
;

892 
devAddr
.
addrMode
 = *
pBuf
++;

895 
	`MT_UtûSpi2Addr
–&
devAddr
, 
pBuf
);

896 
pBuf
 +
Z_EXTADDR_LEN
;

899 
∑nID
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

902 
ªtVÆue
 = 
	`ZMacSrcM©chDñëeE¡ry
 (&
devAddr
, 
∑nID
);

904 
ªtVÆue
 = 
ZMacUnsuµ‹ãd
;

908 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
 );

909 
	}
}

920 
	$MT_UtûSrcM©chCheckSrcAddr
 (
uöt8
 *
pBuf
)

922 
uöt8
 
cmdId
;

923 
uöt8
 
ªtAºay
[2];

926 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

927 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

930 
uöt16
 
∑nID
;

931 
zAddrTy≥_t
 
devAddr
;

934 
devAddr
.
addrMode
 = *
pBuf
++;

937 
	`MT_UtûSpi2Addr
–&
devAddr
, 
pBuf
);

938 
pBuf
 +
Z_EXTADDR_LEN
;

941 
∑nID
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

944 
ªtAºay
[1] = 
	`ZMacSrcM©chCheckSrcAddr
 (&
devAddr
, 
∑nID
);

947 i‡(
ªtAºay
[1] =
ZMacSrcM©chInvÆidIndex
 )

949 
ªtAºay
[0] = 
ZFaûuª
;

953 
ªtAºay
[0] = 
ZSuc˚ss
;

956 
ªtAºay
[0] = 
ZMacUnsuµ‹ãd
;

957 
ªtAºay
[1] = 
ZMacSrcM©chInvÆidIndex
;

961 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 2, 
ªtAºay
 );

962 
	}
}

977 
	$MT_UtûSrcM©chAckAŒPídög
 (
uöt8
 *
pBuf
)

979 
uöt8
 
ªtVÆue
, 
cmdId
;

982 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

983 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

985 #ifde‡
AUTO_PEND


987 
ªtVÆue
 = 
	`ZMacSrcM©chAckAŒPídög
(*
pBuf
);

989 
ªtVÆue
 = 
ZMacUnsuµ‹ãd
;

993 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
 );

994 
	}
}

1006 
	$MT_UtûSrcM©chCheckAŒPídög
 (
uöt8
 *
pBuf
)

1008 
uöt8
 
ªtAºay
[2], 
cmdId
;

1011 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1012 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1014 #ifde‡
AUTO_PEND


1016 
ªtAºay
[0] = 
ZMacSuc˚ss
;

1017 
ªtAºay
[1] = 
	`ZMacSrcM©chCheckAŒPídög
();

1019 
ªtAºay
[0] = 
ZMacUnsuµ‹ãd
;

1020 
ªtAºay
[1] = 
FALSE
;

1024 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 2, 
ªtAºay
 );

1025 
	}
}

1031 #ifde‡
AUTO_PEND


1044 
	$MT_UtûRevExtCpy
–
uöt8
 *
pD°
, uöt8 *
pSrc
 )

1046 
öt8
 
i
;

1048  
i
 = 
Z_EXTADDR_LEN
 - 1; i >= 0; i-- )

1050 *
pD°
++ = 
pSrc
[
i
];

1052 
	}
}

1065 
	$MT_UtûSpi2Addr
–
zAddrTy≥_t
 *
pD°
, 
uöt8
 *
pSrc
 )

1067 i‡–
pD°
->
addrMode
 =
Addr16Bô
 )

1069 
pD°
->
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pSrc
[0] ,ÖSrc[1] );

1071 i‡–
pD°
->
addrMode
 =
Addr64Bô
 )

1073 
	`MT_UtûRevExtCpy
–
pD°
->
addr
.
extAddr
, 
pSrc
 );

1075 
	}
}

1078 #i‡!
deföed
 
NONWK


1088 
	$MT_UtûD©aReq
(
uöt8
 *
pBuf
)

1090 
uöt8
 
π∫
 = 
	`NwkPﬁlReq
(
pBuf
[
MT_RPC_POS_DAT0
]);

1091 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
MT_UTIL_DATA_REQ
,

1092 1, &
π∫
);

1093 
	}
}

1104 
	$MT_UtûAddrMgrE¡ryLookupExt
(
uöt8
 *
pBuf
)

1106 
uöt8
 
nwkAddr
[2];

1107 
AddrMgrE¡ry_t
 
íåy
;

1108 
uöt8
 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1109 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1111 
	`oßl_mem˝y
(
íåy
.
extAddr
, 
pBuf
, 
Z_EXTADDR_LEN
);

1112 ()
	`AddrMgrE¡ryLookupExt
(&
íåy
);

1114 
nwkAddr
[0] = 
	`LO_UINT16
(
íåy
.nwkAddr);

1115 
nwkAddr
[1] = 
	`HI_UINT16
(
íåy
.nwkAddr);

1116 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
),

1117 
cmdId
, (
uöt16
), 
nwkAddr
);

1118 
	}
}

1129 
	$MT_UtûAddrMgrE¡ryLookupNwk
(
uöt8
 *
pBuf
)

1131 
AddrMgrE¡ry_t
 
íåy
;

1132 
uöt8
 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1133 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1135 
íåy
.
nwkAddr
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

1136 ()
	`AddrMgrE¡ryLookupNwk
(&
íåy
);

1138 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
),

1139 
cmdId
, 
Z_EXTADDR_LEN
, 
íåy
.
extAddr
);

1140 
	}
}

1142 #i‡
deföed
 
MT_SYS_KEY_MANAGEMENT


1152 
	$MT_UtûAPSME_LökKeyD©aGë
(
uöt8
 *
pBuf
)

1154 
uöt8
 
r•
[
MT_APSME_LINKKEY_GET_RSP_LEN
];

1155 
APSME_LökKeyD©a_t
 *
pD©a
 = 
NULL
;

1156 
uöt8
 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1157 
uöt16
 
≠sLökKeyNvId
;

1158 
uöt32
 *
≠sRxFrmC¡r
;

1159 
uöt32
 *
≠sTxFrmC¡r
;

1161 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1163 *
r•
 = 
	`APSME_LökKeyNVIdGë
(
pBuf
, &
≠sLökKeyNvId
);

1165 i‡(
SUCCESS
 =*
r•
)

1167 
pD©a
 = (
APSME_LökKeyD©a_t
 *)
	`oßl_mem_Æloc
((APSME_LinkKeyData_t));

1169 i‡(
pD©a
 !
NULL
)

1172 i‡–
	`oßl_nv_ªad
–
≠sLökKeyNvId
, 0,

1173 (
APSME_LökKeyD©a_t
), 
pD©a
Ë=
SUCCESS
)

1176 
≠sRxFrmC¡r
 = &
ApsLökKeyFrmC¡r
[
≠sLökKeyNvId
 - 
ZCD_NV_APS_LINK_KEY_DATA_START
].
rxFrmC¡r
;

1177 
≠sTxFrmC¡r
 = &
ApsLökKeyFrmC¡r
[
≠sLökKeyNvId
 - 
ZCD_NV_APS_LINK_KEY_DATA_START
].
txFrmC¡r
;

1179 
uöt8
 *
±r
 = 
r•
+1;

1180 ()
	`oßl_mem˝y
(
±r
, 
pD©a
->
key
, 
SEC_KEY_LEN
);

1181 
±r
 +
SEC_KEY_LEN
;

1182 *
±r
++ = 
	`BREAK_UINT32
(*
≠sTxFrmC¡r
, 0);

1183 *
±r
++ = 
	`BREAK_UINT32
(*
≠sTxFrmC¡r
, 1);

1184 *
±r
++ = 
	`BREAK_UINT32
(*
≠sTxFrmC¡r
, 2);

1185 *
±r
++ = 
	`BREAK_UINT32
(*
≠sTxFrmC¡r
, 3);

1186 *
±r
++ = 
	`BREAK_UINT32
(*
≠sRxFrmC¡r
, 0);

1187 *
±r
++ = 
	`BREAK_UINT32
(*
≠sRxFrmC¡r
, 1);

1188 *
±r
++ = 
	`BREAK_UINT32
(*
≠sRxFrmC¡r
, 2);

1189 *
±r
++ = 
	`BREAK_UINT32
(*
≠sRxFrmC¡r
, 3);

1193 
	`oßl_mem£t
–
pD©a
, 0x00, (
APSME_LökKeyD©a_t
) );

1195 
	`oßl_mem_‰ì
(
pD©a
);

1201 
	`oßl_mem£t
(&
r•
[1], 0xFF, 
SEC_KEY_LEN
 + (
MT_UTIL_FRM_CTR_LEN
 * 2));

1204 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
,

1205 
MT_APSME_LINKKEY_GET_RSP_LEN
, 
r•
);

1208 
	`oßl_mem£t
(
r•
, 0x00, 
MT_APSME_LINKKEY_GET_RSP_LEN
);

1210 
	}
}

1221 
	$MT_UtûAPSME_LökKeyNvIdGë
(
uöt8
 *
pBuf
)

1223 
uöt8
 
r•
[
MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN
];

1224 
uöt8
 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1225 
uöt16
 
≠sLökKeyNvId
;

1227 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1229 *
r•
 = 
	`APSME_LökKeyNVIdGë
(
pBuf
, &
≠sLökKeyNvId
);

1231 i‡(
SUCCESS
 =*
r•
)

1233 
r•
[1] = 
	`LO_UINT16
(
≠sLökKeyNvId
);

1234 
r•
[2] = 
	`HI_UINT16
(
≠sLökKeyNvId
);

1239 
	`oßl_mem£t
(&
r•
[1], 0xFF, 2);

1242 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
,

1243 
MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN
, 
r•
);

1244 
	}
}

1256 
	$MT_UtûAPSME_Reque°KeyCmd
(
uöt8
 *
pBuf
)

1258 
uöt8
 
cmdId
;

1259 
uöt8
 
∑π√rAddr
[
Z_EXTADDR_LEN
];

1260 
uöt8
 
ªtVÆue
;

1263 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1264 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1267 
	`oßl_mem˝y
(
∑π√rAddr
, 
pBuf
, 
Z_EXTADDR_LEN
);

1269 
ªtVÆue
 = (
uöt8
)
	`ZDSecMgrReque°AµKey
(
∑π√rAddr
);

1271 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
);

1272 
	}
}

1283 
	$MT_UtûAssocCou¡
(
uöt8
 *
pBuf
)

1285 
uöt16
 
˙t
;

1286 
uöt8
 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1287 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1289 
˙t
 = 
	`AssocCou¡
(
pBuf
[0],ÖBuf[1]);

1290 
pBuf
[0] = 
	`LO_UINT16
(
˙t
);

1291 
pBuf
[1] = 
	`HI_UINT16
(
˙t
);

1293 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 2, 
pBuf
);

1294 
	}
}

1305 
	$MT_UtûAssocFödDevi˚
(
uöt8
 *
pBuf
)

1307 
uöt8
 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1308 
uöt8
 
buf
[(
assocüãd_devi˚s_t
)];

1310 
	`∑ckDev_t
(
buf
, 
	`AssocFödDevi˚
(
pBuf
[
MT_RPC_FRAME_HDR_SZ
]));

1311 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
,

1312 (
assocüãd_devi˚s_t
), 
buf
);

1313 
	}
}

1324 
	$MT_UtûAssocGëWôhAddªss
(
uöt8
 *
pBuf
)

1326 
assocüãd_devi˚s_t
 *
	`AssocGëWôhAddªss
(
uöt8
 *
extAddr
, 
uöt16
 
sh‹tAddr
);

1327 
uöt8
 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1328 
uöt8
 
buf
[(
assocüãd_devi˚s_t
)];

1330 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1331 
	`∑ckDev_t
(
buf
, 
	`AssocGëWôhAddªss
(((
	`AddrMgrExtAddrVÆid
(
pBuf
)Ë?ÖBu‡: 
NULL
),

1332 
	`BUILD_UINT16
(
pBuf
[
Z_EXTADDR_LEN
],ÖBuf[Z_EXTADDR_LEN+1])));

1334 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
,

1335 (
assocüãd_devi˚s_t
), 
buf
);

1336 
	}
}

1349 
	$∑ckDev_t
(
uöt8
 *
pBuf
, 
assocüãd_devi˚s_t
 *
pDev
)

1351 i‡(
NULL
 =
pDev
)

1353 
uöt16
 
π∫
 = 
INVALID_NODE_ADDR
;

1354 *
pBuf
++ = 
	`LO_UINT16
(
π∫
);

1355 *
pBuf
++ = 
	`HI_UINT16
(
π∫
);

1359 *
pBuf
++ = 
	`LO_UINT16
(
pDev
->
sh‹tAddr
);

1360 *
pBuf
++ = 
	`HI_UINT16
(
pDev
->
sh‹tAddr
);

1361 *
pBuf
++ = 
	`LO_UINT16
(
pDev
->
addrIdx
);

1362 *
pBuf
++ = 
	`HI_UINT16
(
pDev
->
addrIdx
);

1363 *
pBuf
++ = 
pDev
->
nodeRñ©i⁄
;

1364 *
pBuf
++ = 
pDev
->
devSètus
;

1365 *
pBuf
++ = 
pDev
->
assocC¡
;

1366 *
pBuf
++ = 
pDev
->
age
;

1367 *
pBuf
++ = 
pDev
->
lökInfo
.
txCou¡î
;

1368 *
pBuf
++ = 
pDev
->
lökInfo
.
txCo°
;

1369 *
pBuf
++ = 
pDev
->
lökInfo
.
rxLqi
;

1370 *
pBuf
++ = 
pDev
->
lökInfo
.
öKeySeqNum
;

1371 *
pBuf
++ = 
	`BREAK_UINT32
(
pDev
->
lökInfo
.
öFrmC¡r
, 0);

1372 *
pBuf
++ = 
	`BREAK_UINT32
(
pDev
->
lökInfo
.
öFrmC¡r
, 1);

1373 *
pBuf
++ = 
	`BREAK_UINT32
(
pDev
->
lökInfo
.
öFrmC¡r
, 2);

1374 *
pBuf
++ = 
	`BREAK_UINT32
(
pDev
->
lökInfo
.
öFrmC¡r
, 3);

1375 *
pBuf
++ = 
	`LO_UINT16
(
pDev
->
lökInfo
.
txFaûuª
);

1376 *
pBuf
++ = 
	`HI_UINT16
(
pDev
->
lökInfo
.
txFaûuª
);

1378 
	}
}

1380 #i‡
deföed
 
ZCL_KEY_ESTABLISH


1390 
	$MT_Utûz˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
uöt8
 *
pBuf
)

1392 
afAddrTy≥_t
 
∑π√rAddr
;

1393 
uöt8
 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1394 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1396 
∑π√rAddr
.
∑nId
 = 0;

1397 
∑π√rAddr
.
ídPoöt
 = 
pBuf
[2];

1398 
∑π√rAddr
.
addrMode
 = (
afAddrMode_t
)
pBuf
[3];

1399 i‡(
afAddr64Bô
 =
∑π√rAddr
.
addrMode
)

1401 ()
	`oßl_mem˝y
(
∑π√rAddr
.
addr
.
extAddr
, 
pBuf
+4, 
Z_EXTADDR_LEN
);

1405 
∑π√rAddr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
(
pBuf
[4],ÖBuf[5]);

1408 
z˛_key_e°ablish_èsk_id
 = 
pBuf
[0];

1409 *
pBuf
 = 
	`z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
MT_TaskID
, &
∑π√rAddr
,ÖBuf[1]);

1410 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, 
pBuf
);

1411 
	}
}

1422 
	$MT_Utûz˛GíîÆ_KeyE°ablishmít_ECDSASign
(
uöt8
 *
pBuf
)

1424 #i‡
deföed
 
TC_LINKKEY_JOIN


1425 
uöt8
 *
ouçut
 = 
	`oßl_mem_Æloc
(
SE_PROFILE_SIGNATURE_LENGTH
+1);

1426 
uöt8
 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1427 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1429 i‡(
NULL
 =
ouçut
)

1431 *
pBuf
 = 
FAILURE
;

1432 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, 
pBuf
);

1436 *
ouçut
 = 
	`z˛GíîÆ_KeyE°ablishmít_ECDSASign
(
pBuf
+1, *pBuf, output+1);

1437 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
,

1438 
SE_PROFILE_SIGNATURE_LENGTH
+1, 
ouçut
);

1439 
	`oßl_mem_‰ì
(
ouçut
);

1442 
	}
}

1453 
	$MT_UtûKeyE°ablishInd
(
keyE°ablishmítInd_t
 *
pInd
)

1455 
uöt8
 
msg
[6];

1457 
msg
[0] = 
z˛_key_e°ablish_èsk_id
;

1458 
msg
[1] = 
pInd
->
hdr
.
evít
;

1459 
msg
[2] = 
pInd
->
hdr
.
°©us
;

1460 
msg
[3] = 
pInd
->
waôTime
;

1461 
msg
[4] = 
	`LO_UINT16
(
pInd
->
keyE°ablishmítSuôe
);

1462 
msg
[5] = 
	`HI_UINT16
(
pInd
->
keyE°ablishmítSuôe
);

1464 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_UTIL
),

1465 
MT_UTIL_ZCL_KEY_ESTABLISH_IND
, 6, 
msg
);

1466 
	}
}

1478 
	$MT_UtûSync
()

1480 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
|(uöt8)
MT_RPC_SYS_UTIL
),
MT_UTIL_SYNC_REQ
,0,0);

1481 
	}
}

	@Components/mt/MT_UTIL.h

41 #i‚de‡
MT_UTIL_H


42 
	#MT_UTIL_H


	)

44 #i‡
deföed
 
ZCL_KEY_ESTABLISH


45 
	~"z˛_key_e°ablish.h
"

48 #ifde‡
__˝lu•lus


57 #i‡
deföed
 (
MT_UTIL_FUNC
)

61 
uöt8
 
MT_UtûComm™dPro˚ssög
(uöt8 *
pBuf
);

63 #i‡
deföed
 
ZCL_KEY_ESTABLISH


73 
MT_UtûKeyE°ablishInd
(
keyE°ablishmítInd_t
 *
pInd
);

77 #ifde‡
__˝lu•lus


	@Components/mt/MT_VERSION.c

43 
	~"ZComDef.h
"

44 
	~"MT_VERSION.h
"

49 c⁄° 
uöt8
 
	gMTVîsi⁄Såög
[5] = {

	@Components/mt/MT_VERSION.h

39 #i‚de‡
MT_VERSION_H


40 
	#MT_VERSION_H


	)

42 #ifde‡
__˝lu•lus


47 c⁄° 
uöt8
 
MTVîsi⁄Såög
[5];

49 #ifde‡
__˝lu•lus


	@Components/mt/MT_ZDO.c

40 #ifde‡
MT_ZDO_FUNC


45 
	~"ZComDef.h
"

46 
	~"OSAL.h
"

47 
	~"OSAL_Nv.h
"

48 
	~"MT.h
"

49 
	~"MT_ZDO.h
"

50 
	~"APSMEDE.h
"

51 
	~"ZDC⁄fig.h
"

52 
	~"ZDProfûe.h
"

53 
	~"ZDObje˘.h
"

54 
	~"ZDAµ.h
"

56 #i‡!
deföed
–
WIN32
 )

57 
	~"OnBﬂrd.h
"

60 #i‡
deföed
 ( 
MT_SYS_KEY_MANAGEMENT
 )

61 
	~"ZDSecMgr.h
"

64 
	~"nwk_utû.h
"

69 
	#MT_ZDO_END_DEVICE_ANNCE_IND_LEN
 0x0D

	)

70 
	#MT_ZDO_ADDR_RSP_LEN
 0x0D

	)

71 
	#MT_ZDO_BIND_UNBIND_RSP_LEN
 0x03

	)

72 
	#MT_ZDO_BEACON_IND_LEN
 21

	)

73 
	#MT_ZDO_BEACON_IND_PACK_LEN
 (
MT_UART_TX_BUFF_MAX
 - 
SPI_0DATA_MSG_LEN
)

	)

74 
	#MT_ZDO_JOIN_CNF_LEN
 5

	)

78 
	#MT_ZDO_CONCENTRATOR_IND_LEN
 (2 + 
Z_EXTADDR_LEN
 + 1)

	)

80 
	#MTZDO_RESPONSE_BUFFER_LEN
 100

	)

82 
	#MTZDO_MAX_MATCH_CLUSTERS
 16

	)

83 
	#MTZDO_MAX_ED_BIND_CLUSTERS
 15

	)

86 
	#MT_ZDO_CID_TO_AREQ_ID
(
CId
Ë((
uöt8
)(CIdË| 0x80)

	)

88 
	#MT_ZDO_STATUS_LEN
 1

	)

93 
uöt32
 
	g_zdoCÆlbackSub
;

94 
uöt8
 *
	gpBóc⁄IndBuf
 = 
NULL
;

103 #i‡
deföed
 (
MT_ZDO_FUNC
)

104 
MT_ZdoNWKAddªssReque°
(
uöt8
 *
pBuf
);

105 
MT_ZdoIEEEAddrReque°
(
uöt8
 *
pBuf
);

106 
MT_ZdoNodeDescReque°
(
uöt8
 *
pBuf
);

107 
MT_ZdoPowîDescReque°
(
uöt8
 *
pBuf
);

108 
MT_ZdoSim∂eDescReque°
(
uöt8
 *
pBuf
);

109 
MT_ZdoA˘iveEpReque°
(
uöt8
 *
pBuf
);

110 
MT_ZdoM©chDescReque°
(
uöt8
 *
pBuf
);

111 
MT_ZdoCom∂exDescReque°
(
uöt8
 *
pBuf
);

112 
MT_ZdoU£rDescReque°
(
uöt8
 *
pBuf
);

113 
MT_ZdoEndDevA¬˚
(
uöt8
 *
pBuf
);

114 
MT_ZdoU£rDescSë
(
uöt8
 *
pBuf
);

115 
MT_ZdoSîvi˚DiscReque°
(
uöt8
 *
pBuf
);

116 
MT_ZdoEndDevBödReque°
(
uöt8
 *
pBuf
);

117 
MT_ZdoBödReque°
(
uöt8
 *
pBuf
);

118 
MT_ZdoUnbödReque°
(
uöt8
 *
pBuf
);

119 
MT_ZdoMgmtNwkDiscReque°
(
uöt8
 *
pBuf
);

120 #i‡
deföed
 ( 
MT_SYS_KEY_MANAGEMENT
 )

121 
MT_ZdoSëLökKey
(
uöt8
 *
pBuf
);

122 
MT_ZdoRemoveLökKey
(
uöt8
 *
pBuf
);

123 
MT_ZdoGëLökKey
(
uöt8
 *
pBuf
);

125 
MT_ZdoNëw‹kDiscovîyReq
(
uöt8
 *
pBuf
);

126 
MT_ZdoJoöReq
(
uöt8
 *
pBuf
);

128 *
MT_ZdoNwkDiscovîyCnfCB
 ( *
pSå
 );

129 *
MT_ZdoBóc⁄IndCB
 ( *
pSå
 );

130 *
MT_ZdoJoöCnfCB
 ( *
pSå
 );

131 #i‡
deföed
 (
MT_ZDO_MGMT
)

132 
MT_ZdoMgmtLqiReque°
(
uöt8
 *
pBuf
);

133 
MT_ZdoMgmtRtgReque°
(
uöt8
 *
pBuf
);

134 
MT_ZdoMgmtBödReque°
(
uöt8
 *
pBuf
);

135 
MT_ZdoMgmtLóveReque°
(
uöt8
 *
pBuf
);

136 
MT_ZdoMgmtDúe˘JoöReque°
(
uöt8
 *
pBuf
);

137 
MT_ZdoMgmtPîmôJoöReque°
(
uöt8
 *
pBuf
);

138 
MT_ZdoMgmtNwkUpd©eReque°
(
uöt8
 *
pBuf
);

140 
MT_ZdoSèπupFromAµ
(
uöt8
 *
pBuf
);

141 
MT_ZdoRegi°îF‹ZDOMsg
(
uöt8
 *
pBuf
);

142 
MT_ZdoRemoveRegi°îedCB
(
uöt8
 *
pBuf
);

145 #i‡
deföed
 (
MT_ZDO_CB_FUNC
)

146 
uöt8
 
MT_ZdoH™dÀEx˚±i⁄s
–
afIncomögMSGPackë_t
 *
pD©a
, 
zdoIncomögMsg_t
 *
öMsg
 );

147 
MT_ZdoAddrR•CB
–
ZDO_NwkIEEEAddrRe•_t
 *
pMsg
, 
uöt16
 
˛u°îID
 );

148 
MT_ZdoEndDevA¬˚CB
–
ZDO_Devi˚A¬˚_t
 *
pMsg
, 
uöt16
 
§cAddr
 );

149 
MT_ZdoBödUnbödR•CB
–
uöt16
 
˛u°îID
, uöt16 
§cAddr
, 
uöt8
 
°©us
 );

150 * 
MT_ZdoSrcRtgCB
–*
pSå
 );

151 *
MT_ZdoC⁄˚¡øt‹IndCB
(*
pSå
);

152 *
MT_ZdoLóveInd
(*
vPå
);

155 #i‡
deföed
 (
MT_ZDO_FUNC
)

165 
	$MT_ZdoInô
()

167 #ifde‡
MT_ZDO_CB_FUNC


169 
	`ZDO_Regi°îF‹ZdoCB
(
ZDO_SRC_RTG_IND_CBID
, &
MT_ZdoSrcRtgCB
);

170 
	`ZDO_Regi°îF‹ZdoCB
(
ZDO_CONCENTRATOR_IND_CBID
, &
MT_ZdoC⁄˚¡øt‹IndCB
);

171 
	`ZDO_Regi°îF‹ZdoCB
(
ZDO_LEAVE_IND_CBID
, &
MT_ZdoLóveInd
);

173 
	}
}

189 
uöt8
 
	$MT_ZdoComm™dPro˚ssög
(
uöt8
* 
pBuf
)

191 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

193 
pBuf
[
MT_RPC_POS_CMD1
])

195 #i‡
	`deföed
 ( 
ZDO_NWKADDR_REQUEST
 )

196 
MT_ZDO_NWK_ADDR_REQ
:

197 
	`MT_ZdoNWKAddªssReque°
(
pBuf
);

201 #i‡
	`deföed
 ( 
ZDO_IEEEADDR_REQUEST
 )

202 
MT_ZDO_IEEE_ADDR_REQ
:

203 
	`MT_ZdoIEEEAddrReque°
(
pBuf
);

207 #i‡
	`deföed
 ( 
ZDO_NODEDESC_REQUEST
 )

208 
MT_ZDO_NODE_DESC_REQ
:

209 
	`MT_ZdoNodeDescReque°
(
pBuf
);

213 #i‡
	`deföed
 ( 
ZDO_POWERDESC_REQUEST
 )

214 
MT_ZDO_POWER_DESC_REQ
:

215 
	`MT_ZdoPowîDescReque°
(
pBuf
);

219 #i‡
	`deföed
 ( 
ZDO_SIMPLEDESC_REQUEST
 )

220 
MT_ZDO_SIMPLE_DESC_REQ
:

221 
	`MT_ZdoSim∂eDescReque°
(
pBuf
);

225 #i‡
	`deföed
 ( 
ZDO_ACTIVEEP_REQUEST
 )

226 
MT_ZDO_ACTIVE_EP_REQ
:

227 
	`MT_ZdoA˘iveEpReque°
(
pBuf
);

231 #i‡
	`deföed
 ( 
ZDO_MATCH_REQUEST
 )

232 
MT_ZDO_MATCH_DESC_REQ
:

233 
	`MT_ZdoM©chDescReque°
(
pBuf
);

237 #i‡
	`deföed
 ( 
ZDO_COMPLEXDESC_REQUEST
 )

238 
MT_ZDO_COMPLEX_DESC_REQ
:

239 
	`MT_ZdoCom∂exDescReque°
(
pBuf
);

243 #i‡
	`deföed
 ( 
ZDO_USERDESC_REQUEST
 )

244 
MT_ZDO_USER_DESC_REQ
:

245 
	`MT_ZdoU£rDescReque°
(
pBuf
);

249 #i‡
	`deföed
 ( 
ZDO_ENDDEVICE_ANNCE
 )

250 
MT_ZDO_END_DEV_ANNCE
:

251 
	`MT_ZdoEndDevA¬˚
(
pBuf
);

255 #i‡
	`deföed
 ( 
ZDO_USERDESCSET_REQUEST
 )

256 
MT_ZDO_USER_DESC_SET
:

257 
	`MT_ZdoU£rDescSë
(
pBuf
);

261 #i‡
	`deföed
 ( 
ZDO_SERVERDISC_REQUEST
 )

262 
MT_ZDO_SERVICE_DISC_REQ
:

263 
	`MT_ZdoSîvi˚DiscReque°
(
pBuf
);

267 #i‡
	`deföed
 ( 
ZDO_ENDDEVICEBIND_REQUEST
 )

268 
MT_ZDO_END_DEV_BIND_REQ
:

269 
	`MT_ZdoEndDevBödReque°
(
pBuf
);

273 #i‡
	`deföed
 ( 
ZDO_BIND_UNBIND_REQUEST
 )

274 
MT_ZDO_BIND_REQ
:

275 
	`MT_ZdoBödReque°
(
pBuf
);

279 #i‡
	`deföed
 ( 
ZDO_BIND_UNBIND_REQUEST
 )

280 
MT_ZDO_UNBIND_REQ
:

281 
	`MT_ZdoUnbödReque°
(
pBuf
);

285 #i‡
	`deföed
 ( 
MT_SYS_KEY_MANAGEMENT
 )

286 
MT_ZDO_SET_LINK_KEY
:

287 
	`MT_ZdoSëLökKey
(
pBuf
);

290 
MT_ZDO_REMOVE_LINK_KEY
:

291 
	`MT_ZdoRemoveLökKey
(
pBuf
);

294 
MT_ZDO_GET_LINK_KEY
:

295 
	`MT_ZdoGëLökKey
(
pBuf
);

299 #i‡
	`deföed
 ( 
ZDO_MANUAL_JOIN
 )

300 
MT_ZDO_NWK_DISCOVERY_REQ
:

301 
	`MT_ZdoNëw‹kDiscovîyReq
(
pBuf
);

304 
MT_ZDO_JOIN_REQ
:

305 
	`MT_ZdoJoöReq
(
pBuf
);

309 #i‡
	`deföed
 ( 
ZDO_MGMT_NWKDISC_REQUEST
 )

310 
MT_ZDO_MGMT_NWKDISC_REQ
:

311 
	`MT_ZdoMgmtNwkDiscReque°
(
pBuf
);

315 #i‡
	`deföed
 ( 
ZDO_MGMT_LQI_REQUEST
 )

316 
MT_ZDO_MGMT_LQI_REQ
:

317 
	`MT_ZdoMgmtLqiReque°
(
pBuf
);

321 #i‡
	`deföed
 ( 
ZDO_MGMT_RTG_REQUEST
 )

322 
MT_ZDO_MGMT_RTG_REQ
:

323 
	`MT_ZdoMgmtRtgReque°
(
pBuf
);

327 #i‡
	`deföed
 ( 
ZDO_MGMT_BIND_REQUEST
 )

328 
MT_ZDO_MGMT_BIND_REQ
:

329 
	`MT_ZdoMgmtBödReque°
(
pBuf
);

333 #i‡
	`deföed
 ( 
ZDO_MGMT_LEAVE_REQUEST
 )

334 
MT_ZDO_MGMT_LEAVE_REQ
:

335 
	`MT_ZdoMgmtLóveReque°
(
pBuf
);

339 #i‡
	`deföed
 ( 
ZDO_MGMT_JOINDIRECT_REQUEST
 )

340 
MT_ZDO_MGMT_DIRECT_JOIN_REQ
:

341 
	`MT_ZdoMgmtDúe˘JoöReque°
(
pBuf
);

345 #i‡
	`deföed
 ( 
ZDO_MGMT_PERMIT_JOIN_REQUEST
 )

346 
MT_ZDO_MGMT_PERMIT_JOIN_REQ
:

347 
	`MT_ZdoMgmtPîmôJoöReque°
(
pBuf
);

351 #i‡
	`deföed
 ( 
ZDO_MGMT_NWKUPDATE_REQUEST
 )

352 
MT_ZDO_MGMT_NWK_UPDATE_REQ
:

353 
	`MT_ZdoMgmtNwkUpd©eReque°
(
pBuf
);

357 #i‡
	`deföed
 ( 
ZDO_NETWORKSTART_REQUEST
 )

358 
MT_ZDO_STARTUP_FROM_APP
:

359 
	`MT_ZdoSèπupFromAµ
(
pBuf
);

363 
MT_ZDO_MSG_CB_REGISTER
:

364 
	`MT_ZdoRegi°îF‹ZDOMsg
(
pBuf
);

367 
MT_ZDO_MSG_CB_REMOVE
:

368 
	`MT_ZdoRemoveRegi°îedCB
(
pBuf
);

372 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

376  
°©us
;

377 
	}
}

388 
	$MT_ZdoNWKAddªssReque°
(
uöt8
 *
pBuf
)

390 
uöt8
 
cmdId
;

391 
uöt8
 
ªtVÆue
;

392 
uöt8
 
ªqTy≥
;

393 
uöt8
 
°¨tIndex
;

394 
uöt8
 *
pExtAddr
;

397 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

398 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

401 
pExtAddr
 = 
pBuf
;

402 
pBuf
 +
Z_EXTADDR_LEN
;

405 
ªqTy≥
 = *
pBuf
++;

408 
°¨tIndex
 = *
pBuf
;

410 
ªtVÆue
 = (
uöt8
)
	`ZDP_NwkAddrReq
(
pExtAddr
, 
ªqTy≥
, 
°¨tIndex
, 0);

413 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

414 
	}
}

425 
	$MT_ZdoIEEEAddrReque°
 (
uöt8
 *
pBuf
)

427 
uöt8
 
cmdId
;

428 
uöt8
 
ªtVÆue
;

429 
uöt16
 
sh‹tAddr
;

430 
uöt8
 
ªqTy≥
;

431 
uöt8
 
°¨tIndex
;

434 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

435 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

438 
sh‹tAddr
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

439 
pBuf
 += 2;

442 
ªqTy≥
 = *
pBuf
++;

445 
°¨tIndex
 = *
pBuf
;

447 
ªtVÆue
 = (
uöt8
)
	`ZDP_IEEEAddrReq
(
sh‹tAddr
, 
ªqTy≥
, 
°¨tIndex
, 0);

449 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

450 
	}
}

461 
	$MT_ZdoNodeDescReque°
 (
uöt8
 *
pBuf
)

463 
uöt8
 
cmdId
;

464 
uöt8
 
ªtVÆue
;

465 
zAddrTy≥_t
 
de°Addr
;

466 
uöt16
 
sh‹tAddr
;

469 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

470 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

473 
de°Addr
.
addrMode
 = 
Addr16Bô
;

474 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

475 
pBuf
 += 2;

478 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

479 
pBuf
 += 2;

481 
ªtVÆue
 = (
uöt8
)
	`ZDP_NodeDescReq
–&
de°Addr
, 
sh‹tAddr
, 0);

483 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

484 
	}
}

495 
	$MT_ZdoPowîDescReque°
(
uöt8
 *
pBuf
)

497 
uöt8
 
cmdId
;

498 
uöt8
 
ªtVÆue
;

499 
zAddrTy≥_t
 
de°Addr
;

500 
uöt16
 
sh‹tAddr
;

503 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

504 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

507 
de°Addr
.
addrMode
 = 
Addr16Bô
;

508 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

509 
pBuf
 += 2;

512 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

513 
pBuf
 += 2;

515 
ªtVÆue
 = (
uöt8
)
	`ZDP_PowîDescReq
–&
de°Addr
, 
sh‹tAddr
, 0);

517 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

518 
	}
}

529 
	$MT_ZdoSim∂eDescReque°
(
uöt8
 *
pBuf
)

531 
uöt8
 
cmdId
;

532 
uöt8
 
ªtVÆue
;

533 
uöt8
 
ïI¡
;

534 
zAddrTy≥_t
 
de°Addr
;

535 
uöt16
 
sh‹tAddr
;

538 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

539 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

542 
de°Addr
.
addrMode
 = 
Addr16Bô
;

543 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

544 
pBuf
 += 2;

547 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

548 
pBuf
 += 2;

551 
ïI¡
 = *
pBuf
++;

553 
ªtVÆue
 = (
uöt8
)
	`ZDP_Sim∂eDescReq
–&
de°Addr
, 
sh‹tAddr
, 
ïI¡
, 0);

555 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

556 
	}
}

567 
	$MT_ZdoA˘iveEpReque°
(
uöt8
 *
pBuf
)

569 
uöt8
 
cmdId
;

570 
uöt8
 
ªtVÆue
;

571 
zAddrTy≥_t
 
de°Addr
;

572 
uöt16
 
sh‹tAddr
;

575 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

576 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

579 
de°Addr
.
addrMode
 = 
Addr16Bô
;

580 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

581 
pBuf
 += 2;

584 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

585 
pBuf
 += 2;

587 
ªtVÆue
 = (
uöt8
)
	`ZDP_A˘iveEPReq
–&
de°Addr
, 
sh‹tAddr
, 0);

589 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

590 
	}
}

601 
	$MT_ZdoM©chDescReque°
(
uöt8
 *
pBuf
)

603 
uöt8
 
cmdId
;

604 
uöt8
 
ªtVÆue
 = 0;

605 
uöt8
 
i
, 
numInClu°îs
, 
numOutClu°îs
;

606 
uöt16
 
¥ofûeId
;

607 
zAddrTy≥_t
 
de°Addr
;

608 
uöt16
 
sh‹tAddr
;

609 
uöt16
 
öClu°îs
[
MTZDO_MAX_MATCH_CLUSTERS
], 
outClu°îs
[MTZDO_MAX_MATCH_CLUSTERS];

612 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

613 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

616 
de°Addr
.
addrMode
 = 
Addr16Bô
;

617 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

618 
pBuf
 += 2;

621 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

622 
pBuf
 += 2;

625 
¥ofûeId
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

626 
pBuf
 += 2;

629 
numInClu°îs
 = *
pBuf
++;

630 i‡–
numInClu°îs
 <
MTZDO_MAX_MATCH_CLUSTERS
 )

633  
i
 = 0; i < 
numInClu°îs
; i++ )

635 
öClu°îs
[
i
] = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

636 
pBuf
 += 2;

641 
ªtVÆue
 = 
ZDP_INVALID_REQTYPE
;

645 
numOutClu°îs
 = *
pBuf
++;

646 i‡–
numOutClu°îs
 <
MTZDO_MAX_MATCH_CLUSTERS
 )

649  
i
 = 0; i < 
numOutClu°îs
; i++ )

651 
outClu°îs
[
i
] = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

652 
pBuf
 += 2;

657 
ªtVÆue
 = 
ZDP_INVALID_REQTYPE
;

660 i‡–
ªtVÆue
 == 0 )

662 
ªtVÆue
 = (
uöt8
)
	`ZDP_M©chDescReq
–&
de°Addr
, 
sh‹tAddr
, 
¥ofûeId
, 
numInClu°îs
,

663 
öClu°îs
, 
numOutClu°îs
, 
outClu°îs
, 0);

666 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

667 
	}
}

678 
	$MT_ZdoCom∂exDescReque°
(
uöt8
 *
pBuf
)

680 
uöt8
 
cmdId
;

681 
uöt8
 
ªtVÆue
;

682 
zAddrTy≥_t
 
de°Addr
;

683 
uöt16
 
sh‹tAddr
;

686 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

687 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

690 
de°Addr
.
addrMode
 = 
Addr16Bô
;

691 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

692 
pBuf
 += 2;

695 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

696 
pBuf
 += 2;

698 
ªtVÆue
 = (
uöt8
)
	`ZDP_Com∂exDescReq
–&
de°Addr
, 
sh‹tAddr
, 0);

700 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

701 
	}
}

712 
	$MT_ZdoU£rDescReque°
(
uöt8
 *
pBuf
)

714 
uöt8
 
cmdId
;

715 
uöt8
 
ªtVÆue
;

716 
zAddrTy≥_t
 
de°Addr
;

717 
uöt16
 
sh‹tAddr
;

720 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

721 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

724 
de°Addr
.
addrMode
 = 
Addr16Bô
;

725 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

726 
pBuf
 += 2;

729 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

730 
pBuf
 += 2;

732 
ªtVÆue
 = (
uöt8
)
	`ZDP_U£rDescReq
–&
de°Addr
, 
sh‹tAddr
, 0);

734 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

735 
	}
}

746 
	$MT_ZdoEndDevA¬˚
(
uöt8
 *
pBuf
)

748 
uöt8
 
cmdId
;

749 
uöt8
 
ªtVÆue
;

750 
uöt16
 
sh‹tAddr
;

751 
uöt8
 *
pIEEEAddr
;

754 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

755 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

758 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

759 
pBuf
 += 2;

762 
pIEEEAddr
 = 
pBuf
;

763 
pBuf
 +
Z_EXTADDR_LEN
;

765 
ªtVÆue
 = (
uöt8
)
	`ZDP_Devi˚A¬˚
–
sh‹tAddr
, 
pIEEEAddr
, *
pBuf
, 0);

767 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

768 
	}
}

779 
	$MT_ZdoU£rDescSë
(
uöt8
 *
pBuf
)

781 
uöt8
 
cmdId
;

782 
uöt8
 
ªtVÆue
;

783 
zAddrTy≥_t
 
de°Addr
;

784 
uöt16
 
sh‹tAddr
;

785 
U£rDes¸ùt‹F‹m©_t
 
u£rDesc
;

788 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

789 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

792 
de°Addr
.
addrMode
 = 
Addr16Bô
;

793 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

794 
pBuf
 += 2;

797 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

798 
pBuf
 += 2;

801 
u£rDesc
.
Àn
 = *
pBuf
++;

802 
	`oßl_mem˝y
–
u£rDesc
.
desc
, 
pBuf
, u£rDesc.
Àn
 );

803 
pBuf
 += 16;

805 
ªtVÆue
 = (
uöt8
)
	`ZDP_U£rDescSë
–&
de°Addr
, 
sh‹tAddr
, &
u£rDesc
, 0);

807 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

808 
	}
}

819 
	$MT_ZdoSîvi˚DiscReque°
(
uöt8
 *
pBuf
)

821 
uöt8
 
cmdId
;

822 
uöt8
 
ªtVÆue
;

823 
uöt16
 
£rvi˚Mask
;

826 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

827 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

830 
£rvi˚Mask
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

831 
pBuf
 += 2;

833 
ªtVÆue
 = (
uöt8
)
	`ZDP_SîvîDiscReq
–
£rvi˚Mask
, 0);

835 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

836 
	}
}

847 
	$MT_ZdoEndDevBödReque°
(
uöt8
 *
pBuf
)

849 
uöt8
 
cmdId
;

850 
uöt8
 
ªtVÆue
 = 0;

851 
uöt8
 
i
, 
ïI¡
, 
numInClu°îs
, 
numOutClu°îs
;

852 
zAddrTy≥_t
 
de°Addr
;

853 
uöt16
 
sh‹tAddr
;

854 
uöt16
 
¥ofûeID
, 
öClu°îs
[
MTZDO_MAX_ED_BIND_CLUSTERS
], 
outClu°îs
[MTZDO_MAX_ED_BIND_CLUSTERS];

857 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

858 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

861 
de°Addr
.
addrMode
 = 
Addr16Bô
;

862 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

863 
pBuf
 += 2;

866 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

867 
pBuf
 += 2;

870 
pBuf
 +
Z_EXTADDR_LEN
;

873 
ïI¡
 = *
pBuf
++;

876 
¥ofûeID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

877 
pBuf
 += 2;

880 
numInClu°îs
 = *
pBuf
++;

881 i‡–
numInClu°îs
 <
MTZDO_MAX_ED_BIND_CLUSTERS
 )

883  
i
 = 0; i < 
numInClu°îs
; i++ )

885 
öClu°îs
[
i
] = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

886 
pBuf
 += 2;

891 
ªtVÆue
 = 
ZDP_INVALID_REQTYPE
;

895 
numOutClu°îs
 = *
pBuf
++;

896 i‡–
numOutClu°îs
 <
MTZDO_MAX_ED_BIND_CLUSTERS
 )

898  
i
 = 0; i < 
numOutClu°îs
; i++ )

900 
outClu°îs
[
i
] = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

901 
pBuf
 += 2;

906 
ªtVÆue
 = 
ZDP_INVALID_REQTYPE
;

909 i‡–
ªtVÆue
 == 0 )

911 
ªtVÆue
 = (
uöt8
)
	`ZDP_EndDevi˚BödReq
–&
de°Addr
, 
sh‹tAddr
, 
ïI¡
, 
¥ofûeID
,

912 
numInClu°îs
, 
öClu°îs
, 
numOutClu°îs
, 
outClu°îs
, 0);

915 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

916 
	}
}

927 
	$MT_ZdoBödReque°
(
uöt8
 *
pBuf
)

929 
uöt8
 
cmdId
;

930 
uöt8
 
ªtVÆue
;

931 
zAddrTy≥_t
 
de°Addr
, 
devAddr
;

932 
uöt8
 *
pSrcAddr
, *
±r
;

933 
uöt8
 
§cEPI¡
, 
d°EPI¡
;

934 
uöt16
 
˛u°îID
;

937 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

938 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

941 
de°Addr
.
addrMode
 = 
Addr16Bô
;

942 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

943 
pBuf
 += 2;

946 
pSrcAddr
 = 
pBuf
;

947 
pBuf
 +
Z_EXTADDR_LEN
;

950 
§cEPI¡
 = *
pBuf
++;

953 
˛u°îID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

954 
pBuf
 += 2;

957 
devAddr
.
addrMode
 = *
pBuf
++;

960 i‡–
devAddr
.
addrMode
 =
Addr64Bô
 )

962 
±r
 = 
pBuf
;

963 
	`oßl_˝yExtAddr
–
devAddr
.
addr
.
extAddr
, 
±r
 );

967 
devAddr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

970 
pBuf
 +
Z_EXTADDR_LEN
;

973 
d°EPI¡
 = *
pBuf
;

975 
ªtVÆue
 = (
uöt8
)
	`ZDP_BödReq
–&
de°Addr
, 
pSrcAddr
, 
§cEPI¡
, 
˛u°îID
, &
devAddr
, 
d°EPI¡
, 0);

977 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

978 
	}
}

989 
	$MT_ZdoUnbödReque°
(
uöt8
 *
pBuf
)

991 
uöt8
 
cmdId
;

992 
uöt8
 
ªtVÆue
;

993 
zAddrTy≥_t
 
de°Addr
, 
devAddr
;

994 
uöt8
 *
pSrcAddr
, *
±r
;

995 
uöt8
 
§cEPI¡
, 
d°EPI¡
;

996 
uöt16
 
˛u°îID
;

999 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1000 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1003 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1004 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1005 
pBuf
 += 2;

1008 
pSrcAddr
 = 
pBuf
;

1009 
pBuf
 +
Z_EXTADDR_LEN
;

1012 
§cEPI¡
 = *
pBuf
++;

1015 
˛u°îID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

1016 
pBuf
 += 2;

1019 
devAddr
.
addrMode
 = *
pBuf
++;

1022 i‡–
devAddr
.
addrMode
 =
Addr64Bô
 )

1024 
±r
 = 
pBuf
;

1025 
	`oßl_˝yExtAddr
–
devAddr
.
addr
.
extAddr
, 
±r
 );

1029 
devAddr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1032 
pBuf
 +
Z_EXTADDR_LEN
;

1035 
d°EPI¡
 = *
pBuf
;

1037 
ªtVÆue
 = (
uöt8
)
	`ZDP_UnbödReq
–&
de°Addr
, 
pSrcAddr
, 
§cEPI¡
, 
˛u°îID
, &
devAddr
, 
d°EPI¡
, 0);

1039 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1040 
	}
}

1042 #i‡
deföed
 (
MT_SYS_KEY_MANAGEMENT
)

1052 
	$MT_ZdoSëLökKey
(
uöt8
 *
pBuf
)

1054 
uöt8
 
cmdId
;

1055 
uöt8
 
ªtVÆue
;

1056 
uöt8
 *
pExtAddr
;

1057 
uöt8
 *
pKey
;

1058 
uöt16
 
sh‹tAddr
;

1061 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1062 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1065 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1066 
pBuf
 += 2;

1069 
pExtAddr
 = 
pBuf
;

1070 
pBuf
 +
Z_EXTADDR_LEN
;

1073 
pKey
 = 
pBuf
;

1075 
ªtVÆue
 = (
uöt8
)
	`ZDSecMgrAddLökKey
–
sh‹tAddr
, 
pExtAddr
, 
pKey
);

1077 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1078 
	}
}

1089 
	$MT_ZdoRemoveLökKey
(
uöt8
 *
pBuf
)

1091 
uöt8
 
cmdId
;

1092 
uöt8
 
ªtVÆue
;

1093 
uöt8
 *
pExtAddr
;

1096 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1097 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1100 
pExtAddr
 = 
pBuf
;

1102 
ªtVÆue
 = 
	`ZDSecMgrDevi˚RemoveByExtAddr
–
pExtAddr
 );

1104 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1105 
	}
}

1116 
	$MT_ZdoGëLökKey
(
uöt8
 *
pBuf
)

1118 
uöt8
 
cmdId
;

1119 
uöt8
 
ªtVÆue
;

1120 
uöt8
 *
pExtAddr
;

1121 
uöt8
 *
ªtBuf
 = 
NULL
;

1122 
uöt8
 
Àn
;

1123 
APSME_LökKeyD©a_t
 *
pApsLökKey
 = 
NULL
;

1124 
uöt16
 
≠sLökKeyNvId
;

1127 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1128 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1131 
pExtAddr
 = 
pBuf
;

1134 
ªtVÆue
 = 
	`APSME_LökKeyNVIdGë
–
pExtAddr
, &
≠sLökKeyNvId
 );

1136 i‡(
ªtVÆue
 =
ZSuc˚ss
)

1138 i‡((
pApsLökKey
 = (
APSME_LökKeyD©a_t
 *)
	`oßl_mem_Æloc
((APSME_LökKeyD©a_t))Ë!
NULL
)

1141 i‡(
	`oßl_nv_ªad
–
≠sLökKeyNvId
, 0,

1142 (
APSME_LökKeyD©a_t
), 
pApsLökKey
Ë!
SUCCESS
)

1144 
ªtVÆue
 = 
ZNwkUnknownDevi˚
;

1149 
ªtVÆue
 = 
ZNwkUnknownDevi˚
;

1154 
Àn
 = 
MT_ZDO_STATUS_LEN
 + 
Z_EXTADDR_LEN
 + 
SEC_KEY_LEN
;

1155 i‡((
ªtBuf
 = (
uöt8
 *)
	`oßl_mem_Æloc
(
Àn
)Ë!
NULL
)

1157 i‡(
ªtVÆue
 =
ZSuc˚ss
)

1160 
	`oßl_mem˝y
–&(
ªtBuf
[1]), 
pExtAddr
, 
Z_EXTADDR_LEN
 );

1163 
	`oßl_mem˝y
–&(
ªtBuf
[1 + 
Z_EXTADDR_LEN
]), 
pApsLökKey
->
key
, 
SEC_KEY_LEN
 );

1168 
	`oßl_mem£t
–&(
ªtBuf
[1]), 0xFF, 
Z_EXTADDR_LEN
 + 
SEC_KEY_LEN
 );

1171 
ªtBuf
[0] = 
ªtVÆue
;

1173 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 
Àn
, 
ªtBuf
);

1176 
	`oßl_mem£t
(
ªtBuf
, 0x00, 
Àn
);

1178 
	`oßl_mem_‰ì
(
ªtBuf
);

1182 i‡(
pApsLökKey
 !
NULL
)

1184 
	`oßl_mem£t
(
pApsLökKey
, 0x00, (
APSME_LökKeyD©a_t
));

1186 
	`oßl_mem_‰ì
(
pApsLökKey
);

1190 
	}
}

1193 #i‡
deföed
 (
MT_ZDO_MGMT
)

1203 
	$MT_ZdoMgmtNwkDiscReque°
(
uöt8
 *
pBuf
)

1205 
uöt8
 
cmdId
;

1206 
uöt8
 
ªtVÆue
;

1207 
zAddrTy≥_t
 
de°Addr
;

1208 
uöt32
 
sˇnCh™√ls
;

1209 
uöt8
 
sˇnDuøti⁄
, 
°¨tIndex
;

1212 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1213 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1216 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1217 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1218 
pBuf
 += 2;

1221 
sˇnCh™√ls
 = 
	`BUILD_UINT32
–
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3] );

1222 
pBuf
 += 4;

1225 
sˇnDuøti⁄
 = *
pBuf
++;

1228 
°¨tIndex
 = *
pBuf
;

1230 
ªtVÆue
 = (
uöt8
)
	`ZDP_MgmtNwkDiscReq
–&
de°Addr
, 
sˇnCh™√ls
, 
sˇnDuøti⁄
, 
°¨tIndex
, 0);

1232 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1233 
	}
}

1244 
	$MT_ZdoMgmtLqiReque°
(
uöt8
 *
pBuf
)

1246 
uöt8
 
cmdId
;

1247 
uöt8
 
ªtVÆue
;

1248 
zAddrTy≥_t
 
de°Addr
;

1249 
uöt8
 
°¨tIndex
;

1252 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1253 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1256 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1257 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1258 
pBuf
 += 2;

1261 
°¨tIndex
 = *
pBuf
;

1263 
ªtVÆue
 = (
uöt8
)
	`ZDP_MgmtLqiReq
–&
de°Addr
, 
°¨tIndex
, 0);

1265 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1266 
	}
}

1277 
	$MT_ZdoMgmtRtgReque°
(
uöt8
 *
pBuf
)

1279 
uöt8
 
cmdId
;

1280 
uöt8
 
ªtVÆue
;

1281 
zAddrTy≥_t
 
de°Addr
;

1282 
uöt8
 
°¨tIndex
;

1285 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1286 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1289 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1290 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

1291 
pBuf
 += 2;

1294 
°¨tIndex
 = *
pBuf
;

1296 
ªtVÆue
 = (
byã
)
	`ZDP_MgmtRtgReq
–&
de°Addr
, 
°¨tIndex
, 0);

1298 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1299 
	}
}

1310 
	$MT_ZdoMgmtBödReque°
(
uöt8
 *
pBuf
)

1312 
uöt8
 
cmdId
;

1313 
uöt8
 
ªtVÆue
;

1314 
zAddrTy≥_t
 
de°Addr
;

1315 
uöt8
 
°¨tIndex
;

1318 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1319 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1322 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1323 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1324 
pBuf
 += 2;

1327 
°¨tIndex
 = *
pBuf
;

1329 
ªtVÆue
 = (
uöt8
)
	`ZDP_MgmtBödReq
–&
de°Addr
, 
°¨tIndex
, 0);

1331 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1332 
	}
}

1343 
	$MT_ZdoMgmtLóveReque°
(
uöt8
 *
pBuf
)

1345 
uöt8
 
cmdId
;

1346 
uöt8
 
ªtVÆue
;

1347 
zAddrTy≥_t
 
de°Addr
;

1348 
uöt8
 *
pIEEEAddr
;

1349 
uöt8
 
ªmoveChûdªn
, 
ªjoö
;

1352 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1353 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1356 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1357 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1358 
pBuf
 += 2;

1361 
pIEEEAddr
 = 
pBuf
;

1362 
pBuf
 +
Z_EXTADDR_LEN
;

1365 
ªmoveChûdªn
 = *
pBuf
++;

1368 
ªjoö
 = *
pBuf
;

1370 
ªtVÆue
 = (
byã
)
	`ZDP_MgmtLóveReq
–&
de°Addr
, 
pIEEEAddr
, 
ªmoveChûdªn
, 
ªjoö
, 0);

1372 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1373 
	}
}

1385 
	$MT_ZdoMgmtDúe˘JoöReque°
(
uöt8
 *
pBuf
)

1387 
uöt8
 
cmdId
;

1388 
uöt8
 
ªtVÆue
;

1389 
zAddrTy≥_t
 
de°Addr
;

1390 
uöt8
 *
devi˚Addr
;

1391 
uöt8
 
ˇpInfo
;

1394 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1395 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1398 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1399 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1400 
pBuf
 += 2;

1403 
devi˚Addr
 = 
pBuf
;

1404 
pBuf
 +
Z_EXTADDR_LEN
;

1407 
ˇpInfo
 = *
pBuf
;

1409 
ªtVÆue
 = (
uöt8
)
	`ZDP_MgmtDúe˘JoöReq
–&
de°Addr
, 
devi˚Addr
, 
ˇpInfo
, 0);

1411 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1412 
	}
}

1423 
	$MT_ZdoMgmtPîmôJoöReque°
(
uöt8
 *
pBuf
)

1425 
uöt8
 
cmdId
;

1426 
uöt8
 
ªtVÆue
;

1427 
zAddrTy≥_t
 
de°Addr
;

1428 
uöt8
 
duøti⁄
, 
tcSignifiˇn˚
;

1431 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1432 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1435 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1436 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1437 
pBuf
 += 2;

1440 
duøti⁄
 = *
pBuf
++;

1443 
tcSignifiˇn˚
 = *
pBuf
;

1445 
ªtVÆue
 = (
byã
)
	`ZDP_MgmtPîmôJoöReq
–&
de°Addr
, 
duøti⁄
, 
tcSignifiˇn˚
, 0);

1447 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1448 
	}
}

1459 
	$MT_ZdoMgmtNwkUpd©eReque°
(
uöt8
 *
pBuf
)

1461 
uöt8
 
cmdId
;

1462 
uöt8
 
ªtVÆue
;

1463 
zAddrTy≥_t
 
de°Addr
;

1464 
uöt32
 
ch™√lMask
;

1465 
uöt8
 
sˇnDuøti⁄
, 
sˇnCou¡
;

1466 
uöt16
 
nwkM™agîAddr
;

1469 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1470 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1473 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1474 
pBuf
 += 2;

1477 
de°Addr
.
addrMode
 = *
pBuf
++;

1479 
ch™√lMask
 = 
	`BUILD_UINT32
–
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3]);

1480 
pBuf
 += 4;

1483 
sˇnDuøti⁄
 = *
pBuf
++;

1486 
sˇnCou¡
 = *
pBuf
++;

1489 
nwkM™agîAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1492 
ªtVÆue
 = (
uöt8
)
	`ZDP_MgmtNwkUpd©eReq
–&
de°Addr
, 
ch™√lMask
, 
sˇnDuøti⁄
,

1493 
sˇnCou¡
, 
_NIB
.
nwkUpd©eId
+1, 
nwkM™agîAddr
 );

1499 i‡–
de°Addr
.
addrMode
 =
AddrBrﬂdˇ°
 )

1501 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1502 
de°Addr
.
addr
.
sh‹tAddr
 = 
_NIB
.
nwkDevAddªss
;

1503 
ªtVÆue
 = (
uöt8
Ë
	`ZDP_MgmtNwkUpd©eReq
–&
de°Addr
, 
ch™√lMask
, 
sˇnDuøti⁄
,

1504 
sˇnCou¡
, 
_NIB
.
nwkUpd©eId
+1, 
nwkM™agîAddr
 );

1507 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1508 
	}
}

1520 
	$MT_ZdoSèπupFromAµ
(
uöt8
 *
pBuf
)

1522 
uöt8
 
cmd0
, 
cmd1
, 
ªtVÆue
;

1525 
cmd0
 = 
pBuf
[
MT_RPC_POS_CMD0
];

1526 
cmd1
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1527 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1529 
ªtVÆue
 = 
	`ZDOInôDevi˚
(100);

1531 i‡(
MT_RPC_CMD_SREQ
 =(
cmd0
 & 
MT_RPC_CMD_TYPE_MASK
))

1533 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
|(uöt8)
MT_RPC_SYS_ZDO
), 
cmd1
,1, &
ªtVÆue
);

1535 
	}
}

1547 
	$MT_ZdoNëw‹kDiscovîyReq
(
uöt8
 *
pBuf
)

1549 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

1550 
uöt8
 
cmdId
;

1551 
uöt32
 
sˇnCh™√ls
;

1554 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1555 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1561 
sˇnCh™√ls
 = 
	`oßl_buûd_uöt32
(
pBuf
, 4);

1562 
pBuf
 += 4;

1564 
ªtVÆue
 = 
	`ZDAµ_Nëw‹kDiscovîyReq
(
sˇnCh™√ls
, *
pBuf
);

1568 
	`ZDO_Regi°îF‹ZdoCB
–
ZDO_NWK_DISCOVERY_CNF_CBID
, &
MT_ZdoNwkDiscovîyCnfCB
 );

1569 
	`ZDO_Regi°îF‹ZdoCB
–
ZDO_BEACON_NOTIFY_IND_CBID
, &
MT_ZdoBóc⁄IndCB
 );

1572 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
 );

1573 
	}
}

1585 
	$MT_ZdoJoöReq
(
uöt8
 *
pBuf
)

1587 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

1588 
uöt8
 
cmdId
;

1589 
uöt16
 
∑nId
;

1590 
uöt16
 
cho£nP¨ít
;

1593 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1594 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1601 
∑nId
 = 
	`BUILD_UINT16
(
pBuf
[1],ÖBuf[2]);

1602 
cho£nP¨ít
 = 
	`BUILD_UINT16
(
pBuf
[11],ÖBuf[12]);

1604 
ªtVÆue
 = 
	`ZDAµ_JoöReq
(
pBuf
[0], 
∑nId
, &’Buf[3]), 
cho£nP¨ít
,ÖBuf[13],ÖBuf[14]);

1607 
	`ZDO_Regi°îF‹ZdoCB
–
ZDO_JOIN_CNF_CBID
, &
MT_ZdoJoöCnfCB
 );

1610 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
 );

1612 
	}
}

1624 *
	$MT_ZdoNwkDiscovîyCnfCB
 ( *
pSå
 )

1631 
	`ZDO_Dîegi°îF‹ZdoCB
–
ZDO_NWK_DISCOVERY_CNF_CBID
 );

1632 
	`ZDO_Dîegi°îF‹ZdoCB
–
ZDO_BEACON_NOTIFY_IND_CBID
 );

1635 
	`MT_ZdoBóc⁄IndCB
 ( 
NULL
 );

1637 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
),

1638 
MT_ZDO_NWK_DISCOVERY_CNF
, 1, 
pSå
);

1639  
NULL
;

1640 
	}
}

1653 *
	$MT_ZdoBóc⁄IndCB
 ( *
pSå
 )

1655 
zdoBóc⁄Ind_t
 *
pBóc⁄
 = 
pSå
;

1656 
uöt8
 *
pTmp
;

1661 if–
pSå
 !
NULL
)

1663 if–
pBóc⁄IndBuf
 =
NULL
 )

1667 if–
NULL
 =(
pBóc⁄IndBuf
 = (
uöt8
 *)
	`oßl_mem_Æloc
(
MT_ZDO_BEACON_IND_PACK_LEN
)))

1670  
NULL
;

1672 
pBóc⁄IndBuf
[0] = 0;

1676 
pTmp
 = 
pBóc⁄IndBuf
 + (1 +ÖBóc⁄IndBuf[0] * 
MT_ZDO_BEACON_IND_LEN
);

1677 *
pTmp
++ = 
	`LO_UINT16
(
pBóc⁄
->
sour˚Addr
);

1678 *
pTmp
++ = 
	`HI_UINT16
(
pBóc⁄
->
sour˚Addr
);

1679 *
pTmp
++ = 
	`LO_UINT16
(
pBóc⁄
->
∑nID
);

1680 *
pTmp
++ = 
	`HI_UINT16
(
pBóc⁄
->
∑nID
);

1681 *
pTmp
++ = 
pBóc⁄
->
logiˇlCh™√l
;

1682 *
pTmp
++ = 
pBóc⁄
->
≥rmôJoöög
;

1683 *
pTmp
++ = 
pBóc⁄
->
rouãrC≠acôy
;

1684 *
pTmp
++ = 
pBóc⁄
->
devi˚C≠acôy
;

1685 *
pTmp
++ = 
pBóc⁄
->
¥ŸocﬁVîsi⁄
;

1686 *
pTmp
++ = 
pBóc⁄
->
°ackProfûe
;

1687 *
pTmp
++ = 
pBóc⁄
->
LQI
;

1688 *
pTmp
++ = 
pBóc⁄
->
dïth
;

1689 *
pTmp
++ = 
pBóc⁄
->
upd©eID
;

1690 
	`oßl_mem˝y
–
pTmp
, 
pBóc⁄
->
exãndedP™ID
, 
Z_EXTADDR_LEN
);

1692 
pBóc⁄IndBuf
[0] += 1;

1695 if–((
pBóc⁄IndBuf
[0] + 1Ë* 
MT_ZDO_BEACON_IND_LEN
 + 1Ë> 
MT_ZDO_BEACON_IND_PACK_LEN
 )

1698 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
),

1699 
MT_ZDO_BEACON_NOTIFY_IND
,

1700 (
pBóc⁄IndBuf
[0] * 
MT_ZDO_BEACON_IND_LEN
 + 1),ÖBeaconIndBuf);

1701 
pBóc⁄IndBuf
[0] = 0;

1706 if–(
pBóc⁄IndBuf
 !
NULL
) && (pBeaconIndBuf[0] != 0) )

1709 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
),

1710 
MT_ZDO_BEACON_NOTIFY_IND
,

1711 (
pBóc⁄IndBuf
[0] * 
MT_ZDO_BEACON_IND_LEN
 + 1),ÖBeaconIndBuf);

1714 if(
pBóc⁄IndBuf
 !
NULL
)

1716 
	`oßl_mem_‰ì
(
pBóc⁄IndBuf
);

1717 
pBóc⁄IndBuf
 = 
NULL
;

1721  
NULL
;

1722 
	}
}

1735 *
	$MT_ZdoJoöCnfCB
 ( *
pSå
 )

1741 
uöt8
 
buf
[
MT_ZDO_JOIN_CNF_LEN
];

1742 
zdoJoöCnf_t
 *
joöCnf
 = 
pSå
;

1745 
	`ZDO_Dîegi°îF‹ZdoCB
–
ZDO_JOIN_CNF_CBID
 );

1747 
buf
[0] = 
joöCnf
->
°©us
;

1748 
buf
[1] = 
	`LO_UINT16
–
joöCnf
->
devi˚Addr
 );

1749 
buf
[2] = 
	`HI_UINT16
–
joöCnf
->
devi˚Addr
 );

1750 
buf
[3] = 
	`LO_UINT16
–
joöCnf
->
∑ª¡Addr
 );

1751 
buf
[4] = 
	`HI_UINT16
–
joöCnf
->
∑ª¡Addr
 );

1753 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
),

1754 
MT_ZDO_JOIN_CNF
, 
MT_ZDO_JOIN_CNF_LEN
, 
buf
);

1756  
NULL
;

1757 
	}
}

1768 
	$MT_ZdoRegi°îF‹ZDOMsg
(
uöt8
 *
pBuf
)

1770 
uöt8
 
cmd0
, 
cmd1
, 
tmp
;

1771 
uöt16
 
cId
;

1774 
cmd0
 = 
pBuf
[
MT_RPC_POS_CMD0
];

1775 
cmd1
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1776 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1778 
cId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

1779 
tmp
 = 
	`ZDO_Regi°îF‹ZDOMsg
(
MT_TaskID
, 
cId
);

1781 i‡(
MT_RPC_CMD_SREQ
 =(
cmd0
 & 
MT_RPC_CMD_TYPE_MASK
))

1783 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
|(uöt8)
MT_RPC_SYS_ZDO
), 
cmd1
, 1, &
tmp
);

1785 
	}
}

1796 
	$MT_ZdoRemoveRegi°îedCB
(
uöt8
 *
pBuf
)

1798 
uöt8
 
cmd0
, 
cmd1
, 
tmp
;

1799 
uöt16
 
cId
;

1802 
cmd0
 = 
pBuf
[
MT_RPC_POS_CMD0
];

1803 
cmd1
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1804 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1806 
cId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

1807 
tmp
 = 
	`ZDO_RemoveRegi°îedCB
(
MT_TaskID
, 
cId
);

1809 i‡(
MT_RPC_CMD_SREQ
 =(
cmd0
 & 
MT_RPC_CMD_TYPE_MASK
))

1811 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
|(uöt8)
MT_RPC_SYS_ZDO
), 
cmd1
, 1, &
tmp
);

1813 
	}
}

1822 #i‡
deföed
 (
MT_ZDO_CB_FUNC
)

1833 
	$MT_ZdoSèãCh™geCB
(
oßl_evít_hdr_t
 *
pMsg
)

1835 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
),

1836 
MT_ZDO_STATE_CHANGE_IND
, 1, &
pMsg
->
°©us
);

1837 
	}
}

1849 
	$MT_ZdoDúe˘CB
–
afIncomögMSGPackë_t
 *
pD©a
, 
zdoIncomögMsg_t
 *
öMsg
 )

1851 
uöt8
 
Àn
, *
pBuf
;

1852 
uöt16
 
‹igClu°îId
;

1855 
‹igClu°îId
 = 
pD©a
->
˛u°îId
;

1858 i‡–
	`MT_ZdoH™dÀEx˚±i⁄s
–
pD©a
, 
öMsg
 ) || ( (
‹igClu°îId
 & 
ZDO_RESPONSE_BIT
) == 0 ) )

1866 
Àn
 = 
pD©a
->
cmd
.
D©aLígth
 - 1 + (
uöt16
);

1868 i‡(
NULL
 !(
pBuf
 = (
uöt8
 *)
	`oßl_mem_Æloc
(
Àn
)))

1870 
uöt8
 
id
 = 
	`MT_ZDO_CID_TO_AREQ_ID
(
pD©a
->
˛u°îId
);

1872 
pBuf
[0] = 
	`LO_UINT16
(
pD©a
->
§cAddr
.
addr
.
sh‹tAddr
);

1873 
pBuf
[1] = 
	`HI_UINT16
(
pD©a
->
§cAddr
.
addr
.
sh‹tAddr
);

1876 
	`oßl_mem˝y
(
pBuf
+2, (
pD©a
->
cmd
.
D©a
 + 1),ÖD©a->cmd.
D©aLígth
-1);

1878 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
), 
id
, 
Àn
, 
pBuf
);

1879 
	`oßl_mem_‰ì
(
pBuf
);

1881 
	}
}

1892 
uöt8
 
	$MT_ZdoH™dÀEx˚±i⁄s
–
afIncomögMSGPackë_t
 *
pD©a
, 
zdoIncomögMsg_t
 *
öMsg
 )

1894 
uöt8
 
ªt
 = 
TRUE
;

1895 
ZDO_NwkIEEEAddrRe•_t
 *
nwkR•
;

1896 
ZDO_Devi˚A¬˚_t
 
devA¬˚
;

1897 
uöt8
 
doDeÁu…
 = 
FALSE
;

1899  
öMsg
->
˛u°îID
 )

1901 
NWK_addr_r•
:

1902 
IEEE_addr_r•
:

1903 i‡–
NULL
 !(
nwkR•
 = 
	`ZDO_P¨£AddrR•
(
öMsg
)) )

1905 i‡–
nwkR•
->
°©us
 =
ZDO_SUCCESS
 )

1907 
	`MT_ZdoAddrR•CB
–
nwkR•
, 
öMsg
->
˛u°îID
 );

1909 
	`oßl_mem_‰ì
–
nwkR•
 );

1913 
Devi˚_™n˚
:

1914 
	`ZDO_P¨£Devi˚A¬˚
–
öMsg
, &
devA¬˚
 );

1915 
	`MT_ZdoEndDevA¬˚CB
–&
devA¬˚
, 
öMsg
->
§cAddr
.
addr
.
sh‹tAddr
 );

1918 
Sim∂e_Desc_r•
:

1919 i‡–
pD©a
->
cmd
.
D©aLígth
 > 5 )

1921 
ªt
 = 
FALSE
;

1925 
doDeÁu…
 = 
TRUE
;

1930 
ªt
 = 
FALSE
;

1934 i‡–
doDeÁu…
 )

1936 
ªt
 = 
FALSE
;

1937 
pD©a
->
˛u°îId
 = 
MtZdoDef_r•
;

1938 
pD©a
->
cmd
.
D©aLígth
 = 2;

1941  ( 
ªt
 );

1942 
	}
}

1953 
	$MT_ZdoAddrR•CB
–
ZDO_NwkIEEEAddrRe•_t
 *
pMsg
, 
uöt16
 
˛u°îID
 )

1955 
uöt8
 
li°Lí
, 
Àn
, *
pBuf
;

1960 
li°Lí
 = 
pMsg
->
numAssocDevs
;

1963 
Àn
 = 
MT_ZDO_ADDR_RSP_LEN
 + (
li°Lí
 * (
uöt16
));

1966 i‡(
NULL
 !(
pBuf
 = (
uöt8
 *)
	`oßl_mem_Æloc
(
Àn
)))

1968 
uöt8
 
id
 = 
	`MT_ZDO_CID_TO_AREQ_ID
(
˛u°îID
);

1969 
uöt8
 *
pTmp
 = 
pBuf
;

1971 *
pTmp
++ = 
pMsg
->
°©us
;

1973 
	`oßl_˝yExtAddr
(
pTmp
, 
pMsg
->
extAddr
);

1974 
pTmp
 +
Z_EXTADDR_LEN
;

1976 *
pTmp
++ = 
	`LO_UINT16
(
pMsg
->
nwkAddr
);

1977 *
pTmp
++ = 
	`HI_UINT16
(
pMsg
->
nwkAddr
);

1979 *
pTmp
++ = 
pMsg
->
°¨tIndex
;

1980 *
pTmp
++ = 
li°Lí
;

1982 
	`MT_W‹d2Buf
(
pTmp
, 
pMsg
->
devLi°
, 
li°Lí
);

1984 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
), 
id
, 
Àn
, 
pBuf
);

1985 
	`oßl_mem_‰ì
(
pBuf
);

1987 
	}
}

1998 
	$MT_ZdoEndDevA¬˚CB
–
ZDO_Devi˚A¬˚_t
 *
pMsg
, 
uöt16
 
§cAddr
 )

2000 
uöt8
 *
pBuf
;

2002 i‡(
NULL
 !(
pBuf
 = (
uöt8
 *)
	`oßl_mem_Æloc
(
MT_ZDO_END_DEVICE_ANNCE_IND_LEN
)))

2004 
uöt8
 *
pTmp
 = 
pBuf
;

2006 *
pTmp
++ = 
	`LO_UINT16
(
§cAddr
);

2007 *
pTmp
++ = 
	`HI_UINT16
(
§cAddr
);

2009 *
pTmp
++ = 
	`LO_UINT16
(
pMsg
->
nwkAddr
);

2010 *
pTmp
++ = 
	`HI_UINT16
(
pMsg
->
nwkAddr
);

2012 
	`oßl_˝yExtAddr
(
pTmp
, 
pMsg
->
extAddr
);

2013 
pTmp
 +
Z_EXTADDR_LEN
;

2015 *
pTmp
 = 
pMsg
->
ˇ∑bûôõs
;

2017 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
),

2018 
MT_ZDO_END_DEVICE_ANNCE_IND
,

2019 
MT_ZDO_END_DEVICE_ANNCE_IND_LEN
, 
pBuf
);

2020 
	`oßl_mem_‰ì
(
pBuf
);

2022 
	}
}

2033 * 
	$MT_ZdoSrcRtgCB
–*
pSå
 )

2035 
uöt8
 
Àn
, *
pBuf
;

2036 
zdoSrcRtg_t
 *
pSrcRtg
 = 
pSå
;

2039 
Àn
 = 2 + 1 + 
pSrcRtg
->
ªœyC¡
 * (
uöt16
);

2041 i‡(
NULL
 !(
pBuf
 = (
uöt8
 *)
	`oßl_mem_Æloc
(
Àn
)))

2043 
uöt8
 
idx
, *
pTmp
 = 
pBuf
;

2044 
uöt16
 *
pRñay
;

2047 *
pTmp
++ = 
	`LO_UINT16
(
pSrcRtg
->
§cAddr
);

2048 *
pTmp
++ = 
	`HI_UINT16
(
pSrcRtg
->
§cAddr
);

2049 *
pTmp
++ = 
pSrcRtg
->
ªœyC¡
;

2052 if––
pRñay
 = 
pSrcRtg
->
pRñayLi°
 ) !
NULL
 )

2054  
idx
 = 0; idx < 
pSrcRtg
->
ªœyC¡
; idx ++ )

2056 *
pTmp
++ = 
	`LO_UINT16
(*
pRñay
);

2057 *
pTmp
++ = 
	`HI_UINT16
(*
pRñay
);

2058 
pRñay
++;

2061 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
),

2062 
MT_ZDO_SRC_RTG_IND
, 
Àn
, 
pBuf
);

2063 
	`oßl_mem_‰ì
(
pBuf
);

2066  
NULL
;

2067 
	}
}

2078 *
	$MT_ZdoC⁄˚¡øt‹IndCB
(*
pSå
)

2080 
uöt8
 
buf
[
MT_ZDO_CONCENTRATOR_IND_LEN
], *
pTmp
 = buf;

2081 
zdoC⁄˚¡øt‹Ind_t
 *
pInd
 = (zdoC⁄˚¡øt‹Ind_à*)
pSå
;

2083 *
pTmp
++ = 
	`LO_UINT16
(
pInd
->
nwkAddr
);

2084 *
pTmp
++ = 
	`HI_UINT16
(
pInd
->
nwkAddr
);

2085 
pTmp
 = 
	`oßl_mem˝y
’Tmp, 
pInd
->
extAddr
, 
Z_EXTADDR_LEN
);

2086 *
pTmp
 = 
pInd
->
pktCo°
;

2088 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
),

2089 
MT_ZDO_CONCENTRATOR_IND_CB
, 
MT_ZDO_CONCENTRATOR_IND_LEN
, 
buf
);

2090  
NULL
;

2091 
	}
}

2102 *
	$MT_ZdoLóveInd
(*
vPå
)

2104 
NLME_LóveInd_t
 *
pInd
 = (NLME_LóveInd_à*)
vPå
;

2105 
uöt8
 
buf
[(
NLME_LóveInd_t
)];

2107 
buf
[0] = 
	`LO_UINT16
(
pInd
->
§cAddr
);

2108 
buf
[1] = 
	`HI_UINT16
(
pInd
->
§cAddr
);

2109 ()
	`oßl_mem˝y
(
buf
+2, 
pInd
->
extAddr
, 
Z_EXTADDR_LEN
);

2110 
buf
[2+
Z_EXTADDR_LEN
] = 
pInd
->
ªque°
;

2111 
buf
[3+
Z_EXTADDR_LEN
] = 
pInd
->
ªmoveChûdªn
;

2112 
buf
[4+
Z_EXTADDR_LEN
] = 
pInd
->
ªjoö
;

2114 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
),

2115 
MT_ZDO_LEAVE_IND
, 5+
Z_EXTADDR_LEN
, 
buf
);

2116  
NULL
;

2117 
	}
}

2129 
	$MT_ZdoSídMsgCB
(
zdoIncomögMsg_t
 *
pMsg
)

2131 
uöt8
 
Àn
 = 
pMsg
->
asduLí
 + 9;

2132 
uöt8
 *
pBuf
 = (uöt8 *)
	`oßl_mem_Æloc
(
Àn
);

2134 i‡(
pBuf
 !
NULL
)

2136 
uöt8
 *
pTmp
 = 
pBuf
;

2139 *
pTmp
++ = 
	`LO_UINT16
(
pMsg
->
§cAddr
.
addr
.
sh‹tAddr
);

2140 *
pTmp
++ = 
	`HI_UINT16
(
pMsg
->
§cAddr
.
addr
.
sh‹tAddr
);

2141 *
pTmp
++ = 
pMsg
->
wasBrﬂdˇ°
;

2142 *
pTmp
++ = 
	`LO_UINT16
(
pMsg
->
˛u°îID
);

2143 *
pTmp
++ = 
	`HI_UINT16
(
pMsg
->
˛u°îID
);

2144 *
pTmp
++ = 
pMsg
->
SecurôyU£
;

2145 *
pTmp
++ = 
pMsg
->
TønsSeq
;

2147 *
pTmp
++ = 
	`LO_UINT16
(
pMsg
->
macDe°Addr
);

2148 *
pTmp
++ = 
	`HI_UINT16
(
pMsg
->
macDe°Addr
);

2149 ()
	`oßl_mem˝y
(
pTmp
, 
pMsg
->
asdu
,ÖMsg->
asduLí
);

2151 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
),

2152 
MT_ZDO_MSG_CB_INCOMING
, 
Àn
, 
pBuf
);

2154 
	`oßl_mem_‰ì
(
pBuf
);

2156 
	}
}

	@Components/mt/MT_ZDO.h

44 
	~"ZComDef.h
"

45 
	~"MT.h
"

46 
	~"APSMEDE.h
"

47 
	~"AF.h
"

48 
	~"ZDProfûe.h
"

49 
	~"ZDObje˘.h
"

50 
	~"ZDAµ.h
"

52 #i‡!
deföed
–
WIN32
 )

53 
	~"OnBﬂrd.h
"

59 
uöt32
 
_zdoCÆlbackSub
;

64 
	#ZDOCB_CHECK
(
cbi
Ë(
_zdoCÆlbackSub
 & (cbi))

	)

73 
MT_ZdoInô
();

78 
uöt8
 
MT_ZdoComm™dPro˚ssög
(uöt8* 
pBuf
);

83 
MT_ZdoSèãCh™geCB
(
oßl_evít_hdr_t
 *
pMsg
);

88 
MT_ZdoDúe˘CB
–
afIncomögMSGPackë_t
 *
pD©a
, 
zdoIncomögMsg_t
 *
öMsg
 );

93 
MT_ZdoSídMsgCB
(
zdoIncomögMsg_t
 *
pMsg
);

	@Components/osal/common/OSAL.c

46 
	~<°rög.h
>

48 
	~"comdef.h
"

49 
	~"OSAL.h
"

50 
	~"OSAL_Tasks.h
"

51 
	~"OSAL_Mem‹y.h
"

52 
	~"OSAL_PwrMgr.h
"

53 
	~"OSAL_Clock.h
"

55 
	~"OnBﬂrd.h
"

58 
	~"hÆ_drivîs.h
"

60 #ifde‡
IAR_ARMCM3_LM


61 
	~"FªeRTOSC⁄fig.h
"

62 
	~"oßl_èsk.h
"

82 
oßl_msg_q_t
 
	goßl_qHód
;

97 
uöt8
 
	ga˘iveTaskID
 = 
TASK_NO_TASK
;

107 #ifde‡
__KEIL__


108 * 
	$ôﬂ
 ( 
vÆue
, * 
buf„r
, 
ødix
 )

110 (
buf„r
);

111 
	}
}

126 
	$oßl_°æí
–*
pSåög
 )

128  ()–
	`°æí
–
pSåög
 ) );

129 
	}
}

148 *
	$oßl_mem˝y
–*
d°
, c⁄° 
GENERIC
 *
§c
, 
Àn
 )

150 
uöt8
 *
pD°
;

151 c⁄° 
uöt8
 
GENERIC
 *
pSrc
;

153 
pSrc
 = 
§c
;

154 
pD°
 = 
d°
;

156  
Àn
-- )

157 *
pD°
++ = *
pSrc
++;

159  ( 
pD°
 );

160 
	}
}

179 *
	$oßl_ªvmem˝y
–*
d°
, c⁄° 
GENERIC
 *
§c
, 
Àn
 )

181 
uöt8
 *
pD°
;

182 c⁄° 
uöt8
 
GENERIC
 *
pSrc
;

184 
pSrc
 = 
§c
;

185 
pSrc
 +(
Àn
-1);

186 
pD°
 = 
d°
;

188  
Àn
-- )

189 *
pD°
++ = *
pSrc
--;

191  ( 
pD°
 );

192 
	}
}

206 *
	$oßl_memdup
–c⁄° 
GENERIC
 *
§c
, 
Àn
 )

208 
uöt8
 *
pD°
;

210 
pD°
 = 
	`oßl_mem_Æloc
–
Àn
 );

211 i‡–
pD°
 )

213 
VOID
 
	`oßl_mem˝y
–
pD°
, 
§c
, 
Àn
 );

216  ( (*)
pD°
 );

217 
	}
}

232 
uöt8
 
	$oßl_memcmp
–c⁄° 
GENERIC
 *
§c1
, c⁄° GENERIC *
§c2
, 
Àn
 )

234 c⁄° 
uöt8
 
GENERIC
 *
pSrc1
;

235 c⁄° 
uöt8
 
GENERIC
 *
pSrc2
;

237 
pSrc1
 = 
§c1
;

238 
pSrc2
 = 
§c2
;

240  
Àn
-- )

242 if–*
pSrc1
++ !*
pSrc2
++ )

243  
FALSE
;

245  
TRUE
;

246 
	}
}

262 *
	$oßl_mem£t
–*
de°
, 
uöt8
 
vÆue
, 
Àn
 )

264  
	`mem£t
–
de°
, 
vÆue
, 
Àn
 );

265 
	}
}

278 
uöt16
 
	$oßl_buûd_uöt16
–
uöt8
 *
sw≠≥d
 )

280  ( 
	`BUILD_UINT16
–
sw≠≥d
[0], swapped[1] ) );

281 
	}
}

295 
uöt32
 
	$oßl_buûd_uöt32
–
uöt8
 *
sw≠≥d
, uöt8 
Àn
 )

297 i‡–
Àn
 == 2 )

298  ( 
	`BUILD_UINT32
–
sw≠≥d
[0], swapped[1], 0L, 0L ) );

299 i‡–
Àn
 == 3 )

300  ( 
	`BUILD_UINT32
–
sw≠≥d
[0], swapped[1], swapped[2], 0L ) );

301 i‡–
Àn
 == 4 )

302  ( 
	`BUILD_UINT32
–
sw≠≥d
[0], swapped[1], swapped[2], swapped[3] ) );

304  ( (
uöt32
)
sw≠≥d
[0] );

305 
	}
}

307 #i‡!
deföed
 ( 
ZBIT
 ) && !deföed ( 
ZBIT2
 ) && !deföed (
UBIT
)

321 * 
	$_…ﬂ
(
l
, *
buf
, 
ødix
)

323 #i‡
	`deföed
–
__GNUC__
 )

324  ( (*)
	`…ﬂ
–
l
, 
buf
, 
ødix
 ) );

326 
tmp1
[10] = "", 
tmp2
[10] = "", 
tmp3
[10] = "";

327 
num1
, 
num2
, 
num3
;

328 
i
;

330 
buf
[0] = '\0';

332 i‡–
ødix
 == 10 )

334 
num1
 = 
l
 % 10000;

335 
num2
 = (
l
 / 10000) % 10000;

336 
num3
 = ()(
l
 / 100000000);

338 i‡(
num3
Ë
	`_ôﬂ
“um3, 
tmp3
, 10);

339 i‡(
num2
Ë
	`_ôﬂ
“um2, 
tmp2
, 10);

340 i‡(
num1
Ë
	`_ôﬂ
“um1, 
tmp1
, 10);

342 i‡(
num3
)

344 
	`°r˝y
((*)
buf
, (c⁄°*)
tmp3
);

345 
i
 = 0; i < 4 - 
	`°æí
((c⁄°*)
tmp2
); i++)

346 
	`°rˇt
((*)
buf
, "0");

348 
	`°rˇt
((*)
buf
, (c⁄°*)
tmp2
);

349 i‡(
num3
 || 
num2
)

351 
i
 = 0; i < 4 - 
	`°æí
((c⁄°*)
tmp1
); i++)

352 
	`°rˇt
((*)
buf
, "0");

354 
	`°rˇt
((*)
buf
, (c⁄°*)
tmp1
);

355 i‡(!
num3
 && !
num2
 && !
num1
)

356 
	`°r˝y
((*)
buf
, "0");

358 i‡–
ødix
 == 16 )

360 
num1
 = 
l
 & 0x0000FFFF;

361 
num2
 = 
l
 >> 16;

363 i‡(
num2
Ë
	`_ôﬂ
“um2, 
tmp2
, 16);

364 i‡(
num1
Ë
	`_ôﬂ
“um1, 
tmp1
, 16);

366 i‡(
num2
)

368 
	`°r˝y
((*)
buf
,(c⁄°*)
tmp2
);

369 
i
 = 0; i < 4 - 
	`°æí
((c⁄°*)
tmp1
); i++)

370 
	`°rˇt
((*)
buf
, "0");

372 
	`°rˇt
((*)
buf
, (c⁄°*)
tmp1
);

373 i‡(!
num2
 && !
num1
)

374 
	`°r˝y
((*)
buf
, "0");

377  
NULL
;

379  
buf
;

381 
	}
}

393 
uöt16
 
	$oßl_ønd
( )

395  ( 
	`Onbﬂrd_ønd
() );

396 
	}
}

424 
uöt8
 * 
	$oßl_msg_Æloˇã
–
uöt16
 
Àn
 )

426 
oßl_msg_hdr_t
 *
hdr
;

428 i‡–
Àn
 == 0 )

429  ( 
NULL
 );

431 
hdr
 = (
oßl_msg_hdr_t
 *Ë
	`oßl_mem_Æloc
–()(
Àn
 + ( osal_msg_hdr_t )) );

432 i‡–
hdr
 )

434 
hdr
->
√xt
 = 
NULL
;

435 
hdr
->
Àn
 =Üen;

436 
hdr
->
de°_id
 = 
TASK_NO_TASK
;

437  ( (
uöt8
 *Ë(
hdr
 + 1) );

440  ( 
NULL
 );

441 
	}
}

457 
uöt8
 
	$oßl_msg_dóŒoˇã
–
uöt8
 *
msg_±r
 )

459 
uöt8
 *
x
;

461 i‡–
msg_±r
 =
NULL
 )

462  ( 
INVALID_MSG_POINTER
 );

465 i‡–
	`OSAL_MSG_ID
–
msg_±r
 ) !
TASK_NO_TASK
 )

466  ( 
MSG_BUFFER_NOT_AVAIL
 );

468 
x
 = (
uöt8
 *)((uöt8 *)
msg_±r
 - –
oßl_msg_hdr_t
 ));

470 
	`oßl_mem_‰ì
–(*)
x
 );

472  ( 
SUCCESS
 );

473 
	}
}

493 
uöt8
 
	$oßl_msg_£nd
–
uöt8
 
de°ö©i⁄_èsk
, uöt8 *
msg_±r
 )

495 i‡–
msg_±r
 =
NULL
 )

496  ( 
INVALID_MSG_POINTER
 );

498 i‡–
de°ö©i⁄_èsk
 >
èsksC¡
 )

500 
	`oßl_msg_dóŒoˇã
–
msg_±r
 );

501  ( 
INVALID_TASK
 );

505 i‡–
	`OSAL_MSG_NEXT
–
msg_±r
 ) !
NULL
 ||

506 
	`OSAL_MSG_ID
–
msg_±r
 ) !
TASK_NO_TASK
 )

508 
	`oßl_msg_dóŒoˇã
–
msg_±r
 );

509  ( 
INVALID_MSG_POINTER
 );

512 
	`OSAL_MSG_ID
–
msg_±r
 ) = 
de°ö©i⁄_èsk
;

515 
	`oßl_msg_íqueue
–&
oßl_qHód
, 
msg_±r
 );

518 
	`oßl_£t_evít
–
de°ö©i⁄_èsk
, 
SYS_EVENT_MSG
 );

520  ( 
SUCCESS
 );

521 
	}
}

536 
uöt8
 *
	$oßl_msg_ª˚ive
–
uöt8
 
èsk_id
 )

538 
oßl_msg_hdr_t
 *
li°Hdr
;

539 
oßl_msg_hdr_t
 *
¥evHdr
 = 
NULL
;

540 
oßl_msg_hdr_t
 *
foundHdr
 = 
NULL
;

541 
hÆI¡Sèã_t
 
ötSèã
;

544 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

547 
li°Hdr
 = 
oßl_qHód
;

550  
li°Hdr
 !
NULL
 )

552 i‡–(
li°Hdr
 - 1)->
de°_id
 =
èsk_id
 )

554 i‡–
foundHdr
 =
NULL
 )

557 
foundHdr
 = 
li°Hdr
;

565 i‡–
foundHdr
 =
NULL
 )

567 
¥evHdr
 = 
li°Hdr
;

569 
li°Hdr
 = 
	`OSAL_MSG_NEXT
(ÜistHdr );

573 i‡–
li°Hdr
 !
NULL
 )

576 
	`oßl_£t_evít
–
èsk_id
, 
SYS_EVENT_MSG
 );

581 
	`oßl_˛ór_evít
–
èsk_id
, 
SYS_EVENT_MSG
 );

585 i‡–
foundHdr
 !
NULL
 )

588 
	`oßl_msg_exåa˘
–&
oßl_qHód
, 
foundHdr
, 
¥evHdr
 );

592 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

594  ( (
uöt8
*Ë
foundHdr
 );

595 
	}
}

615 
oßl_evít_hdr_t
 *
	$oßl_msg_föd
(
uöt8
 
èsk_id
, uöt8 
evít
)

617 
oßl_msg_hdr_t
 *
pHdr
;

618 
hÆI¡Sèã_t
 
ötSèã
;

620 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

622 
pHdr
 = 
oßl_qHód
;

625 
pHdr
 !
NULL
)

627 i‡(((
pHdr
-1)->
de°_id
 =
èsk_id
Ë&& (((
oßl_evít_hdr_t
 *ÌHdr)->
evít
 ==Évent))

632 
pHdr
 = 
	`OSAL_MSG_NEXT
(pHdr);

635 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

637  (
oßl_evít_hdr_t
 *)
pHdr
;

638 
	}
}

652 
	$oßl_msg_íqueue
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
 )

654 *
li°
;

655 
hÆI¡Sèã_t
 
ötSèã
;

658 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

660 
	`OSAL_MSG_NEXT
–
msg_±r
 ) = 
NULL
;

662 i‡–*
q_±r
 =
NULL
 )

664 *
q_±r
 = 
msg_±r
;

669  
li°
 = *
q_±r
; 
	`OSAL_MSG_NEXT
–li° ) !
NULL
;Üist = OSAL_MSG_NEXT(Üist ) );

672 
	`OSAL_MSG_NEXT
–
li°
 ) = 
msg_±r
;

676 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

677 
	}
}

690 *
	$oßl_msg_dequeue
–
oßl_msg_q_t
 *
q_±r
 )

692 *
msg_±r
 = 
NULL
;

693 
hÆI¡Sèã_t
 
ötSèã
;

696 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

698 i‡–*
q_±r
 !
NULL
 )

701 
msg_±r
 = *
q_±r
;

702 *
q_±r
 = 
	`OSAL_MSG_NEXT
–
msg_±r
 );

703 
	`OSAL_MSG_NEXT
–
msg_±r
 ) = 
NULL
;

704 
	`OSAL_MSG_ID
–
msg_±r
 ) = 
TASK_NO_TASK
;

708 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

710  
msg_±r
;

711 
	}
}

726 
	$oßl_msg_push
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
 )

728 
hÆI¡Sèã_t
 
ötSèã
;

731 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

734 
	`OSAL_MSG_NEXT
–
msg_±r
 ) = *
q_±r
;

735 *
q_±r
 = 
msg_±r
;

738 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

739 
	}
}

755 
	$oßl_msg_exåa˘
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
, *
¥ev_±r
 )

757 
hÆI¡Sèã_t
 
ötSèã
;

760 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

762 i‡–
msg_±r
 =*
q_±r
 )

765 *
q_±r
 = 
	`OSAL_MSG_NEXT
–
msg_±r
 );

770 
	`OSAL_MSG_NEXT
–
¥ev_±r
 ) = OSAL_MSG_NEXT–
msg_±r
 );

772 
	`OSAL_MSG_NEXT
–
msg_±r
 ) = 
NULL
;

773 
	`OSAL_MSG_ID
–
msg_±r
 ) = 
TASK_NO_TASK
;

776 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

777 
	}
}

793 
uöt8
 
	$oßl_msg_íqueue_max
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
, 
uöt8
 
max
 )

795 *
li°
;

796 
uöt8
 
ªt
 = 
FALSE
;

797 
hÆI¡Sèã_t
 
ötSèã
;

800 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

803 i‡–*
q_±r
 =
NULL
 )

805 *
q_±r
 = 
msg_±r
;

806 
ªt
 = 
TRUE
;

811 
li°
 = *
q_±r
;

812 
max
--;

813  (
	`OSAL_MSG_NEXT
–
li°
 ) !
NULL
Ë&& (
max
 > 0) )

815 
li°
 = 
	`OSAL_MSG_NEXT
(Üist );

816 
max
--;

820 i‡–
max
 != 0 )

822 
	`OSAL_MSG_NEXT
–
li°
 ) = 
msg_±r
;

823 
ªt
 = 
TRUE
;

828 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

830  
ªt
;

831 
	}
}

846 
uöt8
 
	$oßl_£t_evít
–
uöt8
 
èsk_id
, 
uöt16
 
evít_Êag
 )

848 i‡–
èsk_id
 < 
èsksC¡
 )

850 
hÆI¡Sèã_t
 
ötSèã
;

851 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

852 
èsksEvíts
[
èsk_id
] |
evít_Êag
;

853 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

854  ( 
SUCCESS
 );

858  ( 
INVALID_TASK
 );

860 
	}
}

875 
uöt8
 
	$oßl_˛ór_evít
–
uöt8
 
èsk_id
, 
uöt16
 
evít_Êag
 )

877 i‡–
èsk_id
 < 
èsksC¡
 )

879 
hÆI¡Sèã_t
 
ötSèã
;

880 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

881 
èsksEvíts
[
èsk_id
] &~(
evít_Êag
);

882 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

883  ( 
SUCCESS
 );

887  ( 
INVALID_TASK
 );

889 
	}
}

904 
uöt8
 
oßl_i§_ªgi°î
–uöt8 
öãºu±_id
, (*
i§_±r
)( uint8* ) )

907 ()
öãºu±_id
;

908 ()
i§_±r
;

909  ( 
SUCCESS
 );

910 
	}
}

929 
uöt8
 
	$oßl_öt_íabÀ
–
uöt8
 
öãºu±_id
 )

932 i‡–
öãºu±_id
 =
INTS_ALL
 )

934 
	`HAL_ENABLE_INTERRUPTS
();

935  ( 
SUCCESS
 );

939  ( 
INVALID_INTERRUPT_ID
 );

941 
	}
}

959 
uöt8
 
	$oßl_öt_dißbÀ
–
uöt8
 
öãºu±_id
 )

962 i‡–
öãºu±_id
 =
INTS_ALL
 )

964 
	`HAL_DISABLE_INTERRUPTS
();

965  ( 
SUCCESS
 );

969  ( 
INVALID_INTERRUPT_ID
 );

971 
	}
}

985 
uöt8
 
	$oßl_öô_sy°em
( )

988 
	`oßl_mem_öô
();

991 
oßl_qHód
 = 
NULL
;

994 
	`oßlTimîInô
();

997 
	`oßl_pwrmgr_öô
();

1000 
	`oßlInôTasks
();

1003 
	`oßl_mem_kick
();

1005  ( 
SUCCESS
 );

1006 
	}
}

1020 
	$oßl_°¨t_sy°em
( )

1022 #i‡!
	`deföed
 ( 
ZBIT
 ) && !deföed ( 
UBIT
 )

1026 
	`oßl_run_sy°em
();

1028 
	}
}

1044 
	$oßl_run_sy°em
( )

1046 
uöt8
 
idx
 = 0;

1048 
	`oßlTimeUpd©e
();

1049 
	`HÆ_Pro˚ssPﬁl
();

1052 i‡(
èsksEvíts
[
idx
])

1056 } ++
idx
 < 
èsksC¡
);

1058 i‡(
idx
 < 
èsksC¡
)

1060 
uöt16
 
evíts
;

1061 
hÆI¡Sèã_t
 
ötSèã
;

1063 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

1064 
evíts
 = 
èsksEvíts
[
idx
];

1065 
èsksEvíts
[
idx
] = 0;

1066 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

1068 
a˘iveTaskID
 = 
idx
;

1069 
evíts
 = (
èsksAº
[
idx
])( idx,Évents );

1070 
a˘iveTaskID
 = 
TASK_NO_TASK
;

1072 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

1073 
èsksEvíts
[
idx
] |
evíts
;

1074 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

1076 #i‡
	`deföed
–
POWER_SAVING
 )

1079 
	`oßl_pwrmgr_powîc⁄£rve
();

1084 #i‡
	`deföed
 (
c⁄figUSE_PREEMPTION
) && (configUSE_PREEMPTION == 0)

1086 
	`oßl_èsk_yõld
();

1089 
	}
}

1103 
uöt8
* 
	$oßl_buf„r_uöt32
–
uöt8
 *
buf
, 
uöt32
 
vÆ
 )

1105 *
buf
++ = 
	`BREAK_UINT32
–
vÆ
, 0 );

1106 *
buf
++ = 
	`BREAK_UINT32
–
vÆ
, 1 );

1107 *
buf
++ = 
	`BREAK_UINT32
–
vÆ
, 2 );

1108 *
buf
++ = 
	`BREAK_UINT32
–
vÆ
, 3 );

1110  
buf
;

1111 
	}
}

1126 
uöt8
* 
	$oßl_buf„r_uöt24
–
uöt8
 *
buf
, 
uöt24
 
vÆ
 )

1128 *
buf
++ = 
	`BREAK_UINT32
–
vÆ
, 0 );

1129 *
buf
++ = 
	`BREAK_UINT32
–
vÆ
, 1 );

1130 *
buf
++ = 
	`BREAK_UINT32
–
vÆ
, 2 );

1132  
buf
;

1133 
	}
}

1149 
uöt8
 
	$oßl_isbuf£t
–
uöt8
 *
buf
, uöt8 
vÆ
, uöt8 
Àn
 )

1151 
uöt8
 
x
;

1153 i‡–
buf
 =
NULL
 )

1155  ( 
FALSE
 );

1158  
x
 = 0; x < 
Àn
; x++ )

1161 i‡–
buf
[
x
] !
vÆ
 )

1163  ( 
FALSE
 );

1166  ( 
TRUE
 );

1167 
	}
}

1180 
uöt8
 
	$oßl_£lf
( )

1182  ( 
a˘iveTaskID
 );

1183 
	}
}

	@Components/osal/common/OSAL_Clock.c

43 
	~"comdef.h
"

44 
	~"OnBﬂrd.h
"

45 
	~"OSAL.h
"

46 
	~"OSAL_Clock.h
"

52 
	#YórLígth
(
yr
Ë((
uöt16
)(
	`IsLópYór
(yrË? 366 : 365))

	)

58 
	#BEGYEAR
 2000

59 

	)

60 
	#DAY
 86400UL

61 

	)

77 
uöt32
 
macMcuPªcisi⁄Cou¡
();

79 #i‡(
deföed
 
HAL_MCU_CC2430
Ë|| (deföed 
HAL_MCU_CC2530
Ë|| (deföed 
HAL_MCU_CC2533
)

93 
__√¨_func
 
uöt32
 
oßlMcuDivide31By16To16
–uöt32 
dividíd
, 
uöt16
 
divis‹
 );

95 
	#CONVERT_320US_TO_MS_ELAPSED_REMAINDER
–
x
, 
y
, 
z
 ) 
	`°
( \

99 
x
 = 
	`oßlMcuDivide31By16To16
( x, 25 ); \

102 
y
 +(
x
 >> 16); \

105 
z
 = (
uöt16
)(
x
 & 0x0FFFF); \

106 )

	)

110 
	#CONVERT_320US_TO_MS_ELAPSED_REMAINDER
–
x
, 
y
, 
z
 ) 
	`°
( \

111 
y
 +
x
 / 25; \

112 
z
 = 
x
 % 25; \

113 )

	)

120 
uöt32
 
	g¥eviousMacTimîTick
 = 0;

121 
uöt16
 
	gªmUsTicks
 = 0;

122 
uöt16
 
	gtimeMSec
 = 0;

126 
UTCTime
 
	gOSAL_timeSec⁄ds
 = 0;

131 
uöt8
 
m⁄thLígth
–uöt8 
Õyr
, uöt8 
m⁄
 );

133 
oßlClockUpd©e
–
uöt16
 
ñ≠£dMSec
 );

153 
	$oßlTimeUpd©e
( )

155 
hÆI¡Sèã_t
 
ötSèã
;

156 
uöt32
 
tmp
;

157 
uöt32
 
ticks320us
;

158 
uöt16
 
ñ≠£dMSec
 = 0;

160 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

162 
tmp
 = 
	`macMcuPªcisi⁄Cou¡
();

163 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

165 i‡–
tmp
 !
¥eviousMacTimîTick
 )

168 
ticks320us
 = (
tmp
 - 
¥eviousMacTimîTick
) & 0xffffffffu;

171 
¥eviousMacTimîTick
 = 
tmp
;

175 
tmp
 = (
ticks320us
 * 8Ë+ 
ªmUsTicks
;

178 
	`CONVERT_320US_TO_MS_ELAPSED_REMAINDER
–
tmp
, 
ñ≠£dMSec
, 
ªmUsTicks
 );

181 i‡–
ñ≠£dMSec
 )

183 
	`oßlClockUpd©e
–
ñ≠£dMSec
 );

184 
	`oßlTimîUpd©e
–
ñ≠£dMSec
 );

187 
	}
}

198 
	$oßlClockUpd©e
–
uöt16
 
ñ≠£dMSec
 )

201 
timeMSec
 +
ñ≠£dMSec
;

204 i‡–
timeMSec
 >= 1000 )

206 
OSAL_timeSec⁄ds
 +
timeMSec
 / 1000;

207 
timeMSec
 =ÅimeMSec % 1000;

209 
	}
}

222 
	$oßl_£tClock
–
UTCTime
 
√wTime
 )

224 
OSAL_timeSec⁄ds
 = 
√wTime
;

225 
	}
}

239 
UTCTime
 
	$oßl_gëClock
( )

241  ( 
OSAL_timeSec⁄ds
 );

242 
	}
}

256 
	$oßl_C⁄vîtUTCTime
–
UTCTimeSåu˘
 *
tm
, 
UTCTime
 
£cTime
 )

260 
uöt32
 
day
 = 
£cTime
 % 
DAY
;

261 
tm
->
£c⁄ds
 = 
day
 % 60UL;

262 
tm
->
möuãs
 = (
day
 % 3600UL) / 60UL;

263 
tm
->
hour
 = 
day
 / 3600UL;

268 
uöt16
 
numDays
 = 
£cTime
 / 
DAY
;

269 
tm
->
yór
 = 
BEGYEAR
;

270  
numDays
 >
	`YórLígth
–
tm
->
yór
 ) )

272 
numDays
 -
	`YórLígth
–
tm
->
yór
 );

273 
tm
->
yór
++;

276 
tm
->
m⁄th
 = 0;

277  
numDays
 >
	`m⁄thLígth
–
	`IsLópYór
–
tm
->
yór
 ),Åm->
m⁄th
 ) )

279 
numDays
 -
	`m⁄thLígth
–
	`IsLópYór
–
tm
->
yór
 ),Åm->
m⁄th
 );

280 
tm
->
m⁄th
++;

283 
tm
->
day
 = 
numDays
;

285 
	}
}

296 
uöt8
 
	$m⁄thLígth
–
uöt8
 
Õyr
, uöt8 
m⁄
 )

298 
uöt8
 
days
 = 31;

300 i‡–
m⁄
 == 1 )

302 
days
 = ( 28 + 
Õyr
 );

306 i‡–
m⁄
 > 6 )

308 
m⁄
--;

311 i‡–
m⁄
 & 1 )

313 
days
 = 30;

317  ( 
days
 );

318 
	}
}

329 
UTCTime
 
	$oßl_C⁄vîtUTCSecs
–
UTCTimeSåu˘
 *
tm
 )

331 
uöt32
 
£c⁄ds
;

334 
£c⁄ds
 = (((
tm
->
hour
 * 60ULË+Åm->
möuãs
) * 60UL) +Åm->seconds;

339 
uöt16
 
days
 = 
tm
->
day
;

343 
öt8
 
m⁄th
 = 
tm
->month;

344  --
m⁄th
 >= 0 )

346 
days
 +
	`m⁄thLígth
–
	`IsLópYór
–
tm
->
yór
 ), 
m⁄th
 );

352 
uöt16
 
yór
 = 
tm
->year;

353  --
yór
 >
BEGYEAR
 )

355 
days
 +
	`YórLígth
–
yór
 );

360 
£c⁄ds
 +(
days
 * 
DAY
);

363  ( 
£c⁄ds
 );

364 
	}
}

	@Components/osal/common/OSAL_Memory.c

46 
	~"comdef.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Mem‹y.h
"

49 
	~"OnBﬂrd.h
"

50 
	~"hÆ_as£π.h
"

57 
	#OSALMEM_IN_USE
 0x8000

	)

58 #i‡(
MAXMEMHEAP
 & 
OSALMEM_IN_USE
)

59 #îr‹ 
MAXMEMHEAP
 
is
 
too
 
big
 
to
 
m™age
!

62 
	#OSALMEM_HDRSZ
 (
oßlMemHdr_t
)

	)

65 
	#OSALMEM_ROUND
(
X
Ë((((XË+ 
OSALMEM_HDRSZ
 - 1Ë/ OSALMEM_HDRSZË* OSALMEM_HDRSZ)

	)

73 #i‡!
deföed
 
OSALMEM_MIN_BLKSZ


74 
	#OSALMEM_MIN_BLKSZ
 (
	`OSALMEM_ROUND
((
OSALMEM_HDRSZ
 * 2)))

	)

77 #i‡!
deföed
 
OSALMEM_LL_BLKSZ


78 #i‡
deföed
 
NONWK


79 
	#OSALMEM_LL_BLKSZ
 (
	`OSALMEM_ROUND
(6Ë+ (1 * 
OSALMEM_HDRSZ
))

	)

91 #i‡
deföed
 
ZCL_KEY_ESTABLISH


92 
	#OSALMEM_LL_BLKSZ
 (
	`OSALMEM_ROUND
(526Ë+ (32 * 
OSALMEM_HDRSZ
))

	)

93 #ñi‡
deföed
 
TC_LINKKEY_JOIN


94 
	#OSALMEM_LL_BLKSZ
 (
	`OSALMEM_ROUND
(454Ë+ (21 * 
OSALMEM_HDRSZ
))

	)

95 #ñi‡((
deföed
 
SECURE
) && (SECURE != 0))

96 
	#OSALMEM_LL_BLKSZ
 (
	`OSALMEM_ROUND
(418Ë+ (19 * 
OSALMEM_HDRSZ
))

	)

98 
	#OSALMEM_LL_BLKSZ
 (
	`OSALMEM_ROUND
(417Ë+ (19 * 
OSALMEM_HDRSZ
))

	)

108 #i‡!
deföed
 
OSALMEM_SMALL_BLKSZ


109 
	#OSALMEM_SMALL_BLKSZ
 (
	`OSALMEM_ROUND
(16))

	)

111 #i‡!
deföed
 
OSALMEM_SMALL_BLKCNT


112 
	#OSALMEM_SMALL_BLKCNT
 8

	)

122 
	#OSALMEM_SMALLBLK_BUCKET
 ((
OSALMEM_SMALL_BLKSZ
 * 
OSALMEM_SMALL_BLKCNT
Ë+ 
OSALMEM_LL_BLKSZ
)

	)

125 
	#OSALMEM_SMALLBLK_HDRCNT
 (
OSALMEM_SMALLBLK_BUCKET
 / 
OSALMEM_HDRSZ
)

	)

127 
	#OSALMEM_BIGBLK_IDX
 (
OSALMEM_SMALLBLK_HDRCNT
 + 1)

	)

130 
	#OSALMEM_BIGBLK_SZ
 (
MAXMEMHEAP
 - 
OSALMEM_SMALLBLK_BUCKET
 - 
OSALMEM_HDRSZ
*2)

	)

133 
	#OSALMEM_LASTBLK_IDX
 ((
MAXMEMHEAP
 / 
OSALMEM_HDRSZ
Ë- 1)

	)

136 #i‡!
deföed
 
OSALMEM_PROFILER


137 
	#OSALMEM_PROFILER
 
FALSE


139 #i‡!
deföed
 
OSALMEM_PROFILER_LL


	)

140 
	#OSALMEM_PROFILER_LL
 
FALSE


142 

	)

143 #i‡
OSALMEM_PROFILER


144 
	#OSALMEM_INIT
 'X'

	)

145 
	#OSALMEM_ALOC
 'A'

	)

146 
	#OSALMEM_REIN
 'F'

	)

156 
	mÀn
 : 15;

158 
	möU£
 : 1;

159 } 
	toßlMemHdrHdr_t
;

165 
hÆD©aAlign_t
 
	mÆignDummy
;

166 
uöt16
 
	mvÆ
;

167 
oßlMemHdrHdr_t
 
	mhdr
;

168 } 
	toßlMemHdr_t
;

175 
__no_öô
 
oßlMemHdr_t
 
	gtheHóp
[
MAXMEMHEAP
 / 
OSALMEM_HDRSZ
];

176 
__no_öô
 
oßlMemHdr_t
 *
	gff1
;

178 
uöt8
 
	goßlMemSèt
;

180 #i‡
OSALMEM_METRICS


181 
uöt16
 
	gblkMax
;

182 
uöt16
 
	gblkC¡
;

183 
uöt16
 
	gblkFªe
;

184 
uöt16
 
	gmemAlo
;

185 
uöt16
 
	gmemMax
;

188 #i‡
OSALMEM_PROFILER


189 
	#OSALMEM_PROMAX
 8

	)

194 
uöt16
 
	g¥oC¡
[
OSALMEM_PROMAX
] = {

195 
OSALMEM_SMALL_BLKSZ
, 48, 112, 176, 192, 224, 256, 65535 };

196 
uöt16
 
	g¥oCur
[
OSALMEM_PROMAX
] = { 0 };

197 
uöt16
 
	g¥oMax
[
OSALMEM_PROMAX
] = { 0 };

198 
uöt16
 
	g¥oTŸ
[
OSALMEM_PROMAX
] = { 0 };

199 
uöt16
 
	g¥oSmÆlBlkMiss
;

207 #ifde‡
DPRINTF_HEAPTRACE


208 
d¥ötf
(c⁄° *
fmt
, ...);

226 
	$oßl_mem_öô
()

228 
	`HAL_ASSERT
(((
OSALMEM_MIN_BLKSZ
 % 
OSALMEM_HDRSZ
) == 0));

229 
	`HAL_ASSERT
(((
OSALMEM_LL_BLKSZ
 % 
OSALMEM_HDRSZ
) == 0));

230 
	`HAL_ASSERT
(((
OSALMEM_SMALL_BLKSZ
 % 
OSALMEM_HDRSZ
) == 0));

232 #i‡
OSALMEM_PROFILER


233 ()
	`oßl_mem£t
(
theHóp
, 
OSALMEM_INIT
, 
MAXMEMHEAP
);

237 
theHóp
[
OSALMEM_LASTBLK_IDX
].
vÆ
 = 0;

240 
ff1
 = 
theHóp
;

241 
ff1
->
vÆ
 = 
OSALMEM_SMALLBLK_BUCKET
;

244 
theHóp
[
OSALMEM_SMALLBLK_HDRCNT
].
vÆ
 = (
OSALMEM_HDRSZ
 | 
OSALMEM_IN_USE
);

247 
theHóp
[
OSALMEM_BIGBLK_IDX
].
vÆ
 = 
OSALMEM_BIGBLK_SZ
;

249 #i‡–
OSALMEM_METRICS
 )

253 
blkC¡
 = 
blkFªe
 = 2;

255 
	}
}

275 
	$oßl_mem_kick
()

277 
hÆI¡Sèã_t
 
ötSèã
;

278 
oßlMemHdr_t
 *
tmp
 = 
	`oßl_mem_Æloc
(1);

280 
	`HAL_ASSERT
((
tmp
 !
NULL
));

281 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

287 
ff1
 = 
tmp
 - 1;

288 
	`oßl_mem_‰ì
(
tmp
);

289 
oßlMemSèt
 = 0x01;

291 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

292 
	}
}

309 #ifde‡
DPRINTF_OSALHEAPTRACE


310 *
	$oßl_mem_Æloc_dbg
–
uöt16
 
size
, c⁄° *
‚ame
, 
 um
 )

312 *
	$oßl_mem_Æloc
–
uöt16
 
size
 )

315 
oßlMemHdr_t
 *
¥ev
 = 
NULL
;

316 
oßlMemHdr_t
 *
hdr
;

317 
hÆI¡Sèã_t
 
ötSèã
;

318 
uöt8
 
cﬂl
 = 0;

320 
size
 +
OSALMEM_HDRSZ
;

323 i‡––
hÆD©aAlign_t
 ) == 2 )

325 
size
 += (size & 0x01);

327 i‡––
hÆD©aAlign_t
 ) != 1 )

329 c⁄° 
uöt8
 
mod
 = 
size
 % –
hÆD©aAlign_t
 );

331 i‡–
mod
 != 0 )

333 
size
 +(–
hÆD©aAlign_t
 ) - 
mod
);

337 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

341 i‡((
oßlMemSèt
 =0Ë|| (
size
 <
OSALMEM_SMALL_BLKSZ
))

343 
hdr
 = 
ff1
;

347 
hdr
 = (
theHóp
 + 
OSALMEM_BIGBLK_IDX
);

352 i‡–
hdr
->hdr.
öU£
 )

354 
cﬂl
 = 0;

358 i‡–
cﬂl
 != 0 )

360 #i‡–
OSALMEM_METRICS
 )

361 
blkC¡
--;

362 
blkFªe
--;

365 
¥ev
->
hdr
.
Àn
 += hdr->hdr.len;

367 i‡–
¥ev
->
hdr
.
Àn
 >
size
 )

369 
hdr
 = 
¥ev
;

375 i‡–
hdr
->hdr.
Àn
 >
size
 )

380 
cﬂl
 = 1;

381 
¥ev
 = 
hdr
;

385 
hdr
 = (
oßlMemHdr_t
 *)((
uöt8
 *)hd∏+ hdr->hdr.
Àn
);

387 i‡–
hdr
->
vÆ
 == 0 )

389 
hdr
 = 
NULL
;

394 i‡–
hdr
 !
NULL
 )

396 
uöt16
 
tmp
 = 
hdr
->hdr.
Àn
 - 
size
;

399 i‡–
tmp
 >
OSALMEM_MIN_BLKSZ
 )

402 
oßlMemHdr_t
 *
√xt
 = (oßlMemHdr_à*)((
uöt8
 *)
hdr
 + 
size
);

403 
√xt
->
vÆ
 = 
tmp
;

404 
hdr
->
vÆ
 = (
size
 | 
OSALMEM_IN_USE
);

406 #i‡–
OSALMEM_METRICS
 )

407 
blkC¡
++;

408 i‡–
blkMax
 < 
blkC¡
 )

410 
blkMax
 = 
blkC¡
;

412 
memAlo
 +
size
;

417 #i‡–
OSALMEM_METRICS
 )

418 
memAlo
 +
hdr
->hdr.
Àn
;

419 
blkFªe
--;

422 
hdr
->hdr.
öU£
 = 
TRUE
;

425 #i‡–
OSALMEM_METRICS
 )

426 i‡–
memMax
 < 
memAlo
 )

428 
memMax
 = 
memAlo
;

432 #i‡–
OSALMEM_PROFILER
 )

433 #i‡!
OSALMEM_PROFILER_LL


434 i‡(
oßlMemSèt
 != 0)

437 
uöt8
 
idx
;

439  
idx
 = 0; idx < 
OSALMEM_PROMAX
; idx++ )

441 i‡–
hdr
->hdr.
Àn
 <
¥oC¡
[
idx
] )

446 
¥oCur
[
idx
]++;

447 i‡–
¥oMax
[
idx
] < 
¥oCur
[idx] )

449 
¥oMax
[
idx
] = 
¥oCur
[idx];

451 
¥oTŸ
[
idx
]++;

461 i‡((
hdr
->hdr.
Àn
 <
OSALMEM_SMALL_BLKSZ
Ë&& (hd∏>(
theHóp
 + 
OSALMEM_BIGBLK_IDX
)))

463 
¥oSmÆlBlkMiss
++;

467 ()
	`oßl_mem£t
((
uöt8
 *)(
hdr
+1), 
OSALMEM_ALOC
, (hdr->hdr.
Àn
 - 
OSALMEM_HDRSZ
));

470 i‡((
oßlMemSèt
 !0Ë&& (
ff1
 =
hdr
))

472 
ff1
 = (
oßlMemHdr_t
 *)((
uöt8
 *)
hdr
 + hdr->hdr.
Àn
);

475 
hdr
++;

478 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

479 #¥agm®
düg_suµªss
=
Pe767


480 
	`HAL_ASSERT
(((
hÆD©aAlign_t
)
hdr
 % (halDataAlign_t)) == 0);

481 #¥agm®
düg_deÁu…
=
Pe767


483 #ifde‡
DPRINTF_OSALHEAPTRACE


484 
	`d¥ötf
("oßl_mem_Æloc(%u)->%lx:%s:%u\n", 
size
, (Ë
hdr
, 
‚ame
, 
 um
);

486  (*)
hdr
;

487 
	}
}

504 #ifde‡
DPRINTF_OSALHEAPTRACE


505 
	$oßl_mem_‰ì_dbg
(*
±r
, c⁄° *
‚ame
, 
 um
)

507 
	$oßl_mem_‰ì
(*
±r
)

510 
oßlMemHdr_t
 *
hdr
 = (oßlMemHdr_à*)
±r
 - 1;

511 
hÆI¡Sèã_t
 
ötSèã
;

513 #ifde‡
DPRINTF_OSALHEAPTRACE


514 
	`d¥ötf
("oßl_mem_‰ì(%lx):%s:%u\n", (Ë
±r
, 
‚ame
, 
 um
);

517 
	`HAL_ASSERT
(((
uöt8
 *)
±r
 >(uöt8 *)
theHóp
Ë&& ((uöt8 *Ìå < (uöt8 *ÈheHóp+
MAXMEMHEAP
));

518 
	`HAL_ASSERT
(
hdr
->hdr.
öU£
);

520 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

521 
hdr
->hdr.
öU£
 = 
FALSE
;

523 i‡(
ff1
 > 
hdr
)

525 
ff1
 = 
hdr
;

528 #i‡
OSALMEM_PROFILER


529 #i‡!
OSALMEM_PROFILER_LL


530 i‡(
oßlMemSèt
 != 0)

533 
uöt8
 
idx
;

535 
idx
 = 0; idx < 
OSALMEM_PROMAX
; idx++)

537 i‡(
hdr
->hdr.
Àn
 <
¥oC¡
[
idx
])

543 
¥oCur
[
idx
]--;

546 ()
	`oßl_mem£t
((
uöt8
 *)(
hdr
+1), 
OSALMEM_REIN
, (hdr->hdr.
Àn
 - 
OSALMEM_HDRSZ
) );

548 #i‡
OSALMEM_METRICS


549 
memAlo
 -
hdr
->hdr.
Àn
;

550 
blkFªe
++;

553 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

554 
	}
}

556 #i‡
OSALMEM_METRICS


566 
uöt16
 
	$oßl_hóp_block_max
( )

568  
blkMax
;

569 
	}
}

580 
uöt16
 
	$oßl_hóp_block_˙t
( )

582  
blkC¡
;

583 
	}
}

594 
uöt16
 
	$oßl_hóp_block_‰ì
( )

596  
blkFªe
;

597 
	}
}

608 
uöt16
 
	$oßl_hóp_mem_u£d
( )

610  
memAlo
;

611 
	}
}

614 #i‡
deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

624 
uöt16
 
	$oßl_hóp_high_w©î
( )

626 #i‡–
OSALMEM_METRICS
 )

627  
memMax
;

629  
MAXMEMHEAP
;

631 
	}
}

	@Components/osal/common/OSAL_PwrMgr.c

44 
	~"comdef.h
"

45 
	~"OnBﬂrd.h
"

46 
	~"OSAL.h
"

47 
	~"OSAL_Tasks.h
"

48 
	~"OSAL_Timîs.h
"

49 
	~"OSAL_PwrMgr.h
"

69 
pwrmgr_©åibuã_t
 
	gpwrmgr_©åibuã
;

100 
	$oßl_pwrmgr_öô
( )

102 
pwrmgr_©åibuã
.
pwrmgr_devi˚
 = 
PWRMGR_ALWAYS_ON
;

103 
pwrmgr_©åibuã
.
pwrmgr_èsk_°©e
 = 0;

104 
	}
}

118 
	$oßl_pwrmgr_devi˚
–
uöt8
 
pwrmgr_devi˚
 )

120 
pwrmgr_©åibuã
.
pwrmgr_devi˚
 =Öwrmgr_device;

121 
	}
}

135 
uöt8
 
	$oßl_pwrmgr_èsk_°©e
–
uöt8
 
èsk_id
, uöt8 
°©e
 )

137 i‡–
èsk_id
 >
èsksC¡
 )

138  ( 
INVALID_TASK
 );

140 i‡–
°©e
 =
PWRMGR_CONSERVE
 )

143 
pwrmgr_©åibuã
.
pwrmgr_èsk_°©e
 &~(1 << 
èsk_id
 );

148 
pwrmgr_©åibuã
.
pwrmgr_èsk_°©e
 |(1 << 
èsk_id
);

151  ( 
SUCCESS
 );

152 
	}
}

154 #i‡
deföed
–
POWER_SAVING
 )

165 
	$oßl_pwrmgr_powîc⁄£rve
( )

167 
uöt16
 
√xt
;

168 
hÆI¡Sèã_t
 
ötSèã
;

171 i‡–
pwrmgr_©åibuã
.
pwrmgr_devi˚
 !
PWRMGR_ALWAYS_ON
 )

174 i‡–
pwrmgr_©åibuã
.
pwrmgr_èsk_°©e
 == 0 )

177 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

180 
√xt
 = 
	`oßl_√xt_timeout
();

183 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

186 
	`OSAL_SET_CPU_INTO_SLEEP
–
√xt
 );

189 
	}
}

	@Components/osal/common/OSAL_Timers.c

44 
	~"comdef.h
"

45 
	~"OnBﬂrd.h
"

46 
	~"OSAL.h
"

47 
	~"OSAL_Timîs.h
"

48 
	~"hÆ_timî.h
"

64 *
	m√xt
;

65 
uöt16
 
	mtimeout
;

66 
uöt16
 
	mevít_Êag
;

67 
uöt8
 
	mèsk_id
;

68 
uöt16
 
	mªlﬂdTimeout
;

69 } 
	toßlTimîRec_t
;

75 
oßlTimîRec_t
 *
	gtimîHód
;

89 
uöt32
 
	goßl_sy°emClock
;

94 
oßlTimîRec_t
 *
oßlAddTimî
–
uöt8
 
èsk_id
, 
uöt16
 
evít_Êag
, uöt16 
timeout
 );

95 
oßlTimîRec_t
 *
oßlFödTimî
–
uöt8
 
èsk_id
, 
uöt16
 
evít_Êag
 );

96 
oßlDñëeTimî
–
oßlTimîRec_t
 *
rmTimî
 );

111 
	$oßlTimîInô
( )

113 
oßl_sy°emClock
 = 0;

114 
	}
}

128 
oßlTimîRec_t
 * 
	$oßlAddTimî
–
uöt8
 
èsk_id
, 
uöt16
 
evít_Êag
, uöt16 
timeout
 )

130 
oßlTimîRec_t
 *
√wTimî
;

131 
oßlTimîRec_t
 *
§chTimî
;

134 
√wTimî
 = 
	`oßlFödTimî
–
èsk_id
, 
evít_Êag
 );

135 i‡–
√wTimî
 )

138 
√wTimî
->
timeout
 =Åimeout;

140  ( 
√wTimî
 );

145 
√wTimî
 = 
	`oßl_mem_Æloc
––
oßlTimîRec_t
 ) );

147 i‡–
√wTimî
 )

150 
√wTimî
->
èsk_id
 =Åask_id;

151 
√wTimî
->
evít_Êag
 =Évent_flag;

152 
√wTimî
->
timeout
 =Åimeout;

153 
√wTimî
->
√xt
 = (*)
NULL
;

154 
√wTimî
->
ªlﬂdTimeout
 = 0;

157 i‡–
timîHód
 =
NULL
 )

160 
timîHód
 = 
√wTimî
;

165 
§chTimî
 = 
timîHód
;

168  
§chTimî
->
√xt
 )

169 
§chTimî
 = srchTimî->
√xt
;

172 
§chTimî
->
√xt
 = 
√wTimî
;

175  ( 
√wTimî
 );

178  ( (
oßlTimîRec_t
 *)
NULL
 );

180 
	}
}

193 
oßlTimîRec_t
 *
	$oßlFödTimî
–
uöt8
 
èsk_id
, 
uöt16
 
evít_Êag
 )

195 
oßlTimîRec_t
 *
§chTimî
;

198 
§chTimî
 = 
timîHód
;

201  
§chTimî
 )

203 i‡–
§chTimî
->
evít_Êag
 ==Évent_flag &&

204 
§chTimî
->
èsk_id
 ==Åask_id )

208 
§chTimî
 = srchTimî->
√xt
;

211  ( 
§chTimî
 );

212 
	}
}

224 
	$oßlDñëeTimî
–
oßlTimîRec_t
 *
rmTimî
 )

227 i‡–
rmTimî
 )

231 
rmTimî
->
evít_Êag
 = 0;

233 
	}
}

249 
uöt8
 
	$oßl_°¨t_timîEx
–
uöt8
 
èskID
, 
uöt16
 
evít_id
, uöt16 
timeout_vÆue
 )

251 
hÆI¡Sèã_t
 
ötSèã
;

252 
oßlTimîRec_t
 *
√wTimî
;

254 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

257 
√wTimî
 = 
	`oßlAddTimî
–
èskID
, 
evít_id
, 
timeout_vÆue
 );

259 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

261  ( (
√wTimî
 !
NULL
Ë? 
SUCCESS
 : 
NO_TIMER_AVAIL
 );

262 
	}
}

279 
uöt8
 
	$oßl_°¨t_ªlﬂd_timî
–
uöt8
 
èskID
, 
uöt16
 
evít_id
, uöt16 
timeout_vÆue
 )

281 
hÆI¡Sèã_t
 
ötSèã
;

282 
oßlTimîRec_t
 *
√wTimî
;

284 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

287 
√wTimî
 = 
	`oßlAddTimî
–
èskID
, 
evít_id
, 
timeout_vÆue
 );

288 i‡–
√wTimî
 )

291 
√wTimî
->
ªlﬂdTimeout
 = 
timeout_vÆue
;

294 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

296  ( (
√wTimî
 !
NULL
Ë? 
SUCCESS
 : 
NO_TIMER_AVAIL
 );

297 
	}
}

313 
uöt8
 
	$oßl_°›_timîEx
–
uöt8
 
èsk_id
, 
uöt16
 
evít_id
 )

315 
hÆI¡Sèã_t
 
ötSèã
;

316 
oßlTimîRec_t
 *
foundTimî
;

318 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

321 
foundTimî
 = 
	`oßlFödTimî
–
èsk_id
, 
evít_id
 );

322 i‡–
foundTimî
 )

324 
	`oßlDñëeTimî
–
foundTimî
 );

327 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

329  ( (
foundTimî
 !
NULL
Ë? 
SUCCESS
 : 
INVALID_EVENT_ID
 );

330 
	}
}

342 
uöt16
 
	$oßl_gë_timeoutEx
–
uöt8
 
èsk_id
, 
uöt16
 
evít_id
 )

344 
hÆI¡Sèã_t
 
ötSèã
;

345 
uöt16
 
π∫
 = 0;

346 
oßlTimîRec_t
 *
tmr
;

348 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

350 
tmr
 = 
	`oßlFödTimî
–
èsk_id
, 
evít_id
 );

352 i‡–
tmr
 )

354 
π∫
 = 
tmr
->
timeout
;

357 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

359  
π∫
;

360 
	}
}

371 
uöt8
 
	$oßl_timî_num_a˘ive
( )

373 
hÆI¡Sèã_t
 
ötSèã
;

374 
uöt8
 
num_timîs
 = 0;

375 
oßlTimîRec_t
 *
§chTimî
;

377 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

380 
§chTimî
 = 
timîHód
;

383  
§chTimî
 !
NULL
 )

385 
num_timîs
++;

386 
§chTimî
 = srchTimî->
√xt
;

389 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

391  
num_timîs
;

392 
	}
}

403 
	$oßlTimîUpd©e
–
uöt16
 
upd©eTime
 )

405 
hÆI¡Sèã_t
 
ötSèã
;

406 
oßlTimîRec_t
 *
§chTimî
;

407 
oßlTimîRec_t
 *
¥evTimî
;

409 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

411 
oßl_sy°emClock
 +
upd©eTime
;

412 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

415 i‡–
timîHód
 !
NULL
 )

418 
§chTimî
 = 
timîHód
;

419 
¥evTimî
 = (*)
NULL
;

422  
§chTimî
 )

424 
oßlTimîRec_t
 *
‰ìTimî
 = 
NULL
;

426 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

428 i‡(
§chTimî
->
timeout
 <
upd©eTime
)

430 
§chTimî
->
timeout
 = 0;

434 
§chTimî
->
timeout
 = srchTimî->timeouà- 
upd©eTime
;

438 i‡–(
§chTimî
->
timeout
 =0Ë&& (§chTimî->
ªlﬂdTimeout
Ë&& (§chTimî->
evít_Êag
) )

441 
	`oßl_£t_evít
–
§chTimî
->
èsk_id
, srchTimî->
evít_Êag
 );

444 
§chTimî
->
timeout
 = srchTimî->
ªlﬂdTimeout
;

448 i‡–
§chTimî
->
timeout
 =0 || srchTimî->
evít_Êag
 == 0 )

451 i‡–
¥evTimî
 =
NULL
 )

452 
timîHód
 = 
§chTimî
->
√xt
;

454 
¥evTimî
->
√xt
 = 
§chTimî
->next;

457 
‰ìTimî
 = 
§chTimî
;

460 
§chTimî
 = srchTimî->
√xt
;

465 
¥evTimî
 = 
§chTimî
;

466 
§chTimî
 = srchTimî->
√xt
;

469 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

471 i‡–
‰ìTimî
 )

473 i‡–
‰ìTimî
->
timeout
 == 0 )

475 
	`oßl_£t_evít
–
‰ìTimî
->
èsk_id
, fªeTimî->
evít_Êag
 );

477 
	`oßl_mem_‰ì
–
‰ìTimî
 );

481 
	}
}

483 #ifde‡
POWER_SAVING


493 
	$oßl_adju°_timîs
( )

495 
uöt16
 
eTime
;

497 i‡–
timîHód
 !
NULL
 )

500 
eTime
 = 
	`TimîEœp£d
(Ë/ 
TICK_COUNT
;

502 i‡–
eTime
 )

503 
	`oßlTimîUpd©e
–
eTime
 );

505 
	}
}

519 
uöt16
 
	$oßl_√xt_timeout
( )

521 
uöt16
 
√xtTimeout
;

522 
oßlTimîRec_t
 *
§chTimî
;

524 i‡–
timîHód
 !
NULL
 )

527 
§chTimî
 = 
timîHód
;

528 
√xtTimeout
 = 
OSAL_TIMERS_MAX_TIMEOUT
;

531  
§chTimî
 !
NULL
 )

533 i‡(
§chTimî
->
timeout
 < 
√xtTimeout
)

535 
√xtTimeout
 = 
§chTimî
->
timeout
;

538 
§chTimî
 = srchTimî->
√xt
;

544 
√xtTimeout
 = 0;

547  ( 
√xtTimeout
 );

548 
	}
}

560 
uöt32
 
	$oßl_GëSy°emClock
( )

562  ( 
oßl_sy°emClock
 );

563 
	}
}

	@Components/osal/include/OSAL.h

43 #i‚de‡
OSAL_H


44 
	#OSAL_H


	)

46 #ifde‡
__˝lu•lus


54 
	~"comdef.h
"

55 
	~"OSAL_Mem‹y.h
"

56 
	~"OSAL_Timîs.h
"

61 #i‡–
UINT_MAX
 == 65535 )

62 
	#oßl_off£tof
(
ty≥
, 
membî
Ë((
uöt16
Ë&((—y≥ *Ë0)->membî))

	)

64 
	#oßl_off£tof
(
ty≥
, 
membî
Ë((
uöt32
Ë&((—y≥ *Ë0)->membî))

	)

67 
	#OSAL_MSG_NEXT
(
msg_±r
Ë((
oßl_msg_hdr_t
 *Ë(msg_±rË- 1)->
√xt


	)

69 
	#OSAL_MSG_Q_INIT
(
q_±r
Ë*(q_±rË
NULL


	)

71 
	#OSAL_MSG_Q_EMPTY
(
q_±r
Ë(*(q_±rË=
NULL
)

	)

73 
	#OSAL_MSG_Q_HEAD
(
q_±r
Ë(*(q_±r))

	)

75 
	#OSAL_MSG_LEN
(
msg_±r
Ë((
oßl_msg_hdr_t
 *Ë(msg_±rË- 1)->
Àn


	)

77 
	#OSAL_MSG_ID
(
msg_±r
Ë((
oßl_msg_hdr_t
 *Ë(msg_±rË- 1)->
de°_id


	)

84 
	#INTS_ALL
 0xFF

	)

91 *
√xt
;

92 
uöt16
 
Àn
;

93 
uöt8
 
de°_id
;

94 } 
	toßl_msg_hdr_t
;

98 
uöt8
 
evít
;

99 
uöt8
 
°©us
;

100 } 
	toßl_evít_hdr_t
;

102 * 
	toßl_msg_q_t
;

117 
uöt8
 * 
oßl_msg_Æloˇã
(
uöt16
 
Àn
 );

122 
uöt8
 
oßl_msg_dóŒoˇã
–uöt8 *
msg_±r
 );

127 
uöt8
 
oßl_msg_£nd
–uöt8 
de°ö©i⁄_èsk
, uöt8 *
msg_±r
 );

132 
uöt8
 *
oßl_msg_ª˚ive
–uöt8 
èsk_id
 );

137 
oßl_evít_hdr_t
 *
oßl_msg_föd
(
uöt8
 
èsk_id
, uöt8 
evít
);

142 
oßl_msg_íqueue
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
 );

147 
uöt8
 
oßl_msg_íqueue_max
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
, uöt8 
max
 );

152 *
oßl_msg_dequeue
–
oßl_msg_q_t
 *
q_±r
 );

157 
oßl_msg_push
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
 );

162 
oßl_msg_exåa˘
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
, *
¥ev_±r
 );

170 
uöt8
 
oßl_£t_evít
–uöt8 
èsk_id
, 
uöt16
 
evít_Êag
 );

176 
uöt8
 
oßl_˛ór_evít
–uöt8 
èsk_id
, 
uöt16
 
evít_Êag
 );

184 
uöt8
 
oßl_i§_ªgi°î
–uöt8 
öãºu±_id
, (*
i§_±r
)( uint8* ) );

189 
uöt8
 
oßl_öt_íabÀ
–uöt8 
öãºu±_id
 );

194 
uöt8
 
oßl_öt_dißbÀ
–uöt8 
öãºu±_id
 );

202 
uöt8
 
oßl_öô_sy°em
( );

207 #i‡
deföed
 (
ZBIT
)

208 
__de˛•ec
(
dŒexp‹t
Ë
oßl_°¨t_sy°em
( );

210 
oßl_°¨t_sy°em
( );

216 
oßl_run_sy°em
( );

221 
uöt8
 
oßl_£lf
( );

229 
oßl_°æí
–*
pSåög
 );

234 *
oßl_mem˝y
–*, c⁄° 
GENERIC
 *, );

239 *
oßl_memdup
–c⁄° 
GENERIC
 *
§c
, 
Àn
 );

244 *
oßl_ªvmem˝y
–*, c⁄° 
GENERIC
 *, );

249 
uöt8
 
oßl_memcmp
–c⁄° 
GENERIC
 *
§c1
, c⁄° GENERIC *
§c2
, 
Àn
 );

254 *
oßl_mem£t
–*
de°
, 
uöt8
 
vÆue
, 
Àn
 );

259 
uöt16
 
oßl_buûd_uöt16
–
uöt8
 *
sw≠≥d
 );

264 
uöt32
 
oßl_buûd_uöt32
–
uöt8
 *
sw≠≥d
, uöt8 
Àn
 );

269 #i‡!
deföed
 ( 
ZBIT
 ) && !deföed ( 
ZBIT2
 ) && !deföed (
UBIT
)

270 
uöt8
 *
_…ﬂ
–
uöt32
 
l
, uöt8 * 
buf
, uöt8 
ødix
 );

276 
uöt16
 
oßl_ønd
( );

281 
uöt8
* 
oßl_buf„r_uöt32
–uöt8 *
buf
, 
uöt32
 
vÆ
 );

286 
uöt8
* 
oßl_buf„r_uöt24
–uöt8 *
buf
, 
uöt24
 
vÆ
 );

291 
uöt8
 
oßl_isbuf£t
–uöt8 *
buf
, uöt8 
vÆ
, uöt8 
Àn
 );

296 #ifde‡
__˝lu•lus


	@Components/osal/include/OSAL_Clock.h

40 #i‚de‡
OSAL_CLOCK_H


41 
	#OSAL_CLOCK_H


	)

43 #ifde‡
__˝lu•lus


56 
	#IsLópYór
(
yr
Ë(!((yrË% 400Ë|| (((yrË% 100Ë&& !((yrË% 4)))

	)

68 
uöt32
 
	tUTCTime
;

73 
uöt8
 
£c⁄ds
;

74 
uöt8
 
möuãs
;

75 
uöt8
 
hour
;

76 
uöt8
 
day
;

77 
uöt8
 
m⁄th
;

78 
uöt16
 
yór
;

79 } 
	tUTCTimeSåu˘
;

92 
oßlTimeUpd©e
( );

100 
oßl_£tClock
–
UTCTime
 
√wTime
 );

108 
UTCTime
 
oßl_gëClock
( );

117 
oßl_C⁄vîtUTCTime
–
UTCTimeSåu˘
 *
tm
, 
UTCTime
 
£cTime
 );

124 
UTCTime
 
oßl_C⁄vîtUTCSecs
–
UTCTimeSåu˘
 *
tm
 );

129 #ifde‡
__˝lu•lus


	@Components/osal/include/OSAL_Memory.h

40 #i‚de‡
OSAL_MEMORY_H


41 
	#OSAL_MEMORY_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"comdef.h
"

57 #i‡!
deföed
 ( 
OSALMEM_METRICS
 )

58 
	#OSALMEM_METRICS
 
FALSE


	)

65 
	#oßl_°ack_u£d
(Ë
	`OnBﬂrd_°ack_u£d
()

	)

82 
oßl_mem_öô
( );

87 
oßl_mem_kick
( );

92 #ifde‡
DPRINTF_OSALHEAPTRACE


93 *
oßl_mem_Æloc_dbg
–
uöt16
 
size
, c⁄° *
‚ame
, 
 um
 );

94 
	#oßl_mem_Æloc
(
_size
 ) 
	`oßl_mem_Æloc_dbg
(_size, 
__FILE__
, 
__LINE__
)

	)

96 *
oßl_mem_Æloc
–
uöt16
 
size
 );

102 #ifde‡
DPRINTF_OSALHEAPTRACE


103 
oßl_mem_‰ì_dbg
–*
±r
, c⁄° *
‚ame
, 
 um
 );

104 
	#oßl_mem_‰ì
(
_±r
 ) 
	`oßl_mem_‰ì_dbg
(_±r, 
__FILE__
, 
__LINE__
)

	)

106 
oßl_mem_‰ì
–*
±r
 );

109 #i‡–
OSALMEM_METRICS
 )

113 
uöt16
 
oßl_hóp_block_max
( );

118 
uöt16
 
oßl_hóp_block_˙t
( );

123 
uöt16
 
oßl_hóp_block_‰ì
( );

128 
uöt16
 
oßl_hóp_mem_u£d
( );

131 #i‡
deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

135 
uöt16
 
oßl_hóp_high_w©î
( );

141 #ifde‡
__˝lu•lus


	@Components/osal/include/OSAL_Nv.h

40 #i‚de‡
OSAL_NV_H


41 
	#OSAL_NV_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"hÆ_ty≥s.h
"

77 
oßl_nv_öô
–*
p
 );

82 
uöt8
 
oßl_nv_ôem_öô
–
uöt16
 
id
, uöt16 
Àn
, *
buf
 );

87 
uöt8
 
oßl_nv_ªad
–
uöt16
 
id
, uöt16 
off£t
, uöt16 
Àn
, *
buf
 );

92 
uöt8
 
oßl_nv_wrôe
–
uöt16
 
id
, uöt16 
off£t
, uöt16 
Àn
, *
buf
 );

97 
uöt16
 
oßl_nv_ôem_Àn
–uöt16 
id
 );

102 
uöt8
 
oßl_nv_dñëe
–
uöt16
 
id
, uöt16 
Àn
 );

107 #ifde‡
__˝lu•lus


	@Components/osal/include/OSAL_PwrMgr.h

40 #i‚de‡
OSAL_PWRMGR_H


41 
	#OSAL_PWRMGR_H


	)

43 #ifde‡
__˝lu•lus


65 
uöt16
 
pwrmgr_èsk_°©e
;

66 
uöt16
 
pwrmgr_√xt_timeout
;

67 
uöt16
 
accumuœãd_¶ìp_time
;

68 
uöt8
 
pwrmgr_devi˚
;

69 } 
	tpwrmgr_©åibuã_t
;

75 
	#PWRMGR_ALWAYS_ON
 0

	)

76 
	#PWRMGR_BATTERY
 1

	)

81 
	#PWRMGR_CONSERVE
 0

	)

82 
	#PWRMGR_HOLD
 1

	)

91 
pwrmgr_©åibuã_t
 
pwrmgr_©åibuã
;

102 
oßl_pwrmgr_öô
( );

115 
uöt8
 
oßl_pwrmgr_èsk_°©e
–uöt8 
èsk_id
, uöt8 
°©e
 );

124 
oßl_pwrmgr_devi˚
–
uöt8
 
pwrmgr_devi˚
 );

130 
oßl_pwrmgr_powîc⁄£rve
( );

135 #ifde‡
__˝lu•lus


	@Components/osal/include/OSAL_Tasks.h

40 #i‚de‡
OSAL_TASKS_H


41 
	#OSAL_TASKS_H


	)

43 #ifde‡
__˝lu•lus


59 
	#TASK_NO_TASK
 0xFF

	)

68 (*
	tpTaskEvítH™dÀrFn
)–
	tèsk_id
, 
	tevít
 );

74 c⁄° 
pTaskEvítH™dÀrFn
 
èsksAº
[];

75 c⁄° 
uöt8
 
èsksC¡
;

76 
uöt16
 *
èsksEvíts
;

85 
oßlInôTasks
( );

90 #ifde‡
__˝lu•lus


	@Components/osal/include/OSAL_Timers.h

40 #i‚de‡
OSAL_TIMERS_H


41 
	#OSAL_TIMERS_H


	)

43 #ifde‡
__˝lu•lus


59 
	#OSAL_TIMERS_MAX_TIMEOUT
 0xFFFF

	)

76 
oßlTimîInô
( );

81 
uöt8
 
oßl_°¨t_timîEx
–uöt8 
èsk_id
, 
uöt16
 
evít_id
, uöt16 
timeout_vÆue
 );

86 
uöt8
 
oßl_°¨t_ªlﬂd_timî
–uöt8 
èskID
, 
uöt16
 
evít_id
, uöt16 
timeout_vÆue
 );

91 
uöt8
 
oßl_°›_timîEx
–uöt8 
èsk_id
, 
uöt16
 
evít_id
 );

96 
uöt16
 
oßl_gë_timeoutEx
–
uöt8
 
èsk_id
, uöt16 
evít_id
 );

102 
oßl_timî_ISR
( );

107 
oßl_adju°_timîs
( );

112 
oßlTimîUpd©e
–
uöt16
 
upd©eTime
 );

117 
uöt8
 
oßl_timî_num_a˘ive
( );

123 
oßl_¶ìp_timîs
( );

124 
oßl_un¶ìp_timîs
( );

129 
uöt32
 
oßl_GëSy°emClock
( );

135 
uöt16
 
oßl_√xt_timeout
( );

140 #ifde‡
__˝lu•lus


	@Components/osal/include/ZComDef.h

40 #i‚de‡
ZCOMDEF_H


41 
	#ZCOMDEF_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"comdef.h
"

53 
	~"ßddr.h
"

59 
	#oßl_˝yExtAddr
(
a
, 
b
Ë
	`sAddrExtCpy
(◊), (c⁄° 
uöt8
 *)(b))

	)

60 
	#oßl_ExtAddrEquÆ
(
a
, 
b
Ë
	`sAddrExtCmp
((c⁄° 
uöt8
 *)◊), (c⁄° uöt8 *)(b))

	)

61 
	#oßl_c›yAddªss
(
a
, 
b
Ë
	`sAddrCpy
–(
sAddr_t
 *)◊), (c⁄° sAddr_à*)(bË)

	)

70 
	#DEVICE_BUILD_COORDINATOR
 0x01

	)

71 
	#DEVICE_BUILD_ROUTER
 0x02

	)

72 
	#DEVICE_BUILD_ENDDEVICE
 0x04

	)

75 
	#ZSUCCESS
 
SUCCESS


	)

78 
	#COMPID_OSAL
 0

	)

79 
	#COMPID_MTEL
 1

	)

80 
	#COMPID_MTSPCI
 2

	)

81 
	#COMPID_NWK
 3

	)

82 
	#COMPID_NWKIF
 4

	)

83 
	#COMPID_MACCB
 5

	)

84 
	#COMPID_MAC
 6

	)

85 
	#COMPID_APP
 7

	)

86 
	#COMPID_TEST
 8

	)

88 
	#COMPID_RTG
 9

	)

89 
	#COMPID_DATA
 11

	)

92 
	#COMPID_TEST_NWK_STARTUP
 20

	)

93 
	#COMPID_TEST_SCAN_CONFIRM
 21

	)

94 
	#COMPID_TEST_ASSOC_CONFIRM
 22

	)

95 
	#COMPID_TEST_REMOTE_DATA_CONFIRM
 23

	)

98 
	#ZCD_NV_EXTADDR
 0x0001

	)

99 
	#ZCD_NV_BOOTCOUNTER
 0x0002

	)

100 
	#ZCD_NV_STARTUP_OPTION
 0x0003

	)

101 
	#ZCD_NV_START_DELAY
 0x0004

	)

104 
	#ZCD_NV_NIB
 0x0021

	)

105 
	#ZCD_NV_DEVICE_LIST
 0x0022

	)

106 
	#ZCD_NV_ADDRMGR
 0x0023

	)

107 
	#ZCD_NV_POLL_RATE
 0x0024

	)

108 
	#ZCD_NV_QUEUED_POLL_RATE
 0x0025

	)

109 
	#ZCD_NV_RESPONSE_POLL_RATE
 0x0026

	)

110 
	#ZCD_NV_REJOIN_POLL_RATE
 0x0027

	)

111 
	#ZCD_NV_DATA_RETRIES
 0x0028

	)

112 
	#ZCD_NV_POLL_FAILURE_RETRIES
 0x0029

	)

113 
	#ZCD_NV_STACK_PROFILE
 0x002A

	)

114 
	#ZCD_NV_INDIRECT_MSG_TIMEOUT
 0x002B

	)

115 
	#ZCD_NV_ROUTE_EXPIRY_TIME
 0x002C

	)

116 
	#ZCD_NV_EXTENDED_PAN_ID
 0x002D

	)

117 
	#ZCD_NV_BCAST_RETRIES
 0x002E

	)

118 
	#ZCD_NV_PASSIVE_ACK_TIMEOUT
 0x002F

	)

119 
	#ZCD_NV_BCAST_DELIVERY_TIME
 0x0030

	)

120 
	#ZCD_NV_NWK_MODE
 0x0031

	)

121 
	#ZCD_NV_CONCENTRATOR_ENABLE
 0x0032

	)

122 
	#ZCD_NV_CONCENTRATOR_DISCOVERY
 0x0033

	)

123 
	#ZCD_NV_CONCENTRATOR_RADIUS
 0x0034

	)

124 
	#ZCD_NV_CONCENTRATOR_RC
 0x0036

	)

125 
	#ZCD_NV_NWK_MGR_MODE
 0x0037

	)

126 
	#ZCD_NV_SRC_RTG_EXPIRY_TIME
 0x0038

	)

127 
	#ZCD_NV_ROUTE_DISCOVERY_TIME
 0x0039

	)

128 
	#ZCD_NV_NWK_ACTIVE_KEY_INFO
 0x003A

	)

129 
	#ZCD_NV_NWK_ALTERN_KEY_INFO
 0x003B

	)

130 
	#ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP
 0x003C

	)

134 
	#ZCD_NV_BINDING_TABLE
 0x0041

	)

135 
	#ZCD_NV_GROUP_TABLE
 0x0042

	)

136 
	#ZCD_NV_APS_FRAME_RETRIES
 0x0043

	)

137 
	#ZCD_NV_APS_ACK_WAIT_DURATION
 0x0044

	)

138 
	#ZCD_NV_APS_ACK_WAIT_MULTIPLIER
 0x0045

	)

139 
	#ZCD_NV_BINDING_TIME
 0x0046

	)

140 
	#ZCD_NV_APS_USE_EXT_PANID
 0x0047

	)

141 
	#ZCD_NV_APS_USE_INSECURE_JOIN
 0x0048

	)

143 
	#ZCD_NV_APS_NONMEMBER_RADIUS
 0x004B

144 
	#ZCD_NV_APS_LINK_KEY_TABLE
 0x004C

	)

147 
	#ZCD_NV_SECURITY_LEVEL
 0x0061

	)

148 
	#ZCD_NV_PRECFGKEY
 0x0062

	)

149 
	#ZCD_NV_PRECFGKEYS_ENABLE
 0x0063

	)

150 
	#ZCD_NV_SECURITY_MODE
 0x0064

	)

151 
	#ZCD_NV_SECURE_PERMIT_JOIN
 0x0065

	)

153 
	#ZCD_NV_IMPLICIT_CERTIFICATE
 0x0069

	)

154 
	#ZCD_NV_DEVICE_PRIVATE_KEY
 0x006A

	)

155 
	#ZCD_NV_CA_PUBLIC_KEY
 0x006B

	)

157 
	#ZCD_NV_USE_DEFAULT_TCLK
 0x006D

	)

158 
	#ZCD_NV_TRUSTCENTER_ADDR
 0x006E

	)

159 
	#ZCD_NV_RNG_COUNTER
 0x006F

	)

160 
	#ZCD_NV_RANDOM_SEED
 0x0070

	)

163 
	#ZCD_NV_USERDESC
 0x0081

	)

164 
	#ZCD_NV_NWKKEY
 0x0082

	)

165 
	#ZCD_NV_PANID
 0x0083

	)

166 
	#ZCD_NV_CHANLIST
 0x0084

	)

167 
	#ZCD_NV_LEAVE_CTRL
 0x0085

	)

168 
	#ZCD_NV_SCAN_DURATION
 0x0086

	)

169 
	#ZCD_NV_LOGICAL_TYPE
 0x0087

	)

170 
	#ZCD_NV_NWKMGR_MIN_TX
 0x0088

	)

171 
	#ZCD_NV_NWKMGR_ADDR
 0x0089

	)

173 
	#ZCD_NV_ZDO_DIRECT_CB
 0x008F

	)

176 
	#ZCD_NV_SCENE_TABLE
 0x0091

	)

179 
	#ZCD_NV_SAPI_ENDPOINT
 0x00A1

	)

185 
	#ZCD_NV_SAS_SHORT_ADDR
 0x00B1

	)

186 
	#ZCD_NV_SAS_EXT_PANID
 0x00B2

	)

187 
	#ZCD_NV_SAS_PANID
 0x00B3

	)

188 
	#ZCD_NV_SAS_CHANNEL_MASK
 0x00B4

	)

189 
	#ZCD_NV_SAS_PROTOCOL_VER
 0x00B5

	)

190 
	#ZCD_NV_SAS_STACK_PROFILE
 0x00B6

	)

191 
	#ZCD_NV_SAS_STARTUP_CTRL
 0x00B7

	)

193 
	#ZCD_NV_SAS_TC_ADDR
 0x00C1

	)

194 
	#ZCD_NV_SAS_TC_MASTER_KEY
 0x00C2

	)

195 
	#ZCD_NV_SAS_NWK_KEY
 0x00C3

	)

196 
	#ZCD_NV_SAS_USE_INSEC_JOIN
 0x00C4

	)

197 
	#ZCD_NV_SAS_PRECFG_LINK_KEY
 0x00C5

	)

198 
	#ZCD_NV_SAS_NWK_KEY_SEQ_NUM
 0x00C6

	)

199 
	#ZCD_NV_SAS_NWK_KEY_TYPE
 0x00C7

	)

200 
	#ZCD_NV_SAS_NWK_MGR_ADDR
 0x00C8

	)

202 
	#ZCD_NV_SAS_CURR_TC_MASTER_KEY
 0x00D1

	)

203 
	#ZCD_NV_SAS_CURR_NWK_KEY
 0x00D2

	)

204 
	#ZCD_NV_SAS_CURR_PRECFG_LINK_KEY
 0x00D3

	)

208 
	#ZCD_NV_TCLK_TABLE_START
 0x0101

	)

209 
	#ZCD_NV_TCLK_TABLE_END
 0x01FF

	)

213 
	#ZCD_NV_APS_LINK_KEY_DATA_START
 0x0201

214 
	#ZCD_NV_APS_LINK_KEY_DATA_END
 0x02FF

	)

218 
	#ZCD_NV_MASTER_KEY_DATA_START
 0x0301

219 
	#ZCD_NV_MASTER_KEY_DATA_END
 0x03FF

	)

229 
	#ZCD_STARTOPT_DEFAULT_CONFIG_STATE
 0x01

	)

230 
	#ZCD_STARTOPT_DEFAULT_NETWORK_STATE
 0x02

	)

231 
	#ZCD_STARTOPT_AUTO_START
 0x04

	)

232 
	#ZCD_STARTOPT_CLEAR_CONFIG
 
ZCD_STARTOPT_DEFAULT_CONFIG_STATE


	)

233 
	#ZCD_STARTOPT_CLEAR_STATE
 
ZCD_STARTOPT_DEFAULT_NETWORK_STATE


	)

236 
	#ZCL_KE_IMPLICIT_CERTIFICATE_LEN
 48

	)

237 
	#ZCL_KE_CA_PUBLIC_KEY_LEN
 22

	)

238 
	#ZCL_KE_DEVICE_PRIVATE_KEY_LEN
 21

	)

244 
uöt8
 
	tbyã
;

245 
uöt16
 
	tUINT16
;

246 
öt16
 
	tINT16
;

250 
AddrNŸPª£¡
 = 0,

251 
AddrGroup
 = 1,

252 
Addr16Bô
 = 2,

253 
Addr64Bô
 = 3,

254 
AddrBrﬂdˇ°
 = 15

257 
	#Z_EXTADDR_LEN
 8

	)

259 
byã
 
	tZL⁄gAddr_t
[
Z_EXTADDR_LEN
];

265 
uöt16
 
sh‹tAddr
;

266 
ZL⁄gAddr_t
 
extAddr
;

267 } 
addr
;

268 
byã
 
addrMode
;

269 } 
	tzAddrTy≥_t
;

272 
	#ZSuc˚ss
 
SUCCESS


	)

273 
	#ZFaûuª
 
FAILURE


	)

274 
	#ZInvÆidP¨amëî
 
INVALIDPARAMETER


	)

277 
	#ZMemEº‹
 0x10

	)

278 
	#ZBuf„rFuŒ
 0x11

	)

279 
	#ZUnsuµ‹ãdMode
 0x12

	)

280 
	#ZMacMemEº‹
 0x13

	)

282 
	#ZS≠iInProgªss
 0x20

	)

283 
	#ZS≠iTimeout
 0x21

	)

284 
	#ZS≠iInô
 0x22

	)

286 
	#ZNŸAuth‹ized
 0x7E

	)

288 
	#ZMÆf‹medCmd
 0x80

	)

289 
	#ZUnsupClu°îCmd
 0x81

	)

292 
	#ZOèAb‹t
 0x95

	)

293 
	#ZOèImageInvÆid
 0x96

	)

294 
	#ZOèWaôF‹D©a
 0x97

	)

295 
	#ZOèNoImageAvaûabÀ
 0x98

	)

296 
	#ZOèRequúeM‹eImage
 0x99

	)

299 
	#ZApsFaû
 0xb1

	)

300 
	#ZApsTabÀFuŒ
 0xb2

	)

301 
	#ZApsIŒegÆReque°
 0xb3

	)

302 
	#ZApsInvÆidBödög
 0xb4

	)

303 
	#ZApsUnsuµ‹ãdAârib
 0xb5

	)

304 
	#ZApsNŸSuµ‹ãd
 0xb6

	)

305 
	#ZApsNoAck
 0xb7

	)

306 
	#ZApsDu∂iˇãE¡ry
 0xb8

	)

307 
	#ZApsNoBoundDevi˚
 0xb9

	)

308 
	#ZApsNŸAŒowed
 0xba

	)

309 
	#ZApsNŸAuthítiˇãd
 0xbb

	)

312 
	#ZSecNoKey
 0xa1

	)

313 
	#ZSecOldFrmCou¡
 0xa2

	)

314 
	#ZSecMaxFrmCou¡
 0xa3

	)

315 
	#ZSecCcmFaû
 0xa4

	)

318 
	#ZNwkInvÆidP¨am
 0xc1

	)

319 
	#ZNwkInvÆidReque°
 0xc2

	)

320 
	#ZNwkNŸPîmôãd
 0xc3

	)

321 
	#ZNwkSèπupFaûuª
 0xc4

	)

322 
	#ZNwkAÃódyPª£¡
 0xc5

	)

323 
	#ZNwkSyncFaûuª
 0xc6

	)

324 
	#ZNwkTabÀFuŒ
 0xc7

	)

325 
	#ZNwkUnknownDevi˚
 0xc8

	)

326 
	#ZNwkUnsuµ‹ãdAâribuã
 0xc9

	)

327 
	#ZNwkNoNëw‹ks
 0xˇ

	)

328 
	#ZNwkLóveUnc⁄fúmed
 0xcb

	)

329 
	#ZNwkNoAck
 0xcc

330 
	#ZNwkNoRouã
 0xcd

	)

333 
	#ZMacSuc˚ss
 0x00

	)

334 
	#ZMacBóc⁄Loss
 0xe0

	)

335 
	#ZMacCh™√lAc˚ssFaûuª
 0xe1

	)

336 
	#ZMacDíõd
 0xe2

	)

337 
	#ZMacDißbÀTrxFaûuª
 0xe3

	)

338 
	#ZMacFaûedSecurôyCheck
 0xe4

	)

339 
	#ZMacFømeTooL⁄g
 0xe5

	)

340 
	#ZMacInvÆidGTS
 0xe6

	)

341 
	#ZMacInvÆidH™dÀ
 0xe7

	)

342 
	#ZMacInvÆidP¨amëî
 0xe8

	)

343 
	#ZMacNoACK
 0xe9

	)

344 
	#ZMacNoBóc⁄
 0xó

	)

345 
	#ZMacNoD©a
 0xeb

	)

346 
	#ZMacNoSh‹tAddr
 0xec

	)

347 
	#ZMacOutOfC≠
 0xed

	)

348 
	#ZMacPANIDC⁄Êi˘
 0xì

	)

349 
	#ZMacRólignmít
 0xef

	)

350 
	#ZMacTønß˘i⁄Expúed
 0xf0

	)

351 
	#ZMacTønß˘i⁄OvîFlow
 0xf1

	)

352 
	#ZMacTxA˘ive
 0xf2

	)

353 
	#ZMacUnAvaûabÀKey
 0xf3

	)

354 
	#ZMacUnsuµ‹ãdAâribuã
 0xf4

	)

355 
	#ZMacUnsuµ‹ãd
 0xf5

	)

356 
	#ZMacSrcM©chInvÆidIndex
 0xff

	)

358 
Sètus_t
 
	tZSètus_t
;

362 
uöt8
 
txCou¡î
;

363 
uöt8
 
txCo°
;

365 
uöt8
 
rxLqi
;

367 
uöt8
 
öKeySeqNum
;

368 
uöt32
 
öFrmC¡r
;

369 
uöt16
 
txFaûuª
;

370 } 
	tlökInfo_t
;

376 
	#SPI_INCOMING_ZTOOL_PORT
 0x21

377 
	#SPI_INCOMING_ZAPP_DATA
 0x22

378 
	#MT_SYS_APP_MSG
 0x23

379 
	#MT_SYS_APP_RSP_MSG
 0x24

380 
	#MT_SYS_OTA_MSG
 0x25

381 

	)

382 
	#AF_DATA_CONFIRM_CMD
 0xFD

383 
	#AF_INCOMING_MSG_CMD
 0x1A

384 
	#AF_INCOMING_KVP_CMD
 0x1B

385 
	#AF_INCOMING_GRP_KVP_CMD
 0x1C

386 

	)

389 
	#ZDO_NEW_DSTADDR
 0xD0

390 
	#ZDO_STATE_CHANGE
 0xD1

391 
	#ZDO_MATCH_DESC_RSP_SENT
 0xD2

392 
	#ZDO_CB_MSG
 0xD3

393 
	#ZDO_NETWORK_REPORT
 0xD4

394 
	#ZDO_NETWORK_UPDATE
 0xD5

395 
	#ZDO_ADDR_CHANGE_IND
 0xD6

396 

	)

397 
	#NM_CHANNEL_INTERFERE
 0x31

398 
	#NM_ED_SCAN_CONFIRM
 0x32

399 
	#SAPS_CHANNEL_CHANGE
 0x33

400 
	#ZCL_INCOMING_MSG
 0x34

401 
	#ZCL_KEY_ESTABLISH_IND
 0x35

402 
	#ZCL_OTA_CALLBACK_IND
 0x36

403 

	)

419 #ifde‡
__˝lu•lus


	@Components/osal/include/comdef.h

40 #i‚de‡
COMDEF_H


41 
	#COMDEF_H


	)

43 #ifde‡
__˝lu•lus


54 
	~"hÆ_ty≥s.h
"

55 
	~"hÆ_defs.h
"

60 
	#VOID
 ()

	)

62 
	#NULL_OK


	)

63 
	#INP


	)

64 
	#OUTP


	)

65 
	#UNUSED


	)

66 
	#ONLY


	)

67 
	#READONLY


	)

68 
	#SHARED


	)

69 
	#KEEP


	)

70 
	#RELAX


	)

76 #i‚de‡
Ál£


77 
	#Ál£
 0

	)

80 #i‚de‡
åue


81 
	#åue
 1

	)

84 #i‚de‡
CONST


85 
	#CONST
 c⁄°

	)

88 #i‚de‡
GENERIC


89 
	#GENERIC


	)

93 
	#SUCCESS
 0x00

	)

94 
	#FAILURE
 0x01

	)

95 
	#INVALIDPARAMETER
 0x02

	)

96 
	#INVALID_TASK
 0x03

	)

97 
	#MSG_BUFFER_NOT_AVAIL
 0x04

	)

98 
	#INVALID_MSG_POINTER
 0x05

	)

99 
	#INVALID_EVENT_ID
 0x06

	)

100 
	#INVALID_INTERRUPT_ID
 0x07

	)

101 
	#NO_TIMER_AVAIL
 0x08

	)

102 
	#NV_ITEM_UNINIT
 0x09

	)

103 
	#NV_OPER_FAILED
 0x0A

	)

104 
	#INVALID_MEM_SIZE
 0x0B

	)

105 
	#NV_BAD_ITEM_LEN
 0x0C

	)

112 
uöt8
 
	tSètus_t
;

115 
öt32
 
	töt24
;

116 
uöt32
 
	tuöt24
;

122 
	#SYS_EVENT_MSG
 0x8000

123 

	)

128 
	#KEY_CHANGE
 0xC0

129 

	)

148 #ifde‡
__˝lu•lus


	@Components/osal/mcu/cc2530/OSAL_Nv.c

50 
	~"hÆ_adc.h
"

51 
	~"hÆ_Êash.h
"

52 
	~"hÆ_ty≥s.h
"

53 
	~"OSAL_Nv.h
"

54 
	~"ZComDef.h
"

60 
	#OSAL_NV_PAGE_SIZE
 
HAL_FLASH_PAGE_SIZE


	)

61 
	#OSAL_NV_PAGES_USED
 
HAL_NV_PAGE_CNT


	)

62 
	#OSAL_NV_PAGE_BEG
 
HAL_NV_PAGE_BEG


	)

63 
	#OSAL_NV_PAGE_END
 (
OSAL_NV_PAGE_BEG
 + 
OSAL_NV_PAGES_USED
 - 1)

	)

65 
	#OSAL_NV_ACTIVE
 0x00

	)

66 
	#OSAL_NV_ERASED
 0xFF

	)

67 
	#OSAL_NV_ERASED_ID
 0xFFFF

	)

68 
	#OSAL_NV_ZEROED_ID
 0x0000

	)

70 
	#OSAL_NV_SOURCE_ID
 0x8000

	)

73 
	#OSAL_NV_PAGE_NULL
 0

	)

76 
	#OSAL_NV_ITEM_NULL
 0

	)

78 
	#OSAL_NV_WORD_SIZE
 
HAL_FLASH_WORD_SIZE


	)

80 
	#OSAL_NV_PAGE_HDR_OFFSET
 0

	)

82 
	#OSAL_NV_MAX_HOT
 3

	)

83 c⁄° 
uöt16
 
	ghŸIds
[
OSAL_NV_MAX_HOT
] = {

84 
ZCD_NV_NWKKEY
,

85 
ZCD_NV_NWK_ACTIVE_KEY_INFO
,

86 
ZCD_NV_NWK_ALTERN_KEY_INFO
,

93 
	#OSAL_NV_CHECK_BUS_VOLTAGE
 
	`HÆAdcCheckVdd
(
VDD_MIN_NV
)

	)

95 
	#OSAL_NV_DATA_SIZE
–
LEN
 ) \

96 (((
LEN
Ë>((
uöt16
)(65536UL - 
OSAL_NV_WORD_SIZE
))) ? \

97 ((
uöt16
)(65536UL - 
OSAL_NV_WORD_SIZE
)) : \

98 ((((
LEN
Ë+ 
OSAL_NV_WORD_SIZE
 - 1Ë/ OSAL_NV_WORD_SIZEË* OSAL_NV_WORD_SIZE))

	)

100 
	#OSAL_NV_ITEM_SIZE
–
LEN
 ) \

101 (((
LEN
Ë>((
uöt16
)(65536UL - 
OSAL_NV_WORD_SIZE
 - 
OSAL_NV_HDR_SIZE
))) ? \

102 ((
uöt16
)(65536UL - 
OSAL_NV_WORD_SIZE
)) : \

103 (((((
LEN
Ë+ 
OSAL_NV_WORD_SIZE
 - 1Ë/ OSAL_NV_WORD_SIZEË* OSAL_NV_WORD_SIZEË+ 
OSAL_NV_HDR_SIZE
))

	)

105 
	#COMPACT_PAGE_CLEANUP
–
COM_PG
 ) 
	`°
 ( \

111 
	`£tPageU£
–
pgRes
, 
TRUE
 ); \

112 
	`îa£Page
–(
COM_PG
) ); \

114 
pgRes
 = (
COM_PG
); \

115 )

	)

123 
uöt16
 
	mid
;

124 
uöt16
 
	mÀn
;

125 
uöt16
 
	mchk
;

126 
uöt16
 
	m°©
;

127 } 
	toßlNvHdr_t
;

129 
	#OSAL_NV_HDR_ID
 0

	)

130 
	#OSAL_NV_HDR_LEN
 2

	)

131 
	#OSAL_NV_HDR_CHK
 4

	)

132 
	#OSAL_NV_HDR_STAT
 6

	)

134 
	#OSAL_NV_HDR_ITEM
 2

135 
	#OSAL_NV_HDR_SIZE
 8

	)

136 
	#OSAL_NV_HDR_HALF
 (
OSAL_NV_HDR_SIZE
 / 2)

	)

140 
uöt16
 
	ma˘ive
;

141 
uöt16
 
	möU£
;

142 
uöt16
 
	mx„r
;

143 
uöt16
 
	m•¨e
;

144 } 
	toßlNvPgHdr_t
;

146 
	#OSAL_NV_PG_ACTIVE
 0

	)

147 
	#OSAL_NV_PG_INUSE
 2

	)

148 
	#OSAL_NV_PG_XFER
 4

	)

149 
	#OSAL_NV_PG_SPARE
 6

	)

151 
	#OSAL_NV_PAGE_HDR_SIZE
 8

	)

152 
	#OSAL_NV_PAGE_HDR_HALF
 (
OSAL_NV_PAGE_HDR_SIZE
 / 2)

	)

156 
	meNvX„r
,

157 
	meNvZîo


158 } 
	teNvHdrEnum
;

162 
	mePgA˘ive
,

163 
	mePgInU£
,

164 
	mePgX„r
,

165 
	mePgS∑ª


166 } 
	tePgHdrEnum
;

172 #i‚de‡
OAD_KEEP_NV_PAGES


175 #¥agm®
loˇti⁄
="ZIGNV_ADDRESS_SPACE"

176 
__no_öô
 
uöt8
 
	g_nvBuf
[
OSAL_NV_PAGES_USED
 * 
OSAL_NV_PAGE_SIZE
];

177 #¥agm®
ªquúed
=
_nvBuf


185 
uöt16
 
	gpgOff
[
OSAL_NV_PAGES_USED
];

188 
uöt16
 
	gpgLo°
[
OSAL_NV_PAGES_USED
];

190 
uöt8
 
	gpgRes
;

193 
uöt8
 
	gfödPg
;

196 
uöt8
 
	ghŸPg
[
OSAL_NV_MAX_HOT
];

197 
uöt16
 
	ghŸOff
[
OSAL_NV_MAX_HOT
];

203 
uöt8
 
öôNV
( );

205 
£tPageU£
–
uöt8
 
pg
, uöt8 
öU£
 );

206 
uöt16
 
öôPage
–
uöt8
 
pg
, uöt16 
id
, uöt8 
födDups
 );

207 
îa£Page
–
uöt8
 
pg
 );

208 
uöt8
 
com∑˘Page
–uöt8 
§cPg
, 
uöt16
 
skùId
 );

210 
uöt16
 
födIãm
–uöt16 
id
 );

211 
uöt8
 
öôIãm
–uöt8 
Êag
, 
uöt16
 
id
, uöt16 
Àn
, *
buf
 );

212 
£tIãm
–
uöt8
 
pg
, 
uöt16
 
off£t
, 
eNvHdrEnum
 
°©
 );

213 
uöt16
 
£tChk
–
uöt8
 
pg
, uöt16 
off£t
, uöt16 
chk
 );

215 
uöt16
 
ˇlcChkB
–uöt16 
Àn
, 
uöt8
 *
buf
 );

216 
uöt16
 
ˇlcChkF
–
uöt8
 
pg
, uöt16 
off£t
, uöt16 
Àn
 );

218 
wrôeW‹d
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
 );

219 
wrôeW‹dH
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
 );

220 
wrôeW‹dM
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
, uöt16 
˙t
 );

221 
wrôeBuf
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt16 
Àn
, uöt8 *
buf
 );

222 
x„rBuf
–
uöt8
 
§cPg
, 
uöt16
 
§cOff
, uöt8 
d°Pg
, uöt16 
d°Off
, uöt16 
Àn
 );

224 
uöt8
 
wrôeIãm
–uöt8 
pg
, 
uöt16
 
id
, uöt16 
Àn
, *
buf
, uöt8 
Êag
 );

225 
uöt8
 
hŸIãm
(
uöt16
 
id
);

226 
hŸIãmUpd©e
(
uöt8
 
pg
, 
uöt16
 
off
, uöt16 
id
);

237 
uöt8
 
	$öôNV
( )

239 
oßlNvPgHdr_t
 
pgHdr
;

240 
uöt8
 
ﬁdPg
 = 
OSAL_NV_PAGE_NULL
;

241 
uöt8
 
födDups
 = 
FALSE
;

242 
uöt8
 
pg
;

244 
pgRes
 = 
OSAL_NV_PAGE_NULL
;

246  
pg
 = 
OSAL_NV_PAGE_BEG
;Ög <
OSAL_NV_PAGE_END
;Ög++ )

248 
	`HÆFœshRód
(
pg
, 
OSAL_NV_PAGE_HDR_OFFSET
, (
uöt8
 *)(&
pgHdr
), 
OSAL_NV_HDR_SIZE
);

250 i‡–
pgHdr
.
a˘ive
 =
OSAL_NV_ERASED_ID
 )

252 i‡–
pgRes
 =
OSAL_NV_PAGE_NULL
 )

254 
pgRes
 = 
pg
;

258 
	`£tPageU£
–
pg
, 
TRUE
 );

262 i‡–
pgHdr
.
x„r
 !
OSAL_NV_ERASED_ID
 )

264 
ﬁdPg
 = 
pg
;

269 i‡–
ﬁdPg
 !
OSAL_NV_PAGE_NULL
 )

274 i‡–
pgRes
 !
OSAL_NV_PAGE_NULL
 )

276 
	`îa£Page
–
pgRes
 );

277 ()
	`com∑˘Page
–
ﬁdPg
, 
OSAL_NV_ITEM_NULL
 );

284 
	`îa£Page
–
ﬁdPg
 );

285 
pgRes
 = 
ﬁdPg
;

288 i‡–
pgRes
 !
OSAL_NV_PAGE_NULL
 )

290 
	`îa£Page
–
pgRes
 );

299  
pg
 = 
OSAL_NV_PAGE_BEG
;Ög <
OSAL_NV_PAGE_END
;Ög++ )

302 i‡–
	`öôPage
–
pg
, 
OSAL_NV_ITEM_NULL
, 
födDups
 ) != OSAL_NV_ITEM_NULL )

304 
födDups
 = 
TRUE
;

305 
pg
 = (
OSAL_NV_PAGE_BEG
 - 1);

310 i‡(
födDups
)

313  
pg
 = 
OSAL_NV_PAGE_BEG
;Ög <
OSAL_NV_PAGE_END
;Ög++ )

315 ()
	`öôPage
–
pg
, 
OSAL_NV_ITEM_NULL
, 
FALSE
 );

319 i‡–
pgRes
 =
OSAL_NV_PAGE_NULL
 )

321 
uöt8
 
idx
, 
mo°Lo°
 = 0;

323  
idx
 = 0; idx < 
OSAL_NV_PAGES_USED
; idx++ )

326 i‡(
pgLo°
[
idx
] =(
OSAL_NV_PAGE_SIZE
 - 
OSAL_NV_PAGE_HDR_SIZE
))

328 
mo°Lo°
 = 
idx
;

334 i‡(
pgLo°
[
idx
] >ÖgLo°[
mo°Lo°
])

336 
mo°Lo°
 = 
idx
;

340 
pgRes
 = 
mo°Lo°
 + 
OSAL_NV_PAGE_BEG
;

341 
	`îa£Page
–
pgRes
 );

344  
TRUE
;

345 
	}
}

357 
	$£tPageU£
–
uöt8
 
pg
, uöt8 
öU£
 )

359 
oßlNvPgHdr_t
 
pgHdr
;

361 
pgHdr
.
a˘ive
 = 
OSAL_NV_ZEROED_ID
;

363 i‡–
öU£
 )

365 
pgHdr
.
öU£
 = 
OSAL_NV_ZEROED_ID
;

369 
pgHdr
.
öU£
 = 
OSAL_NV_ERASED_ID
;

372 
	`wrôeW‹d
–
pg
, 
OSAL_NV_PAGE_HDR_OFFSET
, (
uöt8
*)(&
pgHdr
) );

373 
	}
}

390 
uöt16
 
	$öôPage
–
uöt8
 
pg
, 
uöt16
 
id
, uöt8 
födDups
 )

392 
uöt16
 
off£t
 = 
OSAL_NV_PAGE_HDR_SIZE
;

393 
uöt16
 
sz
, 
lo°
 = 0;

394 
oßlNvHdr_t
 
hdr
;

398 
	`HÆFœshRód
(
pg
, 
off£t
, (
uöt8
 *)(&
hdr
), 
OSAL_NV_HDR_SIZE
);

400 i‡–
hdr
.
id
 =
OSAL_NV_ERASED_ID
 )

406 
sz
 = 
	`OSAL_NV_DATA_SIZE
–
hdr
.
Àn
 );

409 i‡(
sz
 > (
OSAL_NV_PAGE_SIZE
 - 
OSAL_NV_HDR_SIZE
 - 
off£t
))

411 
lo°
 +(
OSAL_NV_PAGE_SIZE
 - 
off£t
);

412 
off£t
 = 
OSAL_NV_PAGE_SIZE
;

416 
off£t
 +
OSAL_NV_HDR_SIZE
;

418 i‡–
hdr
.
id
 !
OSAL_NV_ZEROED_ID
 )

423 i‡–
id
 !
OSAL_NV_ITEM_NULL
 )

429 i‡–(
id
 & 0x7fffË=
hdr
.id )

431 i‡–(((
id
 & 
OSAL_NV_SOURCE_ID
Ë=0Ë&& (
hdr
.
°©
 =
OSAL_NV_ERASED_ID
)) ||

432 (((
id
 & 
OSAL_NV_SOURCE_ID
Ë!0Ë&& (
hdr
.
°©
 !
OSAL_NV_ERASED_ID
)) )

434  
off£t
;

441 i‡–
hdr
.
chk
 =
	`ˇlcChkF
–
pg
, 
off£t
, hdr.
Àn
 ) )

443 i‡–
födDups
 )

445 i‡–
hdr
.
°©
 =
OSAL_NV_ERASED_ID
 )

451 
uöt16
 
off
 = 
	`födIãm
–(
hdr
.
id
 | 
OSAL_NV_SOURCE_ID
) );

453 i‡–
off
 !
OSAL_NV_ITEM_NULL
 )

455 
	`£tIãm
–
födPg
, 
off
, 
eNvZîo
 );

460 i‡–
hdr
.
°©
 !
OSAL_NV_ERASED_ID
 )

462  
OSAL_NV_ERASED_ID
;

467 
	`£tIãm
–
pg
, 
off£t
, 
eNvZîo
 );

468 
lo°
 +(
OSAL_NV_HDR_SIZE
 + 
sz
);

474 
lo°
 +(
OSAL_NV_HDR_SIZE
 + 
sz
);

476 
off£t
 +
sz
;

478 } 
off£t
 < (
OSAL_NV_PAGE_SIZE
 - 
OSAL_NV_HDR_SIZE
));

480 
pgOff
[
pg
 - 
OSAL_NV_PAGE_BEG
] = 
off£t
;

481 
pgLo°
[
pg
 - 
OSAL_NV_PAGE_BEG
] = 
lo°
;

483  
OSAL_NV_ITEM_NULL
;

484 
	}
}

495 
	$îa£Page
–
uöt8
 
pg
 )

497 
	`HÆFœshEø£
(
pg
);

499 
pgOff
[
pg
 - 
OSAL_NV_PAGE_BEG
] = 
OSAL_NV_PAGE_HDR_SIZE
;

500 
pgLo°
[
pg
 - 
OSAL_NV_PAGE_BEG
] = 0;

501 
	}
}

530 
uöt8
 
	$com∑˘Page
–
uöt8
 
§cPg
, 
uöt16
 
skùId
 )

532 
uöt16
 
§cOff
;

533 
uöt8
 
π∫
;

536 
§cOff
 = 0; srcOf‡< 
OSAL_NV_PAGE_SIZE
; srcOff++)

538 
	`HÆFœshRód
(
pgRes
, 
§cOff
, &
π∫
, 1);

539 i‡(
π∫
 !
OSAL_NV_ERASED
)

541 
	`îa£Page
(
pgRes
);

542  
FALSE
;

546 
§cOff
 = 
OSAL_NV_PAGE_HDR_SIZE
;

547 
π∫
 = 
TRUE
;

549  
§cOff
 < (
OSAL_NV_PAGE_SIZE
 - 
OSAL_NV_HDR_SIZE
 ) )

551 
oßlNvHdr_t
 
hdr
;

552 
uöt16
 
sz
, 
d°Off
 = 
pgOff
[
pgRes
-
OSAL_NV_PAGE_BEG
];

554 
	`HÆFœshRód
(
§cPg
, 
§cOff
, (
uöt8
 *)(&
hdr
), 
OSAL_NV_HDR_SIZE
);

556 i‡–
hdr
.
id
 =
OSAL_NV_ERASED_ID
 )

562 
sz
 = 
	`OSAL_NV_DATA_SIZE
–
hdr
.
Àn
 );

564 i‡–
sz
 > (
OSAL_NV_PAGE_SIZE
 - 
OSAL_NV_HDR_SIZE
 - 
§cOff
) )

569 i‡–
sz
 > (
OSAL_NV_PAGE_SIZE
 - 
OSAL_NV_HDR_SIZE
 - 
d°Off
) )

571 
π∫
 = 
FALSE
;

575 
§cOff
 +
OSAL_NV_HDR_SIZE
;

577 i‡–(
hdr
.
id
 !
OSAL_NV_ZEROED_ID
Ë&& (hdr.id !
skùId
) )

579 i‡–
hdr
.
chk
 =
	`ˇlcChkF
–
§cPg
, 
§cOff
, hdr.
Àn
 ) )

584 i‡–
hdr
.
°©
 =
OSAL_NV_ERASED_ID
 )

586 
	`£tIãm
–
§cPg
, 
§cOff
, 
eNvX„r
 );

589 i‡–
	`wrôeIãm
–
pgRes
, 
hdr
.
id
, hdr.
Àn
, 
NULL
, 
FALSE
 ) )

591 
d°Off
 +
OSAL_NV_HDR_SIZE
;

592 
	`x„rBuf
–
§cPg
, 
§cOff
, 
pgRes
, 
d°Off
, 
sz
 );

594 i‡(
hdr
.
chk
 =
	`ˇlcChkF
(
pgRes
, 
d°Off
, hdr.
Àn
))

596 i‡–
hdr
.
chk
 !
	`£tChk
–
pgRes
, 
d°Off
, hdr.chk ) )

598 
π∫
 = 
FALSE
;

603 
	`hŸIãmUpd©e
(
pgRes
, 
d°Off
, 
hdr
.
id
);

608 
π∫
 = 
FALSE
;

614 
π∫
 = 
FALSE
;

620 
§cOff
 +
sz
;

623 i‡(
π∫
 =
FALSE
)

625 
	`îa£Page
(
pgRes
);

627 i‡(
skùId
 =
OSAL_NV_ITEM_NULL
)

629 
	`COMPACT_PAGE_CLEANUP
(
§cPg
);

633  
π∫
;

634 
	}
}

650 
uöt16
 
	$födIãm
–
uöt16
 
id
 )

652 
uöt16
 
off
;

653 
uöt8
 
pg
;

655  
pg
 = 
OSAL_NV_PAGE_BEG
;Ög <
OSAL_NV_PAGE_END
;Ög++ )

657 i‡–(
off
 = 
	`öôPage
–
pg
, 
id
, 
FALSE
 )Ë!
OSAL_NV_ITEM_NULL
 )

659 
födPg
 = 
pg
;

660  
off
;

665 i‡–(
id
 & 
OSAL_NV_SOURCE_ID
) == 0 )

667  
	`födIãm
–
id
 | 
OSAL_NV_SOURCE_ID
 );

671 
födPg
 = 
OSAL_NV_PAGE_NULL
;

672  
OSAL_NV_ITEM_NULL
;

674 
	}
}

694 
uöt8
 
	$öôIãm
–
uöt8
 
Êag
, 
uöt16
 
id
, uöt16 
Àn
, *
buf
 )

696 
uöt16
 
sz
 = 
	`OSAL_NV_ITEM_SIZE
–
Àn
 );

697 
uöt8
 
π∫
 = 
OSAL_NV_PAGE_NULL
;

698 
uöt8
 
˙t
 = 
OSAL_NV_PAGES_USED
;

699 
uöt8
 
pg
 = 
pgRes
+1;

702 i‡(
pg
 >
OSAL_NV_PAGE_BEG
+
OSAL_NV_PAGES_USED
)

704 
pg
 = 
OSAL_NV_PAGE_BEG
;

706 i‡–
pg
 !
pgRes
 )

708 
uöt8
 
idx
 = 
pg
 - 
OSAL_NV_PAGE_BEG
;

709 i‡–
sz
 <(
OSAL_NV_PAGE_SIZE
 - 
pgOff
[
idx
] + 
pgLo°
[idx]) )

714 
pg
++;

715 } --
˙t
);

717 i‡(
˙t
)

720 i‡–
sz
 > (
OSAL_NV_PAGE_SIZE
 - 
pgOff
[
pg
 - 
OSAL_NV_PAGE_BEG
]) )

722 
oßlNvPgHdr_t
 
pgHdr
;

727 
	`HÆFœshRód
(
pg
, 
OSAL_NV_PAGE_HDR_OFFSET
, (
uöt8
 *)(&
pgHdr
), 
OSAL_NV_PAGE_HDR_SIZE
);

728 i‡–
pgHdr
.
x„r
 =
OSAL_NV_ERASED_ID
 )

731 
sz
 = 
OSAL_NV_ZEROED_ID
;

732 
	`wrôeW‹dH
–
pg
, 
OSAL_NV_PG_XFER
, (
uöt8
*)(&
sz
) );

738 i‡(
	`com∑˘Page
–
pg
, 
id
 ))

740 i‡–
	`wrôeIãm
–
pgRes
, 
id
, 
Àn
, 
buf
, 
Êag
 ) )

742 
π∫
 = 
pgRes
;

745 i‡–
Êag
 =
FALSE
 )

750 *(
uöt8
 *)
buf
 = 
pg
;

757 
	`COMPACT_PAGE_CLEANUP
–
pg
 );

763 i‡–
	`wrôeIãm
–
pg
, 
id
, 
Àn
, 
buf
, 
Êag
 ) )

765 
π∫
 = 
pg
;

770  
π∫
;

771 
	}
}

785 
	$£tIãm
–
uöt8
 
pg
, 
uöt16
 
off£t
, 
eNvHdrEnum
 
°©
 )

787 
oßlNvHdr_t
 
hdr
;

789 
off£t
 -
OSAL_NV_HDR_SIZE
;

790 
	`HÆFœshRód
(
pg
, 
off£t
, (
uöt8
 *)(&
hdr
), 
OSAL_NV_HDR_SIZE
);

792 i‡–
°©
 =
eNvX„r
 )

794 
hdr
.
°©
 = 
OSAL_NV_ACTIVE
;

795 
	`wrôeW‹d
–
pg
, 
off£t
+
OSAL_NV_HDR_CHK
, (
uöt8
*)(&(
hdr
.
chk
)) );

799 
uöt16
 
sz
 = ((
hdr
.
Àn
 + (
OSAL_NV_WORD_SIZE
-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +

800 
OSAL_NV_HDR_SIZE
;

801 
hdr
.
id
 = 0;

802 
	`wrôeW‹d
–
pg
, 
off£t
, (
uöt8
 *)(&
hdr
) );

803 
pgLo°
[
pg
-
OSAL_NV_PAGE_BEG
] +
sz
;

805 
	}
}

819 
uöt16
 
	$£tChk
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt16 
chk
 )

821 
off£t
 -
OSAL_NV_WORD_SIZE
;

822 
	`wrôeW‹dH
–
pg
, 
off£t
, (
uöt8
 *)&
chk
 );

823 
	`HÆFœshRód
–
pg
, 
off£t
, (
uöt8
 *)(&
chk
), ( chk ) );

825  
chk
;

826 
	}
}

838 
uöt16
 
	$ˇlcChkB
–
uöt16
 
Àn
, 
uöt8
 *
buf
 )

840 
uöt8
 
fûl
 = 
Àn
 % 
OSAL_NV_WORD_SIZE
;

841 
uöt16
 
chk
;

843 i‡–!
buf
 )

845 
chk
 = 
Àn
 * 
OSAL_NV_ERASED
;

849 
chk
 = 0;

850  
Àn
-- )

852 
chk
 +*
buf
++;

857 i‡–
fûl
 )

859 
chk
 +(
OSAL_NV_WORD_SIZE
 - 
fûl
Ë* 
OSAL_NV_ERASED
;

862  
chk
;

863 
	}
}

876 
uöt16
 
	$ˇlcChkF
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt16 
Àn
 )

878 
uöt16
 
chk
 = 0;

880 
Àn
 = (À¿+ (
OSAL_NV_WORD_SIZE
-1)) / OSAL_NV_WORD_SIZE;

882  
Àn
-- )

884 
uöt8
 
˙t
, 
tmp
[
OSAL_NV_WORD_SIZE
];

886 
	`HÆFœshRód
(
pg
, 
off£t
, 
tmp
, 
OSAL_NV_WORD_SIZE
);

887 
off£t
 +
OSAL_NV_WORD_SIZE
;

889  
˙t
 = 0; c¡ < 
OSAL_NV_WORD_SIZE
; cnt++ )

891 
chk
 +
tmp
[
˙t
];

895  
chk
;

896 
	}
}

909 
	$wrôeW‹d
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
 )

911 
off£t
 = (off£à/ 
HAL_FLASH_WORD_SIZE
) +

912 ((
uöt16
)
pg
 * (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
));

914 
	`HÆFœshWrôe
(
off£t
, 
buf
, 1);

915 
	}
}

929 
	$wrôeW‹dM
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
, uöt16 
˙t
 )

931 
off£t
 = (off£à/ 
HAL_FLASH_WORD_SIZE
) +

932 ((
uöt16
)
pg
 * (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
));

933 
	`HÆFœshWrôe
(
off£t
, 
buf
, 
˙t
);

934 
	}
}

947 
	$wrôeW‹dH
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
 )

949 
uöt8
 
tmp
[4];

951 
tmp
[0] = 
buf
[0];

952 
tmp
[1] = 
buf
[1];

953 
tmp
[2] = 
OSAL_NV_ERASED
;

954 
tmp
[3] = 
OSAL_NV_ERASED
;

956 
	`wrôeW‹d
–
pg
, 
off£t
, 
tmp
 );

957 
	}
}

971 
	$wrôeBuf
–
uöt8
 
d°Pg
, 
uöt16
 
d°Off
, uöt16 
Àn
, uöt8 *
buf
 )

973 
uöt8
 
ªm
 = 
d°Off
 % 
OSAL_NV_WORD_SIZE
;

974 
uöt8
 
tmp
[
OSAL_NV_WORD_SIZE
];

976 i‡–
ªm
 )

978 
d°Off
 = (d°Of‡/ 
OSAL_NV_WORD_SIZE
) * OSAL_NV_WORD_SIZE;

979 
	`HÆFœshRód
(
d°Pg
, 
d°Off
, 
tmp
, 
OSAL_NV_WORD_SIZE
);

981  (
ªm
 < 
OSAL_NV_WORD_SIZE
Ë&& 
Àn
 )

983 
tmp
[
ªm
++] = *
buf
++;

984 
Àn
--;

987 
	`wrôeW‹d
–
d°Pg
, 
d°Off
, 
tmp
 );

988 
d°Off
 +
OSAL_NV_WORD_SIZE
;

991 
ªm
 = 
Àn
 % 
OSAL_NV_WORD_SIZE
;

992 
Àn
 /
OSAL_NV_WORD_SIZE
;

994 i‡–
Àn
 )

996 
	`wrôeW‹dM
–
d°Pg
, 
d°Off
, 
buf
, 
Àn
 );

997 
d°Off
 +
OSAL_NV_WORD_SIZE
 * 
Àn
;

998 
buf
 +
OSAL_NV_WORD_SIZE
 * 
Àn
;

1001 i‡–
ªm
 )

1003 
uöt8
 
idx
 = 0;

1004 
	`HÆFœshRód
(
d°Pg
, 
d°Off
, 
tmp
, 
OSAL_NV_WORD_SIZE
);

1005  
ªm
-- )

1007 
tmp
[
idx
++] = *
buf
++;

1009 
	`wrôeW‹d
–
d°Pg
, 
d°Off
, 
tmp
 );

1011 
	}
}

1020 
	$x„rBuf
–
uöt8
 
§cPg
, 
uöt16
 
§cOff
, uöt8 
d°Pg
, uöt16 
d°Off
, uöt16 
Àn
 )

1022 
uöt8
 
ªm
 = 
d°Off
 % 
OSAL_NV_WORD_SIZE
;

1023 
uöt8
 
tmp
[
OSAL_NV_WORD_SIZE
];

1025 i‡–
ªm
 )

1027 
d°Off
 -
ªm
;

1028 
	`HÆFœshRód
(
d°Pg
, 
d°Off
, 
tmp
, 
OSAL_NV_WORD_SIZE
);

1030  (
ªm
 < 
OSAL_NV_WORD_SIZE
Ë&& 
Àn
 )

1032 
	`HÆFœshRód
(
§cPg
, 
§cOff
, 
tmp
+
ªm
, 1);

1033 
§cOff
++;

1034 
ªm
++;

1035 
Àn
--;

1038 
	`wrôeW‹d
–
d°Pg
, 
d°Off
, 
tmp
 );

1039 
d°Off
 +
OSAL_NV_WORD_SIZE
;

1042 
ªm
 = 
Àn
 % 
OSAL_NV_WORD_SIZE
;

1043 
Àn
 /
OSAL_NV_WORD_SIZE
;

1045  
Àn
-- )

1047 
	`HÆFœshRód
(
§cPg
, 
§cOff
, 
tmp
, 
OSAL_NV_WORD_SIZE
);

1048 
§cOff
 +
OSAL_NV_WORD_SIZE
;

1049 
	`wrôeW‹d
–
d°Pg
, 
d°Off
, 
tmp
 );

1050 
d°Off
 +
OSAL_NV_WORD_SIZE
;

1053 i‡–
ªm
 )

1055 
uöt8
 
idx
 = 0;

1056 
	`HÆFœshRód
(
d°Pg
, 
d°Off
, 
tmp
, 
OSAL_NV_WORD_SIZE
);

1057  
ªm
-- )

1059 
	`HÆFœshRód
(
§cPg
, 
§cOff
, 
tmp
+
idx
, 1);

1060 
§cOff
++;

1061 
idx
++;

1063 
	`wrôeW‹d
–
d°Pg
, 
d°Off
, 
tmp
 );

1065 
	}
}

1080 
uöt8
 
	$wrôeIãm
–
uöt8
 
pg
, 
uöt16
 
id
, uöt16 
Àn
, *
buf
, uöt8 
Êag
 )

1082 
uöt16
 
off£t
 = 
pgOff
[
pg
-
OSAL_NV_PAGE_BEG
];

1083 
uöt8
 
π∫
 = 
FALSE
;

1084 
oßlNvHdr_t
 
hdr
;

1086 
hdr
.
id
 = id;

1087 
hdr
.
Àn
 =Üen;

1089 
	`wrôeW‹d
–
pg
, 
off£t
, (
uöt8
 *)&
hdr
 );

1090 
	`HÆFœshRód
(
pg
, 
off£t
, (
uöt8
 *)(&
hdr
), 
OSAL_NV_HDR_SIZE
);

1092 i‡–(
hdr
.
id
 =idË&& (hdr.
Àn
 ==Üen) )

1094 i‡–
Êag
 )

1096 
hdr
.
chk
 = 
	`ˇlcChkB
–
Àn
, 
buf
 );

1098 
off£t
 +
OSAL_NV_HDR_SIZE
;

1099 i‡–
buf
 !
NULL
 )

1101 
	`wrôeBuf
–
pg
, 
off£t
, 
Àn
, 
buf
 );

1104 i‡–
hdr
.
chk
 =
	`ˇlcChkF
–
pg
, 
off£t
, 
Àn
 ) )

1106 i‡–
hdr
.
chk
 =
	`£tChk
–
pg
, 
off£t
, hdr.chk ) )

1108 
	`hŸIãmUpd©e
(
pg
, 
off£t
, 
hdr
.
id
);

1109 
π∫
 = 
TRUE
;

1115 
π∫
 = 
TRUE
;

1118 
Àn
 = 
	`OSAL_NV_ITEM_SIZE
–
hdr
.len );

1122 
Àn
 = 
	`OSAL_NV_ITEM_SIZE
–
hdr
.len );

1124 i‡(
Àn
 > (
OSAL_NV_PAGE_SIZE
 - 
pgOff
[
pg
 - 
OSAL_NV_PAGE_BEG
]))

1126 
Àn
 = (
OSAL_NV_PAGE_SIZE
 - 
pgOff
[
pg
 - 
OSAL_NV_PAGE_BEG
]);

1129 
pgLo°
[
pg
 - 
OSAL_NV_PAGE_BEG
] +
Àn
;

1131 
pgOff
[
pg
 - 
OSAL_NV_PAGE_BEG
] +
Àn
;

1133  
π∫
;

1134 
	}
}

1145 
uöt8
 
	$hŸIãm
(
uöt16
 
id
)

1147 
uöt8
 
hŸIdx
;

1149 
hŸIdx
 = 0; hŸIdx < 
OSAL_NV_MAX_HOT
; hotIdx++)

1151 i‡(
hŸIds
[
hŸIdx
] =
id
)

1157  
hŸIdx
;

1158 
	}
}

1171 
	$hŸIãmUpd©e
(
uöt8
 
pg
, 
uöt16
 
off
, uöt16 
id
)

1173 
uöt8
 
hŸIdx
 = 
	`hŸIãm
(
id
);

1175 i‡(
hŸIdx
 < 
OSAL_NV_MAX_HOT
)

1178 
hŸPg
[
hŸIdx
] = 
pg
;

1179 
hŸOff
[
hŸIdx
] = 
off
;

1182 
	}
}

1193 
	$oßl_nv_öô
–*
p
 )

1195 ()
p
;

1196 ()
	`öôNV
();

1197 
	}
}

1215 
uöt8
 
	$oßl_nv_ôem_öô
–
uöt16
 
id
, uöt16 
Àn
, *
buf
 )

1217 
uöt16
 
off£t
;

1219 i‡–!
OSAL_NV_CHECK_BUS_VOLTAGE
 )

1221  
NV_OPER_FAILED
;

1223 i‡((
off£t
 = 
	`födIãm
(
id
)Ë!
OSAL_NV_ITEM_NULL
)

1226 
	`hŸIãmUpd©e
(
födPg
, 
off£t
, 
id
);

1228  
SUCCESS
;

1230 i‡–
	`öôIãm
–
TRUE
, 
id
, 
Àn
, 
buf
 ) !
OSAL_NV_PAGE_NULL
 )

1232  
NV_ITEM_UNINIT
;

1236  
NV_OPER_FAILED
;

1238 
	}
}

1249 
uöt16
 
	$oßl_nv_ôem_Àn
–
uöt16
 
id
 )

1251 
oßlNvHdr_t
 
hdr
;

1252 
uöt16
 
off£t
;

1253 
uöt8
 
hŸIdx
;

1255 i‡((
hŸIdx
 = 
	`hŸIãm
(
id
)Ë< 
OSAL_NV_MAX_HOT
)

1257 
födPg
 = 
hŸPg
[
hŸIdx
];

1258 
off£t
 = 
hŸOff
[
hŸIdx
];

1260 i‡((
off£t
 = 
	`födIãm
(
id
)Ë=
OSAL_NV_ITEM_NULL
)

1265 
	`HÆFœshRód
(
födPg
, (
off£t
 - 
OSAL_NV_HDR_SIZE
), (
uöt8
 *)(&
hdr
), OSAL_NV_HDR_SIZE);

1266  
hdr
.
Àn
;

1267 
	}
}

1283 
uöt8
 
	$oßl_nv_wrôe
–
uöt16
 
id
, uöt16 
ndx
, uöt16 
Àn
, *
buf
 )

1285 
uöt8
 
π∫
 = 
SUCCESS
;

1287 i‡–!
OSAL_NV_CHECK_BUS_VOLTAGE
 )

1289  
NV_OPER_FAILED
;

1291 i‡–
Àn
 != 0 )

1293 
oßlNvHdr_t
 
hdr
;

1294 
uöt16
 
‹igOff
, 
§cOff
;

1295 
uöt16
 
˙t
, 
chk
;

1296 
uöt8
 *
±r
, 
§cPg
;

1298 
‹igOff
 = 
§cOff
 = 
	`födIãm
–
id
 );

1299 
§cPg
 = 
födPg
;

1300 i‡–
§cOff
 =
OSAL_NV_ITEM_NULL
 )

1302  
NV_ITEM_UNINIT
;

1305 
	`HÆFœshRód
(
§cPg
, (
§cOff
 - 
OSAL_NV_HDR_SIZE
), (
uöt8
 *)(&
hdr
), OSAL_NV_HDR_SIZE);

1306 i‡–
hdr
.
Àn
 < (
ndx
 +Üen) )

1308  
NV_OPER_FAILED
;

1311 
§cOff
 +
ndx
;

1312 
±r
 = 
buf
;

1313 
˙t
 = 
Àn
;

1314 
chk
 = 0;

1315  
˙t
-- )

1317 
uöt8
 
tmp
;

1318 
	`HÆFœshRód
(
§cPg
, 
§cOff
, &
tmp
, 1);

1319 i‡–
tmp
 !*
±r
 )

1321 
chk
 = 1;

1323 
hdr
.
chk
 -
tmp
;

1324 
hdr
.
chk
 +*
±r
;

1326 
§cOff
++;

1327 
±r
++;

1330 i‡–
chk
 != 0 )

1332 
uöt8
 
comPg
 = 
OSAL_NV_PAGE_NULL
;

1333 
uöt8
 
d°Pg
 = 
	`öôIãm
–
FALSE
, 
id
, 
hdr
.
Àn
, &
comPg
 );

1335 i‡–
d°Pg
 !
OSAL_NV_PAGE_NULL
 )

1337 
uöt16
 
tmp
 = 
	`OSAL_NV_DATA_SIZE
–
hdr
.
Àn
 );

1338 
uöt16
 
d°Off
 = 
pgOff
[
d°Pg
-
OSAL_NV_PAGE_BEG
] - 
tmp
;

1339 
§cOff
 = 
‹igOff
;

1344 i‡–
hdr
.
°©
 =
OSAL_NV_ERASED_ID
 )

1346 
	`£tIãm
–
§cPg
, 
§cOff
, 
eNvX„r
 );

1349 
	`x„rBuf
–
§cPg
, 
§cOff
, 
d°Pg
, 
d°Off
, 
ndx
 );

1350 
§cOff
 +
ndx
;

1351 
d°Off
 +
ndx
;

1353 
	`wrôeBuf
–
d°Pg
, 
d°Off
, 
Àn
, 
buf
 );

1354 
§cOff
 +
Àn
;

1355 
d°Off
 +
Àn
;

1357 
	`x„rBuf
–
§cPg
, 
§cOff
, 
d°Pg
, 
d°Off
, (
hdr
.
Àn
-
ndx
-len) );

1360 
d°Off
 = 
pgOff
[
d°Pg
-
OSAL_NV_PAGE_BEG
] - 
tmp
;

1362 i‡–
hdr
.
chk
 =
	`ˇlcChkF
–
d°Pg
, 
d°Off
, hdr.
Àn
 ) )

1364 i‡–
hdr
.
chk
 !
	`£tChk
–
d°Pg
, 
d°Off
, hdr.chk ) )

1366 
π∫
 = 
NV_OPER_FAILED
;

1370 
	`hŸIãmUpd©e
(
d°Pg
, 
d°Off
, 
hdr
.
id
);

1375 
π∫
 = 
NV_OPER_FAILED
;

1380 
π∫
 = 
NV_OPER_FAILED
;

1383 i‡–
comPg
 !
OSAL_NV_PAGE_NULL
 )

1388 i‡–(
§cPg
 =
comPg
Ë&& (
π∫
 =
NV_OPER_FAILED
) )

1390 
	`îa£Page
–
pgRes
 );

1394 
	`COMPACT_PAGE_CLEANUP
–
comPg
 );

1401 i‡–(
§cPg
 !
comPg
Ë&& (
π∫
 !
NV_OPER_FAILED
) )

1403 
	`£tIãm
–
§cPg
, 
‹igOff
, 
eNvZîo
 );

1408  
π∫
;

1409 
	}
}

1426 
uöt8
 
	$oßl_nv_ªad
–
uöt16
 
id
, uöt16 
ndx
, uöt16 
Àn
, *
buf
 )

1428 
uöt16
 
off£t
;

1429 
uöt8
 
hŸIdx
;

1431 i‡((
hŸIdx
 = 
	`hŸIãm
(
id
)Ë< 
OSAL_NV_MAX_HOT
)

1433 
	`HÆFœshRód
(
hŸPg
[
hŸIdx
], 
hŸOff
[hŸIdx]+
ndx
, 
buf
, 
Àn
);

1434  
SUCCESS
;

1437 i‡((
off£t
 = 
	`födIãm
(
id
)Ë=
OSAL_NV_ITEM_NULL
)

1439  
NV_OPER_FAILED
;

1443 
	`HÆFœshRód
(
födPg
, 
off£t
+
ndx
, 
buf
, 
Àn
);

1444  
SUCCESS
;

1446 
	}
}

1462 
uöt8
 
	$oßl_nv_dñëe
–
uöt16
 
id
, uöt16 
Àn
 )

1464 
uöt16
 
Àngth
;

1465 
uöt16
 
off£t
;

1467 
off£t
 = 
	`födIãm
–
id
 );

1468 i‡–
off£t
 =
OSAL_NV_ITEM_NULL
 )

1471  
NV_ITEM_UNINIT
;

1474 
Àngth
 = 
	`oßl_nv_ôem_Àn
–
id
 );

1475 i‡–
Àngth
 !
Àn
 )

1478  
NV_BAD_ITEM_LEN
;

1482 
	`£tIãm
–
födPg
, 
off£t
, 
eNvZîo
 );

1485 
off£t
 = 
	`födIãm
–
id
 );

1486 i‡–
off£t
 !
OSAL_NV_ITEM_NULL
 )

1489  
NV_OPER_FAILED
;

1494  
SUCCESS
;

1496 
	}
}

	@Components/services/saddr/saddr.c

43 
	~"hÆ_ty≥s.h
"

44 
	~"OSAL.h
"

45 
	~"ßddr.h
"

61 
boﬁ
 
	$sAddrCmp
(c⁄° 
sAddr_t
 *
pAddr1
, c⁄° sAddr_à*
pAddr2
)

63 i‡(
pAddr1
->
addrMode
 !
pAddr2
->addrMode)

65  
FALSE
;

67 i‡(
pAddr1
->
addrMode
 =
SADDR_MODE_NONE
)

69  
FALSE
;

71 i‡(
pAddr1
->
addrMode
 =
SADDR_MODE_SHORT
)

73  (
boﬁ
Ë(
pAddr1
->
addr
.
sh‹tAddr
 =
pAddr2
->addr.shortAddr);

75 i‡(
pAddr1
->
addrMode
 =
SADDR_MODE_EXT
)

77  (
	`sAddrExtCmp
(
pAddr1
->
addr
.
extAddr
, 
pAddr2
->addr.extAddr));

81  
FALSE
;

83 
	}
}

110 
boﬁ
 
	$sAddrIdí
(c⁄° 
sAddr_t
 *
pAddr1
, c⁄° sAddr_à*
pAddr2
)

113 i‡(
pAddr1
->
addrMode
 !
pAddr2
->addrMode)

116  
FALSE
;

119 i‡(
pAddr1
->
addrMode
 =
SADDR_MODE_NONE
)

123  
TRUE
;

126 i‡(
pAddr1
->
addrMode
 =
SADDR_MODE_SHORT
)

129  (
boﬁ
Ë(
pAddr1
->
addr
.
sh‹tAddr
 =
pAddr2
->addr.shortAddr);

132 i‡(
pAddr1
->
addrMode
 =
SADDR_MODE_EXT
)

135  (
	`sAddrExtCmp
(
pAddr1
->
addr
.
extAddr
, 
pAddr2
->addr.extAddr));

139  
FALSE
;

141 
	}
}

158 
	$sAddrCpy
(
sAddr_t
 *
pDe°
, c⁄° sAddr_à*
pSrc
)

160 
pDe°
->
addrMode
 = 
pSrc
->addrMode;

162 i‡(
pDe°
->
addrMode
 =
SADDR_MODE_EXT
)

164 
	`sAddrExtCpy
(
pDe°
->
addr
.
extAddr
, 
pSrc
->addr.extAddr);

168 
pDe°
->
addr
.
sh‹tAddr
 = 
pSrc
->addr.shortAddr;

170 
	}
}

186 
boﬁ
 
	$sAddrExtCmp
(c⁄° 
uöt8
 * 
pAddr1
, c⁄° uöt8 * 
pAddr2
)

188 
uöt8
 
i
;

190 
i
 = 
SADDR_EXT_LEN
; i != 0; i--)

192 i‡(*
pAddr1
++ !*
pAddr2
++)

194  
FALSE
;

197  
TRUE
;

198 
	}
}

215 *
	$sAddrExtCpy
(
uöt8
 * 
pDe°
, c⁄° uöt8 * 
pSrc
)

217  
	`oßl_mem˝y
(
pDe°
, 
pSrc
, 
SADDR_EXT_LEN
);

218 
	}
}

	@Components/services/saddr/saddr.h

40 #i‚de‡
SADDR_H


41 
	#SADDR_H


	)

44 #ifde‡
__˝lu•lus


53 
	#SADDR_EXT_LEN
 8

	)

56 
	#SADDR_MODE_NONE
 0

	)

57 
	#SADDR_MODE_SHORT
 2

	)

58 
	#SADDR_MODE_EXT
 3

	)

65 
uöt8
 
	tsAddrExt_t
[
SADDR_EXT_LEN
];

72 
uöt16
 
sh‹tAddr
;

73 
sAddrExt_t
 
extAddr
;

74 } 
addr
;

75 
uöt8
 
addrMode
;

76 } 
	tsAddr_t
;

92 
boﬁ
 
sAddrCmp
(c⁄° 
sAddr_t
 *
pAddr1
, c⁄° sAddr_à*
pAddr2
);

119 
boﬁ
 
sAddrIdí
(c⁄° 
sAddr_t
 *
pAddr1
, c⁄° sAddr_à*
pAddr2
);

136 
sAddrCpy
(
sAddr_t
 *
pDe°
, c⁄° sAddr_à*
pSrc
);

152 
boﬁ
 
sAddrExtCmp
(c⁄° 
uöt8
 * 
pAddr1
, c⁄° uöt8 * 
pAddr2
);

169 *
sAddrExtCpy
(
uöt8
 * 
pDe°
, c⁄° uöt8 * 
pSrc
);

171 #ifde‡
__˝lu•lus


	@Components/services/sdata/sdata.h

40 #i‚de‡
SDATA_H


41 
	#SDATA_H


	)

43 #ifde‡
__˝lu•lus


54 
uöt8
 *
p
;

55 
uöt8
 
Àn
;

56 } 
	tsD©a_t
;

58 #ifde‡
__˝lu•lus


	@Components/stack/af/AF.c

44 
	~"OSAL.h
"

45 
	~"AF.h
"

46 
	~"nwk_globÆs.h
"

47 
	~"nwk_utû.h
"

48 
	~"≠s_groups.h
"

49 
	~"ZDProfûe.h
"

50 
	~"≠s_‰ag.h
"

51 
	~"πg.h
"

53 #i‡
deföed
 ( 
MT_AF_CB_FUNC
 )

54 
	~"MT_AF.h
"

57 #i‡
deföed
 ( 
INTER_PAN
 )

58 
	~"°ub_≠s.h
"

87 
	#afSíd
–
d°Addr
, 
§cEP
, 
cID
, 
Àn
, 
buf
, 
å™sID
, 
›ti⁄s
, 
ødius
 ) \

88 
	`AF_D©aReque°
–(
d°Addr
), 
	`afFödEndPoötDesc
–(
§cEP
) ), \

89 (
cID
), (
Àn
), (
buf
), (
å™sID
), (
›ti⁄s
), (
ødius
Ë)

	)

95 
ïLi°_t
 *
	gïLi°
;

101 
afBuûdMSGIncomög
–
≠s_FømeF‹m©_t
 *
aff
, 
ídPoötDesc_t
 *
ïDesc
,

102 
zAddrTy≥_t
 *
SrcAddªss
, 
uöt16
 
SrcP™Id
, 
NLDE_Sig«l_t
 *
sig
,

103 
uöt8
 
nwkSeqNum
, uöt8 
SecurôyU£
, 
uöt32
 
time°amp
 );

105 
ïLi°_t
 *
afFödEndPoötDescLi°
–
uöt8
 
EndPoöt
 );

107 
pDescCB
 
afGëDescCB
–
ídPoötDesc_t
 *
ïDesc
 );

138 
ïLi°_t
 *
	$afRegi°îExãnded
–
ídPoötDesc_t
 *
ïDesc
, 
pDescCB
 
descFn
 )

140 
ïLi°_t
 *
ï
 = 
	`oßl_mem_Æloc
((epList_t));

142 i‡(
ï
 !
NULL
)

144 
ï
->
√xtDesc
 = 
ïLi°
;

145 
ïLi°
 = 
ï
;

146 
ï
->
ïDesc
 =ÉpDesc;

147 
ï
->
p‚DescCB
 = 
descFn
;

148 
ï
->
≠sfCfg
.
‰ameDñay
 = 
APSF_DEFAULT_INTERFRAME_DELAY
;

149 
ï
->
≠sfCfg
.
wödowSize
 = 
APSF_DEFAULT_WINDOW_SIZE
;

150 
ï
->
Êags
 = 
eEP_AŒowM©ch
;

153  
ï
;

154 
	}
}

169 
afSètus_t
 
	$afRegi°î
–
ídPoötDesc_t
 *
ïDesc
 )

171 i‡(
	`afFödEndPoötDescLi°
(
ïDesc
->
ídPoöt
))

173  
afSètus_INVALID_PARAMETER
;

176  ((
NULL
 =
	`afRegi°îExãnded
(
ïDesc
, NULL)Ë? 
afSètus_MEM_FAIL
 : 
afSètus_SUCCESS
);

177 
	}
}

190 
afSètus_t
 
	$afDñëe
–
uöt8
 
EndPoöt
 )

192 
ïLi°_t
 *
ïCuºít
;

193 
ïLi°_t
 *
ïPªvious
;

195 i‡(
ïLi°
 !
NULL
)

197 
ïPªvious
 = 
ïCuºít
 = 
ïLi°
;

200 i‡(
ïCuºít
->
ïDesc
->
ídPoöt
 =
EndPoöt
)

202 
ïLi°
 = 
ïCuºít
->
√xtDesc
;

203 
	`oßl_mem_‰ì
(
ïCuºít
);

205  (
afSètus_SUCCESS
);

210 
ïCuºít
 = 
ïPªvious
->
√xtDesc
;ÉpCuºíà!
NULL
;ÉpPrevious =ÉpCurrent)

212 i‡(
ïCuºít
->
ïDesc
->
ídPoöt
 =
EndPoöt
)

214 
ïPªvious
->
√xtDesc
 = 
ïCuºít
->nextDesc;

215 
	`oßl_mem_‰ì
(
ïCuºít
);

218  (
afSètus_SUCCESS
);

224  (
afSètus_INVALID_PARAMETER
);

229  (
afSètus_FAILED
);

231 
	}
}

245 
	$afD©aC⁄fúm
–
uöt8
 
ídPoöt
, uöt8 
å™sID
, 
ZSètus_t
 
°©us
 )

247 
ídPoötDesc_t
 *
ïDesc
;

248 
afD©aC⁄fúm_t
 *
msgPå
;

251 
ïDesc
 = 
	`afFödEndPoötDesc
–
ídPoöt
 );

252 i‡–
ïDesc
 =
NULL
 )

256 
msgPå
 = (
afD©aC⁄fúm_t
 *)
	`oßl_msg_Æloˇã
( (afDataConfirm_t) );

257 i‡–
msgPå
 )

260 
msgPå
->
hdr
.
evít
 = 
AF_DATA_CONFIRM_CMD
;

261 
msgPå
->
hdr
.
°©us
 = status;

262 
msgPå
->
ídpoöt
 = 
ídPoöt
;

263 
msgPå
->
å™sID
 =ÅransID;

265 #i‡
	`deföed
 ( 
MT_AF_CB_FUNC
 )

267 i‡–
	`AFCB_CHECK
(
CB_ID_AF_DATA_CNF
,*(
ïDesc
->
èsk_id
)) )

270 
	`MT_AfD©aC⁄fúm
 ((*)
msgPå
);

272 
	`oßl_msg_dóŒoˇã
–(*)
msgPå
 );

278 
	`oßl_msg_£nd
–*(
ïDesc
->
èsk_id
), (
uöt8
 *)
msgPå
 );

281 
	}
}

298 
	$afIncomögD©a
–
≠s_FømeF‹m©_t
 *
aff
, 
zAddrTy≥_t
 *
SrcAddªss
, 
uöt16
 
SrcP™Id
,

299 
NLDE_Sig«l_t
 *
sig
, 
uöt8
 
nwkSeqNum
, uöt8 
SecurôyU£
, 
uöt32
 
time°amp
 )

301 
ídPoötDesc_t
 *
ïDesc
 = 
NULL
;

302 
ïLi°_t
 *
pLi°
 = 
ïLi°
;

303 #i‡!
	`deföed
 ( 
APS_NO_GROUPS
 )

304 
uöt8
 
gΩEp
 = 
APS_GROUPS_EP_NOT_FOUND
;

307 i‡–((
aff
->
FrmCål
 & 
APS_DELIVERYMODE_MASK
Ë=
APS_FC_DM_GROUP
) )

309 #i‡!
	`deföed
 ( 
APS_NO_GROUPS
 )

311 
gΩEp
 = 
	`≠s_FödGroupF‹Endpoöt
–
aff
->
GroupID
, 
APS_GROUPS_FIND_FIRST
 );

312 i‡–
gΩEp
 =
APS_GROUPS_EP_NOT_FOUND
 )

315 
ïDesc
 = 
	`afFödEndPoötDesc
–
gΩEp
 );

316 i‡–
ïDesc
 =
NULL
 )

319 
pLi°
 = 
	`afFödEndPoötDescLi°
–
ïDesc
->
ídPoöt
 );

324 i‡–
aff
->
D°EndPoöt
 =
AF_BROADCAST_ENDPOINT
 )

327 i‡–
pLi°
 !
NULL
 )

329 
ïDesc
 = 
pLi°
->epDesc;

332 i‡–(
ïDesc
 = 
	`afFödEndPoötDesc
–
aff
->
D°EndPoöt
 )) )

334 
pLi°
 = 
	`afFödEndPoötDescLi°
–
ïDesc
->
ídPoöt
 );

337  
ïDesc
 )

339 
uöt16
 
ïProfûeID
 = 0xFFFF;

341 i‡–
pLi°
->
p‚DescCB
 )

343 
uöt16
 *
pID
 = (uöt16 *)(
pLi°
->
	`p‚DescCB
(

344 
AF_DESCRIPTOR_PROFILE_ID
, 
ïDesc
->
ídPoöt
 ));

345 i‡–
pID
 )

347 
ïProfûeID
 = *
pID
;

348 
	`oßl_mem_‰ì
–
pID
 );

351 i‡–
ïDesc
->
sim∂eDesc
 )

353 
ïProfûeID
 = 
ïDesc
->
sim∂eDesc
->
AµProfId
;

356 i‡–(
aff
->
ProfûeID
 =
ïProfûeID
) ||

357 ((
ïDesc
->
ídPoöt
 =
ZDO_EP
Ë&& (
aff
->
ProfûeID
 =
ZDO_PROFILE_ID
)) )

361 
uöt8
 
ídpoöt
 = 
aff
->
D°EndPoöt
;

364 
aff
->
D°EndPoöt
 = 
ïDesc
->
ídPoöt
;

366 
	`afBuûdMSGIncomög
–
aff
, 
ïDesc
, 
SrcAddªss
, 
SrcP™Id
, 
sig
,

367 
nwkSeqNum
, 
SecurôyU£
, 
time°amp
 );

370 
aff
->
D°EndPoöt
 = 
ídpoöt
;

374 i‡–((
aff
->
FrmCål
 & 
APS_DELIVERYMODE_MASK
Ë=
APS_FC_DM_GROUP
) )

376 #i‡!
	`deföed
 ( 
APS_NO_GROUPS
 )

378 
gΩEp
 = 
	`≠s_FödGroupF‹Endpoöt
–
aff
->
GroupID
, grpEp );

379 i‡–
gΩEp
 =
APS_GROUPS_EP_NOT_FOUND
 )

382 
ïDesc
 = 
	`afFödEndPoötDesc
–
gΩEp
 );

383 i‡–
ïDesc
 =
NULL
 )

386 
pLi°
 = 
	`afFödEndPoötDescLi°
–
ïDesc
->
ídPoöt
 );

391 i‡–
aff
->
D°EndPoöt
 =
AF_BROADCAST_ENDPOINT
 )

393 
pLi°
 =ÖLi°->
√xtDesc
;

394 i‡–
pLi°
 )

395 
ïDesc
 = 
pLi°
->epDesc;

397 
ïDesc
 = 
NULL
;

400 
ïDesc
 = 
NULL
;

402 
	}
}

413 
	$afBuûdMSGIncomög
–
≠s_FømeF‹m©_t
 *
aff
, 
ídPoötDesc_t
 *
ïDesc
,

414 
zAddrTy≥_t
 *
SrcAddªss
, 
uöt16
 
SrcP™Id
, 
NLDE_Sig«l_t
 *
sig
,

415 
uöt8
 
nwkSeqNum
, uöt8 
SecurôyU£
, 
uöt32
 
time°amp
 )

417 
afIncomögMSGPackë_t
 *
MSGpkt
;

418 c⁄° 
uöt8
 
Àn
 = –
afIncomögMSGPackë_t
 ) + 
aff
->
asduLígth
;

419 
uöt8
 *
asdu
 = 
aff
->asdu;

420 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_Æloˇã
–
Àn
 );

422 i‡–
MSGpkt
 =
NULL
 )

427 
MSGpkt
->
hdr
.
evít
 = 
AF_INCOMING_MSG_CMD
;

428 
MSGpkt
->
groupId
 = 
aff
->
GroupID
;

429 
MSGpkt
->
˛u°îId
 = 
aff
->
Clu°îID
;

430 
	`afC›yAddªss
–&
MSGpkt
->
§cAddr
, 
SrcAddªss
 );

431 
MSGpkt
->
§cAddr
.
ídPoöt
 = 
aff
->
SrcEndPoöt
;

432 
MSGpkt
->
ídPoöt
 = 
ïDesc
->endPoint;

433 
MSGpkt
->
wasBrﬂdˇ°
 = 
aff
->wasBroadcast;

434 
MSGpkt
->
LökQuÆôy
 = 
sig
->LinkQuality;

435 
MSGpkt
->
c‹ªœti⁄
 = 
sig
->correlation;

436 
MSGpkt
->
rssi
 = 
sig
->rssi;

437 
MSGpkt
->
SecurôyU£
 = SecurityUse;

438 
MSGpkt
->
time°amp
 =Åimestamp;

439 
MSGpkt
->
nwkSeqNum
 =ÇwkSeqNum;

440 
MSGpkt
->
macDe°Addr
 = 
aff
->macDestAddr;

441 
MSGpkt
->
§cAddr
.
∑nId
 = 
SrcP™Id
;

442 
MSGpkt
->
cmd
.
TønsSeqNumbî
 = 0;

443 
MSGpkt
->
cmd
.
D©aLígth
 = 
aff
->
asduLígth
;

445 i‡–
MSGpkt
->
cmd
.
D©aLígth
 )

447 
MSGpkt
->
cmd
.
D©a
 = (
uöt8
 *)(MSGpkt + 1);

448 
	`oßl_mem˝y
–
MSGpkt
->
cmd
.
D©a
, 
asdu
, MSGpkt->cmd.
D©aLígth
 );

452 
MSGpkt
->
cmd
.
D©a
 = 
NULL
;

455 #i‡
	`deföed
 ( 
MT_AF_CB_FUNC
 )

457 i‡(
	`AFCB_CHECK
(
CB_ID_AF_DATA_IND
, *(
ïDesc
->
èsk_id
)))

459 
	`MT_AfIncomögMsg
–(*)
MSGpkt
 );

461 
	`oßl_msg_dóŒoˇã
–(*)
MSGpkt
 );

467 
	`oßl_msg_£nd
–*(
ïDesc
->
èsk_id
), (
uöt8
 *)
MSGpkt
 );

469 
	}
}

495 
uöt8
 
	gAF_D©aReque°DiscovîRouã
 = 
TRUE
;

496 
afSètus_t
 
	$AF_D©aReque°
–
afAddrTy≥_t
 *
d°Addr
, 
ídPoötDesc_t
 *
§cEP
,

497 
uöt16
 
cID
, uöt16 
Àn
, 
uöt8
 *
buf
, uöt8 *
å™sID
,

498 
uöt8
 
›ti⁄s
, uöt8 
ødius
 )

500 
pDescCB
 
p‚DescCB
;

501 
ZSètus_t
 
°©
;

502 
APSDE_D©aReq_t
 
ªq
;

503 
afD©aReqMTU_t
 
mtu
;

506 i‡–
§cEP
 =
NULL
 )

508  
afSètus_INVALID_PARAMETER
;

511 #i‡!
	`deföed
–
REFLECTOR
 )

512 i‡–
d°Addr
->
addrMode
 =
afAddrNŸPª£¡
 )

514  
afSètus_INVALID_PARAMETER
;

519 i‡–
›ti⁄s
 & 
AF_LIMIT_CONCENTRATOR
 )

521 i‡–
d°Addr
->
addrMode
 !
afAddr16Bô
 )

523  ( 
afSètus_INVALID_PARAMETER
 );

527 i‡–(
d°Addr
->
addr
.
sh‹tAddr
 !
	`NLME_GëSh‹tAddr
())

528 && (
	`RTG_CheckRtSètus
–
d°Addr
->
addr
.
sh‹tAddr
, 
RT_ACTIVE
, (
MTO_ROUTE
 | 
NO_ROUTE_CACHE
ËË!
RTG_SUCCESS
) )

531  ( 
afSètus_NO_ROUTE
 );

536 i‡––
d°Addr
->
addrMode
 =
afAddr16Bô
 ) ||

537 –
d°Addr
->
addrMode
 =
afAddrBrﬂdˇ°
 ) )

540 if–
ADDR_NOT_BCAST
 !
	`NLME_IsAddªssBrﬂdˇ°
–
d°Addr
->
addr
.
sh‹tAddr
 ) )

543 
d°Addr
->
addrMode
 = 
afAddrBrﬂdˇ°
;

548 i‡–
d°Addr
->
addrMode
 =
afAddrBrﬂdˇ°
 )

550  
afSètus_INVALID_PARAMETER
;

554 i‡–
d°Addr
->
addrMode
 !
afAddr64Bô
 &&

555 
d°Addr
->
addrMode
 !
afAddrGroup
 &&

556 
d°Addr
->
addrMode
 !
afAddrNŸPª£¡
 )

558  
afSètus_INVALID_PARAMETER
;

562 
ªq
.
d°Addr
.
addrMode
 = dstAddr->addrMode;

563 i‡–
d°Addr
->
addrMode
 =
afAddr64Bô
 )

564 
	`oßl_˝yExtAddr
–
ªq
.
d°Addr
.
addr
.
extAddr
, dstAddr->addr.extAddr );

566 
ªq
.
d°Addr
.
addr
.
sh‹tAddr
 = dstAddr->addr.shortAddr;

568 
ªq
.
¥ofûeID
 = 
ZDO_PROFILE_ID
;

570 i‡–(
p‚DescCB
 = 
	`afGëDescCB
–
§cEP
 )) )

572 
uöt16
 *
pID
 = (uöt16 *)(
	`p‚DescCB
(

573 
AF_DESCRIPTOR_PROFILE_ID
, 
§cEP
->
ídPoöt
 ));

574 i‡–
pID
 )

576 
ªq
.
¥ofûeID
 = *
pID
;

577 
	`oßl_mem_‰ì
–
pID
 );

580 i‡–
§cEP
->
sim∂eDesc
 )

582 
ªq
.
¥ofûeID
 = 
§cEP
->
sim∂eDesc
->
AµProfId
;

585 
ªq
.
txO±i⁄s
 = 0;

587 i‡––
›ti⁄s
 & 
AF_ACK_REQUEST
 ) &&

588 –
ªq
.
d°Addr
.
addrMode
 !
AddrBrﬂdˇ°
 ) &&

589 –
ªq
.
d°Addr
.
addrMode
 !
AddrGroup
 ) )

591 
ªq
.
txO±i⁄s
 |
APS_TX_OPTIONS_ACK
;

594 i‡–
›ti⁄s
 & 
AF_SKIP_ROUTING
 )

596 
ªq
.
txO±i⁄s
 |
APS_TX_OPTIONS_SKIP_ROUTING
;

599 i‡–
›ti⁄s
 & 
AF_EN_SECURITY
 )

601 
ªq
.
txO±i⁄s
 |
APS_TX_OPTIONS_SECURITY_ENABLE
;

602 
mtu
.
≠s
.
£cuª
 = 
TRUE
;

606 
mtu
.
≠s
.
£cuª
 = 
FALSE
;

609 i‡–
›ti⁄s
 & 
AF_PREPROCESS
 )

611 
ªq
.
txO±i⁄s
 |
APS_TX_OPTIONS_PREPROCESS
;

614 
mtu
.
kvp
 = 
FALSE
;

616 
ªq
.
å™sID
 = *transID;

617 
ªq
.
§cEP
 = srcEP->
ídPoöt
;

618 
ªq
.
d°EP
 = 
d°Addr
->
ídPoöt
;

619 
ªq
.
˛u°îID
 = 
cID
;

620 
ªq
.
asduLí
 = 
Àn
;

621 
ªq
.
asdu
 = 
buf
;

622 
ªq
.
discovîRouã
 = 
AF_D©aReque°DiscovîRouã
;

623 
ªq
.
ødiusCou¡î
 = 
ødius
;

624 #i‡
	`deföed
 ( 
INTER_PAN
 )

625 
ªq
.
d°P™Id
 = 
d°Addr
->
∑nId
;

627 i‡–
	`StubAPS_I¡îP™
–
d°Addr
->
∑nId
, d°Addr->
ídPoöt
 ) )

629 i‡–
Àn
 > 
	`INTERP_D©aReqMTU
() )

631 
°©
 = 
afSètus_INVALID_PARAMETER
;

635 
°©
 = 
	`INTERP_D©aReq
–&
ªq
 );

641 i‡(
Àn
 > 
	`afD©aReqMTU
–&
mtu
 ) )

643 i‡(
≠sfSídFøgmíãd
)

645 
°©
 = (*
≠sfSídFøgmíãd
)–&
ªq
 );

649 
°©
 = 
afSètus_INVALID_PARAMETER
;

654 
°©
 = 
	`APSDE_D©aReq
–&
ªq
 );

667 i‡–(
ªq
.
d°Addr
.
addrMode
 =
Addr16Bô
) &&

668 (
ªq
.
d°Addr
.
addr
.
sh‹tAddr
 =
	`NLME_GëSh‹tAddr
()) )

670 
	`afD©aC⁄fúm
–
§cEP
->
ídPoöt
, *
å™sID
, 
°©
 );

673 i‡–
°©
 =
afSètus_SUCCESS
 )

675 (*
å™sID
)++;

678  (
afSètus_t
)
°©
;

679 
	}
}

681 #i‡
deföed
 ( 
ZIGBEE_SOURCE_ROUTING
 )

709 
afSètus_t
 
	$AF_D©aReque°SrcRtg
–
afAddrTy≥_t
 *
d°Addr
, 
ídPoötDesc_t
 *
§cEP
,

710 
uöt16
 
cID
, uöt16 
Àn
, 
uöt8
 *
buf
, uöt8 *
å™sID
,

711 
uöt8
 
›ti⁄s
, uöt8 
ødius
, uöt8 
ªœyC¡
, 
uöt16
* 
pRñayLi°
 )

713 
uöt8
 
°©us
;

716 
°©us
 = 
	`RTG_AddSrcRtgE¡ry_Gu¨™ãed
–
d°Addr
->
addr
.
sh‹tAddr
, 
ªœyC¡
,

717 
pRñayLi°
 );

719 if–
°©us
 =
RTG_SUCCESS
)

722 
°©us
 = 
	`AF_D©aReque°
–
d°Addr
, 
§cEP
, 
cID
, 
Àn
, 
buf
, 
å™sID
, 
›ti⁄s
, 
ødius
 );

724 if–
°©us
 =
RTG_INVALID_PATH
 )

727 
°©us
 = 
afSètus_INVALID_PARAMETER
;

732 
°©us
 = 
afSètus_MEM_FAIL
;

734  
°©us
;

735 
	}
}

749 
ïLi°_t
 *
	$afFödEndPoötDescLi°
–
uöt8
 
EndPoöt
 )

751 
ïLi°_t
 *
ïSórch
;

753 
ïSórch
 = 
ïLi°
;ÉpSórch !
NULL
;ÉpSórch =ÉpSórch->
√xtDesc
)

755 i‡(
ïSórch
->
ïDesc
->
ídPoöt
 =
EndPoöt
)

761  
ïSórch
;

762 
	}
}

774 
ídPoötDesc_t
 *
	$afFödEndPoötDesc
–
uöt8
 
EndPoöt
 )

776 
ïLi°_t
 *
ïSórch
;

779 
ïSórch
 = 
	`afFödEndPoötDescLi°
–
EndPoöt
 );

781 i‡–
ïSórch
 )

782  ( 
ïSórch
->
ïDesc
 );

784  ( (
ídPoötDesc_t
 *)
NULL
 );

785 
	}
}

796 
uöt8
 
	$afFödSim∂eDesc
–
Sim∂eDes¸ùti⁄F‹m©_t
 **
µDesc
, 
uöt8
 
EP
 )

798 
ïLi°_t
 *
ïIãm
 = 
	`afFödEndPoötDescLi°
–
EP
 );

799 
uöt8
 
π∫
 = 
FALSE
;

801 i‡–
ïIãm
 )

803 i‡–
ïIãm
->
p‚DescCB
 )

805 *
µDesc
 = 
ïIãm
->
	`p‚DescCB
–
AF_DESCRIPTOR_SIMPLE
, 
EP
 );

806 
π∫
 = 
TRUE
;

810 *
µDesc
 = 
ïIãm
->
ïDesc
->
sim∂eDesc
;

815 *
µDesc
 = 
NULL
;

818  
π∫
;

819 
	}
}

830 
pDescCB
 
	$afGëDescCB
–
ídPoötDesc_t
 *
ïDesc
 )

832 
ïLi°_t
 *
ïSórch
;

835 
ïSórch
 = 
ïLi°
;

838  
ïSórch
 )

841 i‡–
ïSórch
->
ïDesc
 ==ÉpDesc )

843  ( 
ïSórch
->
p‚DescCB
 );

846 
ïSórch
 =ÉpSórch->
√xtDesc
;

849  ( (
pDescCB
)
NULL
 );

850 
	}
}

861 
uöt8
 
	$afD©aReqMTU
–
afD©aReqMTU_t
* 
fõlds
 )

863 
uöt8
 
Àn
;

864 
uöt8
 
hdr
;

866 i‡–
fõlds
->
kvp
 =
TRUE
 )

868 
hdr
 = 
AF_HDR_KVP_MAX_LEN
;

872 
hdr
 = 
AF_HDR_V1_1_MAX_LEN
;

875 
Àn
 = (
uöt8
)(
	`APSDE_D©aReqMTU
(&
fõlds
->
≠s
Ë- 
hdr
);

877  
Àn
;

878 
	}
}

890 
uöt8
 
	$afGëM©ch
–
uöt8
 
ï
 )

892 
ïLi°_t
 *
ïSórch
;

895 
ïSórch
 = 
	`afFödEndPoötDescLi°
–
ï
 );

897 i‡–
ïSórch
 )

899 i‡–
ïSórch
->
Êags
 & 
eEP_AŒowM©ch
 )

900  ( 
TRUE
 );

902  ( 
FALSE
 );

905  ( 
FALSE
 );

906 
	}
}

918 
uöt8
 
	$afSëM©ch
–
uöt8
 
ï
, uöt8 
a˘i⁄
 )

920 
ïLi°_t
 *
ïSórch
;

923 
ïSórch
 = 
	`afFödEndPoötDescLi°
–
ï
 );

925 i‡–
ïSórch
 )

927 i‡–
a˘i⁄
 )

929 
ïSórch
->
Êags
 |
eEP_AŒowM©ch
;

933 
ïSórch
->
Êags
 &(
eEP_AŒowM©ch
 ^ 0xFFFF);

935  ( 
TRUE
 );

938  ( 
FALSE
 );

939 
	}
}

950 
uöt8
 
	$afNumEndPoöts
( )

952 
ïLi°_t
 *
ïSórch
;

953 
uöt8
 
ídpoöts
;

956 
ïSórch
 = 
ïLi°
;

957 
ídpoöts
 = 0;

959  
ïSórch
 )

961 
ídpoöts
++;

962 
ïSórch
 =ÉpSórch->
√xtDesc
;

965  ( 
ídpoöts
 );

966 
	}
}

978 
	$afEndPoöts
–
uöt8
 *
ïBuf
, uöt8 
skùZDO
 )

980 
ïLi°_t
 *
ïSórch
;

981 
uöt8
 
ídPoöt
;

984 
ïSórch
 = 
ïLi°
;

986  
ïSórch
 )

988 
ídPoöt
 = 
ïSórch
->
ïDesc
->endPoint;

990 i‡–!
skùZDO
 || 
ídPoöt
 != 0 )

991 *
ïBuf
++ = 
ídPoöt
;

993 
ïSórch
 =ÉpSórch->
√xtDesc
;

995 
	}
}

1007 
	$afC›yAddªss
–
afAddrTy≥_t
 *
afAddr
, 
zAddrTy≥_t
 *
zAddr
 )

1009 
afAddr
->
addrMode
 = (
afAddrMode_t
)
zAddr
->addrMode;

1010 i‡–
zAddr
->
addrMode
 =
Addr64Bô
 )

1012 ()
	`oßl_˝yExtAddr
–
afAddr
->
addr
.
extAddr
, 
zAddr
->addr.extAddr );

1016 
afAddr
->
addr
.
sh‹tAddr
 = 
zAddr
->addr.shortAddr;

1020 
afAddr
->
∑nId
 = 0;

1021 
	}
}

1039 
	$afAPSF_C⁄figGë
(
uöt8
 
ídPoöt
, 
afAPSF_C⁄fig_t
 *
pCfg
)

1041 
ïLi°_t
 *
pLi°
 = 
	`afFödEndPoötDescLi°
(
ídPoöt
);

1043 i‡(
pLi°
 =
NULL
)

1045 
pCfg
->
‰ameDñay
 = 
APSF_DEFAULT_INTERFRAME_DELAY
;

1046 
pCfg
->
wödowSize
 = 
APSF_DEFAULT_WINDOW_SIZE
;

1050 ()
	`oßl_mem˝y
(
pCfg
, &
pLi°
->
≠sfCfg
, (
afAPSF_C⁄fig_t
));

1052 
	}
}

1072 
afSètus_t
 
	$afAPSF_C⁄figSë
(
uöt8
 
ídPoöt
, 
afAPSF_C⁄fig_t
 *
pCfg
)

1074 
ïLi°_t
 *
pLi°
 = 
	`afFödEndPoötDescLi°
(
ídPoöt
);

1076 i‡(
pLi°
 =
NULL
)

1078  
afSètus_INVALID_PARAMETER
;

1081 ()
	`oßl_mem˝y
(&
pLi°
->
≠sfCfg
, 
pCfg
, (
afAPSF_C⁄fig_t
));

1082  
afSètus_SUCCESS
;

1083 
	}
}

	@Components/stack/af/AF.h

39 #i‚de‡
AF_H


40 
	#AF_H


	)

42 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"nwk.h
"

53 
	~"APSMEDE.h
"

59 
	#AF_BROADCAST_ENDPOINT
 0xFF

	)

61 
	#AF_PREPROCESS
 0x04

62 
	#AF_LIMIT_CONCENTRATOR
 0x08

	)

63 
	#AF_ACK_REQUEST
 0x10

	)

64 
	#AF_DISCV_ROUTE
 0x20

65 
	#AF_EN_SECURITY
 0x40

	)

66 
	#AF_SKIP_ROUTING
 0x80

	)

69 
	#AF_TX_OPTIONS_NONE
 0

	)

70 
	#AF_MSG_ACK_REQUEST
 
AF_ACK_REQUEST


	)

73 
	#AF_DEFAULT_RADIUS
 
DEF_NWK_RADIUS


	)

78 
	#AF_MAX_USER_DESCRIPTOR_LEN
 16

	)

79 
	#AF_USER_DESCRIPTOR_FILL
 0x20

	)

82 
uöt8
 
Àn
;

83 
uöt8
 
desc
[
AF_MAX_USER_DESCRIPTOR_LEN
];

84 } 
	tU£rDes¸ùt‹F‹m©_t
;

87 
	#NODETYPE_COORDINATOR
 0x00

	)

88 
	#NODETYPE_ROUTER
 0x01

	)

89 
	#NODETYPE_DEVICE
 0x02

	)

92 
	#NODEFREQ_800
 0x01

93 
	#NODEFREQ_900
 0x04

94 
	#NODEFREQ_2400
 0x08

95 

	)

104 
uöt8
 
LogiˇlTy≥
:3;

105 
uöt8
 
Com∂exDescAvaû
:1;

106 
uöt8
 
U£rDescAvaû
:1;

107 
uöt8
 
Re£rved
:3;

108 
uöt8
 
APSFœgs
:3;

109 
uöt8
 
FªquícyB™d
:5;

110 
uöt8
 
C≠abûôyFœgs
;

111 
uöt8
 
M™uÁ˘uªrCode
[2];

112 
uöt8
 
MaxBuf„rSize
;

113 
uöt8
 
MaxInTøns„rSize
[2];

114 
uöt16
 
SîvîMask
;

115 
uöt8
 
MaxOutTøns„rSize
[2];

116 
uöt8
 
Des¸ùt‹C≠abûôy
;

117 } 
	tNodeDes¸ùt‹F‹m©_t
;

120 
	#PRIM_TRUST_CENTER
 0x01

	)

121 
	#BKUP_TRUST_CENTER
 0x02

	)

122 
	#PRIM_BIND_TABLE
 0x04

	)

123 
	#BKUP_BIND_TABLE
 0x08

	)

124 
	#PRIM_DISC_TABLE
 0x10

	)

125 
	#BKUP_DISC_TABLE
 0x20

	)

126 
	#NETWORK_MANAGER
 0x40

	)

134 
	#NODECURPWR_RCVR_ALWAYS_ON
 0x00

	)

137 
	#NODECURPWR_RCVR_AUTO
 0x01

	)

139 
	#NODECURPWR_RCVR_STIM
 0x02

	)

143 
	#NODEAVAILPWR_MAINS
 0x01

144 
	#NODEAVAILPWR_RECHARGE
 0x02

145 
	#NODEAVAILPWR_DISPOSE
 0x04

146 

	)

148 
	#NODEPOWER_LEVEL_CRITICAL
 0x00

149 
	#NODEPOWER_LEVEL_33
 0x04

150 
	#NODEPOWER_LEVEL_66
 0x08

151 
	#NODEPOWER_LEVEL_100
 0x0C

152 

	)

156 
PowîMode
:4;

157 
AvaûabÀPowîSour˚s
:4;

158 
CuºítPowîSour˚
:4;

159 
CuºítPowîSour˚Levñ
:4;

160 } 
	tNodePowîDes¸ùt‹F‹m©_t
;

167 
	#APPDEVVER_1
 0x01

	)

170 
	#APPFLAG_NONE
 0x00

171 

	)

173 
	#AF_APPFLAG_NONE
 0x00

	)

174 
	#AF_APPFLAG_COMPLEXDESC
 0x01

175 
	#AF_APPFLAG_USERDESC
 0x02

176 

	)

177 
uöt16
 
	tcId_t
;

181 
uöt8
 
EndPoöt
;

182 
uöt16
 
AµProfId
;

183 
uöt16
 
AµDevi˚Id
;

184 
uöt8
 
AµDevVî
:4;

185 
uöt8
 
Re£rved
:4;

186 
uöt8
 
AµNumInClu°îs
;

187 
cId_t
 *
pAµInClu°îLi°
;

188 
uöt8
 
AµNumOutClu°îs
;

189 
cId_t
 *
pAµOutClu°îLi°
;

190 } 
	tSim∂eDes¸ùti⁄F‹m©_t
;

197 
	#FRAMETYPE_KVP
 0x01

198 
	#FRAMETYPE_MSG
 0x02

199 

	)

200 
	#ERRORCODE_SUCCESS
 0x00

	)

202 
	#AF_HDR_KVP_MAX_LEN
 0x08

203 
	#AF_HDR_V1_0_MAX_LEN
 0x03

204 
	#AF_HDR_V1_1_MAX_LEN
 0x00

205 

	)

209 
uöt8
 
TønsSeqNumbî
;

210 
uöt16
 
D©aLígth
;

211 
uöt8
 *
D©a
;

212 } 
	tafMSGComm™dF‹m©_t
;

216 
noL©ícyReqs
,

217 
Á°Bóc⁄s
,

218 
¶owBóc⁄s


219 } 
	tafNëw‹kL©ícyReq_t
;

227 
afAddrNŸPª£¡
 = 
AddrNŸPª£¡
,

228 
afAddr16Bô
 = 
Addr16Bô
,

229 
afAddr64Bô
 = 
Addr64Bô
,

230 
afAddrGroup
 = 
AddrGroup
,

231 
afAddrBrﬂdˇ°
 = 
AddrBrﬂdˇ°


232 } 
	tafAddrMode_t
;

238 
uöt16
 
sh‹tAddr
;

239 
ZL⁄gAddr_t
 
extAddr
;

240 } 
addr
;

241 
afAddrMode_t
 
addrMode
;

242 
uöt8
 
ídPoöt
;

243 
uöt16
 
∑nId
;

244 } 
	tafAddrTy≥_t
;

249 
oßl_evít_hdr_t
 
hdr
;

250 
uöt16
 
groupId
;

251 
uöt16
 
˛u°îId
;

252 
afAddrTy≥_t
 
§cAddr
;

254 
uöt16
 
macDe°Addr
;

255 
uöt8
 
ídPoöt
;

256 
uöt8
 
wasBrﬂdˇ°
;

257 
uöt8
 
LökQuÆôy
;

258 
uöt8
 
c‹ªœti⁄
;

259 
öt8
 
rssi
;

260 
uöt8
 
SecurôyU£
;

261 
uöt32
 
time°amp
;

262 
uöt8
 
nwkSeqNum
;

263 
afMSGComm™dF‹m©_t
 
cmd
;

264 } 
	tafIncomögMSGPackë_t
;

268 
oßl_evít_hdr_t
 
hdr
;

269 
uöt8
 
ídpoöt
;

270 
uöt8
 
å™sID
;

271 } 
	tafD©aC⁄fúm_t
;

279 
uöt8
 
ídPoöt
;

280 
uöt8
 *
èsk_id
;

281 
Sim∂eDes¸ùti⁄F‹m©_t
 *
sim∂eDesc
;

282 
afNëw‹kL©ícyReq_t
 
œãncyReq
;

283 } 
	tídPoötDesc_t
;

289 *(*
	tpDescCB
)–
	tuöt8
 
	tty≥
, uöt8 
	tídpoöt
 );

292 
	#AF_DESCRIPTOR_SIMPLE
 1

	)

293 
	#AF_DESCRIPTOR_PROFILE_ID
 2

	)

298 
eEP_AŒowM©ch
 = 1,

299 
eEP_NŸU£d


300 } 
	teEP_Fœgs
;

303 
uöt8
 
‰ameDñay
;

304 
uöt8
 
wödowSize
;

305 } 
	tafAPSF_C⁄fig_t
;

307 
	s_ïLi°_t
 {

308 
_ïLi°_t
 *
√xtDesc
;

309 
ídPoötDesc_t
 *
ïDesc
;

310 
pDescCB
 
p‚DescCB
;

311 
afAPSF_C⁄fig_t
 
≠sfCfg
;

312 
eEP_Fœgs
 
Êags
;

313 } 
	tïLi°_t
;

319 
	#afSètus_SUCCESS
 
ZSuc˚ss


	)

320 
	#afSètus_FAILED
 
ZFaûuª


	)

321 
	#afSètus_INVALID_PARAMETER
 
ZInvÆidP¨amëî


	)

322 
	#afSètus_MEM_FAIL
 
ZMemEº‹


	)

323 
	#afSètus_NO_ROUTE
 
ZNwkNoRouã


	)

325 
ZSètus_t
 
	tafSètus_t
;

329 
uöt8
 
kvp
;

330 
APSDE_D©aReqMTU_t
 
≠s
;

331 } 
	tafD©aReqMTU_t
;

337 
ïLi°_t
 *
ïLi°
;

347 
	#afInô
()

348 

	)

354 
ïLi°_t
 *
afRegi°îExãnded
–
ídPoötDesc_t
 *
ïDesc
, 
pDescCB
 
descFn
 );

360 
afSètus_t
 
afRegi°î
–
ídPoötDesc_t
 *
ïDesc
 );

366 
afSètus_t
 
afDñëe
–
uöt8
 
EndPoöt
 );

372 
afD©aC⁄fúm
–
uöt8
 
ídPoöt
, uöt8 
å™sID
, 
ZSètus_t
 
°©us
 );

378 
afIncomögD©a
–
≠s_FømeF‹m©_t
 *
aff
, 
zAddrTy≥_t
 *
SrcAddªss
, 
uöt16
 
SrcP™Id
,

379 
NLDE_Sig«l_t
 *
sig
, 
uöt8
 
nwkSeqNum
, uöt8 
SecurôyU£
, 
uöt32
 
time°amp
 );

381 
afSètus_t
 
AF_D©aReque°
–
afAddrTy≥_t
 *
d°Addr
, 
ídPoötDesc_t
 *
§cEP
,

382 
uöt16
 
cID
, uöt16 
Àn
, 
uöt8
 *
buf
, uöt8 *
å™sID
,

383 
uöt8
 
›ti⁄s
, uöt8 
ødius
 );

413 
afSètus_t
 
AF_D©aReque°SrcRtg
–
afAddrTy≥_t
 *
d°Addr
, 
ídPoötDesc_t
 *
§cEP
,

414 
uöt16
 
cID
, uöt16 
Àn
, 
uöt8
 *
buf
, uöt8 *
å™sID
,

415 
uöt8
 
›ti⁄s
, uöt8 
ødius
, uöt8 
ªœyC¡
,

416 
uöt16
* 
pRñayLi°
 );

426 
ídPoötDesc_t
 *
afFödEndPoötDesc
–
uöt8
 
ídPoöt
 );

432 
uöt8
 
afFödSim∂eDesc
–
Sim∂eDes¸ùti⁄F‹m©_t
 **
µDesc
, uöt8 
EP
 );

437 
uöt8
 
afD©aReqMTU
–
afD©aReqMTU_t
* 
fõlds
 );

443 
uöt8
 
afGëM©ch
–uöt8 
ï
 );

449 
uöt8
 
afSëM©ch
–uöt8 
ï
, uöt8 
a˘i⁄
 );

454 
uöt8
 
afNumEndPoöts
( );

459 
afEndPoöts
–
uöt8
 *
ïBuf
, uöt8 
skùZDO
 );

464 
afC›yAddªss
 (
afAddrTy≥_t
 *
afAddr
, 
zAddrTy≥_t
 *
zAddr
);

469 
afAPSF_C⁄figGë
(
uöt8
 
ídPoöt
, 
afAPSF_C⁄fig_t
 *
pCfg
);

474 
afSètus_t
 
afAPSF_C⁄figSë
(
uöt8
 
ídPoöt
, 
afAPSF_C⁄fig_t
 *
pCfg
);

476 #ifde‡
__˝lu•lus


	@Components/stack/nwk/APS.h

40 #i‚de‡
APS_H


41 
	#APS_H


	)

43 #ifde‡
__˝lu•lus


50 
	~"APSMEDE.h
"

51 
	~"BödögTabÀ.h
"

52 
	~"ªÊe˘åack.h
"

63 
uöt16
 
nwkSrcAddr
;

64 
uöt8
 
nwkSecuª
;

65 
≠s_FømeF‹m©_t
* 
aff
;

66 } 
	tAPS_CmdInd_t
;

70 
oßl_evít_hdr_t
 
hdr
;

71 
zAddrTy≥_t
 
SrcAddªss
;

72 
uöt16
 
SrcP™Id
;

73 
uöt16
 
macDe°Addr
;

74 
NLDE_Sig«l_t
 
sig
;

75 
byã
 
SecurôyU£
;

76 
uöt32
 
time°amp
;

77 
uöt8
 
nwkSeqNum
;

78 
≠s_FømeF‹m©_t
 
aff
;

79 } 
	t≠sInMsg_t
;

81 (*
p‚BödögTimeoutCB
)( );

85 
uöt16
 
§cAddr
;

86 
uöt8
 
brﬂdˇ°Id
;

87 
uöt16
 
expúyTime
;

88 } 
	t≠sEndDevi˚Brﬂdˇ°_t
;

95 
	#APS_INCOMING_MSG
 0x01

	)

96 
	#APS_CMD_PKT
 0x02

	)

99 
	#APS_MSG_ID
 0x00

	)

100 
	#APS_MSG_ID_LEN
 0x01

	)

103 
	#APS_CMD_PKT_HDR
 ((
uöt8
) \

104 ((
APSME_CmdPkt_t
) + \

105 
APS_MSG_ID_LEN
 ))

	)

108 
	#APS_EDBIND_TIMEOUT_TIMER_ID
 0x0001

	)

109 
	#APS_DATA_REQUEST_HOLD
 0x0002

	)

110 
	#APS_SKA_SLOT_TIMER
 0x0004

	)

111 
	#APS_ENDDEVICE_BROADCAST_EVT
 0x0008

	)

114 
	#APS_SKA_SLOT_TIMEOUT
 100

	)

117 
	#APS_REFLECTOR_PUBLIC
 0

	)

118 
	#APS_REFLECTOR_PRIVATE
 1

	)

123 
uöt8
 
APS_Cou¡î
;

124 
byã
 
APS_TaskID
;

125 
uöt16
 
AIB_MaxBödögTime
;

126 
uöt8
 
AIB_≠sU£ExãndedPANID
[
Z_EXTADDR_LEN
];

127 
uöt8
 
AIB_≠sU£In£cuªJoö
;

128 
uöt8
 
APS_AŒowD©aReque°s
;

130 #i‡–
ZG_BUILD_ENDDEVICE_TYPE
 ) && ( 
RFD_RCVC_ALWAYS_ON
==
TRUE
 )

131 
≠sEndDevi˚Brﬂdˇ°_t
 
≠sEndDevi˚Brﬂdˇ°TabÀ
[];

141 
APS_Inô
–
byã
 
èsk_id
 );

146 
UINT16
 
APS_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 );

151 
APS_SëEndDevi˚BödTimeout
–
uöt16
 
timeout
, 
p‚BödögTimeoutCB
 
p‚CB
 );

156 
APS_CmdInd
–
APS_CmdInd_t
* 
öd
 );

163 
APS_ReÊe˘‹Inô
–
uöt8
 
ty≥
 );

165 #i‡–
ZG_BUILD_ENDDEVICE_TYPE
 ) && ( 
RFD_RCVC_ALWAYS_ON
==
TRUE
 )

169 
APS_InôEndDevi˚Brﬂdˇ°TabÀ
( );

174 
uöt8
 
APS_EndDevi˚Brﬂdˇ°Check
–
NLDE_FømeF‹m©_t
 *
ff
 );

182 
ZSètus_t
 (*
pAPS_UnBöd
)–
byã
 
SrcEndpI¡
,

183 
uöt16
 
Clu°îId
, 
zAddrTy≥_t
 *
D°Addr
, 
byã
 
D°EndpI¡
 );

188 
ZSètus_t
 (*
pAPS_GëBöd
)–
uöt16
 
Nth
, 
≠sBödögIãm_t
 *
pIãm
 );

190 (*
pAPS_D©aC⁄fúmReÊe˘
)–
nwkDB_t
 *
ªc
, 
uöt8
 
°©us
 );

192 (*
pAPS_D©aIndReÊe˘
)–
zAddrTy≥_t
 *
SrcAddªss
, 
≠s_FømeF‹m©_t
 *
aff
,

193 
NLDE_Sig«l_t
 *
sig
, 
byã
 
AckReque°
, byã 
SecurôyU£
, 
uöt32
 
time°amp
 );

197 #ifde‡
__˝lu•lus


	@Components/stack/nwk/APSMEDE.h

41 #i‚de‡
APSMEDE_H


42 
	#APSMEDE_H


	)

44 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"nwk_globÆs.h
"

53 
	~"AssocLi°.h
"

54 
	~"nwk_bufs.h
"

55 
	~"BödögTabÀ.h
"

56 
	~"s•.h
"

66 
	#APS_FRAME_TYPE_MASK
 0x03

	)

67 
	#APS_DATA_FRAME
 0x00

	)

68 
	#APS_CMD_FRAME
 0x01

	)

69 
	#APS_ACK_FRAME
 0x02

	)

70 
	#STUB_APS_FRAME
 0x03

	)

72 
	#APS_DELIVERYMODE_MASK
 0x0C

	)

73 
	#APS_FC_DM_UNICAST
 0x00

	)

74 
	#APS_FC_DM_INDIRECT
 0x04

	)

75 
	#APS_FC_DM_BROADCAST
 0x08

	)

76 
	#APS_FC_DM_GROUP
 0x0C

	)

78 
	#APS_FC_ACK_FORMAT
 0x10

	)

79 
	#APS_FC_SECURITY
 0x20

	)

80 
	#APS_FC_ACK_REQ
 0x40

	)

81 
	#APS_FC_EXTENDED
 0x80

	)

83 
	#APS_XFC_FRAG_MASK
 0x03

	)

84 
	#APS_XFC_FIRST_FRAG
 0x01

	)

85 
	#APS_XFC_FRAGMENT
 0x02

	)

86 
	#APS_XFC_RESERVED
 0xFC

	)

88 
	#APS_FRAME_CTRL_FIELD_LEN
 0x01

	)

89 
	#APS_DSTEP_ID_FIELD_LEN
 0x01

	)

90 
	#APS_GROUP_ID_FIELD_LEN
 0x02

	)

91 
	#APS_SRCEP_ID_FIELD_LEN
 0x01

	)

92 
	#APS_CLUSTERID_FIELD_LEN_V1_0
 0x01

	)

93 
	#APS_CLUSTERID_FIELD_LEN
 0x02

	)

94 
	#APS_PROFILEID_FIELD_LEN
 0x02

	)

95 
	#APS_FRAME_CNT_FIELD_LEN
 0x01

	)

96 
	#APS_XFRAME_CTRL_FIELD_LEN
 0x01

	)

97 
	#APS_BLOCK_CNT_FIELD_LEN
 0x01

	)

98 
	#APS_ACK_BITS_FIELD_LEN
 0x01

	)

101 
	#APS_TX_OPTIONS_SECURITY_ENABLE
 0x01u

	)

103 
	#APS_TX_OPTIONS_ACK
 0x04u

	)

104 
	#APS_TX_OPTIONS_PERMIT_FRAGMENT
 0x08u

	)

105 
	#APS_TX_OPTIONS_SKIP_ROUTING
 0x10u

	)

106 
	#APS_TX_OPTIONS_FIRST_FRAGMENT
 0x20u

	)

107 
	#APS_TX_OPTIONS_PREPROCESS
 0x40u

	)

110 
	#APS_HDR_FC
 0

	)

113 
	#APSME_CMD_ID
 0

	)

116 
	#APSME_CMD_SKKE_1
 0x01

	)

117 
	#APSME_CMD_SKKE_2
 0x02

	)

118 
	#APSME_CMD_SKKE_3
 0x03

	)

119 
	#APSME_CMD_SKKE_4
 0x04

	)

120 
	#APSME_CMD_TRANSPORT_KEY
 0x05

	)

121 
	#APSME_CMD_UPDATE_DEVICE
 0x06

	)

122 
	#APSME_CMD_REMOVE_DEVICE
 0x07

	)

123 
	#APSME_CMD_REQUEST_KEY
 0x08

	)

124 
	#APSME_CMD_SWITCH_KEY
 0x09

	)

125 
	#APSME_CMD_EA_INIT_CHLNG
 0x0A

	)

126 
	#APSME_CMD_EA_RSP_CHLNG
 0x0B

	)

127 
	#APSME_CMD_EA_INIT_MAC_DATA
 0x0C

	)

128 
	#APSME_CMD_EA_RSP_MAC_DATA
 0x0D

	)

129 
	#APSME_CMD_TUNNEL
 0x0E

	)

132 
	#APSME_SKKE_METHOD
 0

	)

133 
	#APSME_SKKE_INIT_ADDR
 1

	)

134 
	#APSME_SKKE_RESP_ADDR
 9

	)

135 
	#APSME_SKKE_PAYLOAD
 17

	)

136 
	#APSME_SKKE_LEN
 33

	)

139 
	#APSME_TK_KEY_TYPE
 1

	)

140 
	#APSME_TK_KEY
 2

	)

141 
	#APSME_TK_COMMON_LEN
 (
uöt8
) \

142 (
APSME_TK_KEY
 + \

143 
SEC_KEY_LEN
 )

	)

144 
	#APSME_TK_KEY_SEQ_LEN
 1

	)

145 
	#APSME_TK_INITIATOR_LEN
 1

	)

147 
	#APSME_TK_TC_DST_ADDR
 18

	)

148 
	#APSME_TK_TC_SRC_ADDR
 26

	)

149 
	#APSME_TK_TC_KEY_LEN
 34

	)

151 
	#APSME_TK_NWK_KEY_SEQ
 18

	)

152 
	#APSME_TK_NWK_DST_ADDR
 19

	)

153 
	#APSME_TK_NWK_SRC_ADDR
 27

	)

154 
	#APSME_TK_NWK_KEY_LEN
 35

	)

156 
	#APSME_TK_APP_PARTNER_ADDR
 18

	)

157 
	#APSME_TK_APP_INITIATOR
 26

	)

158 
	#APSME_TK_APP_KEY_LEN
 27

	)

161 
	#APSME_UD_STANDARD_SECURED_REJOIN
 0

	)

162 
	#APSME_UD_STANDARD_UNSECURED_JOIN
 1

	)

163 
	#APSME_UD_STANDARD_UNSECURED_REJOIN
 3

	)

164 
	#APSME_UD_HIGH_SECURED_REJOIN
 4

	)

165 
	#APSME_UD_HIGH_UNSECURED_JOIN
 5

	)

166 
	#APSME_UD_HIGH_UNSECURED_REJOIN
 7

	)

168 
	#APSME_UD_EADDR
 1

	)

169 
	#APSME_UD_SADDR_LSB
 9

	)

170 
	#APSME_UD_SADDR_MSB
 10

	)

171 
	#APSME_UD_STATUS
 11

	)

172 
	#APSME_UD_LEN
 12

	)

175 
	#APSME_RD_LEN
 9

	)

176 
	#APSME_RD_EADDR
 1

	)

179 
	#APSME_RK_KEY_TYPE
 1

	)

180 
	#APSME_RK_EADDR
 2

	)

181 
	#APSME_RK_SYS_LEN
 2

	)

182 
	#APSME_RK_APP_LEN
 10

	)

185 
	#APSME_SK_SEQ_NUM
 1

	)

186 
	#APSME_SK_LEN
 2

	)

190 
	#APSME_EA_CHLNG_KEY_TYPE
 1

	)

191 
	#APSME_EA_CHLNG_SEQ_NUM
 2

	)

192 
	#APSME_EA_CHLNG_INIT_ADDR
 3

	)

193 
	#APSME_EA_CHLNG_RESP_ADDR
 11

	)

194 
	#APSME_EA_CHLNG_PAYLOAD
 19

	)

195 
	#APSME_EA_CHLNG_LEN
 35

	)

198 
	#APSME_EA_DATA_TAG
 1

	)

199 
	#APSME_EA_DATA_TYPE
 17

	)

200 
	#APSME_EA_DATA_TEXT
 18

	)

201 
	#APSME_EA_DATA_LEN
 22

	)

204 
	#APSME_EA_INITIATE
 0x00

	)

205 
	#APSME_EA_ACCEPT
 0x01

	)

206 
	#APSME_EA_REJECT
 0x02

	)

209 
	#APSME_TUNNEL_DEA
 1

212 
	#APSME_TUNNEL_TCMD
 9

213 
	#APSME_TUNNEL_LEN
 9

	)

216 
	#APSME_TRUSTCENTER_NWKADDR
 
NWK_PAN_COORD_ADDR


	)

218 #i‡!
deföed
–
MAX_APS_FRAMECOUNTER_CHANGES
 )

221 
	#MAX_APS_FRAMECOUNTER_CHANGES
 1000

	)

224 #i‡!
deföed
–
MAX_TCLK_FRAMECOUNTER_CHANGES
 )

227 
	#MAX_TCLK_FRAMECOUNTER_CHANGES
 10

	)

237 
≠sAddªssM≠
 = 0xA0,

240 
≠sMaxBödögTime
,

241 
≠sBödögTabÀ
,

242 
≠sNumBödögTabÀE¡rõs
,

243 
≠sU£ExãndedPANID
,

244 
≠sU£In£cuªJoö
,

245 
≠sMAX_AIB_ITEMS


246 } 
	tZApsAâribuãs_t
;

251 
NWK_ADDR_LIST
,

252 
EXT_ADDRESS
,

253 
SIMPLE_DESC
,

254 
NODE_DESC
,

255 
POWER_DESC
,

256 
SVC_MATCH


257 } 
	tAPSME_quîy_t
;

259 
	#APS_ILLEGAL_DEVICES
 0x02

	)

264 
uöt8
 
§cAddr
[
Z_EXTADDR_LEN
];

265 
byã
 
§cEP
;

266 
uöt16
 
˛u°îID
;

267 
zAddrTy≥_t
 
d°Addr
;

268 
byã
 
d°EP
;

269 } 
	t≠sBödögIãm_t
;

273 
byã
 
FrmCål
;

274 
byã
 
XädFrmCål
;

275 
byã
 
D°EndPoöt
;

276 
byã
 
SrcEndPoöt
;

277 
uöt16
 
GroupID
;

278 
uöt16
 
Clu°îID
;

279 
uöt16
 
ProfûeID
;

280 
uöt16
 
macDe°Addr
;

281 
byã
 
wasBrﬂdˇ°
;

282 
byã
 
≠sHdrLí
;

283 
byã
 *
asdu
;

284 
byã
 
asduLígth
;

285 
byã
 
ApsCou¡î
;

286 
uöt8
 
å™sID
;

287 
uöt8
 
BlkCou¡
;

288 
uöt8
 
AckBôs
;

289 } 
	t≠s_FømeF‹m©_t
;

293 
uöt16
 
äa
;

294 
uöt8
* 
dó
;

295 } 
	tAPSDE_FømeTu¬ñ_t
;

300 
zAddrTy≥_t
 
d°Addr
;

301 
uöt8
 
§cEP
;

302 
uöt8
 
d°EP
;

303 
uöt16
 
d°P™Id
;

304 
uöt16
 
˛u°îID
;

305 
uöt16
 
¥ofûeID
;

306 
uöt16
 
asduLí
;

307 
uöt8
* 
asdu
;

308 
uöt16
 
txO±i⁄s
;

309 
uöt8
 
å™sID
;

310 
uöt8
 
discovîRouã
;

311 
uöt8
 
ødiusCou¡î
;

312 
uöt8
 
≠sCou¡
;

313 
uöt8
 
blkCou¡
;

314 } 
	tAPSDE_D©aReq_t
;

318 
uöt16
 
d°Addr
;

319 
uöt8
 
d°EP
;

320 
uöt8
 
§cEP
;

321 
uöt8
 
å™sID
;

322 
uöt8
 
°©us
;

323 } 
	tAPSDE_D©aCnf_t
;

327 
uöt8
 
£cuª
;

328 } 
	tAPSDE_D©aReqMTU_t
;

333 
uöt16
 
d°Addr
;

334 
uöt8
* 
ª•ExtAddr
;

335 
uöt8
 
mëhod
;

336 
uöt8
 
≠sSecuª
;

337 
uöt8
 
nwkSecuª
;

339 } 
	tAPSME_E°ablishKeyReq_t
;

343 
uöt8
* 
∑πExtAddr
;

344 
uöt8
 
°©us
;

345 } 
	tAPSME_E°ablishKeyCfm_t
;

349 
uöt16
 
§cAddr
;

350 
uöt8
* 
öôExtAddr
;

351 
uöt8
 
mëhod
;

352 
uöt8
 
≠sSecuª
;

353 
uöt8
 
nwkSecuª
;

355 } 
	tAPSME_E°ablishKeyInd_t
;

359 
uöt16
 
d°Addr
;

360 
uöt8
* 
öôExtAddr
;

361 
uöt8
 
ac˚±
;

362 
uöt8
 
≠sSecuª
;

363 
uöt8
 
nwkSecuª
;

365 } 
	tAPSME_E°ablishKeyR•_t
;

369 
uöt16
 
d°Addr
;

370 
uöt8
 
keyTy≥
;

371 
uöt8
 
keySeqNum
;

372 
uöt8
* 
key
;

373 
uöt8
* 
extAddr
;

374 
uöt8
 
öôüt‹
;

375 
uöt8
 
≠sSecuª
;

376 
uöt8
 
nwkSecuª
;

377 
APSDE_FømeTu¬ñ_t
* 
tu¬ñ
;

378 } 
	tAPSME_Tøn•‹tKeyReq_t
;

382 
uöt16
 
§cAddr
;

383 
uöt8
 
keyTy≥
;

384 
uöt8
 
keySeqNum
;

385 
uöt8
* 
key
;

386 
uöt8
* 
d°ExtAddr
;

387 
uöt8
* 
§cExtAddr
;

388 
uöt8
 
öôüt‹
;

389 
uöt8
 
£cuª
;

390 } 
	tAPSME_Tøn•‹tKeyInd_t
;

394 
uöt16
 
d°Addr
;

395 
uöt16
 
devAddr
;

396 
uöt8
* 
devExtAddr
;

397 
uöt8
 
°©us
;

398 
uöt8
 
≠sSecuª
;

399 } 
	tAPSME_Upd©eDevi˚Req_t
;

403 
uöt16
 
§cAddr
;

404 
uöt8
* 
devExtAddr
;

405 
uöt16
 
devAddr
;

406 
uöt8
 
°©us
;

407 } 
	tAPSME_Upd©eDevi˚Ind_t
;

411 
uöt16
 
∑ª¡Addr
;

412 
uöt8
* 
chûdExtAddr
;

413 } 
	tAPSME_RemoveDevi˚Req_t
;

417 
uöt16
 
§cAddr
;

418 
uöt8
* 
chûdExtAddr
;

419 } 
	tAPSME_RemoveDevi˚Ind_t
;

423 
uöt8
 
d°Addr
;

424 
uöt8
 
keyTy≥
;

425 
uöt8
* 
∑πExtAddr
;

426 } 
	tAPSME_Reque°KeyReq_t
;

430 
uöt16
 
§cAddr
;

431 
uöt8
 
keyTy≥
;

432 
uöt8
* 
∑πExtAddr
;

433 } 
	tAPSME_Reque°KeyInd_t
;

437 
uöt16
 
d°Addr
;

438 
uöt8
 
keySeqNum
;

439 } 
	tAPSME_SwôchKeyReq_t
;

443 
uöt16
 
§cAddr
;

444 
uöt8
 
keySeqNum
;

445 } 
	tAPSME_SwôchKeyInd_t
;

449 
uöt16
 
nwkAddr
;

450 
uöt8
* 
extAddr
;

451 
uöt8
* 
chÆÀnge
;

452 
uöt8
 
a˘i⁄
;

453 } 
	tAPSME_AuthítiˇãReq_t
;

457 
uöt16
 
öôNwkAddr
;

458 
uöt8
 
öôExtAddr
[
Z_EXTADDR_LEN
];

459 
uöt8
 
chÆÀnge
[
SEC_KEY_LEN
];

460 } 
	tAPSME_AuthítiˇãInd_t
;

464 
uöt8
 
öôüt‹
;

465 
uöt8
 
∑πExtAddr
[
Z_EXTADDR_LEN
];

466 
uöt8
 
°©us
;

467 } 
	tAPSME_AuthítiˇãCfm_t
;

472 
oßl_evít_hdr_t
 
hdr
;

473 
uöt8
* 
asdu
;

474 
uöt8
 
asduLí
;

475 
uöt8
 
£cuª
;

476 
uöt16
 
nwkAddr
;

477 
uöt8
 
nwkSecuª
;

478 } 
	tAPSME_CmdPkt_t
;

482 
uöt8
 
key
[
SEC_KEY_LEN
];

483 
uöt32
 
txFrmC¡r
;

484 
uöt32
 
rxFrmC¡r
;

485 } 
	tAPSME_LökKeyD©a_t
;

489 
uöt8
 
‰mCål
;

490 
uöt8
 
xädFrmCål
;

491 
uöt8
 
§cEP
;

492 
uöt8
 
d°EP
;

493 
uöt16
 
groupID
;

494 
uöt16
 
˛u°îID
;

495 
uöt16
 
¥ofûeID
;

496 
uöt8
 
asduLí
;

497 
uöt8
* 
asdu
;

498 
uöt8
 
hdrLí
;

499 
uöt8
 
≠sCou¡î
;

500 
uöt8
 
å™sID
;

501 
uöt8
 
blkCou¡
;

502 
uöt8
 
ackBôs
;

503 } 
	tAPSDE_FømeD©a_t
;

507 
uöt8
 
‰mCål
;

508 
uöt8
 
xädFrmCål
;

509 
uöt8
 
§cEP
;

510 
uöt8
 
d°EP
;

511 
uöt16
 
˛u°îID
;

512 
uöt16
 
¥ofûeID
;

513 
uöt8
 
asduLí
;

514 
uöt16
 
d°Addr
;

515 
uöt8
 
å™sID
;

516 } 
	tAPSDE_St‹edFømeD©a_t
;

521 
NLDE_FømeD©a_t
 
nfd
;

522 
APSDE_FømeD©a_t
 
afd
;

523 } 
	tAPSDE_FømeF‹m©_t
;

527 
uöt16
 
d°Addr
;

528 
uöt8
 
‰mCål
;

529 
uöt8
 
xädFrmCål
;

530 
uöt8
 
asduLí
;

531 
uöt8
 
nwkSecuª
;

532 
APSDE_FømeTu¬ñ_t
* 
tu¬ñ
;

533 } 
	tAPSDE_FømeAŒoc_t
;

538 
APSDE_FømeAŒoc_t
 
Á
;

541 
APSDE_FømeF‹m©_t
* 
aff
;

542 
SSP_Info_t
* 
si
;

543 
uöt8
 
°©us
;

544 } 
	tAPSDE_FømeBlk_t
;

549 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

550 
uöt8
 
key
[
SEC_KEY_LEN
];

551 
uöt32
 
txFrmC¡r
;

552 
uöt32
 
rxFrmC¡r
;

553 } 
	tAPSME_TCLökKey_t
;

557 
uöt32
 
txFrmC¡r
;

558 
uöt32
 
rxFrmC¡r
;

559 
uöt8
 
≥ndögFœg
;

560 } 
	tAPSME_ApsLökKeyFrmC¡r_t
;

564 
uöt32
 
txFrmC¡r
;

565 
uöt32
 
rxFrmC¡r
;

566 
uöt8
 
≥ndögFœg
;

567 } 
	tAPSME_TCLökKeyFrmC¡r_t
;

570 (*
≠sPªPro˚ssD©aReq_t
)–
	tAPSDE_FømeBlk_t
 *
	tblk
 );

576 
APSME_ApsLökKeyFrmC¡r_t
 
ApsLökKeyFrmC¡r
[];

577 
APSME_TCLökKeyFrmC¡r_t
 
TCLökKeyFrmC¡r
[];

588 
ZSètus_t
 
APSDE_D©aReq
–
APSDE_D©aReq_t
* 
ªq
 );

593 
uöt8
 
APSDE_D©aReqMTU
–
APSDE_D©aReqMTU_t
* 
fõlds
 );

599 
APSDE_D©aC⁄fúm
–
nwkDB_t
 *
ªc
, 
ZSètus_t
 
Sètus
 );

600 
APSDE_D©aCnf
–
APSDE_D©aCnf_t
* 
˙f
 );

606 
APSDE_D©aIndiˇti⁄
–
≠s_FømeF‹m©_t
 *
aff
, 
zAddrTy≥_t
 *
SrcAddªss
,

607 
uöt16
 
SrcP™Id
, 
NLDE_Sig«l_t
 *
sig
, 
uöt8
 
nwkSeqNum
,

608 
byã
 
SecurôyU£
, 
uöt32
 
time°amp
 );

623 
ZSètus_t
 
APSME_BödReque°
–
byã
 
SrcEndpI¡
, 
uöt16
 
Clu°îId
,

624 
zAddrTy≥_t
 *
D°Addr
, 
byã
 
D°EndpI¡
);

633 
ZSètus_t
 
APSME_UnBödReque°
–
byã
 
SrcEndpI¡
,

634 
uöt16
 
Clu°îId
, 
zAddrTy≥_t
 *
D°Addr
, 
byã
 
D°EndpI¡
);

640 
ZSètus_t
 
APSME_GëReque°
–
ZApsAâribuãs_t
 
AIBAâribuã
,

641 
uöt16
 
Index
, 
byã
 *
AâribuãVÆue
 );

647 
ZSètus_t
 
APSME_SëReque°
–
ZApsAâribuãs_t
 
AIBAâribuã
,

648 
uöt16
 
Index
, 
byã
 *
AâribuãVÆue
 );

653 
uöt8
 
APSME_LookupExtAddr
–
uöt16
 
nwkAddr
, uöt8* 
extAddr
 );

658 
uöt8
 
APSME_LookupNwkAddr
–uöt8* 
extAddr
, 
uöt16
* 
nwkAddr
 );

665 
APSME_UnbödC⁄fúm
–
zAddrTy≥_t
 
Co‹Addr
,
ZSètus_t
 
Sètus
,

666 
uöt16
 
SrcAddr
, 
byã
 
SrcEndpI¡
, byã 
Obje˘Id
,

667 
uöt16
 
D°Addr
, 
byã
 
D°EndpI¡
);

672 
APSME_BödC⁄fúm
–
zAddrTy≥_t
 
Co‹Addr
,
ZSètus_t
 
Sètus
,

673 
uöt16
 
SrcAddr
, 
byã
 
SrcEndpI¡
, byã 
Obje˘Id
,

674 
uöt16
 
D°Addr
, 
byã
 
D°EndpI¡
);

681 
APSDE_SëPªPro˚ssF≈
–
≠sPªPro˚ssD©aReq_t
 
p‚CB
 );

691 
APSME_CmdPkt
–
APSME_CmdPkt_t
* 
pkt
 );

700 
APSDE_FømeAŒoc
–
APSDE_FømeBlk_t
* 
blk
 );

705 
APSDE_FømeSíd
–
APSDE_FømeBlk_t
* 
blk
 );

710 
APSME_HﬁdD©aReque°s
–
uöt16
 
hﬁdTime
 );

719 
ZSètus_t
 
APSME_FømeSecurôyRemove
(
uöt16
 
§cAddr
,

720 
≠s_FømeF‹m©_t
* 
aff
);

725 
ZSètus_t
 
APSME_FømeSecurôyAµly
(
uöt16
 
d°Addr
,

726 
≠s_FømeF‹m©_t
* 
aff
);

731 
APSME_SecurôyNM
( );

732 
APSME_SecurôyRM_ED
( );

733 
APSME_SecurôyRM_RD
( );

734 
APSME_SecurôyRM_CD
( );

735 
APSME_SecurôyCM_ED
( );

736 
APSME_SecurôyCM_RD
( );

737 
APSME_SecurôyCM_CD
( );

742 
APSME_SKA_SlŸInô
–
uöt8
 
tŸÆ
 );

747 
APSME_SKA_SlŸTimîH™dÀr
( );

765 
ZSètus_t
 
APSME_E°ablishKeyReq
–
APSME_E°ablishKeyReq_t
* 
ªq
 );

770 
ZSètus_t
 
APSME_E°ablishKeyR•
–
APSME_E°ablishKeyR•_t
* 
r•
 );

775 
ZSètus_t
 
APSME_Tøn•‹tKeyReq
–
APSME_Tøn•‹tKeyReq_t
* 
ªq
 );

780 
ZSètus_t
 
APSME_Upd©eDevi˚Req
–
APSME_Upd©eDevi˚Req_t
* 
ªq
 );

785 
ZSètus_t
 
APSME_RemoveDevi˚Req
–
APSME_RemoveDevi˚Req_t
* 
ªq
 );

790 
ZSètus_t
 
APSME_Reque°KeyReq
–
APSME_Reque°KeyReq_t
* 
ªq
 );

795 
ZSètus_t
 
APSME_SwôchKeyReq
–
APSME_SwôchKeyReq_t
* 
ªq
 );

800 
ZSètus_t
 
APSME_AuthítiˇãReq
–
APSME_AuthítiˇãReq_t
* 
ªq
 );

819 
APSME_E°ablishKeyCfm
–
APSME_E°ablishKeyCfm_t
* 
cfm
 );

824 
APSME_E°ablishKeyInd
–
APSME_E°ablishKeyInd_t
* 
öd
 );

829 
APSME_Tøn•‹tKeyInd
–
APSME_Tøn•‹tKeyInd_t
* 
öd
 );

834 
APSME_Upd©eDevi˚Ind
–
APSME_Upd©eDevi˚Ind_t
* 
öd
 );

839 
APSME_RemoveDevi˚Ind
–
APSME_RemoveDevi˚Ind_t
* 
öd
 );

844 
APSME_Reque°KeyInd
–
APSME_Reque°KeyInd_t
* 
öd
 );

849 
APSME_SwôchKeyInd
–
APSME_SwôchKeyInd_t
* 
öd
 );

854 
APSME_AuthítiˇãInd
–
APSME_AuthítiˇãInd_t
* 
öd
 );

859 
APSME_AuthítiˇãCfm
–
APSME_AuthítiˇãCfm_t
* 
cfm
 );

873 
ZSètus_t
 
APSME_Ma°îKeyGë
–
uöt8
* 
extAddr
, 
uöt16
* 
pKeyNvId
 );

878 
ZSètus_t
 
APSME_LökKeySë
–
uöt8
* 
extAddr
, uöt8* 
key
 );

883 
ZSètus_t
 
APSME_LökKeyNVIdGë
(
uöt8
* 
extAddr
, 
uöt16
 *
pKeyNvId
);

888 
uöt8
 
APSME_IsLökKeyVÆid
(uöt8* 
extAddr
);

893 
uöt8
 
APSME_KeyFwdToChûd
–
APSME_Tøn•‹tKeyInd_t
* 
öd
 );

901 
APSME_TCAddrSëup
–
uöt16
 
sh‹tAddr
 );

907 #ifde‡
__˝lu•lus


	@Components/stack/nwk/AddrMgr.h

40 #i‚de‡
ADDRMGR_H


41 
	#ADDRMGR_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

57 
	#ADDRMGR_REG_ASSOC
 0x00

	)

58 
	#ADDRMGR_REG_SECURITY
 0x01

	)

59 
	#ADDRMGR_REG_BINDING
 0x02

	)

60 
	#ADDRMGR_REG_PRIVATE1
 0x03

	)

63 
	#ADDRMGR_USER_DEFAULT
 0x00

	)

64 
	#ADDRMGR_USER_ASSOC
 0x01

	)

65 
	#ADDRMGR_USER_SECURITY
 0x02

	)

66 
	#ADDRMGR_USER_BINDING
 0x04

	)

67 
	#ADDRMGR_USER_PRIVATE1
 0x08

	)

70 
	#ADDRMGR_ENTRY_NWKADDR_SET
 1

	)

71 
	#ADDRMGR_ENTRY_NWKADDR_DUP
 2

	)

72 
	#ADDRMGR_ENTRY_EXTADDR_SET
 3

	)

75 
	#ADDRMGR_CALLBACK_ENABLED
 0

	)

83 
uöt8
 
u£r
;

84 
uöt16
 
nwkAddr
;

85 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

86 
uöt16
 
ödex
;

87 } 
	tAddrMgrE¡ry_t
;

90 (*
AddrMgrU£rCB_t
)–
	tuöt8
 
	tupd©e
,

91 
	tAddrMgrE¡ry_t
* 
	t√wE¡ry
,

92 
	tAddrMgrE¡ry_t
* 
	tﬁdE¡ry
 );

106 
AddrMgrInô
–
uöt16
 
íåyTŸÆ
 );

117 
AddrMgrRe£t
( );

128 
uöt8
 
AddrMgrInôNV
( );

139 
AddrMgrSëDeÁu…NV
( );

150 
AddrMgrRe°‹eFromNV
( );

161 
AddrMgrWrôeNV
( );

173 
AddrMgrWrôeNVReque°
( );

175 #i‡–
ADDRMGR_CALLBACK_ENABLED
 == 1 )

186 
uöt8
 
AddrMgrRegi°î
–uöt8 
ªg
, 
AddrMgrU£rCB_t
 
cb
 );

200 
AddrMgrExtAddrSë
–
uöt8
* 
d°ExtAddr
, uöt8* 
§cExtAddr
 );

211 
uöt8
 
AddrMgrExtAddrVÆid
–uöt8* 
extAddr
 );

223 
uöt8
 
AddrMgrExtAddrEquÆ
–uöt8* 
extAddr1
, uöt8* 
extAddr2
 );

235 
uöt8
 
AddrMgrExtAddrLookup
–
uöt16
 
nwkAddr
, uöt8* 
extAddr
 );

247 
uöt8
 
AddrMgrNwkAddrLookup
–uöt8* 
extAddr
, 
uöt16
* 
nwkAddr
 );

262 
uöt8
 
AddrMgrE¡ryRñó£
–
AddrMgrE¡ry_t
* 
íåy
 );

277 
uöt8
 
AddrMgrE¡ryAddRef
–
AddrMgrE¡ry_t
* 
íåy
 );

292 
uöt8
 
AddrMgrE¡ryLookupNwk
–
AddrMgrE¡ry_t
* 
íåy
 );

307 
uöt8
 
AddrMgrE¡ryLookupExt
–
AddrMgrE¡ry_t
* 
íåy
 );

322 
uöt8
 
AddrMgrE¡ryGë
–
AddrMgrE¡ry_t
* 
íåy
 );

337 
uöt8
 
AddrMgrE¡ryUpd©e
–
AddrMgrE¡ry_t
* 
íåy
 );

350 
uöt8
 
AddrMgrIsFuŒ
( );

356 #ifde‡
__˝lu•lus


	@Components/stack/nwk/AssocList.h

40 #i‚de‡
ASSOCLIST_H


41 
	#ASSOCLIST_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

61 
	#NVINDEX_NOT_FOUND
 0xFFFF

	)

62 
	#NVINDEX_THIS_DEVICE
 0xFFFE

	)

64 
	#ASSOC_INDEX_NOT_FOUND
 0xFFFF

	)

67 
	#DEV_LINK_STATUS
 0x01

68 
	#DEV_LINK_REPAIR
 0x02

69 
	#DEV_SEC_INIT_STATUS
 0x04

70 
	#DEV_SEC_AUTH_STATUS
 0x08

71 

	)

72 
	#DEV_SECURED_JOIN
 0x20

73 
	#DEV_REJOIN_STATUS
 0x40

74 
	#DEV_HIGH_SEC_STATUS
 0x80

75 

	)

77 
	#PARENT
 0

	)

78 
	#CHILD_RFD
 1

	)

79 
	#CHILD_RFD_RX_IDLE
 2

	)

80 
	#CHILD_FFD
 3

	)

81 
	#CHILD_FFD_RX_IDLE
 4

	)

82 
	#NEIGHBOR
 5

	)

83 
	#OTHER
 6

	)

84 
	#NOTUSED
 0xFF

	)

92 
UINT16
 
sh‹tAddr
;

93 
uöt16
 
addrIdx
;

94 
byã
 
nodeRñ©i⁄
;

95 
byã
 
devSètus
;

96 
byã
 
assocC¡
;

97 
byã
 
age
;

98 
lökInfo_t
 
lökInfo
;

99 } 
	tassocüãd_devi˚s_t
;

103 
uöt16
 
numRecs
;

104 } 
	tnvDevi˚Li°Hdr_t
;

110 
assocüãd_devi˚s_t
 
AssocüãdDevLi°
[];

119 
AssocInô
( );

124 
assocüãd_devi˚s_t
 *
AssocAddNew
–
uöt16
 
sh‹tAddr
, 
byã
 *
extAddr
,

125 
byã
 
nodeRñ©i⁄
 );

130 
uöt16
 
AssocCou¡
–
byã
 
°¨tRñ©i⁄
, byã 
ídRñ©i⁄
 );

135 
byã
 
AssocIsChûd
–
uöt16
 
sh‹tAddr
 );

140 
byã
 
AssocIsRFChûd
–
uöt16
 
sh‹tAddr
 );

145 
byã
 
AssocIsP¨ít
–
uöt16
 
sh‹tAddr
 );

150 
assocüãd_devi˚s_t
 *
AssocGëWôhSh‹t
–
uöt16
 
sh‹tAddr
 );

155 
assocüãd_devi˚s_t
 *
AssocGëWôhExt
–
byã
 *
extAddr
 );

160 
byã
 
AssocRemove
–byã *
extAddr
 );

165 
uöt16
 
AssocGëNextI«˘iveNode
–uöt16 
sh‹tAddr
 );

170 
uöt16
 
AssocGëNextChûdNode
–uöt16 
sh‹tAddr
 );

175 
AssocRe£t
( );

182 
uöt16
 *
AssocMakeLi°
–
byã
 *
pCou¡
 );

187 
assocüãd_devi˚s_t
 *
AssocM©chDevi˚Sètus
–
uöt8
 
°©us
 );

192 
byã
 
AssocInôNV
( );

197 
AssocSëDeÁu…NV
( );

202 
uöt8
 
AssocRe°‹eFromNV
( );

207 
AssocWrôeNV
( );

212 
assocüãd_devi˚s_t
 *
AssocFödDevi˚
–
byã
 
numbî
 );

214 
uöt8
 
AssocCh™geNwkAddr
–
uöt16
 
nwkAddr
, uöt8 *
õìAddr
 );

216 
AssocCheckDupNeighb‹s
( );

221 #ifde‡
__˝lu•lus


	@Components/stack/nwk/BindingTable.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

45 
	~"OSAL_Nv.h
"

46 
	~"nwk_globÆs.h
"

47 
	~"AddrMgr.h
"

48 
	~"BödögTabÀ.h
"

57 
	#NV_BIND_EMPTY
 0xFF

	)

58 
	#NV_BIND_REC_SIZE
 (
gBIND_REC_SIZE
)

	)

59 
	#NV_BIND_ITEM_SIZE
 (
gBIND_REC_SIZE
 * 
gNWK_MAX_BINDING_ENTRIES
)

	)

66 
uöt8
 
	m§cEP
;

67 
uöt16
 
	m§cIndex
;

68 
uöt16
 
	md°Index
;

69 
uöt8
 
	md°EP
;

70 
uöt8
 
	md°AddrMode
;

71 
uöt8
 
	m˛u°îIDs
;

72 
uöt16
* 
	m˛u°îIDLi°
;

73 } 
	tbödFõlds_t
;

82 
BödAddrMgrCB
–
uöt8
 
upd©e
, 
AddrMgrE¡ry_t
 *
íåyOld
,

83 
AddrMgrE¡ry_t
 *
íåyNew
 );

84 
BödögE¡ry_t
 *
bödFödEm±y
( );

85 
uöt16
 
bödögAddrMgsHñ≥rFöd
–
zAddrTy≥_t
 *
addr
 );

86 
uöt8
 
bödögAddrMgsHñ≥rC⁄vît
–
uöt16
 
idx
, 
zAddrTy≥_t
 *
addr
 );

87 
bödAddrMgrLoˇlLﬂd
( );

88 
uöt16
 
bödAddrIndexGë
–
zAddrTy≥_t
* 
addr
 );

93 
uöt8
 
	gbödAddrMgrLoˇlLﬂded
 = 
FALSE
;

99 
	gBödögE¡ry_t
 *(*
	gpbödAddE¡ry
)–
byã
 
	g§cEpI¡
,

100 
zAddrTy≥_t
 *
	gd°Addr
, 
byã
 
	gd°EpI¡
,

101 
byã
 
	gnumClu°îIds
, 
uöt16
 *
	g˛u°îIds
 ) = (*)
NULL
;

102 
	$uöt16
 (*
pbödNumOfE¡rõs
)–Ë(*)
NULL
;

103 (*
pbödRemoveDev
)–
zAddrTy≥_t
 *
Addr
 ) = (*)
NULL
;

104 
	$byã
 (*
pBödInôNV
)–Ë(*)
NULL
;

105 (*
pBödSëDeÁu…NV
)–Ë(*)
NULL
;

106 
	$uöt16
 (*
pBödRe°‹eFromNV
)–Ë(*)
NULL
;

107 (*
pBödWrôeNV
)–Ë(*)
NULL
;

109 #i‡–
ADDRMGR_CALLBACK_ENABLED
 == 1 )

120 
	$BödAddrMgrCB
–
uöt8
 
upd©e
, 
AddrMgrE¡ry_t
 *
íåyNew
,

121 
AddrMgrE¡ry_t
 *
íåyOld
 )

124 
	}
}

138 
	$InôBödögTabÀ
( )

140 
	`oßl_mem£t
–
BödögTabÀ
, 0xFF, 
gBIND_REC_SIZE
 * 
gNWK_MAX_BINDING_ENTRIES
 );

142 
pbödAddE¡ry
 = 
bödAddE¡ry
;

143 
pbödNumOfE¡rõs
 = 
bödNumOfE¡rõs
;

144 
pbödRemoveDev
 = 
bödRemoveDev
;

145 
pBödInôNV
 = 
BödInôNV
;

146 
pBödSëDeÁu…NV
 = 
BödSëDeÁu…NV
;

147 
pBödRe°‹eFromNV
 = 
BödRe°‹eFromNV
;

148 
pBödWrôeNV
 = 
BödWrôeNV
;

150 
bödAddrMgrLoˇlLﬂded
 = 
FALSE
;

152 #i‡–
ADDRMGR_CALLBACK_ENABLED
 == 1 )

154 
	`AddrMgrRegi°î
–
ADDRMGR_REG_BINDING
, 
BödAddrMgrCB
 );

156 
	}
}

167 
BödögE¡ry_t
 *
	$bödFödEm±y
( )

169 
uöt16
 
x
;

171  
x
 = 0; x < 
gNWK_MAX_BINDING_ENTRIES
; x++ )

174 i‡–
BödögTabÀ
[
x
].
§cEP
 =
NV_BIND_EMPTY
 )

176  ( &
BödögTabÀ
[
x
] );

180  ( (
BödögE¡ry_t
 *)
NULL
 );

181 
	}
}

194 
uöt16
 
	$bödNumOfE¡rõs
( )

196 
uöt16
 
x
;

197 
uöt16
 
found
;

199  
found
 = 0, 
x
 = 0; x < 
gNWK_MAX_BINDING_ENTRIES
; x++ )

202 i‡–
BödögTabÀ
[
x
].
§cEP
 !
NV_BIND_EMPTY
 )

204 
found
 +
BödögTabÀ
[
x
].
numClu°îIds
;

208  ( 
found
 );

209 
	}
}

223 
	$bödC≠acôy
–
uöt16
 *
maxE¡rõs
, uöt16 *
u£dE¡rõs
 )

225 
uöt16
 
x
;

226 
uöt16
 
u£d
;

228  
u£d
 = 0, 
x
 = 0; x < 
gNWK_MAX_BINDING_ENTRIES
; x++ )

231 i‡–
BödögTabÀ
[
x
].
§cEP
 !
NV_BIND_EMPTY
 )

233 
u£d
++;

237 *
maxE¡rõs
 = 
gNWK_MAX_BINDING_ENTRIES
;

238 *
u£dE¡rõs
 = 
u£d
;

239 
	}
}

255 
BödögE¡ry_t
 *
	$bödAddE¡ry
–
byã
 
§cEpI¡
,

256 
zAddrTy≥_t
 *
d°Addr
, 
byã
 
d°EpI¡
,

257 
byã
 
numClu°îIds
, 
uöt16
 *
˛u°îIds
 )

259 
uöt8
 
ödex
;

260 
BödögE¡ry_t
* 
íåy
;

261 
bödFõlds_t
 
fõlds
;

264 
íåy
 = 
NULL
;

267 
	`bödAddrMgrLoˇlLﬂd
();

270 
fõlds
.
d°Index
 = 
	`bödAddrIndexGë
–
d°Addr
 );

271 
fõlds
.
§cEP
 = 
§cEpI¡
;

273 i‡–
d°Addr
->
addrMode
 =
AddrGroup
 )

275 
fõlds
.
d°AddrMode
 = 
DSTGROUPMODE_GROUP
;

276 
fõlds
.
d°EP
 = 0;

280 
fõlds
.
d°AddrMode
 = 
DSTGROUPMODE_ADDR
;

281 
fõlds
.
d°EP
 = 
d°EpI¡
;

284 i‡–
fõlds
.
d°Index
 !
INVALID_NODE_ADDR
 )

286  
ödex
 = 0; index < 
gNWK_MAX_BINDING_ENTRIES
; index++ )

288 i‡––
fõlds
.
§cEP
 =
BödögTabÀ
[
ödex
].srcEP ) &&

289 –
fõlds
.
d°AddrMode
 =
BödögTabÀ
[
ödex
].
d°GroupMode
 ) &&

290 –
fõlds
.
d°Index
 =
BödögTabÀ
[
ödex
].
d°Idx
 ) &&

291 –
fõlds
.
d°EP
 =
BödögTabÀ
[
ödex
].dstEP ) )

293 
íåy
 = &
BödögTabÀ
[
ödex
];

300 i‡–
íåy
 !
NULL
 )

303  
ödex
 = 0; index < 
numClu°îIds
; index++ )

306 i‡–
	`bödIsClu°îIDöLi°
–
íåy
, 
˛u°îIds
[
ödex
] ) =
FALSE
 )

309 i‡–
	`bödAddClu°îIdToLi°
–
íåy
, 
˛u°îIds
[
ödex
] ) =
FALSE
 )

312 
íåy
 = 
NULL
;

320 
íåy
 = 
	`bödFödEm±y
();

323 i‡–
íåy
 !
NULL
 )

326 
íåy
->
§cEP
 = 
fõlds
.srcEP;

327 
íåy
->
d°GroupMode
 = 
fõlds
.
d°AddrMode
;

328 
íåy
->
d°Idx
 = 
fõlds
.
d°Index
;

329 
íåy
->
d°EP
 = 
fõlds
.dstEP;

331 i‡–
numClu°îIds
 > 
gMAX_BINDING_CLUSTER_IDS
 )

333 
numClu°îIds
 = 
gMAX_BINDING_CLUSTER_IDS
;

336 
íåy
->
numClu°îIds
 =ÇumClusterIds;

338 
	`oßl_mem˝y
–
íåy
->
˛u°îIdLi°
,

339 
˛u°îIds
,

340 
numClu°îIds
 * (
uöt16
) );

345  
íåy
;

346 
	}
}

357 
byã
 
	$bödRemoveE¡ry
–
BödögE¡ry_t
 *
pBöd
 )

359 
	`oßl_mem£t
–
pBöd
, 0xFF, 
gBIND_REC_SIZE
 );

360  ( 
TRUE
 );

361 
	}
}

373 
byã
 
	$bödIsClu°îIDöLi°
–
BödögE¡ry_t
 *
íåy
, 
uöt16
 
˛u°îId
 )

375 
uöt8
 
x
;

377 i‡–
íåy
 !
NULL
 )

379  
x
 = 0; x < 
íåy
->
numClu°îIds
; x++ )

381 i‡–
íåy
->
˛u°îIdLi°
[
x
] =
˛u°îId
 )

383  ( 
TRUE
 );

388  ( 
FALSE
 );

389 
	}
}

401 
byã
 
	$bödRemoveClu°îIdFromLi°
–
BödögE¡ry_t
 *
íåy
, 
uöt16
 
˛u°îId
 )

403 
byã
 
x
;

404 
uöt16
 *
li°På
;

405 
byã
 
numIds
;

407 i‡–
íåy
 )

409 i‡–
íåy
->
numClu°îIds
 > 0 )

411 
li°På
 = 
íåy
->
˛u°îIdLi°
;

412 
numIds
 = 
íåy
->
numClu°îIds
;

415  
x
 = 0; x < 
numIds
; x++ )

417 i‡–
íåy
->
˛u°îIdLi°
[
x
] !
˛u°îId
 )

419 *
li°På
++ = 
íåy
->
˛u°îIdLi°
[
x
];

423 
íåy
->
numClu°îIds
--;

424 i‡–
íåy
->
numClu°îIds
 == 0 )

433 i‡–
íåy
 && (íåy->
numClu°îIds
 > 0) )

435  ( 
TRUE
 );

439  ( 
FALSE
 );

441 
	}
}

453 
byã
 
	$bödAddClu°îIdToLi°
–
BödögE¡ry_t
 *
íåy
, 
uöt16
 
˛u°îId
 )

455 i‡–
íåy
 &&É¡ry->
numClu°îIds
 < 
gMAX_BINDING_CLUSTER_IDS
 )

458 
íåy
->
˛u°îIdLi°
[íåy->
numClu°îIds
] = 
˛u°îId
;

459 
íåy
->
numClu°îIds
++;

460  ( 
TRUE
 );

462  ( 
FALSE
 );

463 
	}
}

477 
BödögE¡ry_t
 *
	$bödFödExi°ög
–
byã
 
§cEpI¡
,

478 
zAddrTy≥_t
 *
d°Addr
, 
byã
 
d°EpI¡
 )

480 
uöt16
 
d°Idx
;

481 
uöt16
 
x
;

484 i‡–
d°Addr
->
addrMode
 =
AddrGroup
 )

486 
d°Idx
 = 
d°Addr
->
addr
.
sh‹tAddr
;

490 
d°Idx
 = 
	`bödögAddrMgsHñ≥rFöd
–
d°Addr
 );

493 i‡–
d°Idx
 =
INVALID_NODE_ADDR
 )

495  ( (
BödögE¡ry_t
 *)
NULL
 );

499  
x
 = 0; x < 
gNWK_MAX_BINDING_ENTRIES
; x++ )

501 i‡–(
BödögTabÀ
[
x
].
§cEP
 =
§cEpI¡
) )

503 i‡–((
d°Addr
->
addrMode
 =
AddrGroup
)

504 && (
BödögTabÀ
[
x
].
d°GroupMode
 =
DSTGROUPMODE_GROUP
)

505 && (
d°Idx
 =
BödögTabÀ
[
x
].dstIdx))

506 || ((
d°Addr
->
addrMode
 !
AddrGroup
)

507 && (
BödögTabÀ
[
x
].
d°GroupMode
 =
DSTGROUPMODE_ADDR
)

508 && (
d°Idx
 =
BödögTabÀ
[
x
].d°IdxË&& (BödögTabÀ[x].
d°EP
 =
d°EpI¡
)) )

510  ( &
BödögTabÀ
[
x
] );

515  ( (
BödögE¡ry_t
 *)
NULL
 );

516 
	}
}

530 
	$bödRemoveDev
–
zAddrTy≥_t
 *
Addr
 )

532 
uöt16
 
idx
;

533 
uöt16
 
x
;

535 i‡–
Addr
->
addrMode
 =
AddrGroup
 )

537 
idx
 = 
Addr
->
addr
.
sh‹tAddr
;

541 
idx
 = 
	`bödögAddrMgsHñ≥rFöd
–
Addr
 );

544 i‡–
idx
 =
INVALID_NODE_ADDR
 )

550  
x
 = 0; x < 
gNWK_MAX_BINDING_ENTRIES
; x++ )

552 i‡––(
Addr
->
addrMode
 =
AddrGroup
Ë&& (
BödögTabÀ
[
x
].
d°GroupMode
 =
DSTGROUPMODE_GROUP
)

553 && (
BödögTabÀ
[
x
].
d°Idx
 =
idx
) ) ||

554 –(
Addr
->
addrMode
 !
AddrGroup
Ë&& (
BödögTabÀ
[
x
].
d°GroupMode
 =
DSTGROUPMODE_ADDR
)

555 && (
BödögTabÀ
[
x
].
d°Idx
 =
idx
) ) )

557 
	`bödRemoveE¡ry
–&
BödögTabÀ
[
x
] );

560 
	}
}

575 
	$bödRemoveSrcDev
–
uöt8
 
ï
 )

577 
uöt16
 
x
;

579  
x
 = 0; x < 
gNWK_MAX_BINDING_ENTRIES
; x++ )

581 i‡–(
ï
 =0xFFË|| (ï =
BödögTabÀ
[
x
].
§cEP
) )

583 
	`bödRemoveE¡ry
–&
BödögTabÀ
[
x
] );

586 
	}
}

602 
byã
 
	$bödNumBoundTo
–
zAddrTy≥_t
 *
devAddr
, 
byã
 
devEpI¡
, byã 
§cMode
 )

604 
BödögE¡ry_t
 *
pBöd
;

605 
uöt16
 
idx
;

606 
byã
 
num
;

607 
uöt16
 
x
;

610 
num
 = 0;

612 i‡–
devAddr
->
addrMode
 =
AddrGroup
 )

614 
idx
 = 
devAddr
->
addr
.
sh‹tAddr
;

618 
idx
 = 
	`bödögAddrMgsHñ≥rFöd
–
devAddr
 );

621  
x
 = 0; x < 
gNWK_MAX_BINDING_ENTRIES
; x++ )

623 
pBöd
 = &
BödögTabÀ
[
x
];

624 i‡–
§cMode
 )

626 i‡–
pBöd
->
§cEP
 =
devEpI¡
 )

628 
num
++;

633 i‡–((
devAddr
->
addrMode
 =
AddrGroup
)

634 && (
pBöd
->
d°GroupMode
 =
DSTGROUPMODE_GROUP
Ë&& (pBöd->
d°Idx
 =
idx
))

635 || ((
devAddr
->
addrMode
 !
AddrGroup
Ë&& (
pBöd
->
d°GroupMode
 =
DSTGROUPMODE_ADDR
)

636 && (
pBöd
->
d°Idx
 =
idx
Ë&& (pBöd->
d°EP
 =
devEpI¡
)) )

638 
num
++;

643  
num
;

644 
	}
}

657 
uöt16
 
	$bödNumReÊe˘i⁄s
–
uöt8
 
ï
, 
uöt16
 
˛u°îID
 )

659 
uöt16
 
x
;

660 
BödögE¡ry_t
 *
pBöd
;

661 
uöt16
 
˙t
 = 0;

662 
uöt8
 
bödEP
;

664  
x
 = 0; x < 
gNWK_MAX_BINDING_ENTRIES
; x++ )

666 
pBöd
 = &
BödögTabÀ
[
x
];

667 
bödEP
 = 
pBöd
->
§cEP
;

669 i‡–(
bödEP
 =
ï
Ë&& (
	`bödIsClu°îIDöLi°
–
pBöd
, 
˛u°îID
 )) )

671 
˙t
++;

675  ( 
˙t
 );

676 
	}
}

690 
BödögE¡ry_t
 *
	$bödFöd
–
uöt8
 
ï
, 
uöt16
 
˛u°îID
, uöt8 
skùpög
 )

692 
BödögE¡ry_t
 *
pBöd
;

693 
byã
 
skù≥d
 = 0;

694 
uöt16
 
x
;

696  
x
 = 0; x < 
gNWK_MAX_BINDING_ENTRIES
; x++ )

698 
pBöd
 = &
BödögTabÀ
[
x
];

700 i‡––
pBöd
->
§cEP
 =
ï
Ë&& 
	`bödIsClu°îIDöLi°
–pBöd, 
˛u°îID
 ))

702 i‡–
skù≥d
 < 
skùpög
 )

704 
skù≥d
++;

708  ( 
pBöd
 );

713  ( (
BödögE¡ry_t
 *)
NULL
 );

714 
	}
}

726 
byã
 
	$BödInôNV
( )

728 
byã
 
ªt
;

731 
ªt
 = 
	`oßl_nv_ôem_öô
–
ZCD_NV_BINDING_TABLE
,

732 (
uöt16
)(
gBIND_REC_SIZE
 + 
NV_BIND_ITEM_SIZE
), 
NULL
 );

734 i‡–
ªt
 !
ZSUCCESS
 )

736 
	`BödSëDeÁu…NV
();

739  ( 
ªt
 );

740 
	}
}

751 
	$BödSëDeÁu…NV
( )

753 
nvBödögHdr_t
 
hdr
;

756 
hdr
.
numRecs
 = 0;

759 
	`oßl_nv_wrôe
–
ZCD_NV_BINDING_TABLE
, 0, –
nvBödögHdr_t
 ), &
hdr
 );

760 
	}
}

771 
uöt16
 
	$BödRe°‹eFromNV
( )

773 
nvBödögHdr_t
 
hdr
;

774 
uöt16
 
numAdded
 = 0;

776 i‡–
	`oßl_nv_ªad
–
ZCD_NV_BINDING_TABLE
, 0, (
nvBödögHdr_t
), &
hdr
 ) =
ZSuc˚ss
 )

778 i‡(
hdr
.
numRecs
 > 0)

781 i‡–
	`oßl_nv_ªad
–
ZCD_NV_BINDING_TABLE
,

782 (
uöt16
)((
nvBödögHdr_t
)),

783 (
NV_BIND_REC_SIZE
 * 
gNWK_MAX_BINDING_ENTRIES
), 
BödögTabÀ
 ) =
ZSUCCESS
 )

785 
numAdded
 = 
gNWK_MAX_BINDING_ENTRIES
;

789  ( 
numAdded
 );

790 
	}
}

801 
	$BödWrôeNV
( )

803 
BödögE¡ry_t
 *
pBöd
;

804 
BödögE¡ry_t
 
böd
;

805 
nvBödögHdr_t
 
hdr
;

806 
uöt16
 
x
;

808 
hdr
.
numRecs
 = 0;

810  
x
 = 0; x < 
gNWK_MAX_BINDING_ENTRIES
; x++ )

812 
pBöd
 = &
BödögTabÀ
[
x
];

814 
	`oßl_mem˝y
–&
böd
, 
pBöd
, 
gBIND_REC_SIZE
 );

817 
	`oßl_nv_wrôe
–
ZCD_NV_BINDING_TABLE
,

818 (
uöt16
)(((
nvBödögHdr_t
)Ë+ (
x
 * 
NV_BIND_REC_SIZE
)),

819 
NV_BIND_REC_SIZE
, &
böd
 );

821 i‡–
pBöd
->
§cEP
 !
NV_BIND_EMPTY
 )

823 
hdr
.
numRecs
++;

828 
	`oßl_nv_wrôe
–
ZCD_NV_BINDING_TABLE
, 0, (
nvBödögHdr_t
), &
hdr
 );

829 
	}
}

841 
	$bödUpd©eAddr
–
uöt16
 
ﬁdAddr
, uöt16 
√wAddr
 )

843 
uöt16
 
ﬁdIdx
;

844 
uöt16
 
√wIdx
;

845 
zAddrTy≥_t
 
addr
;

846 
uöt16
 
x
;

847 
BödögE¡ry_t
 *
pBöd
;

849 
addr
.
addrMode
 = 
Addr16Bô
;

850 
addr
.addr.
sh‹tAddr
 = 
ﬁdAddr
;

851 
ﬁdIdx
 = 
	`bödögAddrMgsHñ≥rFöd
–&
addr
 );

852 
addr
.addr.
sh‹tAddr
 = 
√wAddr
;

853 
√wIdx
 = 
	`bödögAddrMgsHñ≥rFöd
–&
addr
 );

855  
x
 = 0; x < 
gNWK_MAX_BINDING_ENTRIES
; x++ )

857 
pBöd
 = &
BödögTabÀ
[
x
];

859 i‡–
pBöd
->
d°Idx
 =
ﬁdIdx
 )

861 
pBöd
->
d°Idx
 = 
√wIdx
;

864 
	}
}

875 
uöt16
 
	$bödögAddrMgsHñ≥rFöd
–
zAddrTy≥_t
 *
addr
 )

877 
AddrMgrE¡ry_t
 
íåy
;

880 
íåy
.
u£r
 = 
ADDRMGR_USER_BINDING
;

881 i‡–
addr
->
addrMode
 =
Addr16Bô
 )

883 
íåy
.
nwkAddr
 = 
addr
->addr.
sh‹tAddr
;

884 
	`AddrMgrE¡ryLookupNwk
–&
íåy
 );

888 
	`AddrMgrExtAddrSë
–
íåy
.
extAddr
, 
addr
->addr.extAddr );

889 
	`AddrMgrE¡ryLookupExt
–&
íåy
 );

892  ( 
íåy
.
ödex
 );

893 
	}
}

905 
uöt8
 
	$bödögAddrMgsHñ≥rC⁄vît
–
uöt16
 
idx
, 
zAddrTy≥_t
 *
addr
 )

907 
AddrMgrE¡ry_t
 
íåy
;

908 
uöt8
 
°©
;

911 
íåy
.
u£r
 = 
ADDRMGR_USER_BINDING
;

912 
íåy
.
ödex
 = 
idx
;

913 
°©
 = 
	`AddrMgrE¡ryGë
–&
íåy
 );

914 i‡–
°©
 )

916 
addr
->
addrMode
 = 
Addr64Bô
;

917 
	`oßl_˝yExtAddr
–
addr
->addr.
extAddr
, 
íåy
.extAddr );

920  ( 
°©
 );

921 
	}
}

932 
uöt16
 
	$bödögAddrMgsHñ≥rC⁄vîtSh‹t
–
uöt16
 
idx
 )

934 
AddrMgrE¡ry_t
 
íåy
;

937 
íåy
.
u£r
 = 
ADDRMGR_USER_BINDING
;

938 
íåy
.
ödex
 = 
idx
;

939 
	`AddrMgrE¡ryGë
–&
íåy
 );

941  ( 
íåy
.
nwkAddr
 );

942 
	}
}

954 
	$bödAddrMgrLoˇlLﬂd
( )

956 
AddrMgrE¡ry_t
 
íåy
;

957 
uöt16
 
∑ª¡
;

961 i‡–
bödAddrMgrLoˇlLﬂded
 =
FALSE
 )

964 
íåy
.
u£r
 = 
ADDRMGR_USER_BINDING
;

965 
íåy
.
nwkAddr
 = 
_NIB
.
nwkDevAddªss
;

966 
	`AddrMgrExtAddrSë
–
íåy
.
extAddr
, 
	`NLME_GëExtAddr
() );

967 
	`AddrMgrE¡ryUpd©e
–&
íåy
 );

970 
∑ª¡
 = 
	`NLME_GëCo‹dSh‹tAddr
();

971 i‡––
∑ª¡
 !
íåy
.
nwkAddr
 ) &&

972 –
∑ª¡
 !
INVALID_NODE_ADDR
 ) )

975 
íåy
.
nwkAddr
 = 
∑ª¡
;

976 
	`NLME_GëCo‹dExtAddr
–
íåy
.
extAddr
 );

977 
	`AddrMgrE¡ryUpd©e
–&
íåy
 );

980 
bödAddrMgrLoˇlLﬂded
 = 
TRUE
;

982 
	}
}

993 
uöt16
 
	$bödAddrIndexGë
–
zAddrTy≥_t
* 
addr
 )

995 
AddrMgrE¡ry_t
 
íåy
;

996 
uöt8
 
upd©e
;

998 
upd©e
 = 
FALSE
;

1001 
íåy
.
u£r
 = 
ADDRMGR_USER_BINDING
;

1003 i‡–
addr
->
addrMode
 =
Addr16Bô
 )

1005 
íåy
.
nwkAddr
 = 
addr
->addr.
sh‹tAddr
;

1007 i‡–
	`AddrMgrE¡ryLookupNwk
–&
íåy
 ) =
FALSE
 )

1009 
upd©e
 = 
TRUE
;

1012 i‡–
addr
->
addrMode
 =
Addr64Bô
 )

1014 
	`AddrMgrExtAddrSë
–
íåy
.
extAddr
, 
addr
->addr.extAddr );

1016 i‡–
	`AddrMgrE¡ryLookupExt
–&
íåy
 ) =
FALSE
 )

1018 
upd©e
 = 
TRUE
;

1021 i‡–
addr
->
addrMode
 =
AddrGroup
 )

1023 
íåy
.
ödex
 = 
addr
->addr.
sh‹tAddr
;

1027 
íåy
.
ödex
 = 
INVALID_NODE_ADDR
;

1030 i‡–
upd©e
 )

1032 
	`AddrMgrE¡ryUpd©e
–&
íåy
 );

1035  
íåy
.
ödex
;

1036 
	}
}

1047 
BödögE¡ry_t
 *
	$GëBödögTabÀE¡ry
–
uöt16
 
Nth
 )

1049 
BödögE¡ry_t
 *
π∫
 = 
NULL
;

1051 #i‡
	`deföed
 ( 
REFLECTOR
 )

1052 
uöt16
 
idx
, 
˙t
 = 0;

1054  
idx
 = 0; idx < 
gNWK_MAX_BINDING_ENTRIES
; idx++ )

1056 i‡–
BödögTabÀ
[
idx
].
§cEP
 !
NV_BIND_EMPTY
 )

1058 i‡–
˙t
++ =
Nth
 )

1060 
π∫
 = 
BödögTabÀ
+
idx
;

1066 ()
Nth
;

1069  
π∫
;

1070 
	}
}

	@Components/stack/nwk/BindingTable.h

40 #i‚de‡
BINDINGTABLE_H


41 
	#BINDINGTABLE_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComdef.h
"

52 
	~"oßl.h
"

53 
	~"nwk.h
"

54 
	~"AssocLi°.h
"

63 
	#MAX_DEVICE_PAIRS
 255

64 

	)

65 
	#DSTGROUPMODE_ADDR
 0

	)

66 
	#DSTGROUPMODE_GROUP
 1

	)

74 
uöt16
 
numRecs
;

75 } 
	tnvBödögHdr_t
;

82 
uöt8
 
§cEP
;

83 
uöt8
 
d°GroupMode
;

84 
uöt16
 
d°Idx
;

87 
uöt8
 
d°EP
;

88 
uöt8
 
numClu°îIds
;

89 
uöt16
 
˛u°îIdLi°
[
MAX_BINDING_CLUSTER_IDS
];

93 } 
	tBödögE¡ry_t
;

102 
BödögE¡ry_t
 
BödögTabÀ
[];

111 
InôBödögTabÀ
( );

116 
byã
 
bödRemoveE¡ry
–
BödögE¡ry_t
 *
pBöd
 );

121 
byã
 
bödIsClu°îIDöLi°
–
BödögE¡ry_t
 *
íåy
, 
uöt16
 
˛u°îId
 );

126 
byã
 
bödRemoveClu°îIdFromLi°
–
BödögE¡ry_t
 *
íåy
, 
uöt16
 
˛u°îId
 );

131 
byã
 
bödAddClu°îIdToLi°
–
BödögE¡ry_t
 *
íåy
, 
uöt16
 
˛u°îId
 );

136 
BödögE¡ry_t
 *
bödFödExi°ög
–
byã
 
§cEpI¡
,

137 
zAddrTy≥_t
 *
d°Sh‹tAddr
, 
byã
 
d°EpI¡
 );

142 
nwk_ªmove_bödSrc
–
zAddrTy≥_t
 *
§cAddr
, 
byã
 
ïI¡
,

143 
byã
 
numClu°îIds
, 
uöt16
 *
˛u°îIds
 );

148 
bödRemoveDev
–
zAddrTy≥_t
 *
sh‹tAddr
);

153 
bödRemoveSrcDev
–
uöt8
 
ï
 );

158 
byã
 
bödNumBoundTo
–
zAddrTy≥_t
 *
devAddr
, byã 
devEpI¡
, byã 
§cMode
 );

163 
uöt16
 
bödNumReÊe˘i⁄s
–
uöt8
 
ï
, uöt16 
˛u°îID
 );

169 
BödögE¡ry_t
 *
bödFöd
–
uöt8
 
ï
, 
uöt16
 
˛u°îID
, uöt8 
skùpög
 );

174 
nwk_H™dBödögTimeout
( );

179 
byã
 
BödInôNV
( );

184 
BödSëDeÁu…NV
( );

189 
uöt16
 
BödRe°‹eFromNV
( );

194 
BödWrôeNV
( );

199 
bödUpd©eAddr
–
uöt16
 
ﬁdAddr
, uöt16 
√wAddr
 );

204 
BödögE¡ry_t
 *
bödAddE¡ry
–
byã
 
§cEpI¡
,

205 
zAddrTy≥_t
 *
d°Addr
, 
byã
 
d°EpI¡
,

206 
byã
 
numClu°îIds
, 
uöt16
 *
˛u°îIds
 );

211 
uöt16
 
bödNumOfE¡rõs
( );

217 
bödC≠acôy
–
uöt16
 *
maxE¡rõs
, uöt16 *
u£dE¡rõs
 );

226 
BödögE¡ry_t
 *(*
pbödAddE¡ry
)–
byã
 
§cEpI¡
,

227 
zAddrTy≥_t
 *
d°Addr
, 
byã
 
d°EpI¡
,

228 
byã
 
numClu°îIds
, 
uöt16
 *
˛u°îIds
 );

233 
uöt16
 (*
pbödNumOfE¡rõs
)( );

238 (*
pbödRemoveDev
)–
zAddrTy≥_t
 *
Addr
 );

243 
byã
 (*
pBödInôNV
)( );

248 (*
pBödSëDeÁu…NV
)( );

253 
uöt16
 (*
pBödRe°‹eFromNV
)( );

258 (*
pBödWrôeNV
)( );

263 
uöt8
 
bödögAddrMgsHñ≥rC⁄vît
–
uöt16
 
idx
, 
zAddrTy≥_t
 *
addr
 );

268 
uöt16
 
bödögAddrMgsHñ≥rC⁄vîtSh‹t
–uöt16 
idx
 );

273 
BödögE¡ry_t
 *
GëBödögTabÀE¡ry
–
uöt16
 
Nth
 );

277 #ifde‡
__˝lu•lus


	@Components/stack/nwk/NLMEDE.h

40 #i‚de‡
NLMEDE_H


41 
	#NLMEDE_H


	)

43 #ifde‡
__˝lu•lus


50 
	~"ZMAC.h
"

51 
	~"AssocLi°.h
"

52 
	~"nwk_bufs.h
"

63 
	#TX_OPTIONS_GTS
 0x01

	)

64 
	#TX_OPTIONS_SECURITY_ENABLE
 0x02

	)

67 
	#BEACON_ORDER_NO_BEACONS
 15

	)

68 
	#BEACON_ORDER_4_MINUTES
 14

69 
	#BEACON_ORDER_2_MINUTES
 13

70 
	#BEACON_ORDER_1_MINUTE
 12

71 
	#BEACON_ORDER_31_SECONDS
 11

72 
	#BEACON_ORDER_15_SECONDS
 10

73 
	#BEACON_ORDER_7_5_SECONDS
 9

74 
	#BEACON_ORDER_4_SECONDS
 8

75 
	#BEACON_ORDER_2_SECONDS
 7

76 
	#BEACON_ORDER_1_SECOND
 6

77 
	#BEACON_ORDER_480_MSEC
 5

	)

78 
	#BEACON_ORDER_240_MSEC
 4

	)

79 
	#BEACON_ORDER_120_MSEC
 3

	)

80 
	#BEACON_ORDER_60_MSEC
 2

	)

81 
	#BEACON_ORDER_30_MSEC
 1

	)

82 
	#BEACON_ORDER_15_MSEC
 0

	)

84 
	#STARTING_SCAN_DURATION
 5

	)

85 
	#MAX_SCAN_DURATION
 15

	)

86 
	#ENERGY_SCAN_INCREMENT
 16

	)

89 
	#NLME_ED_SCAN
 0

	)

90 
	#NLME_DISC_SCAN
 1

	)

91 
	#NLME_PID_SCAN
 2

	)

94 
	#CAPINFO_ALTPANCOORD
 0x01

	)

95 
	#CAPINFO_DEVICETYPE_FFD
 0x02

	)

96 
	#CAPINFO_DEVICETYPE_RFD
 0x00

	)

97 
	#CAPINFO_POWER_AC
 0x04

	)

98 
	#CAPINFO_RCVR_ON_IDLE
 0x08

	)

99 
	#CAPINFO_SECURITY_CAPABLE
 0x40

	)

100 
	#CAPINFO_ALLOC_ADDR
 0x80

	)

105 
	ebˇ°_addr_e
 {

106 
NWK_BROADCAST_SHORTADDR_RESRVD_F8
 = 0xFFF8,

107 
NWK_BROADCAST_SHORTADDR_RESRVD_F9
,

108 
NWK_BROADCAST_SHORTADDR_RESRVD_FA
,

109 
NWK_BROADCAST_SHORTADDR_RESRVD_FB
,

110 
NWK_BROADCAST_SHORTADDR_DEVZCZR
,

111 
NWK_BROADCAST_SHORTADDR_DEVRXON
,

113 
NWK_BROADCAST_SHORTADDR_DEVALL
 = 0xFFFF

115 
bˇ°_addr_e
 
	tbˇ°_addr_t
;

116 
	#NWK_BROADCAST_SHORTADDR
 
NWK_BROADCAST_SHORTADDR_DEVALL


	)

119 
	#NWK_BROADCAST_FILTER_DEVALL
 ((
uöt8
)0x01)

	)

120 
	#NWK_BROADCAST_FILTER_DEVRXON
 ((
uöt8
)0x02)

	)

121 
	#NWK_BROADCAST_FILTER_DEVZCZR
 ((
uöt8
)0x04)

	)

122 
	#NWK_BROADCAST_FILTER_RESRVD
 ((
uöt8
)0x08)

	)

123 
	#NWK_BROADCAST_FILTER_ANY
 ( \

124 
NWK_BROADCAST_FILTER_DEVALL
 | \

125 
NWK_BROADCAST_FILTER_DEVRXON
 | \

126 
NWK_BROADCAST_FILTER_DEVZCZR
 | \

127 
NWK_BROADCAST_FILTER_RESRVD
 \

128 )

	)

129 
	eaddr_fûãr_e
 {

130 
ADDR_NOT_BCAST
,

131 
ADDR_BCAST_NOT_ME
,

132 
ADDR_BCAST_FOR_ME


134 
addr_fûãr_e
 
	taddr_fûãr_t
;

137 
	#NWK_ASSOC_JOIN
 0

	)

138 
	#NWK_ASSOC_REJOIN_UNSECURE
 1

	)

139 
	#NWK_ASSOC_REJOIN_SECURE
 2

	)

141 
	#NWK_FRAME_TYPE_MASK
 0x03

	)

142 
	#NWK_FRAMETYPE_FORCE_SEQ
 0x80

	)

147 
	#NWK_NV_NIB_ENABLE
 0x01

	)

148 
	#NWK_NV_DEVICELIST_ENABLE
 0x02

	)

149 
	#NWK_NV_BINDING_ENABLE
 0x04

	)

150 
	#NWK_NV_ADDRMGR_ENABLE
 0x08

	)

157 
nwkSequí˚Num
 = 0x81,

158 
nwkPassiveAckTimeout
,

159 
nwkMaxBrﬂdˇ°Rërõs
,

160 
nwkMaxChûdªn
,

161 
nwkMaxDïth
,

162 
nwkMaxRouãrs
,

163 
nwkNeighb‹TabÀ
,

164 
nwkBrﬂdˇ°DñivîyTime
,

165 
nwkRï‹tC⁄°™tCo°
,

166 
nwkRouãDiscRërõs
,

167 
nwkRoutögTabÀ
,

168 
nwkSecuªAŒFømes
,

169 
nwkSecurôyLevñ
,

170 
nwkSymLök
,

171 
nwkC≠abûôyInfo
,

180 
nwkTønß˘i⁄Pîsi°í˚Time
 = 0x95,

184 
nwkPrŸocﬁVîsi⁄
 = 0x98,

189 
nwkRouãDiscovîyTime
 = 0x9B,

190 
nwkNumNeighb‹TabÀE¡rõs
,

191 
nwkNumRoutögTabÀE¡rõs
,

192 
nwkNwkSèã
,

193 
nwkMAX_NIB_ITEMS


194 }
	tZNwkAâribuãs_t
;

198 
uöt16
 
∑nId
;

199 
byã
 
logiˇlCh™√l
;

200 
byã
 
rouãrC≠acôy
;

201 
byã
 
devi˚C≠acôy
;

202 
byã
 
vîsi⁄
;

203 
byã
 
°ackProfûe
;

204 
uöt16
 
cho£nRouãr
;

205 
uöt8
 
cho£nRouãrLökQuÆôy
;

206 
uöt8
 
cho£nRouãrDïth
;

207 
uöt8
 
exãndedPANID
[
Z_EXTADDR_LEN
];

208 
byã
 
upd©eId
;

209 *
√xtDesc
;

210 } 
	t√tw‹kDesc_t
;

215 
uöt8
 
ªœyC¡
;

216 
uöt8
 
ªœyIdx
;

217 
uöt16
* 
ªœyLi°
;

218 } 
	tNLDE_SrcFømeF‹m©_t
;

222 
uöt8
 
bufLígth
;

223 
uöt8
 
hdrLí
;

224 
uöt8
 
‰ameTy≥
;

225 
uöt8
 
¥ŸocﬁVîsi⁄
;

226 
uöt8
 
discovîRouã
;

227 
uöt8
 
mu…iˇ°
;

228 
uöt8
 
£cuª
;

229 
uöt8
 
d°ExtAddrSë
;

230 
uöt8
 
§cExtAddrSë
;

231 
uöt16
 
d°Addr
;

232 
uöt16
 
§cAddr
;

233 
uöt16
 
macD°Addr
;

234 
uöt16
 
å™sID
;

235 
uöt8
 
ødius
;

236 
uöt8
 
brﬂdˇ°Id
;

237 
uöt8
* 
d°ExtAddr
;

238 
uöt8
* 
§cExtAddr
;

239 
uöt8
 
nsduLígth
;

240 
uöt8
 
§cRouãSë
;

241 
NLDE_SrcFømeF‹m©_t
 
§cfd
;

242 
uöt8
* 
nsdu
;

243 } 
	tNLDE_FømeF‹m©_t
;

247 
uöt8
 
LökQuÆôy
;

248 
uöt8
 
c‹ªœti⁄
;

249 
öt8
 
rssi
;

250 } 
	tNLDE_Sig«l_t
;

252 
	#NLME_SCAN_FIELDS_RES_SIZE
 1

	)

256 
uöt8
 
‰ameTy≥
;

257 
uöt8
 
hdrLí
;

258 
uöt16
 
d°Addr
;

259 
uöt16
 
§cAddr
;

260 
uöt8
 
§cRouãSë
;

261 
NLDE_SrcFømeF‹m©_t
 
§cfd
;

262 
uöt8
* 
nsdu
;

263 
uöt8
 
nsduLí
;

264 
uöt8
 
nsduH™dÀ
;

265 
uöt16
 
nsduH™dÀO±i⁄s
;

266 
uöt8
 
£cuª
;

267 
uöt8
 
discovîRouã
;

268 
uöt8
 
ødius
;

269 
uöt8
 
£qNum
;

270 
uöt8
 
mu…iˇ°
;

271 
uöt8
 
d°ExtAddrSë
;

272 
uöt8
 
§cExtAddrSë
;

273 
uöt8
* 
d°ExtAddr
;

274 
uöt8
* 
§cExtAddr
;

275 
uöt16
 
å™sID
;

276 * 
fd
;

277 } 
	tNLDE_FømeD©a_t
;

282 
NLDE_FømeD©a_t
 
nfd
;

283 } 
	tNLDE_D©aReq_t
;

287 
uöt8
 
ovîhód
;

288 
uöt8
 
nsduLí
;

289 
uöt8
 
£cuª
;

290 } 
	tNLDE_D©aReqAŒoc_t
;

294 
uöt32
 
ch™√ls
;

295 
uöt8
 
duøti⁄
;

296 
uöt8
 
sˇnTy≥
;

297 
uöt8
 
sˇnAµ
;

298 } 
	tNLME_SˇnFõlds_t
;

302 
nwkDB_t
* 
db
;

303 
ZSètus_t
 
°©us
;

304 } 
	tNLDE_D©aCnf_t
;

308 
uöt8
* 
extAddr
;

309 
uöt8
 
ªmoveChûdªn
;

310 
uöt8
 
ªjoö
;

311 
uöt8
 
sûít
;

312 } 
	tNLME_LóveReq_t
;

316 
uöt8
 
ªmoveChûdªn
;

317 
uöt8
 
ªjoö
;

318 } 
	tNLME_LóveR•_t
;

322 
uöt16
 
d°Addr
;

323 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

324 
uöt8
 
ªmoveChûdªn
;

325 
uöt8
 
ªjoö
;

326 
uöt8
 
°©us
;

327 } 
	tNLME_LóveCnf_t
;

331 
uöt16
 
§cAddr
;

332 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

333 
uöt8
 
ªque°
;

334 
uöt8
 
ªmoveChûdªn
;

335 
uöt8
 
ªjoö
;

336 } 
	tNLME_LóveInd_t
;

340 
uöt16
 
sour˚Addr
;

341 
uöt16
 
∑nID
;

342 
uöt8
 
logiˇlCh™√l
;

343 
uöt8
 
≥rmôJoöög
;

344 
uöt8
 
rouãrC≠acôy
;

345 
uöt8
 
devi˚C≠acôy
;

346 
uöt8
 
¥ŸocﬁVîsi⁄
;

347 
uöt8
 
°ackProfûe
 ;

348 
uöt8
 
LQI
 ;

349 
uöt8
 
dïth
 ;

350 
uöt8
 
upd©eID
;

351 
uöt8
 
exãndedP™ID
[
Z_EXTADDR_LEN
];

352 } 
	tNLME_bóc⁄Ind_t
;

356 
byã
 
NLME_PîmôJoöög
;

357 
byã
 
NLME_AssocPîmissi⁄
;

358 
uöt16
 
ßvedRe•⁄£R©e
;

361 
NLME_SˇnFõlds_t
* 
NLME_SˇnFõlds
;

375 
ZSètus_t
 
NLDE_D©aReq
–
NLDE_D©aReq_t
* 
ªq
 );

382 
NLDE_D©aReq_t
* 
NLDE_D©aReqAŒoc
–
NLDE_D©aReqAŒoc_t
* 
dø
 );

392 
NLDE_D©aCnf
–
NLDE_D©aCnf_t
* 
˙f
 );

400 
NLDE_D©aIndiˇti⁄
–
NLDE_FømeF‹m©_t
 *
ff
, 
NLDE_Sig«l_t
 *
sig
, 
uöt32
 
time°amp
 );

431 
ZSètus_t
 
NLME_Nëw‹kF‹m©i⁄Reque°
–
uöt16
 
P™Id
, 
uöt8
* 
ExãndedPANID
, 
uöt32
 
SˇnCh™√ls
,

432 
byã
 
SˇnDuøti⁄
, byã 
Bóc⁄Ordî
,

433 
byã
 
Su≥r‰ameOrdî
, byã 
B©ãryLi„Exãnsi⁄
 );

442 
NLME_Nëw‹kF‹m©i⁄C⁄fúm
–
ZSètus_t
 
Sètus
 );

449 
ZSètus_t
 
NLME_Nëw‹kDiscovîyReque°
–
uöt32
 
SˇnCh™√ls
,

450 
uöt8
 
sˇnDuøti⁄
);

455 
ZSètus_t
 
NLME_NwkDiscReq2
–
NLME_SˇnFõlds_t
* 
fõlds
 );

460 
NLME_NwkDiscTîm
( );

467 
NLME_Nëw‹kDiscovîyC⁄fúm
(
uöt8
 
°©us
);

476 
ZSètus_t
 
NLME_PîmôJoöögReque°
–
byã
 
PîmôDuøti⁄
 );

482 
NLME_PîmôJoöögEvít
( );

491 
ZSètus_t
 
NLME_JoöReque°
–
uöt8
 *
exãndedPANID
, 
uöt16
 
P™Id
,

492 
uöt8
 
ch™√l
, uöt8 
C≠abûôyFœgs
,

493 
uöt16
 
cho£nP¨ít
, 
uöt8
 
∑ª¡Dïth
 );

502 
ZSètus_t
 
NLME_Dúe˘JoöReque°
–
byã
 *
DevExtAddªss
, byã 
ˇpInfo
 );

509 
ZSètus_t
 
NLME_Dúe˘JoöReque°WôhAddr
–
byã
 *
DevExtAddªss
, 
uöt16
 
sh‹tAddªss
, 
uöt8
 
ˇpInfo
 );

518 
ZSètus_t
 
NLME_OΩh™JoöReque°
–
uöt32
 
SˇnCh™√ls
, 
byã
 
SˇnDuøti⁄
 );

524 
ZSètus_t
 
NLME_ReJoöReque°
–
uöt8
 *
ExãndedPANID
, uöt8 
ch™√l
 );

530 
ZSètus_t
 
NLME_ReJoöReque°Un£cuª
–
uöt8
 *
ExãndedPANID
, uöt8 
ch™√l
 );

542 
NLME_JoöC⁄fúm
–
uöt16
 
P™Id
, 
ZSètus_t
 
Sètus
 );

551 
ZSètus_t
 
NLME_JoöIndiˇti⁄
–
uöt16
 
Sh‹tAddªss
,

552 
uöt8
 *
ExãndedAddªss
,

553 
uöt8
 
C≠abûôyFœgs
,

554 
uöt8
 
ty≥
 );

565 
ZSètus_t
 
NLME_SèπRouãrReque°
–
byã
 
Bóc⁄Ordî
,

566 
byã
 
Su≥r‰ameOrdî
,

567 
byã
 
B©ãryLi„Exãnsi⁄
 );

576 
NLME_SèπRouãrC⁄fúm
–
ZSètus_t
 
Sètus
 );

583 
NLME_bóc⁄NŸifyInd
(
NLME_bóc⁄Ind_t
 *
pBóc⁄
);

592 
ZSètus_t
 
NLME_LóveReq
–
NLME_LóveReq_t
* 
ªq
 );

602 
NLME_LóveCnf
–
NLME_LóveCnf_t
* 
˙f
 );

611 
NLME_LóveInd
–
NLME_LóveInd_t
* 
öd
 );

617 
ZSètus_t
 
NLME_LóveR•
–
NLME_LóveR•_t
* 
r•
 );

626 
ZSètus_t
 
NLME_Re£tReque°
( );

635 
ZSètus_t
 
NLME_SyncReque°
–
byã
 
Tøck
 );

645 
NLME_SyncIndiˇti⁄
–
byã
 
ty≥
, 
uöt16
 
sh‹tAddr
 );

651 
NLME_PîmôJoöögTimeout
( );

661 
NLME_PﬁlC⁄fúm
–
byã
 
°©us
 );

670 
ZSètus_t
 
NLME_GëReque°
–
ZNwkAâribuãs_t
 
NIBAâribuã
, 
uöt16
 
Index
,

671 *
VÆue
 );

680 
ZSètus_t
 
NLME_SëReque°
–
ZNwkAâribuãs_t
 
NIBAâribuã
,

681 
uöt16
 
Index
,

682 *
VÆue
 );

690 
ZSètus_t
 
NLME_RouãDiscovîyReque°
–
uöt16
 
D°Addªss
, 
byã
 
›ti⁄s
, 
uöt8
 
ødius
 );

697 
NLME_C⁄˚¡øt‹Indiˇti⁄
–
uöt16
 
nwkAddr
, 
uöt8
 *
extAddr
, uöt8 
pktCo°
 );

703 
ZSètus_t
 
NLME_EDSˇnReque°
–
uöt32
 
SˇnCh™√ls
, 
uöt8
 
sˇnDuøti⁄
);

708 
NLME_EDSˇnC⁄fúm
–
uöt8
 
°©us
, 
uöt32
 
sˇ¬edCh™√ls
, uöt8 *
íîgyDëe˘Li°
 );

719 
byã
 *
NLME_GëExtAddr
( );

726 
uöt16
 
NLME_GëSh‹tAddr
( );

734 
uöt16
 
NLME_GëCo‹dSh‹tAddr
( );

742 
NLME_GëCo‹dExtAddr
–
byã
 * );

747 
ZMacSètus_t
 
NwkPﬁlReq
–
byã
 
£curôyE«bÀ
 );

754 
NLME_SëPﬁlR©e
–
uöt16
 
√wR©e
 );

761 
NLME_SëQueuedPﬁlR©e
–
uöt16
 
√wR©e
 );

768 
NLME_SëRe•⁄£R©e
–
uöt16
 
√wR©e
 );

775 
byã
 
NLME_InôNV
( );

780 
NLME_SëDeÁu…NV
( );

785 
byã
 
NLME_Re°‹eFromNV
( );

795 
NLME_Upd©eNV
–
byã
 
íabÀs
 );

813 
ZSètus_t
 
NLME_CheckNewAddrSë
–
uöt16
 
sh‹tAddr
, 
uöt8
 *
extAddr
 );

819 
NLME_Rï‹tAddªssC⁄Êi˘
–
uöt16
 
sh‹tAddr
, 
uöt8
 
f‹˚S≥cülMode
 );

822 
NLME_Co‹dö©‹Inô
( );

823 
NLME_Devi˚JoöögInô
( );

825 (*
≤wk_SˇnPANCh™Sñe˘
)–
ZMacSˇnCnf_t
 *
∑øm
 );

826 (*
≤wk_SˇnPANCh™Vîify
)–
ZMacSˇnCnf_t
 *
∑øm
 );

827 (*
≤wk_SˇnJoöögOΩh™
)–
ZMacSˇnCnf_t
 *
∑øm
 );

828 (*
pNLME_Nëw‹kF‹m©i⁄C⁄fúm
)–
ZSètus_t
 
Sètus
 );

830 
NLME_InôStocha°icAddªssög
( );

831 
NLME_InôTªeAddªssög
( );

833 
ZSètus_t
 
NLME_RódNwkKeyInfo
(
uöt16
 
ödex
, uöt16 
Àn
, *
keyöfo
, uöt16 
NvId
);

838 #ifde‡
__˝lu•lus


	@Components/stack/nwk/aps_frag.h

39 #i‚de‡
APSF_H


40 
	#APSF_H


	)

42 #ifde‡
__˝lu•lus


52 
	~"ZComDef.h
"

53 
	~"AF.h
"

60 
	#APSF_SCHED_EVT
 0x0001

	)

61 
	#APSF_MAX_WINDOW_SIZE
 8

62 

	)

68 
	#APSF_E«bÀd
 (
APSF_èskID
 !0xff)

	)

75 
uöt8
 
APSF_èskID
;

85 
APSF_Inô
(
uöt8
 
èsk_id
);

90 
APSF_Inô
(
uöt8
 
èsk_id
);

91 
UINT16
 
APSF_Pro˚ssEvít
–
uöt8
 
èsk_id
, UINT16 
evíts
 );

92 
afSètus_t
 
APSF_SídFøgmíãd
(
APSDE_D©aReq_t
 *
pReq
);

93 
APSF_Pro˚ssAck
(
≠s_FømeF‹m©_t
 *
aff
, 
uöt16
 
§cAddr
, 
uöt8
 
°©us
);

94 
APSF_SídOßlMsg
(
uöt8
 *
msgPå
);

96 
afSètus_t
 
	tAPSF_SídFøgmíãd_t
(
	tAPSDE_D©aReq_t
 *
	tpReq
);

97 
	tAPSF_Pro˚ssAck_t
(
	t≠s_FømeF‹m©_t
 *
	taff
, 
	tuöt16
 
	t§cAddr
, 
	tuöt8
 
	t°©us
);

98 
	tAPSF_SídOßlMsg_t
(
	tuöt8
 *
	tmsgPå
);

100 
APSF_SídFøgmíãd_t
 *
≠sfSídFøgmíãd
;

101 
APSF_Pro˚ssAck_t
 *
≠sfPro˚ssAck
;

102 
APSF_SídOßlMsg_t
 *
≠sfSídOßlMsg
;

104 #ifde‡
__˝lu•lus


	@Components/stack/nwk/aps_groups.h

40 #i‚de‡
APSGROUPS_H


41 
	#APSGROUPS_H


	)

43 #ifde‡
__˝lu•lus


50 
	~"ZComDef.h
"

55 
	#≠s_GroupsRemaögC≠acôy
(Ë–
APS_MAX_GROUPS
 - 
	`≠s_Cou¡AŒGroups
(Ë)

	)

60 
	#APS_GROUPS_FIND_FIRST
 0xFE

	)

61 
	#APS_GROUPS_EP_NOT_FOUND
 0xFE

	)

63 
	#APS_GROUP_NAME_LEN
 16

	)

72 
uöt16
 
ID
;

73 
uöt8
 
«me
[
APS_GROUP_NAME_LEN
];

74 } 
	t≠s_Group_t
;

76 
	s≠sGroupIãm


78 
≠sGroupIãm
 *
√xt
;

79 
uöt8
 
ídpoöt
;

80 
≠s_Group_t
 
group
;

81 } 
	t≠sGroupIãm_t
;

86 
≠sGroupIãm_t
 *
≠sGroupTabÀ
;

95 
ZSètus_t
 
≠s_AddGroup
–
uöt8
 
ídpoöt
, 
≠s_Group_t
 *
group
 );

101 
≠s_Group_t
 *
≠s_FödGroup
–
uöt8
 
ídpoöt
, 
uöt16
 
groupID
 );

107 
uöt8
 
≠s_FödGroupF‹Endpoöt
–
uöt16
 
groupID
, uöt8 
œ°EP
 );

113 
uöt8
 
≠s_FödAŒGroupsF‹Endpoöt
–uöt8 
ídpoöt
, 
uöt16
 *
groupLi°
 );

119 
uöt8
 
≠s_RemoveGroup
–uöt8 
ídpoöt
, 
uöt16
 
groupID
 );

124 
≠s_RemoveAŒGroup
–
uöt8
 
ídpoöt
 );

129 
uöt8
 
≠s_Cou¡Groups
–uöt8 
ídpoöt
 );

134 
uöt8
 
≠s_Cou¡AŒGroups
( );

139 
uöt8
 
≠s_GroupsInôNV
( );

144 
≠s_GroupsSëDeÁu…NV
( );

149 
≠s_GroupsWrôeNV
( );

154 
uöt16
 
≠s_GroupsRe°‹eFromNV
( );

158 #ifde‡
__˝lu•lus


	@Components/stack/nwk/aps_util.h

40 #i‚de‡
APSUTIL_H


41 
	#APSUTIL_H


	)

43 #ifde‡
__˝lu•lus


50 
	~"ZComDef.h
"

51 
	~"APSMEDE.h
"

76 
byã
 
≠sReÊe˘Msg
–
zAddrTy≥_t
 *
SrcAddªss
,

77 
≠s_FømeF‹m©_t
 *
aff
, 
uöt8
 
LökQuÆôy
,

78 
uöt8
 
ackReq
, uöt8 
SecurôyU£
,

79 
uöt8
 
°¨tögIndex
 );

81 
≠sReReÊe˘Msg
–
nwkDB_t
 *
ªc
 );

86 
APSDE_P¨£Msg
–
NLDE_FømeF‹m©_t
 *
ff
,

87 
≠s_FømeF‹m©_t
 *
aff
 );

89 
≠sGíî©eAck
–
uöt16
 
d°Addr
, 
≠s_FømeF‹m©_t
 *
aff
 );

91 
≠sPro˚ssAck
–
uöt16
 
§cAddr
, 
≠s_FømeF‹m©_t
 *
aff
 );

95 #ifde‡
__˝lu•lus


	@Components/stack/nwk/nwk.h

40 #i‚de‡
NWK_H


41 
	#NWK_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"ZMAC.h
"

53 
	~"nwk_bufs.h
"

54 
	~"NLMEDE.h
"

55 
	~"s•.h
"

66 
	#MAC_SCAN_REQ
 0x01

	)

67 
	#NWK_NETWORKSTART_REQ
 0x02

	)

68 
	#MAC_ASSOCIATE_REQ
 0x03

	)

69 
	#NWK_REMOTE_GET_REQ
 0x04

	)

70 
	#NWK_REMOTE_SET_REQ
 0x05

	)

71 
	#NWK_ASSOCIATE_RESP
 0x06

	)

72 
	#NWK_DISASSOCIATE_REQ
 0x07

	)

74 
	#NWK_AUTO_POLL_EVT
 0x0001

	)

75 
	#NWK_NOT_EXPECTING_EVT
 0x0004

	)

76 
	#RTG_TIMER_EVENT
 0x0010

	)

77 
	#NWK_DATABUF_SEND
 0x0020

	)

78 
	#NWK_BCAST_TIMER_EVT
 0x0040

	)

79 
	#NWK_PERMITJOIN_EVT
 0x0080

	)

80 
	#NWK_LINK_STATUS_EVT
 0x0100

	)

81 
	#NWK_PID_UPDATE_EVT
 0x0200

	)

82 
	#NWK_REJOIN_TIMEOUT_EVT
 0x0400

	)

83 
	#NWK_MTO_RTG_REQ_EVT
 0x0800

	)

84 
	#NWK_MTO_RTG_REQ_DELAY_EVT
 0x1000

	)

85 
	#NWK_BROADCAST_MSG_EVT
 0x2000

	)

88 
	#NWK_CMD_ID
 0

	)

89 
	#NWK_PARAMS_ID
 1

	)

90 
	#NWK_REQ_ATTR_ID
 1

	)

91 
	#NWK_REQ_ATTR
 2

	)

92 
	#NWK_CMD_PYLD_BEGIN
 
NWK_HEADER_LEN


	)

93 
	#NWK_DEVICE_LIST_LEN_FIELD
 
NWK_HEADER_LEN
 + 1

	)

96 
	#ED_SCAN_MAXCHANNELS
 27

	)

99 
	#MAX_DATA_PACKET_LEN
 
MAC_MAX_FRAME_SIZE


	)

101 
	#NWK_TASK_ID
 0

	)

102 
	#ASSOC_CAPABILITY_INFO
 0

	)

103 
	#ASSOC_SECURITY_EN
 0

	)

105 
	#DEF_DEST_EP
 2

	)

106 
	#DEVICE_APPLICATION
 0

	)

108 
	#MAC_ADDR_LEN
 8

	)

110 
	#NWK_TXOPTIONS_ACK
 0x01

	)

111 
	#NWK_TXOPTIONS_INDIRECT
 0x04

	)

114 
	#NWK_TXOPTIONS_COORD
 (
NWK_TXOPTIONS_ACK
 | 
NWK_TXOPTIONS_INDIRECT
)

	)

120 
	#DEF_MAX_NUM_COORDINATORS
 15

121 
	#DEF_CHANNEL_SCAN_BITMAP
 
MAX_CHANNELS_24GHZ


	)

122 
	#SOFT_SCAN_DURATION
 1

123 

	)

124 
	#DEF_SCAN_DURATION
 2

	)

126 
	#NO_BEACONS
 15

	)

128 
	#DEF_BEACON_ORDER
 
NO_BEACONS


	)

136 
	#DEF_SUPERFRAMEORDER
 
DEF_BEACON_ORDER


	)

137 
	#NWK_SECURITY_ENABLE
 
FALSE


	)

138 
	#NWK_MAC_ASSOC_CNF_LEN
 4

	)

139 
	#FIXED_SIZ_MAC_DATA_CNF
 4

140 
	#FIXED_SIZ_MAC_DATA_IND
 26

	)

141 
	#FIXED_SIZ_MAC_SCAN_CNF
 7

	)

143 
	#ALL_PAIRING_TABLE_ENTRIES
 0

	)

144 
	#SIZE_OF_PAIRING_TABLE_ENTRY
 6

145 
	#SIZE_OF_DEVICE_LIST_ENTRY
 2

146 

	)

147 
	#NWK_SEND_TIMER_INTERVAL
 2

	)

148 
	#NWK_BCAST_TIMER_INTERVAL
 100

149 

	)

150 
	#INVALID_NODE_ADDR
 0xFFFE

	)

151 
	#INVALID_PAN_ID
 0xFFFE

	)

154 
	#DEF_LINK_COST
 1

155 
	#MAX_LINK_COST
 7

156 
	#LINK_DOWN_COST
 0

157 
	#LINK_AGEOUT_COST
 0

158 

	)

160 
	#DEF_LINK_COUNTER
 ((
gLINK_DOWN_TRIGGER
+1) / 2)

161 
	#LINK_ACTIVE_TRIGGER
 2

162 

	)

164 
	#CB_ID_APP_ANNOUNCE_CNF
 0x00

	)

165 
	#CB_ID_APP_ASSOCIATE_CNF
 0x01

	)

166 
	#CB_ID_APP_ASSOCIATE_IND
 0x02

	)

167 
	#CB_ID_APP_DATA_CNF
 0x03

	)

168 
	#CB_ID_APP_DATA_IND
 0x04

	)

169 
	#CB_ID_APP_DISASSOCIATE_CNF
 0x05

	)

170 
	#CB_ID_APP_DISASSOCIATE_IND
 0x06

	)

171 
	#CB_ID_APP_NETWORK_DETECT_CNF
 0x07

	)

172 
	#CB_ID_APP_REMOTE_GET_CNF
 0x08

	)

173 
	#SPI_CB_APP_REMOTE_SET_CNF
 0x09

	)

174 
	#CB_ID_APP_SERVICE_CNF
 0x0a

	)

175 
	#CB_ID_APP_SERVICE_IND
 0x0b

	)

176 
	#CB_ID_APP_START_CNF
 0x0c

	)

178 
	#NUM_PING_ROUTE_ADDRS
 12

	)

179 
	#PING_ROUTE_ADDRS_INDEX
 8

	)

181 
	#NWK_GëNodeDïth
(Ë(
_NIB
.
nodeDïth
)

	)

182 
	#NWK_GëTªeDïth
(Ë(0)

	)

184 
	#BEACON_MAX_DEPTH
 0x0F

	)

191 
NWK_INIT
,

192 
NWK_JOINING_ORPHAN
,

193 
NWK_DISC
,

194 
NWK_JOINING
,

195 
NWK_ENDDEVICE
,

196 
PAN_CHNL_SELECTION
,

197 
PAN_CHNL_VERIFY
,

198 
PAN_STARTING
,

199 
NWK_ROUTER
,

200 
NWK_REJOINING


201 } 
	tnwk_°©es_t
;

206 
MACCMDBUF_NONE
,

207 
MACCMDBUF_ASSOC_REQ
,

208 
MACCMDBUF_DISASSOC_REQ


209 } 
	tnwkMacCmds_t
;

213 
byã
 
Sequí˚Num
;

214 
byã
 
PassiveAckTimeout
;

215 
byã
 
MaxBrﬂdˇ°Rërõs
;

216 
byã
 
MaxChûdªn
;

217 
byã
 
MaxDïth
;

218 
byã
 
MaxRouãrs
;

220 
byã
 
dummyNeighb‹TabÀ
;

222 
byã
 
Brﬂdˇ°DñivîyTime
;

223 
byã
 
Rï‹tC⁄°™tCo°
;

224 
byã
 
RouãDiscRërõs
;

226 
byã
 
dummyRoutögTabÀ
;

228 
byã
 
SecuªAŒFømes
;

229 
byã
 
SecurôyLevñ
;

230 #i‡
deföed
 ( 
COMPATIBILITY_221
 )

231 
byã
 
nwkAŒFªsh
;

233 
byã
 
SymLök
;

234 
byã
 
C≠abûôyFœgs
;

236 
uöt16
 
Tønß˘i⁄Pîsi°í˚Time
;

238 
byã
 
nwkPrŸocﬁVîsi⁄
;

241 
byã
 
RouãDiscovîyTime
;

242 
byã
 
RouãExpúyTime
;

245 
uöt16
 
nwkDevAddªss
;

246 
byã
 
nwkLogiˇlCh™√l
;

247 
uöt16
 
nwkCo‹dAddªss
;

248 
byã
 
nwkCo‹dExtAddªss
[
Z_EXTADDR_LEN
];

249 
uöt16
 
nwkP™Id
;

252 
nwk_°©es_t
 
nwkSèã
;

253 
uöt32
 
ch™√lLi°
;

254 
byã
 
bóc⁄Ordî
;

255 
byã
 
su≥rFømeOrdî
;

256 
byã
 
sˇnDuøti⁄
;

257 
byã
 
b©tLi„Ext
;

258 
uöt32
 
ÆloˇãdRouãrAddªs£s
;

259 
uöt32
 
ÆloˇãdEndDevi˚Addªs£s
;

260 
byã
 
nodeDïth
;

263 
uöt8
 
exãndedPANID
[
Z_EXTADDR_LEN
];

266 
uöt8
 
nwkKeyLﬂded
;

271 
nwkKeyDesc
 
•¨e1
;

272 
nwkKeyDesc
 
•¨e2
;

275 
uöt8
 
nwkAddrAŒoc
;

276 
uöt8
 
nwkUniqueAddr
;

277 
uöt8
 
nwkLökSètusPîiod
;

279 
uöt8
 
nwkRouãrAgeLimô
;

282 
uöt8
 
nwkU£Mu…iCa°
;

284 
uöt8
 
nwkIsC⁄˚¡øt‹
;

285 
uöt8
 
nwkC⁄˚¡øt‹DiscovîyTime
;

286 
uöt8
 
nwkC⁄˚¡øt‹Radius
;

288 #i‡
deföed
 ( 
COMPATIBILITY_221
 )

289 
uöt8
 
nwkMaxSour˚Rouã
;

290 
uöt8
 
nwkSrcRtgExpúyTime
;

292 
uöt8
 
nwkAŒFªsh
;

295 
uöt16
 
nwkM™agîAddr
;

296 
uöt16
 
nwkTŸÆTønsmissi⁄s
;

297 
uöt8
 
nwkUpd©eId
;

298 } 
	tnwkIB_t
;

303 
uöt16
 
∑nId
;

304 *
√xt
;

305 } 
	tnwkP™Id_t
;

310 
nwkIB_t
 
_NIB
;

311 
byã
 
NWK_TaskID
;

312 
√tw‹kDesc_t
 *
NwkDescLi°
;

313 
byã
 
nwkEx≥˘ögMsgs
;

314 
byã
 
nwk_bóc⁄Paylﬂd
[
ZMAC_MAX_BEACON_PAYLOAD_LEN
];

315 
byã
 
nwk_bóc⁄PaylﬂdSize
;

317 
uöt8
 
nwkSídMTOReq
;

326 
nwk_öô
–
byã
 
èsk_id
 );

331 
ZSètus_t
 
nwk_d©a_ªq_£nd
–
nwkDB_t
* 
db
 );

336 
UINT16
 
nwk_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 );

346 
ZSètus_t
 
nwk_°¨t_co‹d
( );

351 
nwk_desc_li°_‰ì
( );

352 
√tw‹kDesc_t
 *
nwk_gëNëw‹kDesc
–
uöt8
 *
ExãndedPANID
, 
uöt16
 
P™Id
, 
byã
 
Ch™√l
 );

353 
√tw‹kDesc_t
 *
nwk_gëNwkDescLi°
( );

354 
nwk_Bóc⁄FromN©ive
(
byã
* 
buff
, byã 
size
, 
bóc⁄Paylﬂd_t
* 
bóc⁄
);

355 
nwk_Bóc⁄ToN©ive
(
bóc⁄Paylﬂd_t
* 
bóc⁄
, 
byã
* 
buff
, byã 
size
);

360 
nwk_£tSèãIdÀ
–
uöt8
 
idÀ
 );

365 
uöt8
 
nwk_°©eIdÀ
( );

370 
nwk_SˇnJoöögOΩh™
–
ZMacSˇnCnf_t
 *
∑øm
 );

371 
nwk_SˇnPANCh™Sñe˘
–
ZMacSˇnCnf_t
 *
∑øm
 );

372 
nwk_SˇnPANCh™Vîify
–
ZMacSˇnCnf_t
 *
∑øm
 );

376 #ifde‡
__˝lu•lus


	@Components/stack/nwk/nwk_bufs.h

40 #i‚de‡
NWK_BUFS_H


41 
	#NWK_BUFS_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"ZMAC.h
"

62 
	#NWK_DATABUF_INIT
 0

63 
	#NWK_DATABUF_WAITING
 1

64 
	#NWK_DATABUF_SENT
 2

65 
	#NWK_DATABUF_CONFIRMED
 3

66 
	#NWK_DATABUF_SCHEDULED
 4

67 
	#NWK_DATABUF_HOLD
 5

68 
	#NWK_DATABUF_DONE
 6

69 

	)

71 
	#HANDLE_NONE
 0x0000u

	)

72 
	#HANDLE_CNF
 0x0001u

	)

73 
	#HANDLE_WAIT_FOR_ACK
 0x0002u

	)

74 
	#HANDLE_BROADCAST
 0x0004u

	)

75 
	#HANDLE_REFLECT
 0x0008u

	)

76 
	#HANDLE_DELAY
 0x0010u

	)

77 
	#HANDLE_HI_DELAY
 0x0020u

	)

79 
	#HANDLE_SKIP_ROUTING
 0x0040u

	)

80 
	#HANDLE_RTRY_MASK
 0x0380u

	)

81 
	#HANDLE_RTRY_SHIFT
 7

	)

82 
	#HANDLE_FORCE_INDIRECT
 0x0400u

	)

83 
	#HANDLE_INDIRECT_HOLD
 0x0800u

84 
	#HANDLE_MCAST
 0x1000u

	)

85 
	#HANDLE_MASK
 \

86 ~–
HANDLE_CNF
 | 
HANDLE_WAIT_FOR_ACK
 | 
HANDLE_BROADCAST
 | 
HANDLE_DELAY
 | \

87 
HANDLE_HI_DELAY
 | 
HANDLE_FORCE_INDIRECT
 | 
HANDLE_MCAST
)

	)

94 
uöt8
 
ty≥
;

95 * 
lﬂd
;

96 } 
	tnwkDB_U£rD©a_t
;

100 
ZMacD©aReq_t
 *
pD©aReq
;

101 *
√xt
;

102 
uöt16
 
d©aX
;

103 
uöt16
 
h™dÀO±i⁄s
;

104 
byã
 
nsduH™dÀ
;

105 
byã
 
°©e
;

106 
byã
 
ªåõs
;

107 
nwkDB_U£rD©a_t
 
ud
;

108 
uöt16
 
macSrcAddr
;

109 } 
	tnwkDB_t
;

111 
uöt8
 (*
	tnwkDB_FödM©chCB_t
)–
	tnwkDB_t
* 
	tdb
, * 
	tmf
 );

124 
nwkbufs_öô
( );

129 
nwk_SídNextD©aBuf
( );

134 
byã
 
nwk_MacD©aBuf„rsFuŒ
( );

139 
uöt8
 
nwk_MacD©aBuf„rsAdd
–
nwkDB_t
* 
db
, uöt8 
£¡
 );

145 
uöt8
 
nwk_MacD©aBuf„rsDóŒoc
–
byã
 
h™dÀ
 );

154 
nwkDB_t
 *
nwkDB_Cª©eHdr
–
ZMacD©aReq_t
 *
pkt
, 
byã
 
h™dÀ
, 
uöt16
 
h™dÀO±i⁄s
 );

159 
ZSètus_t
 
nwkDB_Add
–
nwkDB_t
 *
pkt
, 
byã
 
ty≥
, 
uöt16
 
d©aX
 );

164 
byã
 
nwkDB_Cou¡Ty≥s
–byã 
ty≥
 );

169 
nwkDB_t
 *
nwkDB_FödNextTy≥
–nwkDB_à*
pkt
, 
byã
 
ty≥
, byã 
dúe˘
 );

174 
nwkDB_t
 *
nwkDB_FödH™dÀ
–
byã
 
h™dÀ
 );

179 
nwkDB_t
 *
nwkDB_FödD°Addr
–
uöt16
 
addr
 );

184 
nwkDB_t
 *
nwkDB_FödD©aPkt
–
ZMacD©aReq_t
 *
pkt
 );

189 
nwkDB_t
* 
nwkDB_FödM©ch
–
nwkDB_FödM©chCB_t
 
cb
, * 
mf
 );

195 
nwkDB_RemoveFromLi°
–
nwkDB_t
 *
pkt
 );

200 
nwkDB_DñëeRecAŒ
–
nwkDB_t
 *
ªc
 );

205 
nwkbufs_hﬁd
–
nwkDB_t
 *
ªc
 );

210 
uöt8
 
nwkDB_Rëu∫Indúe˘HﬁdögC¡
( );

215 
uöt8
 
nwkDB_Cou¡Indúe˘Hﬁd
( );

220 
nwkbufs_ª£t
( );

225 * 
nwkDB_U£rD©aLﬂd
–
nwkDB_U£rD©a_t
* 
ud
 );

234 
uöt8
 
nwk_brﬂdˇ°Síd
–uöt8 *
msg_±r
 );

239 
uöt8
 *
nwk_brﬂdˇ°Re˚ive
( );

243 #ifde‡
__˝lu•lus


	@Components/stack/nwk/nwk_globals.c

43 
	~"ZComdef.h
"

44 
	~"OSAL.h
"

45 
	~"OSAL_Nv.h
"

46 
	~"AddrMgr.h
"

47 
	~"AssocLi°.h
"

48 
	~"BödögTabÀ.h
"

49 
	~"nwk_utû.h
"

50 
	~"nwk_globÆs.h
"

51 
	~"APS.h
"

52 
	~"s•.h
"

53 
	~"πg.h
"

54 
	~"ZDC⁄fig.h
"

55 
	~"ZGlobÆs.h
"

57 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

58 
	~"OnBﬂrd.h
"

62 
	~"hÆ_lcd.h
"

73 
	#NWK_MAX_DATABUFS_WAITING
 8

74 
	#NWK_MAX_DATABUFS_SCHEDULED
 5

75 
	#NWK_MAX_DATABUFS_CONFIRMED
 5

76 
	#NWK_MAX_DATABUFS_TOTAL
 12

77 

	)

86 
	#NWK_INDIRECT_CNT_RTG_TMR
 1

	)

97 
	#NWK_INDIRECT_MSG_MAX_PER
 3

	)

99 
	#NWK_INDIRECT_MSG_MAX_ALL
 \

100 (
NWK_MAX_DATABUFS_TOTAL
 - 
NWK_INDIRECT_MSG_MAX_PER
)

	)

111 
CONST
 
uöt16
 
	ggNWK_MAX_DEVICE_LIST
 = 
NWK_MAX_DEVICES
;

114 
CONST
 
uöt8
 
	ggNWK_MAX_SLEEPING_END_DEVICES
 = 
NWK_MAX_DEVICES
 - 
NWK_MAX_ROUTERS
;

117 
CONST
 
uöt8
 
	ggNWK_MAX_DATABUFS_WAITING
 = 
NWK_MAX_DATABUFS_WAITING
;

118 
CONST
 
uöt8
 
	ggNWK_MAX_DATABUFS_SCHEDULED
 = 
NWK_MAX_DATABUFS_SCHEDULED
;

119 
CONST
 
uöt8
 
	ggNWK_MAX_DATABUFS_CONFIRMED
 = 
NWK_MAX_DATABUFS_CONFIRMED
;

120 
CONST
 
uöt8
 
	ggNWK_MAX_DATABUFS_TOTAL
 = 
NWK_MAX_DATABUFS_TOTAL
;

122 
CONST
 
uöt8
 
	ggNWK_INDIRECT_CNT_RTG_TMR
 = 
NWK_INDIRECT_CNT_RTG_TMR
;

123 
CONST
 
uöt8
 
	ggNWK_INDIRECT_MSG_MAX_PER
 = 
NWK_INDIRECT_MSG_MAX_PER
;

124 
CONST
 
uöt8
 
	ggNWK_INDIRECT_MSG_MAX_ALL
 = 
NWK_INDIRECT_MSG_MAX_ALL
;

128 
uöt16
 *
	gCskù
;

130 #i‡–
STACK_PROFILE_ID
 =
ZIGBEEPRO_PROFILE
 )

131 
uöt8
 
	gCskùRås
[1] = {0};

132 
uöt8
 
	gCskùChld∫
[1] = {0};

133 #ñi‡–
STACK_PROFILE_ID
 =
HOME_CONTROLS
 )

134 
uöt8
 
	gCskùRås
[
MAX_NODE_DEPTH
+1] = {6,6,6,6,6,0};

135 
uöt8
 
	gCskùChld∫
[
MAX_NODE_DEPTH
+1] = {20,20,20,20,20,0};

136 #ñi‡–
STACK_PROFILE_ID
 =
GENERIC_STAR
 )

137 
uöt8
 
	gCskùRås
[
MAX_NODE_DEPTH
+1] = {5,5,5,5,5,0};

138 
uöt8
 
	gCskùChld∫
[
MAX_NODE_DEPTH
+1] = {5,5,5,5,5,0};

139 #ñi‡–
STACK_PROFILE_ID
 =
NETWORK_SPECIFIC
 )

140 
uöt8
 
	gCskùRås
[
MAX_NODE_DEPTH
+1] = {5,5,5,5,5,0};

141 
uöt8
 
	gCskùChld∫
[
MAX_NODE_DEPTH
+1] = {5,5,5,5,5,0};

145 
uöt8
 
	ggMIN_TREE_LINK_COST
 = 
MIN_LQI_COST_3
;

148 
assocüãd_devi˚s_t
 
	gAssocüãdDevLi°
[
NWK_MAX_DEVICES
];

150 #i‡
deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

151 
CONST
 
uöt16
 
	ggNWK_MIN_ROUTER_CHILDREN
 = 
NWK_MIN_ROUTER_CHILDREN
;

152 
CONST
 
uöt16
 
	ggNWK_MIN_ENDDEVICE_CHILDREN
 = 
NWK_MIN_ENDDEVICE_CHILDREN
;

154 
CONST
 
uöt16
 
	ggNWK_MIN_ROUTER_CHILDREN
 = 0;

155 
CONST
 
uöt16
 
	ggNWK_MIN_ENDDEVICE_CHILDREN
 = 0;

158 
CONST
 
uöt16
 
	ggMAX_RTG_ENTRIES
 = 
MAX_RTG_ENTRIES
;

159 
CONST
 
uöt16
 
	ggMAX_RTG_SRC_ENTRIES
 = 
MAX_RTG_SRC_ENTRIES
;

160 
CONST
 
uöt8
 
	ggMAX_RREQ_ENTRIES
 = 
MAX_RREQ_ENTRIES
;

162 
CONST
 
uöt8
 
	ggMAX_NEIGHBOR_ENTRIES
 = 
MAX_NEIGHBOR_ENTRIES
;

165 
√ighb‹E¡ry_t
 
	g√ighb‹TabÀ
[
MAX_NEIGHBOR_ENTRIES
];

167 
CONST
 
uöt8
 
	ggMAX_SOURCE_ROUTE
 = 
MAX_SOURCE_ROUTE
;

169 
CONST
 
uöt8
 
	ggMAX_BROADCAST_QUEUED
 = 
MAX_BROADCAST_QUEUED
;

171 
CONST
 
uöt8
 
	ggLINK_DOWN_TRIGGER
 = 
LINK_DOWN_TRIGGER
;

173 
CONST
 
uöt8
 
	ggMAX_PASSIVE_ACK_CNT
 = 
MAX_PASSIVE_ACK_CNT
;

176 
πgE¡ry_t
 
	gπgTabÀ
[
MAX_RTG_ENTRIES
];

178 #i‡
deföed
 ( 
ZIGBEE_SOURCE_ROUTING
 )

179 
πgSrcE¡ry_t
 
	gπgSrcTabÀ
[
MAX_RTG_SRC_ENTRIES
];

180 
uöt16
 
	gπgSrcRñayLi°
[
MAX_SOURCE_ROUTE
];

184 
πDiscE¡ry_t
 
	gπDiscTabÀ
[
MAX_RREQ_ENTRIES
];

187 
bˇ°E¡ry_t
 
	gbˇ°TabÀ
[
MAX_BCAST
];

190 
uöt8
 
	gbˇ°HﬁdH™dÀ
[
MAX_BCAST
];

191 
uöt32
 
	gbˇ°HﬁdAckMask
[
MAX_BCAST
];

193 
CONST
 
uöt8
 
	ggMAX_BCAST
 = 
MAX_BCAST
;

199 
CONST
 
uöt8
 
	ggNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
 = 
FALSE
;

201 #i‡
deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

204 
CONST
 
uöt8
 
	ggNWK_CONFLICTED_ADDR_EXPIRY_TIME
 = 
NWK_CONFLICTED_ADDR_EXPIRY_TIME
;

207 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 )

208 
CONST
 
uöt8
 
	ggNWK_FREQ_AGILITY_ALL_MAC_ERRS
 = 
NWK_FREQ_AGILITY_ALL_MAC_ERRS
;

212 
CONST
 
uöt16
 
	ggMTO_RREQ_LIMIT_TIME
 = 
MTO_RREQ_LIMIT_TIME
;

215 
CONST
 
uöt8
 
	ggMTO_ROUTE_EXPIRY_TIME
 = 
MTO_ROUTE_EXPIRY_TIME
;

218 
CONST
 
uöt8
 
	ggDEFAULT_ROUTE_REQUEST_RADIUS
 = 
DEFAULT_ROUTE_REQUEST_RADIUS
;

221 
CONST
 
uöt8
 
	ggDEF_NWK_RADIUS
 = 
DEF_NWK_RADIUS
;

223 #i‡–
ZSTACK_ROUTER_BUILD
 )

224 
CONST
 
uöt16
 
	ggLINK_STATUS_JITTER_MASK
 = 
LINK_STATUS_JITTER_MASK
;

233 
CONST
 
uöt16
 
	ggNWK_MAX_BINDING_ENTRIES
 = 
NWK_MAX_BINDING_ENTRIES
;

235 #i‡
deföed
 ( 
REFLECTOR
 )

238 
CONST
 
uöt8
 
	ggMAX_BINDING_CLUSTER_IDS
 = 
MAX_BINDING_CLUSTER_IDS
;

240 
CONST
 
uöt16
 
	ggBIND_REC_SIZE
 = –
BödögE¡ry_t
 );

243 
BödögE¡ry_t
 
	gBödögTabÀ
[
NWK_MAX_BINDING_ENTRIES
];

247 
CONST
 
uöt8
 
	ggAPS_MAX_GROUPS
 = 
APS_MAX_GROUPS
;

250 #i‡–
ZG_BUILD_ENDDEVICE_TYPE
 )

251 
≠sEndDevi˚Brﬂdˇ°_t
 
	g≠sEndDevi˚Brﬂdˇ°TabÀ
[
APS_MAX_ENDDEVICE_BROADCAST_ENTRIES
];

252 
uöt8
 
	ggAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES
 = 
APS_MAX_ENDDEVICE_BROADCAST_ENTRIES
;

263 #i‡
deföed
 ( 
DEFAULT_KEY
 )

264 
CONST
 
uöt8
 
	gdeÁu…Key
[
SEC_KEY_LEN
] = 
DEFAULT_KEY
;

266 
CONST
 
uöt8
 
	gdeÁu…Key
[
SEC_KEY_LEN
] =

268 #i‡
deföed
 ( 
APP_TP
 ) || deföed ( 
APP_TP2
 )

282 
CONST
 
uöt8
 
	gdeÁu…TCLökKey
[
SEC_KEY_LEN
] = 
DEFAULT_TC_LINK_KEY
;

288 #i‡
deföed
 ( 
PACKET_FILTER_STATS
 )

289 
uöt32
 
	g≠sInvÆidPackës
 = 0;

290 
uöt32
 
	g≠sSecurôyFaûuªs
 = 0;

291 
uöt32
 
	gnwkInvÆidPackës
 = 0;

292 
uöt32
 
	gnwkSecurôyFaûuªs
 = 0;

298 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

299 c⁄° 
	gPögSå
[] = "Ping Rcvd from";

300 c⁄° 
	gAssocCnfSå
[] = "Assoc Cnf";

301 c⁄° 
	gSuc˚ssSå
[] = "Success";

302 c⁄° 
	gEndDevi˚Så
[] = "EndDevice:";

303 c⁄° 
	gP¨ítSå
[] = "Parent:";

304 c⁄° 
	gZigbìCo‹dSå
[] = "ZigBee Coord";

305 c⁄° 
	gNëw‹kIDSå
[] = "Network ID:";

306 c⁄° 
	gRouãrSå
[] = "Router:";

307 c⁄° 
	gOΩh™R•Så
[] = "Orphan Response";

308 c⁄° 
	gSítSå
[] = "Sent";

309 c⁄° 
	gFaûedSå
[] = "Failed";

310 c⁄° 
	gAssocR•FaûSå
[] = "Assoc Rsp fail";

311 c⁄° 
	gAssocIndSå
[] = "Assoc Ind";

312 c⁄° 
	gAssocCnfFaûSå
[] = "Assoc Cnf fail";

313 c⁄° 
	gE√rgyLevñSå
[] = "Energy Level";

314 c⁄° 
	gSˇnFaûedSå
[] = "Scan Failed";

330 
	$nwk_globÆs_öô
( )

332 
	`AddrMgrInô
–
NWK_MAX_ADDRESSES
 );

334 #i‡!
	`deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

335 i‡–
ZSTACK_ROUTER_BUILD
 )

338 
Cskù
 = 
	`oßl_mem_Æloc
((
uöt16
Ë*(
MAX_NODE_DEPTH
+1));

339 
	`RTG_FûlCSkùTabÀ
(
CskùChld∫
, 
CskùRås
, 
MAX_NODE_DEPTH
, 
Cskù
);

345 i‡–
ZSTACK_ROUTER_BUILD
 && 
NWK_LINK_STATUS_PERIOD
 )

347 
	`NLME_InôLökSètus
();

350 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 )

351 
	`NwkFªqAgûôyInô
();

353 
	}
}

366 
	$NIB_öô
()

368 
_NIB
.
Sequí˚Num
 = 
	`LO_UINT16
(
	`oßl_ønd
());

370 
_NIB
.
nwkPrŸocﬁVîsi⁄
 = 
ZB_PROT_VERS
;

371 
_NIB
.
MaxDïth
 = 
MAX_NODE_DEPTH
;

373 #i‡–
NWK_MODE
 =
NWK_MODE_MESH
 )

374 
_NIB
.
bóc⁄Ordî
 = 
BEACON_ORDER_NO_BEACONS
;

375 
_NIB
.
su≥rFømeOrdî
 = 
BEACON_ORDER_NO_BEACONS
;

386 
_NIB
.
Brﬂdˇ°DñivîyTime
 = 
zgBˇ°DñivîyTime
;

387 
_NIB
.
PassiveAckTimeout
 = 
zgPassiveAckTimeout
;

388 
_NIB
.
MaxBrﬂdˇ°Rërõs
 = 
zgMaxBˇ°Rëúes
;

390 
_NIB
.
Rï‹tC⁄°™tCo°
 = 0;

391 
_NIB
.
RouãDiscRërõs
 = 0;

392 
_NIB
.
SecuªAŒFømes
 = 
USE_NWK_SECURITY
;

393 
_NIB
.
nwkAŒFªsh
 = 
NWK_ALL_FRESH
;

395 i‡–
ZG_SECURE_ENABLED
 )

397 
_NIB
.
SecurôyLevñ
 = 
SECURITY_LEVEL
;

401 
_NIB
.
SecurôyLevñ
 = 0;

404 #i‡
	`deföed
 ( 
ZIGBEEPRO
 )

405 
_NIB
.
SymLök
 = 
FALSE
;

407 
_NIB
.
SymLök
 = 
TRUE
;

410 
_NIB
.
C≠abûôyFœgs
 = 
ZDO_C⁄fig_Node_Des¸ùt‹
.CapabilityFlags;

412 
_NIB
.
Tønß˘i⁄Pîsi°í˚Time
 = 
zgIndúe˘MsgTimeout
;

414 
_NIB
.
RouãDiscovîyTime
 = 
zgRouãDiscovîyTime
;

415 
_NIB
.
RouãExpúyTime
 = 
zgRouãExpúyTime
;

417 
_NIB
.
nwkDevAddªss
 = 
INVALID_NODE_ADDR
;

418 
_NIB
.
nwkLogiˇlCh™√l
 = 0;

419 
_NIB
.
nwkCo‹dAddªss
 = 
INVALID_NODE_ADDR
;

420 
	`oßl_mem£t
–
_NIB
.
nwkCo‹dExtAddªss
, 0, 
Z_EXTADDR_LEN
 );

421 
_NIB
.
nwkP™Id
 = 
INVALID_NODE_ADDR
;

423 
	`oßl_˝yExtAddr
–
_NIB
.
exãndedPANID
, 
zgExãndedPANID
 );

425 
_NIB
.
nwkKeyLﬂded
 = 
FALSE
;

427 #i‡
	`deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

428 
_NIB
.
nwkAddrAŒoc
 = 
NWK_ADDRESSING_STOCHASTIC
;

429 
_NIB
.
nwkUniqueAddr
 = 
FALSE
;

431 
_NIB
.
nwkAddrAŒoc
 = 
NWK_ADDRESSING_DISTRIBUTED
;

432 
_NIB
.
nwkUniqueAddr
 = 
TRUE
;

435 
_NIB
.
nwkLökSètusPîiod
 = 
NWK_LINK_STATUS_PERIOD
;

436 
_NIB
.
nwkRouãrAgeLimô
 = 
NWK_ROUTE_AGE_LIMIT
;

439 
_NIB
.
nwkC⁄˚¡øt‹DiscovîyTime
 = 
zgC⁄˚¡øt‹DiscovîyTime
;

440 
_NIB
.
nwkIsC⁄˚¡øt‹
 = 
zgC⁄˚¡øt‹E«bÀ
;

441 
_NIB
.
nwkC⁄˚¡øt‹Radius
 = 
zgC⁄˚¡øt‹Radius
;

443 #i‡
	`deföed
 ( 
ZIGBEE_MULTICAST
 )

444 
_NIB
.
nwkU£Mu…iCa°
 = 
TRUE
;

446 
_NIB
.
nwkU£Mu…iCa°
 = 
FALSE
;

449 #i‡
	`deföed
 ( 
NV_RESTORE
 )

450 i‡–
	`oßl_nv_ªad
–
ZCD_NV_NWKMGR_ADDR
, 0, –
_NIB
.
nwkM™agîAddr
 ),

451 &
_NIB
.
nwkM™agîAddr
 ) !
SUCCESS
 )

454 
_NIB
.
nwkM™agîAddr
 = 0x0000;

457 
_NIB
.
nwkUpd©eId
 = 0;

458 
_NIB
.
nwkTŸÆTønsmissi⁄s
 = 0;

460 i‡–
ZSTACK_ROUTER_BUILD
 )

462 #i‡
	`deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

463 
	`NLME_InôStocha°icAddªssög
();

465 
	`NLME_InôTªeAddªssög
();

468 
	}
}

482 
	$nwk_Sètus
–
uöt16
 
°©usCode
, uöt16 
°©usVÆue
 )

484 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

485  
°©usCode
 )

487 
NWK_STATUS_COORD_ADDR
:

488 i‡–
ZSTACK_ROUTER_BUILD
 )

490 
	`HÆLcdWrôeSåög
–(*)
ZigbìCo‹dSå
, 
HAL_LCD_LINE_1
 );

491 
	`HÆLcdWrôeSåögVÆue
–(*)
Nëw‹kIDSå
, 
°©usVÆue
, 16, 
HAL_LCD_LINE_2
 );

492 
	`BuzzîC⁄åﬁ
–
BUZZER_BLIP
 );

496 
NWK_STATUS_ROUTER_ADDR
:

497 i‡–
ZSTACK_ROUTER_BUILD
 )

499 
	`HÆLcdWrôeSåögVÆue
–(*)
RouãrSå
, 
°©usVÆue
, 16, 
HAL_LCD_LINE_1
 );

503 
NWK_STATUS_ORPHAN_RSP
:

504 i‡–
ZSTACK_ROUTER_BUILD
 )

506 i‡–
°©usVÆue
 =
ZSuc˚ss
 )

507 
	`HÆLcdWrôeS¸ìn
–(*)
OΩh™R•Så
, (*)
SítSå
 );

509 
	`HÆLcdWrôeS¸ìn
–(*)
OΩh™R•Så
, (*)
FaûedSå
 );

513 
NWK_ERROR_ASSOC_RSP
:

514 i‡–
ZSTACK_ROUTER_BUILD
 )

516 
	`HÆLcdWrôeSåög
–(*)
AssocR•FaûSå
, 
HAL_LCD_LINE_1
 );

517 
	`HÆLcdWrôeVÆue
–(
uöt32
)(
°©usVÆue
), 16, 
HAL_LCD_LINE_2
 );

521 
NWK_STATUS_ED_ADDR
:

522 i‡–
ZSTACK_END_DEVICE_BUILD
 )

524 
	`HÆLcdWrôeSåögVÆue
–(*)
EndDevi˚Så
, 
°©usVÆue
, 16, 
HAL_LCD_LINE_1
 );

528 
NWK_STATUS_PARENT_ADDR
:

529 
	`HÆLcdWrôeSåögVÆue
–(*)
P¨ítSå
, 
°©usVÆue
, 16, 
HAL_LCD_LINE_2
 );

532 
NWK_STATUS_ASSOC_CNF
:

533 
	`HÆLcdWrôeS¸ìn
–(*)
AssocCnfSå
, (*)
Suc˚ssSå
 );

536 
NWK_ERROR_ASSOC_CNF_DENIED
:

537 
	`HÆLcdWrôeSåög
((*)
AssocCnfFaûSå
, 
HAL_LCD_LINE_1
 );

538 
	`HÆLcdWrôeVÆue
–(
uöt32
)(
°©usVÆue
), 16, 
HAL_LCD_LINE_2
 );

541 
NWK_ERROR_ENERGY_SCAN_FAILED
:

542 
	`HÆLcdWrôeS¸ìn
–(*)
E√rgyLevñSå
, (*)
SˇnFaûedSå
 );

546 
	}
}

557 
	$nwk_Upd©eSèti°ics
–
uöt8
 
°©i°icCode
 )

559 #i‡
	`deföed
 ( 
PACKET_FILTER_STATS
 )

560  
°©i°icCode
 )

562 
STAT_NWK_INVALID_PACKET
:

563 
nwkInvÆidPackës
++;

566 
STAT_NWK_SECURITY_FAILURE
:

567 
nwkInvÆidPackës
++;

568 
nwkSecurôyFaûuªs
++;

571 
STAT_APS_INVALID_PACKET
:

572 
≠sInvÆidPackës
++;

575 
STAT_APS_SECURITY_FAILURE
:

576 
≠sSecurôyFaûuªs
++;

580 
	}
}

	@Components/stack/nwk/nwk_globals.h

40 #i‚de‡
NWK_GLOBALS_H


41 
	#NWK_GLOBALS_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"nwk_bufs.h
"

53 
	~"AssocLi°.h
"

54 
	~"BödögTabÀ.h
"

55 
	~"ZGlobÆs.h
"

67 #i‡
deföed
 ( 
ZIGBEEPRO
 )

68 #i‡!
deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

69 
	#ZIGBEE_STOCHASTIC_ADDRESSING


	)

70 
	#ZIGBEE_NWK_UNIQUE_ADDR_CHECK


	)

72 #i‡!
deföed
 ( 
NWK_LINK_STATUS_PERIOD
 )

73 
	#NWK_LINK_STATUS_PERIOD
 15

75 #i‡!
	`deföed
 ( 
ZIGBEE_MULTICAST
 )

	)

76 
	#ZIGBEE_MULTICAST


	)

78 #i‡!
deföed
 ( 
ZIGBEE_MANY_TO_ONE
 )

79 
	#ZIGBEE_MANY_TO_ONE


	)

81 #i‡!
deföed
 ( 
ZIGBEE_SOURCE_ROUTING
 )

82 
	#ZIGBEE_SOURCE_ROUTING


	)

84 #i‡!
deföed
 ( 
ZIGBEE_COMMISSIONING
 )

85 
	#ZIGBEE_COMMISSIONING


	)

87 #i‡!
deföed
 ( 
NWK_MANAGER
 )

90 #i‡!
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

91 
	#ZIGBEE_FRAGMENTATION


	)

94 
	#NWK_LINK_STATUS_PERIOD
 0

	)

97 #i‡–
RFD_RCVC_ALWAYS_ON
==
TRUE
 ) || ( 
ZG_BUILD_RTR_TYPE
 )

100 #i‡!
deföed
 ( 
ZIGBEE_PANID_CONFLICT
 )

101 
	#ZIGBEE_PANID_CONFLICT


	)

105 #i‡–
ZG_BUILD_RTR_TYPE
 )

108 #i‡!
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 )

109 
	#ZIGBEE_FREQ_AGILITY


	)

113 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 )

117 #i‡!
deföed
 ( 
NWK_FREQ_AGILITY_ALL_MAC_ERRS
 )

118 
	#NWK_FREQ_AGILITY_ALL_MAC_ERRS
 
FALSE


	)

123 
	#NWK_MODE_STAR
 0

	)

124 
	#NWK_MODE_TREE
 1

	)

125 
	#NWK_MODE_MESH
 2

	)

128 
	#NETWORK_SPECIFIC
 0

	)

129 
	#HOME_CONTROLS
 1

	)

130 
	#ZIGBEEPRO_PROFILE
 2

	)

131 
	#GENERIC_STAR
 3

	)

132 
	#GENERIC_TREE
 4

	)

135 
	#MAX_CHANNELS_868MHZ
 0x00000001

	)

136 
	#MAX_CHANNELS_915MHZ
 0x000007FE

	)

138 #i‡!
deföed
 ( 
MAX_CHANNELS_24GHZ
 )

139 
	#MAX_CHANNELS_24GHZ
 0x07FFF800

	)

142 #i‡
deföed
 ( 
ZIGBEEPRO
 )

143 
	#STACK_PROFILE_ID
 
ZIGBEEPRO_PROFILE


	)

145 
	#STACK_PROFILE_ID
 
HOME_CONTROLS


	)

148 #i‡–
STACK_PROFILE_ID
 =
ZIGBEEPRO_PROFILE
 )

149 
	#MAX_NODE_DEPTH
 20

	)

150 
	#NWK_MODE
 
NWK_MODE_MESH


	)

151 
	#SECURITY_MODE
 
SECURITY_COMMERCIAL


	)

152 #i‡ ( 
SECURE
 != 0 )

153 
	#USE_NWK_SECURITY
 1

154 
	#SECURITY_LEVEL
 5

	)

156 
	#USE_NWK_SECURITY
 0

157 
	#SECURITY_LEVEL
 0

	)

160 #ñi‡–
STACK_PROFILE_ID
 =
HOME_CONTROLS
 )

161 
	#MAX_NODE_DEPTH
 5

	)

162 
	#NWK_MODE
 
NWK_MODE_MESH


	)

163 
	#SECURITY_MODE
 
SECURITY_COMMERCIAL


	)

164 #i‡ ( 
SECURE
 != 0 )

165 
	#USE_NWK_SECURITY
 1

166 
	#SECURITY_LEVEL
 5

	)

168 
	#USE_NWK_SECURITY
 0

169 
	#SECURITY_LEVEL
 0

	)

172 #ñi‡–
STACK_PROFILE_ID
 =
GENERIC_STAR
 )

173 
	#MAX_NODE_DEPTH
 5

	)

174 
	#NWK_MODE
 
NWK_MODE_STAR


	)

175 
	#SECURITY_MODE
 
SECURITY_RESIDENTIAL


	)

176 #i‡ ( 
SECURE
 != 0 )

177 
	#USE_NWK_SECURITY
 1

178 
	#SECURITY_LEVEL
 5

	)

180 
	#USE_NWK_SECURITY
 0

181 
	#SECURITY_LEVEL
 0

	)

184 #ñi‡–
STACK_PROFILE_ID
 =
NETWORK_SPECIFIC
 )

186 
	#MAX_NODE_DEPTH
 5

	)

187 
	#NWK_MODE
 
NWK_MODE_MESH


	)

188 
	#SECURITY_MODE
 
SECURITY_RESIDENTIAL


	)

189 #i‡ ( 
SECURE
 != 0 )

190 
	#USE_NWK_SECURITY
 1

191 
	#SECURITY_LEVEL
 5

	)

193 
	#USE_NWK_SECURITY
 0

194 
	#SECURITY_LEVEL
 0

	)

199 
	#ZB_PROT_V1_0
 1

	)

200 
	#ZB_PROT_V1_1
 2

	)

202 
	#ZB_PROT_VERS
 
ZB_PROT_V1_1


	)

203 
	#ZIGBEE_PROT_ID
 0x00

	)

206 
	#NWK_STATUS_PING_RCVD
 0x0001

	)

207 
	#NWK_STATUS_ASSOC_CNF
 0x0002

	)

208 
	#NWK_STATUS_ED_ADDR
 0x0003

	)

209 
	#NWK_STATUS_PARENT_ADDR
 0x0004

	)

210 
	#NWK_STATUS_COORD_ADDR
 0x0005

	)

211 
	#NWK_STATUS_ROUTER_ADDR
 0x0006

	)

212 
	#NWK_STATUS_ORPHAN_RSP
 0x0007

	)

214 
	#NWK_ERROR_ASSOC_RSP
 0x1001

	)

215 
	#NWK_ERROR_ASSOC_RSP_MF
 0x1002

	)

216 
	#NWK_ERROR_ASSOC_CNF_DENIED
 0x1003

	)

217 
	#NWK_ERROR_ENERGY_SCAN_FAILED
 0x1004

	)

221 #i‡!
deföed
–
NWK_ALL_FRESH
)

222 
	#NWK_ALL_FRESH
 
TRUE


224 

	)

226 #i‡!
deföed
–
NWK_MAX_DEVICE_LIST
 )

227 
	#NWK_MAX_DEVICE_LIST
 20

230 

	)

233 
	#NWK_MAX_DEVICES
 ( 
NWK_MAX_DEVICE_LIST
 + 1 )

234 

	)

235 
	#NWK_MAX_ROUTERS
 6

	)

238 #i‡!
deföed
 ( 
NWK_MIN_ROUTER_CHILDREN
 )

239 
	#NWK_MIN_ROUTER_CHILDREN
 0

	)

241 #i‡!
deföed
 ( 
NWK_MIN_ENDDEVICE_CHILDREN
 )

242 
	#NWK_MIN_ENDDEVICE_CHILDREN
 0

	)

245 #i‡!
deföed
 ( 
MAX_NEIGHBOR_ENTRIES
 )

246 #i‡–
ZG_BUILD_RTR_TYPE
 )

247 
	#MAX_NEIGHBOR_ENTRIES
 16

	)

249 
	#MAX_NEIGHBOR_ENTRIES
 4

	)

253 #i‡!
deföed
 ( 
APS_MAX_GROUPS
 )

254 
	#APS_MAX_GROUPS
 10

	)

258 #i‡
deföed
 ( 
REFLECTOR
 )

259 
	#NWK_MAX_REFLECTOR_ENTRIES
 ( 
NWK_MAX_BINDING_ENTRIES
 )

	)

261 
	#NWK_MAX_REFLECTOR_ENTRIES
 0

	)

264 #i‡!
deföed
–
MAX_BCAST
 )

265 
	#MAX_BCAST
 4

	)

270 
	#NWK_MAX_SECURE_PARTNERS
 1

	)

273 
	#NWK_MAX_ADDRESSES
 (
uöt16
) \

274 ––
NWK_MAX_DEVICES
 ) + \

275 –
NWK_MAX_REFLECTOR_ENTRIES
 ) + \

276 –
NWK_MAX_SECURE_PARTNERS
 ) )

	)

279 
	#NWK_PAN_COORD_ADDR
 0x0000

	)

282 
	#NWK_ADDRESSING_DISTRIBUTED
 0x00

	)

283 
	#NWK_ADDRESSING_STOCHASTIC
 0x02

	)

285 #i‡!
deföed
 ( 
NWK_LINK_STATUS_PERIOD
 )

286 
	#NWK_LINK_STATUS_PERIOD
 15

288 

	)

289 #i‡!
deföed
 ( 
LINK_STATUS_JITTER_MASK
 )

290 
	#LINK_STATUS_JITTER_MASK
 0x007F

292 

	)

293 #i‡!
deföed
 ( 
NWK_ROUTE_AGE_LIMIT
 )

294 
	#NWK_ROUTE_AGE_LIMIT
 3

296 

	)

297 #i‡!
deföed
 ( 
MAX_RTG_SRC_ENTRIES
 )

298 
	#MAX_RTG_SRC_ENTRIES
 12

	)

301 #i‡!
deföed
 ( 
SRC_RTG_EXPIRY_TIME
 )

302 
	#SRC_RTG_EXPIRY_TIME
 10

304 

	)

305 #i‡!
deföed
 ( 
MTO_RREQ_LIMIT_TIME
 )

307 
	#MTO_RREQ_LIMIT_TIME
 1000

	)

310 #i‡!
deföed
 ( 
MTO_ROUTE_EXPIRY_TIME
 )

312 
	#MTO_ROUTE_EXPIRY_TIME
 
RTG_NO_EXPIRY_TIME


	)

315 #i‡–
ZG_BUILD_ENDDEVICE_TYPE
 )

316 
	#APS_MAX_ENDDEVICE_BROADCAST_ENTRIES
 ( 2 * 
MAX_BCAST
 )

	)

319 #i‡!
deföed
–
NWK_CONFLICTED_ADDR_EXPIRY_TIME
 )

320 
	#NWK_CONFLICTED_ADDR_EXPIRY_TIME
 4

324 

	)

325 #i‡!
deföed
 ( 
LINK_DOWN_TRIGGER
 )

326 
	#LINK_DOWN_TRIGGER
 3

328 

	)

331 #i‡!
deföed
–
CONFLICTED_ADDR_TABLE_SIZE
 )

332 
	#CONFLICTED_ADDR_TABLE_SIZE
 3

	)

336 #i‡!
deföed
 ( 
MAX_SOURCE_ROUTE
 )

337 
	#MAX_SOURCE_ROUTE
 12

	)

340 #i‡!
deföed
 ( 
MAX_BROADCAST_QUEUED
 )

341 
	#MAX_BROADCAST_QUEUED
 10

	)

344 #i‡!
deföed
 ( 
DEFAULT_ROUTE_REQUEST_RADIUS
 )

345 
	#DEFAULT_ROUTE_REQUEST_RADIUS
 
DEF_NWK_RADIUS


	)

348 #i‡!
deföed
 ( 
DEF_NWK_RADIUS
 )

350 
	#DEF_NWK_RADIUS
 ( 2 * 
BEACON_MAX_DEPTH
 )

	)

353 #i‡!
deföed
 ( 
MAX_PASSIVE_ACK_CNT
 )

354 
	#MAX_PASSIVE_ACK_CNT
 8

	)

358 
	#STAT_NWK_INVALID_PACKET
 1

	)

359 
	#STAT_NWK_SECURITY_FAILURE
 2

	)

360 
	#STAT_APS_INVALID_PACKET
 3

	)

361 
	#STAT_APS_SECURITY_FAILURE
 4

	)

364 
	#DEFAULT_TC_LINK_KEY
 { 0x5a, 0x69, 0x67, 0x42, 0x65, 0x65, 0x41, 0x6c,\

365 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x30, 0x39 }

	)

376 
CONST
 
byã
 
gNWK_MAX_DATABUFS_WAITING
;

377 
CONST
 
byã
 
gNWK_MAX_DATABUFS_SCHEDULED
;

378 
CONST
 
byã
 
gNWK_MAX_DATABUFS_CONFIRMED
;

379 
CONST
 
byã
 
gNWK_MAX_DATABUFS_TOTAL
;

381 
CONST
 
byã
 
gNWK_INDIRECT_CNT_RTG_TMR
;

382 
CONST
 
byã
 
gNWK_INDIRECT_MSG_MAX_PER
;

383 
CONST
 
byã
 
gNWK_INDIRECT_MSG_MAX_ALL
;

385 
CONST
 
byã
 
gMAX_NEIGHBOR_ENTRIES
;

387 
CONST
 
uöt16
 
gMAX_RTG_ENTRIES
;

388 
CONST
 
uöt16
 
gMAX_RTG_SRC_ENTRIES
;

389 
CONST
 
uöt8
 
gMAX_RREQ_ENTRIES
;

391 
CONST
 
uöt16
 
gMTO_RREQ_LIMIT_TIME
;

392 
CONST
 
uöt8
 
gMTO_ROUTE_EXPIRY_TIME
;

394 
CONST
 
uöt8
 
gMAX_PASSIVE_ACK_CNT
;

397 
CONST
 
uöt16
 
gNWK_MAX_DEVICE_LIST
;

400 
CONST
 
uöt8
 
gNWK_MAX_SLEEPING_END_DEVICES
;

402 
CONST
 
uöt8
 
gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
;

404 
CONST
 
uöt16
 
gNWK_MIN_ROUTER_CHILDREN
;

405 
CONST
 
uöt16
 
gNWK_MIN_ENDDEVICE_CHILDREN
;

407 
uöt16
 *
Cskù
;

408 
byã
 
CskùRås
[];

409 
byã
 
CskùChld∫
[];

411 
byã
 
gMIN_TREE_LINK_COST
;

413 
CONST
 
byã
 
deÁu…Key
[];

414 
CONST
 
byã
 
deÁu…TCLökKey
[];

416 
CONST
 
uöt8
 
gMAX_SOURCE_ROUTE
;

417 
uöt16
 
πgSrcRñayLi°
[];

419 
CONST
 
byã
 
gMAX_BCAST
;

421 
CONST
 
byã
 
gNWK_CONFLICTED_ADDR_EXPIRY_TIME
;

423 
CONST
 
uöt8
 
gNWK_FREQ_AGILITY_ALL_MAC_ERRS
;

425 
CONST
 
uöt8
 
gMAX_BROADCAST_QUEUED
;

427 
CONST
 
uöt8
 
gLINK_DOWN_TRIGGER
;

429 
CONST
 
uöt8
 
gDEFAULT_ROUTE_REQUEST_RADIUS
;

431 
CONST
 
uöt8
 
gDEF_NWK_RADIUS
;

433 
CONST
 
uöt16
 
gLINK_STATUS_JITTER_MASK
;

440 
CONST
 
uöt16
 
gNWK_MAX_BINDING_ENTRIES
;

441 
CONST
 
uöt8
 
gMAX_BINDING_CLUSTER_IDS
;

442 
CONST
 
uöt16
 
gBIND_REC_SIZE
;

444 
CONST
 
uöt8
 
gAPS_MAX_GROUPS
;

446 
uöt8
 
gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES
;

452 #i‡
deföed
 ( 
PACKET_FILTER_STATS
 )

453 
uöt32
 
≠sInvÆidPackës
;

454 
uöt32
 
≠sSecurôyFaûuªs
;

455 
uöt32
 
nwkInvÆidPackës
;

456 
uöt32
 
nwkSecurôyFaûuªs
;

466 
nwk_globÆs_öô
( );

467 
NIB_öô
( );

469 
nwk_Sètus
–
uöt16
 
°©usCode
, uöt16 
°©usVÆue
 );

471 
nwk_Upd©eSèti°ics
–
uöt8
 
°©i°icCode
 );

475 #ifde‡
__˝lu•lus


	@Components/stack/nwk/nwk_util.h

40 #i‚de‡
NWK_UTIL_H


41 
	#NWK_UTIL_H


	)

43 #ifde‡
__˝lu•lus


50 
	~"NLMEDE.h
"

51 
	~"nwk.h
"

66 
	#CMD_ID_RREQ
 0x01

	)

67 
	#CMD_ID_RREP
 0x02

	)

68 
	#CMD_ID_NETWORK_STATUS
 0x03

69 
	#CMD_ID_LEAVE
 0x04

	)

70 
	#CMD_ID_RREC
 0x05

	)

71 
	#CMD_ID_REJOIN_REQ
 0x06

	)

72 
	#CMD_ID_REJOIN_RSP
 0x07

	)

73 
	#CMD_ID_LINK_STATUS
 0x08

	)

74 
	#CMD_ID_NETWORK_REPORT
 0x09

	)

75 
	#CMD_ID_NETWORK_UPDATE
 0x0A

	)

77 
	#CMD_ID_PING
 7

	)

78 
	#CMD_ID_PING_RSP
 8

	)

79 
	#CMD_ID_TREE_REQ
 9

	)

80 
	#CMD_ID_TREE_RSP
 10

	)

81 
	#CMD_ID_PARENT_REQ
 11

	)

82 
	#CMD_ID_PARENT_RSP
 12

	)

85 
	#NWK_HDR_FRAME_CTRL_LSB
 0

	)

86 
	#NWK_HDR_FRAME_CTRL_MSB
 1

	)

87 
	#NWK_HDR_DST_ADDR_LSB
 2

	)

88 
	#NWK_HDR_DST_ADDR_MSB
 3

	)

89 
	#NWK_HDR_SRC_ADDR_LSB
 4

	)

90 
	#NWK_HDR_SRC_ADDR_MSB
 5

	)

91 
	#NWK_HDR_RADIUS
 6

	)

92 
	#NWK_HDR_SEQ_NUM
 7

	)

93 
	#NWK_HDR_LEN
 8

	)

96 
	#NWK_HDR_DST_EXTADDR_LEN
 
Z_EXTADDR_LEN


	)

97 
	#NWK_HDR_SRC_EXTADDR_LEN
 
Z_EXTADDR_LEN


	)

98 
	#NWK_HDR_MULTICAST_CTRL_LEN
 1

	)

99 
	#NWK_HDR_SRC_ROUTE_SUBFRAME_LEN
 0

	)

100 
	#NWK_HDR_SRCRTG_CNT_LEN
 1

	)

103 
	#NWK_FC_FRAME_TYPE
 0

	)

104 
	#NWK_FC_PROT_VERSION
 2

	)

105 
	#NWK_FC_DISC_ROUTE
 6

	)

106 
	#NWK_FC_MULTICAST
 8

	)

107 
	#NWK_FC_SECURE
 9

	)

108 
	#NWK_FC_SRC_ROUTE
 10

	)

109 
	#NWK_FC_DST_EXTADDR
 11

	)

110 
	#NWK_FC_SRC_EXTADDR
 12

	)

111 
	#NWK_FC_RESERVED
 13

	)

114 
	#NWK_FC_FRAME_TYPE_MASK
 0x03

	)

115 
	#NWK_FC_PROT_VERSION_MASK
 0x0F

	)

116 
	#NWK_FC_DISC_ROUTE_MASK
 0x03

	)

117 
	#NWK_FC_MULTICAST_MASK
 0x01

	)

118 
	#NWK_FC_SECURE_MASK
 0x01

	)

119 
	#NWK_FC_SRC_ROUTE_MASK
 0x01

	)

120 
	#NWK_FC_DST_EXTADDR_MASK
 0x01

	)

121 
	#NWK_FC_SRC_EXTADDR_MASK
 0x01

	)

122 
	#NWK_FC_RESERVED_MASK
 0x07

	)

125 
	#DATA_FRAME_TYPE
 0x00

	)

126 
	#CMD_FRAME_TYPE
 0x01

	)

127 
	#STUB_NWK_FRAME_TYPE
 0x03

	)

129 
	#NWK_FC_ROUTE_DISC_ENABLED
 0x01

	)

132 
	#NWK_CMD_LEAVE_OPTIONS
 1

	)

133 
	#NWK_CMD_LEAVE_SIZE
 2

	)

134 
	#NWK_CMD_LEAVE_RJ
 0x20

135 
	#NWK_CMD_LEAVE_REQ
 0x40

136 
	#NWK_CMD_LEAVE_RC
 0x80

137 
	#NWK_CMD_LEAVE_OPTIONS_RESERVE
 0x1F

	)

139 
	#NWK_CMD_REJOIN_REQ_SIZE
 2

	)

140 
	#NWK_CMD_REJOIN_RSP_SIZE
 4

	)

143 
	#NSDU_SIZE_RREQ
 6

	)

144 
	#NSDU_SIZE_RREQ_EXT
 
NSDU_SIZE_RREQ
 + 8

	)

145 
	#NSDU_SIZE_RREP
 8

	)

146 
	#NSDU_SIZE_NETWORK_STATUS
 4

	)

147 
	#NSDU_SIZE_LINK_STATUS_DEFAULT
 2

	)

148 
	#NSDU_SIZE_NETWORK_REPORT
 10

	)

149 
	#NSDU_SIZE_NETWORK_UPDATE
 11

	)

151 
	#NWK_AUX_HDR_LEN
 14

	)

153 
	#NWKSTAT_NO_ROUTE_AVAIL
 0x00

	)

154 
	#NWKSTAT_TREE_LINK_FAILURE
 0x01

	)

155 
	#NWKSTAT_NONTREE_LINK_FAILURE
 0x02

	)

156 
	#NWKSTAT_LOW_BATTERY_LEVEL
 0x03

	)

157 
	#NWKSTAT_NO_ROUTING_CAPACITY
 0x04

	)

158 
	#NWKSTAT_NO_INDIRECT_CAPACITY
 0x05

	)

159 
	#NWKSTAT_INDIRECT_TRANS_EXPIRY
 0x06

	)

160 
	#NWKSTAT_TARGET_DEVICE_UNAVAIL
 0x07

	)

161 
	#NWKSTAT_TARGET_ADDRESS_UNALLOCATED
 0x08

	)

162 
	#NWKSTAT_PARENT_LINK_FAILURE
 0x09

	)

163 
	#NWKSTAT_VALIDATE_ROUTE
 0x0a

	)

164 
	#NWKSTAT_SOURCE_ROUTE_FAILURE
 0x0b

	)

165 
	#NWKSTAT_MANY_TO_ONE_ROUTE_FAILURE
 0x0c

	)

166 
	#NWKSTAT_ADDRESS_CONFLICT
 0x0d

	)

167 
	#NWKSTAT_VERIFY_ADDRESSES
 0x0e

	)

168 
	#NWKSTAT_PANID_UPDATE
 0x0f

	)

169 
	#NWKSTAT_NWK_ADDRESS_UPDATE
 0x10

	)

170 
	#NWKSTAT_BAD_FRAME_COUNT
 0x11

	)

171 
	#NWKSTAT_BAD_KEY_SEQ_NUMBER
 0x12

	)

174 
	#LS_OPTION_LAST_FRAME
 0x40

	)

175 
	#LS_OPTION_FIRST_FRAME
 0x20

	)

176 
	#LS_OPTION_ENTRY_COUNT_MASK
 0x1F

	)

177 
	#LS_OPTION_RESERVED
 0x80

	)

179 
	#LS_ENTRY_COST_MASK
 0x07

	)

180 
	#LS_ENTRY_TXCOST_SHIFT
 4

	)

181 
	#LS_ENTRY_RESERVED
 0x88

	)

183 
	#LS_TABLE_SIZE
 3

	)

186 
	#NWK_MC_MODE_MASK
 0x03

	)

187 
	#NWK_MC_MODE_NONMEMBER
 0x00

	)

188 
	#NWK_MC_MODE_MEMBER
 0x01

	)

189 
	#NWK_MC_RADIUS_MASK
 0x1C

	)

190 
	#NWK_MC_RADIUS_SHIFT
 2

	)

191 
	#NWK_MC_MAXRADIUS_MASK
 0xE0

	)

192 
	#NWK_MC_MAXRADIUS_SHIFT
 5

	)

193 
	#NWK_MC_RESET_RADIUS_SHIFT
 (
NWK_MC_MAXRADIUS_SHIFT
 - 
NWK_MC_RADIUS_SHIFT
)

	)

194 
	#NWK_MC_INFINITE_RADIUS
 7

	)

197 
	#NWKREPORT_PANID_CONFLICT
 0x00

	)

200 
	#NWKREPORT_INFO_CNT
 0x1F

	)

201 
	#NWKREPORT_CMD_ID
 0xE0

	)

204 
	#NWKUPDATE_PANID_UPDATE
 0x00

	)

207 
	#NWKUPDATE_INFO_CNT
 0x1F

	)

208 
	#NWKUPDATE_CMD_ID
 0xE0

	)

215 
uöt16
 
d°Addr
;

216 
uöt8
* 
extAddr
;

217 
uöt8
 
ªjoö
;

218 
uöt8
 
ªque°
;

219 
uöt8
 
ªmoveChûdªn
;

220 
uöt8
 
˙f
;

221 } 
	tNLME_LóveCmd_t
;

225 
uöt16
 
devAddr
;

226 
uöt8
 
txCo°
;

227 
uöt8
 
rxCo°
;

228 } 
	tlökSètusLi°Iãm_t
;

233 
uöt8
 
°©us
;

234 
uöt32
 
sˇ¬edCh™√ls
;

235 
uöt8
 *
íîgyDëe˘Li°
;

236 } 
	tNLME_EDSˇnC⁄fúm_t
;

241 
uöt16
 
tŸÆTønsmissi⁄s
;

242 
uöt16
 
txFaûuªs
;

243 } 
	tNLME_Ch™I¡î„ªn˚_t
;

256 
ZSètus_t
 
NLDE_D©aIndSíd
–
NLDE_D©aReq_t
* 
ªq
 );

261 
ZSètus_t
 
NLDE_D©aReqSíd
–
NLDE_D©aReq_t
* 
ªq
 );

266 
ZSètus_t
 
NLDE_SídMsg
–
uöt8
* 
msdu
, 
uöt16
 
√xtH›Addr
, uöt16 
macSrcAddr
,

267 
uöt8
 
msduLígth
, uöt8 
nsduH™dÀ
,

268 
uöt16
 
nsduH™dÀO±i⁄s
,

269 
nwkDB_U£rD©a_t
* 
ud
 );

274 
uöt8
 
NLDE_P¨£Msg
–
byã
 *
buf
, byã 
bufLígth
, 
NLDE_FømeF‹m©_t
 *
ff
 );

279 
RTG_Upd©eNeighb‹E¡ry
–
uöt16
 
nodeAddªss
, uöt16 
∑nId
,

280 
byã
 
lökQuÆôy
, byã 
°©us
, byã 
£¡
);

285 
nwkNeighb‹RemoveAŒSå™ded
( );

287 
NLME_SëAssocFœgs
( );

289 
NLME_SëUpd©eID
–
uöt8
 
upd©eID
 );

293 
ZSètus_t
 
nwkBuûdD©aCnf
–
byã
 
h™dÀ
, byã 
°©us
 );

298 
ZSètus_t
 
NLME_LóveCmdSíd
–
NLME_LóveCmd_t
* 
cmd
 );

303 
uöt8
 
NLME_LóveCmdPro˚ss
–uöt8 
h™dÀ
, 
NLDE_FømeF‹m©_t
 *
ff
 );

308 
NLME_CmdCnf
–
NLDE_D©aCnf_t
* 
˙f
 );

313 
uöt8
 
NLME_CmdBˇ°
–uöt8 
cmdID
 );

318 
NLDE_D©aReq_t
* 
NLME_CmdD©aReqAŒoc


319 –
NLDE_D©aReqAŒoc_t
* 
dø
 );

324 * 
NLDE_FømeD©aLﬂd
–
NLDE_D©aReq_t
* 
ªq
 );

329 
NLME_RejoöR•CmdPro˚ss
–
NLDE_FømeF‹m©_t
* 
ff
 );

334 
ZSètus_t
 
NLME_RejoöR•Síd
–
ZMacAssocüãR•_t
 *
AssocR•
, 
byã
 
ªœti⁄
, 
uöt8
 
ty≥
 );

339 
NLME_RejoöReqCmdPro˚ss
–
NLDE_FømeF‹m©_t
* 
ff
 );

344 
uöt16
 
NLDE_BuûdSrcRtgFøme
–
NLDE_SrcFømeF‹m©_t
* 
sff
, uöt16 
d°Addr
 );

353 
byã
 
NLDE_GëH™dÀ
( );

355 
byã
 
NLME_GëPrŸocﬁVîsi⁄
( );

357 
uöt8
 
NLME_GëE√rgyThªshﬁd
( );

359 
NLME_SëE√rgyThªshﬁd
–
uöt8
 
vÆue
 );

361 
NLME_SëBrﬂdˇ°Fûãr
(
byã
 
ˇ∑bûôõs
);

363 
addr_fûãr_t
 
NLME_IsAddªssBrﬂdˇ°
(
uöt16
 
sh‹tAddªss
);

365 
NLME_RemoveChûd
–
uöt8
* 
extAddr
, uöt8 
dóŒoc
 );

367 
uöt8
 
nwk_mu…iˇ°
–
NLDE_FømeF‹m©_t
* 
ff
 );

369 
NLME_NwkSètusAddrC⁄Êi˘Pro˚ss
–
uöt16
 
addr
 );

371 
uöt8
 
NLME_Pro˚ssAddªssC⁄Êi˘Loˇl
–
uöt16
 
addr
 );

373 
ZSètus_t
 
NLDE_CheckF‹AddrC⁄Êi˘
–
NLDE_FømeF‹m©_t
 *
ff
 );

374 
ZSètus_t
 
NLME_SídNëw‹kSètus
–
uöt16
 
d°Addr
,

375 
uöt16
 
°©usAddr
, 
uöt8
 
°©usCode
, uöt8 
f‹˚SeqNum
 );

377 
uöt8
 
NLME_Pro˚ssNëw‹kSètus
–
NLDE_FømeF‹m©_t
 *
ff
, uöt8 
h™dÀ
 );

379 
nwkH™dÀBrokíRouã
–
nwkDB_t
 *
ªc
 );

381 
uöt8
 
NLDE_P¨£FømeC⁄åﬁ
–
uöt16
 
fc
, 
NLDE_FømeF‹m©_t
 *
ff
 );

384 
NLME_AddªssC⁄Êi˘AssignNewStocha°ic
( );

387 (*
≤wk_AssignNewAddr
)( );

389 
ZSètus_t
 
NLME_SídNëw‹kRï‹t
–
uöt16
 
d°Addr
, 
uöt8
 
ªp‹tTy≥
, uöt8 *
EPID
,

390 
uöt8
 
ªp‹tInfoC¡
, 
uöt16
 *
∑nIDs
 );

391 
NLME_Pro˚ssNëw‹kRï‹t
–
NLDE_FømeF‹m©_t
 *
ff
 );

392 
ZSètus_t
 
NLME_SídNëw‹kUpd©e
–
uöt16
 
d°Addr
, 
uöt8
 
upd©eTy≥
, uöt8 *
EPID
,

393 
uöt8
 
upd©eId
, 
uöt16
 
√wPID
 );

394 
uöt8
 
NLME_Pro˚ssNëw‹kUpd©e
–uöt8 
h™dÀ
, 
NLDE_FømeF‹m©_t
 *
ff
 );

395 
nwkAddP™Id
–
uöt16
 
∑nID
 );

396 
nwkPro˚ssP™IdSˇn
( );

397 
nwkCh™geP™ID
( );

398 
nwkFªeP™IdLi°
( );

400 
uöt16
 
nwkTønsmissi⁄Faûuªs
–
uöt8
 
ª£t
 );

402 
uöt8
 
nwk_ExtPANIDVÆid
–
byã
 *
∑nID
 );

408 
NLME_InôLökSètus
( );

409 
NLME_Upd©eLökSètus
( );

410 
NLME_SëLökSètusTimî
( );

411 
ZSètus_t
 
nwkSídLökSètus
( );

412 
ZSètus_t
 
NLME_SídLökSètus
–
uöt8
 
√ighb‹s
, uöt8 
›ti⁄s
,

413 
lökSètusLi°Iãm_t
 *
pLi°
 );

414 
NLME_Pro˚ssLökSètus
–
NLDE_FømeF‹m©_t
 *
ff
 );

416 (*
pNLME_SëLökSètusTimî
)( );

417 (*
pNLME_Upd©eLökSètus
)( );

418 (*
pNLME_Pro˚ssLökSètus
)–
NLDE_FømeF‹m©_t
 *
ff
 );

419 
uöt8
 
nwkC⁄vîtLqiToCo°
–uöt8 
lqi
 );

423 
	#NWKNEIGHBOR_NOT_FOUND
 0x00

424 
	#NWKNEIGHBOR_FOUND_SHORT
 0x0A

426 
	#NWKNEIGHBOR_FOUND_IEEE
 0xA0

428 
	#NWKNEIGHBOR_FOUND
 0xAA

429 

	)

433 
uöt16
 
	g√ighb‹Addªss
;

434 
uöt8
 
	g√ighb‹ExtAddr
[
Z_EXTADDR_LEN
];

435 
uöt16
 
	g∑nId
;

436 
uöt8
 
	gage
;

437 
lökInfo_t
 
	glökInfo
;

438 } 
	t√ighb‹E¡ry_t
;

440 
√ighb‹E¡ry_t
 
√ighb‹TabÀ
[];

442 
√ighb‹E¡ry_t
 *
nwkNeighb‹Föd
–
uöt16
 
nwkAddr
, uöt16 
∑nID
 );

443 
√ighb‹E¡ry_t
 *
nwkNeighb‹FödEm±ySlŸ
( );

444 
uöt16
 
nwkNeighb‹Cou¡
( );

445 
nwkNeighb‹Remove
–
uöt16
 
Neighb‹Addªss
, uöt16 
P™Id
 );

446 
√ighb‹E¡ry_t
 *
nwkNeighb‹GëWôhIndex
–
uöt16
 
Index
 );

447 
nwkNeighb‹InôTabÀ
( );

448 
nwkNeighb‹CÀ¨E¡ry
–
√ighb‹E¡ry_t
 *
íåy
 );

449 
nwkNeighb‹KìpPANID
–
uöt16
 
P™ID
 );

450 
lökInfo_t
 *
nwkNeighb‹GëLökInfo
–
uöt16
 
Neighb‹Addªss
, uöt16 
∑nId
 );

451 
byã
 
nwkNeighb‹CheckAddr
–
uöt16
 
nwkAddr
, 
uöt8
 *
extAddr
 );

452 
nwkNeighb‹Upd©eAge
( );

453 
uöt16
 
nwkNeighb‹FödR™dom
–uöt16 
skùAddr
, uöt16 
skùAddr2
, uöt16 
skùAddr3
 );

454 
nwkNeighb‹Upd©eNwkAddr
–
uöt16
 
nwkAddr
, 
uöt8
 *
õìAddr
 );

455 
nwkNeighb‹Add
–
uöt16
 
nwkAddr
, uöt16 
∑nId
, 
uöt8
 
lökQuÆôy
 );

456 
nwkNeighb‹Ch™gePANID
–
uöt16
 
ﬁdP™ID
, uöt16 
√wP™ID
 );

462 (*
pNwkFªqAgûôySˇnCfg
)–
ZMacSˇnCnf_t
 *
∑øm
 );

463 (*
pNwkFªqAgûôyIncTŸÆTx
)( );

464 (*
pNwkFªqAgûôyIncEº‹C¡
)–
lökInfo_t
 *
lökInfo
, 
uöt8
 
°©us
 );

466 
NwkFªqAgûôyInô
( );

470 #ifde‡
__˝lu•lus


	@Components/stack/nwk/reflecttrack.h

40 #i‚de‡
REFLECTTRACK_H


41 
	#REFLECTTRACK_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComdef.h
"

52 
	~"oßl.h
"

65 
	#REFTRACK_MAX_ENTRIES
 5

	)

73 
	#REFTRACK_MAX_SIMUL
 3

	)

79 
	#REFTRACK_MAX_INDIRECTS
 1

	)

82 
	#REFDEST_WAITING
 0x00

	)

83 
	#REFDEST_SENT
 0x01

	)

84 
	#REFDEST_APS_ACK_EXPECTED
 0x02

	)

85 
	#REFDEST_DELIVERED
 0x04

	)

86 
	#REFDEST_FAILED
 0x08

	)

87 
	#REFDEST_INDIRECT
 0x80

	)

95 
uöt8
 
d°AddrMode
;

96 
uöt16
 
d°Addr
;

97 
uöt8
 
d°EP
;

98 
uöt8
 
h™dÀ
;

99 
uöt8
 
›ti⁄s
;

100 } 
	tReÊe˘De°Rec_t
;

104 *
√xt
;

105 
uöt8
 
ID
;

106 
uöt8
 
§cEP
;

107 
uöt16
 
˛u°îID
;

108 
uöt8
 
c⁄fúmed
;

109 
uöt16
 
å™sID
;

110 
uöt8
* 
asdu
;

111 
uöt8
 
numde°s
;

112 
ReÊe˘De°Rec_t
 
de°s
[];

115 } 
	tReÊe˘Tøckög_t
;

130 
ªÊe˘Tøck_SëMaxE¡rõs
–
uöt8
 
√wE¡rõs
 );

139 
ªÊe˘Tøckög_SëMaxSimu…™eous
–
uöt8
 
√wE¡rõs
 );

144 
uöt8
 
ªÊe˘Tøckög_GëMaxSimu…™eous
( );

150 
uöt8
 
ªÊe˘Tøckög_GëMaxSimu…™eousAdju°ed
–
ReÊe˘Tøckög_t
 *
íåy
 );

156 
ªÊe˘Tøckög_SëMaxIndúe˘
–
uöt8
 
√wE¡rõs
 );

162 
uöt8
 
ªÊe˘Tøckög_GëMaxIndúe˘
( );

168 
uöt8
 
ªÊe˘Tøckög_GëMaxIndúe˘Adju°ed
–
ReÊe˘Tøckög_t
 *
íåy
 );

175 
ReÊe˘Tøckög_t
 *
ªÊe˘Tøck_GëNewE¡ry
–
uöt8
 
numDe°s
,

176 
uöt8
 
asduLí
 );

181 
uöt8
 
ªÊe˘Tøck_NumE¡rõs
( );

186 
ªÊe˘Tøck_RemoveE¡ry
–
ReÊe˘Tøckög_t
 *
íåy
 );

191 
ªÊe˘Tøck_RemoveE¡ryNŸify
–
ReÊe˘Tøckög_t
 *
íåy
);

196 
ªÊe˘Tøck_AddToEnd
–
ReÊe˘Tøckög_t
 *
íåy
 );

203 
uöt8
 
ªÊe˘Tøck_AddNewE¡ry
–
ReÊe˘Tøckög_t
 *
√wE¡ry
 );

209 
ReÊe˘Tøckög_t
 *
ªÊe˘Tøck_FödE¡ry
–
byã
 
ªfID
 );

215 
ReÊe˘Tøckög_t
 *
ªÊe˘Tøck_FödH™dÀ
–
byã
 
h™dÀ
 );

220 
ªÊe˘Tøck_Upd©eO±i⁄
–
ReÊe˘Tøckög_t
 *
ªf
, 
byã
 
h™dÀ
, byã 
›ti⁄
 );

226 
ReÊe˘Tøckög_t
 *
ªÊe˘Tøck_FödE¡rySètus
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
 );

231 
uöt8
 
ªÊe˘Tøckög_GëNumDñivîed
–
ReÊe˘Tøckög_t
 *
íåy
 );

236 
uöt8
 
ªÊe˘Tøckög_GëNumFaûed
–
ReÊe˘Tøckög_t
 *
íåy
 );

241 
ªÊe˘Tøckög_FûlInFaûed
–
ReÊe˘Tøckög_t
 *
íåy
, 
uöt16
 *
li°
 );

245 #ifde‡
__˝lu•lus


	@Components/stack/nwk/rtg.h

40 #i‚de‡
RTG_H


41 
	#RTG_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"ZComDef.h
"

53 
	~"nwk_utû.h
"

54 
	~"nwk_bufs.h
"

55 
	~"ZGlobÆs.h
"

65 
	#RTG_TIMER_INTERVAL
 1000

	)

68 
	#MTO_ROUTE
 0x01

69 
	#NO_ROUTE_CACHE
 0x02

70 
	#RTG_RECORD
 0x04

71 
	#MTO_ROUTE_RC
 0x08

72 
	#MTO_ROUTE_NRC
 0x10

73 
	#DEST_IEEE_ADDR
 0x20

74 
	#MULTICAST_ROUTE
 0x40

75 
	#RREQ_OPTIONS_MASK
 0x78

76 

	)

77 
	#RTG_MTO_DEST_ADDRESS
 
NWK_BROADCAST_SHORTADDR_DEVZCZR


78 

	)

79 
	#RREP_ORI_IEEE
 0x10

	)

80 
	#RREP_RES_IEEE
 0x20

	)

81 
	#RREP_MULTICAST
 0x40

	)

82 
	#RREP_OPTIONS_MASK
 (
RREP_ORI_IEEE
 | 
RREP_RES_IEEE
 | 
RREP_MULTICAST
)

	)

84 
	#RTG_END_DEVICE_ADDR_TYPE
 0

	)

85 
	#RTG_ROUTER_ADDR_TYPE
 1

	)

87 
	#RTG_NO_EXPIRY_TIME
 0xFF

	)

95 
RTG_SUCCESS
,

96 
RTG_FAIL
,

97 
RTG_TBL_FULL
,

98 
RTG_HIGHER_COST
,

99 
RTG_NO_ENTRY
,

100 
RTG_INVALID_PATH
,

101 
RTG_INVALID_PARAM
,

102 
RTG_SRC_TBL_FULL


103 } 
	tRTG_Sètus_t
;

106 
	#RT_INIT
 0

	)

107 
	#RT_ACTIVE
 1

	)

108 
	#RT_DISC
 2

	)

109 
	#RT_LINK_FAIL
 3

	)

110 
	#RT_REPAIR
 4

	)

117 
uöt16
 
d°Addªss
;

118 
uöt16
 
√xtH›Addªss
;

119 
byã
 
expúyTime
;

120 
byã
 
°©us
;

121 
uöt8
 
›ti⁄s
;

122 } 
	tπgE¡ry_t
;

127 
byã
 
ºeqId
;

128 
uöt16
 
§cAddªss
;

129 
uöt16
 
¥eviousNode
;

130 
byã
 
f‹w¨dCo°
;

131 
byã
 
ªsiduÆCo°
;

132 
byã
 
expúyTime
;

133 } 
	tπDiscE¡ry_t
;

138 
uöt16
 
§cAddr
;

139 
uöt8
 
bdt
;

140 
uöt8
 
∑t
;

141 
uöt8
 
mbr
;

142 
uöt8
 
h™dÀ
;

144 
uöt8
 
ackC¡
;

145 
uöt8
 
id
;

146 } 
	tbˇ°E¡ry_t
;

151 
uöt8
 
expúyTime
;

152 
uöt8
 
ªœyCou¡
;

153 
uöt16
 
d°Addªss
;

154 
uöt16
* 
ªœyLi°
;

155 } 
	tπgSrcE¡ry_t
;

160 
πgE¡ry_t
 
πgTabÀ
[];

161 
πDiscE¡ry_t
 
πDiscTabÀ
[];

163 
πgSrcE¡ry_t
 
πgSrcTabÀ
[];

169 
RTG_Inô
( );

171 
πgE¡ry_t
 *
RTG_GëRtgE¡ry
–
uöt16
 
D°Addªss
, 
uöt8
 
›ti⁄s
);

173 
RTG_Sètus_t
 
RTG_RemoveRtgE¡ry
–
uöt16
 
D°Addªss
, 
uöt8
 
›ti⁄s
 );

175 
uöt16
 
RTG_GëNextH›
–uöt16 
D°Addªss
, uöt16 
avoidAddr
,

176 
uöt16
 
avoidAddr2
, uöt16 
avoidAddr3
, 
uöt8
 
›ti⁄s
 );

178 
byã
 
RTG_Pro˚ssRªq
(

179 
NLDE_FømeF‹m©_t
 *
ff
, 
uöt16
 
macSrcAddªss
, uöt16 *
√xtH›Addr
 );

181 
RTG_Pro˚ssRªp
–
NLDE_FømeF‹m©_t
 *
ff
, 
uöt16
 
macSrcAddªss
 );

183 
RTG_Pro˚ssRªc
–
NLDE_FømeF‹m©_t
 *
ff
 );

185 
uöt8
 
RTG_Pro˚ssREº
–
NLDE_FømeF‹m©_t
 *
ff
 );

186 
RTG_TimîEvít
( );

188 
uöt16
 
RTG_AŒocNewAddªss
–
byã
 
devi˚Ty≥
 );

190 
RTG_DeAŒocTªeAddªss
–
uöt16
 
sh‹tAddr
 );

192 
RTG_DeAŒocStocha°icAddªss
–
uöt16
 
sh‹tAddr
 );

194 
RTG_Bˇ°TimîH™dÀr
( );

196 
byã
 
RTG_Bˇ°Chk
–
NLDE_FømeF‹m©_t
 *
ff
, 
uöt16
 
macSrcAddr
 );

198 
byã
 
RTG_Bˇ°Add
(
NLDE_FømeF‹m©_t
*
ff
, 
uöt16
 
macSrcAddr
, byã 
h™dÀ
);

200 
RTG_Bˇ°Dñ
–
byã
 
h™dÀ
 );

202 
RTG_D©aReq
–
oßl_evít_hdr_t
 *
öMsg
 );

204 
byã
 
RTG_PoﬁAdd
–
NLDE_FømeF‹m©_t
 *
ff
 );

206 
uöt16
 
RTG_GëTªeRouã
–uöt16 
d°Addªss
 );

208 
uöt16
 
RTG_SrcGëNextH›
–
uöt8
 
πgIndex
, uöt16* 
πgLi°
);

210 
uöt8
 
RTG_VÆid©eSrcRtg
(uöt8 
ªœyC¡
, uöt8 
ªœyIdx
, 
uöt16
* 
ªœyLi°
 );

212 
uöt8
 
RTG_RtgRec‹dInôüti⁄
–
uöt16
 
D°Addªss
, uöt16 
SrcAddªss
, uöt8 
›ti⁄s
);

214 
RTG_Sètus_t
 
RTG_GëRtgSrcE¡ry
–
uöt16
 
d°Addr
, 
uöt8
* 
pRñayC¡
, uöt16** 
µRñayLi°
);

215 
RTG_Sètus_t
 
RTG_CheckRtSètus
–
uöt16
 
D°Addªss
, 
byã
 
RtSètus
, 
uöt8
 
›ti⁄s
 );

217 
uöt8
 
RTG_Pro˚ssRtDiscBôs
–uöt8 
πDiscFœg
, 
uöt16
 
d°Addªss
, uöt8* 
pSrcRtgSë
, uöt8 
›ti⁄s
 );

219 
uöt8
 
RTG_RouãMaöè√n˚
–
uöt16
 
D°Addªss
, uöt16 
SrcAddªss
, uöt8 
›ti⁄s
 );

221 
RTG_FûlCSkùTabÀ
–
byã
 *
chûdªn
, byã *
rouãrs
,

222 
byã
 
dïth
, 
uöt16
 *
pTbl
 );

225 
uöt8
 
RTG_IsAn˚°‹
–
uöt16
 
devi˚Addªss
 );

227 
RTG_SídBrokíRouã
–
uöt16
 
nwkSrcAddr
, uöt16 
nwkD°Addr
,

228 
uöt8
 
§cRouãSë
, 
uöt16
 
macSrcAddr
, uöt16 
macD°Addr
 );

230 
uöt16
 
RTG_CÆcTªeAddªss
–
byã
 
devi˚Ty≥
 );

232 
uöt16
 
RTG_GëStocha°ic
–
byã
 
devi˚Ty≥
 );

234 
uöt16
 
RTG_GëNextTªeH›
–uöt16 
d°Addªss
 );

236 
uöt16
 
RTG_ChûdGëNextH›
–uöt16 
D°Addr
 );

238 
uöt8
 
RTG_GëAn˚°‹s
–
uöt16
 
d°Addr
, uöt16 
™˚°‹Addr
, uöt16 *
pRtgD°
 );

240 
RTG_√xtH›IsBad
–
uöt16
 
√xtH›
 );

242 
ZSètus_t
 
RTG_SídREº
–
uöt16
 
SrcAddªss
, uöt16 
D°Addªss
, 
byã
 
Eº‹Code
 );

245 
RTG_Sètus_t
 
RTG_AddSrcRtgE¡ry_Gu¨™ãed
–
uöt16
 
§cAddr
, 
uöt8
 
ªœyC¡
, uöt16* 
pRñayLi°
 );

248 
uöt16
 (*
pRTG_FöishGëNextH›
)–uöt16 
D°Addªss
 );

249 
uöt16
 (*
pRTG_GëNextTªeH›
)–uöt16 
d°Addªss
 );

250 
uöt16
 (*
pRTG_CÆcAddªss
)–
byã
 
devi˚Ty≥
 );

251 
uöt16
 (*
pRTG_GëTªeRouã
)(uöt16 
d°Addªss
 );

252 (*
pRTG_DeAŒocAddªss
)–
uöt16
 
sh‹tAddr
 );

253 
uöt8
 (*
pRTG_GëAn˚°‹s
)–
uöt16
 
d°Addr
, uöt16 
™˚°‹Addr
, uöt16 *
pRtgD°
 );

255 
RTG_öôRtgTabÀ
( );

257 
RTG_MTORouãReq
();

261 #ifde‡
__˝lu•lus


	@Components/stack/nwk/stub_aps.c

43 
	~"oßl.h
"

44 
	~"mac_•ec.h
"

45 
	~"nwk_utû.h
"

46 
	~"AF.h
"

48 
	~"°ub_≠s.h
"

59 
	#STUB_NWK_HDR_LEN
 2

	)

62 
	#STUB_APS_HDR_FRAME_CTRL
 
STUB_NWK_HDR_LEN


	)

65 
	#CHANNEL_CHANGE_EVT
 0x0001

	)

67 
	#CHANNEL_CHANGE_RETRY_TIMEOUT
 100

	)

74 
zAddrTy≥_t
 
	maddr
;

75 
uöt16
 
	m∑nId
;

76 } 
	t∑n_t
;

82 
uöt8
 
	gStubAPS_TaskID
 = 0xFF;

98 
uöt8
 
	g√wCh™√l
;

99 
uöt8
 
	gch™√lCh™geInProgªss
 = 
FALSE
;

102 
uöt8
 
	g≠pTaskID
 = 0xFF;

103 
uöt8
 
	g≠pEndPoöt
 = 0;

110 
StubNWK_P¨£Msg
–
uöt8
 *
buf
, uöt8 
bufLígth
, 
NLDE_FømeF‹m©_t
 *
¢ff
 );

111 
StubAPS_P¨£Msg
–
NLDE_FømeF‹m©_t
 *
¢ff
, 
≠s_FømeF‹m©_t
 *
ßff
 );

112 
StubNWK_BuûdMsg
–
uöt8
 *
nwkHdr
 );

113 
StubAPS_BuûdMsg
–
uöt8
 *
≠sHdr
, uöt8 
‰mCål
, 
uöt16
 
groupID
, 
APSDE_D©aReq_t
 *
ªq
 );

114 
ZSètus_t
 
StubAPS_BuûdFømeC⁄åﬁ
–
uöt8
 *
‰mCål
, 
zAddrTy≥_t
 *
d°Addr
,

115 
uöt16
 *
groupID
, 
APSDE_D©aReq_t
 *
ªq
 );

116 
ZSètus_t
 
StubAPS_SëNewCh™√l
–
uöt8
 
ch™√l
 );

117 
StubAPS_NŸifyAµ
–
uöt8
 
°©us
 );

119 
uöt8
 
StubAPS_ZMacCÆlback
–uöt8 *
msgPå
 );

130 
	$StubAPS_Inô
–
uöt8
 
èsk_id
 )

132 
StubAPS_TaskID
 = 
èsk_id
;

135 
pZMac_AµCÆlback
 = 
StubAPS_ZMacCÆlback
;

137 
	}
}

150 
UINT16
 
	$StubAPS_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

152 ()
èsk_id
;

154 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

156 
oßl_evít_hdr_t
 *
msg_±r
;

158  (
msg_±r
 = (
oßl_evít_hdr_t
 *)
	`oßl_msg_ª˚ive
–
StubAPS_TaskID
 )Ë!
NULL
 )

160 i‡–
msg_±r
->
evít
 =
MAC_MCPS_DATA_CNF
 )

162 
	`INTERP_D©aC⁄fúm
–(
ZMacD©aCnf_t
 *)
msg_±r
 );

164 i‡–
msg_±r
->
evít
 =
MAC_MCPS_DATA_IND
 )

166 
	`INTERP_D©aIndiˇti⁄
–(
macM˝sD©aInd_t
 *)
msg_±r
 );

169 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
msg_±r
 );

173  ( 
evíts
 ^ 
SYS_EVENT_MSG
 );

176 i‡–
evíts
 & 
CHANNEL_CHANGE_EVT
 )

179 
ZSètus_t
 
°©us
 = 
	`StubAPS_SëNewCh™√l
–
√wCh™√l
 );

180 i‡–
°©us
 !
ZSuc˚ss
 )

183 
uöt8
 
rxOnIdÀ
 = 
åue
;

184 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

187 
	`nwk_£tSèãIdÀ
–
FALSE
 );

189 
ch™√lCh™geInProgªss
 = 
FALSE
;

193 
	`StubAPS_NŸifyAµ
–
°©us
 );

195  ( 
evíts
 ^ 
CHANNEL_CHANGE_EVT
 );

202 
	}
}

216 
	$StubNWK_P¨£Msg
–
uöt8
 *
buf
, uöt8 
bufLígth
, 
NLDE_FømeF‹m©_t
 *
¢ff
 )

218 
uöt16
 
fc
;

220 
	`oßl_mem£t
–
¢ff
, 0, (
NLDE_FømeF‹m©_t
) );

222 
¢ff
->
bufLígth
 = bufLength;

225 
fc
 = 
	`BUILD_UINT16
–
buf
[
NWK_HDR_FRAME_CTRL_LSB
], buf[
NWK_HDR_FRAME_CTRL_MSB
] );

228 
	`NLDE_P¨£FømeC⁄åﬁ
–
fc
, 
¢ff
 );

230 
¢ff
->
hdrLí
 = 
STUB_NWK_HDR_LEN
;

233 
¢ff
->
nsdu
 = 
buf
 + snff->
hdrLí
;

234 
¢ff
->
nsduLígth
 = snff->
bufLígth
 - snff->
hdrLí
;

236 
	}
}

248 
	$StubAPS_P¨£Msg
–
NLDE_FømeF‹m©_t
 *
¢ff
, 
≠s_FømeF‹m©_t
 *
ßff
 )

250 
uöt8
 
fcb
;

251 
uöt8
 *
asdu
;

253 
	`oßl_mem£t
–
ßff
, 0, (
≠s_FømeF‹m©_t
) );

255 
ßff
->
asduLígth
 = 
¢ff
->
nsduLígth
;

256 
asdu
 = 
¢ff
->
nsdu
;

257 
ßff
->
macDe°Addr
 = 
¢ff
->
macD°Addr
;

260 
ßff
->
FrmCål
 = *
asdu
++;

262 
fcb
 = 
ßff
->
FrmCål
 & 
APS_FRAME_TYPE_MASK
;

263 i‡–
fcb
 =
STUB_APS_FRAME
 )

265 
fcb
 = 
ßff
->
FrmCål
 & 
APS_DELIVERYMODE_MASK
;

266 i‡–
fcb
 =
APS_FC_DM_BROADCAST
 )

267 
ßff
->
wasBrﬂdˇ°
 = 
åue
;

269 
ßff
->
wasBrﬂdˇ°
 = 
Ál£
;

271 i‡–
fcb
 =
APS_FC_DM_GROUP
 )

273 
ßff
->
GroupID
 = 
	`BUILD_UINT16
–
asdu
[0],ásdu[1] );

274 
asdu
 +–
uöt16
 );

278 
ßff
->
Clu°îID
 = 
	`BUILD_UINT16
–
asdu
[0],ásdu[1] );

279 
asdu
 +–
uöt16
 );

282 
ßff
->
ProfûeID
 = 
	`BUILD_UINT16
–
asdu
[0],ásdu[1] );

283 
asdu
 += 2;

286 
ßff
->
asdu
 =ásdu;

287 
ßff
->
asduLígth
 -(
uöt8
Ë(
asdu
 - 
¢ff
->
nsdu
);

288 
ßff
->
≠sHdrLí
 = 
¢ff
->
nsduLígth
 - saff->
asduLígth
;

290 
	}
}

305 
ZSètus_t
 
	$StubAPS_BuûdFømeC⁄åﬁ
–
uöt8
 *
‰mCål
, 
zAddrTy≥_t
 *
d°Addr
,

306 
uöt16
 *
groupID
, 
APSDE_D©aReq_t
 *
ªq
 )

309 i‡–
ªq
->
txO±i⁄s
 & 
APS_TX_OPTIONS_SECURITY_ENABLE
 )

310  ( 
ZApsNŸSuµ‹ãd
 );

313 i‡–
ªq
->
txO±i⁄s
 & 
APS_TX_OPTIONS_ACK
 )

314  ( 
ZApsNŸSuµ‹ãd
 );

317 i‡–
ªq
->
txO±i⁄s
 & 
APS_TX_OPTIONS_PERMIT_FRAGMENT
 )

318  ( 
ZApsNŸSuµ‹ãd
 );

321 i‡–
ªq
->
d°Addr
.
addrMode
 =
AddrNŸPª£¡
 )

322  ( 
ZApsNŸSuµ‹ãd
 );

325 *
‰mCål
 = 
STUB_APS_FRAME
;

328 
d°Addr
->
addrMode
 = 
ªq
->dstAddr.addrMode;

331 i‡–
ªq
->
d°Addr
.
addrMode
 =
AddrBrﬂdˇ°
 )

333 *
‰mCål
 |
APS_FC_DM_BROADCAST
;

336 
d°Addr
->
addrMode
 = 
Addr16Bô
;

337 
d°Addr
->
addr
.
sh‹tAddr
 = 
ªq
->dstAddr.addr.shortAddr;

339 i‡–
ªq
->
d°Addr
.
addrMode
 =
Addr16Bô
 )

341 *
‰mCål
 |
APS_FC_DM_UNICAST
;

342 
d°Addr
->
addr
.
sh‹tAddr
 = 
ªq
->dstAddr.addr.shortAddr;

344 i‡–
ªq
->
d°Addr
.
addrMode
 =
Addr64Bô
 )

346 *
‰mCål
 |
APS_FC_DM_UNICAST
;

347 
	`oßl_˝yExtAddr
–
d°Addr
->
addr
.
extAddr
, 
ªq
->dstAddr.addr.extAddr );

349 i‡–
ªq
->
d°Addr
.
addrMode
 =
AddrGroup
 )

351 *
‰mCål
 |
APS_FC_DM_GROUP
;

354 
d°Addr
->
addrMode
 = 
Addr16Bô
;

357 
d°Addr
->
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR_DEVALL
;

360 *
groupID
 = 
ªq
->
d°Addr
.
addr
.
sh‹tAddr
;

363  ( 
ZSuc˚ss
 );

365 
	}
}

376 
	$StubNWK_BuûdMsg
–
uöt8
 *
nwkHdr
 )

378 
uöt16
 
‰mCål
 = 0;

379 
uöt8
 
¥ŸoVî
 = 
	`NLME_GëPrŸocﬁVîsi⁄
();

382 
‰mCål
 |(
STUB_NWK_FRAME_TYPE
 << 
NWK_FC_FRAME_TYPE
);

385 
‰mCål
 |(
¥ŸoVî
 << 
NWK_FC_PROT_VERSION
);

388 *
nwkHdr
++ = 
	`LO_UINT16
–
‰mCål
 );

389 *
nwkHdr
++ = 
	`HI_UINT16
–
‰mCål
 );

391 
	}
}

405 
	$StubAPS_BuûdMsg
–
uöt8
 *
≠sHdr
, uöt8 
‰mCål
, 
uöt16
 
groupID
, 
APSDE_D©aReq_t
 *
ªq
 )

408 *
≠sHdr
++ = 
‰mCål
;

411 i‡––
‰mCål
 & 
APS_DELIVERYMODE_MASK
 ) =
APS_FC_DM_GROUP
 )

413 *
≠sHdr
++ = 
	`LO_UINT16
–
groupID
 );

414 *
≠sHdr
++ = 
	`HI_UINT16
–
groupID
 );

418 *
≠sHdr
++ = 
	`LO_UINT16
–
ªq
->
˛u°îID
 );

419 *
≠sHdr
++ = 
	`HI_UINT16
–
ªq
->
˛u°îID
 );

422 *
≠sHdr
++ = 
	`LO_UINT16
–
ªq
->
¥ofûeID
 );

423 *
≠sHdr
++ = 
	`HI_UINT16
–
ªq
->
¥ofûeID
 );

426 
	`oßl_mem˝y
 ( 
≠sHdr
, 
ªq
->
asdu
,Ñeq->
asduLí
 );

428 
	}
}

439 
ZSètus_t
 
	$StubAPS_SëNewCh™√l
–
uöt8
 
ch™√l
 )

441 
uöt8
 
rxOnIdÀ
;

444 i‡––
	`nwkDB_Cou¡Ty≥s
–
NWK_DATABUF_SENT
 ) =0 ) && 
	`ZMacSèãIdÀ
() )

447 
	`ZMacSëReq
–
ZMacCh™√l
, &
ch™√l
 );

450 
rxOnIdÀ
 = 
åue
;

451 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

453 
ch™√lCh™geInProgªss
 = 
FALSE
;

455  ( 
ZSuc˚ss
 );

458  ( 
ZFaûuª
 );

460 
	}
}

472 
	$StubAPS_NŸifyAµ
–
uöt8
 
°©us
 )

474 
oßl_evít_hdr_t
 *
msgPå
;

477 
msgPå
 = (
oßl_evít_hdr_t
 *)
	`oßl_msg_Æloˇã
( (osal_event_hdr_t) );

478 i‡–
msgPå
 )

480 
msgPå
->
evít
 = 
SAPS_CHANNEL_CHANGE
;

481 
msgPå
->
°©us
 = status;

483 
	`oßl_msg_£nd
–
≠pTaskID
, (
uöt8
 *)
msgPå
 );

486 
	}
}

502 
ZSètus_t
 
	$StubAPS_SëI¡îP™Ch™√l
–
uöt8
 
ch™√l
 )

504 
uöt8
 
cuºCh™√l
;

505 
uöt8
 
rxOnIdÀ
;

507 i‡–
ch™√lCh™geInProgªss
 )

508  ( 
ZFaûuª
 );

510 
	`ZMacGëReq
–
ZMacCh™√l
, &
cuºCh™√l
 );

511 i‡–
cuºCh™√l
 =
ch™√l
 )

514  ( 
ZSuc˚ss
 );

518 
ch™√lCh™geInProgªss
 = 
TRUE
;

521 
	`nwk_£tSèãIdÀ
–
TRUE
 );

524 
rxOnIdÀ
 = 
Ál£
;

525 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

528 i‡–
	`StubAPS_SëNewCh™√l
–
ch™√l
 ) =
ZSuc˚ss
 )

529  ( 
ZSuc˚ss
 );

532 
√wCh™√l
 = 
ch™√l
;

535 
	`oßl_°¨t_timîEx
–
StubAPS_TaskID
, 
CHANNEL_CHANGE_EVT
, 
CHANNEL_CHANGE_RETRY_TIMEOUT
 );

537  ( 
ZApsNŸAŒowed
 );

539 
	}
}

550 
ZSètus_t
 
	$StubAPS_SëI¡øP™Ch™√l
( )

552 
uöt8
 
cuºCh™√l
;

553 
uöt8
 
rxOnIdÀ
;

555 i‡–
ch™√lCh™geInProgªss
 )

556  ( 
ZFaûuª
 );

558 
	`ZMacGëReq
–
ZMacCh™√l
, &
cuºCh™√l
 );

559 i‡–
cuºCh™√l
 =
_NIB
.
nwkLogiˇlCh™√l
 )

560  ( 
ZSuc˚ss
 );

562 
ch™√lCh™geInProgªss
 = 
TRUE
;

565 
rxOnIdÀ
 = 
Ál£
;

566 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

569 
	`ZMacSëReq
–
ZMacCh™√l
, &(
_NIB
.
nwkLogiˇlCh™√l
) );

572 
rxOnIdÀ
 = 
åue
;

573 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

576 
	`nwk_£tSèãIdÀ
–
FALSE
 );

578 
ch™√lCh™geInProgªss
 = 
FALSE
;

580  ( 
ZSuc˚ss
 );

582 
	}
}

594 
uöt8
 
	$StubAPS_I¡îP™
–
uöt16
 
∑nId
, 
uöt8
 
ídPoöt
 )

596 ()
∑nId
;

600 i‡–
ídPoöt
 =
STUBAPS_INTER_PAN_EP
 )

603  ( 
TRUE
 );

606  ( 
FALSE
 );

608 
	}
}

623 
	$StubAPS_Regi°îAµ
–
ídPoötDesc_t
 *
ïDesc
 )

625 
≠pTaskID
 = *
ïDesc
->
èsk_id
;

626 
≠pEndPoöt
 = 
ïDesc
->
ídPoöt
;

628 
	}
}

639 
uöt8
 
	$StubAPS_ZMacCÆlback
–
uöt8
 *
msgPå
 )

641 
uöt16
 
nwk_fc
;

642 
uöt8
 
≠s_fc
;

643 
uöt8
 
‰ameTy≥
;

644 
uöt8
 *
buf
 = 
NULL
;

645 
uöt8
 
evít
 = ((
oßl_evít_hdr_t
 *)
msgPå
)->event;

647 i‡–
evít
 =
MAC_MCPS_DATA_IND
 )

649 
buf
 = ((
macM˝sD©aInd_t
 *)
msgPå
)->
msdu
.
p
;

651 i‡–
evít
 =
MAC_MCPS_DATA_CNF
 )

653 
buf
 = ((
macM˝sD©aCnf_t
 *)
msgPå
)->
pD©aReq
->
msdu
.
p
;

656 i‡–
buf
 )

659 
nwk_fc
 = 
	`BUILD_UINT16
–
buf
[
NWK_HDR_FRAME_CTRL_LSB
], buf[
NWK_HDR_FRAME_CTRL_MSB
] );

662 
‰ameTy≥
 = (
uöt8
)((
nwk_fc
 >> 
NWK_FC_FRAME_TYPE
Ë& 
NWK_FC_FRAME_TYPE_MASK
);

665 i‡–
‰ameTy≥
 !
STUB_NWK_FRAME_TYPE
 )

668  ( 
FALSE
 );

672 
≠s_fc
 = 
buf
[
STUB_APS_HDR_FRAME_CTRL
];

675 
‰ameTy≥
 = 
≠s_fc
 & 
APS_FRAME_TYPE_MASK
;

678 i‡–
‰ameTy≥
 !
STUB_APS_FRAME
 )

681  ( 
FALSE
 );

685 
	`oßl_msg_£nd
–
StubAPS_TaskID
, (
uöt8
 *)
msgPå
 );

687  ( 
TRUE
 );

691  ( 
FALSE
 );

693 
	}
}

710 
ZSètus_t
 
	$INTERP_D©aReq
–
APSDE_D©aReq_t
 *
ªq
 )

712 
uöt8
 
≠sFrmCål
;

713 
uöt16
 
groupID
 = 0;

714 
uöt8
 *
buf
;

715 
uöt8
 
hdrLí
;

716 
ZMacD©aReq_t
 
d©aReq
;

717 
ZSètus_t
 
°©us
;

719 i‡–
ch™√lCh™geInProgªss
 || !
	`StubAPS_I¡îP™
–
ªq
->
d°P™Id
,Ñeq->
d°EP
 ) )

720  ( 
ZFaûuª
 );

722 
	`oßl_mem£t
–&
d©aReq
, 0, –
ZMacD©aReq_t
 ) );

725 
°©us
 = 
	`StubAPS_BuûdFømeC⁄åﬁ
–&
≠sFrmCål
, &(
d©aReq
.
D°Addr
), &
groupID
, 
ªq
 );

726 i‡–
°©us
 !
ZSuc˚ss
 )

727  ( 
°©us
 );

730 
hdrLí
 = 
APS_FRAME_CTRL_FIELD_LEN
;

733 i‡––
≠sFrmCål
 & 
APS_DELIVERYMODE_MASK
 ) =
APS_FC_DM_GROUP
 )

734 
hdrLí
 +
APS_GROUP_ID_FIELD_LEN
;

737 
hdrLí
 +
APS_CLUSTERID_FIELD_LEN
;

740 
hdrLí
 +
APS_PROFILEID_FIELD_LEN
;

743 
hdrLí
 +
STUB_NWK_HDR_LEN
;

746 
d©aReq
.
msduLígth
 = 
hdrLí
 + 
ªq
->
asduLí
;

749 
buf
 = 
	`oßl_mem_Æloc
–
d©aReq
.
msduLígth
 );

750 i‡–
buf
 !
NULL
 )

752 
d©aReq
.
msdu
 = 
buf
;

755 
	`StubAPS_BuûdMsg
–&
buf
[
STUB_APS_HDR_FRAME_CTRL
], 
≠sFrmCål
, 
groupID
, 
ªq
 );

758 
	`StubNWK_BuûdMsg
–
buf
 );

761 
d©aReq
.
D°PANId
 = 
ªq
->
d°P™Id
;

762 
d©aReq
.
SrcAddrMode
 = 
Addr64Bô
;

763 
d©aReq
.
H™dÀ
 = 
ªq
->
å™sID
;

765 i‡––
≠sFrmCål
 & 
APS_DELIVERYMODE_MASK
 ) =
APS_FC_DM_UNICAST
 )

766 
d©aReq
.
TxO±i⁄s
 = 
NWK_TXOPTIONS_ACK
;

768 
d©aReq
.
TxO±i⁄s
 = 0;

771 
°©us
 = 
	`ZMacD©aReq
–&
d©aReq
 );

774 
	`oßl_mem_‰ì
–
buf
 );

779 
°©us
 = 
ZMemEº‹
;

782  ( 
°©us
 );

784 
	}
}

796 
uöt8
 
	$INTERP_D©aReqMTU
( )

798 
uöt8
 
mtu
;

799 
uöt8
 
hdrLí
;

802 
hdrLí
 = 
APS_FRAME_CTRL_FIELD_LEN
 +

803 
APS_GROUP_ID_FIELD_LEN
 +

804 
APS_CLUSTERID_FIELD_LEN
 +

805 
APS_PROFILEID_FIELD_LEN
;

807 
mtu
 = 
MAC_A_MAX_FRAME_SIZE
 - 
STUB_NWK_HDR_LEN
 - 
hdrLí
;

809  ( 
mtu
 );

811 
	}
}

822 
	$INTERP_D©aC⁄fúm
–
ZMacD©aCnf_t
 *
d©aCnf
 )

824 
	`afD©aC⁄fúm
–
≠pEndPoöt
, 
d©aCnf
->
msduH™dÀ
, d©aCnf->
hdr
.
Sètus
 );

826 
	}
}

838 
	$INTERP_D©aIndiˇti⁄
–
macM˝sD©aInd_t
 *
d©aInd
 )

840 
NLDE_FømeF‹m©_t
 
¢ff
;

841 
≠s_FømeF‹m©_t
 
ßff
;

842 
zAddrTy≥_t
 
§cAddr
;

843 
NLDE_Sig«l_t
 
sig
;

846 
	`StubNWK_P¨£Msg
–
d©aInd
->
msdu
.
p
, d©aInd->msdu.
Àn
, &
¢ff
 );

849 
¢ff
.
macD°Addr
 = 
d©aInd
->
mac
.
d°Addr
.
addr
.
sh‹tAddr
;

852 
	`oßl_c›yAddªss
–&
§cAddr
, (
zAddrTy≥_t
 *)&(
d©aInd
->
mac
.srcAddr) );

855 i‡–
¢ff
.
‰ameTy≥
 !
STUB_NWK_FRAME_TYPE
 )

859 i‡–
¢ff
.
¥ŸocﬁVîsi⁄
 !
	`NLME_GëPrŸocﬁVîsi⁄
() )

863 i‡––
¢ff
.
discovîRouã
 !0 ) || ( snff.
mu…iˇ°
 != 0 ) ||

864 –
¢ff
.
£cuª
 !0 ) || ( snff.
§cRouãSë
 != 0 ) ||

865 –
¢ff
.
d°ExtAddrSë
 !0 ) || ( snff.
§cExtAddrSë
 != 0 ) )

871 
	`StubAPS_P¨£Msg
–&
¢ff
, &
ßff
 );

874 i‡––
ßff
.
FrmCål
 & 
APS_FRAME_TYPE_MASK
 ) !
STUB_APS_FRAME
 )

878 i‡––
ßff
.
FrmCål
 & 
APS_DELIVERYMODE_MASK
 ) =
APS_FC_DM_INDIRECT
 )

882 i‡–
ßff
.
FrmCål
 & 
APS_FC_SECURITY
 )

886 i‡–
ßff
.
FrmCål
 & 
APS_FC_EXTENDED
 )

890 
ßff
.
D°EndPoöt
 = 
≠pEndPoöt
;

891 
ßff
.
SrcEndPoöt
 = 
STUBAPS_INTER_PAN_EP
;

894 
sig
.
LökQuÆôy
 = 
d©aInd
->
mac
.
mpduLökQuÆôy
;

895 
sig
.
c‹ªœti⁄
 = 
d©aInd
->
mac
.correlation;

896 
sig
.
rssi
 = 
d©aInd
->
mac
.rssi;

898 
	`APSDE_D©aIndiˇti⁄
–&
ßff
, &
§cAddr
, 
d©aInd
->
mac
.
§cP™Id
,

899 &
sig
, 
¢ff
.
brﬂdˇ°Id
, 
FALSE
, 
d©aInd
->
mac
.
time°amp
 );

901 
	}
}

	@Components/stack/nwk/stub_aps.h

40 #i‚de‡
SAPS_H


41 
	#SAPS_H


	)

43 #ifde‡
__˝lu•lus


62 
	#STUBAPS_INTER_PAN_EP
 0xFE

	)

71 
uöt8
 
StubAPS_TaskID
;

80 
StubAPS_Inô
–
uöt8
 
èsk_id
 );

85 
UINT16
 
StubAPS_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 );

90 
ZSètus_t
 
StubAPS_SëI¡îP™Ch™√l
–
uöt8
 
ch™√l
 );

95 
ZSètus_t
 
StubAPS_SëI¡øP™Ch™√l
( );

100 
uöt8
 
StubAPS_I¡îP™
–
uöt16
 
∑nId
, uöt8 
ídPoöt
 );

105 
StubAPS_Regi°îAµ
–
ídPoötDesc_t
 *
ïDesc
 );

115 
ZSètus_t
 
INTERP_D©aReq
–
APSDE_D©aReq_t
 *
ªq
 );

121 
uöt8
 
INTERP_D©aReqMTU
( );

126 
INTERP_D©aC⁄fúm
–
ZMacD©aCnf_t
 *
d©aCnf
 );

132 
INTERP_D©aIndiˇti⁄
–
macM˝sD©aInd_t
 *
d©aInd
 );

137 #ifde‡
__˝lu•lus


	@Components/stack/sapi/sapi.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL.h
"

47 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

59 
	~"oßl_nv.h
"

60 
	~"NLMEDE.h
"

61 
	~"AF.h
"

62 
	~"OnBﬂrd.h
"

63 
	~"nwk_utû.h
"

64 
	~"ZDProfûe.h
"

65 
	~"ZDObje˘.h
"

66 
	~"hÆ_Àd.h
"

67 
	~"hÆ_key.h
"

68 
	~"ßpi.h
"

69 
	~"MT_SAPI.h
"

71 
uöt8
 
zgSèπDñay
;

72 
uöt8
 
zgS≠iEndpoöt
;

77 #i‡!
deföed
 
OSAL_SAPI


78 
	#OSAL_SAPI
 
TRUE


	)

81 #i‡!
deföed
 
SAPI_CB_FUNC


82 
	#SAPI_CB_FUNC
 
TRUE


	)

86 
	#ZB_USER_MSG
 0xE0

	)

87 
	#SAPICB_DATA_CNF
 0xE0

	)

88 
	#SAPICB_BIND_CNF
 0xE1

	)

89 
	#SAPICB_START_CNF
 0xE2

	)

99 #i‡
OSAL_SAPI


101 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

102 
macEvítLo›
,

103 
nwk_evít_lo›
,

104 
HÆ_Pro˚ssEvít
,

105 #i‡
deföed
–
MT_TASK
 )

106 
MT_Pro˚ssEvít
,

108 
APS_evít_lo›
,

109 
ZDAµ_evít_lo›
,

111 
SAPI_Pro˚ssEvít


114 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

115 
uöt16
 *
	gèsksEvíts
;

118 
ídPoötDesc_t
 
	gßpi_ïDesc
;

119 
uöt8
 
	gßpi_TaskID
;

120 
uöt16
 
	gßpi_bödInProgªss
;

126 
SAPI_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

127 
SAPI_SídCback
–
uöt8
 
evít
, uöt8 
°©us
, 
uöt16
 
d©a
 );

129 
SAPI_SèπC⁄fúm
–
uöt8
 
°©us
 );

130 
SAPI_SídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 );

131 
SAPI_BödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 );

132 
SAPI_FödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
,

133 
uöt8
 *
£¨chKey
, uöt8 *
ªsu…
 );

134 
SAPI_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
,

135 
uöt16
 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 );

136 
SAPI_AŒowBödC⁄fúm
–
uöt16
 
sour˚
 );

150 
	$zb_Sy°emRe£t
 ( )

152 
	`Sy°emRe£tSo·
();

153 
	}
}

168 
	$zb_SèπReque°
()

170 
uöt8
 
logiˇlTy≥
;

172 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
 );

175 i‡((
logiˇlTy≥
 > 
ZG_DEVICETYPE_ENDDEVICE
) ||

176 #i‡!
ZG_BUILD_ENDDEVICE_TYPE


177 (
logiˇlTy≥
 =
ZG_DEVICETYPE_ENDDEVICE
) ||

179 #i‡!
ZG_BUILD_RTR_TYPE


180 (
logiˇlTy≥
 =
ZG_DEVICETYPE_ROUTER
) ||

181 (
logiˇlTy≥
 =
ZG_DEVICETYPE_COORDINATOR
) ||

182 #ñi‡
ZG_BUILD_RTRONLY_TYPE


183 (
logiˇlTy≥
 =
ZG_DEVICETYPE_COORDINATOR
) ||

184 #ñi‡!
ZG_BUILD_JOINING_TYPE


185 (
logiˇlTy≥
 =
ZG_DEVICETYPE_ROUTER
) ||

189 
logiˇlTy≥
 = 
ZB_INVALID_PARAMETER
;

190 
	`SAPI_SídCback
(
SAPICB_START_CNF
, 
logiˇlTy≥
, 0);

194 
logiˇlTy≥
 = 
ZB_SUCCESS
;

195 
	`ZDOInôDevi˚
(
zgSèπDñay
);

200 
	}
}

217 
	$zb_BödDevi˚
 ( 
uöt8
 
¸óã
, 
uöt16
 
comm™dId
, uöt8 *
pDe°ö©i⁄
 )

219 
zAddrTy≥_t
 
de°ö©i⁄
;

220 
uöt8
 
ªt
 = 
ZB_ALREADY_IN_PROGRESS
;

222 i‡–
¸óã
 )

224 i‡(
ßpi_bödInProgªss
 == 0xffff)

226 i‡–
pDe°ö©i⁄
 )

228 
de°ö©i⁄
.
addrMode
 = 
Addr64Bô
;

229 
	`oßl_˝yExtAddr
–
de°ö©i⁄
.
addr
.
extAddr
, 
pDe°ö©i⁄
 );

231 
ªt
 = 
	`APSME_BödReque°
–
ßpi_ïDesc
.
ídPoöt
, 
comm™dId
,

232 &
de°ö©i⁄
, 
ßpi_ïDesc
.
ídPoöt
 );

234 i‡–
ªt
 =
ZSuc˚ss
 )

237 
	`ZDP_NwkAddrReq
(
pDe°ö©i⁄
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0 );

238 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_NWK_UPDATE_NV
, 250 );

243 
ªt
 = 
ZB_INVALID_PARAMETER
;

244 
de°ö©i⁄
.
addrMode
 = 
Addr16Bô
;

245 
de°ö©i⁄
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

246 i‡–
	`ZDO_AnyClu°îM©ches
–1, &
comm™dId
, 
ßpi_ïDesc
.
sim∂eDesc
->
AµNumOutClu°îs
,

247 
ßpi_ïDesc
.
sim∂eDesc
->
pAµOutClu°îLi°
 ) )

250 
ªt
 = 
	`ZDP_M©chDescReq
–&
de°ö©i⁄
, 
NWK_BROADCAST_SHORTADDR
,

251 
ßpi_ïDesc
.
sim∂eDesc
->
AµProfId
, 1, &
comm™dId
, 0, (
cId_t
 *)
NULL
, 0 );

253 i‡–
	`ZDO_AnyClu°îM©ches
–1, &
comm™dId
, 
ßpi_ïDesc
.
sim∂eDesc
->
AµNumInClu°îs
,

254 
ßpi_ïDesc
.
sim∂eDesc
->
pAµInClu°îLi°
 ) )

256 
ªt
 = 
	`ZDP_M©chDescReq
–&
de°ö©i⁄
, 
NWK_BROADCAST_SHORTADDR
,

257 
ßpi_ïDesc
.
sim∂eDesc
->
AµProfId
, 0, (
cId_t
 *)
NULL
, 1, &
comm™dId
, 0 );

260 i‡–
ªt
 =
ZB_SUCCESS
 )

263 #i‡–
ZG_BUILD_RTR_TYPE
 )

264 
	`oßl_°¨t_timîEx
(
ßpi_TaskID
, 
ZB_BIND_TIMER
, 
AIB_MaxBödögTime
);

267 
	`oßl_°¨t_timîEx
(
ßpi_TaskID
, 
ZB_BIND_TIMER
, 
zgApsDeÁu…MaxBödögTime
);

269 
ßpi_bödInProgªss
 = 
comm™dId
;

275 
	`SAPI_SídCback
–
SAPICB_BIND_CNF
, 
ªt
, 
comm™dId
 );

280 
BödögE¡ry_t
 *
pBöd
;

283  
pBöd
 = 
	`bödFöd
–
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
, 
comm™dId
, 0 ) )

285 
	`bödRemoveE¡ry
(
pBöd
);

287 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_NWK_UPDATE_NV
, 250 );

290 
	}
}

316 
uöt8
 
	$zb_PîmôJoöögReque°
 ( 
uöt16
 
de°ö©i⁄
, 
uöt8
 
timeout
 )

318 #i‡
	`deföed
–
ZDO_MGMT_PERMIT_JOIN_REQUEST
 )

319 
zAddrTy≥_t
 
d°Addr
;

321 
d°Addr
.
addrMode
 = 
Addr16Bô
;

322 
d°Addr
.
addr
.
sh‹tAddr
 = 
de°ö©i⁄
;

324 –(
uöt8
Ë
	`ZDP_MgmtPîmôJoöReq
–&
d°Addr
, 
timeout
, 0, 0 ) );

326 ()
de°ö©i⁄
;

327 ()
timeout
;

328  
ZUnsuµ‹ãdMode
;

330 
	}
}

347 
	$zb_AŒowBöd
 ( 
uöt8
 
timeout
 )

350 
	`oßl_°›_timîEx
(
ßpi_TaskID
, 
ZB_ALLOW_BIND_TIMER
);

352 i‡–
timeout
 == 0 )

354 
	`afSëM©ch
(
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
, 
FALSE
);

358 
	`afSëM©ch
(
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
, 
TRUE
);

359 i‡–
timeout
 != 0xFF )

361 i‡–
timeout
 > 64 )

363 
timeout
 = 64;

365 
	`oßl_°¨t_timîEx
(
ßpi_TaskID
, 
ZB_ALLOW_BIND_TIMER
, 
timeout
*1000);

369 
	}
}

396 
	$zb_SídD©aReque°
 ( 
uöt16
 
de°ö©i⁄
, uöt16 
comm™dId
, 
uöt8
 
Àn
,

397 
uöt8
 *
pD©a
, uöt8 
h™dÀ
, uöt8 
txO±i⁄s
, uöt8 
ødius
 )

399 
afSètus_t
 
°©us
;

400 
afAddrTy≥_t
 
d°Addr
;

402 
txO±i⁄s
 |
AF_DISCV_ROUTE
;

405 i‡(
de°ö©i⁄
 =
ZB_BINDING_ADDR
)

408 
d°Addr
.
addrMode
 = 
afAddrNŸPª£¡
;

413 
d°Addr
.
addr
.
sh‹tAddr
 = 
de°ö©i⁄
;

414 
d°Addr
.
addrMode
 = 
afAddr16Bô
;

416 i‡–
ADDR_NOT_BCAST
 !
	`NLME_IsAddªssBrﬂdˇ°
–
de°ö©i⁄
 ) )

418 
txO±i⁄s
 &~
AF_ACK_REQUEST
;

422 
d°Addr
.
∑nId
 = 0;

423 
d°Addr
.
ídPoöt
 = 
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
;

426 
°©us
 = 
	`AF_D©aReque°
(&
d°Addr
, &
ßpi_ïDesc
, 
comm™dId
, 
Àn
,

427 
pD©a
, &
h™dÀ
, 
txO±i⁄s
, 
ødius
);

429 i‡(
°©us
 !
afSètus_SUCCESS
)

431 
	`SAPI_SídCback
–
SAPICB_DATA_CNF
, 
°©us
, 
h™dÀ
 );

433 
	}
}

447 
uöt8
 
	$zb_RódC⁄figuøti⁄
–
uöt8
 
c⁄figId
, uöt8 
Àn
, *
pVÆue
 )

449 
uöt8
 
size
;

451 
size
 = (
uöt8
)
	`oßl_nv_ôem_Àn
–
c⁄figId
 );

452 i‡–
size
 > 
Àn
 )

454  
ZFaûuª
;

458 –
	`oßl_nv_ªad
(
c⁄figId
, 0, 
size
, 
pVÆue
) );

460 
	}
}

474 
uöt8
 
	$zb_WrôeC⁄figuøti⁄
–
uöt8
 
c⁄figId
, uöt8 
Àn
, *
pVÆue
 )

476 –
	`oßl_nv_wrôe
(
c⁄figId
, 0, 
Àn
, 
pVÆue
) );

477 
	}
}

489 
	$zb_GëDevi˚Info
 ( 
uöt8
 
∑øm
, *
pVÆue
 )

491 
∑øm
)

493 
ZB_INFO_DEV_STATE
:

494 
	`oßl_mem˝y
(
pVÆue
, &
devSèã
, (
uöt8
));

496 
ZB_INFO_IEEE_ADDR
:

497 
	`oßl_mem˝y
(
pVÆue
, &
aExãndedAddªss
, 
Z_EXTADDR_LEN
);

499 
ZB_INFO_SHORT_ADDR
:

500 
	`oßl_mem˝y
(
pVÆue
, &
_NIB
.
nwkDevAddªss
, (
uöt16
));

502 
ZB_INFO_PARENT_SHORT_ADDR
:

503 
	`oßl_mem˝y
(
pVÆue
, &
_NIB
.
nwkCo‹dAddªss
, (
uöt16
));

505 
ZB_INFO_PARENT_IEEE_ADDR
:

506 
	`oßl_mem˝y
(
pVÆue
, &
_NIB
.
nwkCo‹dExtAddªss
, 
Z_EXTADDR_LEN
);

508 
ZB_INFO_CHANNEL
:

509 
	`oßl_mem˝y
(
pVÆue
, &
_NIB
.
nwkLogiˇlCh™√l
, (
uöt8
));

511 
ZB_INFO_PAN_ID
:

512 
	`oßl_mem˝y
(
pVÆue
, &
_NIB
.
nwkP™Id
, (
uöt16
));

514 
ZB_INFO_EXT_PAN_ID
:

515 
	`oßl_mem˝y
(
pVÆue
, &
_NIB
.
exãndedPANID
, 
Z_EXTADDR_LEN
);

518 
	}
}

535 
	$zb_FödDevi˚Reque°
–
uöt8
 
£¨chTy≥
, *
£¨chKey
 )

537 i‡(
£¨chTy≥
 =
ZB_IEEE_SEARCH
)

539 
	`ZDP_NwkAddrReq
((
uöt8
*Ë
£¨chKey
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0 );

541 
	}
}

554 
	$SAPI_SèπC⁄fúm
–
uöt8
 
°©us
 )

556 #i‡
	`deföed
 ( 
MT_SAPI_CB_FUNC
 )

559 i‡–
	`SAPICB_CHECK
–
SPI_CB_SAPI_START_CNF
 ) )

561 
	`zb_MTCÆlbackSèπC⁄fúm
–
°©us
 );

566 #i‡–
SAPI_CB_FUNC
 )

567 
	`zb_SèπC⁄fúm
–
°©us
 );

570 
	}
}

583 
	$SAPI_SídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 )

585 #i‡
	`deföed
 ( 
MT_SAPI_CB_FUNC
 )

588 i‡–
	`SAPICB_CHECK
–
SPI_CB_SAPI_SEND_DATA_CNF
 ) )

590 
	`zb_MTCÆlbackSídD©aC⁄fúm
–
h™dÀ
, 
°©us
 );

595 #i‡–
SAPI_CB_FUNC
 )

596 
	`zb_SídD©aC⁄fúm
–
h™dÀ
, 
°©us
 );

599 
	}
}

615 
	$SAPI_BödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 )

617 #i‡
	`deföed
 ( 
MT_SAPI_CB_FUNC
 )

620 i‡–
	`SAPICB_CHECK
–
SPI_CB_SAPI_BIND_CNF
 ) )

622 
	`zb_MTCÆlbackBödC⁄fúm
–
comm™dId
, 
°©us
 );

627 #i‡–
SAPI_CB_FUNC
 )

628 
	`zb_BödC⁄fúm
–
comm™dId
, 
°©us
 );

631 
	}
}

641 
	$SAPI_AŒowBödC⁄fúm
–
uöt16
 
sour˚
 )

643 #i‡
	`deföed
 ( 
MT_SAPI_CB_FUNC
 )

646 i‡–
	`SAPICB_CHECK
–
SPI_CB_SAPI_ALLOW_BIND_CNF
 ) )

648 
	`zb_MTCÆlbackAŒowBödC⁄fúm
–
sour˚
 );

653 #i‡–
SAPI_CB_FUNC
 )

654 
	`zb_AŒowBödC⁄fúm
–
sour˚
 );

657 
	}
}

670 
	$SAPI_FödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
, uöt8 *
£¨chKey
, uöt8 *
ªsu…
 )

672 #i‡
	`deföed
 ( 
MT_SAPI_CB_FUNC
 )

675 i‡–
	`SAPICB_CHECK
–
SPI_CB_SAPI_FIND_DEV_CNF
 ) )

677 
	`zb_MTCÆlbackFödDevi˚C⁄fúm
–
£¨chTy≥
, 
£¨chKey
, 
ªsu…
 );

682 #i‡–
SAPI_CB_FUNC
 )

683 
	`zb_FödDevi˚C⁄fúm
–
£¨chTy≥
, 
£¨chKey
, 
ªsu…
 );

686 
	}
}

701 
	$SAPI_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 )

703 #i‡
	`deföed
 ( 
MT_SAPI_CB_FUNC
 )

706 i‡–
	`SAPICB_CHECK
–
SPI_CB_SAPI_RCV_DATA_IND
 ) )

708 
	`zb_MTCÆlbackRe˚iveD©aIndiˇti⁄
–
sour˚
, 
comm™d
, 
Àn
, 
pD©a
 );

713 #i‡–
SAPI_CB_FUNC
 )

714 
	`zb_Re˚iveD©aIndiˇti⁄
–
sour˚
, 
comm™d
, 
Àn
, 
pD©a
 );

717 
	}
}

731 
UINT16
 
	$SAPI_Pro˚ssEvít
–
byã
 
èsk_id
, 
UINT16
 
evíts
 )

733 
oßl_evít_hdr_t
 *
pMsg
;

734 
afIncomögMSGPackë_t
 *
pMSGpkt
;

735 
afD©aC⁄fúm_t
 *
pD©aC⁄fúm
;

737 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

739 
pMsg
 = (
oßl_evít_hdr_t
 *Ë
	`oßl_msg_ª˚ive
–
èsk_id
 );

740  
pMsg
 )

742  
pMsg
->
evít
 )

744 
ZDO_CB_MSG
:

745 
	`SAPI_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
pMsg
 );

748 
AF_DATA_CONFIRM_CMD
:

752 
pD©aC⁄fúm
 = (
afD©aC⁄fúm_t
 *Ë
pMsg
;

753 
	`SAPI_SídD©aC⁄fúm
–
pD©aC⁄fúm
->
å™sID
,ÖD©aC⁄fúm->
hdr
.
°©us
 );

756 
AF_INCOMING_MSG_CMD
:

757 
pMSGpkt
 = (
afIncomögMSGPackë_t
 *Ë
pMsg
;

758 
	`SAPI_Re˚iveD©aIndiˇti⁄
–
pMSGpkt
->
§cAddr
.
addr
.
sh‹tAddr
,ÖMSGpkt->
˛u°îId
,

759 
pMSGpkt
->
cmd
.
D©aLígth
,ÖMSGpkt->cmd.
D©a
);

762 
ZDO_STATE_CHANGE
:

764 i‡(
pMsg
->
°©us
 =
DEV_END_DEVICE
 ||

765 
pMsg
->
°©us
 =
DEV_ROUTER
 ||

766 
pMsg
->
°©us
 =
DEV_ZB_COORD
 )

768 
	`SAPI_SèπC⁄fúm
–
ZB_SUCCESS
 );

770 i‡(
pMsg
->
°©us
 =
DEV_HOLD
 ||

771 
pMsg
->
°©us
 =
DEV_INIT
)

773 
	`SAPI_SèπC⁄fúm
–
ZB_INIT
 );

777 
ZDO_MATCH_DESC_RSP_SENT
:

778 
	`SAPI_AŒowBödC⁄fúm
–((
ZDO_M©chDescR•Sít_t
 *)
pMsg
)->
nwkAddr
 );

781 
KEY_CHANGE
:

782 #i‡–
SAPI_CB_FUNC
 )

783 
	`zb_H™dÀKeys
–((
keyCh™ge_t
 *)
pMsg
)->
°©e
, ((keyCh™ge_à*ÌMsg)->
keys
 );

787 
SAPICB_DATA_CNF
:

788 
	`SAPI_SídD©aC⁄fúm
–(
uöt8
)((
ßpi_CbackEvít_t
 *)
pMsg
)->
d©a
,

789 ((
ßpi_CbackEvít_t
 *)
pMsg
)->
hdr
.
°©us
 );

792 
SAPICB_BIND_CNF
:

793 
	`SAPI_BödC⁄fúm
–((
ßpi_CbackEvít_t
 *)
pMsg
)->
d©a
,

794 ((
ßpi_CbackEvít_t
 *)
pMsg
)->
hdr
.
°©us
 );

797 
SAPICB_START_CNF
:

798 
	`SAPI_SèπC⁄fúm
–((
ßpi_CbackEvít_t
 *)
pMsg
)->
hdr
.
°©us
 );

803 i‡–
pMsg
->
evít
 >
ZB_USER_MSG
 )

811 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *Ë
pMsg
 );

814 
pMsg
 = (
oßl_evít_hdr_t
 *Ë
	`oßl_msg_ª˚ive
–
èsk_id
 );

818  (
evíts
 ^ 
SYS_EVENT_MSG
);

821 i‡–
evíts
 & 
ZB_ALLOW_BIND_TIMER
 )

823 
	`afSëM©ch
(
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
, 
FALSE
);

824  (
evíts
 ^ 
ZB_ALLOW_BIND_TIMER
);

827 i‡–
evíts
 & 
ZB_BIND_TIMER
 )

830 
	`SAPI_BödC⁄fúm
–
ßpi_bödInProgªss
, 
ZB_TIMEOUT
 );

831 
ßpi_bödInProgªss
 = 0xffff;

833  (
evíts
 ^ 
ZB_BIND_TIMER
);

836 i‡–
evíts
 & 
ZB_ENTRY_EVENT
 )

838 
uöt8
 
°¨tO±i⁄s
;

841 #i‡–
SAPI_CB_FUNC
 )

842 
	`zb_H™dÀOßlEvít
–
ZB_ENTRY_EVENT
 );

846 
	`HÆLedSë
 (
HAL_LED_4
, 
HAL_LED_MODE_OFF
);

848 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

849 i‡–
°¨tO±i⁄s
 & 
ZCD_STARTOPT_AUTO_START
 )

851 
	`zb_SèπReque°
();

856 
	`HÆLedBlök
(
HAL_LED_2
, 0, 50, 500);

859  (
evíts
 ^ 
ZB_ENTRY_EVENT
 );

863 i‡–
evíts
 & ( 
ZB_USER_EVENTS
 ) )

866 #i‡–
SAPI_CB_FUNC
 )

867 
	`zb_H™dÀOßlEvít
–
evíts
 );

875 
	}
}

886 
	$SAPI_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

888  
öMsg
->
˛u°îID
 )

890 
NWK_addr_r•
:

893 
ZDO_NwkIEEEAddrRe•_t
 *
pNwkAddrR•
 = 
	`ZDO_P¨£AddrR•
–
öMsg
 );

894 
	`SAPI_FödDevi˚C⁄fúm
–
ZB_IEEE_SEARCH
, (
uöt8
*)&
pNwkAddrR•
->
nwkAddr
,ÖNwkAddrR•->
extAddr
 );

898 
M©ch_Desc_r•
:

900 
zAddrTy≥_t
 
d°Addr
;

901 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

903 i‡–
ßpi_bödInProgªss
 != 0xffff )

906 
d°Addr
.
addrMode
 = 
Addr16Bô
;

907 
d°Addr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

909 i‡–
	`APSME_BödReque°
–
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
,

910 
ßpi_bödInProgªss
, &
d°Addr
, 
pR•
->
ïLi°
[0] ) =
ZSuc˚ss
 )

912 
	`oßl_°›_timîEx
(
ßpi_TaskID
, 
ZB_BIND_TIMER
);

913 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_NWK_UPDATE_NV
, 250 );

916 
	`ZDP_IEEEAddrReq
–
pR•
->
nwkAddr
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0 );

917 #i‡
	`deföed
 ( 
MT_SAPI_CB_FUNC
 )

918 
	`zb_MTCÆlbackBödC⁄fúm
–
ßpi_bödInProgªss
, 
ZB_SUCCESS
 );

921 #i‡–
SAPI_CB_FUNC
 )

922 
	`zb_BödC⁄fúm
–
ßpi_bödInProgªss
, 
ZB_SUCCESS
 );

924 
ßpi_bödInProgªss
 = 0xffff;

930 
	}
}

946 
	$SAPI_Inô
–
byã
 
èsk_id
 )

948 
ßpi_TaskID
 = 
èsk_id
;

949 
ßpi_bödInProgªss
 = 0xffff;

951 
ßpi_ïDesc
.
èsk_id
 = &
ßpi_TaskID
;

952 
ßpi_ïDesc
.
ídPoöt
 = 0;

954 #i‡–
SAPI_CB_FUNC
 )

955 
ßpi_ïDesc
.
ídPoöt
 = 
zb_Sim∂eDesc
.
EndPoöt
;

956 
ßpi_ïDesc
.
èsk_id
 = &
ßpi_TaskID
;

957 
ßpi_ïDesc
.
sim∂eDesc
 = (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
zb_Sim∂eDesc
;

958 
ßpi_ïDesc
.
œãncyReq
 = 
noL©ícyReqs
;

961 
	`afRegi°î
–&
ßpi_ïDesc
 );

965 
	`afSëM©ch
(
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
, 
FALSE
);

968 
	`ZDO_Regi°îF‹ZDOMsg
–
ßpi_TaskID
, 
NWK_addr_r•
 );

969 
	`ZDO_Regi°îF‹ZDOMsg
–
ßpi_TaskID
, 
M©ch_Desc_r•
 );

971 #i‡–
SAPI_CB_FUNC
 )

972 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

974 
	`Regi°îF‹Keys
–
ßpi_TaskID
 );

976 i‡–
	`HÆKeyRód
 (Ë=
HAL_KEY_SW_5
)

979 
uöt8
 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_CLEAR_STATE
 | 
ZCD_STARTOPT_CLEAR_CONFIG
;

980 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

981 
	`zb_Sy°emRe£t
();

986 
	`oßl_£t_evít
(
èsk_id
, 
ZB_ENTRY_EVENT
);

988 
	}
}

997 
	$SAPI_SídCback
–
uöt8
 
evít
, uöt8 
°©us
, 
uöt16
 
d©a
 )

999 
ßpi_CbackEvít_t
 *
pMsg
;

1001 
pMsg
 = (
ßpi_CbackEvít_t
 *)
	`oßl_msg_Æloˇã
( (sapi_CbackEvent_t) );

1002 if–
pMsg
 )

1004 
pMsg
->
hdr
.
evít
 =Évent;

1005 
pMsg
->
hdr
.
°©us
 = status;

1006 
pMsg
->
d©a
 = data;

1008 
	`oßl_msg_£nd
–
ßpi_TaskID
, (
uöt8
 *)
pMsg
 );

1011 
	}
}

1013 #i‡
OSAL_SAPI


1023 
	$oßlInôTasks
( )

1025 
uöt8
 
èskID
 = 0;

1027 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

1028 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

1030 
	`macTaskInô
–
èskID
++ );

1031 
	`nwk_öô
–
èskID
++ );

1032 
	`HÆ_Inô
–
èskID
++ );

1033 #i‡
	`deföed
–
MT_TASK
 )

1034 
	`MT_TaskInô
–
èskID
++ );

1036 
	`APS_Inô
–
èskID
++ );

1037 
	`ZDAµ_Inô
–
èskID
++ );

1038 
	`SAPI_Inô
–
èskID
 );

1039 
	}
}

	@Components/stack/sapi/sapi.h

40 #i‚de‡
SAPI_H


41 
	#SAPI_H


	)

46 
	~"ZComDef.h
"

47 
	~"af.h
"

54 
	#ZB_ALLOW_BIND_TIMER
 0x4000

55 
	#ZB_BIND_TIMER
 0x2000

56 
	#ZB_ENTRY_EVENT
 0x1000

57 
	#ZB_USER_EVENTS
 0x00FF

	)

60 
	#ZB_IEEE_SEARCH
 1

	)

63 
	#ZB_INFO_DEV_STATE
 0

	)

64 
	#ZB_INFO_IEEE_ADDR
 1

	)

65 
	#ZB_INFO_SHORT_ADDR
 2

	)

66 
	#ZB_INFO_PARENT_SHORT_ADDR
 3

	)

67 
	#ZB_INFO_PARENT_IEEE_ADDR
 4

	)

68 
	#ZB_INFO_CHANNEL
 5

	)

69 
	#ZB_INFO_PAN_ID
 6

	)

70 
	#ZB_INFO_EXT_PAN_ID
 7

	)

73 
	#ZB_BINDING_ADDR
 
INVALID_NODE_ADDR


	)

74 
	#ZB_BROADCAST_ADDR
 0xffff

	)

77 
	#ZB_SUCCESS
 
ZSuc˚ss


	)

78 
	#ZB_FAILURE
 
ZFaûuª


	)

79 
	#ZB_INVALID_PARAMETER
 
ZInvÆidP¨amëî


	)

80 
	#ZB_ALREADY_IN_PROGRESS
 
ZS≠iInProgªss


	)

81 
	#ZB_TIMEOUT
 
ZS≠iTimeout


	)

82 
	#ZB_INIT
 
ZS≠iInô


	)

83 
	#ZB_AF_FAILURE
 
afSètus_FAILED


	)

84 
	#ZB_AF_MEM_FAIL
 
afSètus_MEM_FAIL


	)

85 
	#ZB_AF_INVALID_PARAMETER
 
afSètus_INVALID_PARAMETER


	)

88 
	#ZB_SCAN_DURATION_0
 0

89 
	#ZB_SCAN_DURATION_1
 1

90 
	#ZB_SCAN_DURATION_2
 2

91 
	#ZB_SCAN_DURATION_3
 3

92 
	#ZB_SCAN_DURATION_4
 4

93 
	#ZB_SCAN_DURATION_5
 5

94 
	#ZB_SCAN_DURATION_6
 6

95 
	#ZB_SCAN_DURATION_7
 7

96 
	#ZB_SCAN_DURATION_8
 8

97 
	#ZB_SCAN_DURATION_9
 9

98 
	#ZB_SCAN_DURATION_10
 10

99 
	#ZB_SCAN_DURATION_11
 11

100 
	#ZB_SCAN_DURATION_12
 12

101 
	#ZB_SCAN_DURATION_13
 13

102 
	#ZB_SCAN_DURATION_14
 14

103 

	)

105 
	#ZG_DEVICETYPE_COORDINATOR
 0x00

	)

106 
	#ZG_DEVICETYPE_ROUTER
 0x01

	)

107 
	#ZG_DEVICETYPE_ENDDEVICE
 0x02

	)

113 
uöt16
 
	m∑nID
;

114 
uöt8
 
	mch™√l
;

115 } 
	tzb_Nëw‹kLi°_t
;

119 
oßl_evít_hdr_t
 
	mhdr
;

120 
uöt16
 
	md©a
;

121 } 
	tßpi_CbackEvít_t
;

127 
uöt8
 
ßpi_TaskID
;

128 
ídPoötDesc_t
 
ßpi_ïDesc
;

134 #ifde‡
__˝lu•lus


139 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
zb_Sim∂eDesc
;

153 
zb_Sy°emRe£t
 ( );

168 
zb_SèπReque°
 ( );

194 
uöt8
 
zb_PîmôJoöögReque°
 ( 
uöt16
 
de°ö©i⁄
, uöt8 
timeout
 );

213 
zb_BödDevi˚
 ( 
uöt8
 
¸óã
, 
uöt16
 
comm™dId
, uöt8 *
pDe°ö©i⁄
 );

229 
zb_AŒowBöd
 ( 
uöt8
 
timeout
 );

257 
zb_SídD©aReque°
 ( 
uöt16
 
de°ö©i⁄
, uöt16 
comm™dId
, 
uöt8
 
Àn
,

258 
uöt8
 *
pD©a
, uöt8 
h™dÀ
, uöt8 
ack
, uöt8 
ødius
 );

273 
uöt8
 
zb_RódC⁄figuøti⁄
–uöt8 
c⁄figId
, uöt8 
Àn
, *
pVÆue
 );

288 
uöt8
 
zb_WrôeC⁄figuøti⁄
–uöt8 
c⁄figId
, uöt8 
Àn
, *
pVÆue
 );

301 
zb_GëDevi˚Info
 ( 
uöt8
 
∑øm
, *
pVÆue
 );

318 
zb_FödDevi˚Reque°
–
uöt8
 
£¨chTy≥
, *
£¨chKey
 );

330 
zb_H™dÀOßlEvít
–
uöt16
 
evít
 );

344 
zb_SèπC⁄fúm
–
uöt8
 
°©us
 );

357 
zb_SídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 );

373 
zb_BödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 );

387 
zb_FödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
, uöt8 *
£¨chKey
, uöt8 *
ªsu…
 );

403 
zb_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 );

405 
zb_AŒowBödC⁄fúm
–
uöt16
 
sour˚
 );

407 
zb_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

411 
UINT16
 
SAPI_Pro˚ssEvít
–
byã
 
èsk_id
, UINT16 
evíts
 );

412 
SAPI_Inô
–
byã
 
èsk_id
 );

413 
oßlAddTasks
( );

415 #ifde‡
__˝lu•lus


	@Components/stack/sec/eccapi.h

52 #i‚de‡
ECCAPI_H


53 
	#ECCAPI_H


	)

55 #ifde‡
__˝lu•lus


59 
	#ZSE_MAJOR
 1

	)

60 
	#ZSE_MINOR
 0

	)

61 
	#ZSE_PATCH
 1

	)

62 
	#ZSE_BUILD
 6

	)

63 
	#ZSE_VERSION
 (()(
ZSE_MAJOR
 & 0x0F)<< 28 | ()(
ZSE_MINOR
 & 0x0FË<< 24 | ()(
ZSE_PATCH
 & 0x0FFFË<< 12 | ()(
ZSE_BUILD
 & 0x0FFF))

	)

66 
	#SECT163K1_COMPRESSED_PUBLIC_KEY_SIZE
 (22)

	)

67 
	#SECT163K1_UNCOMPRESSED_PUBLIC_KEY_SIZE
 (43)

	)

68 
	#SECT163K1_PRIVATE_KEY_SIZE
 (21)

	)

69 
	#SECT163K1_CERTIFICATE_SIZE
 (48)

	)

70 
	#SECT163K1_SHARED_SECRET_SIZE
 (21)

	)

71 
	#SECT163K1_POINT_ORDER_SIZE
 (21)

	)

72 
	#AES_MMO_HASH_SIZE
 (16)

	)

78 
	#MCE_SUCCESS
 0x00

	)

79 
	#MCE_ERR_FAIL_VERIFY
 0x01

	)

80 
	#MCE_ERR_NULL_PRIVATE_KEY
 0x02

	)

81 
	#MCE_ERR_NULL_PUBLIC_KEY
 0x03

	)

82 
	#MCE_ERR_NULL_INPUT_BUF
 0x04

	)

83 
	#MCE_ERR_NULL_OUTPUT_BUF
 0x05

	)

84 
	#MCE_ERR_NULL_FUNC_PTR
 0x06

	)

85 
	#MCE_ERR_NULL_EPHEM_PRI_KEY
 0x07

	)

86 
	#MCE_ERR_NULL_EPHEM_PUB_KEY
 0x08

	)

87 
	#MCE_ERR_BAD_INPUT
 0x09

	)

102 
	tGëR™domD©aFunc
(*
	tbuf„r
, 
	tsz
);

117 
	tHashFunc
(*
	tdige°
, 
	tsz
, *
	td©a
);

128 
	tYõldFunc
();

150 
´sMmoHash
(*
dige°
, 
sz
, *
d©a
);

184 
ZSE_ECDSASign
(*
¥iv©eKey
,

185 *
msgDige°
,

186 
GëR™domD©aFunc
 *
GëR™domD©a
,

187 *
r
,

188 *
s
,

189 
YõldFunc
 *
yõld
,

190 
yõldLevñ
 );

225 
ZSE_ECDSAVîify
(*
publicKey
,

226 *
msgDige°
,

227 *
r
,

228 *
s
,

229 
YõldFunc
 *
yõld
,

230 
yõldLevñ
);

263 
ZSE_ECCGíî©eKey
(*
¥iv©eKey
,

264 *
publicKey
,

265 
GëR™domD©aFunc
 *
GëR™domD©a
,

266 
YõldFunc
 *
yõld
,

267 
yõldLevñ
);

330 
ZSE_ECCKeyBôGíî©e
(*
¥iv©eKey
,

331 *
ïhemîÆPriv©eKey
,

332 *
ïhemîÆPublicKey
,

333 *
ªmŸeCîtifiˇã
,

334 *
ªmŸeEphemîÆPublicKey
,

335 *
ˇPublicKey
,

336 *
keyBôs
,

337 
HashFunc
 *
Hash
,

338 
YõldFunc
 *
yõld
,

339 
yõldLevñ
);

380 
ZSE_ECQVRec⁄°ru˘PublicKey
(* 
˚πifiˇã
,

381 * 
ˇPublicKey
,

382 * 
publicKey
,

383 
HashFunc
 *
Hash
,

384 
YõldFunc
 *
yõld
,

385 
yõldLevñ
);

396 
ZSE_GëVîsi⁄
();

399 #ifde‡
__˝lu•lus


	@Components/stack/sec/ssp.h

40 #i‚de‡
SSP_H


41 
	#SSP_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

60 
	#SSP_APPLY
 0

	)

61 
	#SSP_REMOVE
 1

	)

64 
	#FRAME_COUNTER_LEN
 4

	)

66 
	#SEC_KEY_LEN
 16

67 

	)

69 
	#SEC_KEYID_LINK
 0x00

	)

70 
	#SEC_KEYID_NWK
 0x01

	)

71 
	#SEC_KEYID_TRANSPORT
 0x02

	)

72 
	#SEC_KEYID_LOAD
 0x03

	)

75 
	#SEC_MASK
 0x07

	)

76 
	#SEC_NONE
 0x00

	)

77 
	#SEC_MIC_32
 0x01

	)

78 
	#SEC_MIC_64
 0x02

	)

80 
	#SEC_MIC_128
 0x03

	)

81 
	#SEC_ENC
 0x04

	)

82 
	#SEC_ENC_MIC_32
 0x05

	)

83 
	#SEC_ENC_MIC_64
 0x06

	)

84 
	#SEC_ENC_MIC_128
 0x07

	)

87 
	#KEY_TYPE_TC_MASTER
 0

88 
	#KEY_TYPE_NWK
 1

89 
	#KEY_TYPE_APP_MASTER
 2

90 
	#KEY_TYPE_APP_LINK
 3

91 
	#KEY_TYPE_TC_LINK
 4

92 
	#KEY_TYPE_NWK_HIGH
 5

93 

	)

94 
	#SSP_AUXHDR_CTRL
 0

	)

95 
	#SSP_AUXHDR_FRAMECNTR
 1

	)

97 
	#SSP_AUXHDR_KEYID_MASK
 0x03

	)

98 
	#SSP_AUXHDR_KEYID_SHIFT
 3

	)

99 
	#SSP_AUXHDR_EXTNONCE_SHIFT
 5

	)

100 
	#SSP_AUXHDR_EXTNONCE_BIT
 0x01

	)

101 
	#SSP_AUXHDR_LEVEL_MASK
 0x07

	)

103 
	#SSP_AUXHDR_MIN_LEN
 5

	)

104 
	#SSP_AUXHDR_SEQNUM_LEN
 1

	)

105 
	#SSP_AUXHDR_EXT_LEN
 ( 
SSP_AUXHDR_MIN_LEN
 + 
Z_EXTADDR_LEN
 )

	)

106 
	#SSP_AUXHDR_NWK_LEN
 ( 
SSP_AUXHDR_EXT_LEN
 + 
SSP_AUXHDR_SEQNUM_LEN
 )

	)

108 
	#SSP_MIC_LEN_MAX
 16

	)

110 
	#SSP_NONCE_LEN
 13

	)

112 
	#SSP_TEXT_LEN
 4

	)

115 
	#SSP_MAC_TAGS_SKKE
 0

	)

116 
	#SSP_MAC_TAGS_EA
 1

	)

119 
	#SEC_NO_KEY_NV_ID
 0

	)

127 
uöt8
 
keySeqNum
;

128 
uöt8
 
key
[
SEC_KEY_LEN
];

129 } 
	tnwkKeyDesc
;

133 
nwkKeyDesc
 
a˘ive
;

134 
uöt32
 
‰ameCou¡î
;

135 } 
	tnwkA˘iveKeyIãms
;

139 
uöt32
 
öFrmC¡r
;

140 
uöt32
 
outFrmC¡r
;

141 
uöt8
 
ma°îKey
[
SEC_KEY_LEN
];

142 
uöt8
 
lökKey
[
SEC_KEY_LEN
];

143 
uöt8
 
∑π√rDevi˚
[
Z_EXTADDR_LEN
];

144 } 
	tlökKeyDesc
;

148 
uöt8
 
hdrLí
;

149 
uöt8
 
auxLí
;

150 
uöt8
 
msgLí
;

151 
uöt8
 
£cLevñ
;

152 
uöt8
 
keyId
;

153 
uöt32
 
‰ameCå
;

154 
uöt8
 *
key
;

155 } 
	ts•_˘x
;

159 
uöt8
* 
öôExtAddr
;

160 
uöt8
* 
r•ExtAddr
;

161 
uöt8
* 
key
;

162 
uöt8
* 
qeu
;

163 
uöt8
* 
qev
;

164 
uöt8
* 
ãxt1
;

165 
uöt8
* 
ãxt2
;

166 
uöt8
* 
èg1
;

167 
uöt8
* 
èg2
;

168 
uöt8
* 
lökKey
;

169 
uöt8
 
ty≥
;

170 } 
	tSSP_MacTagD©a_t
;

174 
uöt8
 
dú
;

175 
uöt8
 
£cLevñ
;

176 
uöt8
 
hdrLí
;

177 
uöt8
 
sduLí
;

178 
uöt8
* 
pdu
;

179 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

180 
uöt8
 
keyID
;

181 
uöt16
 
keyNvId
;

182 
uöt8
 
keySeqNum
;

183 
uöt32
 
‰mC¡r
;

184 
uöt8
 
auxLí
;

185 
uöt8
 
micLí
;

186 } 
	tSSP_Info_t
;

191 
uöt32
 
nwkFømeCou¡î
;

200 
SSP_Inô
( );

205 
SSP_P¨£AuxHdr
–
SSP_Info_t
* 
si
 );

210 
ZSètus_t
 
SSP_Pro˚ss
–
SSP_Info_t
* 
si
 );

215 
ZSètus_t
 
SSP_GëMacTags
–
SSP_MacTagD©a_t
* 
d©a
 );

220 
SSP_GëTrueR™d
–
uöt8
 
Àn
, uöt8 *
ønd
 );

226 
ZSètus_t
 
SSP_GëTrueR™dAES
–
uöt8
 
Àn
, uöt8 *
ønd
 );

231 
SSP_St‹eR™domSìdNV
–
uöt8
 *
pSìd
 );

236 
SSP_RódNwkA˘iveKey
–
nwkA˘iveKeyIãms
 *
ôems
 );

241 
uöt16
 
SSP_GëNwkKey
–
uöt8
 
£qNum
 );

246 
ZSètus_t
 
SSP_NwkSecurôy
(
uöt8
 
ed_Êag
, uöt8 *
msg
, uöt8 
hdrLí
, uöt8 
nsduLí
);

251 
SSP_Upd©eNwkKey
–
uöt8
 *
key
, uöt8 
keySeqNum
 );

256 
SSP_SwôchNwkKey
–
uöt8
 
£qNum
 );

258 
SSP_BuûdN⁄˚
–
uöt8
 *
addr
, 
uöt32
 
‰ameC¡r
, uöt8 
£cCål
, uöt8 *
n⁄˚
 );

260 
uöt8
 
SSP_GëMicLí
–uöt8 
£curôyLevñ
 );

264 #ifde‡
__˝lu•lus


	@Components/stack/sec/ssp_hash.h

40 #i‚de‡
SSP_HASH_H


41 
	#SSP_HASH_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"s•.h
"

75 
s•MMOHash
 (
uöt8
 *, uöt8, uöt8 *, 
uöt16
, uint8 *);

76 
SSP_KeyedHash
 (
uöt8
 *
M
, 
uöt16
 
bôÀn
, uöt8 *
AesKey
, uöt8 *
C°©e
);

80 #ifde‡
__˝lu•lus


	@Components/stack/sys/ZGlobals.c

44 
	~"ZComDef.h
"

45 
	~"OSAL_Nv.h
"

46 
	~"ZDObje˘.h
"

47 
	~"ZGlobÆs.h
"

48 
	~"ZDNwkMgr.h
"

49 
	~"OnBﬂrd.h
"

50 
	~"ZDSecMgr.h
"

64 
	szgIãm


66 
uöt16
 
	mid
;

67 
uöt16
 
	mÀn
;

68 *
	mbuf
;

69 } 
	tzgIãm_t
;

76 
uöt16
 
	gzgPﬁlR©e
 = 
POLL_RATE
;

77 
uöt16
 
	gzgQueuedPﬁlR©e
 = 
QUEUED_POLL_RATE
;

78 
uöt16
 
	gzgRe•⁄£PﬁlR©e
 = 
RESPONSE_POLL_RATE
;

79 
uöt16
 
	gzgRejoöPﬁlR©e
 = 
REJOIN_POLL_RATE
;

82 
uöt8
 
	gzgMaxD©aRërõs
 = 
NWK_MAX_DATA_RETRIES
;

83 
uöt8
 
	gzgMaxPﬁlFaûuªRërõs
 = 
MAX_POLL_FAILURE_RETRIES
;

86 
uöt32
 
	gzgDeÁu…Ch™√lLi°
 = 
DEFAULT_CHANLIST
;

89 
uöt8
 
	gzgDeÁu…SèπögSˇnDuøti⁄
 = 
STARTING_SCAN_DURATION
;

92 
uöt8
 
	gzgSèckProfûe
 = 
STACK_PROFILE_ID
;

95 
uöt8
 
	gzgIndúe˘MsgTimeout
 = 
NWK_INDIRECT_MSG_TIMEOUT
;

98 
uöt8
 
	gzgSecurôyMode
 = 
ZG_SECURITY_MODE
;

101 
uöt8
 
	gzgSecuªPîmôJoö
 = 
åue
;

104 
uöt16
 
	gzgTru°CíãrAddr
 = 
ZG_TRUSTCENTER_ADDR
;

107 
uöt8
 
	gzgRouãDiscovîyTime
 = 
ROUTE_DISCOVERY_TIME
;

110 
uöt8
 
	gzgRouãExpúyTime
 = 
ROUTE_EXPIRY_TIME
;

113 
uöt8
 
	gzgExãndedPANID
[
Z_EXTADDR_LEN
];

116 
uöt8
 
	gzgMaxBˇ°Rëúes
 = 
MAX_BCAST_RETRIES
;

117 
uöt8
 
	gzgPassiveAckTimeout
 = 
PASSIVE_ACK_TIMEOUT
;

118 
uöt8
 
	gzgBˇ°DñivîyTime
 = 
BCAST_DELIVERY_TIME
;

121 
uöt8
 
	gzgNwkMode
 = 
NWK_MODE
;

124 
uöt8
 
	gzgC⁄˚¡øt‹E«bÀ
 = 
CONCENTRATOR_ENABLE
;

125 
uöt8
 
	gzgC⁄˚¡øt‹DiscovîyTime
 = 
CONCENTRATOR_DISCOVERY_TIME
;

126 
uöt8
 
	gzgC⁄˚¡øt‹Radius
 = 
CONCENTRATOR_RADIUS
;

127 
uöt8
 
	gzgC⁄˚¡øt‹RC
 = 
CONCENTRATOR_ROUTE_CACHE
;

128 
uöt8
 
	gzgNwkSrcRtgExpúyTime
 = 
SRC_RTG_EXPIRY_TIME
;

131 
uöt8
 
	gzgRouãrOffAssocCÀ™up
 = 
FALSE
;

138 
uöt8
 
	gzgApscMaxFømeRërõs
 = 
APSC_MAX_FRAME_RETRIES
;

144 
uöt16
 
	gzgApscAckWaôDuøti⁄PﬁÀd
 = 
APSC_ACK_WAIT_DURATION_POLLED
;

148 
uöt8
 
	gzgApsAckWaôMu…ùlõr
 = 2;

151 
uöt16
 
	gzgApsDeÁu…MaxBödögTime
 = 
APS_DEFAULT_MAXBINDING_TIME
;

155 
uöt8
 
	gzgApsU£ExãndedPANID
[
Z_EXTADDR_LEN
] = {00,00,00,00,00,00,00,00};

159 
uöt8
 
	gzgApsU£In£cuªJoö
 = 
TRUE
;

162 
uöt8
 
	gzgApsN⁄MembîRadius
 = 
APS_DEFAULT_NONMEMBER_RADIUS
;

171 
uöt8
 
	gzgPªC⁄figKeys
 = 
FALSE
;

176 
uöt8
 
	gzgU£DeÁu…TCLK
 = 
TRUE
;

183 
uöt16
 
	gzgC⁄figPANID
 = 
ZDAPP_CONFIG_PAN_ID
;

186 
uöt8
 
	gzgDevi˚LogiˇlTy≥
 = 
DEVICE_LOGICAL_TYPE
;

189 
uöt8
 
	gzgSèπDñay
 = 
START_DELAY
;

191 #i‡!
deföed
 
MT_TASK


193 
uöt8
 
	gzgZdoDúe˘CB
 = 
FALSE
;

197 
uöt8
 
	gzgNwkMgrMöTønsmissi⁄s
 = 
ZDNWKMGR_MIN_TRANSMISSIONS
;

204 
uöt8
 
	gzgNwkMgrMode
 = 
ZDNWKMGR_ENABLE
;

211 
uöt8
 
	gzgS≠iEndpoöt
 = 
SAPI_ENDPOINT
;

220 
CONST
 
zgIãm_t
 
	gzgIãmTabÀ
[] =

222 #i‡
deföed
 ( 
NV_INIT
 )

223 #i‡!
deföed
 
MT_TASK


225 
ZCD_NV_ZDO_DIRECT_CB
, (
zgZdoDúe˘CB
), &zgZdoDirectCB

229 
ZCD_NV_LOGICAL_TYPE
, (
zgDevi˚LogiˇlTy≥
), &zgDeviceLogicalType

232 
ZCD_NV_POLL_RATE
, (
zgPﬁlR©e
), &zgPollRate

235 
ZCD_NV_QUEUED_POLL_RATE
, (
zgQueuedPﬁlR©e
), &zgQueuedPollRate

238 
ZCD_NV_RESPONSE_POLL_RATE
, (
zgRe•⁄£PﬁlR©e
), &zgResponsePollRate

241 
ZCD_NV_REJOIN_POLL_RATE
, (
zgRejoöPﬁlR©e
), &zgRejoinPollRate

244 
ZCD_NV_DATA_RETRIES
, (
zgMaxD©aRërõs
), &zgMaxDataRetries

247 
ZCD_NV_POLL_FAILURE_RETRIES
, (
zgMaxPﬁlFaûuªRërõs
), &zgMaxPollFailureRetries

250 
ZCD_NV_CHANLIST
, (
zgDeÁu…Ch™√lLi°
), &zgDefaultChannelList

253 
ZCD_NV_SCAN_DURATION
, (
zgDeÁu…SèπögSˇnDuøti⁄
), &zgDefaultStartingScanDuration

256 
ZCD_NV_STACK_PROFILE
, (
zgSèckProfûe
), &zgStackProfile

259 
ZCD_NV_INDIRECT_MSG_TIMEOUT
, (
zgIndúe˘MsgTimeout
), &zgIndirectMsgTimeout

262 
ZCD_NV_ROUTE_EXPIRY_TIME
, (
zgRouãExpúyTime
), &zgRouteExpiryTime

265 
ZCD_NV_EXTENDED_PAN_ID
, 
Z_EXTADDR_LEN
, 
zgExãndedPANID


268 
ZCD_NV_BCAST_RETRIES
, (
zgMaxBˇ°Rëúes
), &zgMaxBcastRetires

271 
ZCD_NV_PASSIVE_ACK_TIMEOUT
, (
zgPassiveAckTimeout
), &zgPassiveAckTimeout

274 
ZCD_NV_BCAST_DELIVERY_TIME
, (
zgBˇ°DñivîyTime
), &zgBcastDeliveryTime

277 
ZCD_NV_NWK_MODE
, (
zgNwkMode
), &zgNwkMode

280 
ZCD_NV_CONCENTRATOR_ENABLE
, (
zgC⁄˚¡øt‹E«bÀ
), &zgConcentratorEnable

283 
ZCD_NV_CONCENTRATOR_DISCOVERY
, (
zgC⁄˚¡øt‹DiscovîyTime
), &zgConcentratorDiscoveryTime

286 
ZCD_NV_CONCENTRATOR_RADIUS
, (
zgC⁄˚¡øt‹Radius
), &zgConcentratorRadius

289 
ZCD_NV_CONCENTRATOR_RC
, (
zgC⁄˚¡øt‹RC
), &zgConcentratorRC

292 
ZCD_NV_SRC_RTG_EXPIRY_TIME
, (
zgNwkSrcRtgExpúyTime
), &zgNwkSrcRtgExpiryTime

295 
ZCD_NV_ROUTE_DISCOVERY_TIME
, (
zgRouãDiscovîyTime
), &zgRouteDiscoveryTime

297 #i‚de‡
NONWK


299 
ZCD_NV_PANID
, (
zgC⁄figPANID
), &zgConfigPANID

302 
ZCD_NV_PRECFGKEYS_ENABLE
, (
zgPªC⁄figKeys
), &zgPreConfigKeys

305 
ZCD_NV_SECURITY_MODE
, (
zgSecurôyMode
), &zgSecurityMode

308 
ZCD_NV_SECURE_PERMIT_JOIN
, (
zgSecuªPîmôJoö
), &zgSecurePermitJoin

311 
ZCD_NV_USE_DEFAULT_TCLK
, (
zgU£DeÁu…TCLK
), &zgUseDefaultTCLK

314 
ZCD_NV_TRUSTCENTER_ADDR
, (
zgTru°CíãrAddr
), &zgTrustCenterAddr

318 
ZCD_NV_APS_FRAME_RETRIES
, (
zgApscMaxFømeRërõs
), &zgApscMaxFrameRetries

321 
ZCD_NV_APS_ACK_WAIT_DURATION
, (
zgApscAckWaôDuøti⁄PﬁÀd
), &zgApscAckWaitDurationPolled

324 
ZCD_NV_APS_ACK_WAIT_MULTIPLIER
, (
zgApsAckWaôMu…ùlõr
), &zgApsAckWaitMultiplier

327 
ZCD_NV_BINDING_TIME
, (
zgApsDeÁu…MaxBödögTime
), &zgApsDefaultMaxBindingTime

330 
ZCD_NV_APS_USE_EXT_PANID
, 
Z_EXTADDR_LEN
, 
zgApsU£ExãndedPANID


333 
ZCD_NV_APS_USE_INSECURE_JOIN
, (
zgApsU£In£cuªJoö
), &zgApsUseInsecureJoin

336 
ZCD_NV_APS_NONMEMBER_RADIUS
, (
zgApsN⁄MembîRadius
), &zgApsNonMemberRadius

339 
ZCD_NV_START_DELAY
, (
zgSèπDñay
), &zgStartDelay

342 
ZCD_NV_SAPI_ENDPOINT
, (
zgS≠iEndpoöt
), &zgSapiEndpoint

345 
ZCD_NV_NWK_MGR_MODE
, (
zgNwkMgrMode
), &zgNwkMgrMode

348 
ZCD_NV_NWKMGR_MIN_TX
, (
zgNwkMgrMöTønsmissi⁄s
), &zgNwkMgrMinTransmissions

351 
ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP
, (
zgRouãrOffAssocCÀ™up
), &zgRouterOffAssocCleanup

356 0x00, 0, 
NULL


364 
uöt8
 
zgIãmInô
–
uöt16
 
id
, uöt16 
Àn
, *
buf
, uöt8 
£tDeÁu…
 );

366 #i‚de‡
NONWK


367 
uöt8
 
zgPªc⁄figKeyInô
–uöt8 
£tDeÁu…
 );

390 
uöt8
 
	$zgIãmInô
–
uöt16
 
id
, uöt16 
Àn
, *
buf
, 
uöt8
 
£tDeÁu…
 )

392 
uöt8
 
°©us
;

396 
°©us
 = 
	`oßl_nv_ôem_öô
–
id
, 
Àn
, 
buf
 );

397 i‡–
°©us
 =
ZSUCCESS
 )

399 i‡–
£tDeÁu…
 )

402 
°©us
 = 
	`oßl_nv_wrôe
–
id
, 0, 
Àn
, 
buf
 );

407 
°©us
 = 
	`oßl_nv_ªad
–
id
, 0, 
Àn
, 
buf
 );

411  (
°©us
);

412 
	}
}

436 
uöt8
 
	$zgInô
( )

438 
uöt8
 
£tDeÁu…
 = 
FALSE
;

441 i‡–
	`zgRódSèπupO±i⁄s
(Ë& 
ZCD_STARTOPT_DEFAULT_CONFIG_STATE
 )

443 
£tDeÁu…
 = 
TRUE
;

449 
uöt16
 
boŸC¡
 = 0;

452 i‡–
	`oßl_nv_ôem_öô
–
ZCD_NV_BOOTCOUNTER
, (
boŸC¡
), &boŸC¡ ) =
ZSUCCESS
 )

455 
	`oßl_nv_ªad
–
ZCD_NV_BOOTCOUNTER
, 0, (
boŸC¡
), &bootCnt );

459 i‡–
£tDeÁu…
 )

460 
boŸC¡
 = 0;

462 
boŸC¡
++;

463 
	`oßl_nv_wrôe
–
ZCD_NV_BOOTCOUNTER
, 0, (
boŸC¡
), &bootCnt );

467 
	`ZMacGëReq
–
ZMacExtAddr
, 
zgExãndedPANID
 );

470 
	`zgInôIãms
–
£tDeÁu…
 );

472 #i‚de‡
NONWK


473 i‡–
ZG_SECURE_ENABLED
 )

476 
	`zgPªc⁄figKeyInô
–
£tDeÁu…
 );

479 
	`ZDSecMgrInôNVKeyTabÀs
–
£tDeÁu…
 );

484 i‡–
£tDeÁu…
 )

486 
	`zgWrôeSèπupO±i⁄s
–
ZG_STARTUP_CLEAR
, 
ZCD_STARTOPT_DEFAULT_CONFIG_STATE
 );

489  ( 
ZSUCCESS
 );

490 
	}
}

503 
	$zgInôIãms
–
uöt8
 
£tDeÁu…
 )

505 
uöt8
 
i
 = 0;

507  
zgIãmTabÀ
[
i
].
id
 != 0x00 )

510 
	`zgIãmInô
–
zgIãmTabÀ
[
i
].
id
, zgIãmTabÀ[i].
Àn
, zgIãmTabÀ[i].
buf
, 
£tDeÁu…
 );

513 
i
++;

515 
	}
}

526 
uöt8
 
	$zgRódSèπupO±i⁄s
( )

529 
uöt8
 
°¨tupO±i⁄
 = 0;

532 i‡–
	`oßl_nv_ôem_öô
–
ZCD_NV_STARTUP_OPTION
,

533 (
°¨tupO±i⁄
),

534 &
°¨tupO±i⁄
 ) =
ZSUCCESS
 )

537 
	`oßl_nv_ªad
–
ZCD_NV_STARTUP_OPTION
,

539 –
°¨tupO±i⁄
 ),

540 &
°¨tupO±i⁄
);

542  ( 
°¨tupO±i⁄
 );

543 
	}
}

560 
uöt8
 
	$zgWrôeSèπupO±i⁄s
–
uöt8
 
a˘i⁄
, uöt8 
bôO±i⁄s
 )

562 
uöt8
 
°©us
;

563 
uöt8
 
°¨tupO±i⁄s
 = 0;

565 
°©us
 = 
	`oßl_nv_ªad
–
ZCD_NV_STARTUP_OPTION
,

567 –
°¨tupO±i⁄s
 ),

568 &
°¨tupO±i⁄s
 );

570 i‡–
°©us
 =
ZSUCCESS
 )

572 i‡–
a˘i⁄
 =
ZG_STARTUP_SET
 )

575 
°¨tupO±i⁄s
 |
bôO±i⁄s
;

580 
°¨tupO±i⁄s
 &(
bôO±i⁄s
 ^ 0xFF);

584 
°©us
 = 
	`oßl_nv_wrôe
–
ZCD_NV_STARTUP_OPTION
,

586 –
°¨tupO±i⁄s
 ),

587 &
°¨tupO±i⁄s
 );

590  ( 
°©us
 );

591 
	}
}

604 
	$zgSëIãm
–
uöt16
 
id
, uöt16 
Àn
, *
buf
 )

607 
uöt8
 
i
 = 0;

610  
zgIãmTabÀ
[
i
].
id
 != 0x00 )

612 if–
zgIãmTabÀ
[
i
].
id
 == id )

614 i‡–
zgIãmTabÀ
[
i
].
Àn
 ==Üen )

616 
	`oßl_mem˝y
–
zgIãmTabÀ
[
i
].
buf
, buf, 
Àn
 );

621 
i
++;

623 
	}
}

625 #i‚de‡
NONWK


643 
uöt8
 
	$zgPªc⁄figKeyInô
–
uöt8
 
£tDeÁu…
 )

645 
uöt8
 
zgPªC⁄figKey
[
SEC_KEY_LEN
];

646 
uöt8
 
°©us
;

649 
	`oßl_mem˝y
–
zgPªC⁄figKey
, 
deÁu…Key
, 
SEC_KEY_LEN
 );

652 
°©us
 = 
	`oßl_nv_ôem_öô
–
ZCD_NV_PRECFGKEY
, 
SEC_KEY_LEN
, 
zgPªC⁄figKey
 );

653 i‡–
°©us
 =
ZSUCCESS
 )

655 i‡–
£tDeÁu…
 )

658 
°©us
 = 
	`oßl_nv_wrôe
–
ZCD_NV_PRECFGKEY
, 0, 
SEC_KEY_LEN
, 
zgPªC⁄figKey
 );

663 
	`oßl_mem£t
(
zgPªC⁄figKey
, 0x00, 
SEC_KEY_LEN
);

665  (
°©us
);

666 
	}
}

	@Components/stack/sys/ZGlobals.h

40 #i‚de‡
ZGLOBALS_H


41 
	#ZGLOBALS_H


	)

43 #ifde‡
__˝lu•lus


50 
	~"ZComDef.h
"

55 #i‡
deföed
–
BUILD_ALL_DEVICES
 ) && !deföed–
ZSTACK_DEVICE_BUILD
 )

56 
	#ZSTACK_DEVICE_BUILD
 (
DEVICE_BUILD_COORDINATOR
 | 
DEVICE_BUILD_ROUTER
 | 
DEVICE_BUILD_ENDDEVICE
)

	)

60 #i‡!
deföed
 ( 
ZSTACK_DEVICE_BUILD
 )

61 #i‡
deföed
 ( 
ZDO_COORDINATOR
 )

62 
	#ZSTACK_DEVICE_BUILD
 (
DEVICE_BUILD_COORDINATOR
)

	)

63 #ñi‡
deföed
 ( 
RTR_NWK
 )

64 
	#ZSTACK_DEVICE_BUILD
 (
DEVICE_BUILD_ROUTER
)

	)

66 
	#ZSTACK_DEVICE_BUILD
 (
DEVICE_BUILD_ENDDEVICE
)

	)

71 
	#ZG_BUILD_COORDINATOR_TYPE
 (
ZSTACK_DEVICE_BUILD
 & 
DEVICE_BUILD_COORDINATOR
)

	)

72 
	#ZG_BUILD_RTR_TYPE
 (
ZSTACK_DEVICE_BUILD
 & (
DEVICE_BUILD_COORDINATOR
 | 
DEVICE_BUILD_ROUTER
))

	)

73 
	#ZG_BUILD_ENDDEVICE_TYPE
 (
ZSTACK_DEVICE_BUILD
 & 
DEVICE_BUILD_ENDDEVICE
)

	)

74 
	#ZG_BUILD_RTRONLY_TYPE
 (
ZSTACK_DEVICE_BUILD
 =
DEVICE_BUILD_ROUTER
)

	)

75 
	#ZG_BUILD_JOINING_TYPE
 (
ZSTACK_DEVICE_BUILD
 & (
DEVICE_BUILD_ROUTER
 | 
DEVICE_BUILD_ENDDEVICE
))

	)

77 #i‡–
ZSTACK_DEVICE_BUILD
 =
DEVICE_BUILD_COORDINATOR
 )

78 
	#ZG_DEVICE_COORDINATOR_TYPE
 1

	)

80 
	#ZG_DEVICE_COORDINATOR_TYPE
 (
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_COORDINATOR
)

	)

83 #i‡–
ZSTACK_DEVICE_BUILD
 =(
DEVICE_BUILD_ROUTER
 | 
DEVICE_BUILD_COORDINATOR
) )

84 
	#ZG_DEVICE_RTR_TYPE
 1

	)

86 
	#ZG_DEVICE_RTR_TYPE
 ((
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_COORDINATOR
Ë|| (zgDevi˚LogiˇlTy≥ =
ZG_DEVICETYPE_ROUTER
))

	)

89 #i‡–
ZSTACK_DEVICE_BUILD
 =
DEVICE_BUILD_ENDDEVICE
 )

90 
	#ZG_DEVICE_ENDDEVICE_TYPE
 1

	)

92 
	#ZG_DEVICE_ENDDEVICE_TYPE
 (
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_ENDDEVICE
)

	)

95 
	#ZG_DEVICE_JOINING_TYPE
 ((
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_ROUTER
Ë|| (zgDevi˚LogiˇlTy≥ =
ZG_DEVICETYPE_ENDDEVICE
))

	)

97 #i‡–
ZG_BUILD_RTR_TYPE
 )

98 #i‡–
ZG_BUILD_ENDDEVICE_TYPE
 )

99 
	#ZSTACK_ROUTER_BUILD
 (
ZG_BUILD_RTR_TYPE
 && 
ZG_DEVICE_RTR_TYPE
)

	)

101 
	#ZSTACK_ROUTER_BUILD
 1

	)

104 
	#ZSTACK_ROUTER_BUILD
 0

	)

107 #i‡–
ZG_BUILD_ENDDEVICE_TYPE
 )

108 #i‡–
ZG_BUILD_RTR_TYPE
 )

109 
	#ZSTACK_END_DEVICE_BUILD
 (
ZG_BUILD_ENDDEVICE_TYPE
 && 
ZG_DEVICE_ENDDEVICE_TYPE
)

	)

111 
	#ZSTACK_END_DEVICE_BUILD
 1

	)

114 
	#ZSTACK_END_DEVICE_BUILD
 0

	)

123 
	#ZG_DEVICETYPE_COORDINATOR
 0x00

	)

124 
	#ZG_DEVICETYPE_ROUTER
 0x01

	)

125 
	#ZG_DEVICETYPE_ENDDEVICE
 0x02

	)

130 #i‡!
deföed
 ( 
DEVICE_LOGICAL_TYPE
 )

131 #i‡–
ZG_BUILD_COORDINATOR_TYPE
 )

133 
	#DEVICE_LOGICAL_TYPE
 
ZG_DEVICETYPE_COORDINATOR


	)

134 #ñi‡–
ZG_BUILD_RTR_TYPE
 )

135 
	#DEVICE_LOGICAL_TYPE
 
ZG_DEVICETYPE_ROUTER


	)

136 #ñi‡–
ZG_BUILD_ENDDEVICE_TYPE
 )

138 
	#DEVICE_LOGICAL_TYPE
 
ZG_DEVICETYPE_ENDDEVICE


	)

140 #îr‹ 
ZSTACK_DEVICE_BUILD
 
mu°
 
be
 
deföed
 
as
 
somëhög
!

145 #i‡!
deföed
 ( 
MAX_POLL_FAILURE_RETRIES
 )

146 
	#MAX_POLL_FAILURE_RETRIES
 1

	)

148 #i‡!
deföed
 ( 
MAX_DATA_RETRIES
 )

149 
	#MAX_DATA_RETRIES
 2

	)

153 #i‡!
deföed
 ( 
MAX_BCAST_RETRIES
 )

154 
	#MAX_BCAST_RETRIES
 2

	)

156 #i‡!
deföed
 ( 
PASSIVE_ACK_TIMEOUT
 )

157 
	#PASSIVE_ACK_TIMEOUT
 5

	)

159 #i‡!
deföed
 ( 
BCAST_DELIVERY_TIME
 )

160 
	#BCAST_DELIVERY_TIME
 30

	)

163 #i‡!
deföed
 ( 
ROUTE_DISCOVERY_TIME
 )

164 
	#ROUTE_DISCOVERY_TIME
 5

	)

167 #i‡!
deföed
 ( 
APS_DEFAULT_MAXBINDING_TIME
 )

168 
	#APS_DEFAULT_MAXBINDING_TIME
 16000

	)

171 #i‡!
deföed
 ( 
APS_DEFAULT_NONMEMBER_RADIUS
 )

172 
	#APS_DEFAULT_NONMEMBER_RADIUS
 2

	)

175 #i‡!
deföed
 ( 
APSF_DEFAULT_WINDOW_SIZE
 )

176 
	#APSF_DEFAULT_WINDOW_SIZE
 1

	)

179 #i‡!
deföed
 ( 
APSF_DEFAULT_INTERFRAME_DELAY
 )

180 
	#APSF_DEFAULT_INTERFRAME_DELAY
 50

	)

184 #i‡!
deföed
 ( 
CONCENTRATOR_ENABLE
 )

185 
	#CONCENTRATOR_ENABLE
 
Ál£


187 

	)

188 #i‡!
deföed
 ( 
CONCENTRATOR_DISCOVERY_TIME
 )

189 
	#CONCENTRATOR_DISCOVERY_TIME
 0

	)

192 #i‡!
deföed
 ( 
CONCENTRATOR_RADIUS
 )

193 
	#CONCENTRATOR_RADIUS
 0x0a

	)

196 #i‡!
deföed
 ( 
CONCENTRATOR_ROUTE_CACHE
 )

197 
	#CONCENTRATOR_ROUTE_CACHE
 
Ál£


199 

	)

201 #i‡!
deföed
 ( 
CONCENTRATOR_RADIUS
 )

202 
	#CONCENTRATOR_RADIUS
 0x0a

	)

205 #i‡!
deföed
 ( 
START_DELAY
 )

206 
	#START_DELAY
 0x0a

	)

209 #i‡!
deföed
 ( 
SAPI_ENDPOINT
 )

210 
	#SAPI_ENDPOINT
 0xe0

	)

213 
	#ZG_STARTUP_CLEAR
 0x00

	)

214 
	#ZG_STARTUP_SET
 0xFF

	)

216 #i‡!
deföed
 ( 
ZG_TRUSTCENTER_ADDR
 )

217 
	#ZG_TRUSTCENTER_ADDR
 
NWK_PAN_COORD_ADDR


	)

221 #i‡
deföed
 ( 
AMI_PROFILE
 ) || deföed ( 
SE_PROFILE
 )

222 
	#TC_LINKKEY_JOIN


	)

228 
	#ZG_SECURITY_NONE
 0

	)

229 
	#ZG_SECURITY_RESIDENTIAL
 1

	)

230 
	#ZG_SECURITY_PRO_STANDARD
 1

231 
	#ZG_SECURITY_PRO_HIGH
 3

	)

232 
	#ZG_SECURITY_SE_STANDARD
 4

	)

234 #i‡–
SECURE
 == 0 )

235 #unde‡
ZG_SECURITY_MODE


236 
	#ZG_SECURITY_MODE
 
ZG_SECURITY_NONE


	)

238 #i‡!
deföed
 ( 
ZG_SECURITY_MODE
 )

239 #i‡
deföed
 ( 
TC_LINKKEY_JOIN
 )

240 
	#ZG_SECURITY_MODE
 
ZG_SECURITY_SE_STANDARD


	)

242 #i‡!
deföed
 ( 
ZIGBEEPRO
 )

243 
	#ZG_SECURITY_MODE
 
ZG_SECURITY_RESIDENTIAL


	)

246 
	#ZG_SECURITY_MODE
 
ZG_SECURITY_PRO_STANDARD


251 

	)

255 #i‡!
deföed
 ( 
ZG_SECURE_DYNAMIC
 )

256 
	#ZG_SECURE_DYNAMIC
 1

	)

259 #i‡–
ZG_SECURE_DYNAMIC
 == 1 )

260 
	#ZG_SECURE_ENABLED
 ( 
SECURE
 && ( 
zgSecurôyMode
 !
ZG_SECURITY_NONE
 ) )

	)

261 
	#ZG_CHECK_SECURITY_MODE
 ( 
zgSecurôyMode
 )

	)

263 
	#ZG_SECURE_ENABLED
 ( 
SECURE
 )

	)

264 
	#ZG_CHECK_SECURITY_MODE
 ( 
ZG_SECURITY_MODE
 )

	)

275 
uöt16
 
zgPﬁlR©e
;

276 
uöt16
 
zgQueuedPﬁlR©e
;

277 
uöt16
 
zgRe•⁄£PﬁlR©e
;

278 
uöt16
 
zgRejoöPﬁlR©e
;

281 
uöt8
 
zgMaxD©aRërõs
;

282 
uöt8
 
zgMaxPﬁlFaûuªRërõs
;

284 
uöt32
 
zgDeÁu…Ch™√lLi°
;

285 
uöt8
 
zgDeÁu…SèπögSˇnDuøti⁄
;

287 
uöt8
 
zgSèckProfûe
;

289 
uöt8
 
zgIndúe˘MsgTimeout
;

290 
uöt8
 
zgSecurôyMode
;

291 
uöt8
 
zgSecuªPîmôJoö
;

292 
uöt16
 
zgTru°CíãrAddr
;

293 
uöt8
 
zgRouãDiscovîyTime
;

294 
uöt8
 
zgRouãExpúyTime
;

296 
uöt8
 
zgExãndedPANID
[];

298 
uöt8
 
zgMaxBˇ°Rëúes
;

299 
uöt8
 
zgPassiveAckTimeout
;

300 
uöt8
 
zgBˇ°DñivîyTime
;

302 
uöt8
 
zgNwkMode
;

304 
uöt8
 
zgC⁄˚¡øt‹E«bÀ
;

305 
uöt8
 
zgC⁄˚¡øt‹DiscovîyTime
;

306 
uöt8
 
zgC⁄˚¡øt‹Radius
;

307 
uöt8
 
zgC⁄˚¡øt‹RC
;

308 
uöt8
 
zgNwkSrcRtgExpúyTime
;

310 
uöt8
 
zgRouãrOffAssocCÀ™up
;

316 
uöt8
 
zgApscMaxFømeRërõs
;

317 
uöt16
 
zgApscAckWaôDuøti⁄PﬁÀd
;

318 
uöt8
 
zgApsAckWaôMu…ùlõr
;

319 
uöt16
 
zgApsDeÁu…MaxBödögTime
;

320 
uöt8
 
zgApsU£ExãndedPANID
[
Z_EXTADDR_LEN
];

321 
uöt8
 
zgApsU£In£cuªJoö
;

322 
uöt8
 
zgApsN⁄MembîRadius
;

328 
uöt8
 
zgPªC⁄figKeys
;

329 
uöt8
 
zgU£DeÁu…TCLK
;

335 
uöt16
 
zgC⁄figPANID
;

336 
uöt8
 
zgDevi˚LogiˇlTy≥
;

337 
uöt8
 
zgNwkMgrMöTønsmissi⁄s
;

338 #i‡!
deföed
 
MT_TASK


339 
uöt8
 
zgZdoDúe˘CB
;

346 
uöt8
 
zgNwkMgrMode
;

355 
uöt8
 
zgInô
( );

361 
zgInôIãms
–
uöt8
 
£tDeÁu…
 );

366 
uöt8
 
zgRódSèπupO±i⁄s
( );

380 
uöt8
 
zgWrôeSèπupO±i⁄s
–uöt8 
a˘i⁄
, uöt8 
bôO±i⁄s
 );

385 
zgSëIãm
–
uöt16
 
id
, uöt16 
Àn
, *
buf
 );

389 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

45 
	~"OSAL_Tasks.h
"

46 
	~"AF.h
"

47 
	~"ZDC⁄fig.h
"

49 
	~"z˛.h
"

50 
	~"z˛_gíîÆ.h
"

52 #i‡
deföed
 ( 
INTER_PAN
 )

53 
	~"°ub_≠s.h
"

60 
	#z˛_FCTy≥
–
a
 ) ( (aË& 
ZCL_FRAME_CONTROL_TYPE
 )

	)

61 
	#z˛_FCM™uS≥cific
–
a
 ) ( (aË& 
ZCL_FRAME_CONTROL_MANU_SPECIFIC
 )

	)

62 
	#z˛_FCDúe˘i⁄
–
a
 ) ( (aË& 
ZCL_FRAME_CONTROL_DIRECTION
 )

	)

63 
	#z˛_FCDißbÀDeÁu…R•
–
a
 ) ( (aË& 
ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP
 )

	)

66 
	#z˛_Ac˚ssCålRód
–
a
 ) ( (aË& 
ACCESS_CONTROL_READ
 )

	)

67 
	#z˛_Ac˚ssCålWrôe
–
a
 ) ( (aË& 
ACCESS_CONTROL_WRITE
 )

	)

68 
	#z˛_Ac˚ssCålCmd
–
a
 ) ( (aË& 
ACCESS_CONTROL_CMD
 )

	)

69 
	#z˛_Ac˚ssCålAuthRód
–
a
 ) ( (aË& 
ACCESS_CONTROL_AUTH_READ
 )

	)

70 
	#z˛_Ac˚ssCålAuthWrôe
–
a
 ) ( (aË& 
ACCESS_CONTROL_AUTH_WRITE
 )

	)

72 
	#z˛P¨£Cmd
–
a
, 
b
 ) 
z˛CmdTabÀ
[◊)].
	`p‚P¨£InProfûe
–(bË)

	)

73 
	#z˛Pro˚ssCmd
–
a
, 
b
 ) 
z˛CmdTabÀ
[◊)].
	`p‚Pro˚ssInProfûe
–(bË)

	)

75 
	#z˛_DeÁu…R•Cmd
–
z˛Hdr
 ) ( 
	`z˛_ProfûeCmd
–(z˛Hdr).
fc
.
ty≥
 ) && \

76 (
z˛Hdr
).
fc
.
m™uS≥cific
 == 0 && \

77 (
z˛Hdr
).
comm™dID
 =
ZCL_CMD_DEFAULT_RSP
 )

	)

80 
	#CMD_HAS_RSP
–
cmd
 ) ( (cmdË=
ZCL_CMD_READ
 || \

81 (
cmd
Ë=
ZCL_CMD_WRITE
 || \

82 (
cmd
Ë=
ZCL_CMD_WRITE_UNDIVIDED
 || \

83 (
cmd
Ë=
ZCL_CMD_CONFIG_REPORT
 || \

84 (
cmd
Ë=
ZCL_CMD_READ_REPORT_CFG
 || \

85 (
cmd
Ë=
ZCL_CMD_DISCOVER
 || \

86 (
cmd
Ë=
ZCL_CMD_DEFAULT_RSP
 )

87 

	)

95 
	sz˛LibPlugö


97 
z˛LibPlugö
 *
	m√xt
;

98 
uöt16
 
	m°¨tClu°îID
;

99 
uöt16
 
	mídClu°îID
;

100 
z˛InHdÃ_t
 
	mp‚IncomögHdÃ
;

101 } 
	tz˛LibPlugö_t
;

104 
	sz˛AârRecsLi°


106 
z˛AârRecsLi°
 *
	m√xt
;

107 
uöt8
 
	mídpoöt
;

108 
z˛RódWrôeCB_t
 
	mp‚RódWrôeCB
;

109 
z˛Auth‹izeCB_t
 
	mp‚Auth‹izeCB
;

110 
uöt8
 
	mnumAâribuãs
;

111 
CONST
 
z˛AârRec_t
 *
	m©ås
;

112 } 
	tz˛AârRecsLi°
;

115 
	sz˛Clu°îO±i⁄Li°


117 
z˛Clu°îO±i⁄Li°
 *
	m√xt
;

118 
uöt8
 
	mídpoöt
;

119 
uöt8
 
	mnumO±i⁄s
;

120 
z˛O±i⁄Rec_t
 *
	m›ti⁄s
;

121 } 
	tz˛Clu°îO±i⁄Li°
;

123 *(*
	tz˛P¨£InProfûeCmd_t
)–
	tz˛P¨£Cmd_t
 *
	tpCmd
 );

124 
	$uöt8
 (*
	tz˛Pro˚ssInProfûeCmd_t
)–
	tz˛Incomög_t
 *
	tpInMsg
 );

128 
z˛P¨£InProfûeCmd_t
 
p‚P¨£InProfûe
;

129 
z˛Pro˚ssInProfûeCmd_t
 
p‚Pro˚ssInProfûe
;

130 } 
	tz˛CmdIãms_t
;

136 
uöt8
 
z˛_TaskID
;

140 
uöt8
 
z˛_Regi°îedMsgTaskID
 = 
TASK_NO_TASK
;

143 
z˛VÆid©eAârD©a_t
 
z˛_VÆid©eAârD©aCB
 = 
NULL
;

146 
uöt8
 
z˛_SeqNum
 = 0x00;

159 
z˛LibPlugö_t
 *
∂ugös
;

160 
z˛AârRecsLi°
 *
©åLi°
;

161 
z˛Clu°îO±i⁄Li°
 *
˛u°îO±i⁄Li°
;

162 
uöt8
 
z˛_TønsID
 = 0;

164 
afIncomögMSGPackë_t
 *
øwAFMsg
 = 
NULL
;

169 
	`z˛Pro˚ssMesßgeMSG
–
afIncomögMSGPackë_t
 *
pkt
 );

170 
uöt8
 *
	`z˛BuûdHdr
–
z˛FømeHdr_t
 *
hdr
, uöt8 *
pD©a
 );

171 
uöt8
 
	`z˛CÆcHdrSize
–
z˛FømeHdr_t
 *
hdr
 );

172 
z˛LibPlugö_t
 *
	`z˛FödPlugö
–
uöt16
 
˛u°îID
, uöt16 
¥ofûeID
 );

173 
z˛AârRecsLi°
 *
	`z˛FödAârRecsLi°
–
uöt8
 
ídpoöt
 );

174 
z˛O±i⁄Rec_t
 *
	`z˛FödClu°îO±i⁄
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
 );

175 
uöt8
 
	`z˛GëClu°îO±i⁄
–uöt8 
ídpoöt
, 
uöt16
 
˛u°îID
 );

176 
	`z˛SëSecurôyO±i⁄
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
, uöt8 
íabÀ
 );

178 
uöt8
 
	`z˛_Devi˚O≥øti⁄Æ
–uöt8 
§cEP
, 
uöt16
 
˛u°îID
, uöt8 
‰ameTy≥
, uöt8 
cmd
, uöt16 
¥ofûeID
 );

180 #i‡
	`deföed
 ( 
ZCL_READ
 ) || deföed ( 
ZCL_WRITE
 )

181 
z˛RódWrôeCB_t
 
	`z˛GëRódWrôeCB
–
uöt8
 
ídpoöt
 );

182 
z˛Auth‹izeCB_t
 
	`z˛GëAuth‹izeCB
–
uöt8
 
ídpoöt
 );

185 #ifde‡
ZCL_READ


186 
uöt16
 
	`z˛GëAârD©aLígthUsögCB
–
uöt8
 
ídpoöt
, uöt16 
˛u°îID
, uöt16 
©åId
 );

187 
ZSètus_t
 
	`z˛RódAârD©aUsögCB
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îId
, uöt16 
©åId
,

188 
uöt8
 *
pAârD©a
, 
uöt16
 *
pD©aLí
 );

189 
ZSètus_t
 
	`z˛Auth‹izeRód
–
uöt8
 
ídpoöt
, 
afAddrTy≥_t
 *
§cAddr
, 
z˛AârRec_t
 *
pAâr
 );

190 *
	`z˛P¨£InRódR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

191 
uöt8
 
	`z˛Pro˚ssInRódCmd
–
z˛Incomög_t
 *
pInMsg
 );

194 #ifde‡
ZCL_WRITE


195 
ZSètus_t
 
	`z˛WrôeAârD©a
–
uöt8
 
ídpoöt
, 
afAddrTy≥_t
 *
§cAddr
,

196 
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pWrôeRec
 );

197 
ZSètus_t
 
	`z˛WrôeAârD©aUsögCB
–
uöt8
 
ídpoöt
, 
afAddrTy≥_t
 *
§cAddr
,

198 
z˛AârRec_t
 *
pAâr
, 
uöt8
 *
pAârD©a
 );

199 
ZSètus_t
 
	`z˛Auth‹izeWrôe
–
uöt8
 
ídpoöt
, 
afAddrTy≥_t
 *
§cAddr
, 
z˛AârRec_t
 *
pAâr
 );

200 *
	`z˛P¨£InWrôeR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

201 
uöt8
 
	`z˛Pro˚ssInWrôeCmd
–
z˛Incomög_t
 *
pInMsg
 );

202 
uöt8
 
	`z˛Pro˚ssInWrôeUndividedCmd
–
z˛Incomög_t
 *
pInMsg
 );

205 #ifde‡
ZCL_REPORT


206 *
	`z˛P¨£InC⁄figRï‹tR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

207 *
	`z˛P¨£InRódRï‹tCfgR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

210 *
	`z˛P¨£InDeÁu…R•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

212 #ifde‡
ZCL_DISCOVER


213 
uöt8
 
	`z˛FödNextAârRec
–uöt8 
ídpoöt
, 
uöt16
 
˛u°îID
, uöt16 *
©åId
, 
z˛AârRec_t
 *
pAâr
 );

214 *
	`z˛P¨£InDiscR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

215 
uöt8
 
	`z˛Pro˚ssInDiscCmd
–
z˛Incomög_t
 *
pInMsg
 );

218 
uöt8
 
	`z˛SídMsg
–
z˛Incomög_t
 *
pInMsg
 );

223 
CONST
 
z˛CmdIãms_t
 
z˛CmdTabÀ
[] =

225 #ifde‡
ZCL_READ


226  { 
z˛P¨£InRódCmd
, 
z˛Pro˚ssInRódCmd
 },

227  { 
z˛P¨£InRódR•Cmd
, 
z˛SídMsg
 },

229  { 
NULL
, NULL },

230  { 
NULL
, NULL },

233 #ifde‡
ZCL_WRITE


234  { 
z˛P¨£InWrôeCmd
, 
z˛Pro˚ssInWrôeCmd
 },

235  { 
z˛P¨£InWrôeCmd
, 
z˛Pro˚ssInWrôeUndividedCmd
 },

236  { 
z˛P¨£InWrôeR•Cmd
, 
z˛SídMsg
 },

237  { 
z˛P¨£InWrôeCmd
, 
z˛Pro˚ssInWrôeCmd
 },

239  { 
NULL
, NULL },

240  { 
NULL
, NULL },

241  { 
NULL
, NULL },

242  { 
NULL
, NULL },

245 #ifde‡
ZCL_REPORT


246  { 
z˛P¨£InC⁄figRï‹tCmd
, 
z˛SídMsg
 },

247  { 
z˛P¨£InC⁄figRï‹tR•Cmd
, 
z˛SídMsg
 },

248  { 
z˛P¨£InRódRï‹tCfgCmd
, 
z˛SídMsg
 },

249  { 
z˛P¨£InRódRï‹tCfgR•Cmd
, 
z˛SídMsg
 },

250  { 
z˛P¨£InRï‹tCmd
, 
z˛SídMsg
 },

252  { 
NULL
, NULL },

253  { 
NULL
, NULL },

254  { 
NULL
, NULL },

255  { 
NULL
, NULL },

256  { 
NULL
, NULL },

259  { 
z˛P¨£InDeÁu…R•Cmd
, 
z˛SídMsg
 },

261 #ifde‡
ZCL_DISCOVER


262  { 
z˛P¨£InDiscCmd
, 
z˛Pro˚ssInDiscCmd
 },

263  { 
z˛P¨£InDiscR•Cmd
, 
z˛SídMsg
 }

265  { 
NULL
, NULL },

266  { 
NULL
, NULL }

268 
	}
};

283 
	$z˛_Inô
–
uöt8
 
èsk_id
 )

285 
z˛_TaskID
 = 
èsk_id
;

287 
∂ugös
 = (
z˛LibPlugö_t
 *)
NULL
;

288 
©åLi°
 = (
z˛AârRecsLi°
 *)
NULL
;

289 
˛u°îO±i⁄Li°
 = (
z˛Clu°îO±i⁄Li°
 *)
NULL
;

290 
	}
}

302 
uöt16
 
	$z˛_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

304 
uöt8
 *
msgPå
;

306 ()
èsk_id
;

308 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

310 
msgPå
 = 
	`oßl_msg_ª˚ive
–
z˛_TaskID
 );

311  
msgPå
 !
NULL
 )

313 
uöt8
 
dóŒoc
 = 
TRUE
;

315 i‡–*
msgPå
 =
AF_INCOMING_MSG_CMD
 )

317 
øwAFMsg
 = (
afIncomögMSGPackë_t
 *)
msgPå
;

318 
	`z˛Pro˚ssMesßgeMSG
–
øwAFMsg
 );

319 
øwAFMsg
 = 
NULL
;

321 i‡–
z˛_Regi°îedMsgTaskID
 !
TASK_NO_TASK
 )

324 
	`oßl_msg_£nd
–
z˛_Regi°îedMsgTaskID
, 
msgPå
 );

325 
dóŒoc
 = 
FALSE
;

329 i‡–
dóŒoc
 )

331 
	`oßl_msg_dóŒoˇã
–
msgPå
 );

335 
msgPå
 = 
	`oßl_msg_ª˚ive
–
z˛_TaskID
 );

339  (
evíts
 ^ 
SYS_EVENT_MSG
);

344 
	}
}

360 
afIncomögMSGPackë_t
 *
	$z˛_gëRawAFMsg
( )

362  ( 
øwAFMsg
 );

363 
	}
}

376 
ZSètus_t
 
	$z˛_ªgi°îPlugö
–
uöt16
 
°¨tClu°îID
,

377 
uöt16
 
ídClu°îID
, 
z˛InHdÃ_t
 
p‚IncomögHdÃ
 )

379 
z˛LibPlugö_t
 *
pNewIãm
;

380 
z˛LibPlugö_t
 *
pLo›
;

383 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛LibPlugö_t
 ) );

384 i‡–
pNewIãm
 =
NULL
 )

386  (
ZMemEº‹
);

390 
pNewIãm
->
√xt
 = (
z˛LibPlugö_t
 *)
NULL
;

391 
pNewIãm
->
°¨tClu°îID
 = startClusterID;

392 
pNewIãm
->
ídClu°îID
 =ÉndClusterID;

393 
pNewIãm
->
p‚IncomögHdÃ
 =ÖfnIncomingHdlr;

396 i‡–
∂ugös
 =
NULL
 )

398 
∂ugös
 = 
pNewIãm
;

403 
pLo›
 = 
∂ugös
;

404  
pLo›
->
√xt
 !
NULL
 )

406 
pLo›
 =ÖLo›->
√xt
;

410 
pLo›
->
√xt
 = 
pNewIãm
;

413  ( 
ZSuc˚ss
 );

414 
	}
}

430 
ZSètus_t
 
	$z˛_ªgi°îAârLi°
–
uöt8
 
ídpoöt
, uöt8 
numAâr
, 
CONST
 
z˛AârRec_t
 
√wAârLi°
[] )

432 
z˛AârRecsLi°
 *
pNewIãm
;

433 
z˛AârRecsLi°
 *
pLo›
;

436 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛AârRecsLi°
 ) );

437 i‡–
pNewIãm
 =
NULL
 )

439  (
ZMemEº‹
);

442 
pNewIãm
->
√xt
 = (
z˛AârRecsLi°
 *)
NULL
;

443 
pNewIãm
->
ídpoöt
 =Éndpoint;

444 
pNewIãm
->
p‚RódWrôeCB
 = 
NULL
;

445 
pNewIãm
->
numAâribuãs
 = 
numAâr
;

446 
pNewIãm
->
©ås
 = 
√wAârLi°
;

449 i‡–
©åLi°
 =
NULL
 )

451 
©åLi°
 = 
pNewIãm
;

456 
pLo›
 = 
©åLi°
;

457  
pLo›
->
√xt
 !
NULL
 )

459 
pLo›
 =ÖLo›->
√xt
;

463 
pLo›
->
√xt
 = 
pNewIãm
;

466  ( 
ZSuc˚ss
 );

467 
	}
}

487 
ZSètus_t
 
	$z˛_ªgi°îClu°îO±i⁄Li°
–
uöt8
 
ídpoöt
, uöt8 
numO±i⁄
, 
z˛O±i⁄Rec_t
 
›ti⁄Li°
[] )

489 
z˛Clu°îO±i⁄Li°
 *
pNewIãm
;

490 
z˛Clu°îO±i⁄Li°
 *
pLo›
;

493 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛Clu°îO±i⁄Li°
 ) );

494 i‡–
pNewIãm
 =
NULL
 )

496  (
ZMemEº‹
);

499 
pNewIãm
->
√xt
 = (
z˛Clu°îO±i⁄Li°
 *)
NULL
;

500 
pNewIãm
->
ídpoöt
 =Éndpoint;

501 
pNewIãm
->
numO±i⁄s
 = 
numO±i⁄
;

502 
pNewIãm
->
›ti⁄s
 = 
›ti⁄Li°
;

505 i‡–
˛u°îO±i⁄Li°
 =
NULL
 )

507 
˛u°îO±i⁄Li°
 = 
pNewIãm
;

512 
pLo›
 = 
˛u°îO±i⁄Li°
;

513  
pLo›
->
√xt
 !
NULL
 )

515 
pLo›
 =ÖLo›->
√xt
;

519 
pLo›
->
√xt
 = 
pNewIãm
;

522  ( 
ZSuc˚ss
 );

523 
	}
}

534 
ZSètus_t
 
	$z˛_ªgi°îVÆid©eAârD©a
–
z˛VÆid©eAârD©a_t
 
p‚VÆid©eAârD©a
 )

536 
z˛_VÆid©eAârD©aCB
 = 
p‚VÆid©eAârD©a
;

538  ( 
ZSuc˚ss
 );

539 
	}
}

564 
ZSètus_t
 
	$z˛_ªgi°îRódWrôeCB
–
uöt8
 
ídpoöt
, 
z˛RódWrôeCB_t
 
p‚RódWrôeCB
,

565 
z˛Auth‹izeCB_t
 
p‚Auth‹izeCB
 )

567 
z˛AârRecsLi°
 *
pRec
 = 
	`z˛FödAârRecsLi°
–
ídpoöt
 );

569 i‡–
pRec
 !
NULL
 )

571 
pRec
->
p‚RódWrôeCB
 =ÖfnReadWriteCB;

572 
pRec
->
p‚Auth‹izeCB
 =ÖfnAuthorizeCB;

574  ( 
ZSuc˚ss
 );

577  ( 
ZFaûuª
 );

578 
	}
}

591 
uöt8
 
	$z˛_ªgi°îF‹Msg
–
uöt8
 
èskId
 )

594 i‡–
z˛_Regi°îedMsgTaskID
 =
TASK_NO_TASK
 )

596 
z˛_Regi°îedMsgTaskID
 = 
èskId
;

598  ( 
åue
 );

601  ( 
Ál£
 );

602 
	}
}

617 
uöt8
 
	$z˛_Devi˚O≥øti⁄Æ
–
uöt8
 
§cEP
, 
uöt16
 
˛u°îID
,

618 
uöt8
 
‰ameTy≥
, uöt8 
cmd
, 
uöt16
 
¥ofûeID
 )

620 
z˛AârRec_t
 
©åRec
;

621 
uöt8
 
devi˚E«bÀd
 = 
DEVICE_ENABLED
;

623 ()
¥ofûeID
;

629 i‡–
	`z˛_ProfûeCmd
–
‰ameTy≥
 ) && 
cmd
 <
ZCL_CMD_WRITE_NO_RSP
 )

631  ( 
TRUE
 );

634 i‡–
˛u°îID
 =
ZCL_CLUSTER_ID_GEN_IDENTIFY
 )

636  ( 
TRUE
 );

640 i‡–
	`z˛FödAârRec
–
§cEP
, 
ZCL_CLUSTER_ID_GEN_BASIC
,

641 
ATTRID_BASIC_DEVICE_ENABLED
, &
©åRec
 ) )

643 
	`z˛RódAârD©a
–&
devi˚E«bÀd
, &
©åRec
, 
NULL
 );

646  ( 
devi˚E«bÀd
 =
DEVICE_ENABLED
 ? 
TRUE
 : 
FALSE
 );

647 
	}
}

671 
ZSètus_t
 
	$z˛_SídComm™d
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
de°Addr
,

672 
uöt16
 
˛u°îID
, 
uöt8
 
cmd
, uöt8 
•ecific
, uöt8 
dúe˘i⁄
,

673 
uöt8
 
dißbÀDeÁu…R•
, 
uöt16
 
m™uCode
, uöt8 
£qNum
,

674 
uöt16
 
cmdF‹m©Lí
, 
uöt8
 *
cmdF‹m©
 )

676 
ídPoötDesc_t
 *
ïDesc
;

677 
z˛FømeHdr_t
 
hdr
;

678 
uöt8
 *
msgBuf
;

679 
uöt16
 
msgLí
;

680 
uöt8
 *
pBuf
;

681 
uöt8
 
›ti⁄s
;

682 
ZSètus_t
 
°©us
;

684 
ïDesc
 = 
	`afFödEndPoötDesc
–
§cEP
 );

685 i‡–
ïDesc
 =
NULL
 )

687  ( 
ZInvÆidP¨amëî
 );

690 #i‡
	`deföed
 ( 
INTER_PAN
 )

691 i‡–
	`StubAPS_I¡îP™
–
de°Addr
->
∑nId
, de°Addr->
ídPoöt
 ) )

693 
›ti⁄s
 = 
AF_TX_OPTIONS_NONE
;

698 
›ti⁄s
 = 
	`z˛GëClu°îO±i⁄
–
§cEP
, 
˛u°îID
 );

701 
	`oßl_mem£t
–&
hdr
, 0, –
z˛FømeHdr_t
 ) );

704 i‡–
•ecific
 )

706 
hdr
.
fc
.
ty≥
 = 
ZCL_FRAME_TYPE_SPECIFIC_CMD
;

710 
hdr
.
fc
.
ty≥
 = 
ZCL_FRAME_TYPE_PROFILE_CMD
;

713 i‡––
ïDesc
->
sim∂eDesc
 =
NULL
 ) ||

714 –
	`z˛_Devi˚O≥øti⁄Æ
–
§cEP
, 
˛u°îID
, 
hdr
.
fc
.
ty≥
,

715 
cmd
, 
ïDesc
->
sim∂eDesc
->
AµProfId
 ) =
FALSE
 ) )

717  ( 
ZFaûuª
 );

721 i‡–
m™uCode
 != 0 )

723 
hdr
.
fc
.
m™uS≥cific
 = 1;

724 
hdr
.
m™uCode
 = manuCode;

728 i‡–
dúe˘i⁄
 )

730 
hdr
.
fc
.
dúe˘i⁄
 = 
ZCL_FRAME_SERVER_CLIENT_DIR
;

734 
hdr
.
fc
.
dúe˘i⁄
 = 
ZCL_FRAME_CLIENT_SERVER_DIR
;

738 i‡–
dißbÀDeÁu…R•
 )

740 
hdr
.
fc
.
dißbÀDeÁu…R•
 = 1;

744 
hdr
.
fc
.
dißbÀDeÁu…R•
 = 0;

748 
hdr
.
å™sSeqNum
 = 
£qNum
;

751 
hdr
.
comm™dID
 = 
cmd
;

754 
msgLí
 = 
	`z˛CÆcHdrSize
–&
hdr
 );

755 
msgLí
 +
cmdF‹m©Lí
;

758 
msgBuf
 = 
	`oßl_mem_Æloc
–
msgLí
 );

759 i‡–
msgBuf
 !
NULL
 )

762 
pBuf
 = 
	`z˛BuûdHdr
–&
hdr
, 
msgBuf
 );

765 
	`oßl_mem˝y
–
pBuf
, 
cmdF‹m©
, 
cmdF‹m©Lí
 );

767 
°©us
 = 
	`AF_D©aReque°
–
de°Addr
, 
ïDesc
, 
˛u°îID
, 
msgLí
, 
msgBuf
,

768 &
z˛_TønsID
, 
›ti⁄s
, 
AF_DEFAULT_RADIUS
 );

769 
	`oßl_mem_‰ì
 ( 
msgBuf
 );

773 
°©us
 = 
ZMemEº‹
;

776  ( 
°©us
 );

777 
	}
}

779 #ifde‡
ZCL_READ


794 
ZSètus_t
 
	$z˛_SídRód
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

795 
uöt16
 
˛u°îID
, 
z˛RódCmd_t
 *
ªadCmd
,

796 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
)

798 
uöt16
 
d©aLí
;

799 
uöt8
 *
buf
;

800 
uöt8
 *
pBuf
;

801 
ZSètus_t
 
°©us
;

803 
d©aLí
 = 
ªadCmd
->
numAâr
 * 2;

805 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

806 i‡–
buf
 !
NULL
 )

808 
uöt8
 
i
;

811 
pBuf
 = 
buf
;

812 
i
 = 0; i < 
ªadCmd
->
numAâr
; i++)

814 *
pBuf
++ = 
	`LO_UINT16
–
ªadCmd
->
©åID
[
i
] );

815 *
pBuf
++ = 
	`HI_UINT16
–
ªadCmd
->
©åID
[
i
] );

818 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_READ
, 
FALSE
,

819 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

820 
	`oßl_mem_‰ì
–
buf
 );

824 
°©us
 = 
ZMemEº‹
;

827  ( 
°©us
 );

828 
	}
}

844 
ZSètus_t
 
	$z˛_SídRódR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

845 
uöt16
 
˛u°îID
, 
z˛RódR•Cmd_t
 *
ªadR•Cmd
,

846 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

848 
uöt8
 *
buf
;

849 
uöt16
 
Àn
 = 0;

850 
ZSètus_t
 
°©us
;

853  
uöt8
 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++ )

855 
z˛RódR•Sètus_t
 *
°©usRec
 = &(
ªadR•Cmd
->
©åLi°
[
i
]);

857 
Àn
 += 2 + 1;

859 i‡–
°©usRec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

861 
Àn
++;

864 i‡–
°©usRec
->
d©a
 !
NULL
 )

866 
Àn
 +
	`z˛GëAârD©aLígth
–
°©usRec
->
d©aTy≥
, sètusRec->
d©a
 );

870 
Àn
 +
	`z˛GëAârD©aLígthUsögCB
–
§cEP
, 
˛u°îID
, 
°©usRec
->
©åID
 );

875 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

876 i‡–
buf
 !
NULL
 )

879 
uöt8
 *
pBuf
 = 
buf
;

880  
uöt8
 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++ )

882 
z˛RódR•Sètus_t
 *
°©usRec
 = &(
ªadR•Cmd
->
©åLi°
[
i
]);

884 *
pBuf
++ = 
	`LO_UINT16
–
°©usRec
->
©åID
 );

885 *
pBuf
++ = 
	`HI_UINT16
–
°©usRec
->
©åID
 );

886 *
pBuf
++ = 
°©usRec
->
°©us
;

888 i‡–
°©usRec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

890 *
pBuf
++ = 
°©usRec
->
d©aTy≥
;

892 i‡–
°©usRec
->
d©a
 !
NULL
 )

895 
pBuf
 = 
	`z˛SîülizeD©a
–
°©usRec
->
d©aTy≥
, sètusRec->
d©a
,ÖBuf );

899 
uöt16
 
d©aLí
;

902 
	`z˛RódAârD©aUsögCB
–
§cEP
, 
˛u°îID
, 
°©usRec
->
©åID
, 
pBuf
, &
d©aLí
 );

903 
pBuf
 +
d©aLí
;

908 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_READ_RSP
, 
FALSE
,

909 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

910 
	`oßl_mem_‰ì
–
buf
 );

914 
°©us
 = 
ZMemEº‹
;

917  ( 
°©us
 );

918 
	}
}

921 #ifde‡
ZCL_WRITE


936 
ZSètus_t
 
	$z˛_SídWrôeReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
, 
uöt16
 
˛u°îID
,

937 
z˛WrôeCmd_t
 *
wrôeCmd
, 
uöt8
 
cmd
, uöt8 
dúe˘i⁄
,

938 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

940 
uöt8
 *
buf
;

941 
uöt16
 
d©aLí
 = 0;

942 
ZSètus_t
 
°©us
;

944  
uöt8
 
i
 = 0; i < 
wrôeCmd
->
numAâr
; i++ )

946 
z˛WrôeRec_t
 *
°©usRec
 = &(
wrôeCmd
->
©åLi°
[
i
]);

948 
d©aLí
 += 2 + 1;

951 
d©aLí
 +
	`z˛GëAârD©aLígth
–
°©usRec
->
d©aTy≥
, sètusRec->
©åD©a
 );

954 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

955 i‡–
buf
 !
NULL
 )

958 
uöt8
 *
pBuf
 = 
buf
;

959  
uöt8
 
i
 = 0; i < 
wrôeCmd
->
numAâr
; i++ )

961 
z˛WrôeRec_t
 *
°©usRec
 = &(
wrôeCmd
->
©åLi°
[
i
]);

963 *
pBuf
++ = 
	`LO_UINT16
–
°©usRec
->
©åID
 );

964 *
pBuf
++ = 
	`HI_UINT16
–
°©usRec
->
©åID
 );

965 *
pBuf
++ = 
°©usRec
->
d©aTy≥
;

967 
pBuf
 = 
	`z˛SîülizeD©a
–
°©usRec
->
d©aTy≥
, sètusRec->
©åD©a
,ÖBuf );

970 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
cmd
, 
FALSE
,

971 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

972 
	`oßl_mem_‰ì
–
buf
 );

976 
°©us
 = 
ZMemEº‹
;

979  ( 
°©us
);

980 
	}
}

995 
ZSètus_t
 
	$z˛_SídWrôeR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

996 
uöt16
 
˛u°îID
, 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
,

997 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

999 
uöt16
 
d©aLí
;

1000 
uöt8
 *
buf
;

1001 
ZSètus_t
 
°©us
;

1003 
d©aLí
 = 
wrôeR•Cmd
->
numAâr
 * ( 1 + 2 );

1005 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

1006 i‡–
buf
 !
NULL
 )

1009 
uöt8
 *
pBuf
 = 
buf
;

1010  
uöt8
 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++ )

1012 *
pBuf
++ = 
wrôeR•Cmd
->
©åLi°
[
i
].
°©us
;

1013 *
pBuf
++ = 
	`LO_UINT16
–
wrôeR•Cmd
->
©åLi°
[
i
].
©åID
 );

1014 *
pBuf
++ = 
	`HI_UINT16
–
wrôeR•Cmd
->
©åLi°
[
i
].
©åID
 );

1019 i‡–
wrôeR•Cmd
->
numAâr
 =1 && wrôeR•Cmd->
©åLi°
[0].
°©us
 =
ZCL_STATUS_SUCCESS
 )

1021 
d©aLí
 = 1;

1024 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_WRITE_RSP
, 
FALSE
,

1025 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

1026 
	`oßl_mem_‰ì
–
buf
 );

1030 
°©us
 = 
ZMemEº‹
;

1033  ( 
°©us
 );

1034 
	}
}

1037 #ifde‡
ZCL_REPORT


1051 
ZSètus_t
 
	$z˛_SídC⁄figRï‹tCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1052 
uöt16
 
˛u°îID
, 
z˛CfgRï‹tCmd_t
 *
cfgRï‹tCmd
,

1053 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1055 
uöt8
 *
buf
;

1056 
uöt16
 
d©aLí
 = 0;

1057 
ZSètus_t
 
°©us
;

1060  
uöt8
 
i
 = 0; i < 
cfgRï‹tCmd
->
numAâr
; i++ )

1062 
z˛CfgRï‹tRec_t
 *
ªp‹tRec
 = &(
cfgRï‹tCmd
->
©åLi°
[
i
]);

1064 
d©aLí
 += 1 + 2;

1066 i‡–
ªp‹tRec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

1068 
d©aLí
 += 1 + 2 + 2;

1071 i‡–
	`z˛A«logD©aTy≥
–
ªp‹tRec
->
d©aTy≥
 ) )

1073 
d©aLí
 +
	`z˛GëD©aTy≥Lígth
–
ªp‹tRec
->
d©aTy≥
 );

1078 
d©aLí
 += 2;

1082 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

1083 i‡–
buf
 !
NULL
 )

1086 
uöt8
 *
pBuf
 = 
buf
;

1087  
uöt8
 
i
 = 0; i < 
cfgRï‹tCmd
->
numAâr
; i++ )

1089 
z˛CfgRï‹tRec_t
 *
ªp‹tRec
 = &(
cfgRï‹tCmd
->
©åLi°
[
i
]);

1091 *
pBuf
++ = 
ªp‹tRec
->
dúe˘i⁄
;

1092 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tRec
->
©åID
 );

1093 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tRec
->
©åID
 );

1095 i‡–
ªp‹tRec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

1097 *
pBuf
++ = 
ªp‹tRec
->
d©aTy≥
;

1098 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tRec
->
möRï‹tI¡
 );

1099 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tRec
->
möRï‹tI¡
 );

1100 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tRec
->
maxRï‹tI¡
 );

1101 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tRec
->
maxRï‹tI¡
 );

1103 i‡–
	`z˛A«logD©aTy≥
–
ªp‹tRec
->
d©aTy≥
 ) )

1105 
pBuf
 = 
	`z˛SîülizeD©a
–
ªp‹tRec
->
d©aTy≥
,Ñï‹tRec->
ªp‹èbÀCh™ge
,ÖBuf );

1110 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tRec
->
timeoutPîiod
 );

1111 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tRec
->
timeoutPîiod
 );

1115 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_CONFIG_REPORT
, 
FALSE
,

1116 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

1117 
	`oßl_mem_‰ì
–
buf
 );

1121 
°©us
 = 
ZMemEº‹
;

1124  ( 
°©us
 );

1125 
	}
}

1140 
ZSètus_t
 
	$z˛_SídC⁄figRï‹tR•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1141 
uöt16
 
˛u°îID
, 
z˛CfgRï‹tR•Cmd_t
 *
cfgRï‹tR•Cmd
,

1142 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1144 
uöt16
 
d©aLí
;

1145 
uöt8
 *
buf
;

1146 
ZSètus_t
 
°©us
;

1149 
d©aLí
 = 
cfgRï‹tR•Cmd
->
numAâr
 * ( 1 + 1 + 2 );

1151 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

1152 i‡–
buf
 !
NULL
 )

1155 
uöt8
 *
pBuf
 = 
buf
;

1156  
uöt8
 
i
 = 0; i < 
cfgRï‹tR•Cmd
->
numAâr
; i++ )

1158 *
pBuf
++ = 
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
°©us
;

1159 *
pBuf
++ = 
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
dúe˘i⁄
;

1160 *
pBuf
++ = 
	`LO_UINT16
–
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
©åID
 );

1161 *
pBuf
++ = 
	`HI_UINT16
–
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
©åID
 );

1166 i‡–
cfgRï‹tR•Cmd
->
numAâr
 =1 && cfgRï‹tR•Cmd->
©åLi°
[0].
°©us
 =
ZCL_STATUS_SUCCESS
 )

1168 
d©aLí
 = 1;

1171 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
,

1172 
ZCL_CMD_CONFIG_REPORT_RSP
, 
FALSE
, 
dúe˘i⁄
,

1173 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

1174 
	`oßl_mem_‰ì
–
buf
 );

1178 
°©us
 = 
ZMemEº‹
;

1181  ( 
°©us
 );

1182 
	}
}

1197 
ZSètus_t
 
	$z˛_SídRódRï‹tCfgCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1198 
uöt16
 
˛u°îID
, 
z˛RódRï‹tCfgCmd_t
 *
ªadRï‹tCfgCmd
,

1199 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1201 
uöt16
 
d©aLí
;

1202 
uöt8
 *
buf
;

1203 
ZSètus_t
 
°©us
;

1205 
d©aLí
 = 
ªadRï‹tCfgCmd
->
numAâr
 * ( 1 + 2 );

1207 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

1208 i‡–
buf
 !
NULL
 )

1211 
uöt8
 *
pBuf
 = 
buf
;

1212  
uöt8
 
i
 = 0; i < 
ªadRï‹tCfgCmd
->
numAâr
; i++ )

1214 *
pBuf
++ = 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
dúe˘i⁄
;

1215 *
pBuf
++ = 
	`LO_UINT16
–
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
©åID
 );

1216 *
pBuf
++ = 
	`HI_UINT16
–
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
©åID
 );

1219 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_READ_REPORT_CFG
, 
FALSE
,

1220 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

1221 
	`oßl_mem_‰ì
–
buf
 );

1225 
°©us
 = 
ZMemEº‹
;

1228  ( 
°©us
 );

1229 
	}
}

1244 
ZSètus_t
 
	$z˛_SídRódRï‹tCfgR•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1245 
uöt16
 
˛u°îID
, 
z˛RódRï‹tCfgR•Cmd_t
 *
ªadRï‹tCfgR•Cmd
,

1246 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1248 
uöt8
 *
buf
;

1249 
uöt16
 
d©aLí
 = 0;

1250 
ZSètus_t
 
°©us
;

1253  
uöt8
 
i
 = 0; i < 
ªadRï‹tCfgR•Cmd
->
numAâr
; i++ )

1255 
z˛Rï‹tCfgR•Rec_t
 *
ªp‹tR•Rec
 = &(
ªadRï‹tCfgR•Cmd
->
©åLi°
[
i
]);

1257 
d©aLí
 += 1 + 1 + 2 ;

1259 i‡–
ªp‹tR•Rec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

1261 i‡–
ªp‹tR•Rec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

1263 
d©aLí
 += 1 + 2 + 2;

1266 i‡–
	`z˛A«logD©aTy≥
–
ªp‹tR•Rec
->
d©aTy≥
 ) )

1268 
d©aLí
 +
	`z˛GëD©aTy≥Lígth
–
ªp‹tR•Rec
->
d©aTy≥
 );

1273 
d©aLí
 += 2;

1278 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

1279 i‡–
buf
 !
NULL
 )

1282 
uöt8
 *
pBuf
 = 
buf
;

1283  
uöt8
 
i
 = 0; i < 
ªadRï‹tCfgR•Cmd
->
numAâr
; i++ )

1285 
z˛Rï‹tCfgR•Rec_t
 *
ªp‹tR•Rec
 = &(
ªadRï‹tCfgR•Cmd
->
©åLi°
[
i
]);

1287 *
pBuf
++ = 
ªp‹tR•Rec
->
°©us
;

1288 *
pBuf
++ = 
ªp‹tR•Rec
->
dúe˘i⁄
;

1289 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tR•Rec
->
©åID
 );

1290 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tR•Rec
->
©åID
 );

1292 i‡–
ªp‹tR•Rec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

1294 i‡–
ªp‹tR•Rec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

1296 *
pBuf
++ = 
ªp‹tR•Rec
->
d©aTy≥
;

1297 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tR•Rec
->
möRï‹tI¡
 );

1298 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tR•Rec
->
möRï‹tI¡
 );

1299 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tR•Rec
->
maxRï‹tI¡
 );

1300 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tR•Rec
->
maxRï‹tI¡
 );

1302 i‡–
	`z˛A«logD©aTy≥
–
ªp‹tR•Rec
->
d©aTy≥
 ) )

1304 
pBuf
 = 
	`z˛SîülizeD©a
–
ªp‹tR•Rec
->
d©aTy≥
,

1305 
ªp‹tR•Rec
->
ªp‹èbÀCh™ge
, 
pBuf
 );

1310 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tR•Rec
->
timeoutPîiod
 );

1311 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tR•Rec
->
timeoutPîiod
 );

1316 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
,

1317 
ZCL_CMD_READ_REPORT_CFG_RSP
, 
FALSE
,

1318 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

1319 
	`oßl_mem_‰ì
–
buf
 );

1323 
°©us
 = 
ZMemEº‹
;

1326  ( 
°©us
 );

1327 
	}
}

1342 
ZSètus_t
 
	$z˛_SídRï‹tCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1343 
uöt16
 
˛u°îID
, 
z˛Rï‹tCmd_t
 *
ªp‹tCmd
,

1344 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1346 
uöt16
 
d©aLí
 = 0;

1347 
uöt8
 *
buf
;

1348 
ZSètus_t
 
°©us
;

1351  
uöt8
 
i
 = 0; i < 
ªp‹tCmd
->
numAâr
; i++ )

1353 
z˛Rï‹t_t
 *
ªp‹tRec
 = &(
ªp‹tCmd
->
©åLi°
[
i
]);

1355 
d©aLí
 += 2 + 1;

1358 
d©aLí
 +
	`z˛GëAârD©aLígth
–
ªp‹tRec
->
d©aTy≥
,Ñï‹tRec->
©åD©a
 );

1361 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

1362 i‡–
buf
 !
NULL
 )

1365 
uöt8
 *
pBuf
 = 
buf
;

1366  
uöt8
 
i
 = 0; i < 
ªp‹tCmd
->
numAâr
; i++ )

1368 
z˛Rï‹t_t
 *
ªp‹tRec
 = &(
ªp‹tCmd
->
©åLi°
[
i
]);

1370 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tRec
->
©åID
 );

1371 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tRec
->
©åID
 );

1372 *
pBuf
++ = 
ªp‹tRec
->
d©aTy≥
;

1374 
pBuf
 = 
	`z˛SîülizeD©a
–
ªp‹tRec
->
d©aTy≥
,Ñï‹tRec->
©åD©a
,ÖBuf );

1377 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_REPORT
, 
FALSE
,

1378 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

1379 
	`oßl_mem_‰ì
–
buf
 );

1383 
°©us
 = 
ZMemEº‹
;

1386  ( 
°©us
 );

1387 
	}
}

1408 
ZSètus_t
 
	$z˛_SídDeÁu…R•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
, 
uöt16
 
˛u°îID
,

1409 
z˛DeÁu…R•Cmd_t
 *
deÁu…R•Cmd
, 
uöt8
 
dúe˘i⁄
,

1410 
uöt8
 
dißbÀDeÁu…R•
, 
uöt16
 
m™uCode
, uöt8 
£qNum
 )

1412 
uöt8
 
buf
[2];

1415 
buf
[0] = 
deÁu…R•Cmd
->
comm™dID
;

1416 
buf
[1] = 
deÁu…R•Cmd
->
°©usCode
;

1418  ( 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_DEFAULT_RSP
, 
FALSE
,

1419 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 
m™uCode
, 
£qNum
, 2, 
buf
 ) );

1420 
	}
}

1422 #ifde‡
ZCL_DISCOVER


1436 
ZSètus_t
 
	$z˛_SídDiscovîCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1437 
uöt16
 
˛u°îID
, 
z˛DiscovîCmd_t
 *
discovîCmd
,

1438 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1440 
uöt16
 
d©aLí
 = 2 + 1;

1441 
uöt8
 *
buf
;

1442 
ZSètus_t
 
°©us
;

1444 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

1445 i‡–
buf
 !
NULL
 )

1448 
uöt8
 *
pBuf
 = 
buf
;

1449 *
pBuf
++ = 
	`LO_UINT16
(
discovîCmd
->
°¨tAâr
);

1450 *
pBuf
++ = 
	`HI_UINT16
(
discovîCmd
->
°¨tAâr
);

1451 *
pBuf
++ = 
discovîCmd
->
maxAârIDs
;

1453 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_DISCOVER
, 
FALSE
,

1454 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

1455 
	`oßl_mem_‰ì
–
buf
 );

1459 
°©us
 = 
ZMemEº‹
;

1462  ( 
°©us
 );

1463 
	}
}

1478 
ZSètus_t
 
	$z˛_SídDiscovîR•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1479 
uöt16
 
˛u°îID
, 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
,

1480 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1482 
uöt16
 
d©aLí
 = 1;

1483 
uöt8
 *
buf
;

1484 
ZSètus_t
 
°©us
;

1487 
d©aLí
 +
discovîR•Cmd
->
numAâr
 * (2 + 1);

1489 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

1490 i‡–
buf
 !
NULL
 )

1493 
uöt8
 *
pBuf
 = 
buf
;

1494 *
pBuf
++ = 
discovîR•Cmd
->
discCom∂ëe
;

1495  
uöt8
 
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

1497 *
pBuf
++ = 
	`LO_UINT16
(
discovîR•Cmd
->
©åLi°
[
i
].
©åID
);

1498 *
pBuf
++ = 
	`HI_UINT16
(
discovîR•Cmd
->
©åLi°
[
i
].
©åID
);

1499 *
pBuf
++ = 
discovîR•Cmd
->
©åLi°
[
i
].
d©aTy≥
;

1502 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_DISCOVER_RSP
, 
FALSE
,

1503 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

1504 
	`oßl_mem_‰ì
–
buf
 );

1508 
°©us
 = 
ZMemEº‹
;

1511  ( 
°©us
 );

1512 
	}
}

1530 
	$z˛Pro˚ssMesßgeMSG
–
afIncomögMSGPackë_t
 *
pkt
 )

1532 
ídPoötDesc_t
 *
ïDesc
;

1533 
z˛Incomög_t
 
öMsg
;

1534 
z˛LibPlugö_t
 *
pInPlugö
;

1535 
z˛DeÁu…R•Cmd_t
 
deÁuéR•Cmd
;

1536 
uöt8
 
›ti⁄s
;

1537 
uöt8
 
£curôyE«bÀ
;

1538 
uöt8
 
öãrP™Msg
;

1539 
ZSètus_t
 
°©us
 = 
ZFaûuª
;

1541 i‡–
pkt
->
cmd
.
D©aLígth
 == 0 )

1547 
öMsg
.
msg
 = 
pkt
;

1548 
öMsg
.
©åCmd
 = 
NULL
;

1549 
öMsg
.
pD©a
 = 
NULL
;

1550 
öMsg
.
pD©aLí
 = 0;

1552 
öMsg
.
pD©a
 = 
	`z˛P¨£Hdr
–&(öMsg.
hdr
), 
pkt
->
cmd
.
D©a
 );

1553 
öMsg
.
pD©aLí
 = 
pkt
->
cmd
.
D©aLígth
;

1554 
öMsg
.
pD©aLí
 -(
uöt16
)(öMsg.
pD©a
 - 
pkt
->
cmd
.
D©a
);

1557 
ïDesc
 = 
	`afFödEndPoötDesc
–
pkt
->
ídPoöt
 );

1558 i‡–
ïDesc
 =
NULL
 )

1563 i‡––
ïDesc
->
sim∂eDesc
 =
NULL
 ) ||

1564 –
	`z˛_Devi˚O≥øti⁄Æ
–
pkt
->
ídPoöt
,Ökt->
˛u°îId
, 
öMsg
.
hdr
.
fc
.
ty≥
,

1565 
öMsg
.
hdr
.
comm™dID
, 
ïDesc
->
sim∂eDesc
->
AµProfId
 ) =
FALSE
 ) )

1570 #i‡
	`deföed
 ( 
INTER_PAN
 )

1571 i‡–
	`StubAPS_I¡îP™
–
pkt
->
§cAddr
.
∑nId
,Ökt->§cAddr.
ídPoöt
 ) )

1577 i‡–!
	`ZCL_CLUSTER_ID_SL
–
pkt
->
˛u°îId
 ) && 
	`z˛_ProfûeCmd
–
öMsg
.
hdr
.
fc
.
ty≥
 ) )

1582 
öãrP™Msg
 = 
TRUE
;

1583 
›ti⁄s
 = 
AF_TX_OPTIONS_NONE
;

1588 
öãrP™Msg
 = 
FALSE
;

1589 
›ti⁄s
 = 
	`z˛GëClu°îO±i⁄
–
pkt
->
ídPoöt
,Ökt->
˛u°îId
 );

1593 
pInPlugö
 = 
	`z˛FödPlugö
–
pkt
->
˛u°îId
, 
ïDesc
->
sim∂eDesc
->
AµProfId
 );

1596 i‡––
pInPlugö
 !
NULL
 ) && !
	`z˛_DeÁu…R•Cmd
–
öMsg
.
hdr
 ) )

1598 
£curôyE«bÀ
 = ( 
›ti⁄s
 & 
AF_EN_SECURITY
 ) ? 
TRUE
 : 
FALSE
;

1599 i‡–
pkt
->
SecurôyU£
 !
£curôyE«bÀ
 )

1601 i‡–
	`UNICAST_MSG
–
öMsg
.
msg
 ) )

1604 i‡–
£curôyE«bÀ
 )

1606 
	`z˛SëSecurôyO±i⁄
–
pkt
->
ídPoöt
,Ökt->
˛u°îId
, 
FALSE
 );

1609 
deÁuéR•Cmd
.
°©usCode
 = 
°©us
;

1610 
deÁuéR•Cmd
.
comm™dID
 = 
öMsg
.
hdr
.commandID;

1611 
	`z˛_SídDeÁu…R•Cmd
–
öMsg
.
msg
->
ídPoöt
, &(öMsg.msg->
§cAddr
),

1612 
öMsg
.
msg
->
˛u°îId
, &
deÁuéR•Cmd
,

1613 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
åue
,

1614 
öMsg
.
hdr
.
m™uCode
, inMsg.hdr.
å™sSeqNum
 );

1615 i‡–
£curôyE«bÀ
 )

1617 
	`z˛SëSecurôyO±i⁄
–
pkt
->
ídPoöt
,Ökt->
˛u°îId
, 
TRUE
 );

1626 i‡–!
öãrP™Msg
 && 
	`z˛_ProfûeCmd
–
öMsg
.
hdr
.
fc
.
ty≥
 ) )

1628 i‡–
öMsg
.
hdr
.
fc
.
m™uS≥cific
 )

1631 
°©us
 = 
ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND
;

1633 i‡––
öMsg
.
hdr
.
comm™dID
 <
ZCL_CMD_MAX
 ) &&

1634 –
z˛CmdTabÀ
[
öMsg
.
hdr
.
comm™dID
].
p‚P¨£InProfûe
 !
NULL
 ) )

1636 
z˛P¨£Cmd_t
 
∑r£Cmd
;

1638 
∑r£Cmd
.
ídpoöt
 = 
pkt
->
ídPoöt
;

1639 
∑r£Cmd
.
d©aLí
 = 
öMsg
.
pD©aLí
;

1640 
∑r£Cmd
.
pD©a
 = 
öMsg
.pData;

1643 
öMsg
.
©åCmd
 = 
	`z˛P¨£Cmd
–öMsg.
hdr
.
comm™dID
, &
∑r£Cmd
 );

1644 i‡–(
öMsg
.
©åCmd
 !
NULL
Ë&& (
z˛CmdTabÀ
[öMsg.
hdr
.
comm™dID
].
p‚Pro˚ssInProfûe
 != NULL) )

1647 i‡–
	`z˛Pro˚ssCmd
–
öMsg
.
hdr
.
comm™dID
, &öMsg ) =
FALSE
 )

1654 i‡–
öMsg
.
©åCmd
 )

1656 
	`oßl_mem_‰ì
–
öMsg
.
©åCmd
 );

1659 i‡–
	`CMD_HAS_RSP
–
öMsg
.
hdr
.
comm™dID
 ) )

1664 
°©us
 = 
ZSuc˚ss
;

1669 
°©us
 = 
ZCL_STATUS_UNSUP_GENERAL_COMMAND
;

1674 i‡–
pInPlugö
 &&ÖInPlugö->
p‚IncomögHdÃ
 )

1683 
°©us
 = 
pInPlugö
->
	`p‚IncomögHdÃ
–&
öMsg
 );

1684 i‡–
°©us
 =
ZCL_STATUS_CMD_HAS_RSP
 || ( 
öãrP™Msg
 && sètu†=
ZSuc˚ss
 ) )

1690 i‡–
°©us
 =
ZFaûuª
 )

1693 i‡–
öMsg
.
hdr
.
fc
.
m™uS≥cific
 )

1695 
°©us
 = 
ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND
;

1699 
°©us
 = 
ZCL_STATUS_UNSUP_CLUSTER_COMMAND
;

1704 i‡–
	`UNICAST_MSG
–
öMsg
.
msg
 ) && inMsg.
hdr
.
fc
.
dißbÀDeÁu…R•
 == 0 )

1707 
deÁuéR•Cmd
.
°©usCode
 = 
°©us
;

1708 
deÁuéR•Cmd
.
comm™dID
 = 
öMsg
.
hdr
.commandID;

1709 
	`z˛_SídDeÁu…R•Cmd
–
öMsg
.
msg
->
ídPoöt
, &(öMsg.msg->
§cAddr
),

1710 
öMsg
.
msg
->
˛u°îId
, &
deÁuéR•Cmd
,

1711 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
åue
,

1712 
öMsg
.
hdr
.
m™uCode
, inMsg.hdr.
å™sSeqNum
 );

1714 
	}
}

1726 
uöt8
 *
	$z˛P¨£Hdr
–
z˛FømeHdr_t
 *
hdr
, 
uöt8
 *
pD©a
 )

1729 
	`oßl_mem£t
–(
uöt8
 *)
hdr
, 0,  ( 
z˛FømeHdr_t
 ) );

1732 
hdr
->
fc
.
ty≥
 = 
	`z˛_FCTy≥
–*
pD©a
 );

1733 
hdr
->
fc
.
m™uS≥cific
 = 
	`z˛_FCM™uS≥cific
–*
pD©a
 ) ? 1 : 0;

1734 i‡–
	`z˛_FCDúe˘i⁄
–*
pD©a
 ) )

1736 
hdr
->
fc
.
dúe˘i⁄
 = 
ZCL_FRAME_SERVER_CLIENT_DIR
;

1740 
hdr
->
fc
.
dúe˘i⁄
 = 
ZCL_FRAME_CLIENT_SERVER_DIR
;

1743 
hdr
->
fc
.
dißbÀDeÁu…R•
 = 
	`z˛_FCDißbÀDeÁu…R•
–*
pD©a
 ) ? 1 : 0;

1744 
pD©a
++;

1747 i‡–
hdr
->
fc
.
m™uS≥cific
 )

1749 
hdr
->
m™uCode
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

1750 
pD©a
 += 2;

1754 
hdr
->
å™sSeqNum
 = *
pD©a
++;

1757 
hdr
->
comm™dID
 = *
pD©a
++;

1760  ( 
pD©a
 );

1761 
	}
}

1773 
uöt8
 *
	$z˛BuûdHdr
–
z˛FømeHdr_t
 *
hdr
, 
uöt8
 *
pD©a
 )

1776 *
pD©a
 = 
hdr
->
fc
.
ty≥
;

1777 *
pD©a
 |
hdr
->
fc
.
m™uS≥cific
 << 2;

1778 *
pD©a
 |
hdr
->
fc
.
dúe˘i⁄
 << 3;

1779 *
pD©a
 |
hdr
->
fc
.
dißbÀDeÁu…R•
 << 4;

1780 
pD©a
++;

1783 i‡–
hdr
->
fc
.
m™uS≥cific
 )

1785 *
pD©a
++ = 
	`LO_UINT16
–
hdr
->
m™uCode
 );

1786 *
pD©a
++ = 
	`HI_UINT16
–
hdr
->
m™uCode
 );

1790 *
pD©a
++ = 
hdr
->
å™sSeqNum
;

1793 *
pD©a
++ = 
hdr
->
comm™dID
;

1796  ( 
pD©a
 );

1797 
	}
}

1809 
uöt8
 
	$z˛CÆcHdrSize
–
z˛FømeHdr_t
 *
hdr
 )

1811 
uöt8
 
√eded
 = (1 + 1 + 1);

1814 i‡–
hdr
->
fc
.
m™uS≥cific
 )

1816 
√eded
 += 2;

1819  ( 
√eded
 );

1820 
	}
}

1832 
z˛LibPlugö_t
 *
	$z˛FödPlugö
–
uöt16
 
˛u°îID
, uöt16 
¥ofûeID
 )

1834 ()
¥ofûeID
;

1836 
z˛LibPlugö_t
 *
pLo›
 = 
∂ugös
;

1838  
pLo›
 !
NULL
 )

1840 i‡––
˛u°îID
 >
pLo›
->
°¨tClu°îID
 ) && ( clu°îID <pLo›->
ídClu°îID
 ) )

1842  ( 
pLo›
 );

1845 
pLo›
 =ÖLo›->
√xt
;

1848  ( (
z˛LibPlugö_t
 *)
NULL
 );

1849 
	}
}

1860 
z˛AârRecsLi°
 *
	$z˛FödAârRecsLi°
–
uöt8
 
ídpoöt
 )

1862 
z˛AârRecsLi°
 *
pLo›
 = 
©åLi°
;

1864  
pLo›
 !
NULL
 )

1866 i‡–
pLo›
->
ídpoöt
 ==Éndpoint )

1868  ( 
pLo›
 );

1871 
pLo›
 =ÖLo›->
√xt
;

1874  ( 
NULL
 );

1875 
	}
}

1889 
uöt8
 
	$z˛FödAârRec
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
, uöt16 
©åId
, 
z˛AârRec_t
 *
pAâr
 )

1891 
uöt8
 
x
;

1892 
z˛AârRecsLi°
 *
pRec
 = 
	`z˛FödAârRecsLi°
–
ídpoöt
 );

1894 i‡–
pRec
 !
NULL
 )

1896  
x
 = 0; x < 
pRec
->
numAâribuãs
; x++ )

1898 i‡–
pRec
->
©ås
[
x
].
˛u°îID
 =˛u°îID &&ÖRec->©ås[x].
©å
.
©åId
 ==áttrId )

1900 *
pAâr
 = 
pRec
->
©ås
[
x
];

1902  ( 
TRUE
 );

1907  ( 
FALSE
 );

1908 
	}
}

1910 #i‡
deföed
 ( 
ZCL_READ
 ) || deföed ( 
ZCL_WRITE
 )

1920 
z˛RódWrôeCB_t
 
	$z˛GëRódWrôeCB
–
uöt8
 
ídpoöt
 )

1922 
z˛AârRecsLi°
 *
pRec
 = 
	`z˛FödAârRecsLi°
–
ídpoöt
 );

1924 i‡–
pRec
 !
NULL
 )

1926  ( 
pRec
->
p‚RódWrôeCB
 );

1929  ( 
NULL
 );

1930 
	}
}

1942 
z˛Auth‹izeCB_t
 
	$z˛GëAuth‹izeCB
–
uöt8
 
ídpoöt
 )

1944 
z˛AârRecsLi°
 *
pRec
 = 
	`z˛FödAârRecsLi°
–
ídpoöt
 );

1946 i‡–
pRec
 !
NULL
 )

1948  ( 
pRec
->
p‚Auth‹izeCB
 );

1951  ( 
NULL
 );

1952 
	}
}

1965 
z˛O±i⁄Rec_t
 *
	$z˛FödClu°îO±i⁄
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
 )

1967 
z˛Clu°îO±i⁄Li°
 *
pLo›
;

1969 
pLo›
 = 
˛u°îO±i⁄Li°
;

1970  
pLo›
 !
NULL
 )

1972 i‡–
pLo›
->
ídpoöt
 ==Éndpoint )

1974  
uöt8
 
x
 = 0; x < 
pLo›
->
numO±i⁄s
; x++ )

1976 i‡–
pLo›
->
›ti⁄s
[
x
].
˛u°îID
 == clusterID )

1978  ( &(
pLo›
->
›ti⁄s
[
x
]) );

1983 
pLo›
 =ÖLo›->
√xt
;

1986  ( 
NULL
 );

1987 
	}
}

1999 
uöt8
 
	$z˛GëClu°îO±i⁄
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
 )

2001 
uöt8
 
›ti⁄
;

2002 
z˛O±i⁄Rec_t
 *
pO±i⁄
;

2004 
pO±i⁄
 = 
	`z˛FödClu°îO±i⁄
–
ídpoöt
, 
˛u°îID
 );

2005 i‡–
pO±i⁄
 !
NULL
 )

2007 
›ti⁄
 = 
pO±i⁄
->option;

2008 i‡–!
ZG_SECURE_ENABLED
 )

2010 
›ti⁄
 &(
AF_EN_SECURITY
 ^ 0xFF);

2013  ( 
›ti⁄
 );

2016  ( 
AF_TX_OPTIONS_NONE
 );

2017 
	}
}

2030 
	$z˛SëSecurôyO±i⁄
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
, uöt8 
íabÀ
 )

2032 
z˛O±i⁄Rec_t
 *
pO±i⁄
;

2034 
pO±i⁄
 = 
	`z˛FödClu°îO±i⁄
–
ídpoöt
, 
˛u°îID
 );

2035 i‡–
pO±i⁄
 !
NULL
 )

2037 i‡–
íabÀ
 )

2039 
pO±i⁄
->
›ti⁄
 |
AF_EN_SECURITY
;

2043 
pO±i⁄
->
›ti⁄
 &(
AF_EN_SECURITY
 ^ 0xFF);

2046 
	}
}

2048 #ifde‡
ZCL_DISCOVER


2060 
uöt8
 
	$z˛FödNextAârRec
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
,

2061 
uöt16
 *
©åId
, 
z˛AârRec_t
 *
pAâr
 )

2063 
z˛AârRecsLi°
 *
pRec
 = 
	`z˛FödAârRecsLi°
–
ídpoöt
 );

2065 i‡–
pRec
 !
NULL
 )

2067  
uöt16
 
x
 = 0; x < 
pRec
->
numAâribuãs
; x++ )

2069 i‡––
pRec
->
©ås
[
x
].
˛u°îID
 == clusterID ) &&

2070 –
pRec
->
©ås
[
x
].
©å
.
©åId
 >= *attrId ) )

2072 *
pAâr
 = 
pRec
->
©ås
[
x
];

2075 *
©åId
 = 
pAâr
->
©å
.attrId;

2077  ( 
TRUE
 );

2082  ( 
FALSE
 );

2083 
	}
}

2098 
uöt8
 *
	$z˛SîülizeD©a
–
uöt8
 
d©aTy≥
, *
©åD©a
, uöt8 *
buf
 )

2100 
uöt8
 *
pSå
;

2101 
uöt16
 
Àn
;

2103  
d©aTy≥
 )

2105 
ZCL_DATATYPE_DATA8
:

2106 
ZCL_DATATYPE_BOOLEAN
:

2107 
ZCL_DATATYPE_BITMAP8
:

2108 
ZCL_DATATYPE_INT8
:

2109 
ZCL_DATATYPE_UINT8
:

2110 
ZCL_DATATYPE_ENUM8
:

2111 *
buf
++ = *((
uöt8
 *)
©åD©a
);

2114 
ZCL_DATATYPE_DATA16
:

2115 
ZCL_DATATYPE_BITMAP16
:

2116 
ZCL_DATATYPE_UINT16
:

2117 
ZCL_DATATYPE_INT16
:

2118 
ZCL_DATATYPE_ENUM16
:

2119 
ZCL_DATATYPE_SEMI_PREC
:

2120 
ZCL_DATATYPE_CLUSTER_ID
:

2121 
ZCL_DATATYPE_ATTR_ID
:

2122 *
buf
++ = 
	`LO_UINT16
–*((
uöt16
*)
©åD©a
) );

2123 *
buf
++ = 
	`HI_UINT16
–*((
uöt16
*)
©åD©a
) );

2126 
ZCL_DATATYPE_DATA24
:

2127 
ZCL_DATATYPE_BITMAP24
:

2128 
ZCL_DATATYPE_UINT24
:

2129 
ZCL_DATATYPE_INT24
:

2130 *
buf
++ = 
	`BREAK_UINT32
–*((
uöt32
*)
©åD©a
), 0 );

2131 *
buf
++ = 
	`BREAK_UINT32
–*((
uöt32
*)
©åD©a
), 1 );

2132 *
buf
++ = 
	`BREAK_UINT32
–*((
uöt32
*)
©åD©a
), 2 );

2135 
ZCL_DATATYPE_DATA32
:

2136 
ZCL_DATATYPE_BITMAP32
:

2137 
ZCL_DATATYPE_UINT32
:

2138 
ZCL_DATATYPE_INT32
:

2139 
ZCL_DATATYPE_SINGLE_PREC
:

2140 
ZCL_DATATYPE_TOD
:

2141 
ZCL_DATATYPE_DATE
:

2142 
ZCL_DATATYPE_UTC
:

2143 
ZCL_DATATYPE_BAC_OID
:

2144 
buf
 = 
	`oßl_buf„r_uöt32
–buf, *((
uöt32
*)
©åD©a
) );

2147 
ZCL_DATATYPE_UINT40
:

2148 
pSå
 = (
uöt8
*)
©åD©a
;

2149 
buf
 = 
	`oßl_mem˝y
–buf, 
pSå
, 5 );

2152 
ZCL_DATATYPE_UINT48
:

2153 
pSå
 = (
uöt8
*)
©åD©a
;

2154 
buf
 = 
	`oßl_mem˝y
–buf, 
pSå
, 6 );

2157 
ZCL_DATATYPE_IEEE_ADDR
:

2158 
pSå
 = (
uöt8
*)
©åD©a
;

2159 
buf
 = 
	`oßl_mem˝y
–buf, 
pSå
, 8 );

2162 
ZCL_DATATYPE_CHAR_STR
:

2163 
ZCL_DATATYPE_OCTET_STR
:

2164 
pSå
 = (
uöt8
*)
©åD©a
;

2165 
Àn
 = *
pSå
;

2166 
buf
 = 
	`oßl_mem˝y
–buf, 
pSå
, 
Àn
+1 );

2169 
ZCL_DATATYPE_LONG_CHAR_STR
:

2170 
ZCL_DATATYPE_LONG_OCTET_STR
:

2171 
pSå
 = (
uöt8
*)
©åD©a
;

2172 
Àn
 = 
	`BUILD_UINT16
–
pSå
[0],ÖStr[1] );

2173 
buf
 = 
	`oßl_mem˝y
–buf, 
pSå
, 
Àn
+2 );

2176 
ZCL_DATATYPE_128_BIT_SEC_KEY
:

2177 
pSå
 = (
uöt8
*)
©åD©a
;

2178 
buf
 = 
	`oßl_mem˝y
–buf, 
pSå
, 
SEC_KEY_LEN
 );

2181 
ZCL_DATATYPE_NO_DATA
:

2182 
ZCL_DATATYPE_UNKNOWN
:

2189  ( 
buf
 );

2190 
	}
}

2192 #ifde‡
ZCL_REPORT


2202 
uöt8
 
	$z˛A«logD©aTy≥
–
uöt8
 
d©aTy≥
 )

2204 
uöt8
 
™Æog
;

2206  
d©aTy≥
 )

2208 
ZCL_DATATYPE_UINT8
:

2209 
ZCL_DATATYPE_UINT16
:

2210 
ZCL_DATATYPE_UINT24
:

2211 
ZCL_DATATYPE_UINT32
:

2212 
ZCL_DATATYPE_UINT40
:

2213 
ZCL_DATATYPE_UINT48
:

2214 
ZCL_DATATYPE_UINT56
:

2215 
ZCL_DATATYPE_UINT64
:

2216 
ZCL_DATATYPE_INT8
:

2217 
ZCL_DATATYPE_INT16
:

2218 
ZCL_DATATYPE_INT24
:

2219 
ZCL_DATATYPE_INT32
:

2220 
ZCL_DATATYPE_INT40
:

2221 
ZCL_DATATYPE_INT48
:

2222 
ZCL_DATATYPE_INT56
:

2223 
ZCL_DATATYPE_INT64
:

2224 
ZCL_DATATYPE_SEMI_PREC
:

2225 
ZCL_DATATYPE_SINGLE_PREC
:

2226 
ZCL_DATATYPE_DOUBLE_PREC
:

2227 
ZCL_DATATYPE_TOD
:

2228 
ZCL_DATATYPE_DATE
:

2229 
ZCL_DATATYPE_UTC
:

2230 
™Æog
 = 
TRUE
;

2234 
™Æog
 = 
FALSE
;

2238  ( 
™Æog
 );

2239 
	}
}

2252 
	$z˛_BuûdA«logD©a
–
uöt8
 
d©aTy≥
, uöt8 *
pD©a
, uöt8 *
pBuf
)

2254  
d©aTy≥
 )

2256 
ZCL_DATATYPE_UINT8
:

2257 
ZCL_DATATYPE_INT8
:

2258 *
pD©a
 = *
pBuf
;

2261 
ZCL_DATATYPE_UINT16
:

2262 
ZCL_DATATYPE_INT16
:

2263 
ZCL_DATATYPE_SEMI_PREC
:

2264 *((
uöt16
*)
pD©a
Ë
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2267 
ZCL_DATATYPE_UINT24
:

2268 
ZCL_DATATYPE_INT24
:

2269 *((
uöt32
*)
pD©a
Ë
	`oßl_buûd_uöt32
–
pBuf
, 3 );

2272 
ZCL_DATATYPE_UINT32
:

2273 
ZCL_DATATYPE_INT32
:

2274 
ZCL_DATATYPE_SINGLE_PREC
:

2275 
ZCL_DATATYPE_TOD
:

2276 
ZCL_DATATYPE_DATE
:

2277 
ZCL_DATATYPE_UTC
:

2278 *((
uöt32
*)
pD©a
Ë
	`oßl_buûd_uöt32
–
pBuf
, 4 );

2281 
ZCL_DATATYPE_UINT40
:

2282 
ZCL_DATATYPE_UINT48
:

2283 
ZCL_DATATYPE_UINT56
:

2284 
ZCL_DATATYPE_UINT64
:

2285 
ZCL_DATATYPE_INT40
:

2286 
ZCL_DATATYPE_INT48
:

2287 
ZCL_DATATYPE_INT56
:

2288 
ZCL_DATATYPE_INT64
:

2289 
ZCL_DATATYPE_DOUBLE_PREC
:

2290 *
pD©a
 = 0;

2294 *
pD©a
 = 0;

2297 
	}
}

2312 
uöt8
 
	$z˛GëD©aTy≥Lígth
–
uöt8
 
d©aTy≥
 )

2314 
uöt8
 
Àn
;

2316  
d©aTy≥
 )

2318 
ZCL_DATATYPE_DATA8
:

2319 
ZCL_DATATYPE_BOOLEAN
:

2320 
ZCL_DATATYPE_BITMAP8
:

2321 
ZCL_DATATYPE_INT8
:

2322 
ZCL_DATATYPE_UINT8
:

2323 
ZCL_DATATYPE_ENUM8
:

2324 
Àn
 = 1;

2327 
ZCL_DATATYPE_DATA16
:

2328 
ZCL_DATATYPE_BITMAP16
:

2329 
ZCL_DATATYPE_UINT16
:

2330 
ZCL_DATATYPE_INT16
:

2331 
ZCL_DATATYPE_ENUM16
:

2332 
ZCL_DATATYPE_SEMI_PREC
:

2333 
ZCL_DATATYPE_CLUSTER_ID
:

2334 
ZCL_DATATYPE_ATTR_ID
:

2335 
Àn
 = 2;

2338 
ZCL_DATATYPE_DATA24
:

2339 
ZCL_DATATYPE_BITMAP24
:

2340 
ZCL_DATATYPE_UINT24
:

2341 
ZCL_DATATYPE_INT24
:

2342 
Àn
 = 3;

2345 
ZCL_DATATYPE_DATA32
:

2346 
ZCL_DATATYPE_BITMAP32
:

2347 
ZCL_DATATYPE_UINT32
:

2348 
ZCL_DATATYPE_INT32
:

2349 
ZCL_DATATYPE_SINGLE_PREC
:

2350 
ZCL_DATATYPE_TOD
:

2351 
ZCL_DATATYPE_DATE
:

2352 
ZCL_DATATYPE_UTC
:

2353 
ZCL_DATATYPE_BAC_OID
:

2354 
Àn
 = 4;

2357 
ZCL_DATATYPE_UINT40
:

2358 
ZCL_DATATYPE_INT40
:

2359 
Àn
 = 5;

2362 
ZCL_DATATYPE_UINT48
:

2363 
ZCL_DATATYPE_INT48
:

2364 
Àn
 = 6;

2367 
ZCL_DATATYPE_UINT56
:

2368 
ZCL_DATATYPE_INT56
:

2369 
Àn
 = 7;

2372 
ZCL_DATATYPE_DOUBLE_PREC
:

2373 
ZCL_DATATYPE_IEEE_ADDR
:

2374 
ZCL_DATATYPE_UINT64
:

2375 
ZCL_DATATYPE_INT64
:

2376 
Àn
 = 8;

2379 
ZCL_DATATYPE_128_BIT_SEC_KEY
:

2380 
Àn
 = 
SEC_KEY_LEN
;

2383 
ZCL_DATATYPE_NO_DATA
:

2384 
ZCL_DATATYPE_UNKNOWN
:

2388 
Àn
 = 0;

2392  ( 
Àn
 );

2393 
	}
}

2405 
uöt16
 
	$z˛GëAârD©aLígth
–
uöt8
 
d©aTy≥
, uöt8 *
pD©a
 )

2407 
uöt16
 
d©aLí
 = 0;

2409 i‡–
d©aTy≥
 =
ZCL_DATATYPE_LONG_CHAR_STR
 || d©aTy≥ =
ZCL_DATATYPE_LONG_OCTET_STR
 )

2411 
d©aLí
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] ) + 2;

2413 i‡–
d©aTy≥
 =
ZCL_DATATYPE_CHAR_STR
 || d©aTy≥ =
ZCL_DATATYPE_OCTET_STR
 )

2415 
d©aLí
 = *
pD©a
 + 1;

2419 
d©aLí
 = 
	`z˛GëD©aTy≥Lígth
–
d©aTy≥
 );

2422  ( 
d©aLí
 );

2423 
	}
}

2436 
uöt8
 
	$z˛RódAârD©a
–
uöt8
 *
pAârD©a
, 
z˛AârRec_t
 *
pAâr
, 
uöt16
 *
pD©aLí
 )

2438 
uöt16
 
d©aLí
;

2440 
d©aLí
 = 
	`z˛GëAârD©aLígth
–
pAâr
->
©å
.
d©aTy≥
, (
uöt8
*)’Aâr->©å.
d©aPå
) );

2441 
	`oßl_mem˝y
–
pAârD©a
, 
pAâr
->
©å
.
d©aPå
, 
d©aLí
 );

2443 i‡–
pD©aLí
 !
NULL
 )

2445 *
pD©aLí
 = 
d©aLí
;

2448  ( 
ZCL_STATUS_SUCCESS
 );

2449 
	}
}

2451 #ifde‡
ZCL_READ


2464 
uöt16
 
	$z˛GëAârD©aLígthUsögCB
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îId
, uöt16 
©åId
 )

2466 
uöt16
 
d©aLí
 = 0;

2467 
z˛RódWrôeCB_t
 
p‚RódWrôeCB
 = 
	`z˛GëRódWrôeCB
–
ídpoöt
 );

2469 i‡–
p‚RódWrôeCB
 !
NULL
 )

2472 (*
p‚RódWrôeCB
)–
˛u°îId
, 
©åId
, 
ZCL_OPER_LEN
, 
NULL
, &
d©aLí
 );

2475  ( 
d©aLí
 );

2476 
	}
}

2492 
ZSètus_t
 
	$z˛RódAârD©aUsögCB
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îId
, uöt16 
©åId
,

2493 
uöt8
 *
pAârD©a
, 
uöt16
 *
pD©aLí
 )

2495 
z˛RódWrôeCB_t
 
p‚RódWrôeCB
 = 
	`z˛GëRódWrôeCB
–
ídpoöt
 );

2497 i‡–
pD©aLí
 !
NULL
 )

2499 *
pD©aLí
 = 0;

2502 i‡–
p‚RódWrôeCB
 !
NULL
 )

2505  ( (*
p‚RódWrôeCB
)–
˛u°îId
, 
©åId
, 
ZCL_OPER_READ
, 
pAârD©a
, 
pD©aLí
 ) );

2508  ( 
ZCL_STATUS_SOFTWARE_FAILURE
 );

2509 
	}
}

2524 
ZSètus_t
 
	$z˛Auth‹izeRód
–
uöt8
 
ídpoöt
, 
afAddrTy≥_t
 *
§cAddr
, 
z˛AârRec_t
 *
pAâr
 )

2526 i‡–
	`z˛_Ac˚ssCålAuthRód
–
pAâr
->
©å
.
ac˚ssC⁄åﬁ
 ) )

2528 
z˛Auth‹izeCB_t
 
p‚Auth‹izeCB
 = 
	`z˛GëAuth‹izeCB
–
ídpoöt
 );

2530 i‡–
p‚Auth‹izeCB
 !
NULL
 )

2532  ( (*
p‚Auth‹izeCB
)–
§cAddr
, 
pAâr
, 
ZCL_OPER_READ
 ) );

2536  ( 
ZCL_STATUS_SUCCESS
 );

2537 
	}
}

2540 #ifde‡
ZCL_WRITE


2552 
ZSètus_t
 
	$z˛WrôeAârD©a
–
uöt8
 
ídpoöt
, 
afAddrTy≥_t
 *
§cAddr
,

2553 
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pWrôeRec
 )

2555 
uöt8
 
°©us
;

2557 i‡–
	`z˛_Ac˚ssCålWrôe
–
pAâr
->
©å
.
ac˚ssC⁄åﬁ
 ) )

2559 
°©us
 = 
	`z˛Auth‹izeWrôe
–
ídpoöt
, 
§cAddr
, 
pAâr
 );

2560 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

2562 i‡––
z˛_VÆid©eAârD©aCB
 =
NULL
 ) || 
	`z˛_VÆid©eAârD©aCB
–
pAâr
, 
pWrôeRec
 ) )

2565 
uöt16
 
Àn
 = 
	`z˛GëAârD©aLígth
–
pAâr
->
©å
.
d©aTy≥
, 
pWrôeRec
->
©åD©a
 );

2566 
	`oßl_mem˝y
–
pAâr
->
©å
.
d©aPå
, 
pWrôeRec
->
©åD©a
, 
Àn
 );

2568 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2572 
°©us
 = 
ZCL_STATUS_INVALID_VALUE
;

2578 
°©us
 = 
ZCL_STATUS_READ_ONLY
;

2581  ( 
°©us
 );

2582 
	}
}

2596 
ZSètus_t
 
	$z˛WrôeAârD©aUsögCB
–
uöt8
 
ídpoöt
, 
afAddrTy≥_t
 *
§cAddr
,

2597 
z˛AârRec_t
 *
pAâr
, 
uöt8
 *
pAârD©a
 )

2599 
uöt8
 
°©us
;

2601 i‡–
	`z˛_Ac˚ssCålWrôe
–
pAâr
->
©å
.
ac˚ssC⁄åﬁ
 ) )

2603 
°©us
 = 
	`z˛Auth‹izeWrôe
–
ídpoöt
, 
§cAddr
, 
pAâr
 );

2604 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

2606 
z˛RódWrôeCB_t
 
p‚RódWrôeCB
 = 
	`z˛GëRódWrôeCB
–
ídpoöt
 );

2607 i‡–
p‚RódWrôeCB
 !
NULL
 )

2610 
°©us
 = (*
p‚RódWrôeCB
)–
pAâr
->
˛u°îID
,ÖAâr->
©å
.
©åId
,

2611 
ZCL_OPER_WRITE
, 
pAârD©a
, 
NULL
 );

2615 
°©us
 = 
ZCL_STATUS_SOFTWARE_FAILURE
;

2621 
°©us
 = 
ZCL_STATUS_READ_ONLY
;

2624  ( 
°©us
 );

2625 
	}
}

2640 
ZSètus_t
 
	$z˛Auth‹izeWrôe
–
uöt8
 
ídpoöt
, 
afAddrTy≥_t
 *
§cAddr
, 
z˛AârRec_t
 *
pAâr
 )

2642 i‡–
	`z˛_Ac˚ssCålAuthWrôe
–
pAâr
->
©å
.
ac˚ssC⁄åﬁ
 ) )

2644 
z˛Auth‹izeCB_t
 
p‚Auth‹izeCB
 = 
	`z˛GëAuth‹izeCB
–
ídpoöt
 );

2646 i‡–
p‚Auth‹izeCB
 !
NULL
 )

2648  ( (*
p‚Auth‹izeCB
)–
§cAddr
, 
pAâr
, 
ZCL_OPER_WRITE
 ) );

2652  ( 
ZCL_STATUS_SUCCESS
 );

2653 
	}
}

2656 #ifde‡
ZCL_READ


2669 *
	$z˛P¨£InRódCmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2671 
z˛RódCmd_t
 *
ªadCmd
;

2672 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2674 
ªadCmd
 = (
z˛RódCmd_t
 *)
	`oßl_mem_Æloc
– ( z˛RódCmd_àË+ 
pCmd
->
d©aLí
 );

2675 i‡–
ªadCmd
 !
NULL
 )

2677 
ªadCmd
->
numAâr
 = 
pCmd
->
d©aLí
 / 2;

2678  
uöt8
 
i
 = 0; i < 
ªadCmd
->
numAâr
; i++ )

2680 
ªadCmd
->
©åID
[
i
] = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2681 
pBuf
 += 2;

2685  ( (*)
ªadCmd
 );

2686 
	}
}

2700 *
	$z˛P¨£InRódR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2702 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

2703 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2704 
uöt8
 *
d©aPå
;

2705 
uöt8
 
numAâr
 = 0;

2706 
uöt8
 
hdrLí
;

2707 
uöt16
 
d©aLí
 = 0;

2708 
uöt16
 
©åD©aLí
;

2711  
pBuf
 < ( 
pCmd
->
pD©a
 +ÖCmd->
d©aLí
 ) )

2713 
uöt8
 
°©us
;

2715 
numAâr
++;

2716 
pBuf
 += 2;

2718 
°©us
 = *
pBuf
++;

2719 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

2721 
uöt8
 
d©aTy≥
 = *
pBuf
++;

2723 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
d©aTy≥
, 
pBuf
 );

2724 
pBuf
 +
©åD©aLí
;

2727 i‡–
	`PADDING_NEEDED
–
©åD©aLí
 ) )

2729 
©åD©aLí
++;

2732 
d©aLí
 +
©åD©aLí
;

2737 
hdrLí
 = –
z˛RódR•Cmd_t
 ) + ( 
numAâr
 * –
z˛RódR•Sètus_t
 ) );

2739 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
	`oßl_mem_Æloc
–
hdrLí
 + 
d©aLí
 );

2740 i‡–
ªadR•Cmd
 !
NULL
 )

2742 
pBuf
 = 
pCmd
->
pD©a
;

2743 
d©aPå
 = (
uöt8
 *)–(uöt8 *)
ªadR•Cmd
 + 
hdrLí
 );

2745 
ªadR•Cmd
->
numAâr
 =ÇumAttr;

2746  
uöt8
 
i
 = 0; i < 
numAâr
; i++ )

2748 
z˛RódR•Sètus_t
 *
°©usRec
 = &(
ªadR•Cmd
->
©åLi°
[
i
]);

2750 
°©usRec
->
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2751 
pBuf
 += 2;

2753 
°©usRec
->
°©us
 = *
pBuf
++;

2754 i‡–
°©usRec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

2756 
°©usRec
->
d©aTy≥
 = *
pBuf
++;

2758 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
°©usRec
->
d©aTy≥
, 
pBuf
 );

2759 
	`oßl_mem˝y
–
d©aPå
, 
pBuf
, 
©åD©aLí
);

2760 
°©usRec
->
d©a
 = 
d©aPå
;

2762 
pBuf
 +
©åD©aLí
;

2765 i‡–
	`PADDING_NEEDED
–
©åD©aLí
 ) )

2767 
©åD©aLí
++;

2770 
d©aPå
 +
©åD©aLí
;

2775  ( (*)
ªadR•Cmd
 );

2776 
	}
}

2779 #ifde‡
ZCL_WRITE


2793 *
	$z˛P¨£InWrôeCmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2795 
z˛WrôeCmd_t
 *
wrôeCmd
;

2796 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2797 
uöt16
 
©åD©aLí
;

2798 
uöt8
 *
d©aPå
;

2799 
uöt8
 
numAâr
 = 0;

2800 
uöt8
 
hdrLí
;

2801 
uöt16
 
d©aLí
 = 0;

2804  
pBuf
 < ( 
pCmd
->
pD©a
 +ÖCmd->
d©aLí
 ) )

2806 
uöt8
 
d©aTy≥
;

2808 
numAâr
++;

2809 
pBuf
 += 2;

2811 
d©aTy≥
 = *
pBuf
++;

2813 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
d©aTy≥
, 
pBuf
 );

2814 
pBuf
 +
©åD©aLí
;

2817 i‡–
	`PADDING_NEEDED
–
©åD©aLí
 ) )

2819 
©åD©aLí
++;

2822 
d©aLí
 +
©åD©aLí
;

2826 
hdrLí
 = –
z˛WrôeCmd_t
 ) + ( 
numAâr
 * –
z˛WrôeRec_t
 ) );

2828 
wrôeCmd
 = (
z˛WrôeCmd_t
 *)
	`oßl_mem_Æloc
–
hdrLí
 + 
d©aLí
 );

2829 i‡–
wrôeCmd
 !
NULL
 )

2831 
pBuf
 = 
pCmd
->
pD©a
;

2832 
d©aPå
 = (
uöt8
 *)–(uöt8 *)
wrôeCmd
 + 
hdrLí
 );

2834 
wrôeCmd
->
numAâr
 =ÇumAttr;

2835  
uöt8
 
i
 = 0; i < 
numAâr
; i++ )

2837 
z˛WrôeRec_t
 *
°©usRec
 = &(
wrôeCmd
->
©åLi°
[
i
]);

2839 
°©usRec
->
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2840 
pBuf
 += 2;

2841 
°©usRec
->
d©aTy≥
 = *
pBuf
++;

2843 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
°©usRec
->
d©aTy≥
, 
pBuf
 );

2844 
	`oßl_mem˝y
–
d©aPå
, 
pBuf
, 
©åD©aLí
);

2845 
°©usRec
->
©åD©a
 = 
d©aPå
;

2847 
pBuf
 +
©åD©aLí
;

2850 i‡–
	`PADDING_NEEDED
–
©åD©aLí
 ) )

2852 
©åD©aLí
++;

2855 
d©aPå
 +
©åD©aLí
;

2859  ( (*)
wrôeCmd
 );

2860 
	}
}

2874 *
	$z˛P¨£InWrôeR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2876 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

2877 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2878 
uöt8
 
i
 = 0;

2880 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
	`oßl_mem_Æloc
– ( z˛WrôeR•Cmd_àË+ 
pCmd
->
d©aLí
 );

2881 i‡–
wrôeR•Cmd
 !
NULL
 )

2883 i‡–
pCmd
->
d©aLí
 == 1 )

2886 
wrôeR•Cmd
->
©åLi°
[
i
++].
°©us
 = *
pBuf
;

2890  
pBuf
 < ( 
pCmd
->
pD©a
 +ÖCmd->
d©aLí
 ) )

2892 
wrôeR•Cmd
->
©åLi°
[
i
].
°©us
 = *
pBuf
++;

2893 
wrôeR•Cmd
->
©åLi°
[
i
++].
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2894 
pBuf
 += 2;

2898 
wrôeR•Cmd
->
numAâr
 = 
i
;

2901  ( (*)
wrôeR•Cmd
 );

2902 
	}
}

2905 #ifde‡
ZCL_REPORT


2918 *
	$z˛P¨£InC⁄figRï‹tCmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2920 
z˛CfgRï‹tCmd_t
 *
cfgRï‹tCmd
;

2921 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2922 
uöt8
 *
d©aPå
;

2923 
uöt8
 
numAâr
 = 0;

2924 
uöt8
 
d©aTy≥
;

2925 
uöt8
 
hdrLí
;

2926 
uöt16
 
d©aLí
 = 0;

2927 
uöt8
 
ªp‹tCh™geLí
;

2930  
pBuf
 < ( 
pCmd
->
pD©a
 +ÖCmd->
d©aLí
 ) )

2932 
uöt8
 
dúe˘i⁄
;

2934 
numAâr
++;

2935 
dúe˘i⁄
 = *
pBuf
++;

2936 
pBuf
 += 2;

2939 i‡–
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

2941 
d©aTy≥
 = *
pBuf
++;

2942 
pBuf
 += 4;

2945 i‡–
	`z˛A«logD©aTy≥
–
d©aTy≥
 ) )

2947 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
d©aTy≥
 );

2948 
pBuf
 +
ªp‹tCh™geLí
;

2951 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

2953 
ªp‹tCh™geLí
++;

2956 
d©aLí
 +
ªp‹tCh™geLí
;

2961 
pBuf
 += 2;

2965 
hdrLí
 = –
z˛CfgRï‹tCmd_t
 ) + ( 
numAâr
 * –
z˛CfgRï‹tRec_t
 ) );

2967 
cfgRï‹tCmd
 = (
z˛CfgRï‹tCmd_t
 *)
	`oßl_mem_Æloc
–
hdrLí
 + 
d©aLí
 );

2968 i‡–
cfgRï‹tCmd
 !
NULL
 )

2970 
pBuf
 = 
pCmd
->
pD©a
;

2971 
d©aPå
 = (
uöt8
 *)–(uöt8 *)
cfgRï‹tCmd
 + 
hdrLí
 );

2973 
cfgRï‹tCmd
->
numAâr
 =ÇumAttr;

2974  
uöt8
 
i
 = 0; i < 
numAâr
; i++ )

2976 
z˛CfgRï‹tRec_t
 *
ªp‹tRec
 = &(
cfgRï‹tCmd
->
©åLi°
[
i
]);

2978 
	`oßl_mem£t
–
ªp‹tRec
, 0, –
z˛CfgRï‹tRec_t
 ) );

2980 
ªp‹tRec
->
dúe˘i⁄
 = *
pBuf
++;

2981 
ªp‹tRec
->
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2982 
pBuf
 += 2;

2983 i‡–
ªp‹tRec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

2986 
ªp‹tRec
->
d©aTy≥
 = *
pBuf
++;

2987 
ªp‹tRec
->
möRï‹tI¡
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2988 
pBuf
 += 2;

2989 
ªp‹tRec
->
maxRï‹tI¡
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2990 
pBuf
 += 2;

2993 i‡–
	`z˛A«logD©aTy≥
–
ªp‹tRec
->
d©aTy≥
 ) )

2995 
	`z˛_BuûdA«logD©a
–
ªp‹tRec
->
d©aTy≥
, 
d©aPå
, 
pBuf
);

2996 
ªp‹tRec
->
ªp‹èbÀCh™ge
 = 
d©aPå
;

2998 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
ªp‹tRec
->
d©aTy≥
 );

2999 
pBuf
 +
ªp‹tCh™geLí
;

3002 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

3004 
ªp‹tCh™geLí
++;

3007 
d©aPå
 +
ªp‹tCh™geLí
;

3013 
ªp‹tRec
->
timeoutPîiod
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

3014 
pBuf
 += 2;

3019  ( (*)
cfgRï‹tCmd
 );

3020 
	}
}

3034 *
	$z˛P¨£InC⁄figRï‹tR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

3036 
z˛CfgRï‹tR•Cmd_t
 *
cfgRï‹tR•Cmd
;

3037 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

3038 
uöt8
 
numAâr
;

3040 
numAâr
 = 
pCmd
->
d©aLí
 / ( 1 + 1 + 2 );

3042 
cfgRï‹tR•Cmd
 = (
z˛CfgRï‹tR•Cmd_t
 *)
	`oßl_mem_Æloc
( ( zclCfgReportRspCmd_t )

3043 + ( 
numAâr
 * –
z˛CfgRï‹tSètus_t
 ) ) );

3044 i‡–
cfgRï‹tR•Cmd
 !
NULL
 )

3046 
cfgRï‹tR•Cmd
->
numAâr
 =ÇumAttr;

3047  
uöt8
 
i
 = 0; i < 
cfgRï‹tR•Cmd
->
numAâr
; i++ )

3049 
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
°©us
 = *
pBuf
++;

3050 
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
dúe˘i⁄
 = *
pBuf
++;

3051 
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

3052 
pBuf
 += 2;

3056  ( (*)
cfgRï‹tR•Cmd
 );

3057 
	}
}

3071 *
	$z˛P¨£InRódRï‹tCfgCmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

3073 
z˛RódRï‹tCfgCmd_t
 *
ªadRï‹tCfgCmd
;

3074 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

3075 
uöt8
 
numAâr
;

3077 
numAâr
 = 
pCmd
->
d©aLí
 / ( 1 + 2 );

3079 
ªadRï‹tCfgCmd
 = (
z˛RódRï‹tCfgCmd_t
 *)
	`oßl_mem_Æloc
( ( zclReadReportCfgCmd_t )

3080 + ( 
numAâr
 * –
z˛RódRï‹tCfgRec_t
 ) ) );

3081 i‡–
ªadRï‹tCfgCmd
 !
NULL
 )

3083 
ªadRï‹tCfgCmd
->
numAâr
 =ÇumAttr;

3084  
uöt8
 
i
 = 0; i < 
ªadRï‹tCfgCmd
->
numAâr
; i++)

3086 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
dúe˘i⁄
 = *
pBuf
++;;

3087 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

3088 
pBuf
 += 2;

3092  ( (*)
ªadRï‹tCfgCmd
 );

3093 
	}
}

3107 *
	$z˛P¨£InRódRï‹tCfgR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

3109 
z˛RódRï‹tCfgR•Cmd_t
 *
ªadRï‹tCfgR•Cmd
;

3110 
uöt8
 
ªp‹tCh™geLí
;

3111 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

3112 
uöt8
 *
d©aPå
;

3113 
uöt8
 
numAâr
 = 0;

3114 
uöt8
 
hdrLí
;

3115 
uöt16
 
d©aLí
 = 0;

3118  
pBuf
 < ( 
pCmd
->
pD©a
 +ÖCmd->
d©aLí
 ) )

3120 
uöt8
 
°©us
;

3121 
uöt8
 
dúe˘i⁄
;

3123 
numAâr
++;

3124 
°©us
 = *
pBuf
++;

3125 
dúe˘i⁄
 = *
pBuf
++;

3126 
pBuf
 += 2;

3128 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

3130 i‡–
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

3132 
uöt8
 
d©aTy≥
 = *
pBuf
++;

3133 
pBuf
 += 4;

3136 i‡–
	`z˛A«logD©aTy≥
–
d©aTy≥
 ) )

3138 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
d©aTy≥
 );

3139 
pBuf
 +
ªp‹tCh™geLí
;

3142 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

3144 
ªp‹tCh™geLí
++;

3147 
d©aLí
 +
ªp‹tCh™geLí
;

3152 
pBuf
 += 2;

3157 
hdrLí
 = –
z˛RódRï‹tCfgR•Cmd_t
 ) + ( 
numAâr
 * –
z˛Rï‹tCfgR•Rec_t
 ) );

3159 
ªadRï‹tCfgR•Cmd
 = (
z˛RódRï‹tCfgR•Cmd_t
 *)
	`oßl_mem_Æloc
–
hdrLí
 + 
d©aLí
 );

3160 i‡–
ªadRï‹tCfgR•Cmd
 !
NULL
 )

3162 
pBuf
 = 
pCmd
->
pD©a
;

3163 
d©aPå
 = (
uöt8
 *)–(uöt8 *)
ªadRï‹tCfgR•Cmd
 + 
hdrLí
 );

3165 
ªadRï‹tCfgR•Cmd
->
numAâr
 =ÇumAttr;

3166  
uöt8
 
i
 = 0; i < 
numAâr
; i++ )

3168 
z˛Rï‹tCfgR•Rec_t
 *
ªp‹tR•Rec
 = &(
ªadRï‹tCfgR•Cmd
->
©åLi°
[
i
]);

3170 
ªp‹tR•Rec
->
°©us
 = *
pBuf
++;

3171 
ªp‹tR•Rec
->
dúe˘i⁄
 = *
pBuf
++;

3172 
ªp‹tR•Rec
->
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

3173 
pBuf
 += 2;

3175 i‡–
ªp‹tR•Rec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

3177 i‡–
ªp‹tR•Rec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

3179 
ªp‹tR•Rec
->
d©aTy≥
 = *
pBuf
++;

3180 
ªp‹tR•Rec
->
möRï‹tI¡
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

3181 
pBuf
 += 2;

3182 
ªp‹tR•Rec
->
maxRï‹tI¡
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

3183 
pBuf
 += 2;

3185 i‡–
	`z˛A«logD©aTy≥
–
ªp‹tR•Rec
->
d©aTy≥
 ) )

3187 
	`z˛_BuûdA«logD©a
–
ªp‹tR•Rec
->
d©aTy≥
, 
d©aPå
, 
pBuf
);

3188 
ªp‹tR•Rec
->
ªp‹èbÀCh™ge
 = 
d©aPå
;

3190 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
ªp‹tR•Rec
->
d©aTy≥
 );

3191 
pBuf
 +
ªp‹tCh™geLí
;

3194 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

3196 
ªp‹tCh™geLí
++;

3199 
d©aPå
 +
ªp‹tCh™geLí
;

3204 
ªp‹tR•Rec
->
timeoutPîiod
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

3205 
pBuf
 += 2;

3211  ( (*)
ªadRï‹tCfgR•Cmd
 );

3212 
	}
}

3226 *
	$z˛P¨£InRï‹tCmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

3228 
z˛Rï‹tCmd_t
 *
ªp‹tCmd
;

3229 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

3230 
uöt16
 
©åD©aLí
;

3231 
uöt8
 *
d©aPå
;

3232 
uöt8
 
numAâr
 = 0;

3233 
uöt8
 
hdrLí
;

3234 
uöt16
 
d©aLí
 = 0;

3237  
pBuf
 < ( 
pCmd
->
pD©a
 +ÖCmd->
d©aLí
 ) )

3239 
uöt8
 
d©aTy≥
;

3241 
numAâr
++;

3242 
pBuf
 += 2;

3244 
d©aTy≥
 = *
pBuf
++;

3246 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
d©aTy≥
, 
pBuf
 );

3247 
pBuf
 +
©åD©aLí
;

3250 i‡–
	`PADDING_NEEDED
–
©åD©aLí
 ) )

3252 
©åD©aLí
++;

3255 
d©aLí
 +
©åD©aLí
;

3258 
hdrLí
 = –
z˛Rï‹tCmd_t
 ) + ( 
numAâr
 * –
z˛Rï‹t_t
 ) );

3260 
ªp‹tCmd
 = (
z˛Rï‹tCmd_t
 *)
	`oßl_mem_Æloc
–
hdrLí
 + 
d©aLí
 );

3261 i‡(
ªp‹tCmd
 !
NULL
 )

3263 
pBuf
 = 
pCmd
->
pD©a
;

3264 
d©aPå
 = (
uöt8
 *)–(uöt8 *)
ªp‹tCmd
 + 
hdrLí
 );

3266 
ªp‹tCmd
->
numAâr
 =ÇumAttr;

3267  
uöt8
 
i
 = 0; i < 
numAâr
; i++ )

3269 
z˛Rï‹t_t
 *
ªp‹tRec
 = &(
ªp‹tCmd
->
©åLi°
[
i
]);

3271 
ªp‹tRec
->
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

3272 
pBuf
 += 2;

3273 
ªp‹tRec
->
d©aTy≥
 = *
pBuf
++;

3275 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
ªp‹tRec
->
d©aTy≥
, 
pBuf
 );

3276 
	`oßl_mem˝y
–
d©aPå
, 
pBuf
, 
©åD©aLí
 );

3277 
ªp‹tRec
->
©åD©a
 = 
d©aPå
;

3279 
pBuf
 +
©åD©aLí
;

3282 i‡–
	`PADDING_NEEDED
–
©åD©aLí
 ) )

3284 
©åD©aLí
++;

3287 
d©aPå
 +
©åD©aLí
;

3291  ( (*)
ªp‹tCmd
 );

3292 
	}
}

3307 *
	$z˛P¨£InDeÁu…R•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

3309 
z˛DeÁu…R•Cmd_t
 *
deÁu…R•Cmd
;

3310 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

3312 
deÁu…R•Cmd
 = (
z˛DeÁu…R•Cmd_t
 *)
	`oßl_mem_Æloc
(  ( zclDefaultRspCmd_t ) );

3313 i‡–
deÁu…R•Cmd
 !
NULL
 )

3315 
deÁu…R•Cmd
->
comm™dID
 = *
pBuf
++;

3316 
deÁu…R•Cmd
->
°©usCode
 = *
pBuf
;

3319  ( (*)
deÁu…R•Cmd
 );

3320 
	}
}

3322 #ifde‡
ZCL_DISCOVER


3335 *
	$z˛P¨£InDiscCmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

3337 
z˛DiscovîCmd_t
 *
discovîCmd
;

3338 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

3340 
discovîCmd
 = (
z˛DiscovîCmd_t
 *)
	`oßl_mem_Æloc
(  ( zclDiscoverCmd_t ) );

3341 i‡–
discovîCmd
 !
NULL
 )

3343 
discovîCmd
->
°¨tAâr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

3344 
pBuf
 += 2;

3345 
discovîCmd
->
maxAârIDs
 = *
pBuf
;

3348  ( (*)
discovîCmd
 );

3349 
	}
}

3363 
	#ZCLDISCRSPCMD_DATALEN
(
a
) ((a)-1)

3364 *
	`z˛P¨£InDiscR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

	)

3366 
z˛DiscovîR•Cmd_t
 *
	gdiscovîR•Cmd
;

3367 
uöt8
 *
	gpBuf
 = 
pCmd
->
pD©a
;

3368 
uöt8
 
	gnumAâr
 = 
ZCLDISCRSPCMD_DATALEN
(
pCmd
->
d©aLí
) / ( 2 + 1 );

3370 
	gdiscovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
oßl_mem_Æloc
(  ( zclDiscoverRspCmd_t )

3371 + ( 
numAâr
 * (
z˛DiscovîInfo_t
) ) );

3372 i‡–
	gdiscovîR•Cmd
 !
NULL
 )

3374 
discovîR•Cmd
->
discCom∂ëe
 = *
pBuf
++;

3375 
	gdiscovîR•Cmd
->
	gnumAâr
 = 
numAâr
;

3377  
uöt8
 
	gi
 = 0; i < 
	gnumAâr
; i++ )

3379 
	gdiscovîR•Cmd
->
	g©åLi°
[
i
].
	g©åID
 = 
BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

3380 
	gpBuf
 += 2;

3381 
	gdiscovîR•Cmd
->
	g©åLi°
[
i
].
	gd©aTy≥
 = *
pBuf
++;;

3385  ( (*)
	gdiscovîR•Cmd
 );

3389 #ifde‡
ZCL_READ


3399 
uöt8
 
	$z˛Pro˚ssInRódCmd
–
z˛Incomög_t
 *
pInMsg
 )

3401 
z˛RódCmd_t
 *
ªadCmd
;

3402 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

3403 
z˛AârRec_t
 
©åRec
;

3404 
uöt16
 
Àn
;

3406 
ªadCmd
 = (
z˛RódCmd_t
 *)
pInMsg
->
©åCmd
;

3409 
Àn
 = –
z˛RódR•Cmd_t
 ) + (
ªadCmd
->
numAâr
 * –
z˛RódR•Sètus_t
 ));

3411 
ªadR•Cmd
 = 
	`oßl_mem_Æloc
–
Àn
 );

3412 i‡–
ªadR•Cmd
 =
NULL
 )

3414  
FALSE
;

3417 
ªadR•Cmd
->
numAâr
 = 
ªadCmd
->numAttr;

3418  
uöt8
 
i
 = 0; i < 
ªadCmd
->
numAâr
; i++ )

3420 
z˛RódR•Sètus_t
 *
°©usRec
 = &(
ªadR•Cmd
->
©åLi°
[
i
]);

3422 
°©usRec
->
©åID
 = 
ªadCmd
->©åID[
i
];

3424 i‡–
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
,

3425 
ªadCmd
->
©åID
[
i
], &
©åRec
 ) )

3427 i‡–
	`z˛_Ac˚ssCålRód
–
©åRec
.
©å
.
ac˚ssC⁄åﬁ
 ) )

3429 
°©usRec
->
°©us
 = 
	`z˛Auth‹izeRód
–
pInMsg
->
msg
->
ídPoöt
,

3430 &(
pInMsg
->
msg
->
§cAddr
), &
©åRec
 );

3431 i‡–
°©usRec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

3433 
°©usRec
->
d©a
 = 
©åRec
.
©å
.
d©aPå
;

3434 
°©usRec
->
d©aTy≥
 = 
©åRec
.
©å
.dataType;

3439 
°©usRec
->
°©us
 = 
ZCL_STATUS_WRITE_ONLY
;

3444 
°©usRec
->
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

3449 
	`z˛_SídRódR•
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),ÖInMsg->msg->
˛u°îId
,

3450 
ªadR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

3451 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

3452 
	`oßl_mem_‰ì
–
ªadR•Cmd
 );

3454  
TRUE
;

3455 
	}
}

3458 #ifde‡
ZCL_WRITE


3468 
uöt8
 
	$z˛Pro˚ssInWrôeCmd
–
z˛Incomög_t
 *
pInMsg
 )

3470 
z˛WrôeCmd_t
 *
wrôeCmd
;

3471 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

3472 
uöt8
 
£ndR•
 = 
FALSE
;

3473 
uöt8
 
j
 = 0;

3475 
wrôeCmd
 = (
z˛WrôeCmd_t
 *)
pInMsg
->
©åCmd
;

3476 i‡–
pInMsg
->
hdr
.
comm™dID
 =
ZCL_CMD_WRITE
 )

3479 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
	`oßl_mem_Æloc
( ( zclWriteRspCmd_t )

3480 + –
z˛WrôeR•Sètus_t
 ) * 
wrôeCmd
->
numAâr
 );

3481 i‡–
wrôeR•Cmd
 =
NULL
 )

3483  
FALSE
;

3486 
£ndR•
 = 
TRUE
;

3489  
uöt8
 
i
 = 0; i < 
wrôeCmd
->
numAâr
; i++ )

3491 
z˛AârRec_t
 
©åRec
;

3492 
z˛WrôeRec_t
 *
°©usRec
 = &(
wrôeCmd
->
©åLi°
[
i
]);

3494 i‡–
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
,

3495 
°©usRec
->
©åID
, &
©åRec
 ) )

3497 i‡–
°©usRec
->
d©aTy≥
 =
©åRec
.
©å
.dataType )

3499 
uöt8
 
°©us
;

3502 i‡–
©åRec
.
©å
.
d©aPå
 !
NULL
 )

3504 
°©us
 = 
	`z˛WrôeAârD©a
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

3505 &
©åRec
, 
°©usRec
 );

3509 
°©us
 = 
	`z˛WrôeAârD©aUsögCB
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

3510 &
©åRec
, 
°©usRec
->
©åD©a
 );

3514 i‡–
£ndR•
 && 
°©us
 !
ZCL_STATUS_SUCCESS
 )

3517 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = status;

3518 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3524 i‡–
£ndR•
 )

3526 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = 
ZCL_STATUS_INVALID_DATA_TYPE
;

3527 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3534 i‡–
£ndR•
 )

3536 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

3537 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3542 i‡–
£ndR•
 )

3544 
wrôeR•Cmd
->
numAâr
 = 
j
;

3545 i‡–
wrôeR•Cmd
->
numAâr
 == 0 )

3550 
wrôeR•Cmd
->
©åLi°
[0].
°©us
 = 
ZCL_STATUS_SUCCESS
;

3551 
wrôeR•Cmd
->
numAâr
 = 1;

3554 
	`z˛_SídWrôeR•
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

3555 
pInMsg
->
msg
->
˛u°îId
, 
wrôeR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

3556 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

3557 
	`oßl_mem_‰ì
–
wrôeR•Cmd
 );

3560  
TRUE
;

3561 
	}
}

3574 
	$z˛RevîtWrôeUndividedCmd
–
z˛Incomög_t
 *
pInMsg
,

3575 
z˛WrôeRec_t
 *
curWrôeRec
, 
uöt16
 
numAâr
 )

3577  
uöt8
 
i
 = 0; i < 
numAâr
; i++ )

3579 
z˛AârRec_t
 
©åRec
;

3580 
z˛WrôeRec_t
 *
°©usRec
 = &(
curWrôeRec
[
i
]);

3582 i‡–!
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
,

3583 
°©usRec
->
©åID
, &
©åRec
 ) )

3588 i‡–
©åRec
.
©å
.
d©aPå
 !
NULL
 )

3591 
uöt16
 
d©aLí
 = 
	`z˛GëAârD©aLígth
–
©åRec
.
©å
.
d©aTy≥
, 
°©usRec
->
©åD©a
 );

3592 
	`oßl_mem˝y
–
©åRec
.
©å
.
d©aPå
, 
°©usRec
->
©åD©a
, 
d©aLí
 );

3597 
	`z˛WrôeAârD©aUsögCB
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

3598 &
©åRec
, 
°©usRec
->
©åD©a
 );

3601 
	}
}

3612 
uöt8
 
	$z˛Pro˚ssInWrôeUndividedCmd
–
z˛Incomög_t
 *
pInMsg
 )

3614 
z˛WrôeCmd_t
 *
wrôeCmd
;

3615 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

3616 
z˛AârRec_t
 
©åRec
;

3617 
uöt16
 
d©aLí
;

3618 
uöt16
 
curLí
 = 0;

3619 
uöt8
 
j
 = 0;

3621 
wrôeCmd
 = (
z˛WrôeCmd_t
 *)
pInMsg
->
©åCmd
;

3624 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
	`oßl_mem_Æloc
( ( zclWriteRspCmd_t )

3625 + –
z˛WrôeR•Sètus_t
 )* 
wrôeCmd
->
numAâr
 );

3626 i‡–
wrôeR•Cmd
 =
NULL
 )

3628  
FALSE
;

3633  
uöt8
 
i
 = 0; i < 
wrôeCmd
->
numAâr
; i++ )

3635 
z˛WrôeRec_t
 *
°©usRec
 = &(
wrôeCmd
->
©åLi°
[
i
]);

3637 i‡–!
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
,

3638 
°©usRec
->
©åID
, &
©åRec
 ) )

3641 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

3642 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3646 i‡–
°©usRec
->
d©aTy≥
 !
©åRec
.
©å
.dataType )

3649 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = 
ZCL_STATUS_INVALID_DATA_TYPE
;

3650 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3654 i‡–!
	`z˛_Ac˚ssCålWrôe
–
©åRec
.
©å
.
ac˚ssC⁄åﬁ
 ) )

3657 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = 
ZCL_STATUS_READ_ONLY
;

3658 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3662 i‡–
	`z˛_Ac˚ssCålAuthWrôe
–
©åRec
.
©å
.
ac˚ssC⁄åﬁ
 ) )

3665 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = 
ZCL_STATUS_NOT_AUTHORIZED
;

3666 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3671 i‡–
©åRec
.
©å
.
d©aPå
 !
NULL
 )

3673 
d©aLí
 = 
	`z˛GëAârD©aLígth
–
©åRec
.
©å
.
d©aTy≥
,áârRec.©å.
d©aPå
 );

3677 
d©aLí
 = 
	`z˛GëAârD©aLígthUsögCB
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
,

3678 
°©usRec
->
©åID
 );

3682 i‡–
	`PADDING_NEEDED
–
d©aLí
 ) )

3684 
d©aLí
++;

3687 
curLí
 +
d©aLí
;

3690 
wrôeR•Cmd
->
numAâr
 = 
j
;

3691 i‡–
wrôeR•Cmd
->
numAâr
 == 0 )

3693 
uöt8
 *
curD©aPå
;

3694 
z˛WrôeRec_t
 *
curWrôeRec
;

3697 
uöt8
 
hdrLí
 = 
j
 * –
z˛WrôeRec_t
 );

3700 
curWrôeRec
 = (
z˛WrôeRec_t
 *Ë
	`oßl_mem_Æloc
–
hdrLí
 + 
curLí
 );

3701 i‡–
curWrôeRec
 =
NULL
 )

3703 
	`oßl_mem_‰ì
(
wrôeR•Cmd
 );

3704  
FALSE
;

3707 
curD©aPå
 = (
uöt8
 *)((uöt8 *)
curWrôeRec
 + 
hdrLí
);

3710  
uöt8
 
i
 = 0; i < 
wrôeCmd
->
numAâr
; i++ )

3712 
uöt8
 
°©us
;

3713 
z˛WrôeRec_t
 *
°©usRec
 = &(
wrôeCmd
->
©åLi°
[
i
]);

3714 
z˛WrôeRec_t
 *
curSètusRec
 = &(
curWrôeRec
[
i
]);

3716 i‡–!
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
,

3717 
°©usRec
->
©åID
, &
©åRec
 ) )

3723 
curSètusRec
->
©åID
 = 
°©usRec
->attrID;

3724 
curSètusRec
->
©åD©a
 = 
curD©aPå
;

3726 i‡–
©åRec
.
©å
.
d©aPå
 !
NULL
 )

3729 
	`z˛RódAârD©a
–
curD©aPå
, &
©åRec
, &
d©aLí
 );

3732 
°©us
 = 
	`z˛WrôeAârD©a
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

3733 &
©åRec
, 
°©usRec
 );

3738 
	`z˛RódAârD©aUsögCB
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
,

3739 
°©usRec
->
©åID
, 
curD©aPå
, &
d©aLí
 );

3741 
°©us
 = 
	`z˛WrôeAârD©aUsögCB
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

3742 &
©åRec
, 
°©usRec
->
©åD©a
 );

3746 i‡–
°©us
 !
ZCL_STATUS_SUCCESS
 )

3748 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = status;

3749 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3752 
	`z˛RevîtWrôeUndividedCmd
–
pInMsg
, 
curWrôeRec
, 
i
);

3757 i‡–
	`PADDING_NEEDED
–
d©aLí
 ) )

3759 
d©aLí
++;

3762 
curD©aPå
 +
d©aLí
;

3765 
wrôeR•Cmd
->
numAâr
 = 
j
;

3766 i‡–
wrôeR•Cmd
->
numAâr
 == 0 )

3771 
wrôeR•Cmd
->
©åLi°
[0].
°©us
 = 
ZCL_STATUS_SUCCESS
;

3772 
wrôeR•Cmd
->
numAâr
 = 1;

3775 
	`oßl_mem_‰ì
–
curWrôeRec
 );

3778 
	`z˛_SídWrôeR•
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

3779 
pInMsg
->
msg
->
˛u°îId
, 
wrôeR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

3780 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

3781 
	`oßl_mem_‰ì
–
wrôeR•Cmd
 );

3783  
TRUE
;

3784 
	}
}

3787 #ifde‡
ZCL_DISCOVER


3797 
uöt8
 
	$z˛Pro˚ssInDiscCmd
–
z˛Incomög_t
 *
pInMsg
 )

3799 
z˛DiscovîCmd_t
 *
discovîCmd
;

3800 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

3801 
uöt8
 
discCom∂ëe
 = 
TRUE
;

3802 
z˛AârRec_t
 
©åRec
;

3803 
uöt16
 
©åID
;

3804 
uöt8
 
i
;

3806 
discovîCmd
 = (
z˛DiscovîCmd_t
 *)
pInMsg
->
©åCmd
;

3809  
i
 = 0, 
©åID
 = 
discovîCmd
->
°¨tAâr
; i < discovîCmd->
maxAârIDs
; i++,áttrID++ )

3811 i‡–!
	`z˛FödNextAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
, &
©åID
, &
©åRec
 ) )

3818 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
	`oßl_mem_Æloc
(  (zclDiscoverRspCmd_t)

3819 +  ( 
z˛DiscovîInfo_t
 ) * 
i
 );

3820 i‡–
discovîR•Cmd
 =
NULL
 )

3822  
FALSE
;

3825 
discovîR•Cmd
->
numAâr
 = 
i
;

3826 i‡–
discovîR•Cmd
->
numAâr
 != 0 )

3828  
i
 = 0, 
©åID
 = 
discovîCmd
->
°¨tAâr
; i < 
discovîR•Cmd
->
numAâr
; i++,áttrID++ )

3830 i‡–!
	`z˛FödNextAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
, &
©åID
, &
©åRec
 ) )

3835 
discovîR•Cmd
->
©åLi°
[
i
].
©åID
 = 
©åRec
.
©å
.
©åId
;

3836 
discovîR•Cmd
->
©åLi°
[
i
].
d©aTy≥
 = 
©åRec
.
©å
.dataType;

3840 i‡–
	`z˛FödNextAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
, &
©åID
, &
©åRec
 ) )

3842 
discCom∂ëe
 = 
FALSE
;

3846 
discovîR•Cmd
->
discCom∂ëe
 = discComplete;

3847 
	`z˛_SídDiscovîR•Cmd
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

3848 
pInMsg
->
msg
->
˛u°îId
, 
discovîR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

3849 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

3850 
	`oßl_mem_‰ì
–
discovîR•Cmd
 );

3852  
TRUE
;

3853 
	}
}

3865 
uöt8
 
	$z˛SídMsg
–
z˛Incomög_t
 *
pInMsg
 )

3867 
z˛IncomögMsg_t
 *
pCmd
;

3869 i‡–
z˛_Regi°îedMsgTaskID
 =
TASK_NO_TASK
 )

3871  ( 
TRUE
 );

3874 
pCmd
 = (
z˛IncomögMsg_t
 *)
	`oßl_msg_Æloˇã
(  ( zclIncomingMsg_t ) );

3875 i‡–
pCmd
 !
NULL
 )

3878 
pCmd
->
hdr
.
evít
 = 
ZCL_INCOMING_MSG
;

3879 
pCmd
->
z˛Hdr
 = 
pInMsg
->
hdr
;

3880 
pCmd
->
˛u°îId
 = 
pInMsg
->
msg
->clusterId;

3881 
pCmd
->
§cAddr
 = 
pInMsg
->
msg
->srcAddr;

3882 
pCmd
->
ídPoöt
 = 
pInMsg
->
msg
->endPoint;

3883 
pCmd
->
©åCmd
 = 
pInMsg
->attrCmd;

3886 
pInMsg
->
©åCmd
 = 
NULL
;

3889 
	`oßl_msg_£nd
–
z˛_Regi°îedMsgTaskID
, (
uöt8
 *)
pCmd
 );

3892  ( 
TRUE
 );

3893 
	}
}

	@Components/stack/zcl/zcl.h

40 #i‚de‡
ZCL_H


41 
	#ZCL_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"AF.h
"

52 
	~"≠s_groups.h
"

59 
	#ZCL_CLUSTER_ID_GEN_BASIC
 0x0000

	)

60 
	#ZCL_CLUSTER_ID_GEN_POWER_CFG
 0x0001

	)

61 
	#ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG
 0x0002

	)

62 
	#ZCL_CLUSTER_ID_GEN_IDENTIFY
 0x0003

	)

63 
	#ZCL_CLUSTER_ID_GEN_GROUPS
 0x0004

	)

64 
	#ZCL_CLUSTER_ID_GEN_SCENES
 0x0005

	)

65 
	#ZCL_CLUSTER_ID_GEN_ON_OFF
 0x0006

	)

66 
	#ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG
 0x0007

	)

67 
	#ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
 0x0008

	)

68 
	#ZCL_CLUSTER_ID_GEN_ALARMS
 0x0009

	)

69 
	#ZCL_CLUSTER_ID_GEN_TIME
 0x000A

	)

70 
	#ZCL_CLUSTER_ID_GEN_LOCATION
 0x000B

	)

71 
	#ZCL_CLUSTER_ID_GEN_ANALOG_INPUT_BASIC
 0x000C

	)

72 
	#ZCL_CLUSTER_ID_GEN_ANALOG_OUTPUT_BASIC
 0x000D

	)

73 
	#ZCL_CLUSTER_ID_GEN_ANALOG_VALUE_BASIC
 0x000E

	)

74 
	#ZCL_CLUSTER_ID_GEN_BINARY_INPUT_BASIC
 0x000F

	)

75 
	#ZCL_CLUSTER_ID_GEN_BINARY_OUTPUT_BASIC
 0x0010

	)

76 
	#ZCL_CLUSTER_ID_GEN_BINARY_VALUE_BASIC
 0x0011

	)

77 
	#ZCL_CLUSTER_ID_GEN_MULTISTATE_INPUT_BASIC
 0x0012

	)

78 
	#ZCL_CLUSTER_ID_GEN_MULTISTATE_OUTPUT_BASIC
 0x0013

	)

79 
	#ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC
 0x0014

	)

80 
	#ZCL_CLUSTER_ID_GEN_COMMISSIONING
 0x0015

	)

82 
	#ZCL_CLUSTER_ID_OTA
 0x0019

	)

83 
	#ZCL_CLUSTER_ID_GREEN_POWER_PROXY
 0x001A

	)

86 
	#ZCL_CLUSTER_ID_CLOSURES_SHADE_CONFIG
 0x0100

	)

87 
	#ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK
 0x0101

	)

88 
	#ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING
 0x0102

	)

91 
	#ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL
 0x0200

	)

92 
	#ZCL_CLUSTER_ID_HAVC_THERMOSTAT
 0x0201

	)

93 
	#ZCL_CLUSTER_ID_HAVC_FAN_CONTROL
 0x0202

	)

94 
	#ZCL_CLUSTER_ID_HAVC_DIHUMIDIFICATION_CONTROL
 0x0203

	)

95 
	#ZCL_CLUSTER_ID_HAVC_USER_INTERFACE_CONFIG
 0x0204

	)

98 
	#ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
 0x0300

	)

99 
	#ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG
 0x0301

	)

102 
	#ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT
 0x0400

	)

103 
	#ZCL_CLUSTER_ID_MS_ILLUMINANCE_LEVEL_SENSING_CONFIG
 0x0401

	)

104 
	#ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT
 0x0402

	)

105 
	#ZCL_CLUSTER_ID_MS_PRESSURE_MEASUREMENT
 0x0403

	)

106 
	#ZCL_CLUSTER_ID_MS_FLOW_MEASUREMENT
 0x0404

	)

107 
	#ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY
 0x0405

	)

108 
	#ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING
 0x0406

	)

111 
	#ZCL_CLUSTER_ID_SS_IAS_ZONE
 0x0500

	)

112 
	#ZCL_CLUSTER_ID_SS_IAS_ACE
 0x0501

	)

113 
	#ZCL_CLUSTER_ID_SS_IAS_WD
 0x0502

	)

116 
	#ZCL_CLUSTER_ID_PI_GENERIC_TUNNEL
 0x0600

	)

117 
	#ZCL_CLUSTER_ID_PI_BACNET_PROTOCOL_TUNNEL
 0x0601

	)

118 
	#ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_REG
 0x0602

	)

119 
	#ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_EXT
 0x0603

	)

120 
	#ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_REG
 0x0604

	)

121 
	#ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_EXT
 0x0605

	)

122 
	#ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_REG
 0x0606

	)

123 
	#ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_EXT
 0x0607

	)

124 
	#ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_REG
 0x0608

	)

125 
	#ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_EXT
 0x0609

	)

126 
	#ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_REG
 0x060A

	)

127 
	#ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_EXT
 0x060B

	)

128 
	#ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_REG
 0x060C

	)

129 
	#ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_EXT
 0x060D

	)

130 
	#ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_REG
 0x060E

	)

131 
	#ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_EXT
 0x060F

	)

132 
	#ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_REG
 0x0610

	)

133 
	#ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_EXT
 0x0611

	)

134 
	#ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_REG
 0x0612

	)

135 
	#ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_EXT
 0x0613

	)

136 
	#ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL
 0x0614

	)

139 
	#ZCL_CLUSTER_ID_SE_PRICING
 0x0700

	)

140 
	#ZCL_CLUSTER_ID_SE_LOAD_CONTROL
 0x0701

	)

141 
	#ZCL_CLUSTER_ID_SE_SIMPLE_METERING
 0x0702

	)

142 
	#ZCL_CLUSTER_ID_SE_MESSAGE
 0x0703

	)

143 
	#ZCL_CLUSTER_ID_SE_SE_TUNNELING
 0x0704

	)

144 
	#ZCL_CLUSTER_ID_SE_PREPAYMENT
 0x0705

	)

145 #ifde‡
SE_UK_EXT


146 
	#ZCL_CLUSTER_ID_SE_TOU_CALENDAR
 0x0706

	)

147 
	#ZCL_CLUSTER_ID_SE_DEVICE_MGMT
 0x0707

	)

150 
	#ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
 0x0800

	)

153 
	#ZCL_CLUSTER_ID_SMART_LIGHT
 0x1000

	)

156 
	#ZCL_FRAME_CONTROL_TYPE
 0x03

	)

157 
	#ZCL_FRAME_CONTROL_MANU_SPECIFIC
 0x04

	)

158 
	#ZCL_FRAME_CONTROL_DIRECTION
 0x08

	)

159 
	#ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP
 0x10

	)

162 
	#ZCL_FRAME_TYPE_PROFILE_CMD
 0x00

	)

163 
	#ZCL_FRAME_TYPE_SPECIFIC_CMD
 0x01

	)

166 
	#ZCL_FRAME_CLIENT_SERVER_DIR
 0x00

	)

167 
	#ZCL_FRAME_SERVER_CLIENT_DIR
 0x01

	)

170 
	#CC_MANUFACTURER_CODE
 0x1001

	)

173 
	#ZCL_CMD_READ
 0x00

	)

174 
	#ZCL_CMD_READ_RSP
 0x01

	)

175 
	#ZCL_CMD_WRITE
 0x02

	)

176 
	#ZCL_CMD_WRITE_UNDIVIDED
 0x03

	)

177 
	#ZCL_CMD_WRITE_RSP
 0x04

	)

178 
	#ZCL_CMD_WRITE_NO_RSP
 0x05

	)

179 
	#ZCL_CMD_CONFIG_REPORT
 0x06

	)

180 
	#ZCL_CMD_CONFIG_REPORT_RSP
 0x07

	)

181 
	#ZCL_CMD_READ_REPORT_CFG
 0x08

	)

182 
	#ZCL_CMD_READ_REPORT_CFG_RSP
 0x09

	)

183 
	#ZCL_CMD_REPORT
 0x0a

	)

184 
	#ZCL_CMD_DEFAULT_RSP
 0x0b

	)

185 
	#ZCL_CMD_DISCOVER
 0x0c

	)

186 
	#ZCL_CMD_DISCOVER_RSP
 0x0d

	)

188 
	#ZCL_CMD_MAX
 
ZCL_CMD_DISCOVER_RSP


	)

191 
	#ZCL_DATATYPE_NO_DATA
 0x00

	)

192 
	#ZCL_DATATYPE_DATA8
 0x08

	)

193 
	#ZCL_DATATYPE_DATA16
 0x09

	)

194 
	#ZCL_DATATYPE_DATA24
 0x0a

	)

195 
	#ZCL_DATATYPE_DATA32
 0x0b

	)

196 
	#ZCL_DATATYPE_DATA40
 0x0c

	)

197 
	#ZCL_DATATYPE_DATA48
 0x0d

	)

198 
	#ZCL_DATATYPE_DATA56
 0x0e

	)

199 
	#ZCL_DATATYPE_DATA64
 0x0f

	)

200 
	#ZCL_DATATYPE_BOOLEAN
 0x10

	)

201 
	#ZCL_DATATYPE_BITMAP8
 0x18

	)

202 
	#ZCL_DATATYPE_BITMAP16
 0x19

	)

203 
	#ZCL_DATATYPE_BITMAP24
 0x1a

	)

204 
	#ZCL_DATATYPE_BITMAP32
 0x1b

	)

205 
	#ZCL_DATATYPE_BITMAP40
 0x1c

	)

206 
	#ZCL_DATATYPE_BITMAP48
 0x1d

	)

207 
	#ZCL_DATATYPE_BITMAP56
 0x1e

	)

208 
	#ZCL_DATATYPE_BITMAP64
 0x1f

	)

209 
	#ZCL_DATATYPE_UINT8
 0x20

	)

210 
	#ZCL_DATATYPE_UINT16
 0x21

	)

211 
	#ZCL_DATATYPE_UINT24
 0x22

	)

212 
	#ZCL_DATATYPE_UINT32
 0x23

	)

213 
	#ZCL_DATATYPE_UINT40
 0x24

	)

214 
	#ZCL_DATATYPE_UINT48
 0x25

	)

215 
	#ZCL_DATATYPE_UINT56
 0x26

	)

216 
	#ZCL_DATATYPE_UINT64
 0x27

	)

217 
	#ZCL_DATATYPE_INT8
 0x28

	)

218 
	#ZCL_DATATYPE_INT16
 0x29

	)

219 
	#ZCL_DATATYPE_INT24
 0x2a

	)

220 
	#ZCL_DATATYPE_INT32
 0x2b

	)

221 
	#ZCL_DATATYPE_INT40
 0x2c

	)

222 
	#ZCL_DATATYPE_INT48
 0x2d

	)

223 
	#ZCL_DATATYPE_INT56
 0x2e

	)

224 
	#ZCL_DATATYPE_INT64
 0x2f

	)

225 
	#ZCL_DATATYPE_ENUM8
 0x30

	)

226 
	#ZCL_DATATYPE_ENUM16
 0x31

	)

227 
	#ZCL_DATATYPE_SEMI_PREC
 0x38

	)

228 
	#ZCL_DATATYPE_SINGLE_PREC
 0x39

	)

229 
	#ZCL_DATATYPE_DOUBLE_PREC
 0x3a

	)

230 
	#ZCL_DATATYPE_OCTET_STR
 0x41

	)

231 
	#ZCL_DATATYPE_CHAR_STR
 0x42

	)

232 
	#ZCL_DATATYPE_LONG_OCTET_STR
 0x43

	)

233 
	#ZCL_DATATYPE_LONG_CHAR_STR
 0x44

	)

234 
	#ZCL_DATATYPE_ARRAY
 0x48

	)

235 
	#ZCL_DATATYPE_STRUCT
 0x4c

	)

236 
	#ZCL_DATATYPE_SET
 0x50

	)

237 
	#ZCL_DATATYPE_BAG
 0x51

	)

238 
	#ZCL_DATATYPE_TOD
 0xe0

	)

239 
	#ZCL_DATATYPE_DATE
 0xe1

	)

240 
	#ZCL_DATATYPE_UTC
 0xe2

	)

241 
	#ZCL_DATATYPE_CLUSTER_ID
 0xe8

	)

242 
	#ZCL_DATATYPE_ATTR_ID
 0xe9

	)

243 
	#ZCL_DATATYPE_BAC_OID
 0xó

	)

244 
	#ZCL_DATATYPE_IEEE_ADDR
 0xf0

	)

245 
	#ZCL_DATATYPE_128_BIT_SEC_KEY
 0xf1

	)

246 
	#ZCL_DATATYPE_UNKNOWN
 0xff

	)

249 
	#ZCL_STATUS_SUCCESS
 0x00

	)

250 
	#ZCL_STATUS_FAILURE
 0x01

	)

252 
	#ZCL_STATUS_NOT_AUTHORIZED
 0x7E

	)

253 
	#ZCL_STATUS_MALFORMED_COMMAND
 0x80

	)

254 
	#ZCL_STATUS_UNSUP_CLUSTER_COMMAND
 0x81

	)

255 
	#ZCL_STATUS_UNSUP_GENERAL_COMMAND
 0x82

	)

256 
	#ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND
 0x83

	)

257 
	#ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND
 0x84

	)

258 
	#ZCL_STATUS_INVALID_FIELD
 0x85

	)

259 
	#ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
 0x86

	)

260 
	#ZCL_STATUS_INVALID_VALUE
 0x87

	)

261 
	#ZCL_STATUS_READ_ONLY
 0x88

	)

262 
	#ZCL_STATUS_INSUFFICIENT_SPACE
 0x89

	)

263 
	#ZCL_STATUS_DUPLICATE_EXISTS
 0x8a

	)

264 
	#ZCL_STATUS_NOT_FOUND
 0x8b

	)

265 
	#ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
 0x8c

	)

266 
	#ZCL_STATUS_INVALID_DATA_TYPE
 0x8d

	)

267 
	#ZCL_STATUS_INVALID_SELECTOR
 0x8e

	)

268 
	#ZCL_STATUS_WRITE_ONLY
 0x8f

	)

269 
	#ZCL_STATUS_INCONSISTENT_STARTUP_STATE
 0x90

	)

270 
	#ZCL_STATUS_DEFINED_OUT_OF_BAND
 0x91

	)

271 
	#ZCL_STATUS_INCONSISTENT
 0x92

	)

272 
	#ZCL_STATUS_ACTION_DENIED
 0x93

	)

273 
	#ZCL_STATUS_TIMEOUT
 0x94

	)

274 
	#ZCL_STATUS_ABORT
 0x95

	)

275 
	#ZCL_STATUS_INVALID_IMAGE
 0x96

	)

276 
	#ZCL_STATUS_WAIT_FOR_DATA
 0x97

	)

277 
	#ZCL_STATUS_NO_IMAGE_AVAILABLE
 0x98

	)

278 
	#ZCL_STATUS_REQUIRE_MORE_IMAGE
 0x99

	)

281 
	#ZCL_STATUS_HARDWARE_FAILURE
 0xc0

	)

282 
	#ZCL_STATUS_SOFTWARE_FAILURE
 0xc1

	)

283 
	#ZCL_STATUS_CALIBRATION_ERROR
 0xc2

	)

285 
	#ZCL_STATUS_CMD_HAS_RSP
 0xFF

286 

	)

288 
	#ACCESS_CONTROL_READ
 0x01

	)

289 
	#ACCESS_CONTROL_WRITE
 0x02

	)

290 
	#ACCESS_CONTROL_COMMAND
 0x04

	)

291 
	#ACCESS_CONTROL_AUTH_READ
 0x10

	)

292 
	#ACCESS_CONTROL_AUTH_WRITE
 0x20

	)

294 
	#ZCL_ATTR_ID_MAX
 0xFFFF

	)

297 
	#ZCL_SEND_ATTR_REPORTS
 0x00

	)

298 
	#ZCL_EXPECT_ATTR_REPORTS
 0x01

	)

301 
	#MAX_UTF8_STRING_LEN
 50

	)

304 
	#ZCL_OPER_LEN
 0x00

305 
	#ZCL_OPER_READ
 0x01

306 
	#ZCL_OPER_WRITE
 0x02

307 

	)

311 
	#z˛_ProfûeCmd
–
a
 ) ( (aË=
ZCL_FRAME_TYPE_PROFILE_CMD
 )

	)

312 
	#z˛_Clu°îCmd
–
a
 ) ( (aË=
ZCL_FRAME_TYPE_SPECIFIC_CMD
 )

	)

314 
	#z˛_SîvîCmd
–
a
 ) ( (aË=
ZCL_FRAME_CLIENT_SERVER_DIR
 )

	)

315 
	#z˛_Clõ¡Cmd
–
a
 ) ( (aË=
ZCL_FRAME_SERVER_CLIENT_DIR
 )

	)

317 
	#UNICAST_MSG
–
msg
 ) ( (msg)->
wasBrﬂdˇ°
 =
Ál£
 && (msg)->
groupId
 =0 )

	)

320 
	#PADDING_NEEDED
–
bufLí
 ) ( (bufLíË% 2 )

	)

323 
	#ZCL_CLUSTER_ID_GEN
–
id
 ) ( \

324 (
id
Ë<
ZCL_CLUSTER_ID_GEN_COMMISSIONING
 )

	)

325 
	#ZCL_CLUSTER_ID_CLOSURES
–
id
 ) ( (idË>
ZCL_CLUSTER_ID_CLOSURES_SHADE_CONFIG
 && \

326 (
id
Ë<
ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING
 )

	)

327 
	#ZCL_CLUSTER_ID_HVAC
–
id
 ) ( (idË>
ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL
 && \

328 (
id
Ë<
ZCL_CLUSTER_ID_HAVC_USER_INTERFACE_CONFIG
 )

	)

329 
	#ZCL_CLUSTER_ID_LIGHTING
–
id
 ) ( (idË>
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
 && \

330 (
id
Ë<
ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG
 )

	)

331 
	#ZCL_CLUSTER_ID_MS
–
id
 ) ( (idË>
ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT
 && \

332 (
id
Ë<
ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING
 )

	)

333 
	#ZCL_CLUSTER_ID_SS
–
id
 ) ( (idË>
ZCL_CLUSTER_ID_SS_IAS_ZONE
 && \

334 (
id
Ë<
ZCL_CLUSTER_ID_SS_IAS_WD
 )

	)

335 
	#ZCL_CLUSTER_ID_KEY
–
id
 ) ( (idË=
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
 )

	)

336 #ifde‡
SE_UK_EXT


337 
	#ZCL_CLUSTER_ID_SE
–
id
 ) ( (idË>
ZCL_CLUSTER_ID_SE_PRICING
 && \

338 (
id
Ë<
ZCL_CLUSTER_ID_SE_DEVICE_MGMT
 )

	)

340 
	#ZCL_CLUSTER_ID_SE
–
id
 ) ( (idË>
ZCL_CLUSTER_ID_SE_PRICING
 && \

341 (
id
Ë<
ZCL_CLUSTER_ID_SE_PREPAYMENT
 )

	)

343 
	#ZCL_CLUSTER_ID_PI
–
id
 ) ( (idË>
ZCL_CLUSTER_ID_PI_GENERIC_TUNNEL
 && \

344 (
id
Ë<
ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL
 )

	)

345 
	#ZCL_CLUSTER_ID_SL
–
id
 ) ( (idË=
ZCL_CLUSTER_ID_SMART_LIGHT
 )

	)

354 
ty≥
:2;

355 
m™uS≥cific
:1;

356 
dúe˘i⁄
:1;

357 
dißbÀDeÁu…R•
:1;

358 
ª£rved
:3;

359 } 
	tz˛FømeC⁄åﬁ_t
;

364 
z˛FømeC⁄åﬁ_t
 
fc
;

365 
uöt16
 
m™uCode
;

366 
uöt8
 
å™sSeqNum
;

367 
uöt8
 
comm™dID
;

368 } 
	tz˛FømeHdr_t
;

370 #ifde‡
ZCL_READ


374 
uöt8
 
numAâr
;

375 
uöt16
 
©åID
[];

377 } 
	tz˛RódCmd_t
;

382 
uöt16
 
©åID
;

383 
uöt8
 
°©us
;

384 
uöt8
 
d©aTy≥
;

385 
uöt8
 *
d©a
;

387 } 
	tz˛RódR•Sètus_t
;

392 
uöt8
 
numAâr
;

393 
z˛RódR•Sètus_t
 
©åLi°
[];

394 } 
	tz˛RódR•Cmd_t
;

400 
uöt16
 
©åID
;

401 
uöt8
 
d©aTy≥
;

402 
uöt8
 *
©åD©a
;

404 } 
	tz˛WrôeRec_t
;

409 
uöt8
 
numAâr
;

410 
z˛WrôeRec_t
 
©åLi°
[];

411 } 
	tz˛WrôeCmd_t
;

416 
uöt8
 
°©us
;

417 
uöt16
 
©åID
;

418 } 
	tz˛WrôeR•Sètus_t
;

423 
uöt8
 
numAâr
;

424 
z˛WrôeR•Sètus_t
 
©åLi°
[];

425 } 
	tz˛WrôeR•Cmd_t
;

430 
uöt8
 
dúe˘i⁄
;

431 
uöt16
 
©åID
;

432 
uöt8
 
d©aTy≥
;

433 
uöt16
 
möRï‹tI¡
;

434 
uöt16
 
maxRï‹tI¡
;

435 
uöt16
 
timeoutPîiod
;

436 
uöt8
 *
ªp‹èbÀCh™ge
;

438 } 
	tz˛CfgRï‹tRec_t
;

442 
uöt8
 
numAâr
;

443 
z˛CfgRï‹tRec_t
 
©åLi°
[];

444 } 
	tz˛CfgRï‹tCmd_t
;

449 
uöt8
 
°©us
;

450 
uöt8
 
dúe˘i⁄
;

451 
uöt16
 
©åID
;

452 } 
	tz˛CfgRï‹tSètus_t
;

457 
uöt8
 
numAâr
;

458 
z˛CfgRï‹tSètus_t
 
©åLi°
[];

459 } 
	tz˛CfgRï‹tR•Cmd_t
;

464 
uöt8
 
dúe˘i⁄
;

465 
uöt16
 
©åID
;

466 } 
	tz˛RódRï‹tCfgRec_t
;

470 
uöt8
 
numAâr
;

471 
z˛RódRï‹tCfgRec_t
 
©åLi°
[];

472 } 
	tz˛RódRï‹tCfgCmd_t
;

477 
uöt8
 
°©us
;

478 
uöt8
 
dúe˘i⁄
;

479 
uöt16
 
©åID
;

480 
uöt8
 
d©aTy≥
;

481 
uöt16
 
möRï‹tI¡
;

482 
uöt16
 
maxRï‹tI¡
;

483 
uöt16
 
timeoutPîiod
;

484 
uöt8
 *
ªp‹èbÀCh™ge
;

486 } 
	tz˛Rï‹tCfgR•Rec_t
;

491 
uöt8
 
numAâr
;

492 
z˛Rï‹tCfgR•Rec_t
 
©åLi°
[];

493 } 
	tz˛RódRï‹tCfgR•Cmd_t
;

498 
uöt16
 
©åID
;

499 
uöt8
 
d©aTy≥
;

500 
uöt8
 *
©åD©a
;

502 } 
	tz˛Rï‹t_t
;

507 
uöt8
 
numAâr
;

508 
z˛Rï‹t_t
 
©åLi°
[];

509 } 
	tz˛Rï‹tCmd_t
;

514 
uöt8
 
comm™dID
;

515 
uöt8
 
°©usCode
;

516 } 
	tz˛DeÁu…R•Cmd_t
;

521 
uöt16
 
°¨tAâr
;

523 
uöt8
 
maxAârIDs
;

525 } 
	tz˛DiscovîCmd_t
;

530 
uöt16
 
©åID
;

531 
uöt8
 
d©aTy≥
;

532 } 
	tz˛DiscovîInfo_t
;

537 
uöt8
 
discCom∂ëe
;

538 
uöt8
 
numAâr
;

539 
z˛DiscovîInfo_t
 
©åLi°
[];

540 } 
	tz˛DiscovîR•Cmd_t
;

545 
uöt8
 
°rLí
;

546 
uöt8
 *
pSå
;

547 } 
	tUTF8Såög_t
;

557 
afIncomögMSGPackë_t
 *
msg
;

558 
z˛FømeHdr_t
 
hdr
;

559 
uöt8
 *
pD©a
;

560 
uöt16
 
pD©aLí
;

561 *
©åCmd
;

562 } 
	tz˛Incomög_t
;

567 
z˛FømeHdr_t
 
hdr
;

568 
uöt16
 
ªÆClu°îID
;

569 
uöt16
 
©åID
;

570 *
cmdSåu˘
;

571 
uöt8
 
cmdLí
;

572 
uöt8
 *
cmdD©a
;

573 } 
	tz˛OutgoögCmd_t
;

582 
oßl_evít_hdr_t
 
hdr
;

583 
z˛FømeHdr_t
 
z˛Hdr
;

584 
uöt16
 
˛u°îId
;

585 
afAddrTy≥_t
 
§cAddr
;

586 
uöt8
 
ídPoöt
;

587 *
©åCmd
;

588 } 
	tz˛IncomögMsg_t
;

593 
ZSètus_t
 (*
	tz˛InHdÃ_t
)–
	tz˛Incomög_t
 *
	tpInHdÃMsg
 );

599 
ZSètus_t
 (*
	tz˛InWπHdÃ_t
)–
	tz˛Incomög_t
 *
	tmsg
, 
	tuöt16
 
	tlogiˇlClu°îID
, 
	tz˛WrôeRec_t
 *
	twrôeRec
 );

604 
uöt16
 
©åId
;

605 
uöt8
 
d©aTy≥
;

606 
uöt8
 
ac˚ssC⁄åﬁ
;

607 *
d©aPå
;

608 } 
	tz˛Aâribuã_t
;

612 
uöt16
 
˛u°îID
;

613 
z˛Aâribuã_t
 
©å
;

614 } 
	tz˛AârRec_t
;

622 
uöt8
 (*
	tz˛VÆid©eAârD©a_t
)–
	tz˛AârRec_t
 *
	tpAâr
, 
	tz˛WrôeRec_t
 *
	tpAârInfo
 );

634 
ZSètus_t
 (*
	tz˛RódWrôeCB_t
)–
	tuöt16
 
	t˛u°îId
, uöt16 
	t©åId
, 
	tuöt8
 
	t›î
,

635 
	tuöt8
 *
	tpVÆue
, 
	tuöt16
 *
	tpLí
 );

646 
ZSètus_t
 (*
	tz˛Auth‹izeCB_t
)–
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tz˛AârRec_t
 *
	tpAâr
, 
	tuöt8
 
	t›î
 );

650 
uöt16
 
˛u°îID
;

651 
uöt8
 
›ti⁄
;

652 } 
	tz˛O±i⁄Rec_t
;

657 
uöt8
 
ídpoöt
;

658 
uöt16
 
d©aLí
;

659 
uöt8
 *
pD©a
;

660 } 
	tz˛P¨£Cmd_t
;

665 
uöt8
 
z˛_TaskID
;

666 
uöt8
 
z˛_SeqNum
;

671 #ifde‡
ZCL_WRITE


677 
	#z˛_SídWrôe
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë(
	`z˛_SídWrôeReque°
–◊), (b), (c), (d), 
ZCL_CMD_WRITE
, (e), (f), (gË))

	)

684 
	#z˛_SídWrôeUndivided
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë(
	`z˛_SídWrôeReque°
–◊), (b), (c), (d), 
ZCL_CMD_WRITE_UNDIVIDED
, (e), (f), (gË))

	)

691 
	#z˛_SídWrôeNoR•
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë(
	`z˛_SídWrôeReque°
–◊), (b), (c), (d), 
ZCL_CMD_WRITE_NO_RSP
, (e), (f), (gË))

	)

701 
z˛_Inô
–
byã
 
èsk_id
 );

706 
UINT16
 
z˛_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 );

711 
ZSètus_t
 
z˛_ªgi°îPlugö
–
uöt16
 
°¨tLogClu°î
, uöt16 
ídLogClu°î
,

712 
z˛InHdÃ_t
 
p‚IncomögHdÃ
 );

717 
ZSètus_t
 
z˛_ªgi°îAârLi°
–
uöt8
 
ídpoöt
, uöt8 
numAâr
, 
CONST
 
z˛AârRec_t
 
©åLi°
[] );

722 
ZSètus_t
 
z˛_ªgi°îClu°îO±i⁄Li°
–
uöt8
 
ídpoöt
, uöt8 
numO±i⁄
, 
z˛O±i⁄Rec_t
 
›ti⁄Li°
[] );

727 
ZSètus_t
 
z˛_ªgi°îVÆid©eAârD©a
–
z˛VÆid©eAârD©a_t
 
p‚VÆid©eAârD©a
 );

732 
ZSètus_t
 
z˛_ªgi°îRódWrôeCB
–
uöt8
 
ídpoöt
, 
z˛RódWrôeCB_t
 
p‚RódWrôeCB
,

733 
z˛Auth‹izeCB_t
 
p‚Auth‹izeCB
 );

738 
uöt8
 
z˛_ªgi°îF‹Msg
–uöt8 
èskId
 );

743 
ZSètus_t
 
z˛_SídComm™d
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

744 
uöt16
 
˛u°îID
, 
uöt8
 
cmd
, uöt8 
•ecific
, uöt8 
dúe˘i⁄
,

745 
uöt8
 
dißbÀDeÁu…R•
, 
uöt16
 
m™uCode
, uöt8 
£qNum
,

746 
uöt16
 
cmdF‹m©Lí
, 
uöt8
 *
cmdF‹m©
 );

748 #ifde‡
ZCL_READ


752 
ZSètus_t
 
z˛_SídRód
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

753 
uöt16
 
ªÆClu°îID
, 
z˛RódCmd_t
 *
ªadCmd
,

754 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

759 
ZSètus_t
 
z˛_SídRódR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

760 
uöt16
 
ªÆClu°îID
, 
z˛RódR•Cmd_t
 *
ªadR•Cmd
,

761 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

764 #ifde‡
ZCL_WRITE


768 
ZSètus_t
 
z˛_SídWrôeReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

769 
uöt16
 
ªÆClu°îID
, 
z˛WrôeCmd_t
 *
wrôeCmd
,

770 
uöt8
 
cmd
, uöt8 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

775 
ZSètus_t
 
z˛_SídWrôeR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

776 
uöt16
 
ªÆClu°îID
, 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
,

777 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

780 #ifde‡
ZCL_REPORT


784 
ZSètus_t
 
z˛_SídC⁄figRï‹tCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

785 
uöt16
 
ªÆClu°îID
, 
z˛CfgRï‹tCmd_t
 *
cfgRï‹tCmd
,

786 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

791 
ZSètus_t
 
z˛_SídC⁄figRï‹tR•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

792 
uöt16
 
ªÆClu°îID
, 
z˛CfgRï‹tR•Cmd_t
 *
cfgRï‹tR•Cmd
,

793 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

798 
ZSètus_t
 
z˛_SídRódRï‹tCfgCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

799 
uöt16
 
ªÆClu°îID
, 
z˛RódRï‹tCfgCmd_t
 *
ªadRï‹tCfgCmd
,

800 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

805 
ZSètus_t
 
z˛_SídRódRï‹tCfgR•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

806 
uöt16
 
ªÆClu°îID
, 
z˛RódRï‹tCfgR•Cmd_t
 *
ªadRï‹tCfgR•Cmd
,

807 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

812 
ZSètus_t
 
z˛_SídRï‹tCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

813 
uöt16
 
ªÆClu°îID
, 
z˛Rï‹tCmd_t
 *
ªp‹tCmd
,

814 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

820 
ZSètus_t
 
z˛_SídDeÁu…R•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
, 
uöt16
 
ªÆClu°îID
,

821 
z˛DeÁu…R•Cmd_t
 *
deÁu…R•Cmd
, 
uöt8
 
dúe˘i⁄
,

822 
uöt8
 
dißbÀDeÁu…R•
, 
uöt16
 
m™uCode
, uöt8 
£qNum
 );

824 #ifde‡
ZCL_DISCOVER


828 
ZSètus_t
 
z˛_SídDiscovîCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

829 
uöt16
 
ªÆClu°îID
, 
z˛DiscovîCmd_t
 *
discovîCmd
,

830 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

835 
ZSètus_t
 
z˛_SídDiscovîR•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

836 
uöt16
 
ªÆClu°îID
, 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
,

837 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

840 #ifde‡
ZCL_READ


844 *
z˛P¨£InRódCmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

847 #ifde‡
ZCL_WRITE


852 *
z˛P¨£InWrôeCmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

855 #ifde‡
ZCL_REPORT


859 *
z˛P¨£InC⁄figRï‹tCmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

863 *
z˛P¨£InRódRï‹tCfgCmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

867 *
z˛P¨£InRï‹tCmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

872 
uöt8
 
z˛A«logD©aTy≥
–uöt8 
d©aTy≥
 );

875 #ifde‡
ZCL_DISCOVER


879 *
z˛P¨£InDiscCmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

885 
uöt8
 *
z˛P¨£Hdr
–
z˛FømeHdr_t
 *
hdr
, uöt8 *
pD©a
 );

890 
uöt8
 
z˛FödAârRec
–uöt8 
ídpoöt
, 
uöt16
 
ªÆClu°îID
, uöt16 
©åId
, 
z˛AârRec_t
 *
pAâr
 );

895 
uöt8
 
z˛RódAârD©a
–uöt8 *
pAârD©a
, 
z˛AârRec_t
 *
pAâr
, 
uöt16
 *
pD©aLí
 );

900 
uöt8
 
z˛GëD©aTy≥Lígth
–uöt8 
d©aTy≥
 );

905 
uöt8
 *
z˛SîülizeD©a
–uöt8 
d©aTy≥
, *
©åD©a
, uöt8 *
buf
 );

910 
uöt16
 
z˛GëAârD©aLígth
–
uöt8
 
d©aTy≥
, uöt8 *
pD©a
);

921 
afIncomögMSGPackë_t
 *
z˛_gëRawAFMsg
( );

927 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_cc.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"z˛.h
"

47 
	~"z˛_gíîÆ.h
"

48 
	~"z˛_cc.h
"

50 #i‡
deföed
 ( 
INTER_PAN
 )

51 
	~"°ub_≠s.h
"

65 
	sz˛CCCBRec


67 
z˛CCCBRec
 *
	m√xt
;

68 
uöt8
 
	mídpoöt
;

69 
z˛CC_AµCÆlbacks_t
 *
	mCBs
;

70 } 
	tz˛CCCBRec_t
;

83 
z˛CCCBRec_t
 *
	gz˛CCCBs
 = (z˛CCCBRec_à*)
NULL
;

84 
uöt8
 
	gz˛CCPlugöRegi°ed
 = 
FALSE
;

93 
ZSètus_t
 
z˛CC_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

98 
ZSètus_t
 
z˛CC_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

103 
ZSètus_t
 
z˛CC_Pro˚ssInCmd_Re°¨tDevi˚
–
z˛Incomög_t
 *
pInMsg
, 
z˛CC_AµCÆlbacks_t
 *
pCBs
 );

108 
ZSètus_t
 
z˛CC_Pro˚ssInCmd_SaveSèπupP¨ams
–
z˛Incomög_t
 *
pInMsg
, 
z˛CC_AµCÆlbacks_t
 *
pCBs
 );

113 
ZSètus_t
 
z˛CC_Pro˚ssInCmd_Re°‹eSèπupP¨ams
–
z˛Incomög_t
 *
pInMsg
, 
z˛CC_AµCÆlbacks_t
 *
pCBs
 );

118 
ZSètus_t
 
z˛CC_Pro˚ssInCmd_Re£tSèπupP¨ams
–
z˛Incomög_t
 *
pInMsg
, 
z˛CC_AµCÆlbacks_t
 *
pCBs
 );

123 
ZSètus_t
 
z˛CC_Pro˚ssInCmd_Re°¨tDevi˚R•
–
z˛Incomög_t
 *
pInMsg
, 
z˛CC_AµCÆlbacks_t
 *
pCBs
 );

128 
ZSètus_t
 
z˛CC_Pro˚ssInCmd_SaveSèπupP¨amsR•
–
z˛Incomög_t
 *
pInMsg
, 
z˛CC_AµCÆlbacks_t
 *
pCBs
 );

133 
ZSètus_t
 
z˛CC_Pro˚ssInCmd_Re°‹eSèπupP¨amsR•
–
z˛Incomög_t
 *
pInMsg
, 
z˛CC_AµCÆlbacks_t
 *
pCBs
 );

138 
ZSètus_t
 
z˛CC_Pro˚ssInCmd_Re£tSèπupP¨amsR•
–
z˛Incomög_t
 *
pInMsg
, 
z˛CC_AµCÆlbacks_t
 *
pCBs
 );

151 
ZSètus_t
 
	$z˛CC_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛CC_AµCÆlbacks_t
 *
ˇŒbacks
 )

153 
z˛CCCBRec_t
 *
pNewIãm
;

154 
z˛CCCBRec_t
 *
pLo›
;

157 i‡–!
z˛CCPlugöRegi°ed
 )

159 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

160 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

161 
z˛CC_HdlIncomög
 );

162 
z˛CCPlugöRegi°ed
 = 
TRUE
;

166 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛CCCBRec_t
 ) );

167 i‡–
pNewIãm
 =
NULL
 )

169  ( 
ZMemEº‹
 );

172 
pNewIãm
->
√xt
 = (
z˛CCCBRec_t
 *)
NULL
;

173 
pNewIãm
->
ídpoöt
 =Éndpoint;

174 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

177 i‡–
z˛CCCBs
 =
NULL
 )

179 
z˛CCCBs
 = 
pNewIãm
;

184 
pLo›
 = 
z˛CCCBs
;

185  
pLo›
->
√xt
 !
NULL
 )

187 
pLo›
 =ÖLo›->
√xt
;

191 
pLo›
->
√xt
 = 
pNewIãm
;

194  ( 
ZSuc˚ss
 );

195 
	}
}

206 
z˛CC_AµCÆlbacks_t
 *
	$z˛CC_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

208 
z˛CCCBRec_t
 *
pCBs
;

210 
pCBs
 = 
z˛CCCBs
;

211  
pCBs
 !
NULL
 )

213 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

215  ( 
pCBs
->
CBs
 );

218 
pCBs
 =ÖCBs->
√xt
;

221  ( (
z˛CC_AµCÆlbacks_t
 *)
NULL
 );

222 
	}
}

235 
ZSètus_t
 
	$z˛CC_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

237 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

239 #i‡
	`deföed
 ( 
INTER_PAN
 )

240 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

242  ( 
°©
 );

245 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

248 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

250 
°©
 = 
	`z˛CC_HdlInS≥cificComm™ds
–
pInMsg
 );

255 
°©
 = 
ZFaûuª
;

261 
°©
 = 
ZFaûuª
;

264  ( 
°©
 );

265 
	}
}

277 
ZSètus_t
 
	$z˛CC_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

279 
ZSètus_t
 
°©
;

280 
z˛CC_AµCÆlbacks_t
 *
pCBs
;

283 
pCBs
 = 
	`z˛CC_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

284 i‡–
pCBs
 =
NULL
 )

286  ( 
ZFaûuª
 );

289 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

292  
pInMsg
->
hdr
.
comm™dID
 )

294 
COMMAND_CC_RESTART_DEVICE
:

295 
°©
 = 
	`z˛CC_Pro˚ssInCmd_Re°¨tDevi˚
–
pInMsg
, 
pCBs
 );

298 
COMMAND_CC_SAVE_STARTUP_PARAMS
:

299 
°©
 = 
	`z˛CC_Pro˚ssInCmd_SaveSèπupP¨ams
–
pInMsg
, 
pCBs
 );

302 
COMMAND_CC_RESTORE_STARTUP_PARAMS
:

303 
°©
 = 
	`z˛CC_Pro˚ssInCmd_Re°‹eSèπupP¨ams
–
pInMsg
, 
pCBs
 );

306 
COMMAND_CC_RESET_STARTUP_PARAMS
:

307 
°©
 = 
	`z˛CC_Pro˚ssInCmd_Re£tSèπupP¨ams
–
pInMsg
, 
pCBs
 );

311 
°©
 = 
ZFaûuª
;

317  
pInMsg
->
hdr
.
comm™dID
 )

319 
COMMAND_CC_RESTART_DEVICE_RSP
:

320 
°©
 = 
	`z˛CC_Pro˚ssInCmd_Re°¨tDevi˚R•
–
pInMsg
, 
pCBs
 );

323 
COMMAND_CC_SAVE_STARTUP_PARAMS_RSP
:

324 
°©
 = 
	`z˛CC_Pro˚ssInCmd_SaveSèπupP¨amsR•
–
pInMsg
, 
pCBs
 );

327 
COMMAND_CC_RESTORE_STARTUP_PARAMS_RSP
:

328 
°©
 = 
	`z˛CC_Pro˚ssInCmd_Re°‹eSèπupP¨amsR•
–
pInMsg
, 
pCBs
 );

331 
COMMAND_CC_RESET_STARTUP_PARAMS_RSP
:

332 
°©
 = 
	`z˛CC_Pro˚ssInCmd_Re£tSèπupP¨amsR•
–
pInMsg
, 
pCBs
 );

336 
°©
 = 
ZFaûuª
;

341  ( 
°©
 );

342 
	}
}

354 
ZSètus_t
 
	$z˛CC_Pro˚ssInCmd_Re°¨tDevi˚
–
z˛Incomög_t
 *
pInMsg
,

355 
z˛CC_AµCÆlbacks_t
 *
pCBs
 )

357 i‡–
pCBs
->
p‚Re°¨t_Devi˚
 )

359 
z˛CCRe°¨tDevi˚_t
 
cmd
;

361 
cmd
.
›ti⁄s
 = 
pInMsg
->
pD©a
[0];

362 
cmd
.
dñay
 = 
pInMsg
->
pD©a
[1];

363 
cmd
.
jôãr
 = 
pInMsg
->
pD©a
[2];

365 
pCBs
->
	`p‚Re°¨t_Devi˚
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

367  
ZCL_STATUS_CMD_HAS_RSP
;

370  
ZFaûuª
;

371 
	}
}

383 
ZSètus_t
 
	$z˛CC_Pro˚ssInCmd_SaveSèπupP¨ams
–
z˛Incomög_t
 *
pInMsg
,

384 
z˛CC_AµCÆlbacks_t
 *
pCBs
 )

386 i‡–
pCBs
->
p‚Save_SèπupP¨ams
 )

388 
z˛CCSèπupP¨ams_t
 
cmd
;

390 
cmd
.
›ti⁄s
 = 
pInMsg
->
pD©a
[0];

391 
cmd
.
ödex
 = 
pInMsg
->
pD©a
[1];

393 
pCBs
->
	`p‚Save_SèπupP¨ams
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

395  
ZCL_STATUS_CMD_HAS_RSP
;

398  
ZFaûuª
;

399 
	}
}

411 
ZSètus_t
 
	$z˛CC_Pro˚ssInCmd_Re°‹eSèπupP¨ams
–
z˛Incomög_t
 *
pInMsg
,

412 
z˛CC_AµCÆlbacks_t
 *
pCBs
 )

414 i‡–
pCBs
->
p‚Re°‹e_SèπupP¨ams
 )

416 
z˛CCSèπupP¨ams_t
 
cmd
;

418 
cmd
.
›ti⁄s
 = 
pInMsg
->
pD©a
[0];

419 
cmd
.
ödex
 = 
pInMsg
->
pD©a
[1];

421 
pCBs
->
	`p‚Re°‹e_SèπupP¨ams
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

423  
ZCL_STATUS_CMD_HAS_RSP
;

426  
ZFaûuª
;

427 
	}
}

439 
ZSètus_t
 
	$z˛CC_Pro˚ssInCmd_Re£tSèπupP¨ams
–
z˛Incomög_t
 *
pInMsg
,

440 
z˛CC_AµCÆlbacks_t
 *
pCBs
 )

442 i‡–
pCBs
->
p‚Re£t_SèπupP¨ams
 )

444 
z˛CCSèπupP¨ams_t
 
cmd
;

446 
cmd
.
›ti⁄s
 = 
pInMsg
->
pD©a
[0];

447 
cmd
.
ödex
 = 
pInMsg
->
pD©a
[1];

449 
pCBs
->
	`p‚Re£t_SèπupP¨ams
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

451  
ZCL_STATUS_CMD_HAS_RSP
;

454  
ZFaûuª
;

455 
	}
}

467 
ZSètus_t
 
	$z˛CC_Pro˚ssInCmd_Re°¨tDevi˚R•
–
z˛Incomög_t
 *
pInMsg
,

468 
z˛CC_AµCÆlbacks_t
 *
pCBs
 )

470 i‡–
pCBs
->
p‚Re°¨t_Devi˚R•
 )

472 
z˛CCSîvîP¨amsR•_t
 
r•
;

474 
r•
.
°©us
 = 
pInMsg
->
pD©a
[0];

476 
pCBs
->
	`p‚Re°¨t_Devi˚R•
–&
r•
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

478  
ZSuc˚ss
;

481  
ZFaûuª
;

482 
	}
}

494 
ZSètus_t
 
	$z˛CC_Pro˚ssInCmd_SaveSèπupP¨amsR•
–
z˛Incomög_t
 *
pInMsg
,

495 
z˛CC_AµCÆlbacks_t
 *
pCBs
 )

497 i‡–
pCBs
->
p‚Save_SèπupP¨amsR•
 )

499 
z˛CCSîvîP¨amsR•_t
 
r•
;

501 
r•
.
°©us
 = 
pInMsg
->
pD©a
[0];

503 
pCBs
->
	`p‚Save_SèπupP¨amsR•
–&
r•
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

505  
ZSuc˚ss
;

508  
ZFaûuª
;

509 
	}
}

521 
ZSètus_t
 
	$z˛CC_Pro˚ssInCmd_Re°‹eSèπupP¨amsR•
–
z˛Incomög_t
 *
pInMsg
,

522 
z˛CC_AµCÆlbacks_t
 *
pCBs
 )

524 i‡–
pCBs
->
p‚Re°‹e_SèπupP¨amsR•
 )

526 
z˛CCSîvîP¨amsR•_t
 
r•
;

528 
r•
.
°©us
 = 
pInMsg
->
pD©a
[0];

530 
pCBs
->
	`p‚Re°‹e_SèπupP¨amsR•
–&
r•
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

532  
ZSuc˚ss
;

535  
ZFaûuª
;

536 
	}
}

548 
ZSètus_t
 
	$z˛CC_Pro˚ssInCmd_Re£tSèπupP¨amsR•
–
z˛Incomög_t
 *
pInMsg
,

549 
z˛CC_AµCÆlbacks_t
 *
pCBs
 )

551 i‡–
pCBs
->
p‚Re£t_SèπupP¨amsR•
 )

553 
z˛CCSîvîP¨amsR•_t
 
r•
;

555 
r•
.
°©us
 = 
pInMsg
->
pD©a
[0];

557 
pCBs
->
	`p‚Re£t_SèπupP¨amsR•
–&
r•
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

559  
ZSuc˚ss
;

562  
ZFaûuª
;

563 
	}
}

578 
ZSètus_t
 
	$z˛CC_Síd_Re°¨tDevi˚
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

579 
z˛CCRe°¨tDevi˚_t
 *
pCmd
,

580 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

582 
uöt8
 
buf
[
CC_PACKET_LEN_RESTART_DEVICE
];

584 
buf
[0] = 
pCmd
->
›ti⁄s
;

585 
buf
[1] = 
pCmd
->
dñay
;

586 
buf
[2] = 
pCmd
->
jôãr
;

588  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

589 
COMMAND_CC_RESTART_DEVICE
, 
TRUE
,

590 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

591 
£qNum
, 
CC_PACKET_LEN_RESTART_DEVICE
, 
buf
 );

592 
	}
}

608 
ZSètus_t
 
	$z˛CC_Síd_SèπupP¨amsCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

609 
z˛CCSèπupP¨ams_t
 *
pCmd
, 
uöt8
 
cmdId
,

610 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

612 
uöt8
 
buf
[
CC_PACKET_LEN_STARTUP_PARAMS_CMD
];

614 
buf
[0] = 
pCmd
->
›ti⁄s
;

615 
buf
[1] = 
pCmd
->
ödex
;

617  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

618 
cmdId
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

619 
dißbÀDeÁu…R•
, 0, 
£qNum
,

620 
CC_PACKET_LEN_STARTUP_PARAMS_CMD
, 
buf
 );

621 
	}
}

637 
ZSètus_t
 
	$z˛CC_Síd_SîvîP¨amsR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

638 
z˛CCSîvîP¨amsR•_t
 *
pR•
, 
uöt8
 
cmdId
,

639 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

641  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

642 
cmdId
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

643 
dißbÀDeÁu…R•
, 0, 
£qNum
,

644 
CC_PACKET_LEN_SERVER_RSP
, &(
pR•
->
°©us
) );

645 
	}
}

	@Components/stack/zcl/zcl_cc.h

40 #i‚de‡
ZCL_CC_H


41 
	#ZCL_CC_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

57 
	#z˛_CCSèπupMode
–
a
 ) ( (aË& 
CC_STARTUP_MODE
 )

	)

58 
	#z˛_CCImmedüã
–
a
 ) ( (aË& 
CC_IMMEDIATE
 )

	)

69 
	#ATTRID_MASK_CC_STARTUP_PARAMS_STACK
 0x0000

	)

70 
	#ATTRID_MASK_CC_STARTUP_PARAMS_SECURITY
 0x0010

	)

71 
	#ATTRID_MASK_CC_JOIN_PARAMS
 0x0020

	)

72 
	#ATTRID_MASK_CC_END_DEVICE_PARAMS
 0x0030

	)

73 
	#ATTRID_MASK_CC_CONCENTRATOR_PARAMS
 0x0040

	)

76 
	#ATTRID_CC_SHORT_ADDRESS
 ( 0x0000 | 
ATTRID_MASK_CC_STARTUP_PARAMS_STACK
 )

	)

77 
	#ATTRID_CC_EXTENDED_PANID
 ( 0x0001 | 
ATTRID_MASK_CC_STARTUP_PARAMS_STACK
 )

	)

78 
	#ATTRID_CC_PANID
 ( 0x0002 | 
ATTRID_MASK_CC_STARTUP_PARAMS_STACK
 )

	)

79 
	#ATTRID_CC_CHANNEL_MASK
 ( 0x0003 | 
ATTRID_MASK_CC_STARTUP_PARAMS_STACK
 )

	)

80 
	#ATTRID_CC_PROTOCOL_VERSION
 ( 0x0004 | 
ATTRID_MASK_CC_STARTUP_PARAMS_STACK
 )

	)

81 
	#ATTRID_CC_STACK_PROFILE
 ( 0x0005 | 
ATTRID_MASK_CC_STARTUP_PARAMS_STACK
 )

	)

82 
	#ATTRID_CC_STARTUP_CONTROL
 ( 0x0006 | 
ATTRID_MASK_CC_STARTUP_PARAMS_STACK
 )

	)

85 
	#ATTRID_CC_TRUST_CENTER_ADDRESS
 ( 0x0000 | 
ATTRID_MASK_CC_STARTUP_PARAMS_SECURITY
 )

	)

86 
	#ATTRID_CC_TRUST_CENTER_MASTER_KEY
 ( 0x0001 | 
ATTRID_MASK_CC_STARTUP_PARAMS_SECURITY
 )

	)

87 
	#ATTRID_CC_NETWORK_KEY
 ( 0x0002 | 
ATTRID_MASK_CC_STARTUP_PARAMS_SECURITY
 )

	)

88 
	#ATTRID_CC_USE_INSECURE_JOIN
 ( 0x0003 | 
ATTRID_MASK_CC_STARTUP_PARAMS_SECURITY
 )

	)

89 
	#ATTRID_CC_PRECONFIGURED_LINK_KEY
 ( 0x0004 | 
ATTRID_MASK_CC_STARTUP_PARAMS_SECURITY
 )

	)

90 
	#ATTRID_CC_NETWORK_KEY_SEQ_NUM
 ( 0x0005 | 
ATTRID_MASK_CC_STARTUP_PARAMS_SECURITY
 )

	)

91 
	#ATTRID_CC_NETWORK_KEY_TYPE
 ( 0x0006 | 
ATTRID_MASK_CC_STARTUP_PARAMS_SECURITY
 )

	)

92 
	#ATTRID_CC_NETWORK_MANAGER_ADDRESS
 ( 0x0007 | 
ATTRID_MASK_CC_STARTUP_PARAMS_SECURITY
 )

	)

95 
	#ATTRID_CC_SCAN_ATTEMPTS
 ( 0x0000 | 
ATTRID_MASK_CC_JOIN_PARAMS
 )

	)

96 
	#ATTRID_CC_TIME_BETWEEN_SCANS
 ( 0x0001 | 
ATTRID_MASK_CC_JOIN_PARAMS
 )

	)

97 
	#ATTRID_CC_REJOIN_INTERVAL
 ( 0x0002 | 
ATTRID_MASK_CC_JOIN_PARAMS
 )

	)

98 
	#ATTRID_CC_MAX_REJOIN_INTERVAL
 ( 0x0003 | 
ATTRID_MASK_CC_JOIN_PARAMS
 )

	)

101 
	#ATTRID_CC_INDIRECT_POLL_RATE
 ( 0x0000 | 
ATTRID_MASK_CC_END_DEVICE_PARAMS
 )

	)

102 
	#ATTRID_CC_PARENT_RETRY_THRESHOLD
 ( 0x0001 | 
ATTRID_MASK_CC_END_DEVICE_PARAMS
 )

	)

105 
	#ATTRID_CC_CONCENTRATOR_FLAG
 ( 0x0000 | 
ATTRID_MASK_CC_CONCENTRATOR_PARAMS
 )

	)

106 
	#ATTRID_CC_CONCENTRATOR_RADIUS
 ( 0x0001 | 
ATTRID_MASK_CC_CONCENTRATOR_PARAMS
 )

	)

107 
	#ATTRID_CC_CONCENTRATOR_DISCOVERY_TIME
 ( 0x0002 | 
ATTRID_MASK_CC_CONCENTRATOR_PARAMS
 )

	)

115 
	#COMMAND_CC_RESTART_DEVICE
 0x0000

	)

116 
	#COMMAND_CC_SAVE_STARTUP_PARAMS
 0x0001

	)

117 
	#COMMAND_CC_RESTORE_STARTUP_PARAMS
 0x0002

	)

118 
	#COMMAND_CC_RESET_STARTUP_PARAMS
 0x0003

	)

122 
	#COMMAND_CC_RESTART_DEVICE_RSP
 0x0000

	)

123 
	#COMMAND_CC_SAVE_STARTUP_PARAMS_RSP
 0x0001

	)

124 
	#COMMAND_CC_RESTORE_STARTUP_PARAMS_RSP
 0x0002

	)

125 
	#COMMAND_CC_RESET_STARTUP_PARAMS_RSP
 0x0003

	)

132 
	#CC_STARTUP_CONTROL_OPTION_0
 0x00

133 
	#CC_STARTUP_CONTROL_OPTION_1
 0x01

134 
	#CC_STARTUP_CONTROL_OPTION_2
 0x02

135 
	#CC_STARTUP_CONTROL_OPTION_3
 0x03

136 

	)

144 
	#CC_STARTUP_MODE
 0x07

	)

145 
	#CC_IMMEDIATE
 0x08

	)

148 
	#CC_STARTUP_MODE_REPLACE_RESTART
 0x00

	)

149 
	#CC_STARTUP_MODE_ONLY_RESTART
 0x01

	)

152 
	#CC_RESET_CURRENT
 0x01

	)

153 
	#CC_RESET_ALL
 0x02

	)

154 
	#CC_ERASE_INDEX
 0x04

	)

161 
	#CC_DEFAULT_SHORT_ADDR
 0xFFFF

	)

162 
	#CC_DEFAULT_PANID
 0xFFFF

	)

163 
	#CC_DEFAULT_PROTOCOL_VERSION
 0x02

	)

164 
	#CC_DEFAULT_NETWORK_KEY_SEQ_NUM
 0x00

	)

165 
	#CC_DEFAULT_NETWORK_MANAGER_ADDR
 0x00

	)

166 
	#CC_DEFAULT_SCAN_ATTEMPTS
 0x05

	)

167 
	#CC_DEFAULT_TIME_BETWEEN_SCANS
 0x64

	)

168 
	#CC_DEFAULT_REJOIN_INTERVAL
 0x3C

	)

169 
	#CC_DEFAULT_MAX_REJOIN_INTERVAL
 0x0E10

	)

170 
	#CC_DEFAULT_CONCENTRATOR_RADIUS
 0x0F

	)

171 
	#CC_DEFAULT_CONCENTRATOR_DISCOVERY_TIME
 0x00

	)

174 
	#CC_MAX_INDIRECT_POLL_RATE
 0xFFFF

	)

175 
	#CC_MAX_PARENT_RETRY_THRESHOLD
 0xFF

	)

176 
	#CC_MAX_CONCENTRATOR_RADIUS
 0xFF

	)

177 
	#CC_MAX_CONCENTRATOR_DISCOVERY_TIME
 0xFF

	)

180 
	#CC_PACKET_LEN_RESTART_DEVICE
 0x03

	)

181 
	#CC_PACKET_LEN_STARTUP_PARAMS_CMD
 0x02

	)

182 
	#CC_PACKET_LEN_SERVER_RSP
 0x01

	)

198 
uöt8
 
›ti⁄s
;

199 
uöt8
 
dñay
;

200 
uöt8
 
jôãr
;

201 } 
	tz˛CCRe°¨tDevi˚_t
;

206 
uöt8
 
›ti⁄s
;

207 
uöt8
 
ödex
;

208 } 
	tz˛CCSèπupP¨ams_t
;

213 
uöt8
 
°©us
;

214 } 
	tz˛CCSîvîP¨amsR•_t
;

223 (*
z˛CC_Re°¨t_Devi˚_t
)–
	tz˛CCRe°¨tDevi˚_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

226 (*
z˛CC_Save_SèπupP¨ams_t
)–
	tz˛CCSèπupP¨ams_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

229 (*
z˛CC_Re°‹e_SèπupP¨ams_t
)–
	tz˛CCSèπupP¨ams_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

232 (*
z˛CC_Re£t_SèπupP¨ams_t
)–
	tz˛CCSèπupP¨ams_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

237 (*
z˛CC_Re°¨t_Devi˚R•_t
)–
	tz˛CCSîvîP¨amsR•_t
 *
	tpR•
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

240 (*
z˛CC_Save_SèπupP¨amsR•_t
)–
	tz˛CCSîvîP¨amsR•_t
 *
	tpR•
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

243 (*
z˛CC_Re°‹e_SèπupP¨amsR•_t
)–
	tz˛CCSîvîP¨amsR•_t
 *
	tpR•
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

246 (*
z˛CC_Re£t_SèπupP¨amsR•_t
)–
	tz˛CCSîvîP¨amsR•_t
 *
	tpR•
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

253 
z˛CC_Re°¨t_Devi˚_t
 
p‚Re°¨t_Devi˚
;

254 
z˛CC_Save_SèπupP¨ams_t
 
p‚Save_SèπupP¨ams
;

255 
z˛CC_Re°‹e_SèπupP¨ams_t
 
p‚Re°‹e_SèπupP¨ams
;

256 
z˛CC_Re£t_SèπupP¨ams_t
 
p‚Re£t_SèπupP¨ams
;

257 
z˛CC_Re°¨t_Devi˚R•_t
 
p‚Re°¨t_Devi˚R•
;

258 
z˛CC_Save_SèπupP¨amsR•_t
 
p‚Save_SèπupP¨amsR•
;

259 
z˛CC_Re°‹e_SèπupP¨amsR•_t
 
p‚Re°‹e_SèπupP¨amsR•
;

260 
z˛CC_Re£t_SèπupP¨amsR•_t
 
p‚Re£t_SèπupP¨amsR•
;

261 } 
	tz˛CC_AµCÆlbacks_t
;

276 
	#z˛CC_Síd_SaveSèπupP¨ams
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛CC_Síd_SèπupP¨amsCmd
–◊), (b), (c), 
COMMAND_CC_SAVE_STARTUP_PARAMS
, (d), (eË)

	)

283 
	#z˛CC_Síd_Re°‹eSèπupP¨ams
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛CC_Síd_SèπupP¨amsCmd
–◊), (b), (c), 
COMMAND_CC_RESTORE_STARTUP_PARAMS
, (d), (eË)

	)

290 
	#z˛CC_Síd_Re£tSèπupP¨ams
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛CC_Síd_SèπupP¨amsCmd
–◊), (b), (c), 
COMMAND_CC_RESET_STARTUP_PARAMS
, (d), (eË)

	)

297 
	#z˛CC_Síd_Re°¨tDevi˚R•
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛CC_Síd_SîvîP¨amsR•
–◊), (b), (c), 
COMMAND_CC_RESTART_DEVICE_RSP
, (d), (eË)

	)

304 
	#z˛CC_Síd_SaveSèπupP¨amsR•
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛CC_Síd_SîvîP¨amsR•
–◊), (b), (c), 
COMMAND_CC_SAVE_STARTUP_PARAMS_RSP
, (d), (eË)

	)

311 
	#z˛CC_Síd_Re°‹eSèπupP¨amsR•
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛CC_Síd_SîvîP¨amsR•
–◊), (b), (c), 
COMMAND_CC_RESTORE_STARTUP_PARAMS_RSP
, (d), (eË)

	)

318 
	#z˛CC_Síd_Re£tSèπupP¨amsR•
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛CC_Síd_SîvîP¨amsR•
–◊), (b), (c), 
COMMAND_CC_RESET_STARTUP_PARAMS_RSP
, (d), (eË)

	)

328 
ZSètus_t
 
z˛CC_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛CC_AµCÆlbacks_t
 *
ˇŒbacks
 );

333 
ZSètus_t
 
z˛CC_Síd_Re°¨tDevi˚
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

334 
z˛CCRe°¨tDevi˚_t
 *
pCmd
,

335 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

340 
ZSètus_t
 
z˛CC_Síd_SèπupP¨amsCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

341 
z˛CCSèπupP¨ams_t
 *
pCmd
, 
uöt8
 
cmdId
,

342 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

347 
ZSètus_t
 
z˛CC_Síd_SîvîP¨amsR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

348 
z˛CCSîvîP¨amsR•_t
 *
pCmd
, 
uöt8
 
cmdId
,

349 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

351 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_cert_data.c

47 
	~"ZComDef.h
"

49 #i‡
deföed
 
TEST_CERT_DATA


57 #i‡
ZG_BUILD_COORDINATOR_TYPE


58 #¥agm®
loˇti⁄
="IEEE_ADDRESS_SPACE"

59 c⁄° 
uöt8
 
	g˚πExãndedAddªss
[
Z_EXTADDR_LEN
] = {

62 #¥agm®
ªquúed
=
˚πExãndedAddªss


63 #¥agm®
loˇti⁄
="IMPLICIT_CERTIFICATE_ADDRESS_SPACE"

64 c⁄° 
uöt8
 
	gIm∂icôCîtifiˇã
[
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
] = {

72 #¥agm®
ªquúed
=
Im∂icôCîtifiˇã


73 #¥agm®
loˇti⁄
="CA_PUBLIC_KEY_ADDRESS_SPACE"

74 c⁄° 
uöt8
 
	gCA_Public_Key
[
ZCL_KE_CA_PUBLIC_KEY_LEN
] = {

79 #¥agm®
ªquúed
=
CA_Public_Key


80 #¥agm®
loˇti⁄
="DEV_PRIVATE_KEY_ADDRESS_SPACE"

81 c⁄° 
uöt8
 
	gDevi˚Priv©eKey
[
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
] = {

86 #¥agm®
ªquúed
=
Devi˚Priv©eKey


87 #ñi‡
ZG_BUILD_RTR_TYPE


88 #¥agm®
loˇti⁄
="IEEE_ADDRESS_SPACE"

89 c⁄° 
uöt8
 
	g˚πExãndedAddªss
[
Z_EXTADDR_LEN
] = {

92 #¥agm®
ªquúed
=
˚πExãndedAddªss


93 #¥agm®
loˇti⁄
="IMPLICIT_CERTIFICATE_ADDRESS_SPACE"

94 c⁄° 
uöt8
 
	gIm∂icôCîtifiˇã
[
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
] = {

102 #¥agm®
ªquúed
=
Im∂icôCîtifiˇã


103 #¥agm®
loˇti⁄
="CA_PUBLIC_KEY_ADDRESS_SPACE"

104 c⁄° 
uöt8
 
	gCA_Public_Key
[
ZCL_KE_CA_PUBLIC_KEY_LEN
] = {

109 #¥agm®
ªquúed
=
CA_Public_Key


110 #¥agm®
loˇti⁄
="DEV_PRIVATE_KEY_ADDRESS_SPACE"

111 c⁄° 
uöt8
 
	gDevi˚Priv©eKey
[
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
] = {

116 #¥agm®
ªquúed
=
Devi˚Priv©eKey


118 #¥agm®
loˇti⁄
="IEEE_ADDRESS_SPACE"

119 c⁄° 
uöt8
 
	g˚πExãndedAddªss
[
Z_EXTADDR_LEN
] = {

122 #¥agm®
ªquúed
=
˚πExãndedAddªss


123 #¥agm®
loˇti⁄
="IMPLICIT_CERTIFICATE_ADDRESS_SPACE"

124 c⁄° 
uöt8
 
	gIm∂icôCîtifiˇã
[
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
] = {

132 #¥agm®
ªquúed
=
Im∂icôCîtifiˇã


133 #¥agm®
loˇti⁄
="CA_PUBLIC_KEY_ADDRESS_SPACE"

134 c⁄° 
uöt8
 
	gCA_Public_Key
[
ZCL_KE_CA_PUBLIC_KEY_LEN
] = {

139 #¥agm®
ªquúed
=
CA_Public_Key


140 #¥agm®
loˇti⁄
="DEV_PRIVATE_KEY_ADDRESS_SPACE"

141 c⁄° 
uöt8
 
	gDevi˚Priv©eKey
[
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
] = {

146 #¥agm®
ªquúed
=
Devi˚Priv©eKey


	@Components/stack/zcl/zcl_closures.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"z˛.h
"

47 
	~"z˛_gíîÆ.h
"

48 
	~"z˛_˛osuªs.h
"

50 #i‡
deföed
 ( 
INTER_PAN
 )

51 
	~"°ub_≠s.h
"

66 
	sz˛ClosuªsCBRec


68 
z˛ClosuªsCBRec
 *
	m√xt
;

69 
uöt8
 
	mídpoöt
;

70 
z˛Closuªs_AµCÆlbacks_t
 *
	mCBs
;

71 } 
	tz˛ClosuªsCBRec_t
;

84 
z˛ClosuªsCBRec_t
 *
	gz˛ClosuªsCBs
 = (z˛ClosuªsCBRec_à*)
NULL
;

85 
uöt8
 
	gz˛ClosuªsPlugöRegi°ed
 = 
FALSE
;

90 
ZSètus_t
 
z˛Closuªs_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

91 
ZSètus_t
 
z˛Closuªs_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

92 
z˛Closuªs_AµCÆlbacks_t
 *
z˛Closuªs_FödCÆlbacks
–
uöt8
 
ídpoöt
 );

93 
ZSètus_t
 
z˛Closuªs_Pro˚ssInClosuªsCmds
–
z˛Incomög_t
 *
pInMsg
 );

95 #ifde‡
ZCL_DOORLOCK


96 
ZSètus_t
 
z˛Closuªs_Pro˚ssInDo‹Lock
–
z˛Incomög_t
 *
pInMsg
,

97 
z˛Closuªs_AµCÆlbacks_t
 *
pCBs
 );

100 #ifde‡
ZCL_WINDOWCOVERING


101 
ZSètus_t
 
z˛Closuªs_Pro˚ssInWödowCovîög
–
z˛Incomög_t
 *
pInMsg
,

102 
z˛Closuªs_AµCÆlbacks_t
 *
pCBs
 );

115 
ZSètus_t
 
	$z˛Closuªs_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛Closuªs_AµCÆlbacks_t
 *
ˇŒbacks
 )

117 
z˛ClosuªsCBRec_t
 *
pNewIãm
;

118 
z˛ClosuªsCBRec_t
 *
pLo›
;

121 i‡–!
z˛ClosuªsPlugöRegi°ed
 )

123 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_CLOSURES_SHADE_CONFIG
,

124 
ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING
,

125 
z˛Closuªs_HdlIncomög
 );

126 
z˛ClosuªsPlugöRegi°ed
 = 
TRUE
;

130 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛ClosuªsCBRec_t
 ) );

131 i‡–
pNewIãm
 =
NULL
 )

132  (
ZMemEº‹
);

134 
pNewIãm
->
√xt
 = (
z˛ClosuªsCBRec_t
 *)
NULL
;

135 
pNewIãm
->
ídpoöt
 =Éndpoint;

136 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

139 i‡–
z˛ClosuªsCBs
 =
NULL
 )

141 
z˛ClosuªsCBs
 = 
pNewIãm
;

146 
pLo›
 = 
z˛ClosuªsCBs
;

147  
pLo›
->
√xt
 !
NULL
 )

148 
pLo›
 =ÖLo›->
√xt
;

151 
pLo›
->
√xt
 = 
pNewIãm
;

153  ( 
ZSuc˚ss
 );

154 
	}
}

165 
z˛Closuªs_AµCÆlbacks_t
 *
	$z˛Closuªs_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

167 
z˛ClosuªsCBRec_t
 *
pCBs
;

169 
pCBs
 = 
z˛ClosuªsCBs
;

170  
pCBs
 )

172 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

173  ( 
pCBs
->
CBs
 );

174 
pCBs
 =ÖCBs->
√xt
;

176  ( (
z˛Closuªs_AµCÆlbacks_t
 *)
NULL
 );

177 
	}
}

191 
ZSètus_t
 
	$z˛Closuªs_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

193 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

195 #i‡
	`deföed
 ( 
INTER_PAN
 )

196 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

197  ( 
°©
 );

199 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

202 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

204 
°©
 = 
	`z˛Closuªs_HdlInS≥cificComm™ds
–
pInMsg
 );

209 
°©
 = 
ZFaûuª
;

215 
°©
 = 
ZFaûuª
;

217  ( 
°©
 );

218 
	}
}

230 
ZSètus_t
 
	$z˛Closuªs_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

232 
ZSètus_t
 
°©
;

233 
z˛Closuªs_AµCÆlbacks_t
 *
pCBs
;

236 
pCBs
 = 
	`z˛Closuªs_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

237 i‡–
pCBs
 =
NULL
 )

238  ( 
ZFaûuª
 );

240  
pInMsg
->
msg
->
˛u°îId
 )

242 
ZCL_CLOSURES_LOGICAL_CLUSTER_ID_SHADE_CONFIG
:

243 
°©
 = 
	`z˛Closuªs_Pro˚ssInClosuªsCmds
–
pInMsg
 );

246 
ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK
:

247 #ifde‡
ZCL_DOORLOCK


248 
°©
 = 
	`z˛Closuªs_Pro˚ssInDo‹Lock
–
pInMsg
, 
pCBs
 );

252 
ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING
:

253 #ifde‡
ZCL_WINDOWCOVERING


254 
°©
 = 
	`z˛Closuªs_Pro˚ssInWödowCovîög
–
pInMsg
, 
pCBs
 );

259 
°©
 = 
ZFaûuª
;

263  ( 
°©
 );

264 
	}
}

276 
ZSètus_t
 
	$z˛Closuªs_Pro˚ssInClosuªsCmds
–
z˛Incomög_t
 *
pInMsg
 )

278 
ZSètus_t
 
°©
 = 
ZFaûuª
;

283 ()
pInMsg
;

284 i‡–
°©
 !
ZFaûuª
 )

285 
	`z˛Closuªs_FödCÆlbacks
( 0 );

287  ( 
°©
 );

288 
	}
}

290 #ifde‡
ZCL_DOORLOCK


301 
ZSètus_t
 
	$z˛Closuªs_Pro˚ssInDo‹Lock
–
z˛Incomög_t
 *
pInMsg
,

302 
z˛Closuªs_AµCÆlbacks_t
 *
pCBs
 )

304 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

306 
pInMsg
->
hdr
.
comm™dID
)

308 
COMMAND_CLOSURES_LOCK_DOOR
:

309 
COMMAND_CLOSURES_UNLOCK_DOOR
:

310 i‡–
pCBs
->
p‚Do‹Lock
 )

312 
pCBs
->
	`p‚Do‹Lock
–
pInMsg
->
hdr
.
comm™dID
, &’InMsg->
msg
->
§cAddr
),ÖInMsg->hdr.
å™sSeqNum
 );

317  ( 
ZCL_STATUS_UNSUP_CLUSTER_COMMAND
 );

322 
pInMsg
->
hdr
.
comm™dID
)

324 
COMMAND_CLOSURES_LOCK_DOOR_RESPONSE
:

325 
COMMAND_CLOSURES_UNLOCK_DOOR_RESPONSE
:

326 i‡–
pCBs
->
p‚Do‹LockRes
 )

328 
pCBs
->
	`p‚Do‹LockRes
–
pInMsg
->
hdr
.
comm™dID
, &’InMsg->
msg
->
§cAddr
),ÖInMsg->hdr.
å™sSeqNum
 );

333  ( 
ZCL_STATUS_UNSUP_CLUSTER_COMMAND
 );

337  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

338 
	}
}

355 
ZSètus_t
 
	$z˛Closuªs_SídDo‹LockReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

356 
uöt8
 
cmd
, 
uöt16
 
˛u°îID
,

357 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

359  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK
,

360 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

361 
dißbÀDeÁu…R•
, 0, 
£qNum
, 0, 
NULL
 );

362 
	}
}

380 
ZSètus_t
 
	$z˛Closuªs_SídDo‹LockRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

381 
uöt8
 
cmd
, 
uöt16
 
˛u°îID
,

382 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
,

383 
uöt8
 
°©us
 )

385 
uöt8
 
∑ylﬂd
[
DOORLOCK_RES_PAYLOAD_LEN
];

387 
∑ylﬂd
[0] = 
°©us
;

388  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK
,

389 
cmd
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

390 
dißbÀDeÁu…R•
, 0, 
£qNum
,

391 
DOORLOCK_RES_PAYLOAD_LEN
, 
∑ylﬂd
 );

392 
	}
}

395 #ifde‡
ZCL_WINDOWCOVERING


405 
ZSètus_t
 
	$z˛Closuªs_Pro˚ssInWödowCovîög
–
z˛Incomög_t
 *
pInMsg
,

406 
z˛Closuªs_AµCÆlbacks_t
 *
pCBs
 )

408 
ZSètus_t
 
°©us
 = 
ZCL_STATUS_SUCCESS
;

409 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

411 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

413  
pInMsg
->
hdr
.
comm™dID
 )

415 
COMMAND_CLOSURES_UP_OPEN
:

416 i‡–
pCBs
->
p‚WödowCovîögUpO≥n
 )

418 
pCBs
->
	`p‚WödowCovîögUpO≥n
();

422 
COMMAND_CLOSURES_DOWN_CLOSE
:

423 i‡–
pCBs
->
p‚WödowCovîögDownClo£
 )

425 
pCBs
->
	`p‚WödowCovîögDownClo£
();

429 
COMMAND_CLOSURES_STOP
:

430 i‡–
pCBs
->
p‚WödowCovîögSt›
 )

432 
pCBs
->
	`p‚WödowCovîögSt›
();

436 
COMMAND_CLOSURES_GO_TO_LIFT_SETPOINT
:

437 i‡–
pCBs
->
p‚WödowCovîögGŸoLi·Sëpoöt
 )

439 
°©us
 = 
pCBs
->
	`p‚WödowCovîögGŸoLi·Sëpoöt
–
pD©a
[0] );

443 
COMMAND_CLOSURES_GO_TO_LIFT_VALUE
:

444 i‡–
pCBs
->
p‚WödowCovîögGŸoLi·VÆue
 )

446 i‡–
pCBs
->
	`p‚WödowCovîögGŸoLi·VÆue
–
	`BUILD_UINT16
–
pD©a
[0],ÖD©a[1] ) ) =
FALSE
 )

448 
°©us
 = 
ZCL_STATUS_INVALID_VALUE
;

453 
COMMAND_CLOSURES_GO_TO_LIFT_PERCENTAGE
:

454 i‡–
pCBs
->
p‚WödowCovîögGŸoLi·Pî˚¡age
 )

456 i‡–
pCBs
->
	`p‚WödowCovîögGŸoLi·Pî˚¡age
–
pD©a
[0] ) =
FALSE
 )

458 
°©us
 = 
ZCL_STATUS_INVALID_VALUE
;

463 
COMMAND_CLOSURES_GO_TO_TILT_SETPOINT
:

464 i‡–
pCBs
->
p‚WödowCovîögGŸoTûtSëpoöt
 )

466 
°©us
 = 
pCBs
->
	`p‚WödowCovîögGŸoTûtSëpoöt
–
pD©a
[0] );

470 
COMMAND_CLOSURES_GO_TO_TILT_VALUE
:

471 i‡–
pCBs
->
p‚WödowCovîögGŸoTûtVÆue
 )

473 i‡–
pCBs
->
	`p‚WödowCovîögGŸoTûtVÆue
–
	`BUILD_UINT16
–
pD©a
[0],ÖD©a[1] ) ) =
FALSE
 )

475 
°©us
 = 
ZCL_STATUS_INVALID_VALUE
;

480 
COMMAND_CLOSURES_GO_TO_TILT_PERCENTAGE
:

481 i‡–
pCBs
->
p‚WödowCovîögGŸoTûtPî˚¡age
 )

483 i‡–
pCBs
->
	`p‚WödowCovîögGŸoTûtPî˚¡age
–
pD©a
[0] ) =
FALSE
 )

485 
°©us
 = 
ZCL_STATUS_INVALID_VALUE
;

490 
COMMAND_CLOSURES_PROGRAM_SETPOINT
:

491 i‡–
pCBs
->
p‚WödowCovîögProgømSëpoöt
 )

493 
¥ogømSëpoötPaylﬂd_t
 
£çoöt
;

494 if–
pInMsg
->
pD©aLí
 =
ZCL_WC_PROGRAMSETPOINTREQ_VER1_PAYLOADLEN
 )

496 
£çoöt
.
vîsi⁄
 = 
¥ogømSëpoötVîsi⁄1
;

497 
£çoöt
.
£çoötTy≥
 = (
£çoötTy≥_t
)
pD©a
[0];

498 
£çoöt
.
£çoötIndex
 = 
pD©a
[1];

499 
£çoöt
.
£çoötVÆue
 = 
	`BUILD_UINT16
–
pD©a
[2],ÖData[3] );

501 if–
pInMsg
->
pD©aLí
 =
ZCL_WC_PROGRAMSETPOINTREQ_VER2_PAYLOADLEN
 )

503 
£çoöt
.
vîsi⁄
 = 
¥ogømSëpoötVîsi⁄2
;

504 
£çoöt
.
£çoötIndex
 = 
pD©a
[0];

508  
ZCL_STATUS_INVALID_VALUE
;

510 i‡–
pCBs
->
	`p‚WödowCovîögProgømSëpoöt
–&
£çoöt
 ) =
FALSE
 )

512 
°©us
 = 
ZCL_STATUS_INSUFFICIENT_SPACE
;

518 –
ZCL_STATUS_UNSUP_CLUSTER_COMMAND
 );

523  ( 
°©us
 );

524 
	}
}

540 
ZSètus_t
 
	$z˛Closuªs_WCSim∂eReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

541 
uöt8
 
cmd
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

543  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING
,

544 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

545 
dißbÀDeÁu…R•
, 0, 
£qNum
, 0, 
NULL
 );

546 
	}
}

563 
ZSètus_t
 
	$z˛Closuªs_WCSídGoToSëpoötReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

564 
uöt8
 
cmd
, uöt8 
dißbÀDeÁu…R•
,

565 
uöt8
 
£qNum
, uöt8 
SëpoötIndex
 )

567 
uöt8
 
buf
[
ZCL_WC_GOTOSETPOINTREQ_PAYLOADLEN
];

569 
buf
[0] = 
SëpoötIndex
;

571  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING
,

572 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

573 
dißbÀDeÁu…R•
, 0, 
£qNum
,

574 
ZCL_WC_GOTOSETPOINTREQ_PAYLOADLEN
, 
buf
 );

575 
	}
}

592 
ZSètus_t
 
	$z˛Closuªs_WCSídGoToVÆueReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

593 
uöt8
 
cmd
, uöt8 
dißbÀDeÁu…R•
,

594 
uöt8
 
£qNum
, 
uöt16
 
VÆue
 )

596 
uöt8
 
buf
[
ZCL_WC_GOTOVALUEREQ_PAYLOADLEN
];

598 
buf
[0] = 
	`LO_UINT16
–
VÆue
 );

599 
buf
[1] = 
	`HI_UINT16
–
VÆue
 );

601  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING
,

602 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

603 
dißbÀDeÁu…R•
, 0, 
£qNum
,

604 
ZCL_WC_GOTOVALUEREQ_PAYLOADLEN
, 
buf
 );

605 
	}
}

621 
ZSètus_t
 
	$z˛Closuªs_WCSídGoToPî˚¡ageReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

622 
uöt8
 
cmd
, uöt8 
dißbÀDeÁu…R•
,

623 
uöt8
 
£qNum
, uöt8 
≥r˚¡ageVÆue
 )

625 
uöt8
 
buf
[
ZCL_WC_GOTOPERCENTAGEREQ_PAYLOADLEN
];

627 
buf
[0] = 
≥r˚¡ageVÆue
;

629  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING
,

630 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

631 
dißbÀDeÁu…R•
, 0, 
£qNum
,

632 
ZCL_WC_GOTOPERCENTAGEREQ_PAYLOADLEN
, 
buf
 );

633 
	}
}

649 
ZSètus_t
 
	$z˛Closuªs_WCSídProgømSëpoötReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

650 
uöt8
 
cmd
, uöt8 
dißbÀDeÁu…R•
,

651 
uöt8
 
£qNum
, 
¥ogømSëpoötPaylﬂd_t
 *
¥ogømSëpoöt
 )

653 
uöt8
 
buf
[
ZCL_WC_PROGRAMSETPOINTREQ_VER1_PAYLOADLEN
];

654 
uöt8
 
Àn
;

656 if–
¥ogømSëpoöt
->
vîsi⁄
 =
¥ogømSëpoötVîsi⁄1
 )

658 
buf
[0] = 
¥ogømSëpoöt
->
£çoötTy≥
;

659 
buf
[1] = 
¥ogømSëpoöt
->
£çoötIndex
;

660 
buf
[2] = 
	`LO_UINT16
–
¥ogømSëpoöt
->
£çoötVÆue
 );

661 
buf
[3] = 
	`HI_UINT16
–
¥ogømSëpoöt
->
£çoötVÆue
 );

663 
Àn
 = 
ZCL_WC_PROGRAMSETPOINTREQ_VER1_PAYLOADLEN
;

665 if–
¥ogømSëpoöt
->
vîsi⁄
 =
¥ogømSëpoötVîsi⁄2
 )

667 
buf
[0] = 
¥ogømSëpoöt
->
£çoötIndex
;

669 
Àn
 = 
ZCL_WC_PROGRAMSETPOINTREQ_VER2_PAYLOADLEN
;

673 –
ZFaûuª
 );

675  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING
,

676 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

677 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

678 
	}
}

	@Components/stack/zcl/zcl_closures.h

40 #i‚de‡
ZCL_CLOSURES_H


41 
	#ZCL_CLOSURES_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

61 
	#ATTRID_CLOSURES_PHYSICAL_CLOSED_LIMIT
 0x0000

	)

62 
	#ATTRID_CLOSURES_MOTOR_STEP_SIZE
 0x0001

	)

63 
	#ATTRID_CLOSURES_STATUS
 0x0002

	)

65 
	#CLOSURES_STATUS_SHADE_IS_OPERATIONAL
 0x01

	)

66 
	#CLOSURES_STATUS_SHADE_IS_ADJUSTING
 0x02

	)

67 
	#CLOSURES_STATUS_SHADE_DIRECTION
 0x04

	)

68 
	#CLOSURES_STATUS_SHADE_MOTOR_FORWARD_DIRECTION
 0x08

	)

70 
	#ATTRID_CLOSURES_CLOSED_LIMIT
 0x0010

	)

71 
	#ATTRID_CLOSURES_MODE
 0x0012

	)

73 
	#CLOSURES_MODE_NORMAL_MODE
 0x00

	)

74 
	#CLOSURES_MODE_CONFIGURE_MODE
 0x01

	)

81 
	#ZCL_CLOSURES_LOGICAL_CLUSTER_ID_SHADE_CONFIG
 0x0010

	)

87 
	#ATTRID_CLOSURES_LOCK_STATE
 0x0000

	)

88 
	#ATTRID_CLOSURES_LOCK_TYPE
 0x0001

	)

89 
	#ATTRID_CLOSURES_ACTUATOR_ENABLED
 0x0002

	)

90 
	#ATTRID_CLOSURES_DOOR_STATE
 0x0003

	)

91 
	#ATTRID_CLOSURES_NUM_OF_DOOR_OPEN_EVENTS
 0x0004

	)

92 
	#ATTRID_CLOSURES_NUM_OF_DOOR_CLOSED_EVENTS
 0x0005

	)

93 
	#ATTRID_CLOSURES_OPEN_PERIOD
 0x0006

	)

96 
	#CLOSURES_LOCK_STATE_NOT_FULLY_LOCKED
 0x00

	)

97 
	#CLOSURES_LOCK_STATE_LOCKED
 0x01

	)

98 
	#CLOSURES_LOCK_STATE_UNLOCKED
 0x02

	)

101 
	#CLOSURES_LOCK_TYPE_DEADBOLT
 0x00

	)

102 
	#CLOSURES_LOCK_TYPE_MAGNETIC
 0x01

	)

103 
	#CLOSURES_LOCK_TYPE_OTHER
 0x02

	)

106 
	#CLOSURES_DOOR_STATE_OPEN
 0x00

	)

107 
	#CLOSURES_DOOR_STATE_CLOSED
 0x01

	)

108 
	#CLOSURES_DOOR_STATE_ERROR_JAMMED
 0x02

	)

109 
	#CLOSURES_DOOR_STATE_ERROR_FORCED_OPEN
 0x03

	)

110 
	#CLOSURES_DOOR_STATE_ERROR_UNSPECIFIED
 0x04

	)

115 
	#COMMAND_CLOSURES_LOCK_DOOR
 0x00

	)

116 
	#COMMAND_CLOSURES_UNLOCK_DOOR
 0x01

	)

118 
	#COMMAND_CLOSURES_LOCK_DOOR_RESPONSE
 0x00

	)

119 
	#COMMAND_CLOSURES_UNLOCK_DOOR_RESPONSE
 0x01

	)

121 
	#DOORLOCK_RES_PAYLOAD_LEN
 0x01

	)

126 
	#ATTRSET_WINDOW_COVERING_INFO
 0x0000

	)

127 
	#ATTRSET_WINDOW_COVERING_SETTINGS
 0x0010

	)

133 
	#ATTRID_CLOSURES_WINDOW_COVERING_TYPE
 ( 
ATTRSET_WINDOW_COVERING_INFO
 + 0x0000 )

	)

134 
	#ATTRID_CLOSURES_PHYSICAL_CLOSE_LIMIT_LIFT_CM
 ( 
ATTRSET_WINDOW_COVERING_INFO
 + 0x0001 )

	)

135 
	#ATTRID_CLOSURES_PHYSICAL_CLOSE_LIMIT_TILT_DDEGREE
 ( 
ATTRSET_WINDOW_COVERING_INFO
 + 0x0002 )

	)

136 
	#ATTRID_CLOSURES_CURRENT_POSITION_LIFT_CM
 ( 
ATTRSET_WINDOW_COVERING_INFO
 + 0x0003 )

	)

137 
	#ATTRID_CLOSURES_CURRENT_POSITION_TILT_DDEGREE
 ( 
ATTRSET_WINDOW_COVERING_INFO
 + 0x0004 )

	)

138 
	#ATTRID_CLOSURES_NUM_OF_ACTUATION_LIFT
 ( 
ATTRSET_WINDOW_COVERING_INFO
 + 0x0005 )

	)

139 
	#ATTRID_CLOSURES_NUM_OF_ACTUATION_TILT
 ( 
ATTRSET_WINDOW_COVERING_INFO
 + 0x0006 )

	)

140 
	#ATTRID_CLOSURES_CONFIG_STATUS
 ( 
ATTRSET_WINDOW_COVERING_INFO
 + 0x0007 )

	)

141 
	#ATTRID_CLOSURES_CURRENT_POSITION_LIFT_PERCENTAGE
 ( 
ATTRSET_WINDOW_COVERING_INFO
 + 0x0008 )

	)

142 
	#ATTRID_CLOSURES_CURRENT_POSITION_TILT_PERCENTAGE
 ( 
ATTRSET_WINDOW_COVERING_INFO
 + 0x0009 )

	)

145 
	#ATTRID_CLOSURES_INSTALLED_OPEN_LIMIT_LIFT_CM
 ( 
ATTRSET_WINDOW_COVERING_SETTINGS
 + 0x0000 )

	)

146 
	#ATTRID_CLOSURES_INSTALLED_CLOSED_LIMIT_LIFT_CM
 ( 
ATTRSET_WINDOW_COVERING_SETTINGS
 + 0x0001 )

	)

147 
	#ATTRID_CLOSURES_INSTALLED_OPEN_LIMIT_TILT_DDEGREE
 ( 
ATTRSET_WINDOW_COVERING_SETTINGS
 + 0x0002 )

	)

148 
	#ATTRID_CLOSURES_INSTALLED_CLOSED_LIMIT_TILT_DDEGREE
 ( 
ATTRSET_WINDOW_COVERING_SETTINGS
 + 0x0003 )

	)

149 
	#ATTRID_CLOSURES_VELOCITY_LIFT
 ( 
ATTRSET_WINDOW_COVERING_SETTINGS
 + 0x0004 )

	)

150 
	#ATTRID_CLOSURES_ACCELERATION_TIME_LIFT
 ( 
ATTRSET_WINDOW_COVERING_SETTINGS
 + 0x0005 )

	)

151 
	#ATTRID_CLOSURES_DECELERATION_TIME_LIFT
 ( 
ATTRSET_WINDOW_COVERING_SETTINGS
 + 0x0006 )

	)

152 
	#ATTRID_CLOSURES_WINDOW_COVERING_MODE
 ( 
ATTRSET_WINDOW_COVERING_SETTINGS
 + 0x0007 )

	)

153 
	#ATTRID_CLOSURES_INTERMEDIATE_SETPOINTS_LIFT
 ( 
ATTRSET_WINDOW_COVERING_SETTINGS
 + 0x0008 )

	)

154 
	#ATTRID_CLOSURES_INTERMEDIATE_SETPOINTS_TILT
 ( 
ATTRSET_WINDOW_COVERING_SETTINGS
 + 0x0009 )

	)

157 
	#CLOSURES_WINDOW_COVERING_TYPE_ROLLERSHADE
 0x00

	)

158 
	#CLOSURES_WINDOW_COVERING_TYPE_ROLLERSHADE_2_MOTOR
 0x01

	)

159 
	#CLOSURES_WINDOW_COVERING_TYPE_ROLLERSHADE_EXTERIOR
 0x02

	)

160 
	#CLOSURES_WINDOW_COVERING_TYPE_ROLLERSHADE_EXTERIOR_2_MOTOR
 0x03

	)

161 
	#CLOSURES_WINDOW_COVERING_TYPE_DRAPERY
 0x04

	)

162 
	#CLOSURES_WINDOW_COVERING_TYPE_AWNING
 0x05

	)

163 
	#CLOSURES_WINDOW_COVERING_TYPE_SHUTTER
 0x06

	)

164 
	#CLOSURES_WINDOW_COVERING_TYPE_TILT_BLIND_TILT_ONLY
 0x07

	)

165 
	#CLOSURES_WINDOW_COVERING_TYPE_TILT_BLIND_LIFT_AND_TILT
 0x08

	)

166 
	#CLOSURES_WINDOW_COVERING_TYPE_PROJECTOR_SCREEN
 0x09

	)

172 
	#COMMAND_CLOSURES_UP_OPEN
 ( 0x00 )

	)

173 
	#COMMAND_CLOSURES_DOWN_CLOSE
 ( 0x01 )

	)

174 
	#COMMAND_CLOSURES_STOP
 ( 0x02 )

	)

175 
	#COMMAND_CLOSURES_GO_TO_LIFT_SETPOINT
 ( 0x03 )

	)

176 
	#COMMAND_CLOSURES_GO_TO_LIFT_VALUE
 ( 0x04 )

	)

177 
	#COMMAND_CLOSURES_GO_TO_LIFT_PERCENTAGE
 ( 0x05 )

	)

178 
	#COMMAND_CLOSURES_GO_TO_TILT_SETPOINT
 ( 0x06 )

	)

179 
	#COMMAND_CLOSURES_GO_TO_TILT_VALUE
 ( 0x07 )

	)

180 
	#COMMAND_CLOSURES_GO_TO_TILT_PERCENTAGE
 ( 0x08 )

	)

181 
	#COMMAND_CLOSURES_PROGRAM_SETPOINT
 ( 0x09 )

	)

183 
	#ZCL_WC_GOTOSETPOINTREQ_PAYLOADLEN
 ( 1 )

	)

184 
	#ZCL_WC_GOTOVALUEREQ_PAYLOADLEN
 ( 2 )

	)

185 
	#ZCL_WC_GOTOPERCENTAGEREQ_PAYLOADLEN
 ( 1 )

	)

186 
	#ZCL_WC_PROGRAMSETPOINTREQ_VER1_PAYLOADLEN
 ( 4 )

	)

187 
	#ZCL_WC_PROGRAMSETPOINTREQ_VER2_PAYLOADLEN
 ( 1 )

	)

197 
uöt8
 
O≥øti⁄Æ
 : 1;

198 
uöt8
 
O∆öe
 : 1;

199 
uöt8
 
Comm™dsRevî£d
 : 1;

200 
uöt8
 
Li·C⁄åﬁ
 : 1;

201 
uöt8
 
TûtC⁄åﬁ
 : 1;

202 
uöt8
 
Li·EncodîC⁄åﬁÀd
 : 1;

203 
uöt8
 
TûtEncodîC⁄åﬁÀd
 : 1;

204 
uöt8
 
Re£rved
 : 1;

205 }
	tz˛ClosuªsWcInfoC⁄figSètus_t
;

210 
uöt8
 
MŸ‹Revî£Dúe˘i⁄
 : 1;

211 
uöt8
 
RunInCÆibøti⁄Mode
 : 1;

212 
uöt8
 
RunInMaöã«n˚Mode
 : 1;

213 
uöt8
 
LEDFìdback
 : 1;

214 
uöt8
 
Re£rved
 : 4;

215 }
	tz˛ClosuªsWcSëMode_t
;

220 
li·
 = 0,

221 
tût
 = 1,

222 }
	t£çoötTy≥_t
;

227 
¥ogømSëpoötVîsi⁄1
 = 1,

228 
¥ogømSëpoötVîsi⁄2
,

229 }
	t£çoötVîsi⁄_t
;

234 
£çoötVîsi⁄_t
 
vîsi⁄
;

235 
uöt8
 
£çoötIndex
;

236 
uöt16
 
£çoötVÆue
;

237 
£çoötTy≥_t
 
£çoötTy≥
;

238 }
	t¥ogømSëpoötPaylﬂd_t
;

243 
afAddrTy≥_t
 *
§cAddr
;

244 
uöt8
 
cmdID
;

245 
uöt8
 
£qNum
;

249 
uöt8
 
ödexOfLi·Sëpoöt
;

250 
uöt8
 
≥r˚¡ageLi·VÆue
;

251 
uöt16
 
li·VÆue
;

252 
uöt8
 
ödexOfTûtSëpoöt
;

253 
uöt8
 
≥r˚¡ageTûtVÆue
;

254 
uöt16
 
TûtVÆue
;

255 
¥ogømSëpoötPaylﬂd_t
 
¥ogømSëpoöt
;

256 }
un
;

257 }
	tz˛WödowCovîög_t
;

263 (*
z˛Closuªs_Do‹Lock_t
Ë–
	tuöt8
 
	tcmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, uöt8 
	t£qNum
 );

269 (*
z˛Closuªs_Do‹LockRes_t
Ë–
	tuöt8
 
	tcmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, uöt8 
	t£qNum
 );

272 (*
z˛Closuªs_WödowCovîögSim∂e_t
) ( );

277 
boﬁ
 (*
	tz˛Closuªs_WödowCovîögGŸoPî˚¡age_t
Ë–
	tuöt8
 
	t≥r˚¡age
 );

282 
boﬁ
 (*
	tz˛Closuªs_WödowCovîögGŸoVÆue_t
Ë–
	tuöt16
 
	tvÆue
 );

287 
uöt8
 (*
	tz˛Closuªs_WödowCovîögGŸoSëpoöt_t
Ë–
	tuöt8
 
	tödex
 );

292 
boﬁ
 (*
	tz˛Closuªs_WödowCovîögProgømSëpoöt_t
Ë–
	t¥ogømSëpoötPaylﬂd_t
 *
	t£çoöt
 );

298 
z˛Closuªs_Do‹Lock_t
 
p‚Do‹Lock
;

299 
z˛Closuªs_Do‹LockRes_t
 
p‚Do‹LockRes
;

300 
z˛Closuªs_WödowCovîögSim∂e_t
 
p‚WödowCovîögUpO≥n
;

301 
z˛Closuªs_WödowCovîögSim∂e_t
 
p‚WödowCovîögDownClo£
;

302 
z˛Closuªs_WödowCovîögSim∂e_t
 
p‚WödowCovîögSt›
;

303 
z˛Closuªs_WödowCovîögGŸoSëpoöt_t
 
p‚WödowCovîögGŸoLi·Sëpoöt
;

304 
z˛Closuªs_WödowCovîögGŸoVÆue_t
 
p‚WödowCovîögGŸoLi·VÆue
;

305 
z˛Closuªs_WödowCovîögGŸoPî˚¡age_t
 
p‚WödowCovîögGŸoLi·Pî˚¡age
;

306 
z˛Closuªs_WödowCovîögGŸoSëpoöt_t
 
p‚WödowCovîögGŸoTûtSëpoöt
;

307 
z˛Closuªs_WödowCovîögGŸoVÆue_t
 
p‚WödowCovîögGŸoTûtVÆue
;

308 
z˛Closuªs_WödowCovîögGŸoPî˚¡age_t
 
p‚WödowCovîögGŸoTûtPî˚¡age
;

309 
z˛Closuªs_WödowCovîögProgømSëpoöt_t
 
p‚WödowCovîögProgømSëpoöt
;

310 } 
	tz˛Closuªs_AµCÆlbacks_t
;

325 
ZSètus_t
 
z˛Closuªs_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛Closuªs_AµCÆlbacks_t
 *
ˇŒbacks
 );

327 
ZSètus_t
 
z˛Closuªs_SídDo‹LockReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

328 
uöt8
 
cmd
, 
uöt16
 
˛u°îID
,

329 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

330 
ZSètus_t
 
z˛Closuªs_SídDo‹LockRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

331 
uöt8
 
cmd
, 
uöt16
 
˛u°îID
,

332 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
, uöt8 
°©us
 );

333 
ZSètus_t
 
z˛Closuªs_WCSim∂eReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

334 
uöt8
 
cmd
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

335 
ZSètus_t
 
z˛Closuªs_WCSídGoToSëpoötReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

336 
uöt8
 
cmd
, uöt8 
dißbÀDeÁu…R•
,

337 
uöt8
 
£qNum
, uöt8 
SëpoötIndex
 );

338 
ZSètus_t
 
z˛Closuªs_WCSídGoToVÆueReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

339 
uöt8
 
cmd
, uöt8 
dißbÀDeÁu…R•
,

340 
uöt8
 
£qNum
, 
uöt16
 
VÆue
 );

341 
ZSètus_t
 
z˛Closuªs_WCSídGoToPî˚¡ageReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

342 
uöt8
 
cmd
, uöt8 
dißbÀDeÁu…R•
,

343 
uöt8
 
£qNum
, uöt8 
≥r˚¡ageVÆue
 );

344 
ZSètus_t
 
z˛Closuªs_WCSídProgømSëpoötReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

345 
uöt8
 
cmd
, uöt8 
dißbÀDeÁu…R•
,

346 
uöt8
 
£qNum
, 
¥ogømSëpoötPaylﬂd_t
 *
¥ogømSëpoöt
 );

356 
	#z˛Closuªs_SídDo‹Lock
(
a
, 
b
, 
c
, 
d
Ë
	`z˛Closuªs_SídDo‹LockReque°
(◊), (b), 
COMMAND_CLOSURES_LOCK_DOOR
, 
ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK
, (c), (d))

	)

363 
	#z˛Closuªs_SídDo‹LockR•
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`z˛Closuªs_SídDo‹LockRe•⁄£
–◊), (b), 
COMMAND_CLOSURES_LOCK_DOOR_RESPONSE
, 
ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK
, (c), (d), (eË)

	)

370 
	#z˛Closuªs_SídDo‹U∆ock
(
a
, 
b
, 
c
, 
d
Ë
	`z˛Closuªs_SídDo‹LockReque°
(◊), (b), 
COMMAND_CLOSURES_UNLOCK_DOOR
, 
ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK
, (c), (d))

	)

377 
	#z˛Closuªs_SídDo‹U∆ockR•
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`z˛Closuªs_SídDo‹LockRe•⁄£
–◊), (b), 
COMMAND_CLOSURES_UNLOCK_DOOR_RESPONSE
, 
ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK
, (c), (d), (eË)

	)

384 
	#z˛Closuªs_SídUpO≥n
(
a
, 
b
, 
c
, 
d
Ë
	`z˛Closuªs_WCSim∂eReque°
–◊), (b), 
COMMAND_CLOSURES_UP_OPEN
, (c), (dË)

	)

390 
	#z˛Closuªs_SídDownClo£
(
a
, 
b
, 
c
, 
d
Ë
	`z˛Closuªs_WCSim∂eReque°
–◊), (b), 
COMMAND_CLOSURES_DOWN_CLOSE
, (c), (dË)

	)

397 
	#z˛Closuªs_SídSt›
(
a
, 
b
, 
c
, 
d
Ë
	`z˛Closuªs_WCSim∂eReque°
–◊), (b), 
COMMAND_CLOSURES_STOP
, (c), (dË)

	)

404 
	#z˛Closuªs_SídGoToLi·Sëpoöt
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`z˛Closuªs_WCSídGoToSëpoötReque°
–◊), (b), 
COMMAND_CLOSURES_GO_TO_LIFT_SETPOINT
, (c), (d), (eË)

	)

411 
	#z˛Closuªs_SídGoToLi·VÆue
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`z˛Closuªs_WCSídGoToVÆueReque°
(◊), (b), 
COMMAND_CLOSURES_GO_TO_LIFT_VALUE
, (c), (d), (e))

	)

418 
	#z˛Closuªs_SídGoToLi·Pî˚¡age
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`z˛Closuªs_WCSídGoToLi·Pî˚¡ageReque°
(◊), (b), 
COMMAND_CLOSURES_GO_TO_LIFT_PERCENTAGE
, (c), (d), (e))

	)

425 
	#z˛Closuªs_SídGoToTûtSëpoöt
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`z˛Closuªs_WCSídGoToSëpoötReque°
–◊), (b), 
COMMAND_CLOSURES_GO_TO_TILT_SETPOINT
, (c), (d), (eË)

	)

432 
	#z˛Closuªs_SídGoToTûtVÆue
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`z˛Closuªs_WCSídGoToVÆueReque°
(◊), (b), 
COMMAND_CLOSURES_GO_TO_TILT_VALUE
, (c), (d), (e))

	)

439 
	#z˛Closuªs_SídGoToTûtPî˚¡age
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`z˛Closuªs_WCSídGoToTûtPî˚¡ageReque°
(◊), (b), 
COMMAND_CLOSURES_GO_TO_TILT_PERCENTAGE
, (c), (d), (e))

	)

446 
	#z˛Closuªs_SídProgømSëpoöt
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`z˛Closuªs_WCSídProgømSëpoötReque°
(◊), (b), 
COMMAND_CLOSURES_PROGRAM_SETPOINT
, (c), (d), (e))

	)

448 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_general.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"OSAL_Nv.h
"

47 
	~"z˛.h
"

48 
	~"z˛_gíîÆ.h
"

49 
	~"ZDAµ.h
"

51 #i‡
deföed
 ( 
INTER_PAN
 )

52 
	~"°ub_≠s.h
"

58 
	#loˇti⁄Ty≥Absﬁuã
–
a
 ) ( (aË& 
LOCATION_TYPE_ABSOLUTE
 )

	)

59 
	#loˇti⁄Ty≥2D
–
a
 ) ( (aË& 
LOCATION_TYPE_2_D
 )

	)

60 
	#loˇti⁄Ty≥Co‹dö©eSy°em
–
a
 ) ( (aË& 
LOCATION_TYPE_COORDINATE_SYSTEM
 )

	)

62 #ifde‡
ZCL_SCENES


63 
	#z˛GíîÆ_S˚√sRemaögC≠acôy
(Ë–
ZCL_GEN_MAX_SCENES
 - 
	`z˛GíîÆ_Cou¡AŒS˚√s
(Ë)

	)

73 
	sz˛GíCBRec


75 
z˛GíCBRec
 *
	m√xt
;

76 
uöt8
 
	mídpoöt
;

77 
z˛GíîÆ_AµCÆlbacks_t
 *
	mCBs
;

78 } 
	tz˛GíCBRec_t
;

80 
	sz˛GíS˚√Iãm


82 
z˛GíS˚√Iãm
 *
	m√xt
;

83 
uöt8
 
	mídpoöt
;

84 
z˛GíîÆ_S˚√_t
 
	ms˚√
;

85 } 
	tz˛GíS˚√Iãm_t
;

87 
	sz˛GíAœrmIãm


89 
z˛GíAœrmIãm
 *
	m√xt
;

90 
uöt8
 
	mídpoöt
;

91 
z˛GíîÆ_Aœrm_t
 
	mÆ¨m
;

92 } 
	tz˛GíAœrmIãm_t
;

97 
uöt16
 
	mnumRecs
;

98 } 
	tnvGíS˚√sHdr_t
;

100 
	sz˛GíS˚√NVIãm


102 
uöt8
 
	mídpoöt
;

103 
z˛GíîÆ_S˚√_t
 
	ms˚√
;

104 } 
	tz˛GíS˚√NVIãm_t
;

117 
z˛GíCBRec_t
 *
	gz˛GíCBs
 = (z˛GíCBRec_à*)
NULL
;

118 
uöt8
 
	gz˛GíPlugöRegi°ed
 = 
FALSE
;

119 #ifde‡
ZCL_SCENES


120 
z˛GíS˚√Iãm_t
 *
	gz˛GíS˚√TabÀ
 = (z˛GíS˚√Iãm_à*)
NULL
;

122 #ifde‡
ZCL_ALARMS


123 
z˛GíAœrmIãm_t
 *
	gz˛GíAœrmTabÀ
 = (z˛GíAœrmIãm_à*)
NULL
;

129 
ZSètus_t
 
z˛GíîÆ_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

130 
ZSètus_t
 
z˛GíîÆ_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

131 
z˛GíîÆ_AµCÆlbacks_t
 *
z˛GíîÆ_FödCÆlbacks
–
uöt8
 
ídpoöt
 );

134 #ifde‡
ZCL_BASIC


135 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInBasic
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

138 #ifde‡
ZCL_IDENTIFY


139 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInIdítôy
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

143 #ifde‡
ZCL_GROUPS


144 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInGroupsSîvî
–
z˛Incomög_t
 *
pInMsg
 );

145 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInGroupsClõ¡
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

146 
ZSètus_t
 
z˛GíîÆ_AddGroup
–
uöt8
 
ídPoöt
, 
≠s_Group_t
 *
group
, uöt8 *
pD©a
 );

149 #ifde‡
ZCL_SCENES


150 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInS˚√sSîvî
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

151 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInS˚√sClõ¡
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

155 #ifde‡
ZCL_ON_OFF


156 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInOnOff
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

159 #ifde‡
ZCL_LEVEL_CTRL


160 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInLevñC⁄åﬁ
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

164 #ifde‡
ZCL_ALARMS


165 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInAœrmsSîvî
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

166 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInAœrmsClõ¡
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

170 #ifde‡
ZCL_LOCATION


171 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInLoˇti⁄Sîvî
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

172 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInLoˇti⁄Clõ¡
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

175 #ifde‡
ZCL_SCENES


176 
uöt8
 
z˛GíîÆ_S˚√sInôNV
( );

177 
z˛GíîÆ_S˚√sSëDeÁu…NV
( );

178 
z˛GíîÆ_S˚√sWrôeNV
( );

179 
uöt16
 
z˛GíîÆ_S˚√sRe°‹eFromNV
( );

192 
ZSètus_t
 
	$z˛GíîÆ_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛GíîÆ_AµCÆlbacks_t
 *
ˇŒbacks
 )

194 
z˛GíCBRec_t
 *
pNewIãm
;

195 
z˛GíCBRec_t
 *
pLo›
;

198 i‡–
z˛GíPlugöRegi°ed
 =
FALSE
 )

200 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_GEN_BASIC
,

201 
ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC
,

202 
z˛GíîÆ_HdlIncomög
 );

204 #ifde‡
ZCL_SCENES


206 
	`z˛GíîÆ_S˚√sInôNV
();

209 
	`z˛GíîÆ_S˚√sRe°‹eFromNV
();

212 
z˛GíPlugöRegi°ed
 = 
TRUE
;

216 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛GíCBRec_t
 ) );

217 i‡–
pNewIãm
 =
NULL
 )

218  (
ZMemEº‹
);

220 
pNewIãm
->
√xt
 = (
z˛GíCBRec_t
 *)
NULL
;

221 
pNewIãm
->
ídpoöt
 =Éndpoint;

222 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

225 i‡–
z˛GíCBs
 =
NULL
 )

227 
z˛GíCBs
 = 
pNewIãm
;

232 
pLo›
 = 
z˛GíCBs
;

233  
pLo›
->
√xt
 !
NULL
 )

234 
pLo›
 =ÖLo›->
√xt
;

237 
pLo›
->
√xt
 = 
pNewIãm
;

240  ( 
ZSuc˚ss
 );

241 
	}
}

243 #ifde‡
ZCL_IDENTIFY


256 
ZSètus_t
 
	$z˛GíîÆ_SídIdítify
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

257 
uöt16
 
idítifyTime
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

259 
uöt8
 
buf
[2];

261 
buf
[0] = 
	`LO_UINT16
–
idítifyTime
 );

262 
buf
[1] = 
	`HI_UINT16
–
idítifyTime
 );

264  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

265 
COMMAND_IDENTIFY
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

266 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

267 
	}
}

281 
ZSètus_t
 
	$z˛GíîÆ_SídIdítifyQuîyRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

282 
uöt16
 
timeout
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

284 
uöt8
 
buf
[2];

286 
buf
[0] = 
	`LO_UINT16
–
timeout
 );

287 
buf
[1] = 
	`HI_UINT16
–
timeout
 );

289  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

290 
COMMAND_IDENTIFY_QUERY_RSP
, 
TRUE
,

291 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

292 
	}
}

295 #ifde‡
ZCL_GROUPS


311 
ZSètus_t
 
	$z˛GíîÆ_SídGroupReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

312 
uöt8
 
cmd
, 
uöt16
 
groupID
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

314 
uöt8
 
buf
[2];

316 
buf
[0] = 
	`LO_UINT16
–
groupID
 );

317 
buf
[1] = 
	`HI_UINT16
–
groupID
 );

319  ( 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_GROUPS
,

320 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

321 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 ) );

322 
	}
}

341 
ZSètus_t
 
	$z˛GíîÆ_SídAddGroupReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

342 
uöt8
 
cmd
, 
uöt16
 
groupID
, uöt8 *
groupName
,

343 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

345 
uöt8
 *
buf
;

346 
uöt8
 *
pBuf
;

347 
uöt8
 
Àn
;

348 
ZSètus_t
 
°©us
;

350 
Àn
 = 2;

351 
Àn
 +
groupName
[0] + 1;

353 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

354 i‡–
buf
 )

356 
pBuf
 = 
buf
;

357 *
pBuf
++ = 
	`LO_UINT16
–
groupID
 );

358 *
pBuf
++ = 
	`HI_UINT16
–
groupID
 );

359 *
pBuf
++ = 
groupName
[0];

360 
	`oßl_mem˝y
–
pBuf
, &(
groupName
[1]), groupName[0] );

362 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_GROUPS
,

363 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

364 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

365 
	`oßl_mem_‰ì
–
buf
 );

368 
°©us
 = 
ZMemEº‹
;

370  ( 
°©us
 );

371 
	}
}

390 
ZSètus_t
 
	$z˛GíîÆ_SídGroupGëMembîshùReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

391 
uöt8
 
cmd
, uöt8 
r•Cmd
, uöt8 
dúe˘i⁄
, uöt8 
ˇ∑côy
,

392 
uöt8
 
gΩC¡
, 
uöt16
 *
gΩLi°
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

394 
uöt8
 *
buf
;

395 
uöt8
 *
pBuf
;

396 
uöt8
 
Àn
 = 0;

397 
uöt8
 
i
;

398 
ZSètus_t
 
°©us
;

400 i‡–
r•Cmd
 )

401 
Àn
++;

403 
Àn
++;

404 
Àn
 + ( 
uöt16
 ) * 
gΩC¡
;

406 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

407 i‡–
buf
 )

409 
pBuf
 = 
buf
;

410 i‡–
r•Cmd
 )

411 *
pBuf
++ = 
ˇ∑côy
;

413 *
pBuf
++ = 
gΩC¡
;

414  
i
 = 0; i < 
gΩC¡
; i++ )

416 *
pBuf
++ = 
	`LO_UINT16
–
gΩLi°
[
i
] );

417 *
pBuf
++ = 
	`HI_UINT16
–
gΩLi°
[
i
] );

420 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_GROUPS
,

421 
cmd
, 
TRUE
, 
dúe˘i⁄
,

422 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

423 
	`oßl_mem_‰ì
–
buf
 );

426 
°©us
 = 
ZMemEº‹
;

428  ( 
°©us
 );

429 
	}
}

444 
ZSètus_t
 
	$z˛GíîÆ_SídGroupRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

445 
uöt8
 
cmd
, uöt8 
°©us
, 
uöt16
 
groupID
,

446 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

448 
uöt8
 
buf
[3];

450 
buf
[0] = 
°©us
;

451 
buf
[1] = 
	`LO_UINT16
–
groupID
 );

452 
buf
[2] = 
	`HI_UINT16
–
groupID
 );

454  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_GROUPS
,

455 
cmd
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

456 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

457 
	}
}

472 
ZSètus_t
 
	$z˛GíîÆ_SídGroupVõwRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

473 
uöt8
 
°©us
, 
≠s_Group_t
 *
gΩ
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

475 
uöt8
 *
buf
;

476 
uöt8
 
Àn
;

477 
ZSètus_t
 
°©
;

479 
Àn
 = 1 + 2;

481 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

482 
Àn
 +
gΩ
->
«me
[0] + 1;

484 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

485 i‡–
buf
 )

487 
buf
[0] = 
°©us
;

488 
buf
[1] = 
	`LO_UINT16
–
gΩ
->
ID
 );

489 
buf
[2] = 
	`HI_UINT16
–
gΩ
->
ID
 );

491 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

493 
buf
[3] = 
gΩ
->
«me
[0];

494 
	`oßl_mem˝y
–&
buf
[4], (&
gΩ
->
«me
[1]), grp->name[0] );

497 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_GROUPS
,

498 
COMMAND_GROUP_VIEW_RSP
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

499 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

500 
	`oßl_mem_‰ì
–
buf
 );

503 
°©
 = 
ZMemEº‹
;

505  ( 
°©
 );

506 
	}
}

509 #ifde‡
ZCL_SCENES


521 
ZSètus_t
 
	$z˛GíîÆ_SídAddS˚√
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

522 
z˛GíîÆ_S˚√_t
 *
s˚√
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

524 
uöt8
 *
buf
;

525 
uöt8
 *
pBuf
;

526 
uöt8
 
Àn
;

527 
ZSètus_t
 
°©us
;

529 
Àn
 = 2 + 1 + 2;

530 
Àn
 +
s˚√
->
«me
[0] + 1;

533 
Àn
 +
s˚√
->
extLí
;

535 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

536 i‡–
buf
 )

538 
pBuf
 = 
buf
;

539 *
pBuf
++ = 
	`LO_UINT16
–
s˚√
->
groupID
 );

540 *
pBuf
++ = 
	`HI_UINT16
–
s˚√
->
groupID
 );

541 *
pBuf
++ = 
s˚√
->
ID
;

542 *
pBuf
++ = 
	`LO_UINT16
–
s˚√
->
å™sTime
 );

543 *
pBuf
++ = 
	`HI_UINT16
–
s˚√
->
å™sTime
 );

544 *
pBuf
++ = 
s˚√
->
«me
[0];

545 
	`oßl_mem˝y
–
pBuf
, &(
s˚√
->
«me
[1]), scene->name[0] );

546 
pBuf
 +
s˚√
->
«me
[0];

549 i‡–
s˚√
->
extLí
 > 0 )

550 
	`oßl_mem˝y
–
pBuf
, 
s˚√
->
extFõld
, s˚√->
extLí
 );

552 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_SCENES
,

553 
COMMAND_SCENE_ADD
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

554 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

555 
	`oßl_mem_‰ì
–
buf
 );

558 
°©us
 = 
ZMemEº‹
;

560  ( 
°©us
 );

561 
	}
}

583 
ZSètus_t
 
	$z˛GíîÆ_SídS˚√Reque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

584 
uöt8
 
cmd
, 
uöt16
 
groupID
, uöt8 
s˚√ID
,

585 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

587 
uöt8
 
buf
[3];

588 
uöt8
 
Àn
 = 2;

590 
buf
[0] = 
	`LO_UINT16
–
groupID
 );

591 
buf
[1] = 
	`HI_UINT16
–
groupID
 );

593 i‡–
cmd
 !
COMMAND_SCENE_REMOVE_ALL
 && cmd !
COMMAND_SCENE_GET_MEMBERSHIP
 )

595 
buf
[2] = 
s˚√ID
;

596 
Àn
++;

599  ( 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_SCENES
,

600 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

601 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 ) );

602 
	}
}

619 
ZSètus_t
 
	$z˛GíîÆ_SídS˚√Re•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

620 
uöt8
 
cmd
, uöt8 
°©us
, 
uöt16
 
groupID
,

621 
uöt8
 
s˚√ID
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

623 
uöt8
 
buf
[4];

624 
uöt8
 
Àn
 = 1 + 2;

626 
buf
[0] = 
°©us
;

627 
buf
[1] = 
	`LO_UINT16
–
groupID
 );

628 
buf
[2] = 
	`HI_UINT16
–
groupID
 );

630 i‡–
cmd
 !
COMMAND_SCENE_REMOVE_ALL_RSP
 )

632 
buf
[3] = 
s˚√ID
;

633 
Àn
++;

636  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_SCENES
,

637 
cmd
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

638 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

639 
	}
}

653 
ZSètus_t
 
	$z˛GíîÆ_SídS˚√VõwRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

654 
uöt8
 
°©us
, 
z˛GíîÆ_S˚√_t
 *
s˚√
,

655 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

657 
uöt8
 *
buf
;

658 
uöt8
 *
pBuf
;

659 
uöt8
 
Àn
 = 1 + 2 + 1;

660 
ZSètus_t
 
°©
;

662 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

664 
Àn
 += 2;

665 
Àn
 +
s˚√
->
«me
[0] + 1;

668 
Àn
 +
s˚√
->
extLí
;

671 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

672 i‡–
buf
 )

674 
pBuf
 = 
buf
;

675 *
pBuf
++ = 
°©us
;

676 *
pBuf
++ = 
	`LO_UINT16
–
s˚√
->
groupID
 );

677 *
pBuf
++ = 
	`HI_UINT16
–
s˚√
->
groupID
 );

678 *
pBuf
++ = 
s˚√
->
ID
;

679 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

681 *
pBuf
++ = 
	`LO_UINT16
–
s˚√
->
å™sTime
 );

682 *
pBuf
++ = 
	`HI_UINT16
–
s˚√
->
å™sTime
 );

683 *
pBuf
++ = 
s˚√
->
«me
[0];

684 i‡–
s˚√
->
«me
[0] != 0 )

686 
	`oßl_mem˝y
–
pBuf
, &(
s˚√
->
«me
[1]), scene->name[0] );

687 
pBuf
 +
s˚√
->
«me
[0];

691 i‡–
s˚√
->
extLí
 > 0 )

692 
	`oßl_mem˝y
–
pBuf
, 
s˚√
->
extFõld
, s˚√->
extLí
 );

695 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_SCENES
,

696 
COMMAND_SCENE_VIEW_RSP
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

697 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

698 
	`oßl_mem_‰ì
–
buf
 );

701 
°©
 = 
ZMemEº‹
;

703  ( 
°©
 );

704 
	}
}

722 
ZSètus_t
 
	$z˛GíîÆ_SídS˚√GëMembîshùRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

723 
uöt8
 
°©us
, uöt8 
ˇ∑côy
, uöt8 
s˚√C¡
, uöt8 *
s˚√Li°
,

724 
uöt16
 
groupID
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

726 
uöt8
 *
buf
;

727 
uöt8
 *
pBuf
;

728 
uöt8
 
Àn
 = 1 + 1 + 2;

729 
uöt8
 
i
;

730 
ZSètus_t
 
°©
;

732 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

734 
Àn
++;

735 
Àn
 +
s˚√C¡
;

738 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

739 i‡–
buf
 )

741 
pBuf
 = 
buf
;

742 *
pBuf
++ = 
°©us
;

743 *
pBuf
++ = 
ˇ∑côy
;

744 *
pBuf
++ = 
	`LO_UINT16
–
groupID
 );

745 *
pBuf
++ = 
	`HI_UINT16
–
groupID
 );

746 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

748 *
pBuf
++ = 
s˚√C¡
;

749  
i
 = 0; i < 
s˚√C¡
; i++ )

750 *
pBuf
++ = 
s˚√Li°
[
i
];

753 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_SCENES
,

754 
COMMAND_SCENE_GET_MEMBERSHIP_RSP
, 
TRUE
,

755 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

756 
	`oßl_mem_‰ì
–
buf
 );

759 
°©
 = 
ZMemEº‹
;

761  ( 
°©
 );

762 
	}
}

765 #ifde‡
ZCL_LEVEL_CTRL


782 
ZSètus_t
 
	$z˛GíîÆ_SídLevñC⁄åﬁMoveToLevñReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

783 
uöt8
 
cmd
, uöt8 
Àvñ
, 
uöt16
 
å™sTime
,

784 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

786 
uöt8
 
buf
[3];

788 
buf
[0] = 
Àvñ
;

789 
buf
[1] = 
	`LO_UINT16
–
å™sTime
 );

790 
buf
[2] = 
	`HI_UINT16
–
å™sTime
 );

792  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
,

793 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

794 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

795 
	}
}

814 
ZSètus_t
 
	$z˛GíîÆ_SídLevñC⁄åﬁMoveReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

815 
uöt8
 
cmd
, uöt8 
moveMode
, uöt8 
øã
,

816 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

818 
uöt8
 
buf
[2];

820 
buf
[0] = 
moveMode
;

821 
buf
[1] = 
øã
;

823  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
,

824 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

825 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

826 
	}
}

846 
ZSètus_t
 
	$z˛GíîÆ_SídLevñC⁄åﬁSãpReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

847 
uöt8
 
cmd
, uöt8 
°ïMode
, uöt8 
°ïSize
, 
uöt16
 
å™sTime
,

848 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

850 
uöt8
 
buf
[4];

852 
buf
[0] = 
°ïMode
;

853 
buf
[1] = 
°ïSize
;

854 
buf
[2] = 
	`LO_UINT16
–
å™sTime
 );

855 
buf
[3] = 
	`HI_UINT16
–
å™sTime
 );

857  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
,

858 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

859 
dißbÀDeÁu…R•
, 0, 
£qNum
, 4, 
buf
 );

860 
	}
}

863 #ifde‡
ZCL_ALARMS


877 
ZSètus_t
 
	$z˛GíîÆ_SídAœrmReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

878 
uöt8
 
cmd
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
,

879 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

881 
uöt8
 
buf
[3];

883 
buf
[0] = 
Æ¨mCode
;

884 
buf
[1] = 
	`LO_UINT16
–
˛u°îID
 );

885 
buf
[2] = 
	`HI_UINT16
–
˛u°îID
 );

887  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_ALARMS
,

888 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

889 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

890 
	}
}

906 
ZSètus_t
 
	$z˛GíîÆ_SídAœrmGëRe•no£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

907 
uöt8
 
°©us
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
,

908 
uöt32
 
timeSèmp
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

910 
uöt8
 
buf
[8];

911 
uöt8
 
Àn
 = 1;

913 
buf
[0] = 
°©us
;

914 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

916 
Àn
 += 1 + 2 + 4;

917 
buf
[1] = 
Æ¨mCode
;

918 
buf
[2] = 
	`LO_UINT16
–
˛u°îID
 );

919 
buf
[3] = 
	`HI_UINT16
–
˛u°îID
 );

920 
	`oßl_buf„r_uöt32
–&
buf
[4], 
timeSèmp
 );

923  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_ALARMS
,

924 
COMMAND_ALARMS_GET_RSP
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

925 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

926 
	}
}

928 #ifde‡
SE_UK_EXT


942 
ZSètus_t
 
	$z˛GíîÆ_SídAœrmGëEvítLog
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

943 
z˛GëEvítLog_t
 *
pEvítLog
,

944 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

946 
uöt8
 
buf
[10];

948 
buf
[0] = 
pEvítLog
->
logID
;

949 
	`oßl_buf„r_uöt32
–&
buf
[1], 
pEvítLog
->
°¨tTime
 );

950 
	`oßl_buf„r_uöt32
–&
buf
[5], 
pEvítLog
->
ídTime
 );

951 
buf
[9] = 
pEvítLog
->
numEvíts
;

953  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_ALARMS
,

954 
COMMAND_ALARMS_GET_EVENT_LOG
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

955 
dißbÀDeÁu…R•
, 0, 
£qNum
, 10, 
buf
 );

956 
	}
}

971 
ZSètus_t
 
	$z˛GíîÆ_SídAœrmPublishEvítLog
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

972 
z˛PublishEvítLog_t
 *
pEvítLog
,

973 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

975 
uöt8
 *
buf
;

976 
uöt8
 *
pBuf
;

977 
uöt8
 
bufLí
;

980 
bufLí
 = 1 + 1 + 1 + (
pEvítLog
->
numSubLogs
 * (1 + 4));

982 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

983 i‡–
buf
 =
NULL
 )

985  (
ZMemEº‹
);

988 
pBuf
 = 
buf
;

989 *
pBuf
++ = 
pEvítLog
->
logID
;

990 *
pBuf
++ = 
pEvítLog
->
cmdIndex
;

991 *
pBuf
++ = 
pEvítLog
->
tŸÆCmds
;

993  
uöt8
 
i
 = 0; i < 
pEvítLog
->
numSubLogs
; i++ )

995 
z˛EvítLogPaylﬂd_t
 *
pLogs
 = &(
pEvítLog
->pLogs[
i
]);

997 *
pBuf
++ = 
pLogs
->
evítId
;

998 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pLogs
->
evítTime
 );

1001  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_ALARMS
,

1002 
COMMAND_ALARMS_PUBLISH_EVENT_LOG
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

1003 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
bufLí
, 
buf
 );

1004 
	}
}

1008 #ifde‡
ZCL_LOCATION


1020 
ZSètus_t
 
	$z˛GíîÆ_SídLoˇti⁄SëAbsﬁuã
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1021 
z˛Loˇti⁄Absﬁuã_t
 *
absLoc
,

1022 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1024 
uöt8
 
buf
[10];

1026 
buf
[0] = 
	`LO_UINT16
–
absLoc
->
co‹dö©e1
 );

1027 
buf
[1] = 
	`HI_UINT16
–
absLoc
->
co‹dö©e1
 );

1028 
buf
[2] = 
	`LO_UINT16
–
absLoc
->
co‹dö©e2
 );

1029 
buf
[3] = 
	`HI_UINT16
–
absLoc
->
co‹dö©e2
 );

1030 
buf
[4] = 
	`LO_UINT16
–
absLoc
->
co‹dö©e3
 );

1031 
buf
[5] = 
	`HI_UINT16
–
absLoc
->
co‹dö©e3
 );

1032 
buf
[6] = 
	`LO_UINT16
–
absLoc
->
powî
 );

1033 
buf
[7] = 
	`HI_UINT16
–
absLoc
->
powî
 );

1034 
buf
[8] = 
	`LO_UINT16
–
absLoc
->
∑thLossExp⁄ít
 );

1035 
buf
[9] = 
	`HI_UINT16
–
absLoc
->
∑thLossExp⁄ít
 );

1037  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LOCATION
,

1038 
COMMAND_LOCATION_SET_ABSOLUTE
, 
TRUE
,

1039 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 10, 
buf
 );

1040 
	}
}

1053 
ZSètus_t
 
	$z˛GíîÆ_SídLoˇti⁄SëDevCfg
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1054 
z˛Loˇti⁄DevCfg_t
 *
devCfg
,

1055 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1057 
uöt8
 
buf
[9];

1059 
buf
[0] = 
	`LO_UINT16
–
devCfg
->
powî
 );

1060 
buf
[1] = 
	`HI_UINT16
–
devCfg
->
powî
 );

1061 
buf
[2] = 
	`LO_UINT16
–
devCfg
->
∑thLossExp⁄ít
 );

1062 
buf
[3] = 
	`HI_UINT16
–
devCfg
->
∑thLossExp⁄ít
 );

1063 
buf
[4] = 
	`LO_UINT16
–
devCfg
->
ˇlcPîiod
 );

1064 
buf
[5] = 
	`HI_UINT16
–
devCfg
->
ˇlcPîiod
 );

1065 
buf
[6] = 
devCfg
->
numMósuªmíts
;

1066 
buf
[7] = 
	`LO_UINT16
–
devCfg
->
ªp‹tPîiod
 );

1067 
buf
[8] = 
	`HI_UINT16
–
devCfg
->
ªp‹tPîiod
 );

1069  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LOCATION
,

1070 
COMMAND_LOCATION_SET_DEV_CFG
, 
TRUE
,

1071 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 9, 
buf
 );

1072 
	}
}

1085 
ZSètus_t
 
	$z˛GíîÆ_SídLoˇti⁄GëDevCfg
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1086 
uöt8
 *
èrgëAddr
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1088 
uöt8
 
buf
[8];

1090 
	`oßl_˝yExtAddr
–
buf
, 
èrgëAddr
 );

1092  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LOCATION
,

1093 
COMMAND_LOCATION_GET_DEV_CFG
, 
TRUE
,

1094 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 8, 
buf
 );

1095 
	}
}

1108 
ZSètus_t
 
	$z˛GíîÆ_SídLoˇti⁄GëD©a
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1109 
z˛Loˇti⁄GëD©a_t
 *
locD©a
,

1110 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1112 
uöt8
 
buf
[10];

1113 
uöt8
 *
pBuf
 = 
buf
;

1114 
uöt8
 
Àn
 = 2;

1116 *
pBuf
 = 
locD©a
->
absﬁuãO∆y
;

1117 *
pBuf
 |
locD©a
->
ªˇlcuœã
 << 1;

1118 *
pBuf
 |
locD©a
->
brdˇ°Indiˇt‹
 << 2;

1119 *
pBuf
 |
locD©a
->
brdˇ°Re•⁄£
 << 3;

1120 *
pBuf
 |
locD©a
->
com∑˘Re•⁄£
 << 4;

1121 
pBuf
++;

1123 *
pBuf
++ = 
locD©a
->
numRe•⁄£s
;

1125 i‡–
locD©a
->
brdˇ°Indiˇt‹
 == 0 )

1127 
	`oßl_˝yExtAddr
–
pBuf
, 
locD©a
->
èrgëAddr
 );

1128 
Àn
 += 8;

1131  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LOCATION
,

1132 
COMMAND_LOCATION_GET_DATA
, 
TRUE
,

1133 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

1134 
	}
}

1147 
ZSètus_t
 
	$z˛GíîÆ_SídLoˇti⁄DevCfgRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1148 
z˛Loˇti⁄DevCfgR•_t
 *
devCfg
,

1149 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1151 
uöt8
 
buf
[10];

1152 
uöt8
 
Àn
 = 1;

1154 
buf
[0] = 
devCfg
->
°©us
;

1155 i‡–
devCfg
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

1157 
buf
[1] = 
	`LO_UINT16
–
devCfg
->
d©a
.
powî
 );

1158 
buf
[2] = 
	`HI_UINT16
–
devCfg
->
d©a
.
powî
 );

1159 
buf
[3] = 
	`LO_UINT16
–
devCfg
->
d©a
.
∑thLossExp⁄ít
 );

1160 
buf
[4] = 
	`HI_UINT16
–
devCfg
->
d©a
.
∑thLossExp⁄ít
 );

1161 
buf
[5] = 
	`LO_UINT16
–
devCfg
->
d©a
.
ˇlcPîiod
 );

1162 
buf
[6] = 
	`HI_UINT16
–
devCfg
->
d©a
.
ˇlcPîiod
 );

1163 
buf
[7] = 
devCfg
->
d©a
.
numMósuªmíts
;

1164 
buf
[8] = 
	`LO_UINT16
–
devCfg
->
d©a
.
ªp‹tPîiod
 );

1165 
buf
[9] = 
	`HI_UINT16
–
devCfg
->
d©a
.
ªp‹tPîiod
 );

1166 
Àn
 += 9;

1169  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LOCATION
,

1170 
COMMAND_LOCATION_DEV_CFG_RSP
, 
TRUE
,

1171 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

1172 
	}
}

1186 
ZSètus_t
 
	$z˛GíîÆ_SídLoˇti⁄D©a
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
, uöt8 
cmd
,

1187 
uöt8
 
°©us
, 
z˛Loˇti⁄D©a_t
 *
locD©a
,

1188 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1190 
uöt8
 
buf
[16];

1191 
uöt8
 *
pBuf
 = 
buf
;

1192 
uöt8
 
Àn
 = 0;

1194 i‡–
cmd
 =
COMMAND_LOCATION_DATA_RSP
 )

1197 *
pBuf
++ = 
°©us
;

1198 
Àn
++;

1201 i‡–
cmd
 !
COMMAND_LOCATION_DATA_RSP
 || 
°©us
 =
ZCL_STATUS_SUCCESS
 )

1204 *
pBuf
++ = 
locD©a
->
ty≥
;

1205 *
pBuf
++ = 
	`LO_UINT16
–
locD©a
->
absLoc
.
co‹dö©e1
 );

1206 *
pBuf
++ = 
	`HI_UINT16
–
locD©a
->
absLoc
.
co‹dö©e1
 );

1207 *
pBuf
++ = 
	`LO_UINT16
–
locD©a
->
absLoc
.
co‹dö©e2
 );

1208 *
pBuf
++ = 
	`HI_UINT16
–
locD©a
->
absLoc
.
co‹dö©e2
 );

1209 
Àn
 += 5;

1211 i‡–
	`loˇti⁄Ty≥2D
(
locD©a
->
ty≥
) == 0 )

1214 *
pBuf
++ = 
	`LO_UINT16
–
locD©a
->
absLoc
.
co‹dö©e3
 );

1215 *
pBuf
++ = 
	`HI_UINT16
–
locD©a
->
absLoc
.
co‹dö©e3
 );

1216 
Àn
 += 2;

1219 i‡–
cmd
 !
COMMAND_LOCATION_COMPACT_DATA_NOTIF
 )

1222 *
pBuf
++ = 
	`LO_UINT16
–
locD©a
->
absLoc
.
powî
 );

1223 *
pBuf
++ = 
	`HI_UINT16
–
locD©a
->
absLoc
.
powî
 );

1224 *
pBuf
++ = 
	`LO_UINT16
–
locD©a
->
absLoc
.
∑thLossExp⁄ít
 );

1225 *
pBuf
++ = 
	`HI_UINT16
–
locD©a
->
absLoc
.
∑thLossExp⁄ít
 );

1226 
Àn
 += 4;

1229 i‡–
	`loˇti⁄Ty≥Absﬁuã
(
locD©a
->
ty≥
) == 0 )

1232 i‡–
cmd
 !
COMMAND_LOCATION_COMPACT_DATA_NOTIF
 )

1235 *
pBuf
++ = 
locD©a
->
ˇlcLoc
.
loˇti⁄Mëhod
;

1236 
Àn
++;

1239 *
pBuf
++ = 
locD©a
->
ˇlcLoc
.
quÆôyMósuª
;

1240 *
pBuf
++ = 
	`LO_UINT16
–
locD©a
->
ˇlcLoc
.
loˇti⁄Age
 );

1241 *
pBuf
++ = 
	`HI_UINT16
–
locD©a
->
ˇlcLoc
.
loˇti⁄Age
 );

1242 
Àn
 += 3;

1246  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LOCATION
,

1247 
cmd
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

1248 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

1249 
	}
}

1261 
z˛GíîÆ_AµCÆlbacks_t
 *
	$z˛GíîÆ_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

1263 
z˛GíCBRec_t
 *
pCBs
;

1265 
pCBs
 = 
z˛GíCBs
;

1266  
pCBs
 )

1268 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

1269  ( 
pCBs
->
CBs
 );

1270 
pCBs
 =ÖCBs->
√xt
;

1272  ( (
z˛GíîÆ_AµCÆlbacks_t
 *)
NULL
 );

1273 
	}
}

1287 
ZSètus_t
 
	$z˛GíîÆ_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

1289 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

1291 #i‡
	`deföed
 ( 
INTER_PAN
 )

1292 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

1293  ( 
°©
 );

1295 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

1298 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

1300 
°©
 = 
	`z˛GíîÆ_HdlInS≥cificComm™ds
–
pInMsg
 );

1305 
°©
 = 
ZFaûuª
;

1311 
°©
 = 
ZFaûuª
;

1313  ( 
°©
 );

1314 
	}
}

1326 
ZSètus_t
 
	$z˛GíîÆ_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

1328 
ZSètus_t
 
°©
;

1329 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
;

1332 
pCBs
 = 
	`z˛GíîÆ_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

1333 i‡–
pCBs
 =
NULL
 )

1334  ( 
ZFaûuª
 );

1336  
pInMsg
->
msg
->
˛u°îId
 )

1338 #ifde‡
ZCL_BASIC


1339 
ZCL_CLUSTER_ID_GEN_BASIC
:

1340 
°©
 = 
	`z˛GíîÆ_Pro˚ssInBasic
–
pInMsg
, 
pCBs
 );

1344 #ifde‡
ZCL_IDENTIFY


1345 
ZCL_CLUSTER_ID_GEN_IDENTIFY
:

1346 
°©
 = 
	`z˛GíîÆ_Pro˚ssInIdítôy
–
pInMsg
, 
pCBs
 );

1350 #ifde‡
ZCL_GROUPS


1351 
ZCL_CLUSTER_ID_GEN_GROUPS
:

1352 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1353 
°©
 = 
	`z˛GíîÆ_Pro˚ssInGroupsSîvî
–
pInMsg
 );

1355 
°©
 = 
	`z˛GíîÆ_Pro˚ssInGroupsClõ¡
–
pInMsg
, 
pCBs
 );

1359 #ifde‡
ZCL_SCENES


1360 
ZCL_CLUSTER_ID_GEN_SCENES
:

1361 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1362 
°©
 = 
	`z˛GíîÆ_Pro˚ssInS˚√sSîvî
–
pInMsg
, 
pCBs
 );

1364 
°©
 = 
	`z˛GíîÆ_Pro˚ssInS˚√sClõ¡
–
pInMsg
, 
pCBs
 );

1368 #ifde‡
ZCL_ON_OFF


1369 
ZCL_CLUSTER_ID_GEN_ON_OFF
:

1370 
°©
 = 
	`z˛GíîÆ_Pro˚ssInOnOff
–
pInMsg
, 
pCBs
 );

1374 #ifde‡
ZCL_LEVEL_CTRL


1375 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
:

1376 
°©
 = 
	`z˛GíîÆ_Pro˚ssInLevñC⁄åﬁ
–
pInMsg
, 
pCBs
 );

1380 #ifde‡
ZCL_ALARMS


1381 
ZCL_CLUSTER_ID_GEN_ALARMS
:

1382 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1383 
°©
 = 
	`z˛GíîÆ_Pro˚ssInAœrmsSîvî
–
pInMsg
, 
pCBs
 );

1385 
°©
 = 
	`z˛GíîÆ_Pro˚ssInAœrmsClõ¡
–
pInMsg
, 
pCBs
 );

1389 #ifde‡
ZCL_LOCATION


1390 
ZCL_CLUSTER_ID_GEN_LOCATION
:

1391 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1392 
°©
 = 
	`z˛GíîÆ_Pro˚ssInLoˇti⁄Sîvî
–
pInMsg
, 
pCBs
 );

1394 
°©
 = 
	`z˛GíîÆ_Pro˚ssInLoˇti⁄Clõ¡
–
pInMsg
, 
pCBs
 );

1398 
ZCL_CLUSTER_ID_GEN_POWER_CFG
:

1399 
ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG
:

1400 
ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG
:

1401 
ZCL_CLUSTER_ID_GEN_TIME
:

1403 
°©
 = 
ZFaûuª
;

1407  ( 
°©
 );

1408 
	}
}

1410 #ifde‡
ZCL_BASIC


1420 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInBasic
–
z˛Incomög_t
 *
pInMsg
,

1421 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

1423 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1425 i‡–
pInMsg
->
hdr
.
comm™dID
 > 
COMMAND_BASIC_RESET_FACT_DEFAULT
 )

1426  ( 
ZFaûuª
 );

1428 i‡–
pCBs
->
p‚BasicRe£t
 )

1429 
pCBs
->
	`p‚BasicRe£t
();

1433  ( 
ZSuc˚ss
 );

1434 
	}
}

1437 #ifde‡
ZCL_IDENTIFY


1447 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInIdítôy
–
z˛Incomög_t
 *
pInMsg
,

1448 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

1450 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1452 i‡–
pInMsg
->
hdr
.
comm™dID
 > 
COMMAND_IDENTIFY_QUERY
 )

1453  ( 
ZFaûuª
 );

1455 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_IDENTIFY
 )

1457 i‡–
pCBs
->
p‚Idítify
 )

1459 
z˛Idítify_t
 
cmd
;

1461 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

1462 
cmd
.
idítifyTime
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

1464 
pCBs
->
	`p‚Idítify
–&
cmd
 );

1469 
z˛AârRec_t
 
©åRec
;

1470 
uöt16
 
idítifyTime
 = 0;

1473 i‡–
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
, 
ATTRID_IDENTIFY_TIME
, &
©åRec
 ) )

1474 
	`z˛RódAârD©a
–(
uöt8
 *)&
idítifyTime
, &
©åRec
, 
NULL
 );

1477 i‡–
idítifyTime
 > 0 )

1479 
	`z˛GíîÆ_SídIdítifyQuîyRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

1480 
idítifyTime
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1483  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

1488 i‡–
pInMsg
->
hdr
.
comm™dID
 > 
COMMAND_IDENTIFY_QUERY_RSP
 )

1489  ( 
ZFaûuª
 );

1491 i‡–
pCBs
->
p‚IdítifyQuîyR•
 )

1493 
z˛IdítifyQuîyR•_t
 
r•
;

1495 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

1496 
r•
.
timeout
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

1498 
pCBs
->
	`p‚IdítifyQuîyR•
–&
r•
 );

1502  ( 
ZSuc˚ss
 );

1503 
	}
}

1506 #ifde‡
ZCL_GROUPS


1519 
ZSètus_t
 
	$z˛GíîÆ_AddGroup
–
uöt8
 
ídPoöt
, 
≠s_Group_t
 *
group
, uöt8 *
pD©a
 )

1521 
z˛AârRec_t
 
©åRec
;

1522 
uöt8
 
«meLí
;

1523 
uöt8
 
«meSuµ‹t
 = 
FALSE
;

1525 
pD©a
 += 2;

1526 
«meLí
 = *
pD©a
++;

1529 i‡–
	`z˛FödAârRec
–
ídPoöt
, 
ZCL_CLUSTER_ID_GEN_GROUPS
, 
ATTRID_GROUP_NAME_SUPPORT
, &
©åRec
 ) )

1530 
	`z˛RódAârD©a
–&
«meSuµ‹t
, &
©åRec
, 
NULL
 );

1532 i‡–
«meSuµ‹t
 )

1534 i‡–
«meLí
 > (
APS_GROUP_NAME_LEN
-1) )

1535 
«meLí
 = (
APS_GROUP_NAME_LEN
-1);

1536 
group
->
«me
[0] = 
«meLí
;

1537 
	`oßl_mem˝y
–&(
group
->
«me
[1]), 
pD©a
, 
«meLí
 );

1540  ( 
	`≠s_AddGroup
–
ídPoöt
, 
group
 ) );

1541 
	}
}

1552 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInGroupsSîvî
–
z˛Incomög_t
 *
pInMsg
 )

1554 
z˛AârRec_t
 
©åRec
;

1555 
≠s_Group_t
 
group
;

1556 
≠s_Group_t
 *
pGroup
;

1557 
uöt8
 *
pD©a
;

1558 
uöt8
 
°©us
;

1559 
uöt8
 
gΩC¡
;

1560 
uöt8
 
gΩR•C¡
 = 0;

1561 
uöt16
 *
gΩLi°
;

1562 
uöt16
 
idítifyTime
 = 0;

1563 
uöt8
 
i
;

1564 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

1566 
	`oßl_mem£t
–(
uöt8
*)&
group
, 0, –
≠s_Group_t
 ) );

1568 
pD©a
 = 
pInMsg
->pData;

1569 
group
.
ID
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

1570  
pInMsg
->
hdr
.
comm™dID
 )

1572 
COMMAND_GROUP_ADD
:

1573 
°©us
 = 
	`z˛GíîÆ_AddGroup
–
pInMsg
->
msg
->
ídPoöt
, &
group
, 
pD©a
 );

1574 i‡–
°©us
 !
ZSuc˚ss
 )

1576 i‡–
°©us
 =
ZApsDu∂iˇãE¡ry
 )

1577 
°©us
 = 
ZCL_STATUS_DUPLICATE_EXISTS
;

1579 
°©us
 = 
ZCL_STATUS_INSUFFICIENT_SPACE
;

1582 
	`z˛GíîÆ_SídGroupAddRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

1583 
°©us
, 
group
.
ID
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1584 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

1587 
COMMAND_GROUP_VIEW
:

1588 
pGroup
 = 
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
group
.
ID
 );

1589 i‡–
pGroup
 )

1591 
°©us
 = 
ZCL_STATUS_SUCCESS
;

1596 
°©us
 = 
ZCL_STATUS_NOT_FOUND
;

1597 
pGroup
 = &
group
;

1599 
	`z˛GíîÆ_SídGroupVõwRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

1600 
°©us
, 
pGroup
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1601 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

1604 
COMMAND_GROUP_GET_MEMBERSHIP
:

1605 
gΩC¡
 = *
pD©a
++;

1608 
gΩLi°
 = 
	`oßl_mem_Æloc
––
uöt16
 ) * 
APS_MAX_GROUPS
 );

1609 i‡–
gΩLi°
 !
NULL
 )

1611 i‡–
gΩC¡
 == 0 )

1614 
gΩR•C¡
 = 
	`≠s_FödAŒGroupsF‹Endpoöt
–
pInMsg
->
msg
->
ídPoöt
, 
gΩLi°
 );

1619  
i
 = 0; i < 
gΩC¡
; i++ )

1621 
group
.
ID
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

1622 
pD©a
 += 2;

1624 i‡–
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
group
.
ID
 ) )

1625 
gΩLi°
[
gΩR•C¡
++] = 
group
.
ID
;

1629 i‡–
gΩC¡
 =0 || 
gΩR•C¡
 != 0 )

1631 
	`z˛GíîÆ_SídGroupGëMembîshùRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

1632 
	`≠s_GroupsRemaögC≠acôy
(), 
gΩR•C¡
,

1633 
gΩLi°
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1636 
	`oßl_mem_‰ì
–
gΩLi°
 );

1641 
z˛DeÁu…R•Cmd_t
 
deÁu…R•Cmd
;

1643 
deÁu…R•Cmd
.
comm™dID
 = 
pInMsg
->
hdr
.commandID;

1644 
deÁu…R•Cmd
.
°©usCode
 = 
ZCL_STATUS_INSUFFICIENT_SPACE
;

1645 
	`z˛_SídDeÁu…R•Cmd
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

1646 
pInMsg
->
msg
->
˛u°îId
, &
deÁu…R•Cmd
,

1647 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
åue
, 0, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1650 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

1653 
COMMAND_GROUP_REMOVE
:

1654 i‡–
	`≠s_RemoveGroup
–
pInMsg
->
msg
->
ídPoöt
, 
group
.
ID
 ) )

1655 
°©us
 = 
ZCL_STATUS_SUCCESS
;

1657 
°©us
 = 
ZCL_STATUS_NOT_FOUND
;

1658 
	`z˛GíîÆ_SídGroupRemoveRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

1659 
°©us
, 
group
.
ID
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1660 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

1663 
COMMAND_GROUP_REMOVE_ALL
:

1664 
	`≠s_RemoveAŒGroup
–
pInMsg
->
msg
->
ídPoöt
 );

1667 
COMMAND_GROUP_ADD_IF_IDENTIFYING
:

1669 i‡–
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
, 
ZCL_CLUSTER_ID_GEN_IDENTIFY
, 
ATTRID_IDENTIFY_TIME
, &
©åRec
 ) )

1670 
	`z˛RódAârD©a
–(
uöt8
 *)&
idítifyTime
, &
©åRec
, 
NULL
 );

1673 i‡–
idítifyTime
 > 0 )

1674 
	`z˛GíîÆ_AddGroup
–
pInMsg
->
msg
->
ídPoöt
, &
group
, 
pD©a
 );

1678 
°©
 = 
ZFaûuª
;

1682  ( 
°©
 );

1683 
	}
}

1694 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInGroupsClõ¡
–
z˛Incomög_t
 *
pInMsg
,

1695 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

1697 
≠s_Group_t
 
group
;

1698 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

1699 
uöt8
 
gΩC¡
;

1700 
uöt8
 
«meLí
;

1701 
z˛GroupR•_t
 
r•
;

1702 
uöt8
 
i
;

1703 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

1705 
	`oßl_mem£t
–(
uöt8
*)&
group
, 0, –
≠s_Group_t
 ) );

1706 
	`oßl_mem£t
–(
uöt8
*)&
r•
, 0, –
z˛GroupR•_t
 ) );

1708  
pInMsg
->
hdr
.
comm™dID
 )

1710 
COMMAND_GROUP_ADD_RSP
:

1711 
COMMAND_GROUP_VIEW_RSP
:

1712 
COMMAND_GROUP_REMOVE_RSP
:

1713 
r•
.
°©us
 = *
pD©a
++;

1714 
group
.
ID
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

1716 i‡–
r•
.
°©us
 =
ZCL_STATUS_SUCCESS
 && 
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_GROUP_VIEW_RSP
 )

1718 
pD©a
 += 2;

1719 
«meLí
 = *
pD©a
++;

1720 i‡–
«meLí
 > (
APS_GROUP_NAME_LEN
-1) )

1721 
«meLí
 = (
APS_GROUP_NAME_LEN
-1);

1722 
group
.
«me
[0] = 
«meLí
;

1723 
	`oßl_mem˝y
–&(
group
.
«me
[1]), 
pD©a
, 
«meLí
 );

1724 
r•
.
gΩName
 = 
group
.
«me
;

1727 i‡–
pCBs
->
p‚GroupR•
 )

1729 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

1730 
r•
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

1731 
r•
.
gΩC¡
 = 1;

1732 
r•
.
gΩLi°
 = &
group
.
ID
;

1733 
r•
.
ˇ∑côy
 = 0;

1735 
pCBs
->
	`p‚GroupR•
–&
r•
 );

1739 
COMMAND_GROUP_GET_MEMBERSHIP_RSP
:

1741 
uöt16
 *
gΩLi°
 = 
NULL
;

1742 
r•
.
ˇ∑côy
 = *
pD©a
++;

1743 
gΩC¡
 = *
pD©a
++;

1745 i‡–
gΩC¡
 > 0 )

1748 
gΩLi°
 = 
	`oßl_mem_Æloc
––
uöt16
 ) * 
gΩC¡
 );

1749 i‡–
gΩLi°
 !
NULL
 )

1751 
r•
.
gΩC¡
 = grpCnt;

1752  
i
 = 0; i < 
gΩC¡
; i++ )

1754 
gΩLi°
[
i
] = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

1755 
pD©a
 += 2;

1760 i‡–
pCBs
->
p‚GroupR•
 )

1762 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

1763 
r•
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

1764 
r•
.
gΩLi°
 = grpList;

1766 
pCBs
->
	`p‚GroupR•
–&
r•
 );

1769 i‡–
gΩLi°
 !
NULL
 )

1771 
	`oßl_mem_‰ì
–
gΩLi°
 );

1777 
°©
 = 
ZFaûuª
;

1781  ( 
°©
 );

1782 
	}
}

1785 #ifde‡
ZCL_SCENES


1796 
ZSètus_t
 
	$z˛GíîÆ_AddS˚√
–
uöt8
 
ídpoöt
, 
z˛GíîÆ_S˚√_t
 *
s˚√
 )

1798 
z˛GíS˚√Iãm_t
 *
pNewIãm
;

1799 
z˛GíS˚√Iãm_t
 *
pLo›
;

1802 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛GíS˚√Iãm_t
 ) );

1803 i‡–
pNewIãm
 =
NULL
 )

1804  ( 
ZMemEº‹
 );

1807 
pNewIãm
->
√xt
 = (
z˛GíS˚√Iãm_t
 *)
NULL
;

1808 
pNewIãm
->
ídpoöt
 =Éndpoint;

1809 
	`oßl_mem˝y
–(
uöt8
*)&(
pNewIãm
->
s˚√
), (uöt8*)s˚√,  ( 
z˛GíîÆ_S˚√_t
 ));

1812 i‡–
z˛GíS˚√TabÀ
 =
NULL
 )

1814 
z˛GíS˚√TabÀ
 = 
pNewIãm
;

1819 
pLo›
 = 
z˛GíS˚√TabÀ
;

1820  
pLo›
->
√xt
 !
NULL
 )

1821 
pLo›
 =ÖLo›->
√xt
;

1824 
pLo›
->
√xt
 = 
pNewIãm
;

1828 
	`z˛GíîÆ_S˚√sWrôeNV
();

1830  ( 
ZSuc˚ss
 );

1831 
	}
}

1844 
z˛GíîÆ_S˚√_t
 *
	$z˛GíîÆ_FödS˚√
–
uöt8
 
ídpoöt
, 
uöt16
 
groupID
, uöt8 
s˚√ID
 )

1846 
z˛GíS˚√Iãm_t
 *
pLo›
;

1849 
pLo›
 = 
z˛GíS˚√TabÀ
;

1850  
pLo›
 )

1852 i‡–(
pLo›
->
ídpoöt
 ==Éndpoint ||Éndpoint == 0xFF)

1853 && 
pLo›
->
s˚√
.
groupID
 =groupID &&ÖLo›->s˚√.
ID
 =
s˚√ID
 )

1855  ( &(
pLo›
->
s˚√
) );

1857 
pLo›
 =ÖLo›->
√xt
;

1860  ( (
z˛GíîÆ_S˚√_t
 *)
NULL
 );

1861 
	}
}

1873 
uöt8
 
	$z˛GíîÆ_FödAŒS˚√sF‹Group
–
uöt8
 
ídpoöt
, 
uöt16
 
groupID
, uöt8 *
s˚√Li°
 )

1875 
z˛GíS˚√Iãm_t
 *
pLo›
;

1876 
uöt8
 
˙t
 = 0;

1879 
pLo›
 = 
z˛GíS˚√TabÀ
;

1880  
pLo›
 )

1882 i‡–
pLo›
->
ídpoöt
 =ídpoöà&&ÖLo›->
s˚√
.
groupID
 == groupID )

1883 
s˚√Li°
[
˙t
++] = 
pLo›
->
s˚√
.
ID
;

1884 
pLo›
 =ÖLo›->
√xt
;

1886  ( 
˙t
 );

1887 
	}
}

1900 
uöt8
 
	$z˛GíîÆ_RemoveS˚√
–
uöt8
 
ídpoöt
, 
uöt16
 
groupID
, uöt8 
s˚√ID
 )

1902 
z˛GíS˚√Iãm_t
 *
pLo›
;

1903 
z˛GíS˚√Iãm_t
 *
pPªv
;

1906 
pLo›
 = 
z˛GíS˚√TabÀ
;

1907 
pPªv
 = 
NULL
;

1908  
pLo›
 )

1910 i‡–
pLo›
->
ídpoöt
 ==Éndpoint

1911 && 
pLo›
->
s˚√
.
groupID
 =groupID &&ÖLo›->s˚√.
ID
 =
s˚√ID
 )

1913 i‡–
pPªv
 =
NULL
 )

1914 
z˛GíS˚√TabÀ
 = 
pLo›
->
√xt
;

1916 
pPªv
->
√xt
 = 
pLo›
->next;

1919 
	`oßl_mem_‰ì
–
pLo›
 );

1922 
	`z˛GíîÆ_S˚√sWrôeNV
();

1924  ( 
TRUE
 );

1926 
pPªv
 = 
pLo›
;

1927 
pLo›
 =ÖLo›->
√xt
;

1930  ( 
FALSE
 );

1931 
	}
}

1943 
	$z˛GíîÆ_RemoveAŒS˚√s
–
uöt8
 
ídpoöt
, 
uöt16
 
groupID
 )

1945 
z˛GíS˚√Iãm_t
 *
pLo›
;

1946 
z˛GíS˚√Iãm_t
 *
pPªv
;

1947 
z˛GíS˚√Iãm_t
 *
pNext
;

1950 
pLo›
 = 
z˛GíS˚√TabÀ
;

1951 
pPªv
 = 
NULL
;

1952  
pLo›
 )

1954 i‡–
pLo›
->
ídpoöt
 =ídpoöà&&ÖLo›->
s˚√
.
groupID
 == groupID )

1956 i‡–
pPªv
 =
NULL
 )

1957 
z˛GíS˚√TabÀ
 = 
pLo›
->
√xt
;

1959 
pPªv
->
√xt
 = 
pLo›
->next;

1960 
pNext
 = 
pLo›
->
√xt
;

1963 
	`oßl_mem_‰ì
–
pLo›
 );

1964 
pLo›
 = 
pNext
;

1968 
pPªv
 = 
pLo›
;

1969 
pLo›
 =ÖLo›->
√xt
;

1974 
	`z˛GíîÆ_S˚√sWrôeNV
();

1975 
	}
}

1986 
uöt8
 
	$z˛GíîÆ_Cou¡S˚√s
–
uöt8
 
ídpoöt
 )

1988 
z˛GíS˚√Iãm_t
 *
pLo›
;

1989 
uöt8
 
˙t
 = 0;

1992 
pLo›
 = 
z˛GíS˚√TabÀ
;

1993  
pLo›
 )

1995 i‡–
pLo›
->
ídpoöt
 ==Éndpoint )

1996 
˙t
++;

1997 
pLo›
 =ÖLo›->
√xt
;

1999  ( 
˙t
 );

2000 
	}
}

2011 
uöt8
 
	$z˛GíîÆ_Cou¡AŒS˚√s
( )

2013 
z˛GíS˚√Iãm_t
 *
pLo›
;

2014 
uöt8
 
˙t
 = 0;

2017 
pLo›
 = 
z˛GíS˚√TabÀ
;

2018  
pLo›
 )

2020 
˙t
++;

2021 
pLo›
 =ÖLo›->
√xt
;

2023  ( 
˙t
 );

2024 
	}
}

2045 
ZSètus_t
 
	$z˛GíîÆ_RódS˚√Cou¡CB
–
uöt16
 
˛u°îId
, uöt16 
©åId
,

2046 
uöt8
 
›î
, uöt8 *
pVÆue
, 
uöt16
 *
pLí
 )

2048 
ZSètus_t
 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2051  
›î
 )

2053 
ZCL_OPER_LEN
:

2054 *
pLí
 = 1;

2057 
ZCL_OPER_READ
:

2058 *
pVÆue
 = 
	`z˛GíîÆ_Cou¡AŒS˚√s
();

2060 i‡–
pLí
 !
NULL
 )

2062 *
pLí
 = 1;

2067 
°©us
 = 
ZCL_STATUS_SOFTWARE_FAILURE
;

2071  ( 
°©us
 );

2072 
	}
}

2083 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInS˚√sSîvî
–
z˛Incomög_t
 *
pInMsg
,

2084 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

2086 
z˛AârRec_t
 
©åRec
;

2087 
z˛GíîÆ_S˚√_t
 
s˚√
;

2088 
z˛GíîÆ_S˚√_t
 *
pS˚√
;

2089 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

2090 
uöt8
 
«meLí
;

2091 
uöt8
 
°©us
;

2092 
uöt8
 
s˚√C¡
 = 0;

2093 
uöt8
 *
s˚√Li°
 = 
NULL
;

2094 
uöt8
 
£ndR•
 = 
FALSE
;

2095 
uöt8
 
«meSuµ‹t
 = 
FALSE
;

2096 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

2098 
	`oßl_mem£t
–(
uöt8
*)&
s˚√
, 0, –
z˛GíîÆ_S˚√_t
 ) );

2100 
s˚√
.
groupID
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2101 
pD©a
 += 2;

2102 
s˚√
.
ID
 = *
pD©a
++;

2104  
pInMsg
->
hdr
.
comm™dID
 )

2106 
COMMAND_SCENE_ADD
:

2108 
s˚√
.
å™sTime
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2109 
pD©a
 += 2;

2110 
«meLí
*
pD©a
++;

2113 i‡–
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
, 
ZCL_CLUSTER_ID_GEN_SCENES
, 
ATTRID_SCENES_NAME_SUPPORT
, &
©åRec
 ) )

2115 
	`z˛RódAârD©a
–&
«meSuµ‹t
, &
©åRec
, 
NULL
 );

2118 i‡–
«meSuµ‹t
 )

2120 i‡–
«meLí
 > (
ZCL_GEN_SCENE_NAME_LEN
-1) )

2123 
s˚√
.
«me
[0] = 
ZCL_GEN_SCENE_NAME_LEN
-1;

2127 
s˚√
.
«me
[0] = 
«meLí
;

2129 
	`oßl_mem˝y
–&(
s˚√
.
«me
[1]), 
pD©a
, scene.name[0] );

2132 
pD©a
 +
«meLí
;

2134 
s˚√
.
extLí
 = 
pInMsg
->
pD©aLí
 - ( (
uöt16
)–
pD©a
 -ÖInMsg->pData ) );

2135 i‡–
s˚√
.
extLí
 > 0 )

2138 i‡–
s˚√
.
extLí
 > 
ZCL_GEN_SCENE_EXT_LEN
 )

2140 
s˚√
.
extLí
 = 
ZCL_GEN_SCENE_EXT_LEN
;

2142 
	`oßl_mem˝y
–
s˚√
.
extFõld
, 
pD©a
, s˚√.
extLí
 );

2145 i‡–
s˚√
.
groupID
 == 0x0000 ||

2146 
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
 ) !
NULL
 )

2150 
pS˚√
 = 
	`z˛GíîÆ_FödS˚√
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
, s˚√.
ID
 );

2151 i‡–
pS˚√
 || ( 
	`z˛GíîÆ_Cou¡AŒS˚√s
(Ë< 
ZCL_GEN_MAX_SCENES
 ) )

2153 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2154 i‡–
pS˚√
 !
NULL
 )

2157 
pS˚√
->
å™sTime
 = 
s˚√
.transTime;

2158 
	`oßl_mem˝y
–
pS˚√
->
«me
, 
s˚√
.«me, 
ZCL_GEN_SCENE_NAME_LEN
 );

2161 
	`oßl_mem˝y
–
pS˚√
->
extFõld
, 
s˚√
.extFõld, s˚√.
extLí
 );

2162 
pS˚√
->
extLí
 = 
s˚√
.extLen;

2165 
	`z˛GíîÆ_S˚√sWrôeNV
();

2170 
	`z˛GíîÆ_AddS˚√
–
pInMsg
->
msg
->
ídPoöt
, &
s˚√
 );

2175 
°©us
 = 
ZCL_STATUS_INSUFFICIENT_SPACE
;

2180 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

2183 
	`z˛GíîÆ_SídS˚√AddRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2184 
°©us
, 
s˚√
.
groupID
, s˚√.
ID
,

2185 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2186 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2189 
COMMAND_SCENE_VIEW
:

2190 
pS˚√
 = 
	`z˛GíîÆ_FödS˚√
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
, s˚√.
ID
 );

2191 i‡–
pS˚√
 !
NULL
 )

2193 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2198 i‡–
s˚√
.
groupID
 != 0x0000 &&

2199 
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
 ) =
NULL
 )

2201 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

2205 
°©us
 = 
ZCL_STATUS_NOT_FOUND
;

2207 
pS˚√
 = &
s˚√
;

2209 
	`z˛GíîÆ_SídS˚√VõwRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2210 
°©us
, 
pS˚√
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2211 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2214 
COMMAND_SCENE_REMOVE
:

2215 i‡–
	`z˛GíîÆ_RemoveS˚√
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
, s˚√.
ID
 ) )

2217 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2222 i‡–
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
 ) =
NULL
 )

2225 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

2229 
°©us
 = 
ZCL_STATUS_NOT_FOUND
;

2233 i‡–
	`UNICAST_MSG
–
pInMsg
->
msg
 ) )

2236 
	`z˛GíîÆ_SídS˚√RemoveRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2237 
°©us
, 
s˚√
.
groupID
,

2238 
s˚√
.
ID
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2240 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2243 
COMMAND_SCENE_REMOVE_ALL
:

2244 i‡–
s˚√
.
groupID
 == 0x0000 ||

2245 
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
 ) !
NULL
 )

2247 
	`z˛GíîÆ_RemoveAŒS˚√s
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
 );

2248 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2252 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

2255 i‡–
	`UNICAST_MSG
–
pInMsg
->
msg
 ) )

2258 
	`z˛GíîÆ_SídS˚√RemoveAŒRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2259 
°©us
, 
s˚√
.
groupID
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2261 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2264 
COMMAND_SCENE_STORE
:

2265 i‡–
s˚√
.
groupID
 == 0x0000 ||

2266 
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
 ) !
NULL
 )

2270 
pS˚√
 = 
	`z˛GíîÆ_FödS˚√
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
, s˚√.
ID
 );

2271 i‡–
pS˚√
 || ( 
	`z˛GíîÆ_Cou¡AŒS˚√s
(Ë< 
ZCL_GEN_MAX_SCENES
 ) )

2273 
uöt8
 
s˚√Ch™ged
 = 
FALSE
;

2275 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2276 i‡–
pS˚√
 =
NULL
 )

2279 
pS˚√
 = &
s˚√
;

2282 i‡–
pCBs
->
p‚S˚√St‹eReq
 )

2284 
z˛S˚√Req_t
 
ªq
;

2286 
ªq
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2287 
ªq
.
s˚√
 = 
pS˚√
;

2290 i‡–
pCBs
->
	`p‚S˚√St‹eReq
–&
ªq
 ) )

2292 
s˚√Ch™ged
 = 
TRUE
;

2296 i‡–
pS˚√
 =&
s˚√
 )

2299 
	`z˛GíîÆ_AddS˚√
–
pInMsg
->
msg
->
ídPoöt
, &
s˚√
 );

2301 i‡–
s˚√Ch™ged
 )

2304 
	`z˛GíîÆ_S˚√sWrôeNV
();

2309 
°©us
 = 
ZCL_STATUS_INSUFFICIENT_SPACE
;

2314 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

2317 i‡–
	`UNICAST_MSG
–
pInMsg
->
msg
 ) )

2320 
	`z˛GíîÆ_SídS˚√St‹eRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2321 
°©us
, 
s˚√
.
groupID
, s˚√.
ID
,

2322 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2324 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2327 
COMMAND_SCENE_RECALL
:

2328 
pS˚√
 = 
	`z˛GíîÆ_FödS˚√
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
, s˚√.
ID
 );

2329 i‡–
pS˚√
 && 
pCBs
->
p‚S˚√ReˇŒReq
 )

2331 
z˛S˚√Req_t
 
ªq
;

2333 
ªq
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2334 
ªq
.
s˚√
 = 
pS˚√
;

2336 
pCBs
->
	`p‚S˚√ReˇŒReq
–&
ªq
 );

2341 
COMMAND_SCENE_GET_MEMBERSHIP
:

2343 i‡–
s˚√
.
groupID
 == 0x0000 ||

2344 
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
 ) !
NULL
 )

2347 
s˚√Li°
 = 
	`oßl_mem_Æloc
–
ZCL_GEN_MAX_SCENES
 );

2348 i‡–
s˚√Li°
 !
NULL
 )

2350 
s˚√C¡
 = 
	`z˛GíîÆ_FödAŒS˚√sF‹Group
–
pInMsg
->
msg
->
ídPoöt
,

2351 
s˚√
.
groupID
, 
s˚√Li°
 );

2352 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2353 i‡–
	`UNICAST_MSG
–
pInMsg
->
msg
 ) )

2356 
£ndR•
 = 
TRUE
;

2362 i‡–
s˚√C¡
 != 0 )

2364 
£ndR•
 = 
TRUE
;

2371 
°©us
 = 
ZCL_STATUS_INSUFFICIENT_SPACE
;

2372 
£ndR•
 = 
TRUE
;

2378 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

2379 
£ndR•
 = 
TRUE
;

2382 i‡–
£ndR•
 )

2384 
	`z˛GíîÆ_SídS˚√GëMembîshùRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2385 
°©us
, 
	`z˛GíîÆ_S˚√sRemaögC≠acôy
(), 
s˚√C¡
, 
s˚√Li°
,

2386 
s˚√
.
groupID
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2389 i‡–
s˚√Li°
 !
NULL
 )

2391 
	`oßl_mem_‰ì
–
s˚√Li°
 );

2394 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2398 
°©
 = 
ZFaûuª
;

2402  ( 
°©
 );

2403 
	}
}

2414 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInS˚√sClõ¡
–
z˛Incomög_t
 *
pInMsg
,

2415 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

2417 
z˛GíîÆ_S˚√_t
 
s˚√
;

2418 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

2419 
uöt8
 
«meLí
;

2420 
z˛S˚√R•_t
 
r•
;

2421 
uöt8
 
i
;

2422 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

2424 
	`oßl_mem£t
–(
uöt8
*)&
s˚√
, 0, –
z˛GíîÆ_S˚√_t
 ) );

2425 
	`oßl_mem£t
–(
uöt8
*)&
r•
, 0, –
z˛S˚√R•_t
 ) );

2428 
r•
.
°©us
 = *
pD©a
++;

2430 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SCENE_GET_MEMBERSHIP_RSP
 )

2432 
r•
.
ˇ∑côy
 = *
pD©a
++;

2435 
s˚√
.
groupID
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2436 
pD©a
 += 2;

2438  
pInMsg
->
hdr
.
comm™dID
 )

2440 
COMMAND_SCENE_VIEW_RSP
:

2442 
s˚√
.
ID
 = *
pD©a
++;

2443 
s˚√
.
å™sTime
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2444 
pD©a
 += 2;

2445 
«meLí
 = *
pD©a
++;

2446 i‡–
«meLí
 > (
ZCL_GEN_SCENE_NAME_LEN
-1) )

2449 
s˚√
.
«me
[0] = 
ZCL_GEN_SCENE_NAME_LEN
-1;

2453 
s˚√
.
«me
[0] = 
«meLí
;

2455 
	`oßl_mem˝y
–&(
s˚√
.
«me
[1]), 
pD©a
, scene.name[0] );

2457 
pD©a
 +
«meLí
;

2463 
COMMAND_SCENE_ADD_RSP
:

2464 
COMMAND_SCENE_REMOVE_RSP
:

2465 
COMMAND_SCENE_REMOVE_ALL_RSP
:

2466 
COMMAND_SCENE_STORE_RSP
:

2467 i‡–
pCBs
->
p‚S˚√R•
 )

2469 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2470 
r•
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

2471 
r•
.
s˚√
 = &scene;

2473 
pCBs
->
	`p‚S˚√R•
–&
r•
 );

2477 
COMMAND_SCENE_GET_MEMBERSHIP_RSP
:

2479 
uöt8
 *
s˚√Li°
 = 
NULL
;

2481 i‡–
r•
.
°©us
 =
ZCL_STATUS_SUCCESS
 )

2483 
uöt8
 
s˚√C¡
 = *
pD©a
++;

2485 i‡–
s˚√C¡
 > 0 )

2488 
s˚√Li°
 = 
	`oßl_mem_Æloc
–
s˚√C¡
 );

2489 i‡–
s˚√Li°
 !
NULL
 )

2491 
r•
.
s˚√C¡
 = sceneCnt;

2492  
i
 = 0; i < 
s˚√C¡
; i++ )

2493 
s˚√Li°
[
i
] = *
pD©a
++;

2498 i‡–
pCBs
->
p‚S˚√R•
 )

2500 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2501 
r•
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

2502 
r•
.
s˚√Li°
 = sceneList;

2503 
r•
.
s˚√
 = &scene;

2505 
pCBs
->
	`p‚S˚√R•
–&
r•
);

2508 i‡–
s˚√Li°
 !
NULL
 )

2510 
	`oßl_mem_‰ì
–
s˚√Li°
 );

2516 
°©
 = 
ZFaûuª
;

2520  ( 
°©
 );

2521 
	}
}

2524 #ifde‡
ZCL_ON_OFF


2534 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInOnOff
–
z˛Incomög_t
 *
pInMsg
,

2535 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

2537 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

2539 i‡–
pInMsg
->
hdr
.
comm™dID
 > 
COMMAND_TOGGLE
 )

2540  ( 
ZFaûuª
 );

2542 i‡–
pCBs
->
p‚OnOff
 )

2543 
pCBs
->
	`p‚OnOff
–
pInMsg
->
hdr
.
comm™dID
 );

2547  ( 
ZSuc˚ss
 );

2548 
	}
}

2551 #ifde‡
ZCL_LEVEL_CTRL


2561 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInLevñC⁄åﬁ
–
z˛Incomög_t
 *
pInMsg
,

2562 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

2564 
uöt8
 
wôhOnOff
 = 
FALSE
;

2565 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

2567 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

2569  
pInMsg
->
hdr
.
comm™dID
 )

2571 
COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
:

2572 
wôhOnOff
 = 
TRUE
;

2574 
COMMAND_LEVEL_MOVE_TO_LEVEL
:

2575 i‡–
pCBs
->
p‚LevñC⁄åﬁMoveToLevñ
 )

2577 
z˛LCMoveToLevñ_t
 
cmd
;

2579 
cmd
.
Àvñ
 = 
pInMsg
->
pD©a
[0];

2580 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[1],ÖInMsg->pData[2] );

2581 
cmd
.
wôhOnOff
 = withOnOff;

2583 
pCBs
->
	`p‚LevñC⁄åﬁMoveToLevñ
–&
cmd
 );

2587 
COMMAND_LEVEL_MOVE_WITH_ON_OFF
:

2588 
wôhOnOff
 = 
TRUE
;

2590 
COMMAND_LEVEL_MOVE
:

2591 i‡–
pCBs
->
p‚LevñC⁄åﬁMove
 )

2593 
z˛LCMove_t
 
cmd
;

2595 
cmd
.
moveMode
 = 
pInMsg
->
pD©a
[0];

2596 
cmd
.
øã
 = 
pInMsg
->
pD©a
[1];

2597 
cmd
.
wôhOnOff
 = withOnOff;

2599 
pCBs
->
	`p‚LevñC⁄åﬁMove
–&
cmd
 );

2603 
COMMAND_LEVEL_STEP_WITH_ON_OFF
:

2604 
wôhOnOff
 = 
TRUE
;

2606 
COMMAND_LEVEL_STEP
:

2607 i‡–
pCBs
->
p‚LevñC⁄åﬁSãp
 )

2609 
z˛LCSãp_t
 
cmd
;

2611 
cmd
.
°ïMode
 = 
pInMsg
->
pD©a
[0];

2612 
cmd
.
amou¡
 = 
pInMsg
->
pD©a
[1];

2613 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

2614 
cmd
.
wôhOnOff
 = withOnOff;

2616 
pCBs
->
	`p‚LevñC⁄åﬁSãp
–&
cmd
 );

2620 
COMMAND_LEVEL_STOP
:

2621 
COMMAND_LEVEL_STOP_WITH_ON_OFF
:

2623 i‡–
pCBs
->
p‚LevñC⁄åﬁSt›
 )

2625 
pCBs
->
	`p‚LevñC⁄åﬁSt›
();

2630 
°©
 = 
ZFaûuª
;

2636  ( 
°©
 );

2637 
	}
}

2640 #ifde‡
ZCL_ALARMS


2651 
ZSètus_t
 
	$z˛GíîÆ_AddAœrm
–
uöt8
 
ídpoöt
, 
z˛GíîÆ_Aœrm_t
 *
Æ¨m
 )

2653 
z˛GíAœrmIãm_t
 *
pNewIãm
;

2654 
z˛GíAœrmIãm_t
 *
pLo›
;

2657 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛GíAœrmIãm_t
 ) );

2658 i‡–
pNewIãm
 =
NULL
 )

2659  ( 
ZMemEº‹
 );

2662 
pNewIãm
->
√xt
 = (
z˛GíAœrmIãm_t
 *)
NULL
;

2663 
pNewIãm
->
ídpoöt
 =Éndpoint;

2664 
	`oßl_mem˝y
–(
uöt8
*)(&
pNewIãm
->
Æ¨m
), (uöt8*Ôœrm,  ( 
z˛GíîÆ_Aœrm_t
 ) );

2667 i‡–
z˛GíAœrmTabÀ
 =
NULL
 )

2669 
z˛GíAœrmTabÀ
 = 
pNewIãm
;

2674 
pLo›
 = 
z˛GíAœrmTabÀ
;

2675  
pLo›
->
√xt
 !
NULL
 )

2676 
pLo›
 =ÖLo›->
√xt
;

2679 
pLo›
->
√xt
 = 
pNewIãm
;

2682  ( 
ZSuc˚ss
 );

2683 
	}
}

2696 
z˛GíîÆ_Aœrm_t
 *
	$z˛GíîÆ_FödAœrm
–
uöt8
 
ídpoöt
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
 )

2698 
z˛GíAœrmIãm_t
 *
pLo›
;

2701 
pLo›
 = 
z˛GíAœrmTabÀ
;

2702  
pLo›
 )

2704 i‡–
pLo›
->
ídpoöt
 ==Éndpoint &&

2705 
pLo›
->
Æ¨m
.
code
 =
Æ¨mCode
 &&ÖLo›->Æ¨m.
˛u°îID
 == clusterID )

2707  ( &(
pLo›
->
Æ¨m
) );

2709 
pLo›
 =ÖLo›->
√xt
;

2712  ( (
z˛GíîÆ_Aœrm_t
 *)
NULL
 );

2713 
	}
}

2724 
z˛GíîÆ_Aœrm_t
 *
	$z˛GíîÆ_FödE¨lõ°Aœrm
–
uöt8
 
ídpoöt
 )

2726 
z˛GíAœrmIãm_t
 *
pLo›
;

2727 
z˛GíAœrmIãm_t
 
óæõ°Aœrm
;

2728 
z˛GíAœrmIãm_t
 *
pE¨lõ°Aœrm
 = &
óæõ°Aœrm
;

2730 
pE¨lõ°Aœrm
->
Æ¨m
.
timeSèmp
 = 0xFFFFFFFF;

2733 
pLo›
 = 
z˛GíAœrmTabÀ
;

2734  
pLo›
 )

2736 i‡–
pLo›
->
ídpoöt
 ==Éndpoint &&

2737 
pLo›
->
Æ¨m
.
timeSèmp
 < 
pE¨lõ°Aœrm
->alarm.timeStamp )

2739 
pE¨lõ°Aœrm
 = 
pLo›
;

2741 
pLo›
 =ÖLo›->
√xt
;

2744 i‡–
pE¨lõ°Aœrm
->
Æ¨m
.
timeSèmp
 != 0xFFFFFFFF )

2745  ( &(
pE¨lõ°Aœrm
->
Æ¨m
) );

2748  ( (
z˛GíîÆ_Aœrm_t
 *)
NULL
 );

2749 
	}
}

2762 
	$z˛GíîÆ_Re£tAœrm
–
uöt8
 
ídpoöt
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
 )

2764 
z˛GíAœrmIãm_t
 *
pLo›
;

2765 
z˛GíAœrmIãm_t
 *
pPªv
;

2768 
pLo›
 = 
z˛GíAœrmTabÀ
;

2769 
pPªv
 = 
NULL
;

2770  
pLo›
 )

2772 i‡–
pLo›
->
ídpoöt
 ==Éndpoint &&

2773 
pLo›
->
Æ¨m
.
code
 =
Æ¨mCode
 &&ÖLo›->Æ¨m.
˛u°îID
 == clusterID )

2775 i‡–
pPªv
 =
NULL
 )

2776 
z˛GíAœrmTabÀ
 = 
pLo›
->
√xt
;

2778 
pPªv
->
√xt
 = 
pLo›
->next;

2781 
	`oßl_mem_‰ì
–
pLo›
 );

2789 
pPªv
 = 
pLo›
;

2790 
pLo›
 =ÖLo›->
√xt
;

2792 
	}
}

2804 
	$z˛GíîÆ_Re£tAŒAœrms
–
uöt8
 
ídpoöt
, uöt8 
nŸifyAµ
 )

2806 
z˛GíAœrmIãm_t
 *
pLo›
;

2807 
z˛GíAœrmIãm_t
 *
pPªv
;

2808 
z˛GíAœrmIãm_t
 *
pNext
;

2811 
pLo›
 = 
z˛GíAœrmTabÀ
;

2812 
pPªv
 = 
NULL
;

2813  
pLo›
 )

2815 i‡–
pLo›
->
ídpoöt
 ==Éndpoint )

2817 i‡–
pPªv
 =
NULL
 )

2818 
z˛GíAœrmTabÀ
 = 
pLo›
->
√xt
;

2820 
pPªv
->
√xt
 = 
pLo›
->next;

2822 
pNext
 = 
pLo›
->
√xt
;

2825 
	`oßl_mem_‰ì
–
pLo›
 );

2827 
pLo›
 = 
pNext
;

2831 
pPªv
 = 
pLo›
;

2832 
pLo›
 =ÖLo›->
√xt
;

2836 i‡–
nŸifyAµ
 )

2843 
	}
}

2854 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInAœrmsSîvî
–
z˛Incomög_t
 *
pInMsg
,

2855 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

2857 
z˛GíîÆ_Aœrm_t
 *
pAœrm
;

2858 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

2859 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

2861  
pInMsg
->
hdr
.
comm™dID
 )

2863 
COMMAND_ALARMS_RESET
:

2864 
	`z˛GíîÆ_Re£tAœrm
–
pInMsg
->
msg
->
ídPoöt
, 
pD©a
[0],

2865 
	`BUILD_UINT16
–
pD©a
[1],ÖData[2] ) );

2868 
COMMAND_ALARMS_RESET_ALL
:

2869 
	`z˛GíîÆ_Re£tAŒAœrms
–
pInMsg
->
msg
->
ídPoöt
, 
TRUE
 );

2872 
COMMAND_ALARMS_GET
:

2873 
pAœrm
 = 
	`z˛GíîÆ_FödE¨lõ°Aœrm
–
pInMsg
->
msg
->
ídPoöt
 );

2874 i‡–
pAœrm
 )

2877 
	`z˛GíîÆ_SídAœrmGëRe•no£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2878 
ZCL_STATUS_SUCCESS
, 
pAœrm
->
code
,

2879 
pAœrm
->
˛u°îID
,ÖAœrm->
timeSèmp
,

2880 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2882 
	`z˛GíîÆ_Re£tAœrm
–
pInMsg
->
msg
->
ídPoöt
, 
pAœrm
->
code
,ÖAœrm->
˛u°îID
 );

2887 
	`z˛GíîÆ_SídAœrmGëRe•no£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2888 
ZCL_STATUS_NOT_FOUND
, 0, 0, 0,

2889 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2891 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2894 
COMMAND_ALARMS_RESET_LOG
:

2895 
	`z˛GíîÆ_Re£tAŒAœrms
–
pInMsg
->
msg
->
ídPoöt
, 
FALSE
 );

2898 #ifde‡
SE_UK_EXT


2899 
COMMAND_ALARMS_PUBLISH_EVENT_LOG
:

2900 i‡–
pCBs
->
p‚PublishEvítLog
 )

2902 
z˛PublishEvítLog_t
 
evítLog
;

2904 
evítLog
.
logID
 = *
pD©a
++;

2905 
evítLog
.
cmdIndex
 = *
pD©a
++;

2906 
evítLog
.
tŸÆCmds
 = *
pD©a
++;

2909 
evítLog
.
numSubLogs
 = (
pInMsg
->
pD©aLí
-3)/(1+4);

2910 i‡–
evítLog
.
numSubLogs
 > 0 )

2913 
evítLog
.
pLogs
 = (
z˛EvítLogPaylﬂd_t
 *)
	`oßl_mem_Æloc
( ( zclEventLogPayload_t ) *

2914 
evítLog
.
numSubLogs
 );

2915 i‡–
evítLog
.
pLogs
 !
NULL
 )

2918  
uöt8
 
i
 = 0; i < 
evítLog
.
numSubLogs
; i++ )

2920 
evítLog
.
pLogs
[
i
].
evítId
 = *
pD©a
++;

2921 
evítLog
.
pLogs
[
i
].
evítTime
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

2922 
pD©a
 += 4;

2927 
°©
 = 
ZCL_STATUS_SOFTWARE_FAILURE
;

2932 
evítLog
.
pLogs
 = 
NULL
;

2935 i‡–
°©
 =
ZSuc˚ss
 )

2937 
pCBs
->
	`p‚PublishEvítLog
–&(
pInMsg
->
msg
->
§cAddr
), &
evítLog
 );

2940 i‡–
evítLog
.
pLogs
 !
NULL
 )

2942 
	`oßl_mem_‰ì
–
evítLog
.
pLogs
 );

2949 
°©
 = 
ZFaûuª
;

2953  ( 
°©
 );

2954 
	}
}

2965 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInAœrmsClõ¡
–
z˛Incomög_t
 *
pInMsg
,

2966 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

2968 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

2969 
z˛Aœrm_t
 
Æ¨m
;

2970 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

2972 
	`oßl_mem£t
–(
uöt8
*)&
Æ¨m
, 0, –
z˛Aœrm_t
 ) );

2974  
pInMsg
->
hdr
.
comm™dID
 )

2976 
COMMAND_ALARMS_ALARM
:

2977 i‡–
pCBs
->
p‚Aœrm
 )

2979 
Æ¨m
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2980 
Æ¨m
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

2981 
Æ¨m
.
°©us
 = *
pD©a
++;

2982 
Æ¨m
.
Æ¨mCode
 = *
pD©a
++;

2983 
Æ¨m
.
˛u°îID
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2984 
pD©a
 += 2;

2985 
Æ¨m
.
timeSèmp
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

2987 
pCBs
->
	`p‚Aœrm
–&
Æ¨m
 );

2991 
COMMAND_ALARMS_GET_RSP
:

2992 i‡–
pCBs
->
p‚Aœrm
 )

2994 
Æ¨m
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2995 
Æ¨m
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

2996 
Æ¨m
.
Æ¨mCode
 = *
pD©a
++;

2997 
Æ¨m
.
˛u°îID
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2999 
pCBs
->
	`p‚Aœrm
–&
Æ¨m
 );

3003 #ifde‡
SE_UK_EXT


3004 
COMMAND_ALARMS_GET_EVENT_LOG
:

3005 i‡–
pCBs
->
p‚GëEvítLog
 )

3007 
z˛GëEvítLog_t
 
evítLog
;

3009 
evítLog
.
logID
 = *
pD©a
++;

3010 
evítLog
.
°¨tTime
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

3011 
pD©a
 += 4;

3012 
evítLog
.
ídTime
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

3013 
pD©a
 += 4;

3014 
evítLog
.
numEvíts
 = *
pD©a
;

3016 
pCBs
->
	`p‚GëEvítLog
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

3017 &
evítLog
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

3023 
°©
 = 
ZFaûuª
;

3027  ( 
°©
 );

3028 
	}
}

3031 #ifde‡
ZCL_LOCATION


3041 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInLoˇti⁄Sîvî
–
z˛Incomög_t
 *
pInMsg
,

3042 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

3044 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

3045 
z˛Loˇti⁄_t
 
cmd
;

3046 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

3048 
	`oßl_mem£t
–(
uöt8
*)&
cmd
, 0, –
z˛Loˇti⁄_t
 ) );

3050  
pInMsg
->
hdr
.
comm™dID
 )

3052 
COMMAND_LOCATION_SET_ABSOLUTE
:

3053 
cmd
.
un
.
absLoc
.
co‹dö©e1
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3054 
pD©a
 += 2;

3055 
cmd
.
un
.
absLoc
.
co‹dö©e2
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3056 
pD©a
 += 2;

3057 
cmd
.
un
.
absLoc
.
co‹dö©e3
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3058 
pD©a
 += 2;

3059 
cmd
.
un
.
absLoc
.
powî
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3060 
pD©a
 += 2;

3061 
cmd
.
un
.
absLoc
.
∑thLossExp⁄ít
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3063 i‡–
pCBs
->
p‚Loˇti⁄
 )

3065 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

3066 
cmd
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

3069 
pCBs
->
	`p‚Loˇti⁄
–&
cmd
 );

3073 
COMMAND_LOCATION_SET_DEV_CFG
:

3074 
cmd
.
un
.
devCfg
.
powî
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3075 
pD©a
 += 2;

3076 
cmd
.
un
.
devCfg
.
∑thLossExp⁄ít
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3077 
pD©a
 += 2;

3078 
cmd
.
un
.
devCfg
.
ˇlcPîiod
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3079 
pD©a
 += 2;

3080 
cmd
.
un
.
devCfg
.
numMósuªmíts
 = *
pD©a
++;

3081 
cmd
.
un
.
devCfg
.
ªp‹tPîiod
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3083 i‡–
pCBs
->
p‚Loˇti⁄
 )

3085 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

3086 
cmd
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

3089 
pCBs
->
	`p‚Loˇti⁄
–&
cmd
 );

3093 
COMMAND_LOCATION_GET_DEV_CFG
:

3094 
cmd
.
un
.
õìAddr
 = 
pD©a
;

3096 i‡–
pCBs
->
p‚Loˇti⁄
 )

3098 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

3099 
cmd
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

3100 
cmd
.
£qNum
 = 
pInMsg
->
hdr
.
å™sSeqNum
;

3103 
pCBs
->
	`p‚Loˇti⁄
–&
cmd
 );

3105 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

3108 
COMMAND_LOCATION_GET_DATA
:

3109 
cmd
.
un
.
loc
.
bôm≠
.
locByã
 = *
pD©a
++;

3110 
cmd
.
un
.
loc
.
numRe•⁄£s
 = *
pD©a
++;

3112 i‡–
cmd
.
un
.
loc
.
brdˇ°Re•⁄£
 == 0 )

3113 
	`oßl_˝yExtAddr
–
cmd
.
un
.
loc
.
èrgëAddr
, 
pD©a
 );

3115 i‡–
pCBs
->
p‚Loˇti⁄
 )

3117 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

3118 
cmd
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

3119 
cmd
.
£qNum
 = 
pInMsg
->
hdr
.
å™sSeqNum
;

3122 
pCBs
->
	`p‚Loˇti⁄
–&
cmd
 );

3124 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

3128 
°©
 = 
ZFaûuª
;

3132  ( 
°©
 );

3133 
	}
}

3144 
	$z˛GíîÆ_Pro˚ssInLoˇti⁄D©aR•
–
z˛Incomög_t
 *
pInMsg
,

3145 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

3147 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

3148 
z˛Loˇti⁄R•_t
 
r•
;

3150 
	`oßl_mem£t
–(
uöt8
*)&
r•
, 0, –
z˛Loˇti⁄R•_t
 ) );

3152 i‡–
pCBs
->
p‚Loˇti⁄R•
 )

3154 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_LOCATION_DATA_RSP
 )

3155 
r•
.
un
.
loc
.
°©us
 = *
pD©a
++;

3157 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_LOCATION_DATA_RSP
 ||

3158 
r•
.
un
.
loc
.
°©us
 =
ZCL_STATUS_SUCCESS
 )

3160 
r•
.
un
.
loc
.
d©a
.
ty≥
 = *
pD©a
++;

3161 
r•
.
un
.
loc
.
d©a
.
absLoc
.
co‹dö©e1
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3162 
pD©a
 += 2;

3163 
r•
.
un
.
loc
.
d©a
.
absLoc
.
co‹dö©e2
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3164 
pD©a
 += 2;

3166 i‡–
	`loˇti⁄Ty≥2D
–
r•
.
un
.
loc
.
d©a
.
ty≥
 ) == 0 )

3168 
r•
.
un
.
loc
.
d©a
.
absLoc
.
co‹dö©e3
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3169 
pD©a
 += 2;

3172 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_LOCATION_COMPACT_DATA_NOTIF
 )

3174 
r•
.
un
.
loc
.
d©a
.
absLoc
.
powî
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3175 
pD©a
 += 2;

3176 
r•
.
un
.
loc
.
d©a
.
absLoc
.
∑thLossExp⁄ít
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3177 
pD©a
 += 2;

3180 i‡–
	`loˇti⁄Ty≥Absﬁuã
–
r•
.
un
.
loc
.
d©a
.
ty≥
 ) == 0 )

3182 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_LOCATION_COMPACT_DATA_NOTIF
 )

3183 
r•
.
un
.
loc
.
d©a
.
ˇlcLoc
.
loˇti⁄Mëhod
 = *
pD©a
++;

3185 
r•
.
un
.
loc
.
d©a
.
ˇlcLoc
.
quÆôyMósuª
 = *
pD©a
++;

3186 
r•
.
un
.
loc
.
d©a
.
ˇlcLoc
.
loˇti⁄Age
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3190 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

3191 
r•
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

3194 
pCBs
->
	`p‚Loˇti⁄R•
–&
r•
 );

3196 
	}
}

3207 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInLoˇti⁄Clõ¡
–
z˛Incomög_t
 *
pInMsg
,

3208 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

3210 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

3211 
z˛Loˇti⁄R•_t
 
r•
;

3212 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

3214 
	`oßl_mem£t
–(
uöt8
*)&
r•
, 0, –
z˛Loˇti⁄R•_t
 ) );

3216  
pInMsg
->
hdr
.
comm™dID
 )

3218 
COMMAND_LOCATION_DEV_CFG_RSP
:

3219 i‡–
pCBs
->
p‚Loˇti⁄R•
 )

3221 
r•
.
un
.
devCfg
.
°©us
 = *
pD©a
++;

3222 i‡–
r•
.
un
.
devCfg
.
°©us
 =
ZCL_STATUS_SUCCESS
 )

3224 
r•
.
un
.
devCfg
.
d©a
.
powî
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3225 
pD©a
 += 2;

3226 
r•
.
un
.
devCfg
.
d©a
.
∑thLossExp⁄ít
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3227 
pD©a
 += 2;

3228 
r•
.
un
.
devCfg
.
d©a
.
ˇlcPîiod
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3229 
pD©a
 += 2;

3230 
r•
.
un
.
devCfg
.
d©a
.
numMósuªmíts
 = *
pD©a
++;

3231 
r•
.
un
.
devCfg
.
d©a
.
ªp‹tPîiod
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

3233 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

3234 
r•
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

3237 
pCBs
->
	`p‚Loˇti⁄R•
–&
r•
 );

3242 
COMMAND_LOCATION_DATA_RSP
:

3243 
COMMAND_LOCATION_DATA_NOTIF
:

3244 
COMMAND_LOCATION_COMPACT_DATA_NOTIF
:

3245 
	`z˛GíîÆ_Pro˚ssInLoˇti⁄D©aR•
–
pInMsg
, 
pCBs
 );

3248 
COMMAND_LOCATION_RSSI_PING
:

3249 i‡–
pCBs
->
p‚Loˇti⁄R•
 )

3251 
r•
.
un
.
loˇti⁄Ty≥
 = *
pD©a
;

3253 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

3254 
r•
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

3257 
pCBs
->
	`p‚Loˇti⁄R•
–&
r•
 );

3262 
°©
 = 
ZFaûuª
;

3266  ( 
°©
 );

3267 
	}
}

3270 #ifde‡
ZCL_SCENES


3280 
uöt8
 
	$z˛GíîÆ_S˚√sInôNV
( )

3282 
uöt8
 
°©us
;

3283 
uöt16
 
size
;

3285 
size
 = (
uöt16
)(( ( 
nvGíS˚√sHdr_t
 ))

3286 + ( –
z˛GíS˚√NVIãm_t
 ) * 
ZCL_GEN_MAX_SCENES
 ));

3288 
°©us
 = 
	`oßl_nv_ôem_öô
–
ZCD_NV_SCENE_TABLE
, 
size
, 
NULL
 );

3290 i‡–
°©us
 !
ZSUCCESS
 )

3292 
	`z˛GíîÆ_S˚√sSëDeÁu…NV
();

3295  
°©us
;

3296 
	}
}

3307 
	$z˛GíîÆ_S˚√sSëDeÁu…NV
( )

3309 
nvGíS˚√sHdr_t
 
hdr
;

3312 
hdr
.
numRecs
 = 0;

3315 
	`oßl_nv_wrôe
–
ZCD_NV_SCENE_TABLE
, 0, –
nvGíS˚√sHdr_t
 ), &
hdr
 );

3316 
	}
}

3327 
	$z˛GíîÆ_S˚√sWrôeNV
( )

3329 
nvGíS˚√sHdr_t
 
hdr
;

3330 
z˛GíS˚√Iãm_t
 *
pLo›
;

3331 
z˛GíS˚√NVIãm_t
 
ôem
;

3333 
hdr
.
numRecs
 = 0;

3336 
pLo›
 = 
z˛GíS˚√TabÀ
;

3337  
pLo›
 )

3340 
ôem
.
ídpoöt
 = 
pLo›
->endpoint;

3341 
	`oßl_mem˝y
–&(
ôem
.
s˚√
), &(
pLo›
->s˚√),  ( 
z˛GíîÆ_S˚√_t
 ) );

3344 
	`oßl_nv_wrôe
–
ZCD_NV_SCENE_TABLE
,

3345 (
uöt16
)((–
nvGíS˚√sHdr_t
 )Ë+ (
hdr
.
numRecs
 *  ( 
z˛GíS˚√NVIãm_t
 ))),

3346  ( 
z˛GíS˚√NVIãm_t
 ), &
ôem
 );

3348 
hdr
.
numRecs
++;

3350 
pLo›
 =ÖLo›->
√xt
;

3354 
	`oßl_nv_wrôe
–
ZCD_NV_SCENE_TABLE
, 0, –
nvGíS˚√sHdr_t
 ), &
hdr
 );

3355 
	}
}

3366 
uöt16
 
	$z˛GíîÆ_S˚√sRe°‹eFromNV
( )

3368 
uöt16
 
x
;

3369 
nvGíS˚√sHdr_t
 
hdr
;

3371 
z˛GíS˚√NVIãm_t
 
ôem
;

3372 
uöt16
 
numAdded
 = 0;

3374 i‡–
	`oßl_nv_ªad
–
ZCD_NV_SCENE_TABLE
, 0, (
nvGíS˚√sHdr_t
), &
hdr
 ) =
ZSuc˚ss
 )

3377  
x
 = 0; x < 
hdr
.
numRecs
; x++ )

3379 i‡–
	`oßl_nv_ªad
–
ZCD_NV_SCENE_TABLE
,

3380 (
uöt16
)((
nvGíS˚√sHdr_t
Ë+ (
x
 *  ( 
z˛GíS˚√NVIãm_t
 ))),

3381  ( 
z˛GíS˚√NVIãm_t
 ), &
ôem
 ) =
ZSUCCESS
 )

3384 i‡–
	`z˛GíîÆ_AddS˚√
–
ôem
.
ídpoöt
, &(ôem.
s˚√
ËË=
ZSuc˚ss
 )

3386 
numAdded
++;

3392  ( 
numAdded
 );

3393 
	}
}

	@Components/stack/zcl/zcl_general.h

40 #i‚de‡
ZCL_GENERAL_H


41 
	#ZCL_GENERAL_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#ZCL_SCENE_NAME_LEN
 16

	)

62 
	#ATTRID_BASIC_ZCL_VERSION
 0x0000

	)

63 
	#ATTRID_BASIC_APPL_VERSION
 0x0001

	)

64 
	#ATTRID_BASIC_STACK_VERSION
 0x0002

	)

65 
	#ATTRID_BASIC_HW_VERSION
 0x0003

	)

66 
	#ATTRID_BASIC_MANUFACTURER_NAME
 0x0004

	)

67 
	#ATTRID_BASIC_MODEL_ID
 0x0005

	)

68 
	#ATTRID_BASIC_DATE_CODE
 0x0006

	)

69 
	#ATTRID_BASIC_POWER_SOURCE
 0x0007

	)

71 
	#ATTRID_BASIC_LOCATION_DESC
 0x0010

	)

72 
	#ATTRID_BASIC_PHYSICAL_ENV
 0x0011

	)

73 
	#ATTRID_BASIC_DEVICE_ENABLED
 0x0012

	)

74 
	#ATTRID_BASIC_ALARM_MASK
 0x0013

	)

78 
	#POWER_SOURCE_UNKNOWN
 0x00

	)

79 
	#POWER_SOURCE_MAINS_1_PHASE
 0x01

	)

80 
	#POWER_SOURCE_MAINS_3_PHASE
 0x02

	)

81 
	#POWER_SOURCE_BATTERY
 0x03

	)

82 
	#POWER_SOURCE_DC
 0x04

	)

83 
	#POWER_SOURCE_EMERG_MAINS_CONST_PWR
 0x05

	)

84 
	#POWER_SOURCE_EMERG_MAINS_XFER_SW
 0x06

	)

89 
	#POWER_SOURCE_PRIMARY
 0x7F

	)

90 
	#POWER_SOURCE_SECONDARY
 0x80

	)

93 
	#PHY_UNSPECIFIED_ENV
 0x00

	)

94 
	#PHY_MIRROR_CAPACITY_ENV
 0x01

	)

97 
	#PHY_UNKNOWN_ENV
 0xFF

	)

100 
	#DEVICE_DISABLED
 0x00

	)

101 
	#DEVICE_ENABLED
 0x01

	)

104 
	#ALARM_MASK_GEN_HW_FAULT
 0x01

	)

105 
	#ALARM_MASK_GEN_SW_FAULT
 0x02

	)

110 
	#COMMAND_BASIC_RESET_FACT_DEFAULT
 0x00

	)

116 
	#ATTRID_POWER_CFG_MAINS_VOLTAGE
 0x0000

	)

117 
	#ATTRID_POWER_CFG_MAINS_FREQUENCY
 0x0001

	)

119 
	#ATTRID_POWER_CFG_MAINS_ALARM_MASK
 0x0010

	)

120 
	#ATTRID_POWER_CFG_MAINS_VOLT_MIN_THRES
 0x0011

	)

121 
	#ATTRID_POWER_CFG_MAINS_VOLT_MAX_THRES
 0x0012

	)

122 
	#ATTRID_POWER_CFG_MAINS_DWELL_TRIP_POINT
 0x0013

	)

124 
	#ATTRID_POWER_CFG_BATTERY_VOLTAGE
 0x0020

	)

126 
	#ATTRID_POWER_CFG_BAT_MANU
 0x0030

	)

127 
	#ATTRID_POWER_CFG_BAT_SIZE
 0x0031

	)

128 
	#ATTRID_POWER_CFG_BAT_AHR_RATING
 0x0032

	)

129 
	#ATTRID_POWER_CFG_BAT_QUANTITY
 0x0033

	)

130 
	#ATTRID_POWER_CFG_BAT_RATED_VOLTAGE
 0x0034

	)

131 
	#ATTRID_POWER_CFG_BAT_ALARM_MASK
 0x0035

	)

132 
	#ATTRID_POWER_CFG_BAT_VOLT_MIN_THRES
 0x0036

	)

135 
	#MAINS_ALARM_MASK_VOLT_2_LOW
 0x01

	)

136 
	#MAINS_ALARM_MASK_VOLT_2_HI
 0x02

	)

139 
	#BAT_SIZE_NO_BATTERY
 0x00

	)

140 
	#BAT_SIZE_BUILT_IN
 0x01

	)

141 
	#BAT_SIZE_OTHER
 0x02

	)

142 
	#BAT_SIZE_AA
 0x03

	)

143 
	#BAT_SIZE_AAA
 0x04

	)

144 
	#BAT_SIZE_C
 0x05

	)

145 
	#BAT_SIZE_D
 0x06

	)

146 
	#BAT_SIZE_UNKNOWN
 0xFF

	)

149 
	#BAT_ALARM_MASK_VOLT_2_LOW
 0x01

	)

160 
	#ATTRID_DEV_TEMP_CURRENT
 0x0000

	)

161 
	#ATTRID_DEV_TEMP_MIN_EXPERIENCED
 0x0001

	)

162 
	#ATTRID_DEV_TEMP_MAX_EXPERIENCED
 0x0002

	)

163 
	#ATTRID_DEV_TEMP_OVER_TOTAL_DWELL
 0x0003

	)

165 
	#ATTRID_DEV_TEMP_ALARM_MASK
 0x0010

	)

166 
	#ATTRID_DEV_TEMP_LOW_THRES
 0x0011

	)

167 
	#ATTRID_DEV_TEMP_HI_THRES
 0x0012

	)

168 
	#ATTRID_DEV_TEMP_LOW_DWELL_TRIP_POINT
 0x0013

	)

169 
	#ATTRID_DEV_TEMP_HI_DWELL_TRIP_POINT
 0x0014

	)

172 
	#DEV_TEMP_ALARM_MASK_2_LOW
 0x01

	)

173 
	#DEV_TEMP_ALARM_MASK_2_HI
 0x02

	)

183 
	#ATTRID_IDENTIFY_TIME
 0x0000

	)

188 
	#COMMAND_IDENTIFY
 0x00

	)

189 
	#COMMAND_IDENTIFY_QUERY
 0x01

	)

191 
	#COMMAND_IDENTIFY_QUERY_RSP
 0x00

	)

196 
	#ATTRID_GROUP_NAME_SUPPORT
 0x0000

	)

201 
	#COMMAND_GROUP_ADD
 0x00

	)

202 
	#COMMAND_GROUP_VIEW
 0x01

	)

203 
	#COMMAND_GROUP_GET_MEMBERSHIP
 0x02

	)

204 
	#COMMAND_GROUP_REMOVE
 0x03

	)

205 
	#COMMAND_GROUP_REMOVE_ALL
 0x04

	)

206 
	#COMMAND_GROUP_ADD_IF_IDENTIFYING
 0x05

	)

208 
	#COMMAND_GROUP_ADD_RSP
 0x00

	)

209 
	#COMMAND_GROUP_VIEW_RSP
 0x01

	)

210 
	#COMMAND_GROUP_GET_MEMBERSHIP_RSP
 0x02

	)

211 
	#COMMAND_GROUP_REMOVE_RSP
 0x03

	)

217 
	#ATTRID_SCENES_COUNT
 0x0000

	)

218 
	#ATTRID_SCENES_CURRENT_SCENE
 0x0001

	)

219 
	#ATTRID_SCENES_CURRENT_GROUP
 0x0002

	)

220 
	#ATTRID_SCENES_SCENE_VALID
 0x0003

	)

221 
	#ATTRID_SCENES_NAME_SUPPORT
 0x0004

	)

222 
	#ATTRID_SCENES_LAST_CFG_BY
 0x0005

	)

227 
	#COMMAND_SCENE_ADD
 0x00

	)

228 
	#COMMAND_SCENE_VIEW
 0x01

	)

229 
	#COMMAND_SCENE_REMOVE
 0x02

	)

230 
	#COMMAND_SCENE_REMOVE_ALL
 0x03

	)

231 
	#COMMAND_SCENE_STORE
 0x04

	)

232 
	#COMMAND_SCENE_RECALL
 0x05

	)

233 
	#COMMAND_SCENE_GET_MEMBERSHIP
 0x06

	)

235 
	#COMMAND_SCENE_ADD_RSP
 0x00

	)

236 
	#COMMAND_SCENE_VIEW_RSP
 0x01

	)

237 
	#COMMAND_SCENE_REMOVE_RSP
 0x02

	)

238 
	#COMMAND_SCENE_REMOVE_ALL_RSP
 0x03

	)

239 
	#COMMAND_SCENE_STORE_RSP
 0x04

	)

240 
	#COMMAND_SCENE_GET_MEMBERSHIP_RSP
 0x06

	)

245 
	#ATTRID_ON_OFF
 0x0000

	)

250 
	#COMMAND_OFF
 0x00

	)

251 
	#COMMAND_ON
 0x01

	)

252 
	#COMMAND_TOGGLE
 0x02

	)

258 
	#ATTRID_ON_OFF_SWITCH_TYPE
 0x0000

	)

260 
	#ATTRID_ON_OFF_SWITCH_ACTIONS
 0x0010

	)

263 
	#ON_OFF_SWITCH_TYPE_TOGGLE
 0x00

	)

264 
	#ON_OFF_SWITCH_TYPE_MOMENTARY
 0x01

	)

267 
	#ON_OFF_SWITCH_ACTIONS_0
 0x00

	)

268 
	#ON_OFF_SWITCH_ACTIONS_1
 0x01

	)

269 
	#ON_OFF_SWITCH_ACTIONS_2
 0x02

	)

279 
	#ATTRID_LEVEL_CURRENT_LEVEL
 0x0000

	)

280 
	#ATTRID_LEVEL_REMAINING_TIME
 0x0001

	)

281 
	#ATTRID_LEVEL_ON_OFF_TRANSITION_TIME
 0x0010

	)

282 
	#ATTRID_LEVEL_ON_LEVEL
 0x0011

	)

287 
	#COMMAND_LEVEL_MOVE_TO_LEVEL
 0x00

	)

288 
	#COMMAND_LEVEL_MOVE
 0x01

	)

289 
	#COMMAND_LEVEL_STEP
 0x02

	)

290 
	#COMMAND_LEVEL_STOP
 0x03

	)

291 
	#COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
 0x04

	)

292 
	#COMMAND_LEVEL_MOVE_WITH_ON_OFF
 0x05

	)

293 
	#COMMAND_LEVEL_STEP_WITH_ON_OFF
 0x06

	)

294 
	#COMMAND_LEVEL_STOP_WITH_ON_OFF
 0x07

	)

297 
	#LEVEL_MOVE_UP
 0x00

	)

298 
	#LEVEL_MOVE_DOWN
 0x01

	)

301 
	#LEVEL_STEP_UP
 0x00

	)

302 
	#LEVEL_STEP_DOWN
 0x01

	)

308 
	#ATTRID_ALARM_COUNT
 0x0000

	)

313 
	#COMMAND_ALARMS_RESET
 0x00

	)

314 
	#COMMAND_ALARMS_RESET_ALL
 0x01

	)

315 
	#COMMAND_ALARMS_GET
 0x02

	)

316 
	#COMMAND_ALARMS_RESET_LOG
 0x03

	)

317 
	#COMMAND_ALARMS_PUBLISH_EVENT_LOG
 0x04

	)

319 
	#COMMAND_ALARMS_ALARM
 0x00

	)

320 
	#COMMAND_ALARMS_GET_RSP
 0x01

	)

321 
	#COMMAND_ALARMS_GET_EVENT_LOG
 0x02

	)

326 
	#ATTRID_TIME_TIME
 0x00

	)

327 
	#ATTRID_TIME_STATUS
 0x01

	)

328 
	#ATTRID_TIME_ZONE
 0x02

	)

329 
	#ATTRID_TIME_DST_START
 0x03

	)

330 
	#ATTRID_TIME_DST_END
 0x04

	)

331 
	#ATTRID_TIME_DST_SHIFT
 0x05

	)

332 
	#ATTRID_TIME_STANDARD_TIME
 0x06

	)

333 
	#ATTRID_TIME_LOCAL_TIME
 0x07

	)

334 
	#ATTRID_TIME_LAST_SET_TIME
 0x08

	)

335 
	#ATTRID_TIME_VALID_UNTIL_TIME
 0x09

	)

338 
	#TIME_STATUS_MASTER
 0x01

	)

339 
	#TIME_STATUS_SYNCH
 0x02

	)

340 
	#TIME_STATUS_MASTER_ZONE_DST
 0x04

	)

351 
	#ATTRID_LOCATION_TYPE
 0x0000

	)

352 
	#ATTRID_LOCATION_METHOD
 0x0001

	)

353 
	#ATTRID_LOCATION_AGE
 0x0002

	)

354 
	#ATTRID_LOCATION_QUALITY_MEASURE
 0x0003

	)

355 
	#ATTRID_LOCATION_NUM_DEVICES
 0x0004

	)

358 
	#ATTRID_LOCATION_COORDINATE1
 0x0010

	)

359 
	#ATTRID_LOCATION_COORDINATE2
 0x0011

	)

360 
	#ATTRID_LOCATION_COORDINATE3
 0x0012

	)

361 
	#ATTRID_LOCATION_POWER
 0x0013

	)

362 
	#ATTRID_LOCATION_PATH_LOSS_EXPONENT
 0x0014

	)

363 
	#ATTRID_LOCATION_REPORT_PERIOD
 0x0015

	)

364 
	#ATTRID_LOCATION_CALC_PERIOD
 0x0016

	)

365 
	#ATTRID_LOCATION_NUM_RSSI_MEASUREMENTS
 0x0017

	)

368 
	#LOCATION_TYPE_ABSOLUTE
 0x01

	)

369 
	#LOCATION_TYPE_2_D
 0x02

	)

370 
	#LOCATION_TYPE_COORDINATE_SYSTEM
 0x0C

	)

373 
	#LOCATION_METHOD_LATERATION
 0x00

	)

374 
	#LOCATION_METHOD_SIGNPOSTING
 0x01

	)

375 
	#LOCATION_METHOD_RF_FINGER_PRINT
 0x02

	)

376 
	#LOCATION_METHOD_OUT_OF_BAND
 0x03

	)

381 
	#COMMAND_LOCATION_SET_ABSOLUTE
 0x00

	)

382 
	#COMMAND_LOCATION_SET_DEV_CFG
 0x01

	)

383 
	#COMMAND_LOCATION_GET_DEV_CFG
 0x02

	)

384 
	#COMMAND_LOCATION_GET_DATA
 0x03

	)

386 
	#COMMAND_LOCATION_DEV_CFG_RSP
 0x00

	)

387 
	#COMMAND_LOCATION_DATA_RSP
 0x01

	)

388 
	#COMMAND_LOCATION_DATA_NOTIF
 0x02

	)

389 
	#COMMAND_LOCATION_COMPACT_DATA_NOTIF
 0x03

	)

390 
	#COMMAND_LOCATION_RSSI_PING
 0x04

	)

395 
	#ATTRID_IOV_BASIC_ACTIVE_TEXT
 0x0004

	)

396 
	#ATTRID_IOV_BASIC_STATE_TEXT
 0x000E

	)

397 
	#ATTRID_IOV_BASIC_DESCRIPTION
 0x001C

	)

398 
	#ATTRID_IOV_BASIC_INACTIVE_TEXT
 0x002E

	)

399 
	#ATTRID_IOV_BASIC_MAX_PRESENT_VALUE
 0x0041

	)

400 
	#ATTRID_IOV_BASIC_MIN_OFF_TIME
 0x0042

	)

401 
	#ATTRID_IOV_BASIC_MIM_ON_TIME
 0x0043

	)

402 
	#ATTRID_IOV_BASIC_MIN_PRESENT_VALUE
 0x0045

	)

403 
	#ATTRID_IOV_BASIC_NUM_OF_STATES
 0x004A

	)

404 
	#ATTRID_IOV_BASIC_OUT_OF_SERVICE
 0x0051

	)

405 
	#ATTRID_IOV_BASIC_POLARITY
 0x0054

	)

406 
	#ATTRID_IOV_BASIC_PRESENT_VALUE
 0x0055

	)

407 
	#ATTRID_IOV_BASIC_PRIORITY_ARRAY
 0x0057

	)

408 
	#ATTRID_IOV_BASIC_RELIABILITY
 0x0067

	)

409 
	#ATTRID_IOV_BASIC_RELINQUISH_DEFAULT
 0x0068

	)

410 
	#ATTRID_IOV_BASIC_RESOLUTION
 0x006A

	)

411 
	#ATTRID_IOV_BASIC_STATUS_FLAG
 0x006F

	)

412 
	#ATTRID_IOV_BASIC_ENGINEERING_UNITS
 0x0075

	)

413 
	#ATTRID_IOV_BASIC_APP_TYPE
 0x0100

	)

416 
	#STATUS_FLAGS_IN_ALARM
 0x01

	)

417 
	#STATUS_FLAGS_FAULT
 0x02

	)

418 
	#STATUS_FLAGS_OVERRIDDEN
 0x04

	)

419 
	#STATUS_FLAGS_OUT_OF_SERVICE
 0x08

	)

422 
	#RELIABILITY_NO_FAULT_DETECTED
 0x00

	)

423 
	#RELIABILITY_NO_SENSOR
 0x01

	)

424 
	#RELIABILITY_OVER_RANGE
 0x02

	)

425 
	#RELIABILITY_UNDER_RANGE
 0x03

	)

426 
	#RELIABILITY_OPEN_LOOP
 0x04

	)

427 
	#RELIABILITY_SHORTED_LOOP
 0x05

	)

428 
	#RELIABILITY_NO_OUTPUT
 0x06

	)

429 
	#RELIABILITY_UNRELIABLE_OTHER
 0x07

	)

430 
	#RELIABILITY_PROCESS_ERROR
 0x08

	)

431 
	#RELIABILITY_MULTI_STATE_FAULT
 0x09

	)

432 
	#RELIABILITY_CONFIG_ERROR
 0x0A

	)

438 
	#ENGINEERING_UNITS_OTHER
 0x00FF

	)

443 
	#POLARITY_NORMAL
 0x00

	)

444 
	#POLARITY_REVERSE
 0x01

	)

451 
	#APP_GROUP
 0xFF000000

	)

456 
	#APP_TYPE
 0x00FF0000

	)

460 
	#APP_INDEX
 0x0000FFFF

	)

463 
	#APP_GROUP_AI
 0x00

464 
	#APP_GROUP_AO
 0x01

465 
	#APP_GROUP_AV
 0x02

466 
	#APP_GROUP_BI
 0x03

467 
	#APP_GROUP_BO
 0x04

468 
	#APP_GROUP_BV
 0x05

469 
	#APP_GROUP_MI
 0x0D

470 
	#APP_GROUP_MO
 0x0E

471 
	#APP_GROUP_MV
 0x13

472 

	)

479 
	#APP_TYPE_AI_TEMP_C
 0x00

480 
	#APP_TYPE_AI_HUMIDITY_PERCENT
 0x01

481 
	#APP_TYPE_AI_PRESSURE_PASCAL
 0x02

482 
	#APP_TYPE_AI_FLOW_LIT_SEC
 0x03

483 
	#APP_TYPE_AI_PERCENT
 0x04

484 
	#APP_TYPE_AI_PARTS_PER_MIL
 0x05

485 
	#APP_TYPE_AI_ROTATION_SPEED
 0x06

486 
	#APP_TYPE_AI_CURRENT_AMPS
 0x07

487 
	#APP_TYPE_AI_FREQUENCY_HZ
 0x08

488 
	#APP_TYPE_AI_PWR_WATTS
 0x09

489 
	#APP_TYPE_AI_PWR_KW
 0x0A

490 
	#APP_TYPE_AI_ENERGY_KWH
 0x0B

491 
	#APP_TYPE_AI_COUNT
 0x0C

492 
	#APP_TYPE_AI_ENTHALPY_KJ_KG
 0x0D

493 
	#APP_TYPE_AI_TIME_SEC
 0x0E

494 

	)

499 
	#APP_TYPE_AO_TEMP_C
 0x00

500 
	#APP_TYPE_AO_HUMIDITY_PERCENT
 0x01

501 
	#APP_TYPE_AO_PRESSURE_PASCAL
 0x02

502 
	#APP_TYPE_AO_FLOW_LIT_SEC
 0x03

503 
	#APP_TYPE_AO_PERCENT
 0x04

504 
	#APP_TYPE_AO_PARTS_PER_MIL
 0x05

505 
	#APP_TYPE_AO_ROTATION_SPEED
 0x06

506 
	#APP_TYPE_AO_CURRENT_AMPS
 0x07

507 
	#APP_TYPE_AO_FREQUENCY_HZ
 0x08

508 
	#APP_TYPE_AO_PWR_WATTS
 0x09

509 
	#APP_TYPE_AO_PWR_KW
 0x0A

510 
	#APP_TYPE_AO_ENERGY_KWH
 0x0B

511 
	#APP_TYPE_AO_COUNT
 0x0C

512 
	#APP_TYPE_AO_ENTHALPY_KJ_KG
 0x0D

513 
	#APP_TYPE_AO_TIME_SEC
 0x0E

514 

	)

519 
	#APP_TYPE_AV_TEMP_C
 0x00

520 
	#APP_TYPE_AV_AREA_SQ_METER
 0x01

521 
	#APP_TYPE_AV_MULTIPLIER_NUM
 0x02

522 
	#APP_TYPE_AV_FLOW_LIT_SEC
 0x03

523 

	)

530 
	#APP_TYPE_BI_DOMAIN_HVAC
 0x00

531 
	#APP_TYPE_BI_DOMAIN_SEC
 0x01

532 

	)

539 
	#APP_TYPE_BO_DOMAIN_HVAC
 0x00

540 
	#APP_TYPE_BO_DOMAIN_SEC
 0x02

541 

	)

548 
	#APP_TYPE_BV
 0x00

549 

	)

554 
	#APP_TYPE_MI_DOMAIN_HVAC
 0x00

555 

	)

560 
	#APP_TYPE_MO_DOMAIN_HVAC
 0x00

561 

	)

566 
	#APP_TYPE_MV_DOMAIN_HVAC
 0x00

567 

	)

578 
	#APP_INDEX_AI_TEMP_2_PIPE_ENTER_WATER
 0x00

579 

	)

585 
	#APP_INDEX_AI_HUMIDITY_DISCHARGE
 0x00

586 

	)

592 
	#APP_INDEX_AI_PRESSURE_BOIL_PUMP_DIFF
 0x00

593 

	)

599 
	#APP_INDEX_AI_FLOW_CHILLED_WATER
 0x00

600 

	)

606 
	#APP_INDEX_AI_PERCENT_CHILLER_FULL_LOAD_AMP
 0x00

607 

	)

613 
	#APP_INDEX_AI_PARTS_RETURN_CO2
 0x00

614 

	)

620 
	#APP_INDEX_AI_ROTATION_EXHAUST_FAN_REMOTE
 0x00

621 

	)

627 
	#APP_INDEX_AI_CURRENT_AMPS_CHILLER
 0x00

628 

	)

634 
	#APP_INDEX_AI_FREQUENCY_SPEED_DRIVE_OUTPUT
 0x00

635 

	)

641 
	#APP_INDEX_AI_PWR_WATTS_CONSUMPTION
 0x00

642 

	)

648 
	#APP_INDEX_AI_PWR_KW_ABSOLUTE
 0x00

649 

	)

655 
	#APP_INDEX_AI_ENERGY_KWH_SPEED_DRIVE
 0x00

656 

	)

662 
	#APP_INDEX_AI_COUNT
 0x00

663 

	)

669 
	#APP_INDEX_AI_ENTHALPY_OUTDOOR_AIR
 0x00

670 

	)

676 
	#APP_INDEX_AI_TIME_RELATIVE
 0x00

677 

	)

687 
	#APP_INDEX_AO_TEMP_BOILER
 0x00

688 

	)

694 
	#APP_INDEX_AO_HUMIDITY_HUMIDIFICATION
 0x00

695 

	)

711 
	#APP_INDEX_AO_PERCENT_FACE_BYPASS_DAMPER
 0x00

712 

	)

718 
	#APP_INDEX_AO_PARTS_SPACE_CO2_LIMIT
 0x00

719 

	)

725 
	#APP_INDEX_AO_ROTATION_EXHAUST_FAN_SPEED
 0x00

726 

	)

767 
	#APP_INDEX_AO_TIME_RELATIVE
 0x00

768 

	)

778 
	#APP_INDEX_AV_TEMP_SETPOINT_OFFSET
 0x00

779 

	)

785 
	#APP_INDEX_AV_AREA_DUCT
 0x00

786 

	)

792 
	#APP_INDEX_AV_MULTIPLIER_GAIN
 0x00

793 

	)

799 
	#APP_INDEX_AV_FLOW_MIN_AIR
 0x00

800 

	)

810 
	#APP_INDEX_BI_DOMAIN_HVAC_2_PIPE_PUMP_STAT
 0x00

811 

	)

817 
	#APP_INDEX_BI_DOMAIN_SEC_GLASS_BREAK_DETECT
 0x00

818 

	)

828 
	#APP_INDEX_BO_DOMAIN_HVAC_2_PIPE_CIR_PUMP
 0x00

829 

	)

835 
	#APP_INDEX_BO_DOMAIN_SEC_ARM_DISARM_CMD
 0x00

836 

	)

854 
	#APP_INDEX_MI_DOMAIN_HVAC_OFF_ON_AUTO
 0x00

855 

	)

865 
	#APP_INDEX_MO_DOMAIN_HVAC_OFF_ON_AUTO
 0x00

866 

	)

876 
	#APP_INDEX_MV_DOMAIN_HVAC_OFF_ON_AUTO
 0x00

877 

	)

881 
	#ZCL_GEN_SCENE_NAME_LEN
 16

	)

889 
	#ZCL_GEN_SCENE_EXT_LEN
 24

	)

892 
	#ZCL_GEN_MAX_SCENES
 16

	)

901 
uöt16
 
groupID
;

902 
uöt8
 
ID
;

903 
uöt16
 
å™sTime
;

904 
uöt8
 
«me
[
ZCL_GEN_SCENE_NAME_LEN
];

905 
uöt8
 
extLí
;

906 
uöt8
 
extFõld
[
ZCL_GEN_SCENE_EXT_LEN
];

907 } 
	tz˛GíîÆ_S˚√_t
;

912 
uöt8
 
code
;

913 
uöt16
 
˛u°îID
;

914 
uöt32
 
timeSèmp
;

915 } 
	tz˛GíîÆ_Aœrm_t
;

920 
uöt8
 
logID
;

921 
uöt32
 
°¨tTime
;

922 
uöt32
 
ídTime
;

923 
uöt8
 
numEvíts
;

924 } 
	tz˛GëEvítLog_t
;

929 
uöt8
 
evítId
;

930 
uöt32
 
evítTime
;

931 } 
	tz˛EvítLogPaylﬂd_t
;

936 
uöt8
 
logID
;

937 
uöt8
 
cmdIndex
;

938 
uöt8
 
tŸÆCmds
;

939 
uöt8
 
numSubLogs
;

940 
z˛EvítLogPaylﬂd_t
 *
pLogs
;

941 } 
	tz˛PublishEvítLog_t
;

947 
öt16
 
co‹dö©e1
;

948 
öt16
 
co‹dö©e2
;

949 
öt16
 
co‹dö©e3
;

950 
öt16
 
powî
;

951 
uöt16
 
∑thLossExp⁄ít
;

952 } 
	tz˛Loˇti⁄Absﬁuã_t
;

957 
öt16
 
powî
;

958 
uöt16
 
∑thLossExp⁄ít
;

959 
uöt16
 
ˇlcPîiod
;

960 
uöt8
 
numMósuªmíts
;

961 
uöt16
 
ªp‹tPîiod
;

962 } 
	tz˛Loˇti⁄DevCfg_t
;

967 
absO∆y
:1;

968 
ªˇlc
:1;

969 
brdˇ°Indic
:1;

970 
brdˇ°R•
:1;

971 
com∑˘R•
:1;

972 
ª£rved
:3;

973 } 
	tloˇti⁄bôs_t
;

977 
loˇti⁄bôs_t
 
locBôs
;

978 
uöt8
 
locByã
;

979 } 
	tloˇti⁄_t
;

983 
loˇti⁄_t
 
bôm≠
;

984 
uöt8
 
numRe•⁄£s
;

985 
uöt8
 
èrgëAddr
[8];

987 
	#absﬁuãO∆y
 
bôm≠
.
locBôs
.
absO∆y


	)

988 
	#ªˇlcuœã
 
bôm≠
.
locBôs
.
ªˇlc


	)

989 
	#brdˇ°Indiˇt‹
 
bôm≠
.
locBôs
.
brdˇ°Indic


	)

990 
	#brdˇ°Re•⁄£
 
bôm≠
.
locBôs
.
brdˇ°R•


	)

991 
	#com∑˘Re•⁄£
 
bôm≠
.
locBôs
.
com∑˘R•


	)

992 } 
	tz˛Loˇti⁄GëD©a_t
;

997 
uöt8
 
°©us
;

998 
z˛Loˇti⁄DevCfg_t
 
d©a
;

999 } 
	tz˛Loˇti⁄DevCfgR•_t
;

1004 
uöt8
 
loˇti⁄Mëhod
;

1005 
uöt8
 
quÆôyMósuª
;

1006 
uöt16
 
loˇti⁄Age
;

1007 } 
	tz˛Loˇti⁄CÆcuœãd_t
;

1012 
uöt8
 
ty≥
;

1013 
z˛Loˇti⁄Absﬁuã_t
 
absLoc
;

1014 
z˛Loˇti⁄CÆcuœãd_t
 
ˇlcLoc
;

1015 } 
	tz˛Loˇti⁄D©a_t
;

1020 
uöt8
 
°©us
;

1021 
z˛Loˇti⁄D©a_t
 
d©a
;

1022 } 
	tz˛Loˇti⁄D©aR•_t
;

1027 
afAddrTy≥_t
 *
§cAddr
;

1028 
uöt16
 
idítifyTime
;

1029 } 
	tz˛Idítify_t
;

1033 
afAddrTy≥_t
 *
§cAddr
;

1034 
uöt16
 
timeout
;

1035 } 
	tz˛IdítifyQuîyR•_t
;

1039 
uöt8
 
Àvñ
;

1040 
uöt16
 
å™sôi⁄Time
;

1041 
uöt8
 
wôhOnOff
;

1042 } 
	tz˛LCMoveToLevñ_t
;

1046 
uöt8
 
moveMode
;

1048 
uöt8
 
øã
;

1049 
uöt8
 
wôhOnOff
;

1050 } 
	tz˛LCMove_t
;

1054 
uöt8
 
°ïMode
;

1056 
uöt8
 
amou¡
;

1057 
uöt16
 
å™sôi⁄Time
;

1058 
uöt8
 
wôhOnOff
;

1059 } 
	tz˛LCSãp_t
;

1063 
afAddrTy≥_t
 *
§cAddr
;

1064 
uöt8
 
cmdID
;

1066 
uöt8
 
°©us
;

1069 
uöt8
 
gΩC¡
;

1070 
uöt16
 *
gΩLi°
;

1071 
uöt8
 
ˇ∑côy
;

1072 
uöt8
 *
gΩName
;

1073 } 
	tz˛GroupR•_t
;

1077 
afAddrTy≥_t
 *
§cAddr
;

1078 
z˛GíîÆ_S˚√_t
 *
s˚√
;

1079 } 
	tz˛S˚√Req_t
;

1083 
afAddrTy≥_t
 *
§cAddr
;

1084 
uöt8
 
cmdID
;

1087 
uöt8
 
°©us
;

1088 
uöt8
 
s˚√C¡
;

1090 
uöt8
 *
s˚√Li°
;

1091 
uöt8
 
ˇ∑côy
;

1093 
z˛GíîÆ_S˚√_t
 *
s˚√
;

1094 } 
	tz˛S˚√R•_t
;

1098 
afAddrTy≥_t
 *
§cAddr
;

1099 
uöt8
 
cmdID
;

1100 
uöt8
 
°©us
;

1101 
uöt8
 
Æ¨mCode
;

1102 
uöt16
 
˛u°îID
;

1103 
uöt32
 
timeSèmp
;

1105 } 
	tz˛Aœrm_t
;

1109 
afAddrTy≥_t
 *
§cAddr
;

1110 
uöt8
 
cmdID
;

1114 
z˛Loˇti⁄Absﬁuã_t
 
absLoc
;

1115 
z˛Loˇti⁄GëD©a_t
 
loc
;

1116 
z˛Loˇti⁄DevCfg_t
 
devCfg
;

1117 
uöt8
 *
õìAddr
;

1118 } 
un
;

1119 
uöt8
 
£qNum
;

1120 } 
	tz˛Loˇti⁄_t
;

1124 
afAddrTy≥_t
 *
§cAddr
;

1125 
uöt8
 
cmdID
;

1130 
z˛Loˇti⁄D©aR•_t
 
loc
;

1131 
z˛Loˇti⁄DevCfgR•_t
 
devCfg
;

1133 
uöt8
 
loˇti⁄Ty≥
;

1134 } 
un
;

1135 } 
	tz˛Loˇti⁄R•_t
;

1140 (*
z˛GCB_BasicRe£t_t
)( );

1145 (*
z˛GCB_Idítify_t
)–
	tz˛Idítify_t
 *
	tpCmd
 );

1150 (*
z˛GCB_IdítifyQuîyR•_t
)–
	tz˛IdítifyQuîyR•_t
 *
	tpR•
 );

1155 (*
z˛GCB_OnOff_t
)–
	tuöt8
 
	tcmd
 );

1161 (*
z˛GCB_LevñC⁄åﬁMoveToLevñ_t
)–
	tz˛LCMoveToLevñ_t
 *
	tpCmd
 );

1168 (*
z˛GCB_LevñC⁄åﬁMove_t
)–
	tz˛LCMove_t
 *
	tpCmd
 );

1176 (*
z˛GCB_LevñC⁄åﬁSãp_t
)–
	tz˛LCSãp_t
 *
	tpCmd
 );

1179 (*
z˛GCB_LevñC⁄åﬁSt›_t
)( );

1193 (*
z˛GCB_GroupR•_t
)–
	tz˛GroupR•_t
 *
	tpR•
 );

1201 
uöt8
 (*
	tz˛GCB_S˚√St‹eReq_t
)–
	tz˛S˚√Req_t
 *
	tpReq
 );

1207 (*
z˛GCB_S˚√ReˇŒReq_t
)–
	tz˛S˚√Req_t
 *
	tpReq
 );

1223 (*
z˛GCB_S˚√R•_t
)–
	tz˛S˚√R•_t
 *
	tpR•
 );

1233 (*
z˛GCB_Aœrm_t
)–
	tz˛Aœrm_t
 *
	tpAœrm
 );

1238 (*
z˛GCB_GëEvítLog_t
)–
	tuöt8
 
	t§cEP
, 
	tafAddrTy≥_t
 *
	t§cAddr
,

1239 
	tz˛GëEvítLog_t
 *
	tpEvítLog
, 
	tuöt8
 
	t£qNum
 );

1244 (*
z˛GCB_PublishEvítLog_t
)–
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tz˛PublishEvítLog_t
 *
	tpEvítLog
 );

1255 (*
z˛GCB_Loˇti⁄_t
)–
	tz˛Loˇti⁄_t
 *
	tpCmd
 );

1267 (*
z˛GCB_Loˇti⁄R•_t
)–
	tz˛Loˇti⁄R•_t
 *
	tpR•
 );

1273 
z˛GCB_BasicRe£t_t
 
p‚BasicRe£t
;

1274 
z˛GCB_Idítify_t
 
p‚Idítify
;

1275 
z˛GCB_IdítifyQuîyR•_t
 
p‚IdítifyQuîyR•
;

1276 
z˛GCB_OnOff_t
 
p‚OnOff
;

1277 
z˛GCB_LevñC⁄åﬁMoveToLevñ_t
 
p‚LevñC⁄åﬁMoveToLevñ
;

1278 
z˛GCB_LevñC⁄åﬁMove_t
 
p‚LevñC⁄åﬁMove
;

1279 
z˛GCB_LevñC⁄åﬁSãp_t
 
p‚LevñC⁄åﬁSãp
;

1280 
z˛GCB_LevñC⁄åﬁSt›_t
 
p‚LevñC⁄åﬁSt›
;

1281 
z˛GCB_GroupR•_t
 
p‚GroupR•
;

1282 
z˛GCB_S˚√St‹eReq_t
 
p‚S˚√St‹eReq
;

1283 
z˛GCB_S˚√ReˇŒReq_t
 
p‚S˚√ReˇŒReq
;

1284 
z˛GCB_S˚√R•_t
 
p‚S˚√R•
;

1285 
z˛GCB_Aœrm_t
 
p‚Aœrm
;

1286 #ifde‡
SE_UK_EXT


1287 
z˛GCB_GëEvítLog_t
 
p‚GëEvítLog
;

1288 
z˛GCB_PublishEvítLog_t
 
p‚PublishEvítLog
;

1290 
z˛GCB_Loˇti⁄_t
 
p‚Loˇti⁄
;

1291 
z˛GCB_Loˇti⁄R•_t
 
p‚Loˇti⁄R•
;

1292 } 
	tz˛GíîÆ_AµCÆlbacks_t
;

1297 #ifde‡
ZCL_BASIC


1303 
	#z˛GíîÆ_SídBasicRe£tFa˘‹yDeÁu…s
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_BASIC
, 
COMMAND_BASIC_RESET_FACT_DEFAULT
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

1306 #ifde‡
ZCL_IDENTIFY


1312 
	#z˛GíîÆ_SídIdítifyQuîy
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_IDENTIFY
, 
COMMAND_IDENTIFY_QUERY
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

1315 #ifde‡
ZCL_GROUPS


1321 
	#z˛GíîÆ_SídGroupAdd
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídAddGroupReque°
–◊), (b), 
COMMAND_GROUP_ADD
, (c), (d), (e), (fË)

	)

1328 
	#z˛GíîÆ_SídGroupVõw
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛GíîÆ_SídGroupReque°
–◊), (b), 
COMMAND_GROUP_VIEW
, (c), (d), (eË)

	)

1335 
	#z˛GíîÆ_SídGroupGëMembîshù
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídGroupGëMembîshùReque°
–◊), (b), 
COMMAND_GROUP_GET_MEMBERSHIP
, 
FALSE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, 0, (c), (d), (e), (fË)

	)

1342 
	#z˛GíîÆ_SídGroupRemove
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛GíîÆ_SídGroupReque°
–◊), (b), 
COMMAND_GROUP_REMOVE
, (c), (d), (eË)

	)

1349 
	#z˛GíîÆ_SídGroupRemoveAŒ
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_GROUPS
, 
COMMAND_GROUP_REMOVE_ALL
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

1356 
	#z˛GíîÆ_SídGroupAddIfIdítifyög
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídAddGroupReque°
–◊), (b), 
COMMAND_GROUP_ADD_IF_IDENTIFYING
, (c), (d), (e), (fË)

	)

1363 
	#z˛GíîÆ_SídGroupAddRe•⁄£
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídGroupRe•⁄£
–◊), (b), 
COMMAND_GROUP_ADD_RSP
, (c), (d), (e), (fË)

	)

1370 
	#z˛GíîÆ_SídGroupGëMembîshùRe•⁄£
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`z˛GíîÆ_SídGroupGëMembîshùReque°
–◊), (b), 
COMMAND_GROUP_GET_MEMBERSHIP_RSP
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
, (c), (d), (e), (f), (gË)

	)

1377 
	#z˛GíîÆ_SídGroupRemoveRe•⁄£
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídGroupRe•⁄£
–◊), (b), 
COMMAND_GROUP_REMOVE_RSP
, (c), (d), (e), (fË)

	)

1380 #ifde‡
ZCL_SCENES


1386 
	#z˛GíîÆ_SídS˚√Võw
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídS˚√Reque°
–◊), (b), 
COMMAND_SCENE_VIEW
, (c), (d), (e), (fË)

	)

1393 
	#z˛GíîÆ_SídS˚√Remove
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídS˚√Reque°
–◊), (b), 
COMMAND_SCENE_REMOVE
, (c), (d), (e), (fË)

	)

1400 
	#z˛GíîÆ_SídS˚√St‹e
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídS˚√Reque°
–◊), (b), 
COMMAND_SCENE_STORE
, (c), (d), (e), (fË)

	)

1407 
	#z˛GíîÆ_SídS˚√ReˇŒ
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídS˚√Reque°
–◊), (b), 
COMMAND_SCENE_RECALL
, (c), (d), (e), (fË)

	)

1414 
	#z˛GíîÆ_SídS˚√RemoveAŒ
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛GíîÆ_SídS˚√Reque°
–◊), (b), 
COMMAND_SCENE_REMOVE_ALL
, (c), 0, (d), (eË)

	)

1421 
	#z˛GíîÆ_SídS˚√GëMembîshù
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛GíîÆ_SídS˚√Reque°
–◊), (b), 
COMMAND_SCENE_GET_MEMBERSHIP
, (c), 0, (d), (eË)

	)

1428 
	#z˛GíîÆ_SídS˚√AddRe•⁄£
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`z˛GíîÆ_SídS˚√Re•⁄£
–◊), (b), 
COMMAND_SCENE_ADD_RSP
, (c), (d), (e), (f), (gË)

	)

1435 
	#z˛GíîÆ_SídS˚√RemoveRe•⁄£
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`z˛GíîÆ_SídS˚√Re•⁄£
–◊), (b), 
COMMAND_SCENE_REMOVE_RSP
, (c), (d), (e), (f), (gË)

	)

1442 
	#z˛GíîÆ_SídS˚√RemoveAŒRe•⁄£
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídS˚√Re•⁄£
–◊), (b), 
COMMAND_SCENE_REMOVE_ALL_RSP
, (c), (d), 0, (e), (fË)

	)

1449 
	#z˛GíîÆ_SídS˚√St‹eRe•⁄£
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`z˛GíîÆ_SídS˚√Re•⁄£
–◊), (b), 
COMMAND_SCENE_STORE_RSP
, (c), (d), (e), (f), (gË)

	)

1452 #ifde‡
ZCL_ON_OFF


1458 
	#z˛GíîÆ_SídOnOff_CmdOff
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_ON_OFF
, 
COMMAND_OFF
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

1465 
	#z˛GíîÆ_SídOnOff_CmdOn
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_ON_OFF
, 
COMMAND_ON
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

1472 
	#z˛GíîÆ_SídOnOff_CmdToggÀ
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_ON_OFF
, 
COMMAND_TOGGLE
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

1475 #ifde‡
ZCL_LEVEL_CTRL


1481 
	#z˛GíîÆ_SídLevñC⁄åﬁMoveToLevñ
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídLevñC⁄åﬁMoveToLevñReque°
–◊), (b), 
COMMAND_LEVEL_MOVE_TO_LEVEL
, (c), (d), (eË,(fË)

	)

1488 
	#z˛GíîÆ_SídLevñC⁄åﬁMove
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídLevñC⁄åﬁMoveReque°
–◊), (b), 
COMMAND_LEVEL_MOVE
, (c), (d), (e), (fË)

	)

1496 
	#z˛GíîÆ_SídLevñC⁄åﬁSãp
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`z˛GíîÆ_SídLevñC⁄åﬁSãpReque°
–◊), (b), 
COMMAND_LEVEL_STEP
, (c), (d), (e), (f), (gË)

	)

1503 
	#z˛GíîÆ_SídLevñC⁄åﬁSt›
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
, 
COMMAND_LEVEL_STOP
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

1510 
	#z˛GíîÆ_SídLevñC⁄åﬁMoveToLevñWôhOnOff
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídLevñC⁄åﬁMoveToLevñReque°
–◊), (b), 
COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
, (c), (d), (eË,(fË)

	)

1517 
	#z˛GíîÆ_SídLevñC⁄åﬁMoveWôhOnOff
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídLevñC⁄åﬁMoveReque°
–◊), (b), 
COMMAND_LEVEL_MOVE_WITH_ON_OFF
, (c), (d), (e), (fË)

	)

1525 
	#z˛GíîÆ_SídLevñC⁄åﬁSãpWôhOnOff
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`z˛GíîÆ_SídLevñC⁄åﬁSãpReque°
–◊), (b), 
COMMAND_LEVEL_STEP_WITH_ON_OFF
, (c), (d), (e), (f), (gË)

	)

1532 
	#z˛GíîÆ_SídLevñC⁄åﬁSt›WôhOnOff
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
, 
COMMAND_LEVEL_STOP_WITH_ON_OFF
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

1535 #ifde‡
ZCL_ALARMS


1541 
	#z˛GíîÆ_SídAœrmRe£t
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídAœrmReque°
–◊), (b), 
COMMAND_ALARMS_RESET
, (c), (d), (e), (fË)

	)

1548 
	#z˛GíîÆ_SídAœrmRe£tAŒ
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_ALARMS
, 
COMMAND_ALARMS_RESET_ALL
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

1556 
	#z˛GíîÆ_SídAœrmGë
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_ALARMS
, 
COMMAND_ALARMS_GET
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

1563 
	#z˛GíîÆ_SídAœrmRe£tLog
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_ALARMS
, 
COMMAND_ALARMS_RESET_LOG
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

1570 
	#z˛GíîÆ_SídAœrm
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídAœrmReque°
–◊), (b), 
COMMAND_ALARMS_ALARM
, (c), (d), (e), (fË)

	)

1573 #ifde‡
ZCL_LOCATION


1579 
	#z˛GíîÆ_SídLoˇti⁄D©aRe•⁄£
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛GíîÆ_SídLoˇti⁄D©a
–◊), (b), 
COMMAND_LOCATION_DATA_RSP
, ((c)->
°©us
), (&((c)->
d©a
)), (d), (eË)

	)

1586 
	#z˛GíîÆ_SídLoˇti⁄D©aNŸif
(
a
,
b
,
c
,
d
Ë
	`z˛GíîÆ_SídLoˇti⁄D©a
–◊), (b), 
COMMAND_LOCATION_DATA_NOTIF
, 0, (c), (dË)

	)

1593 
	#z˛GíîÆ_SídLoˇti⁄D©aCom∑˘NŸif
(
a
,
b
,
c
,
d
Ë
	`z˛GíîÆ_SídLoˇti⁄D©a
–◊), (b), 
COMMAND_LOCATION_DATA_COMPACT_NOTIF
, 0, (c), (dË)

	)

1600 
	#z˛GíîÆ_SídRSSIPög
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_LOCATION
, 
COMMAND_LOCATION_RSSI_PING
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
, (d), 0, (e), 1, (cË)

	)

1610 
ZSètus_t
 
z˛GíîÆ_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛GíîÆ_AµCÆlbacks_t
 *
ˇŒbacks
 );

1612 #ifde‡
ZCL_LEVEL_CTRL


1619 
ZSètus_t
 
z˛GíîÆ_SídLevñC⁄åﬁMoveToLevñReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1620 
uöt8
 
cmd
, uöt8 
Àvñ
, 
uöt16
 
å™sTime
,

1621 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1630 
ZSètus_t
 
z˛GíîÆ_SídLevñC⁄åﬁMoveReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1631 
uöt8
 
cmd
, uöt8 
moveMode
, uöt8 
øã
,

1632 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1642 
ZSètus_t
 
z˛GíîÆ_SídLevñC⁄åﬁSãpReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1643 
uöt8
 
cmd
, uöt8 
°ïMode
, uöt8 
°ïSize
, 
uöt16
 
å™sTime
,

1644 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1647 #ifde‡
ZCL_GROUPS


1653 
ZSètus_t
 
z˛GíîÆ_SídGroupRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1654 
uöt8
 
cmd
, uöt8 
°©us
, 
uöt16
 
groupID
,

1655 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1660 
ZSètus_t
 
z˛GíîÆ_SídGroupVõwRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1661 
uöt8
 
°©us
, 
≠s_Group_t
 *
gΩ
,

1662 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1667 
ZSètus_t
 
z˛GíîÆ_SídGroupGëMembîshùReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1668 
uöt8
 
cmd
, uöt8 
r•Cmd
, uöt8 
dúe˘i⁄
, uöt8 
ˇ∑côy
,

1669 
uöt8
 
gΩC¡
, 
uöt16
 *
gΩLi°
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1672 #ifde‡
ZCL_SCENES


1676 
ZSètus_t
 
z˛GíîÆ_AddS˚√
–
uöt8
 
ídpoöt
, 
z˛GíîÆ_S˚√_t
 *
s˚√
 );

1681 
z˛GíîÆ_S˚√_t
 *
z˛GíîÆ_FödS˚√
–
uöt8
 
ídpoöt
, 
uöt16
 
groupID
, uöt8 
s˚√ID
 );

1686 
uöt8
 
z˛GíîÆ_FödAŒS˚√sF‹Group
–uöt8 
ídpoöt
, 
uöt16
 
groupID
, uöt8 *
s˚√Li°
 );

1691 
uöt8
 
z˛GíîÆ_RemoveS˚√
–uöt8 
ídpoöt
, 
uöt16
 
groupID
, uöt8 
s˚√ID
 );

1696 
z˛GíîÆ_RemoveAŒS˚√s
–
uöt8
 
ídpoöt
, 
uöt16
 
groupID
 );

1701 
uöt8
 
z˛GíîÆ_Cou¡S˚√s
–uöt8 
ídpoöt
 );

1706 
uöt8
 
z˛GíîÆ_Cou¡AŒS˚√s
( );

1711 
ZSètus_t
 
z˛GíîÆ_RódS˚√Cou¡CB
–
uöt16
 
˛u°îId
, uöt16 
©åId
,

1712 
uöt8
 
›î
, uöt8 *
pVÆue
, 
uöt16
 *
pLí
 );

1716 
ZSètus_t
 
z˛GíîÆ_SídAddS˚√
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1717 
z˛GíîÆ_S˚√_t
 *
s˚√
,

1718 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1722 
ZSètus_t
 
z˛GíîÆ_SídS˚√Reque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1723 
uöt8
 
cmd
, 
uöt16
 
groupID
, uöt8 
s˚√ID
,

1724 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1730 
ZSètus_t
 
z˛GíîÆ_SídS˚√Re•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1731 
uöt8
 
cmd
, uöt8 
°©us
, 
uöt16
 
groupID
,

1732 
uöt8
 
s˚√ID
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1737 
ZSètus_t
 
z˛GíîÆ_SídS˚√VõwRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1738 
uöt8
 
°©us
, 
z˛GíîÆ_S˚√_t
 *
s˚√
,

1739 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1744 
ZSètus_t
 
z˛GíîÆ_SídS˚√GëMembîshùRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1745 
uöt8
 
s˚√Sètus
, uöt8 
ˇ∑côy
, uöt8 
s˚√C¡
, uöt8 *
s˚√Li°
,

1746 
uöt16
 
groupID
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1749 #ifde‡
ZCL_GROUPS


1753 
ZSètus_t
 
z˛GíîÆ_SídGroupReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1754 
uöt8
 
cmd
, 
uöt16
 
groupID
,

1755 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1763 
ZSètus_t
 
z˛GíîÆ_SídAddGroupReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1764 
uöt8
 
cmd
, 
uöt16
 
groupID
, uöt8 *
groupName
,

1765 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1768 #ifde‡
ZCL_IDENTIFY


1772 
ZSètus_t
 
z˛GíîÆ_SídIdítify
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1773 
uöt16
 
idítifyTime
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1777 
ZSètus_t
 
z˛GíîÆ_SídIdítifyQuîyRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1778 
uöt16
 
timeout
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1781 #ifde‡
ZCL_ALARMS


1785 
ZSètus_t
 
z˛GíîÆ_SídAœrmReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1786 
uöt8
 
cmd
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
,

1787 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1792 
ZSètus_t
 
z˛GíîÆ_SídAœrmGëRe•no£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1793 
uöt8
 
°©us
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
,

1794 
uöt32
 
timeSèmp
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1798 
ZSètus_t
 
z˛GíîÆ_SídAœrmGëEvítLog
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1799 
z˛GëEvítLog_t
 *
pEvítLog
,

1800 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1804 
ZSètus_t
 
z˛GíîÆ_SídAœrmPublishEvítLog
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1805 
z˛PublishEvítLog_t
 *
pEvítLog
,

1806 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1809 #ifde‡
ZCL_LOCATION


1813 
ZSètus_t
 
z˛GíîÆ_SídLoˇti⁄SëAbsﬁuã
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1814 
z˛Loˇti⁄Absﬁuã_t
 *
absLoc
,

1815 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1820 
ZSètus_t
 
z˛GíîÆ_SídLoˇti⁄SëDevCfg
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1821 
z˛Loˇti⁄DevCfg_t
 *
devCfg
,

1822 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1827 
ZSètus_t
 
z˛GíîÆ_SídLoˇti⁄GëDevCfg
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1828 
uöt8
 *
èrgëAddr
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1833 
ZSètus_t
 
z˛GíîÆ_SídLoˇti⁄GëD©a
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1834 
z˛Loˇti⁄GëD©a_t
 *
locD©a
,

1835 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1840 
ZSètus_t
 
z˛GíîÆ_SídLoˇti⁄DevCfgRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1841 
z˛Loˇti⁄DevCfgR•_t
 *
devCfg
,

1842 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1848 
ZSètus_t
 
z˛GíîÆ_SídLoˇti⁄D©a
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
, uöt8 
cmd
,

1849 
uöt8
 
°©us
, 
z˛Loˇti⁄D©a_t
 *
locD©a
,

1850 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1853 #ifde‡
ZCL_ALARMS


1857 
ZSètus_t
 
z˛GíîÆ_AddAœrm
–
uöt8
 
ídpoöt
, 
z˛GíîÆ_Aœrm_t
 *
Æ¨m
 );

1862 
z˛GíîÆ_Aœrm_t
 *
z˛GíîÆ_FödAœrm
–
uöt8
 
ídpoöt
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
 );

1867 
z˛GíîÆ_Aœrm_t
 *
z˛GíîÆ_FödE¨lõ°Aœrm
–
uöt8
 
ídpoöt
 );

1872 
z˛GíîÆ_Re£tAœrm
–
uöt8
 
ídpoöt
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
 );

1877 
z˛GíîÆ_Re£tAŒAœrms
–
uöt8
 
ídpoöt
, uöt8 
nŸifyAµ
 );

1883 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_gp.h

40 #i‚de‡
ZCL_GP_H


41 
	#ZCL_GP_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

58 
	#ZGP_ENDPOINT_ID
 0x00F2

	)

61 
	#ZGP_DEVICE_ID_PROXY
 0x0500

	)

62 
	#ZGP_DEVICE_ID_TARGET
 0x0501

	)

63 
	#ZGP_DEVICE_ID_COMBO
 0x0502

	)

64 
	#ZGP_DEVICE_ID_TARGET_PLUS
 0x0503

	)

65 
	#ZGP_DEVICE_ID_COMMISSIONING_TOOL
 0x0504

	)

66 
	#ZGP_DEVICE_ID_PROXY_MINIMUN
 0x0505

	)

67 
	#ZGP_DEVICE_ID_COMBO_MINIMUM
 0x0506

	)

69 
	#ZGP_STUB_SECURITY_NONE
 0

	)

70 
	#ZGP_STUB_SECURITY_ALL
 1

	)

91 
	#SUPP_ZGP_FEATURE_COMMON
 0x0001

	)

92 
	#SUPP_ZGP_FEATURE_DIRECT
 0x0002

	)

93 
	#SUPP_ZGP_FEATURE_DERIVED_GROUPCAST
 0x0004

	)

94 
	#SUPP_ZGP_FEATURE_PRECOMMISSIONED
 0x0008

	)

95 
	#SUPP_ZGP_FEATURE_UNICAST
 0x0010

	)

96 
	#SUPP_ZGP_FEATURE_LIGHTWEIGHT_UNICAST
 0x0020

	)

97 
	#SUPP_ZGP_FEATURE_SINGLE_HOP_BIDIR_OPER
 0x0040

	)

98 
	#SUPP_ZGP_FEATURE_MULTI_HOP_BIDIR_OPER
 0x0080

	)

99 
	#SUPP_ZGP_FEATURE_PROXY_TABLE_MAINT
 0x0100

	)

100 
	#SUPP_ZGP_FEATURE_SINGLE_HOP_COMMISS
 0x0200

	)

101 
	#SUPP_ZGP_FEATURE_SINGLE_HOP_BIDIR_COMMISS
 0x0400

	)

102 
	#SUPP_ZGP_FEATURE_MULTI_HOP_COMMISS
 0x0800

	)

103 
	#SUPP_ZGP_FEATURE_MULTI_HOP_BIDIR_COMMISS
 0x1000

	)

104 
	#SUPP_ZGP_FEATURE_CT_BASED_COMMISS
 0x2000

	)

105 
	#SUPP_ZGP_FEATURE_MAINT_ZGPD
 0x4000

	)

107 
	#SUPP_ZGP_CMD_NOTIFICAITON
 0x0001

	)

108 
	#SUPP_ZGP_CMD_TUNNELING_STOP
 0x0002

	)

109 
	#SUPP_ZGP_CMD_PAIRING_SEARCH
 0x0004

	)

110 
	#SUPP_ZGP_CMD_NOTIFICATION_RESP
 0x0008

	)

111 
	#SUPP_ZGP_CMD_PAIRING
 0x0010

	)

112 
	#SUPP_ZGP_CMD_PROXY_COMMISSIONING_MODE
 0x0020

	)

113 
	#SUPP_ZGP_CMD_COMMISSIONING_NOTIF
 0x0040

	)

114 
	#SUPP_ZGP_CMD_RESPONSE
 0x0080

	)

115 
	#SUPP_ZGP_CMD_TT_UPDATE
 0x0100

	)

116 
	#SUPP_ZGP_CMD_TT_REQ
 0x0200

	)

117 
	#SUPP_ZGP_CMD_TT_RESP
 0x0400

	)

118 
	#SUPP_ZGP_CMD_CONFIGURE_PAIRING
 0x0800

	)

120 #i‡
deföed
 ( 
ZGP_DEVICE_PROXY
 ) || ( 
ZGP_DEVICE_COMBO
 )

121 
	#ZGP_DEVICE_SUPPORTED_CLIENT_FEATURE
 ( \

122 
SUPP_ZGP_FEATURE_COMMON
 \

123 + 
SUPP_ZGP_FEATURE_DIRECT
 \

124 + 
SUPP_ZGP_FEATURE_DERIVED_GROUPCAST
 \

125 + 
SUPP_ZGP_FEATURE_PRECOMMISSIONED
 \

126 + 
SUPP_ZGP_FEATURE_UNICAST
 \

127 + 
SUPP_ZGP_FEATURE_LIGHTWEIGHT_UNICAST
 \

128 + 
SUPP_ZGP_FEATURE_MULTI_HOP_BIDIR_OPER
 \

129 + 
SUPP_ZGP_FEATURE_PROXY_TABLE_MAINT
 \

130 + 
SUPP_ZGP_FEATURE_MULTI_HOP_COMMISS
 \

131 + 
SUPP_ZGP_FEATURE_SINGLE_HOP_BIDIR_COMMISS
 \

132 + 
SUPP_ZGP_FEATURE_CT_BASED_COMMISS
 \

133 + 
SUPP_ZGP_FEATURE_MAINT_ZGPD
 )

	)

136 #i‡
deföed
 ( 
ZGP_DEVICE_PROXY_MIN
 ) || deföed ( 
ZGP_DEVICE_COMBO_MIN
 )

137 
	#ZGP_DEVICE_SUPPORTED_CLIENT_FEATURE
 \

138 –
SUPP_ZGP_FEATURE_COMMON
 \

139 + 
SUPP_ZGP_FEATURE_DIRECT
 \

140 + 
SUPP_ZGP_FEATURE_DERIVED_GROUPCAST
 \

141 + 
SUPP_ZGP_FEATURE_PRECOMMISSIONED
 \

142  )

	)

152 #i‡
deföed
 ( 
ZGP_DEVICE_TARGET
 )

153 
	#ZGP_DEVICE_SUPPORTED_SERVER_FEATURE
 ( \

154 
SUPP_ZGP_FEATURE_COMMON
 \

155 + 
SUPP_ZGP_FEATURE_DERIVED_GROUPCAST
 \

156 + 
SUPP_ZGP_FEATURE_PRECOMMISSIONED
 \

157 + 
SUPP_ZGP_FEATURE_UNICAST
 \

158 + 
SUPP_ZGP_FEATURE_LIGHTWEIGHT_UNICAST
 \

159 + 
SUPP_ZGP_FEATURE_MULTI_HOP_BIDIR_OPER
 \

160 + 
SUPP_ZGP_FEATURE_PROXY_TABLE_MAINT
 \

161 + 
SUPP_ZGP_FEATURE_MULTI_HOP_COMMISS
 \

162 + 
SUPP_ZGP_FEATURE_MULTI_HOP_BIDIR_COMMISS
 \

163 + 
SUPP_ZGP_FEATURE_CT_BASED_COMMISS
 \

164 + 
SUPP_ZGP_FEATURE_MAINT_ZGPD
 )

	)

167 #i‡
deföed
 ( 
ZGP_DEVICE_TARGETPLUS
 ) || ( 
ZGP_DEVICE_COMBO
 )

168 
	#ZGP_DEVICE_SUPPORTED_SERVER_FEATURE
 ( \

169 
SUPP_ZGP_FEATURE_COMMON
 \

170 + 
SUPP_ZGP_FEATURE_DIRECT
 \

171 + 
SUPP_ZGP_FEATURE_DERIVED_GROUPCAST
 \

172 + 
SUPP_ZGP_FEATURE_PRECOMMISSIONED
 \

173 + 
SUPP_ZGP_FEATURE_UNICAST
 \

174 + 
SUPP_ZGP_FEATURE_LIGHTWEIGHT_UNICAST
 \

175 + 
SUPP_ZGP_FEATURE_SINGLE_HOP_BIDIR_OPER
 \

176 + 
SUPP_ZGP_FEATURE_MULTI_HOP_BIDIR_OPER
 \

177 + 
SUPP_ZGP_FEATURE_PROXY_TABLE_MAINT
 \

178 + 
SUPP_ZGP_FEATURE_SINGLE_HOP_COMMISS
 \

179 + 
SUPP_ZGP_FEATURE_SINGLE_HOP_BIDIR_COMMISS
 \

180 + 
SUPP_ZGP_FEATURE_MULTI_HOP_COMMISS
 \

181 + 
SUPP_ZGP_FEATURE_MULTI_HOP_BIDIR_COMMISS
 \

182 + 
SUPP_ZGP_FEATURE_CT_BASED_COMMISS
 \

183 + 
SUPP_ZGP_FEATURE_MAINT_ZGPD
 )

	)

186 #i‡
deföed
 ( 
ZGP_DEVICE_COMBO_MIN
 )

187 
	#ZGP_DEVICE_SUPPORTED_SERVER_FEATURE
 ( \

188 
SUPP_ZGP_FEATURE_COMMON
 \

189 + 
SUPP_ZGP_FEATURE_DIRECT
 \

190 + 
SUPP_ZGP_FEATURE_DERIVED_GROUPCAST
 \

191 + 
SUPP_ZGP_FEATURE_PRECOMMISSIONED
 \

192 + 
SUPP_ZGP_FEATURE_SINGLE_HOP_BIDIR_OPER
 \

193 + 
SUPP_ZGP_FEATURE_MULTI_HOP_BIDIR_OPER
 \

194 + 
SUPP_ZGP_FEATURE_PROXY_TABLE_MAINT
 \

195 + 
SUPP_ZGP_FEATURE_SINGLE_HOP_COMMISS
 \

196 + 
SUPP_ZGP_FEATURE_SINGLE_HOP_BIDIR_COMMISS
 \

197 + 
SUPP_ZGP_FEATURE_MULTI_HOP_COMMISS
 \

198 + 
SUPP_ZGP_FEATURE_MULTI_HOP_BIDIR_COMMISS
 \

199 + 
SUPP_ZGP_FEATURE_CT_BASED_COMMISS
 \

200 + 
SUPP_ZGP_FEATURE_MAINT_ZGPD
 )

	)

203 #i‡
deföed
 ( 
ZGP_DEVICE_PROXY
 ) || ( 
ZGP_DEVICE_COMBO
 )

204 
	#ZGP_DEVICE_SUPPORTED_CLIENT_TX_CMD
 ( \

205 
SUPP_ZGP_CMD_NOTIFICAITON
 \

206 + 
SUPP_ZGP_CMD_TUNNELING_STOP
 \

207 + 
SUPP_ZGP_CMD_PAIRING_SEARCH
 \

208 + 
SUPP_ZGP_CMD_COMMISSIONING_NOTIF
 )

	)

210 
	#ZGP_DEVICE_SUPPORTED_CLIENT_RX_CMD
 ( \

211 
SUPP_ZGP_CMD_NOTIFICAITON
 \

212 + 
SUPP_ZGP_CMD_TUNNELING_STOP
 \

213 + 
SUPP_ZGP_CMD_PAIRING_SEARCH
 \

214 + 
SUPP_ZGP_CMD_NOTIFICATION_RESP
 \

215 + 
SUPP_ZGP_CMD_PAIRING
 \

216 + 
SUPP_ZGP_CMD_PROXY_COMMISSIONING_MODE
 \

217 + 
SUPP_ZGP_CMD_COMMISSIONING_NOTIF
 \

218 + 
SUPP_ZGP_CMD_RESPONSE
 )

	)

221 #i‡
deföed
 ( 
ZGP_DEVICE_PROXY_MIN
 ) || deföed ( 
ZGP_DEVICE_COMBO_MIN
 )

222 
	#ZGP_DEVICE_SUPPORTED_CLIENT_TX_CMD
 ( \

223 
SUPP_ZGP_CMD_NOTIFICAITON
 \

224  )

	)

228 
	#ZGP_DEVICE_SUPPORTED_CLIENT_RX_CMD
 ( \

229 
SUPP_ZGP_CMD_PAIRING
 \

230  )

	)

239 #i‡
deföed
 ( 
ZGP_DEVICE_TARGET
 ) || deföed ( 
ZGP_DEVICE_TARGETPLUS
 ) || ( 
ZGP_DEVICE_COMBO
 )

240 
	#ZGP_DEVICE_SUPPORTED_SERVER_TX_CMD
 ( \

241 
SUPP_ZGP_CMD_NOTIFICATION_RESP
 \

242 + 
SUPP_ZGP_CMD_PAIRING
 \

243 + 
SUPP_ZGP_CMD_PROXY_COMMISSIONING_MODE
 \

244 + 
SUPP_ZGP_CMD_RESPONSE
 \

245 + 
SUPP_ZGP_CMD_TT_RESP
 \

246 + 
SUPP_ZGP_CMD_CONFIGURE_PAIRING
 )

	)

248 
	#ZGP_DEVICE_SUPPORTED_SERVER_RX_CMD
 ( \

249 + 
SUPP_ZGP_CMD_NOTIFICAITON
 \

250 + 
SUPP_ZGP_CMD_PAIRING_SEARCH
 \

251 + 
SUPP_ZGP_CMD_PAIRING
 \

252 + 
SUPP_ZGP_CMD_PROXY_COMMISSIONING_MODE
 \

253 + 
SUPP_ZGP_CMD_COMMISSIONING_NOTIF
 \

254 + 
SUPP_ZGP_CMD_TT_UPDATE
 \

255 + 
SUPP_ZGP_CMD_TT_REQ
 \

256 + 
SUPP_ZGP_CMD_CONFIGURE_PAIRING
 )

	)

259 #i‡
deföed
 ( 
ZGP_DEVICE_COMBO_MIN
 )

260 
	#ZGP_DEVICE_SUPPORTED_SERVER_TX_CMD
 ( \

261 + 
SUPP_ZGP_CMD_NOTIFICAITON
 \

262 + 
SUPP_ZGP_CMD_PAIRING_SEARCH
 \

263 + 
SUPP_ZGP_CMD_PAIRING
 \

264 + 
SUPP_ZGP_CMD_PROXY_COMMISSIONING_MODE
 \

265 + 
SUPP_ZGP_CMD_COMMISSIONING_NOTIF
 \

266 + 
SUPP_ZGP_CMD_RESPONSE
 \

267 + 
SUPP_ZGP_CMD_TT_UPDATE
 \

268 + 
SUPP_ZGP_CMD_TT_REQ
 \

269 + 
SUPP_ZGP_CMD_TT_RESP
 \

270 + 
SUPP_ZGP_CMD_CONFIGURE_PAIRING
 )

	)

272 
	#ZGP_DEVICE_SUPPORTED_SERVER_RX_CMD
 
ZGP_DEVICE_SUPPORTED_SERVER_TX_CMD


	)

275 #i‚de‡
ZGP_DEVICE_SUPPORTED_CLIENT_TX_CMD


276 
	#ZGP_DEVICE_SUPPORTED_CLIENT_TX_CMD
 0x0000

	)

278 #i‚de‡
ZGP_DEVICE_SUPPORTED_CLIENT_RX_CMD


279 
	#ZGP_DEVICE_SUPPORTED_CLIENT_RX_CMD
 0x0000

	)

281 #i‚de‡
ZGP_DEVICE_SUPPORTED_SERVER_TX_CMD


282 
	#ZGP_DEVICE_SUPPORTED_SERVER_TX_CMD
 0x0000

	)

284 #i‚de‡
ZGP_DEVICE_SUPPORTED_SERVER_RX_CMD


285 
	#ZGP_DEVICE_SUPPORTED_SERVER_RX_CMD
 0x0000

	)

288 #i‚de‡
ZGP_DEVICE_SUPPORTED_CLIENT_FEATURE


289 
	#ZGP_DEVICE_SUPPORTED_CLIENT_FEATURE
 0x0000

	)

291 #i‚de‡
ZGP_DEVICE_SUPPORTED_SERVER_FEATURE


292 
	#ZGP_DEVICE_SUPPORTED_SERVER_FEATURE
 0x0000

	)

295 
	#SUPPORTED_C_FEATURE
(
x
Ë–
ZGP_DEVICE_SUPPORTED_CLIENT_FEATURE
 & (xË)

	)

296 
	#SUPPORTED_S_FEATURE
(
x
Ë–
ZGP_DEVICE_SUPPORTED_SERVER_FEATURE
 & (xË)

	)

297 
	#SUPPORTED_FEATURE
(
x
Ë–
	`SUPPORTED_C_FEATURE
(xË|| 
	`SUPPORTED_S_FEATURE
(xË)

	)

298 
	#SUPPORTED_C_RX_CMD
(
x
Ë–
ZGP_DEVICE_SUPPORTED_CLIENT_RX_CMD
 & (xË)

	)

299 
	#SUPPORTED_C_TX_CMD
(
x
Ë–
ZGP_DEVICE_SUPPORTED_CLIENT_TX_CMD
 & (xË)

	)

300 
	#SUPPORTED_S_RX_CMD
(
x
Ë–
ZGP_DEVICE_SUPPORTED_SERVER_RX_CMD
 & (xË)

	)

301 
	#SUPPORTED_S_TX_CMD
(
x
Ë–
ZGP_DEVICE_SUPPORTED_SERVER_TX_CMD
 & (xË)

	)

302 
	#SUPPORTED_RX_CMD
(
x
Ë–
	`SUPPORTED_C_RX_CMD
(xË|| 
	`SUPPORTED_S_RX_CMD
(xË)

	)

303 
	#SUPPORTED_TX_CMD
(
x
Ë–
	`SUPPORTED_C_TX_CMD
(xË|| 
	`SUPPORTED_S_TX_CMD
(xË)

	)

305 
	#ZGP_FEATURE_STUB_SECURITY


	)

307 #i‡!
deföed
 ( 
ZGP_STUB_SECURITY
 )

308 #i‡
deföed
 ( 
ZGP_FEATURE_STUB_SECURITY
 )

309 
	#ZGP_STUB_SECURITY
 (
ZGP_STUB_SECURITY_ALL
)

	)

311 
	#ZGP_STUB_SECURITY
 (
ZGP_STUB_SECURITY_NONE
)

	)

315 
	#ZGP_DEVICE_COMISSIONING_TOOL


	)

321 
	#ATTRID_GP_MAX_GPTT_ENTRIES
 0x0000

	)

322 
	#ATTRID_GP_SINK_TABLE
 0x0001

	)

323 
	#ATTRID_GP_COMM_MODE
 0x0002

	)

324 
	#ATTRID_GP_COMM_EXIT_MODE
 0x0003

	)

325 
	#ATTRID_GP_COMM_WINDOW
 0x0004

	)

326 
	#ATTRID_GP_SECURITY_LEVEL
 0x0005

	)

328 
	#ATTRID_GP_SHARED_SECURITY_KEYTYPE
 0x0020

	)

329 
	#ATTRID_GP_SHARED_SECURITY_KEY
 0x0021

	)

330 
	#ATTRID_GP_LINK_KEY
 0x0022

	)

333 
	#ATTRID_GP_MAX_PROXY_ENTRIES
 0x0010

	)

334 
	#ATTRID_GP_PROXY_TABLE
 0x0011

	)

335 
	#ATTRID_GP_NOTIFICATION_RETRY_NUMBER
 0x0012

	)

336 
	#ATTRID_GP_NOTIFICATION_RETRY_TIMER
 0x0013

	)

337 
	#ATTRID_GP_MAX_SEARCH_COUNTER
 0x0014

	)

338 
	#ATTRID_GP_BLOCKED_SRC_ID
 0x0015

	)

341 
	#COMMAND_ZGP_NOTIFICATION
 0x00

	)

342 
	#COMMAND_ZGP_PAIRING_SEARCH
 0x01

	)

343 
	#COMMAND_ZGP_TUNNELING_STOP
 0x03

	)

344 
	#COMMAND_ZGP_COMMISSIONING_NOTIFICATION
 0x04

	)

345 
	#COMMAND_ZGP_COMMISSIONING_SUCCESS
 0x05

	)

346 
	#COMMAND_ZGP_TRANSLATION_TABLE_UPDATE
 0x07

	)

347 
	#COMMAND_ZGP_TRANSLATION_TABLE_REQUEST
 0x08

	)

348 
	#COMMAND_ZGP_CONFIGURE_PAIRING
 0x09

	)

351 
	#COMMAND_ZGP_NOTIFICATION_RESPONSE
 0x00

	)

352 
	#COMMAND_ZGP_PAIRING
 0x01

	)

353 
	#COMMAND_ZGP_PROXY_COMMISSIONING_MODE
 0x02

	)

354 
	#COMMAND_ZGP_RESPONSE
 0x06

	)

355 
	#COMMAND_ZGP_TRANSLATION_TABLE_RESPONSE
 0x08

	)

358 
	#ZGP_CMDHDRLEN_NOTIFICATION
 11

	)

359 
	#ZGP_CMDHDRLEN_NOTIFICATION_EXTENDED
 3

	)

360 
	#ZGP_CMDHDRLEN_COMMISSIONING_NOTIFICATION
 10

	)

361 
	#ZGP_CMDHDRLEN_TRANSLATION_TABLE_UPDATE
 6

	)

362 
	#ZGP_CMD_TRANSLATION_TABLE_ENTRY_LEN
 7

	)

363 
	#ZGP_CMD_TRANSLATION_TABLE_RSP_ENTRY_LEN
 12

	)

364 
	#ZGP_CMDHDRLEN_CONFIGURE_PAIRING
 8

	)

365 
	#ZGP_CMDHDRLEN_PAIRING
 6

	)

366 
	#ZGP_CMDHDRLEN_RESPONSE
 8

	)

367 
	#ZGP_CMDHDRLEN_TRANSLATION_TABLE_RESPONSE
 4

	)

370 
	#ZGP_TUNNEL_MODE_UNICAST
 0x00

	)

371 
	#ZGP_TUNNEL_MODE_GROUP_DGROUPID
 0x01

	)

372 
	#ZGP_TUNNEL_MODE_GROUP_COMM_GROUPID
 0x02

	)

373 
	#ZGP_TUNNEL_MODE_UNICAST_MINIMAL
 0x03

	)

376 
	#ZGP_KEYTYPE_NONE
 0

	)

377 
	#ZGP_KEYTYPE_NWK
 1

	)

378 
	#ZGP_KEYTYPE_GROUP
 2

	)

379 
	#ZGP_KEYTYPE_NWK_DERIVED_GROUP
 3

	)

380 
	#ZGP_KEYTYPE_OOBKEY
 4

	)

381 
	#ZGP_KEYTYPE_DERIVED_INDIVIDUAL
 7

	)

384 
	#ZGP_SECURITY_LEVEL_NONE
 0

	)

385 
	#ZGP_SECURITY_LEVEL_SMALL
 1

	)

386 
	#ZGP_SECURITY_LEVEL_LONG
 2

	)

387 
	#ZGP_SECURITY_LEVEL_FULL
 3

	)

389 
	#ZGP_SECURITY_LEVEL_SMALL_MIC_SIZE
 2

	)

390 
	#ZGP_SECURITY_LEVEL_STD_MIC_SIZE
 4

	)

393 
	#ZGP_EXIT_MODE_ON_COMMISSIONING_WINDOW_EXPIRATION
 0x01

	)

394 
	#ZGP_EXIT_MODE_ON_FIRST_PAIRING_SUCCESS
 0x02

	)

395 
	#ZGP_EXIT_MODE_ON_PROXY_COMMISSIONING_MODE
 0x04

	)

398 
	#ZGP_SHARED_KEYTYPE_NONE
 0x00

	)

399 
	#ZGP_SHARED_KEYTYPE_NWK
 0x01

	)

400 
	#ZGP_SHARED_KEYTYPE_GROUP
 0x02

	)

401 
	#ZGP_SHARED_KEYTYPE_NWK_DERIVED_GROUP
 0x03

	)

403 
	#ZGP_TEMP_MASTER_CHANNEL_MASK
 0x0F

	)

406 
	#ZGP_GROUPCAST_RADIUS_DEFAULT
 0xFF

	)

409 
	#ZGP_TRANSLATIONTABLE_ENTRY_MAX_ENDPOINTS
 5

	)

410 
	#ZGP_TRANSLATIONTABLE_ENTRY_MAX_PAYLOAD_LEN
 4

	)

422 
commMode
:2;

423 
£qNumC≠
:1;

424 
rxOnC≠
:1;

425 
fixedLoc
:1;

426 
assignAlüs
:1;

427 
£cU£
:1;

428 
commissi⁄ed
:1;

429 } 
	tgpSökTabÀO±i⁄sBôs_t
;

434 
gpSökTabÀO±i⁄sBôs_t
 
›tBôs
;

435 
uöt8
 
›tByã
;

436 } 
	tgpSökTabÀO±i⁄s_t
;

441 
Àvñ
:2;

442 
keyTy≥
:3;

443 
ª£rved
:3;

444 } 
	tgpSökTabÀSecO±i⁄sBôs_t
;

448 
gpSökTabÀSecO±i⁄sBôs_t
 
›tBôs
;

449 
uöt8
 
›tByã
;

450 } 
	tgpSökTabÀSecO±i⁄s_t
;

461 
uöt32
 
§cID
;

462 
uöt8
 
devi˚ID
;

463 
gpSökTabÀO±i⁄s_t
 
bôm≠
;

464 
gpSökTabÀSecO±i⁄s_t
 
£cO±i⁄s
;

465 
uöt16
 
ãmpMa°î
;

466 
uöt8
 
£qNum
;

467 
uöt16
 
¥eCommGroupID
;

468 
uöt16
 
assig√dAlüs
;

469 
uöt8
 
groupˇ°Radius
;

470 
uöt32
 
£cFømeCou¡î
;

471 
uöt8
 
£cKey
[
SEC_KEY_LEN
];

476 
	#ST_commissi⁄ed
 
bôm≠
.
›tBôs
.
commissi⁄ed


	)

477 
	#ST_£curôyU£
 
bôm≠
.
›tBôs
.
£cU£


	)

478 
	#assig√dAlüsFœg
 
bôm≠
.
›tBôs
.
assignAlüs


	)

479 
	#fixedLoˇti⁄
 
bôm≠
.
›tBôs
.
fixedLoc


	)

480 
	#rxOnC≠abûôy
 
bôm≠
.
›tBôs
.
rxOnC≠


	)

481 
	#£qNumC≠abûôy
 
bôm≠
.
›tBôs
.
£qNumC≠


	)

482 
	#tu¬ñCommMode
 
bôm≠
.
›tBôs
.
commMode


	)

483 } 
	tz˛GP_SökTabÀE¡ry_t
;

488 
íåyA˘ive
:1;

489 
íåyVÆid
:1;

490 
£qNumC≠
:1;

491 
uniˇ°ZGPS
:1;

492 
dîivedGroupZGPS
:1;

493 
commGroupZGPS
:1;

494 
fú°ToFwd
:1;

495 
öR™ge
:1;

496 
ZGPDFixed
:1;

497 
ÆlUniˇ°Rouãs
:1;

498 
assig√dAlüs
:1;

499 
£curôyU£
:1;

500 
ª£rved
:4;

501 } 
	tgpProxyTabÀO±i⁄sBôs_t
;

506 
gpProxyTabÀO±i⁄sBôs_t
 
›tBôs
;

507 
uöt8
 
›tW‹d
;

508 } 
	tgpProxyTabÀO±i⁄s_t
;

513 
Àvñ
:2;

514 
keyTy≥
:3;

515 
ª£rved
:3;

516 } 
	tgpProxyTabÀSecO±i⁄sBôs_t
;

520 
gpProxyTabÀSecO±i⁄sBôs_t
 
›tBôs
;

521 
uöt8
 
›tByã
;

522 } 
	tgpProxyTabÀSecO±i⁄s_t
;

526 
uöt8
 
õìAddr
[
Z_EXTADDR_LEN
];

527 
uöt16
 
nwkAddr
;

528 } 
	tzgpAddªssLi°_t
;

533 
uöt32
 
§cID
;

534 
gpProxyTabÀO±i⁄s_t
 
bôm≠
;

535 
gpProxyTabÀSecO±i⁄s_t
 
£cO±i⁄s
;

536 
uöt8
 
£qNum
;

537 
uöt16
 
assig√dAlüs
;

538 
uöt32
 
£cFømeCou¡î
;

539 
uöt8
 
£cKey
[
SEC_KEY_LEN
];

540 
uöt8
 
numSökAddrs
;

541 
uöt8
 
numSökGroups
;

542 
uöt8
 
groupˇ°Radius
;

543 
uöt8
 
£¨chCou¡î
;

546 
	#PT_£curôyU£
 
bôm≠
.
›tBôs
.
£curôyU£


	)

547 
	#PT_assig√dAlüs
 
bôm≠
.
›tBôs
.
assig√dAlüs


	)

548 
	#PT_ÆlUniˇ°Rouãs
 
bôm≠
.
›tBôs
.
ÆlUniˇ°Rouãs


	)

549 
	#PT_ZGPDFixed
 
bôm≠
.
›tBôs
.
ZGPDFixed


	)

550 
	#PT_öR™ge
 
bôm≠
.
›tBôs
.
öR™ge


	)

551 
	#PT_fú°ToFwd
 
bôm≠
.
›tBôs
.
fú°ToFwd


	)

552 
	#PT_commGroupZGPS
 
bôm≠
.
›tBôs
.
commGroupZGPS


	)

553 
	#PT_dîivedGroupZGPS
 
bôm≠
.
›tBôs
.
dîivedGroupZGPS


	)

554 
	#PT_uniˇ°ZGPS
 
bôm≠
.
›tBôs
.
uniˇ°ZGPS


	)

555 
	#PT_£qNumC≠
 
bôm≠
.
›tBôs
.
£qNumC≠


	)

556 
	#PT_íåyVÆid
 
bôm≠
.
›tBôs
.
íåyVÆid


	)

557 
	#PT_íåyA˘ive
 
bôm≠
.
›tBôs
.
íåyA˘ive


	)

558 } 
	tz˛GP_ProxyTabÀE¡ry_t
;

562 
z˛GP_ProxyTabÀE¡ry_t
 *
pHdr
;

563 
zgpAddªssLi°_t
 *
pAddrLi°
;

564 
uöt16
 *
pGroupLi°
;

565 } 
	tz˛GP_ProxyTabÀ_t
;

570 
ÆsoUˇ°
:1;

571 
ÆsoDîivedGΩ
:1;

572 
ÆsoCommGΩ
:1;

573 
£cLevñ
:2;

574 
£cKeyTy≥
:3;

575 
≠poötTempM°
:1;

576 
zgµGPDFTxQFuŒ
:1;

577 
ª£rved
:6;

578 } 
	tnŸifiˇti⁄O±i⁄sbôs_t
;

583 
nŸifiˇti⁄O±i⁄sbôs_t
 
›tBôs
;

584 
uöt16
 
›tW‹d
;

585 } 
	tnŸifiˇti⁄O±i⁄s_t
;

590 
nŸifiˇti⁄O±i⁄s_t
 
bôm≠
;

591 
uöt32
 
ZGPDSrcID
;

592 
uöt32
 
ZGPDSecFømeCou¡î
;

593 
uöt8
 
ZGPDCmdID
;

594 
uöt16
 
ZGPPSh‹tAddr
;

595 
uöt8
 
ZGPPDi°™˚
;

596 
uöt8
 
∑ylﬂdLí
;

597 
uöt8
 *
pZGPDCmdPaylﬂd
;

600 
	#zgµGPDFTxQueueFuŒ
 
bôm≠
.
›tBôs
.
zgµGPDFTxQFuŒ


	)

601 
	#ZGPP¥e£¡
 
bôm≠
.
›tBôs
.
≠poötTempM°


	)

602 
	#nŸifiˇti⁄SecKeyTy≥
 
bôm≠
.
›tBôs
.
£cKeyTy≥


	)

603 
	#nŸifiˇti⁄SecLevñ
 
bôm≠
.
›tBôs
.
£cLevñ


	)

604 
	#ÆsoCommissi⁄edGroup
 
bôm≠
.
›tBôs
.
ÆsoCommGΩ


	)

605 
	#ÆsoDîivedGroup
 
bôm≠
.
›tBôs
.
ÆsoDîivedGΩ


	)

606 
	#ÆsoUniˇ°
 
bôm≠
.
›tBôs
.
ÆsoUˇ°


	)

607 } 
	tz˛GPNŸifiˇti⁄_t
;

612 
ªqUCa°Söks
:1;

613 
ªqDîivedGCSöks
:1;

614 
ªqCommGCSöks
:1;

615 
ªqZGPDFC
:1;

616 
ªqZGPDKey
:1;

617 
ª£rved
:3;

618 } 
	t∑úögSórchO±i⁄sbôs_t
;

623 
∑úögSórchO±i⁄sbôs_t
 
›tBôs
;

624 
uöt8
 
›tByã
;

625 } 
	t∑úögSórchO±i⁄s_t
;

630 
∑úögSórchO±i⁄s_t
 
bôm≠
;

631 
uöt32
 
ZGPDSrcID
;

634 
	#ªque°ZGPDKey
 
bôm≠
.
›tBôs
.
ªqZGPDKey


	)

635 
	#ªque°ZGPDFømeCou¡î
 
bôm≠
.
›tBôs
.
ªqZGPDFC


	)

636 
	#ªque°CommGroupˇ°Söks
 
bôm≠
.
›tBôs
.
ªqCommGCSöks


	)

637 
	#ªque°DîivedGroupˇ°Söks
 
bôm≠
.
›tBôs
.
ªqDîivedGCSöks


	)

638 
	#ªque°Uniˇ°Söks
 
bôm≠
.
›tBôs
.
ªqUCa°Söks


	)

639 } 
	tz˛GPPaúögSórch_t
;

644 
ÆsoDîivedGp
:1;

645 
ÆsoCommGp
:1;

646 
ª£rved
:6;

647 } 
	ttu¬ñögSt›O±i⁄sbôs_t
;

652 
tu¬ñögSt›O±i⁄sbôs_t
 
›tBôs
;

653 
uöt8
 
›tByã
;

654 } 
	ttu¬ñögSt›O±i⁄s_t
;

659 
tu¬ñögSt›O±i⁄s_t
 
bôm≠
;

660 
uöt32
 
ZGPDSrcID
;

661 
uöt32
 
ZGPDFømeCou¡î
;

662 
uöt16
 
ZGPPSh‹tAddr
;

663 
uöt8
 
ZGPPDi°™˚
;

667 
uöt8
 
ZGPDCmdID
;

668 
uöt8
 
∑ylﬂdLí
;

669 
uöt8
 *
pPaylﬂd
;

672 
	#tsAlsoCommGΩ
 
bôm≠
.
›tBôs
.
ÆsoCommGp


	)

673 
	#tsAlsoDîivedGΩ
 
bôm≠
.
›tBôs
.
ÆsoDîivedGp


	)

674 } 
	tz˛GPTu¬ñögSt›_t
;

679 
≠pTempMa°î
:1;

680 
£cLevñ
:2;

681 
£cKeyTy≥
:3;

682 
£cProcFaûed
:1;

683 
ª£rved
:1;

684 } 
	tnŸCommO±i⁄sbôs_t
;

689 
nŸCommO±i⁄sbôs_t
 
›tBôs
;

690 
uöt8
 
›tByã
;

691 } 
	tnŸCommO±i⁄s_t
;

696 
nŸCommO±i⁄s_t
 
bôm≠
;

697 
uöt32
 
ZGPDSrcID
;

698 
uöt32
 
ZGPDFømeCou¡î
;

699 
uöt16
 
ZGPPSh‹tAddr
;

700 
uöt8
 
ZGPPDi°™˚
;

701 
uöt8
 
ZGPDCmdID
;

702 
uöt32
 
MIC
;

703 
uöt8
 
∑ylﬂdLí
;

704 
uöt8
 *
pPaylﬂd
;

707 
	#£cPro˚ssögFaûed
 
bôm≠
.
›tBôs
.
£cProcFaûed


	)

708 
	#commSecKeyTy≥
 
bôm≠
.
›tBôs
.
£cKeyTy≥


	)

709 
	#commSecLevñ
 
bôm≠
.
›tBôs
.
£cLevñ


	)

710 
	#≠poötTempMa°î
 
bôm≠
.
›tBôs
.
≠pTempMa°î


	)

711 } 
	tz˛GPCommNŸifiˇti⁄_t
;

716 
uöt8
 
ZGPDCmdID
;

717 
uöt16
 
¥ofûeID
;

718 
uöt16
 
˛u°îID
;

719 
uöt8
 
cmdID
;

720 
uöt8
 
cmdPaylﬂdLí
;

721 
uöt8
 
cmdPaylﬂd
[
ZGP_TRANSLATIONTABLE_ENTRY_MAX_PAYLOAD_LEN
];

722 } 
	tzgpTøn¶©i⁄TabÀUpd©eRec_t
;

727 
uöt32
 
ZGPDSrcID
;

728 
uöt8
 
ZGPDCmdID
;

729 
uöt8
 
ídPoöt
;

730 
uöt16
 
¥ofûeID
;

731 
uöt16
 
˛u°îID
;

732 
uöt8
 
cmdID
;

733 
uöt8
 
cmdPaylﬂdLí
;

734 
uöt8
 
cmdPaylﬂd
[
ZGP_TRANSLATIONTABLE_ENTRY_MAX_PAYLOAD_LEN
];

735 } 
	tzgpTøn¶©i⁄TabÀLi°E¡ry_t
;

739 
addTøn¶©i⁄
:1;

740 
å™¶©i⁄sNum
:3;

741 
ª£rved
:4;

742 } 
	tzgpTøn¶©i⁄TabÀUpd©eO±i⁄sBôs_t
;

746 
zgpTøn¶©i⁄TabÀUpd©eO±i⁄sBôs_t
 
›tBôs
;

747 
uöt8
 
›tByã
;

748 } 
	tzgpTøn¶©i⁄TabÀUpd©eO±i⁄s_t
;

753 
zgpTøn¶©i⁄TabÀUpd©eO±i⁄s_t
 
bôm≠
;

754 
uöt32
 
ZGPDSrcID
;

755 
uöt8
 
ídPoöt
;

756 
zgpTøn¶©i⁄TabÀUpd©eRec_t
 
å™¶©i⁄sSë
[];

759 
	#TT_Upd©eAddTøns
 
bôm≠
.
›tBôs
.
addTøn¶©i⁄


	)

760 
	#TT_Upd©eTønsNum
 
bôm≠
.
›tBôs
.
å™¶©i⁄sNum


	)

761 } 
	tz˛GPTøn¶©i⁄TabÀUpd©e_t
;

766 
uöt8
 
°©us
;

767 
uöt8
 
tŸÆNumE¡rõs
;

768 
uöt8
 
°¨tIndex
;

769 
uöt8
 
cou¡
;

770 
zgpTøn¶©i⁄TabÀLi°E¡ry_t
 
å™sTabÀ
[];

771 } 
	tz˛GPTøn¶©i⁄TabÀRe•⁄£_t
;

776 
uöt8
 
°¨tIndex
;

777 } 
	tz˛GPTøn¶©i⁄Reque°_t
;

782 
fú°ToFwd
:1;

783 
noPaúögFœg
:1;

784 
ª£rved
:6;

785 } 
	tnŸR•O±i⁄sbôs_t
;

790 
nŸR•O±i⁄sbôs_t
 
›tBôs
;

791 
uöt8
 
›tByã
;

792 } 
	tnŸR•O±i⁄s_t
;

797 
nŸR•O±i⁄s_t
 
bôm≠
;

798 
uöt32
 
ZGPDSrcID
;

799 
uöt32
 
ZGPDFømeCou¡î
;

802 
	#noPaúög
 
bôm≠
.
›tBôs
.
noPaúögFœg


	)

803 
	#fú°ToF‹w¨d
 
bôm≠
.
›tBôs
.
fú°ToFwd


	)

804 } 
	tz˛GPNŸifiˇti⁄R•_t
;

809 
addSök
:1;

810 
ªmoveZGPD
:1;

811 
commMode
:2;

812 
zgpdFixed
:1;

813 
macSeqNoC≠
:1;

814 
£cLevñ
:2;

815 
£cKeyTy≥
:3;

816 
fcPª£¡
:1;

817 
keyPª£¡
:1;

818 
ÆüsPª£¡
:1;

819 
fwdRadiusPª£¡
:1;

820 
ª£rved
:1;

821 } 
	t∑úögO±i⁄sbôs_t
;

826 
∑úögO±i⁄sbôs_t
 
›tBôs
;

827 
uöt16
 
›tW‹d
;

828 } 
	t∑úögO±i⁄s_t
;

833 
∑úögO±i⁄s_t
 
bôm≠
;

834 
uöt32
 
ZGPDSrcID
;

835 
uöt8
 
sökIEEEAddr
[
Z_EXTADDR_LEN
];

836 
uöt16
 
sökNwkAddr
;

837 
uöt16
 
sökGroupID
;

838 
uöt8
 
devi˚ID
;

839 
uöt32
 
ZGPDFømeCou¡î
;

840 
uöt8
 
ZGPDKey
[
SEC_KEY_LEN
];

841 
uöt16
 
assig√dAlüs
;

842 
uöt8
 
f‹w¨dögRadius
;

845 
	#∑úögFwdRadiusPª£¡
 
bôm≠
.
›tBôs
.
fwdRadiusPª£¡


	)

846 
	#∑úögAlüsPª£¡
 
bôm≠
.
›tBôs
.
ÆüsPª£¡


	)

847 
	#∑úög£cKeyPª£¡
 
bôm≠
.
›tBôs
.
keyPª£¡


	)

848 
	#∑úög£cFCPª£¡
 
bôm≠
.
›tBôs
.
fcPª£¡


	)

849 
	#∑úögãmpMa°îPª£¡
 
bôm≠
.
›tBôs
.
ãmpMa°îPª£¡


	)

850 
	#∑úögSecKeyTy≥
 
bôm≠
.
›tBôs
.
£cKeyTy≥


	)

851 
	#∑úögSecLevñ
 
bôm≠
.
›tBôs
.
£cLevñ


	)

852 
	#∑úögMacSeqNoC≠
 
bôm≠
.
›tBôs
.
macSeqNoC≠


	)

853 
	#∑úögFixedLoˇti⁄
 
bôm≠
.
›tBôs
.
zgpdFixed


	)

854 
	#∑úögCommMode
 
bôm≠
.
›tBôs
.
commMode


	)

855 
	#∑úögRemoveZGPD
 
bôm≠
.
›tBôs
.
ªmoveZGPD


	)

856 
	#∑úögAddSök
 
bôm≠
.
›tBôs
.
addSök


	)

857 } 
	tz˛GPPaúög_t
;

862 
a˘i⁄
:1;

863 
exôMode
:2;

864 
ch™√lPª£¡
:1;

865 
„edback
:1;

866 
ª£rved
:2;

867 } 
	t¥oxyCommO±i⁄sbôs_t
;

872 
¥oxyCommO±i⁄sbôs_t
 
›tBôs
;

873 
uöt8
 
›tByã
;

874 } 
	t¥oxyCommO±i⁄s_t
;

879 
¥oxyCommO±i⁄s_t
 
bôm≠
;

880 
uöt16
 
commissi⁄ögWödow
;

881 
uöt8
 
ch™√l
;

884 
	#¥oxyCommFìdback
 
bôm≠
.
›tBôs
.
„edback


	)

885 
	#¥oxyCommCh™√lPª£¡
 
bôm≠
.
›tBôs
.
ch™√lPª£¡


	)

886 
	#¥oxyCommExôMode
 
bôm≠
.
›tBôs
.
exôMode


	)

887 
	#¥oxyCommA˘i⁄
 
bôm≠
.
›tBôs
.
a˘i⁄


	)

888 } 
	tz˛GPProxyCommMode_t
;

893 
uöt16
 
ZGPPSh‹tAddr
;

894 
uöt8
 
ZGPPTxCh™
;

895 
uöt32
 
ZGPDSrcID
;

896 
uöt8
 
ZGPDCmdID
;

897 
uöt8
 
∑ylﬂdLí
;

898 
uöt8
 
∑ylﬂd
[];

899 } 
	tz˛GPDRe•⁄£_t
;

904 
z˛GP_SökTabÀE¡ry_t
 
sökTabÀP¨ams
;

905 
uöt8
 
∑úedEPsNum
;

906 
uöt8
 *
pPaúedEPsSë
;

907 } 
	tz˛GPC⁄figuªPaúögCmd_t
;

910 
ZSètus_t
 (*
	tz˛GP_NŸifiˇti⁄CB_t
)–
	tuöt8
 
	tå™sSeqNum
, 
	tz˛GPNŸifiˇti⁄_t
 *
	tpCmd
 );

913 
ZSètus_t
 (*
	tz˛GP_PaúögSórchCB_t
)–
	tuöt8
 
	tå™sSeqNum
, 
	tz˛GPPaúögSórch_t
 *
	tpCmd
 );

916 
ZSètus_t
 (*
	tz˛GP_Tu¬ñSt›CB_t
)–
	tuöt8
 
	tå™sSeqNum
, 
	tz˛GPTu¬ñögSt›_t
 *
	tpCmd
 );

919 
ZSètus_t
 (*
	tz˛GP_Commissi⁄ögNŸifiˇti⁄CB_t
)–
	tuöt8
 
	tå™sSeqNum
, 
	tz˛GPCommNŸifiˇti⁄_t
 *
	tpCmd
 );

922 
ZSètus_t
 (*
	tz˛GP_Tøn¶©i⁄TabÀUpd©eCB_t
)–
	tuöt8
 
	tå™sSeqNum
, 
	tz˛GPTøn¶©i⁄TabÀUpd©e_t
 *
	tpCmd
 );

925 
ZSètus_t
 (*
	tz˛GP_Tøn¶©i⁄TabÀReque°CB_t
)–
	tuöt8
 
	tå™sSeqNum
, 
	tz˛GPTøn¶©i⁄Reque°_t
 *
	tpCmd
 );

928 
ZSètus_t
 (*
	tz˛GP_C⁄figuªPaúögCB_t
)–
	tuöt8
 
	tå™sSeqNum
, 
	tz˛GPC⁄figuªPaúögCmd_t
 *
	tpCmd
);

931 
ZSètus_t
 (*
	tz˛GP_NŸifiˇti⁄Re•⁄£CB_t
)–
	tuöt8
 
	tå™sSeqNum
, 
	tz˛GPNŸifiˇti⁄R•_t
 *
	tpCmd
 );

934 
ZSètus_t
 (*
	tz˛GP_PaúögCB_t
)–
	tuöt8
 
	tå™sSeqNum
, 
	tz˛GPPaúög_t
 *
	tpCmd
 );

937 
ZSètus_t
 (*
	tz˛GP_ProxyCommissi⁄ögModeCB_t
)–
	tuöt8
 
	tå™sSeqNum
, 
	tz˛GPProxyCommMode_t
 *
	tpCmd
 );

940 
ZSètus_t
 (*
	tz˛GP_Re•⁄£CB_t
)–
	tuöt8
 
	tå™sSeqNum
, 
	tz˛GPDRe•⁄£_t
 *
	tpCmd
 );

943 
ZSètus_t
 (*
	tz˛GP_Tøn¶©i⁄TabÀRe•⁄£CB_t
)–
	tuöt8
 
	tå™sSeqNum
, 
	tz˛GPTøn¶©i⁄TabÀRe•⁄£_t
 *
	tpCmd
 );

950 
z˛GP_NŸifiˇti⁄CB_t
 
p‚NŸifiˇti⁄
;

951 
z˛GP_PaúögSórchCB_t
 
p‚PaúögSórch
;

952 
z˛GP_Tu¬ñSt›CB_t
 
p‚Tu¬ñSt›
;

953 
z˛GP_Commissi⁄ögNŸifiˇti⁄CB_t
 
p‚Commissi⁄ögNŸifiˇti⁄
;

954 
z˛GP_Tøn¶©i⁄TabÀUpd©eCB_t
 
p‚Tøn¶©i⁄TabÀUpd©e
;

955 
z˛GP_Tøn¶©i⁄TabÀReque°CB_t
 
p‚Tøn¶©i⁄TabÀReque°
;

956 
z˛GP_C⁄figuªPaúögCB_t
 
p‚C⁄figuªPaúög
;

959 
z˛GP_NŸifiˇti⁄Re•⁄£CB_t
 
p‚NŸifiˇti⁄Re•⁄£
;

960 
z˛GP_PaúögCB_t
 
p‚Paúög
;

961 
z˛GP_ProxyCommissi⁄ögModeCB_t
 
p‚ProxyCommissi⁄ögMode
;

962 
z˛GP_Re•⁄£CB_t
 
p‚Re•⁄£
;

963 
z˛GP_Tøn¶©i⁄TabÀRe•⁄£CB_t
 
p‚Tøn¶©i⁄TabÀRe•⁄£
;

964 } 
	tz˛GP_AµCÆlbacks_t
;

977 
ZSètus_t
 
z˛GP_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛GP_AµCÆlbacks_t
 *
ˇŒbacks
 );

983 
ZSètus_t
 
z˛GP_Síd_NŸifiˇti⁄
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

984 
z˛GPNŸifiˇti⁄_t
 *
pNŸifiˇti⁄
,

985 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

991 
ZSètus_t
 
z˛GP_Síd_PaúögSórch
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

992 
z˛GPPaúögSórch_t
 *
pPaúögSórch
,

993 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

999 
ZSètus_t
 
z˛GP_Síd_Tu¬ñögSt›
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1000 
z˛GPTu¬ñögSt›_t
 *
pTu¬ñögSt›
,

1001 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1007 
ZSètus_t
 
z˛GP_Síd_Commissi⁄ögNŸifiˇti⁄
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1008 
z˛GPCommNŸifiˇti⁄_t
 *
pCommNŸif
,

1009 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1015 
ZSètus_t
 
z˛GP_Síd_Tøn¶©i⁄TabÀUpd©e
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1016 
z˛GPTøn¶©i⁄TabÀUpd©e_t
 *
pTønsTabÀUpd©e
,

1017 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1023 
ZSètus_t
 
z˛GP_Síd_Tøn¶©i⁄TabÀReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1024 
z˛GPTøn¶©i⁄Reque°_t
 *
pTønsTabÀReq
,

1025 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1031 
ZSètus_t
 
z˛GP_Síd_C⁄figuªPaúög
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1032 
z˛GPC⁄figuªPaúögCmd_t
 *
pC⁄figPaúög
,

1033 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1039 
ZSètus_t
 
z˛GP_Síd_NŸifiˇti⁄Re•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1040 
z˛GPNŸifiˇti⁄R•_t
 *
pNŸR•
,

1041 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1047 
ZSètus_t
 
z˛GP_Síd_Paúög
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1048 
z˛GPPaúög_t
 *
pPaúög
,

1049 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1055 
ZSètus_t
 
z˛GP_Síd_ProxyCommissi⁄ögMode
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1056 
z˛GPProxyCommMode_t
 *
pProxyCommMode
,

1057 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1063 
ZSètus_t
 
z˛GP_Síd_Re•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1064 
z˛GPDRe•⁄£_t
 *
pR•
,

1065 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1071 
ZSètus_t
 
z˛GP_Síd_Tøn¶©i⁄TabÀRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1072 
z˛GPTøn¶©i⁄TabÀRe•⁄£_t
 *
pTønsTblR•
,

1073 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1079 
ZSètus_t
 
z˛GP_Síd_Tøn¶©edComm™d
–
afAddrTy≥_t
 *
d°Addr
,

1080 
zgpTøn¶©i⁄TabÀLi°E¡ry_t
 *
pTønsTblE¡ry
,

1081 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1083 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_hvac.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"z˛.h
"

47 
	~"z˛_gíîÆ.h
"

48 
	~"z˛_hvac.h
"

50 #i‡
deföed
 ( 
INTER_PAN
 )

51 
	~"°ub_≠s.h
"

65 
	sz˛HVACCBRec


67 
z˛HVACCBRec
 *
	m√xt
;

68 
uöt8
 
	mídpoöt
;

69 
z˛HVAC_AµCÆlbacks_t
 *
	mCBs
;

70 } 
	tz˛HVACCBRec_t
;

83 
z˛HVACCBRec_t
 *
	gz˛HVACCBs
 = (z˛HVACCBRec_à*)
NULL
;

84 
uöt8
 
	gz˛HVACPlugöRegi°ed
 = 
FALSE
;

90 
ZSètus_t
 
z˛HVAC_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

91 
ZSètus_t
 
z˛HVAC_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

92 
z˛HVAC_AµCÆlbacks_t
 *
z˛HVAC_FödCÆlbacks
–
uöt8
 
ídpoöt
 );

94 
ZSètus_t
 
z˛HVAC_Pro˚ssInPumpCmds
–
z˛Incomög_t
 *
pInMsg
 );

95 
ZSètus_t
 
z˛HVAC_Pro˚ssInThîmo°©Cmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛HVAC_AµCÆlbacks_t
 *
pCBs
 );

107 
ZSètus_t
 
	$z˛HVAC_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛HVAC_AµCÆlbacks_t
 *
ˇŒbacks
 )

109 
z˛HVACCBRec_t
 *
pNewIãm
;

110 
z˛HVACCBRec_t
 *
pLo›
;

113 i‡–!
z˛HVACPlugöRegi°ed
 )

115 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL
,

116 
ZCL_CLUSTER_ID_HAVC_USER_INTERFACE_CONFIG
,

117 
z˛HVAC_HdlIncomög
 );

118 
z˛HVACPlugöRegi°ed
 = 
TRUE
;

122 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛HVACCBRec_t
 ) );

123 i‡–
pNewIãm
 =
NULL
 )

124  (
ZMemEº‹
);

126 
pNewIãm
->
√xt
 = (
z˛HVACCBRec_t
 *)
NULL
;

127 
pNewIãm
->
ídpoöt
 =Éndpoint;

128 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

131 i‡–
z˛HVACCBs
 =
NULL
 )

133 
z˛HVACCBs
 = 
pNewIãm
;

138 
pLo›
 = 
z˛HVACCBs
;

139  
pLo›
->
√xt
 !
NULL
 )

140 
pLo›
 =ÖLo›->
√xt
;

143 
pLo›
->
√xt
 = 
pNewIãm
;

145  ( 
ZSuc˚ss
 );

146 
	}
}

162 
ZSètus_t
 
	$z˛HVAC_SídSëpoötRai£Lowî
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

163 
uöt8
 
mode
, 
öt8
 
amou¡
,

164 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

166 
uöt8
 
buf
[2];

168 
buf
[0] = 
mode
;

169 
buf
[1] = 
amou¡
;

171  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_HAVC_THERMOSTAT
,

172 
COMMAND_THERMOSTAT_SETPOINT_RAISE_LOWER
, 
TRUE
,

173 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

174 
	}
}

185 
z˛HVAC_AµCÆlbacks_t
 *
	$z˛HVAC_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

187 
z˛HVACCBRec_t
 *
pCBs
;

188 
pCBs
 = 
z˛HVACCBs
;

189  
pCBs
 )

191 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

192  ( 
pCBs
->
CBs
 );

193 
pCBs
 =ÖCBs->
√xt
;

195  ( (
z˛HVAC_AµCÆlbacks_t
 *)
NULL
 );

196 
	}
}

209 
ZSètus_t
 
	$z˛HVAC_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

211 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

213 #i‡
	`deföed
 ( 
INTER_PAN
 )

214 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

215  ( 
°©
 );

217 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

220 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

222 
°©
 = 
	`z˛HVAC_HdlInS≥cificComm™ds
–
pInMsg
 );

227 
°©
 = 
ZFaûuª
;

233 
°©
 = 
ZFaûuª
;

235  ( 
°©
 );

236 
	}
}

248 
ZSètus_t
 
	$z˛HVAC_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

250 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

251 
z˛HVAC_AµCÆlbacks_t
 *
pCBs
;

254 
pCBs
 = (*)
	`z˛HVAC_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

255 i‡–
pCBs
 =
NULL
 )

256  ( 
ZFaûuª
 );

258  
pInMsg
->
msg
->
˛u°îId
 )

260 
ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL
:

261 
°©
 = 
	`z˛HVAC_Pro˚ssInPumpCmds
–
pInMsg
 );

264 
ZCL_CLUSTER_ID_HAVC_THERMOSTAT
:

265 
°©
 = 
	`z˛HVAC_Pro˚ssInThîmo°©Cmds
–
pInMsg
, 
pCBs
 );

269 
°©
 = 
ZFaûuª
;

273  ( 
°©
 );

274 
	}
}

286 
ZSètus_t
 
	$z˛HVAC_Pro˚ssInPumpCmds
–
z˛Incomög_t
 *
pInMsg
 )

288 
ZSètus_t
 
°©
 = 
ZFaûuª
;

293 ()
pInMsg
;

294 i‡–
°©
 !
ZFaûuª
 )

295 
	`z˛HVAC_FödCÆlbacks
( 0 );

297  ( 
°©
 );

298 
	}
}

310 
ZSètus_t
 
	$z˛HVAC_Pro˚ssInThîmo°©Cmds
–
z˛Incomög_t
 *
pInMsg
,

311 
z˛HVAC_AµCÆlbacks_t
 *
pCBs
 )

313 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_THERMOSTAT_SETPOINT_RAISE_LOWER
 )

314  (
ZFaûuª
);

316 i‡–
pCBs
->
p‚HVAC_SëpoötRai£Lowî
 )

318 
z˛CmdThîmo°©SëpoötRai£LowîPaylﬂd_t
 
cmd
;

320 
cmd
.
mode
 = 
pInMsg
->
pD©a
[0];

321 
cmd
.
amou¡
 = 
pInMsg
->
pD©a
[1];

323 
pCBs
->
	`p‚HVAC_SëpoötRai£Lowî
–&
cmd
 );

326  ( 
ZSuc˚ss
 );

327 
	}
}

	@Components/stack/zcl/zcl_hvac.h

40 #i‚de‡
ZCL_HVAC_H


41 
	#ZCL_HVAC_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

61 
	#ATTRID_HVAC_PUMP_MAX_PRESSURE
 0x0000

	)

62 
	#ATTRID_HVAC_PUMP_MAX_SPEED
 0x0001

	)

63 
	#ATTRID_HVAC_PUMP_MAX_FLOW
 0x0002

	)

64 
	#ATTRID_HVAC_PUMP_MIN_CONST_PRESSURE
 0x0003

	)

65 
	#ATTRID_HVAC_PUMP_MAX_CONST_PRESSURE
 0x0004

	)

66 
	#ATTRID_HVAC_PUMP_MIN_COMP_PRESSURE
 0x0005

	)

67 
	#ATTRID_HVAC_PUMP_MAX_COMP_PRESSURE
 0x0006

	)

68 
	#ATTRID_HVAC_PUMP_MIN_CONST_SPEED
 0x0007

	)

69 
	#ATTRID_HVAC_PUMP_MAX_CONST_SPEED
 0x0008

	)

70 
	#ATTRID_HVAC_PUMP_MIN_CONST_FLOW
 0x0009

	)

71 
	#ATTRID_HVAC_PUMP_MAX_CONST_FLOW
 0x000A

	)

72 
	#ATTRID_HVAC_PUMP_MIN_CONST_TEMP
 0x000B

	)

73 
	#ATTRID_HVAC_PUMP_MAX_CONST_TEMP
 0x000C

	)

75 
	#ATTRID_HVAC_PUMP_STATUS
 0x0010

	)

76 
	#ATTRID_HVAC_PUMP_EFECTIVE_OPERATION_MODE
 0x0011

	)

77 
	#ATTRID_HVAC_PUMP_EFFECTIVE_CONTROL_MODE
 0x0012

	)

78 
	#ATTRID_HVAC_PUMP_CAPACITY
 0x0013

	)

79 
	#ATTRID_HVAC_PUMP_SPEED
 0x0014

	)

80 
	#ATTRID_HVAC_PUMP_LIFETIME_RUNNING_HOURS
 0x0015

	)

81 
	#ATTRID_HVAC_PUMP_POWER
 0x0016

	)

82 
	#ATTRID_HVAC_LIFETIME_ENERGY_CONSUMED
 0x0017

	)

84 
	#HVAC_PUMP_DEVICE_FAULT
 0x0000

	)

85 
	#HVAC_PUMP_SUPPLY_FAULT
 0x0001

	)

86 
	#HVAC_PUMP_SPEED_LOW
 0x0002

	)

87 
	#HVAC_PUMP_SPEED_HIGH
 0x0003

	)

88 
	#HVAC_PUMP_LOCAL_OVERRIDE
 0x0004

	)

89 
	#HVAC_PUMP_RUNNING
 0x0005

	)

90 
	#HVAC_PUMP_REMOTE_PRESSURE
 0x0006

	)

91 
	#HVAC_PUMP_REMOTE_FLOW
 0x0007

	)

92 
	#HVAC_PUMP_REMOTE_TEMPERATURE
 0x0008

	)

94 
	#ATTRID_HVAC_PUMP_OPERATION_MODE
 0x0020

	)

95 
	#ATTRID_HVAC_PUMP_CONTROL_MODE
 0x0021

	)

96 
	#ATTRID_HVAC_PUMP_ALARM_MASK
 0x0022

	)

100 
	#HVAC_PUMP_OPERATION_MODE_NORMAL
 0x00

	)

101 
	#HVAC_PUMP_OPERATION_MODE_MINIMUM
 0x01

	)

102 
	#HVAC_PUMP_OPERATION_MODE_MAXIMUM
 0x02

	)

103 
	#HVAC_PUMP_OPERATION_MODE_LOCAL
 0x03

	)

105 
	#HVAC_PUMP_CONTROL_MODE_CONSTANT_SPEED
 0x00

	)

106 
	#HVAC_PUMP_CONTROL_MODE_CONSTANT_PRESSURE
 0x01

	)

107 
	#HVAC_PUMP_CONTROL_MODE_PR0PORTIONAL_PRESSURE
 0x02

	)

108 
	#HVAC_PUMP_CONTROL_MODE_CONSTANT_FLOW
 0x03

	)

109 
	#HVAC_PUMP_CONTROL_MODE_CONSTANT_TEMPERATURE
 0x05

	)

110 
	#HVAC_PUMP_CONTROL_MODE_CONSTANT_AUTOMATIC
 0x07

	)

112 
	#HVAC_PUMP_SUPPLY_VOLTAGE_TOO_LOW
 0x0001

	)

113 
	#HVAC_PUMP_SUPPLY_VOLTAGE_TOO_HIGH
 0x0002

	)

114 
	#HVAC_PUMP_POWER_MISSING_PHASE
 0x0004

	)

115 
	#HVAC_PUMP_SYSTEM_PRESSURE_TOO_LOW
 0x0008

	)

116 
	#HVAC_PUMP_SYSTEM_PRESSURE_TOO_HIGH
 0x0010

	)

117 
	#HVAC_PUMP_DRY_RUNNING
 0x0020

	)

118 
	#HVAC_PUMP_MOTOR_TEMPERATURE_TOO_HIGH
 0x0040

	)

119 
	#HVAC_PUMP_MOTOR_HAS_FATAL_FAILURE
 0x0080

	)

120 
	#HVAC_PUMP_ELECTRONIC_TEMPERATURE_TOO_HIGH
 0x0100

	)

121 
	#HVAC_PUMP_BLOCKED
 0x0200

	)

122 
	#HVAC_PUMP_SENSOR_FAILURE
 0x0400

	)

123 
	#HVAC_PUMP_ELECTRONIC_NON_FATAL_FAILURE
 0x0800

	)

124 
	#HVAC_PUMP_ELECTRONIC_FATAL_FAILURE
 0x1000

	)

125 
	#HVAC_PUMP_GENERAL_FAULT
 0x2000

	)

136 
	#ATTRID_HVAC_THERMOSTAT_LOCAL_TEMPERATURE
 0x0000

	)

137 
	#ATTRID_HVAC_THERMOSTAT_OUTDOOR_TEMPERATURE
 0x0001

	)

138 
	#ATTRID_HVAC_THERMOSTAT_OCCUPANCY
 0x0002

	)

139 
	#ATTRID_HVAC_THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT
 0x0003

	)

140 
	#ATTRID_HVAC_THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT
 0x0004

	)

141 
	#ATTRID_HVAC_THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT
 0x0005

	)

142 
	#ATTRID_HVAC_THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT
 0x0006

	)

143 
	#ATTRID_HVAC_THERMOSTAT_PI_COOLING_DEMAND
 0x0007

	)

144 
	#ATTRID_HVAC_THERMOSTAT_PI_HEATING_DEMAND
 0x0008

	)

147 
	#ATTRID_HVAC_THERMOSTAT_LOCAL_TEMP_CALIBRATION
 0x0010

	)

148 
	#ATTRID_HVAC_THERMOSTAT_OCCUPIED_COOLING_SETPOINT
 0x0011

	)

149 
	#ATTRID_HVAC_THERMOSTAT_OCCUPIED_HEATING_SETPOINT
 0x0012

	)

150 
	#ATTRID_HVAC_THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT
 0x0013

	)

151 
	#ATTRID_HVAC_THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT
 0x0014

	)

152 
	#ATTRID_HVAC_THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT
 0x0015

	)

153 
	#ATTRID_HVAC_THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT
 0x0016

	)

154 
	#ATTRID_HVAC_THERMOSTAT_MIN_COOL_SETPOINT_LIMIT
 0x0017

	)

155 
	#ATTRID_HVAC_THERMOSTAT_MAX_COOL_SETPOINT_LIMIT
 0x0018

	)

156 
	#ATTRID_HVAC_THERMOSTAT_MIN_SETPOINT_DEAD_BAND
 0x0019

	)

157 
	#ATTRID_HVAC_THERMOSTAT_REMOTE_SENSING
 0x001A

	)

158 
	#ATTRID_HVAC_THERMOSTAT_CTRL_SEQ_OF_OPER
 0x001B

	)

159 
	#ATTRID_HVAC_THERMOSTAT_SYSTEM_MODE
 0x001C

	)

160 
	#ATTRID_HVAC_THERMOSTAT_ALAM_MASK
 0x001D

	)

162 
	#HVAC_THERMOSTAT_REMOTE_SENSING_LOCAL_TEMPERATURE
 0x0001

	)

163 
	#HVAC_THERMOSTAT_REMOTE_SENSING_OUTDOOR_TEMPERATURE
 0x0002

	)

164 
	#HVAC_THERMOSTAT_REMOTE_SENSING_OCCUPANCY
 0x0004

	)

166 
	#HVAC_THERMOSTAT_CTRL_SEQ_OF_OPER_COOLING_ONLY
 0x00

	)

167 
	#HVAC_THERMOSTAT_CTRL_SEQ_OF_OPER_COOLING_WITH_REHEAT
 0x01

	)

168 
	#HVAC_THERMOSTAT_CTRL_SEQ_OF_OPER_HEATING_ONLY
 0x02

	)

169 
	#HVAC_THERMOSTAT_CTRL_SEQ_OF_OPER_HEATING_WITH_REHEAT
 0x03

	)

170 
	#HVAC_THERMOSTAT_CTRL_SEQ_OF_OPER_COOLING_HEATING
 0x04

	)

171 
	#HVAC_THERMOSTAT_CTRL_SEQ_OF_OPER_COOLING_HEATING_WITH_REHEAT
 0x05

	)

173 
	#HVAC_THERMOSTAT_SYSTEM_MODE_OFF
 0x00

	)

174 
	#HVAC_THERMOSTAT_SYSTEM_MODE_AUTO
 0x01

	)

175 
	#HVAC_THERMOSTAT_SYSTEM_MODE_COOL
 0x03

	)

176 
	#HVAC_THERMOSTAT_SYSTEM_MODE_HEAT
 0x04

	)

177 
	#HVAC_THERMOSTAT_SYSTEM_MODE_EMERGENCY_HEATING
 0x05

	)

178 
	#HVAC_THERMOSTAT_SYSTEM_MODE_PRECOOLING
 0x06

	)

179 
	#HVAC_THERMOSTAT_SYSTEM_MODE_FAN_ONLY
 0x07

	)

181 
	#HVAC_THERMOSTAT_INITIALIZATION_FAILURE
 0x01

	)

182 
	#HVAC_THERMOSTAT_HARDWARE_FAILURE
 0x02

	)

183 
	#HVAC_THERMOSTAT_SELF_CALIBRATION_FAILURE
 0x03

	)

186 
	#COMMAND_THERMOSTAT_SETPOINT_RAISE_LOWER
 0x00

	)

189 
	#HVAC_THERMOSTAT_MODE_HEAT
 0x00

	)

190 
	#HVAC_THERMOSTAT_MODE_COOL
 0x01

	)

191 
	#HVAC_THERMOSTAT_MODE_BOTH
 0x02

	)

197 
	#ATTRID_HVAC_FAN_CTRL_FAN_MODE
 0x0000

	)

198 
	#ATTRID_HVAC_FAN_CTRL_FAN_SEQUENCE
 0x0001

	)

200 
	#HVAC_FAN_CTRL_FAN_MODE_OFF
 0x00

	)

201 
	#HVAC_FAN_CTRL_FAN_MODE_LOW
 0x01

	)

202 
	#HVAC_FAN_CTRL_FAN_MODE_MEDIUM
 0x02

	)

203 
	#HVAC_FAN_CTRL_FAN_MODE_HIGH
 0x03

	)

204 
	#HVAC_FAN_CTRL_FAN_MODE_ON
 0x04

	)

205 
	#HVAC_FAN_CTRL_FAN_MODE_AUTO
 0x05

	)

206 
	#HVAC_FAN_CTRL_FAN_MODE_SMART
 0x06

	)

208 
	#HVAC_FAN_CTRL_FAN_MODE_SEQ_LOW_MED_HI
 0x00

	)

209 
	#HVAC_FAN_CTRL_FAN_MODE_SEQ_LOW_HI
 0x01

	)

210 
	#HVAC_FAN_CTRL_FAN_MODE_SEQ_LOW_MED_HI_AUTO
 0x02

	)

211 
	#HVAC_FAN_CTRL_FAN_MODE_SEQ_LOW_HI_AUTO
 0x03

	)

212 
	#HVAC_FAN_CTRL_FAN_MODE_SEQ_ON_AUTO
 0x04

	)

218 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_RELATIVE_HUMIDITY
 0x0000

	)

219 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_DEHUMID_COOLING
 0x0001

	)

222 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_RHDEHUMID_SETPOINT
 0x0010

	)

223 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_RELATIVE_HUMIDITY_MODE
 0x0011

	)

224 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_DEHUMID_LOCKOUT
 0x0012

	)

225 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_DEHUMID_HYSTERESIS
 0x0013

	)

226 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_DEHUMID_MAX_COOL
 0x0014

	)

227 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_RELATIVE_HUMIDITY_DISPLAY
 0x0015

	)

229 
	#HVAC_DEHUMIDIFICATION_CTRL_RELATIVE_HUMIDITY_MEASURED_LOCALLY
 0x00

	)

230 
	#HVAC_DEHUMIDIFICATION_CTRL_RELATIVE_HUMIDITY_UPDATED_OVER_NET
 0x00

	)

232 
	#HVAC_DEHUMIDIFICATION_CTRL_DEHIMID_NOT_ALLOWED
 0x00

	)

233 
	#HVAC_DEHUMIDIFICATION_CTRL_DEHIMID_ALLOWED
 0x01

	)

235 
	#HVAC_DEHUMIDIFICATION_CTRL_RELATIVE_HUMIDITY_NOT_DISPLAYED
 0x00

	)

236 
	#HVAC_DEHUMIDIFICATION_CTRL_RELATIVE_HUMIDITY_DISPLAYED
 0x01

	)

242 
	#ATTRID_HVAC_THERMOSTAT_UI_CONFIG_TEMP_DISPLAY_MODE
 0x0000

	)

243 
	#ATTRID_HVAC_THERMOSTAT_UI_CONFIG_KEYPAD_LOCKOUT
 0x0001

	)

245 
	#ATTRID_HVAC_THERMOSTAT_UI_CONFIG_DISPLAY_MODE_IN_C
 0x00

	)

246 
	#ATTRID_HVAC_THERMOSTAT_UI_CONFIG_DISPLAY_MODE_IN_F
 0x01

	)

249 
	#ATTRID_HVAC_THERMOSTAT_UI_KEYPAD_NO_LOCOUT
 0x00

	)

250 
	#ATTRID_HVAC_THERMOSTAT_UI_KEYPAD_LEVEL1_LOCOUT
 0x01

	)

251 
	#ATTRID_HVAC_THERMOSTAT_UI_KEYPAD_LEVEL2_LOCOUT
 0x02

	)

252 
	#ATTRID_HVAC_THERMOSTAT_UI_KEYPAD_LEVEL3_LOCOUT
 0x03

	)

253 
	#ATTRID_HVAC_THERMOSTAT_UI_KEYPAD_LEVEL4_LOCOUT
 0x04

	)

254 
	#ATTRID_HVAC_THERMOSTAT_UI_KEYPAD_LEVEL5_LOCOUT
 0x05

	)

273 
uöt8
 
mode
;

274 
öt8
 
amou¡
;

275 } 
	tz˛CmdThîmo°©SëpoötRai£LowîPaylﬂd_t
;

280 (*
z˛HVAC_SëpoötRai£Lowî_t
)–
	tz˛CmdThîmo°©SëpoötRai£LowîPaylﬂd_t
 *
	tpCmd
 );

286 
z˛HVAC_SëpoötRai£Lowî_t
 
p‚HVAC_SëpoötRai£Lowî
;

287 } 
	tz˛HVAC_AµCÆlbacks_t
;

301 
ZSètus_t
 
z˛HVAC_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛HVAC_AµCÆlbacks_t
 *
ˇŒbacks
 );

306 
ZSètus_t
 
z˛HVAC_SídSëpoötRai£Lowî
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

307 
uöt8
 
mode
, 
öt8
 
amou¡
,

308 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

313 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_key_establish.c

46 
	~"ZComDef.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Nv.h
"

49 
	~"z˛.h
"

50 
	~"ZDAµ.h
"

51 
	~"s•_hash.h
"

52 
	~"AddrMgr.h
"

53 
	~"ZDSecMgr.h
"

54 
	~"APSMEDE.h
"

55 
	~"ecˇpi.h
"

56 
	~"z˛_key_e°ablish.h
"

57 
	~"DebugTø˚.h
"

58 
	~"£.h
"

60 #i‡
deföed
 ( 
INTER_PAN
 )

61 
	~"°ub_≠s.h
"

72 
	#KEY_ESTABLISHMENT_DEVICE_VERSION
 0

	)

73 
	#KEY_ESTABLISHMENT_FLAGS
 0

	)

74 
	#KEY_ESTABLISHMENT_SUITE
 1

75 
	#KEY_ESTABLISHMENT_AVG_TIMEOUT
 ( 2 * ( 
ZCL_KEY_ESTABLISHMENT_KEY_GENERATE_TIMEOUT
 + \

76 
ZCL_KEY_ESTABLISHMENT_MAC_GENERATE_TIMEOUT
 ) )

	)

78 
	#ZCL_KEY_ESTABLISH_DEVICE_VERSION
 0

	)

79 
	#ZCL_KEY_ESTABLISH_FLAGS
 0

	)

81 
	#INVALID_TASK_ID
 0xFF

	)

93 #i‡
deföed
 (
DEBUG_STATIC_ECC
)

94 
uöt8
 
	gpublic1
[22] = {

99 
uöt8
 
	g¥iv©e1
[21] = {

104 
uöt8
 
	gpublic2
[22] = {

109 
uöt8
 
	g¥iv©e2
[21] = {

117 
z˛O±i⁄Rec_t
 
	gz˛KeyE°ablish_O±i⁄s
[1] =

120 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

121 –
AF_ACK_REQUEST
 ),

125 
YõldFunc
 *
	gz˛KeyE°ablish_YõldFunc
 = 
NULL
;

126 
uöt8
 
	gz˛KeyE°ablish_YõldLevñ
 = 0;

128 #i‡
deföed
 (
NWK_AUTO_POLL
)

129 
uöt16
 
	gz˛SavedPﬁlR©e
 = 
POLL_RATE
;

135 
uöt8
* 
SSP_MemCpyRevî£
–uöt8* 
d°
, uöt8* 
§c
, 
Àn
 );

140 #i‡
deföed
(
ZCL_KEY_ESTABLISH
)

141 
uöt8
 
	gz˛_KeyE°ablishmít_TaskID
;

149 
	#ZCL_KEY_ESTABLISH_MAX_INCLUSTERS
 1

	)

150 c⁄° 
cId_t
 
	gz˛KeyE°ablish_InClu°îLi°
[
ZCL_KEY_ESTABLISH_MAX_INCLUSTERS
] =

152 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

155 
	#ZCL_KEY_ESTABLISH_MAX_OUTCLUSTERS
 1

	)

156 c⁄° 
cId_t
 
	gz˛KeyE°ablish_OutClu°îLi°
[
ZCL_KEY_ESTABLISH_MAX_OUTCLUSTERS
] =

158 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

161 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gz˛KeyE°ablish_Sim∂eDesc
 =

163 
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

164 
ZCL_SE_PROFILE_ID
,

165 
ZCL_SE_DEVICEID_PHYSICAL
,

166 
ZCL_KEY_ESTABLISH_DEVICE_VERSION
,

167 
ZCL_KEY_ESTABLISH_FLAGS
,

168 
ZCL_KEY_ESTABLISH_MAX_INCLUSTERS
,

169 (
cId_t
 *)
z˛KeyE°ablish_InClu°îLi°
,

170 
ZCL_KEY_ESTABLISH_MAX_OUTCLUSTERS
,

171 (
cId_t
 *)
z˛KeyE°ablish_OutClu°îLi°


174 #i‡
deföed
 (
ZCL_KEY_ESTABLISH
)

176 
ídPoötDesc_t
 
	gz˛KeyE°ablish_Ep
 =

178 
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

179 &
z˛_TaskID
,

180 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
z˛KeyE°ablish_Sim∂eDesc
,

181 (
afNëw‹kL©ícyReq_t
)0

186 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
)

187 
uöt8
 
	gz˛KeyE°ablishPlugöRegi°ed
 = 
FALSE
;

189 
z˛KeyE°ablishRec_t
 
	gkeyE°ablishRec
[
MAX_KEY_ESTABLISHMENT_REC_ENTRY
];

194 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

196 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

199 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInCmd_InôüãKeyE°ablish
–
z˛Incomög_t
 *
pInMsg
 );

200 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInCmd_InôüãKeyE°ablishR•
–
z˛Incomög_t
 *
pInMsg
 );

201 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInCmd_EphemîÆD©aReq
–
z˛Incomög_t
 *
pInMsg
 );

202 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInCmd_EphemîÆD©aR•
–
z˛Incomög_t
 *
pInMsg
 );

203 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInCmd_C⁄fúmKey
–
z˛Incomög_t
 *
pInMsg
 );

204 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInCmd_C⁄fúmKeyR•
–
z˛Incomög_t
 *
pInMsg
 );

205 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInCmd_Tîmö©eKeyE°ablish
–
z˛Incomög_t
 *
pInMsg
 );

208 
ZSètus_t
 
z˛GíîÆ_InôüãKeyE°ablish_Cmd_CÆcuœãKey
();

209 
ZSètus_t
 
z˛GíîÆ_InôüãKeyE°ablish_R•_CÆcuœãKey
();

212 
z˛GíîÆ_InôKeyE°ablishRecTabÀ
( );

213 
uöt8
 
z˛GíîÆ_GëKeyE°ablishRecIndex
–
uöt16
 
∑π√rAddªss
 );

214 
uöt8
 
z˛GíîÆ_GëKeyE°ablishRecIndex_Sèã
–
KeyE°ablishSèã_t
 
°©e
 );

215 
uöt8
 
z˛GíîÆ_AddKeyE°ablishRec
–
afAddrTy≥_t
 *
addr
 );

216 
z˛GíîÆ_AgeKeyE°ablishRec
( );

217 
z˛GíîÆ_Re£tKeyE°ablishRec
–
uöt8
 
ödex
 );

220 
z˛GíîÆ_KeyE°ablishmít_GëR™dom
(*
buf„r
, 
Àn
);

221 
z˛GíîÆ_KeyE°ablishmít_HashFunc
(*
dige°
, 
Àn
, *
d©a
);

224 
z˛GíîÆ_KeyE°ablishmít_KeyDîiveFun˘i⁄
–
uöt8
 *
zD©a
,

225 
uöt8
 
keyBôLí
,

226 
uöt8
 *
keyBô
 );

228 
ZSètus_t
 
z˛GíîÆ_KeyE°ablishmít_Gíî©eMAC
(
uöt8
 
ªcIndex
,

229 
uöt8
 
ifMACu
,

230 
uöt8
 *
MAC
);

242 
	$z˛GíîÆ_KeyE°ablish_Inô
–
uöt8
 
èsk_id
 )

244 
z˛_KeyE°ablishmít_TaskID
 = 
èsk_id
;

247 
	`afRegi°î
–&
z˛KeyE°ablish_Ep
 );

249 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
, 1,

250 
z˛KeyE°ablish_O±i⁄s
 );

253 i‡–!
z˛KeyE°ablishPlugöRegi°ed
 )

255 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

256 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

257 
z˛GíîÆ_KeyE°ablish_HdlIncomög
 );

258 
z˛KeyE°ablishPlugöRegi°ed
 = 
TRUE
;

262 
	`z˛GíîÆ_InôKeyE°ablishRecTabÀ
();

263 
	}
}

275 
uöt16
 
	$z˛KeyE°ablish_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

277 
afIncomögMSGPackë_t
 *
MSGpkt
;

279 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

281  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
èsk_id
 )) )

283  
MSGpkt
->
hdr
.
evít
 )

290 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

294  (
evíts
 ^ 
SYS_EVENT_MSG
);

297 i‡–
evíts
 & 
KEY_ESTABLISHMENT_REC_AGING_EVT
 )

300 
	`z˛GíîÆ_AgeKeyE°ablishRec
();

302  ( 
evíts
 ^ 
KEY_ESTABLISHMENT_REC_AGING_EVT
 );

305 i‡–
evíts
 & 
KEY_ESTABLISHMENT_CMD_PROCESS_EVT
 )

307 
	`z˛GíîÆ_InôüãKeyE°ablish_Cmd_CÆcuœãKey
();

309  ( 
evíts
 ^ 
KEY_ESTABLISHMENT_CMD_PROCESS_EVT
 );

312 i‡–
evíts
 & 
KEY_ESTABLISHMENT_RSP_PROCESS_EVT
 )

314 
	`z˛GíîÆ_InôüãKeyE°ablish_R•_CÆcuœãKey
();

315  ( 
evíts
 ^ 
KEY_ESTABLISHMENT_RSP_PROCESS_EVT
 );

319 
	}
}

332 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
uöt8
 
≠pTaskID
,

333 
afAddrTy≥_t
 *
∑π√rAddr
,

334 
uöt8
 
£qNum
)

336 
uöt8
 *
im∂icôCît
, 
ödex
;

339 
z˛_SeqNum
 = 
£qNum
;

342 
ödex
 = 
	`z˛GíîÆ_AddKeyE°ablishRec
–
∑π√rAddr
 );

344 if–
ödex
 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

346 
keyE°ablishRec
[
ödex
].
rﬁe
 = 
KEY_ESTABLISHMENT_INITIATOR
;

349 
keyE°ablishRec
[
ödex
].
≠pTaskID
 =áppTaskID;

353  
ZFaûuª
;

357 
	`ZSE_ECCGíî©eKey
––*)
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
,

358 –*)
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
,

359 
z˛GíîÆ_KeyE°ablishmít_GëR™dom
,

360 
z˛KeyE°ablish_YõldFunc
, 
z˛KeyE°ablish_YõldLevñ
);

362 #i‡
	`deföed
 (
DEBUG_STATIC_ECC
)

365 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
, 
¥iv©e1
, 21 );

366 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
, 
public1
, 22 );

369 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_InôüãPídög
;

371 i‡((
im∂icôCît
 = 
	`oßl_mem_Æloc
(
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
)Ë=
NULL
)

373  
ZCL_STATUS_SOFTWARE_FAILURE
;

375 
	`oßl_nv_ªad
(
ZCD_NV_IMPLICIT_CERTIFICATE
, 0, 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
, 
im∂icôCît
);

378 
	`z˛GíîÆ_KeyE°ablish_Síd_InôüãKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

379 
∑π√rAddr
,

380 
KEY_ESTABLISHMENT_SUITE
,

381 
ZCL_KEY_ESTABLISHMENT_EKEY_GENERATE_TIMEOUT
,

382 
ZCL_KEY_ESTABLISHMENT_MAC_GENERATE_TIMEOUT
 + 
ZCL_KEY_ESTABLISHMENT_KEY_GENERATE_TIMEOUT
,

383 
im∂icôCît
, 
TRUE
, 
z˛_SeqNum
++ );

388 
	`oßl_°¨t_ªlﬂd_timî
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_REC_AGING_EVT
,

389 
KEY_ESTABLISHMENT_REC_AGING_INTERVAL
 );

391 
	`oßl_mem_‰ì
(
im∂icôCît
);

393 #i‡
	`deföed
 (
NWK_AUTO_POLL
)

395 
z˛SavedPﬁlR©e
 = 
zgPﬁlR©e
;

396 
	`NLME_SëPﬁlR©e
(
ZCL_KEY_ESTABLISH_POLL_RATE
);

399  
ZSuc˚ss
;

400 
	}
}

418 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_Síd_InôüãKeyE°ablishmít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

419 
uöt16
 
keyE°ablishmítSuôe
,

420 
uöt8
 
keyGíî©eTime
,

421 
uöt8
 
macGíî©eTime
,

422 
uöt8
 *
˚πifiˇã
,

423 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

425 
uöt8
 *
buf
;

426 
uöt8
 *
pBuf
;

427 
uöt8
 
°©us
;

428 
uöt8
 
bufLí
;

430 ()
§cEP
;

433 
bufLí
 = 2 + 1 + 1 + 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
;

435 i‡((
buf
 = 
	`oßl_mem_Æloc
(
bufLí
)Ë=
NULL
)

437  
ZMemEº‹
;

440 
pBuf
 = 
buf
;

442 *
pBuf
++ = 
	`LO_UINT16
–
keyE°ablishmítSuôe
 );

443 *
pBuf
++ = 
	`HI_UINT16
–
keyE°ablishmítSuôe
 );

444 *
pBuf
++ = 
keyGíî©eTime
;

445 *
pBuf
++ = 
macGíî©eTime
;

446 
	`oßl_mem˝y
–
pBuf
, 
˚πifiˇã
, 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
 );

448 
°©us
 = 
	`z˛_SídComm™d
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
, 
d°Addr
,

449 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

450 
COMMAND_INITIATE_KEY_ESTABLISHMENT
, 
TRUE
,

451 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
,

452 0, 
£qNum
, 
bufLí
, 
buf
 );

454 
	`oßl_mem_‰ì
(
buf
);

456  
°©us
;

457 
	}
}

472 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_Síd_EphemîÆD©aReq
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

473 
uöt8
 *
eD©a
,

474 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

476  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
,

477 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

478 
COMMAND_EPHEMERAL_DATA_REQUEST
, 
TRUE
,

479 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
,

480 0, 
£qNum
, 
ZCL_KE_CA_PUBLIC_KEY_LEN
, 
eD©a
 );

481 
	}
}

496 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_Síd_C⁄fúmKey
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

497 
uöt8
 *
mac
,

498 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

500  (
	`z˛_SídComm™d
(
§cEP
, 
d°Addr
,

501 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

502 
COMMAND_CONFIRM_KEY
, 
TRUE
,

503 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
,

504 0, 
£qNum
, 
KEY_ESTABLISH_MAC_LENGTH
, 
mac
 ));

505 
	}
}

521 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
uöt8
 
§cEP
,

522 
afAddrTy≥_t
 *
d°Addr
,

523 
TîmKeySètus_t
 
°©us
,

524 
uöt8
 
waôTime
,

525 
uöt16
 
keyE°ablishmítSuôe
, 
uöt8
 
dúe˘i⁄
,

526 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

528 
uöt8
 
buf
[4];

530 
buf
[0] = 
°©us
;

531 
buf
[1] = 
waôTime
;

532 
buf
[2] = 
	`LO_UINT16
(
keyE°ablishmítSuôe
);

533 
buf
[3] = 
	`HI_UINT16
(
keyE°ablishmítSuôe
);

535  
	`z˛_SídComm™d
(
§cEP
, 
d°Addr
,

536 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

537 
COMMAND_TERMINATE_KEY_ESTABLISHMENT
, 
TRUE
,

538 
dúe˘i⁄
, 
dißbÀDeÁu…R•
,

539 0, 
£qNum
, 4, 
buf
 );

540 
	}
}

559 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_Síd_InôüãKeyE°ablishmítR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

560 
uöt16
 
keyE°ablishmítSuôe
,

561 
uöt8
 
keyGíî©eTime
,

562 
uöt8
 
macGíî©eTime
,

563 
uöt8
 *
˚πifiˇã
,

564 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

566 
uöt8
 *
buf
;

567 
uöt8
 
bufLí
;

568 
uöt8
 
ªt
;

569 
uöt8
 *
pBuf
;

571 
bufLí
 = 2 + 1 + 1 + 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
;

573 i‡((
buf
 = 
	`oßl_mem_Æloc
(
bufLí
)Ë=
NULL
)

575  
ZMemEº‹
;

578 
pBuf
 = 
buf
;

580 *
pBuf
++ = 
	`LO_UINT16
–
keyE°ablishmítSuôe
 );

581 *
pBuf
++ = 
	`HI_UINT16
–
keyE°ablishmítSuôe
 );

582 *
pBuf
++ = 
keyGíî©eTime
;

583 *
pBuf
++ = 
macGíî©eTime
;

584 
	`oßl_mem˝y
–
pBuf
, 
˚πifiˇã
, 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
 );

586 
ªt
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
,

587 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

588 
COMMAND_INITIATE_KEY_ESTABLISHMENT_RESPONSE
, 
TRUE
,

589 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
,

590 0, 
£qNum
, 
bufLí
, 
buf
 );

591 
	`oßl_mem_‰ì
(
buf
);

593  
ªt
;

594 
	}
}

609 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_Síd_EphemîÆD©aR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

610 
uöt8
 *
eD©a
,

611 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

613  (
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
,

614 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

615 
COMMAND_EPHEMERAL_DATA_RESPONSE
, 
TRUE
,

616 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
,

617 0, 
£qNum
, 
ZCL_KE_CA_PUBLIC_KEY_LEN
, 
eD©a
 ));

618 
	}
}

633 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_Síd_C⁄fúmKeyR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

634 
uöt8
 *
mac
,

635 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

637  (
	`z˛_SídComm™d
(
§cEP
, 
d°Addr
,

638 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

639 
COMMAND_CONFIRM_KEY_RESPONSE
, 
TRUE
,

640 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
,

641 0, 
£qNum
, 
KEY_ESTABLISH_MAC_LENGTH
, 
mac
 ));

642 
	}
}

656 
	$z˛GíîÆ_KeyE°ablishmít_RegYõldCB
–
YõldFunc
 *
pFnYõld
,

657 
uöt8
 
yõldLevñ
 )

659 if–
pFnYõld
 =
NULL
 )

661 
z˛KeyE°ablish_YõldLevñ
 = 0;

665 
z˛KeyE°ablish_YõldFunc
 = 
pFnYõld
;

666 
z˛KeyE°ablish_YõldLevñ
 = 
yõldLevñ
;

668 
	}
}

680 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

682 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

684 #i‡
	`deföed
 ( 
INTER_PAN
 )

685 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

686  ( 
°©
 );

689 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

692 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

694 
°©
 = 
	`z˛GíîÆ_KeyE°ablish_HdlInS≥cificComm™ds
–
pInMsg
 );

699 
°©
 = 
ZFaûuª
;

705 
°©
 = 
ZFaûuª
;

707  ( 
°©
 );

708 
	}
}

720 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

722 
ZSètus_t
 
°©
;

724 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

727  
pInMsg
->
hdr
.
comm™dID
 )

729 
COMMAND_INITIATE_KEY_ESTABLISHMENT
:

730 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_InôüãKeyE°ablish
–
pInMsg
 );

733 
COMMAND_EPHEMERAL_DATA_REQUEST
:

734 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_EphemîÆD©aReq
–
pInMsg
 );

737 
COMMAND_CONFIRM_KEY
:

738 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_C⁄fúmKey
–
pInMsg
 );

741 
COMMAND_TERMINATE_KEY_ESTABLISHMENT
:

742 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_Tîmö©eKeyE°ablish
–
pInMsg
 );

746 
°©
 = 
ZFaûuª
;

753  
pInMsg
->
hdr
.
comm™dID
 )

755 
COMMAND_INITIATE_KEY_ESTABLISHMENT_RESPONSE
:

756 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_InôüãKeyE°ablishR•
–
pInMsg
 );

759 
COMMAND_EPHEMERAL_DATA_RESPONSE
:

760 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_EphemîÆD©aR•
–
pInMsg
 );

763 
COMMAND_CONFIRM_KEY_RESPONSE
:

764 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_C⁄fúmKeyR•
–
pInMsg
 );

767 
COMMAND_TERMINATE_KEY_ESTABLISHMENT
:

768 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_Tîmö©eKeyE°ablish
–
pInMsg
 );

772 
°©
 = 
ZFaûuª
;

777  ( 
°©
 );

778 
	}
}

792 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInCmd_InôüãKeyE°ablish
–
z˛Incomög_t
 *
pInMsg
 )

794 
TîmKeySètus_t
 
°©us
 = 
TîmKeySètus_Suc˚ss
;

795 
uöt16
 
ªmŸeKeyE°ablishmítSuôe
;

796 
uöt8
 *
im∂icôCît
 = 
NULL
;

797 
uöt8
 
ödex
 = 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
;

800 i‡–
pInMsg
->
pD©aLí
 < 
PACKET_LEN_INITIATE_KEY_EST_REQ
 )

802 
°©us
 = 
TîmKeySètus_BadMesßge
;

807 
ödex
 = 
	`z˛GíîÆ_AddKeyE°ablishRec
–&
pInMsg
->
msg
->
§cAddr
 );

809 if–
ödex
 >
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

812 
°©us
 = 
TîmKeySètus_NoResour˚s
;

818 
	`oßl_mem˝y
(
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
, &(
pInMsg
->
pD©a
[
KEY_ESTABLISH_CERT_IDX
]),

819 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
 );

822 
ªmŸeKeyE°ablishmítSuôe
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

824 i‡–
ªmŸeKeyE°ablishmítSuôe
 !
KEY_ESTABLISHMENT_SUITE
 )

826 
°©us
 = 
TîmKeySètus_UnSuµ‹ãdSuôe
;

832 i‡(
pInMsg
->
pD©a
[2] >
KEY_ESTABLISHMENT_EPH_DATA_GEN_INVALID_TIME
)

834 
°©us
 = 
TîmKeySètus_BadMesßge
;

839 
keyE°ablishRec
[
ödex
].
ªmŸeEphD©aGíTime
 = 
pInMsg
->
pD©a
[2];

841 i‡(
pInMsg
->
pD©a
[3] >
KEY_ESTABLISHMENT_CONF_KEY_GEN_INVALID_TIME
)

843 
°©us
 = 
TîmKeySètus_BadMesßge
;

848 
keyE°ablishRec
[
ödex
].
ªmŸeC⁄fKeyGíTime
 = 
pInMsg
->
pD©a
[3];

850 i‡((
im∂icôCît
 = 
	`oßl_mem_Æloc
(
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
)Ë=
NULL
)

853 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

855  
ZCL_STATUS_SOFTWARE_FAILURE
;

858 
	`oßl_nv_ªad
(
ZCD_NV_IMPLICIT_CERTIFICATE
, 0, 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
, 
im∂icôCît
);

860 i‡–!
	`oßl_memcmp
–&(
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
[
KEY_ESTABLISH_CERT_ISSUER_IDX
]),

861 &(
im∂icôCît
[
KEY_ESTABLISH_CERT_ISSUER_IDX
]),

862 
KEY_ESTABLISH_CERT_ISSUER_LENTGH
 ) )

864 
°©us
 = 
TîmKeySètus_UnknowIssuî
;

872 i‡–
°©us
 !
TîmKeySètus_Suc˚ss
 )

874 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

875 &
pInMsg
->
msg
->
§cAddr
,

876 
°©us
,

877 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

878 
KEY_ESTABLISHMENT_SUITE
,

879 
ZCL_FRAME_SERVER_CLIENT_DIR
,

880 
FALSE
, 
z˛_SeqNum
++ );

881 i‡–
im∂icôCît
 !
NULL
 )

883 
	`oßl_mem_‰ì
(
im∂icôCît
);

887 i‡–
ödex
 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

889 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

892  
ZCL_STATUS_CMD_HAS_RSP
;

896 
	`SSP_MemCpyRevî£
–
keyE°ablishRec
[
ödex
].
∑π√rExtAddr
,

897 &(
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
[
KEY_ESTABLISH_CERT_EXT_ADDR_IDX
]),

898 
Z_EXTADDR_LEN
);

901 
keyE°ablishRec
[
ödex
].
œ°SeqNum
 = 
pInMsg
->
hdr
.
å™sSeqNum
;

902 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_ED©aPídög
;

903 
keyE°ablishRec
[
ödex
].
rﬁe
 = 
KEY_ESTABLISHMENT_RESPONDER
;

905 
	`z˛GíîÆ_KeyE°ablish_Síd_InôüãKeyE°ablishmítR•
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

906 &
pInMsg
->
msg
->
§cAddr
,

907 
KEY_ESTABLISHMENT_SUITE
,

908 
ZCL_KEY_ESTABLISHMENT_EKEY_GENERATE_TIMEOUT
 + 
ZCL_KEY_ESTABLISHMENT_KEY_GENERATE_TIMEOUT
,

909 
ZCL_KEY_ESTABLISHMENT_MAC_GENERATE_TIMEOUT
 * 2 ,

910 
im∂icôCît
, 
FALSE
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

914 
keyE°ablishRec
[
ödex
].
age
 = keyE°ablishRec[ödex].
ªmŸeEphD©aGíTime
;

917 
	`oßl_°¨t_ªlﬂd_timî
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_REC_AGING_EVT
,

918 
KEY_ESTABLISHMENT_REC_AGING_INTERVAL
 );

920 
	`oßl_mem_‰ì
(
im∂icôCît
);

922 #i‡
	`deföed
 (
NWK_AUTO_POLL
)

924 
z˛SavedPﬁlR©e
 = 
zgPﬁlR©e
;

925 
	`NLME_SëPﬁlR©e
(
ZCL_KEY_ESTABLISH_POLL_RATE
);

928  
ZCL_STATUS_CMD_HAS_RSP
;

929 
	}
}

942 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInCmd_EphemîÆD©aReq
–
z˛Incomög_t
 *
pInMsg
 )

944 
uöt8
 
ödex
;

945 
uöt8
 
°©us
 = 
ZFaûuª
;

950 
	`oßl_°›_timîEx
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_REC_AGING_EVT
 );

953 i‡––
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 ) )

954 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

956 i‡–
keyE°ablishRec
[
ödex
].
rﬁe
 =
KEY_ESTABLISHMENT_RESPONDER
 &&

957 
keyE°ablishRec
[
ödex
].
°©e
 =
KeyE°ablishSèã_ED©aPídög
 )

959 
°©us
 = 
ZSuc˚ss
;

962 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pRemŸePublicKey
,

963 &(
pInMsg
->
pD©a
[0]),

964 
ZCL_KE_CA_PUBLIC_KEY_LEN
 );

969 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

973 if–
°©us
 !
ZSuc˚ss
 )

976 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

977 &
pInMsg
->
msg
->
§cAddr
,

978 
TîmKeySètus_BadMesßge
,

979 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

980 
KEY_ESTABLISHMENT_SUITE
,

981 
ZCL_FRAME_SERVER_CLIENT_DIR
,

982 
FALSE
, 
z˛_SeqNum
++ );

984 #i‡
	`deföed
 (
NWK_AUTO_POLL
)

986 
	`NLME_SëPﬁlR©e
(
z˛SavedPﬁlR©e
);

988  
ZCL_STATUS_CMD_HAS_RSP
;

992 
	`ZSE_ECCGíî©eKey
–(*)
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
,

993 (*)
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
,

994 
z˛GíîÆ_KeyE°ablishmít_GëR™dom
,

995 
z˛KeyE°ablish_YõldFunc
, 
z˛KeyE°ablish_YõldLevñ
 );

997 #i‡
	`deföed
 (
DEBUG_STATIC_ECC
)

1001 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
, 
¥iv©e2
, 21 );

1002 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
, 
public2
, 22 );

1006 
keyE°ablishRec
[
ödex
].
œ°SeqNum
 = 
pInMsg
->
hdr
.
å™sSeqNum
;

1009 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_KeyCÆcuœãPídög
;

1011 
	`oßl_°¨t_timîEx
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_CMD_PROCESS_EVT
,

1012 
KEY_ESTABLISHMENT_WAIT_PERIOD
 );

1015  
ZCL_STATUS_CMD_HAS_RSP
;

1016 
	}
}

1031 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInCmd_InôüãKeyE°ablishR•
–
z˛Incomög_t
 *
pInMsg
 )

1033 
TîmKeySètus_t
 
keySètus
 = 
TîmKeySètus_Suc˚ss
;

1034 
uöt16
 
ªmŸeKeyE°ablishmítSuôe
;

1035 
uöt8
 
ödex
 = 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
;

1036 
uöt8
 
°©us
 = 
ZFaûuª
;

1037 
uöt8
 
ªcvExtAddr
[
Z_EXTADDR_LEN
];

1040 
	`oßl_°›_timîEx
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_REC_AGING_EVT
 );

1043 i‡–
pInMsg
->
pD©aLí
 >
PACKET_LEN_INITIATE_KEY_EST_RSP
 )

1046 i‡––
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 ) )

1047 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1049 i‡–
keyE°ablishRec
[
ödex
].
rﬁe
 =
KEY_ESTABLISHMENT_INITIATOR
 &&

1050 
keyE°ablishRec
[
ödex
].
°©e
 =
KeyE°ablishSèã_InôüãPídög
 )

1054 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
, &(
pInMsg
->
pD©a
[
KEY_ESTABLISH_CERT_IDX
]),

1055 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
 );

1058 
	`AddrMgrExtAddrLookup
(
keyE°ablishRec
[
ödex
].
d°Addr
.
addr
.
sh‹tAddr
,

1059 
keyE°ablishRec
[
ödex
].
∑π√rExtAddr
);

1062 
	`SSP_MemCpyRevî£
–
ªcvExtAddr
,

1063 &(
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
[
KEY_ESTABLISH_CERT_EXT_ADDR_IDX
]),

1064 
Z_EXTADDR_LEN
);

1067 i‡(
	`oßl_memcmp
(
keyE°ablishRec
[
ödex
].
∑π√rExtAddr
, 
ªcvExtAddr
, 
Z_EXTADDR_LEN
))

1069 
°©us
 = 
ZSuc˚ss
;

1075 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1080 i‡–
°©us
 =
ZFaûuª
 )

1082 
keySètus
 = 
TîmKeySètus_BadMesßge
;

1086 
uöt8
 *
im∂icôCît
;

1090 
ªmŸeKeyE°ablishmítSuôe
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

1091 i‡–
ªmŸeKeyE°ablishmítSuôe
 !
KEY_ESTABLISHMENT_SUITE
 )

1093 
keySètus
 = 
TîmKeySètus_UnSuµ‹ãdSuôe
;

1100 i‡(
pInMsg
->
pD©a
[2] >
KEY_ESTABLISHMENT_EPH_DATA_GEN_INVALID_TIME
)

1102 
°©us
 = 
TîmKeySètus_BadMesßge
;

1108 
keyE°ablishRec
[
ödex
].
ªmŸeEphD©aGíTime
 = 
pInMsg
->
pD©a
[2];

1110 i‡(
pInMsg
->
pD©a
[3] >
KEY_ESTABLISHMENT_CONF_KEY_GEN_INVALID_TIME
)

1112 
°©us
 = 
TîmKeySètus_BadMesßge
;

1118 
keyE°ablishRec
[
ödex
].
ªmŸeC⁄fKeyGíTime
 = 
pInMsg
->
pD©a
[3];

1120 i‡((
im∂icôCît
 = 
	`oßl_mem_Æloc
(
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
)Ë=
NULL
)

1123 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1125  
ZCL_STATUS_SOFTWARE_FAILURE
;

1128 
	`oßl_nv_ªad
(
ZCD_NV_IMPLICIT_CERTIFICATE
, 0, 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
, 
im∂icôCît
);

1130 i‡–!
	`oßl_memcmp
–&(
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
[
KEY_ESTABLISH_CERT_ISSUER_IDX
]),

1131 &(
im∂icôCît
[
KEY_ESTABLISH_CERT_ISSUER_IDX
]),

1132 
KEY_ESTABLISH_CERT_ISSUER_LENTGH
 ) )

1134 
keySètus
 = 
TîmKeySètus_UnknowIssuî
;

1137 
	`oßl_mem_‰ì
(
im∂icôCît
);

1143 i‡–
keySètus
 =
TîmKeySètus_Suc˚ss
 )

1145 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_ED©aPídög
;

1148 
	`z˛GíîÆ_KeyE°ablish_Síd_EphemîÆD©aReq
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1149 &
pInMsg
->
msg
->
§cAddr
,

1150 
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
,

1151 
FALSE
, 
z˛_SeqNum
++ );

1155 
keyE°ablishRec
[
ödex
].
age
 = keyE°ablishRec[ödex].
ªmŸeEphD©aGíTime
;

1158 
	`oßl_°¨t_ªlﬂd_timî
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_REC_AGING_EVT
,

1159 
KEY_ESTABLISHMENT_REC_AGING_INTERVAL
 );

1163 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1164 &
pInMsg
->
msg
->
§cAddr
,

1165 
keySètus
,

1166 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

1167 
KEY_ESTABLISHMENT_SUITE
,

1168 
ZCL_FRAME_CLIENT_SERVER_DIR
,

1169 
FALSE
, 
z˛_SeqNum
++ );

1172 i‡–
ödex
 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1174 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1177 #i‡
	`deföed
 (
NWK_AUTO_POLL
)

1179 
	`NLME_SëPﬁlR©e
(
z˛SavedPﬁlR©e
);

1183  
ZCL_STATUS_CMD_HAS_RSP
;

1184 
	}
}

1198 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInCmd_EphemîÆD©aR•
–
z˛Incomög_t
 *
pInMsg
 )

1200 
uöt8
 
ödex
;

1201 
uöt8
 
°©us
 = 
ZFaûuª
;

1204 
	`oßl_°›_timîEx
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_REC_AGING_EVT
 );

1207 i‡––
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 ) )

1208 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1210 i‡–
keyE°ablishRec
[
ödex
].
rﬁe
 =
KEY_ESTABLISHMENT_INITIATOR
 &&

1211 
keyE°ablishRec
[
ödex
].
°©e
 =
KeyE°ablishSèã_ED©aPídög
 )

1213 
°©us
 = 
ZSuc˚ss
;

1216 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pRemŸePublicKey
,

1217 &(
pInMsg
->
pD©a
[0]),

1218 
ZCL_KE_CA_PUBLIC_KEY_LEN
 );

1223 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1227 i‡–
°©us
 =
ZFaûuª
 )

1230 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1231 &
pInMsg
->
msg
->
§cAddr
,

1232 
TîmKeySètus_BadMesßge
,

1233 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

1234 
KEY_ESTABLISHMENT_SUITE
,

1235 
ZCL_FRAME_CLIENT_SERVER_DIR
,

1236 
FALSE
, 
z˛_SeqNum
++ );

1237 #i‡
	`deföed
 (
NWK_AUTO_POLL
)

1239 
	`NLME_SëPﬁlR©e
(
z˛SavedPﬁlR©e
);

1244 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_KeyCÆcuœãPídög
;

1246 
	`oßl_°¨t_timîEx
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_RSP_PROCESS_EVT
,

1247 
KEY_ESTABLISHMENT_WAIT_PERIOD
 );

1251  
ZCL_STATUS_CMD_HAS_RSP
;

1252 
	}
}

1265 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInCmd_C⁄fúmKey
–
z˛Incomög_t
 *
pInMsg
 )

1267 
uöt8
 
ödex
;

1268 
uöt8
 
°©us
 = 
ZFaûuª
;

1269 
uöt8
 
MACu
[
KEY_ESTABLISH_MAC_KEY_LENGTH
];

1270 
uöt8
 
MACv
[
KEY_ESTABLISH_MAC_KEY_LENGTH
];

1271 
TîmKeySètus_t
 
keySètus
 = 
TîmKeySètus_Suc˚ss
;

1274 
	`oßl_°›_timîEx
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_REC_AGING_EVT
 );

1277 i‡––
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 ) )

1278 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1280 i‡–
keyE°ablishRec
[
ödex
].
rﬁe
 =
KEY_ESTABLISHMENT_RESPONDER
 &&

1281 
keyE°ablishRec
[
ödex
].
°©e
 =
KeyE°ablishSèã_C⁄fúmPídög
 )

1283 
°©us
 = 
ZSuc˚ss
;

1288 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1292 i‡–
°©us
 =
ZFaûuª
 )

1294 
keySètus
 = 
TîmKeySètus_BadMesßge
;

1299 
	`z˛GíîÆ_KeyE°ablishmít_Gíî©eMAC
–
ödex
, 
TRUE
, 
MACu
 );

1302 i‡–
	`oßl_memcmp
–
MACu
, 
pInMsg
->
pD©a
, 
KEY_ESTABLISH_MAC_LENGTH
 ) =
TRUE
 )

1305 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_Tîmö©i⁄Pídög
;

1309 
	`ZDSecMgrAddLökKey
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
,

1310 
keyE°ablishRec
[
ödex
].
∑π√rExtAddr
,

1311 
keyE°ablishRec
[
ödex
].
pKey
 );

1314 
	`z˛GíîÆ_KeyE°ablishmít_Gíî©eMAC
–
ödex
, 
FALSE
, 
MACv
 );

1316 
	`z˛GíîÆ_KeyE°ablish_Síd_C⁄fúmKeyR•
–
pInMsg
->
msg
->
ídPoöt
,

1317 &
pInMsg
->
msg
->
§cAddr
,

1318 
MACv
,

1319 
FALSE
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1323 
keySètus
 = 
TîmKeySètus_BadKeyC⁄fúm
;

1328 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1331 if–
keySètus
 !
TîmKeySètus_Suc˚ss
)

1334 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1335 &
pInMsg
->
msg
->
§cAddr
,

1336 
keySètus
,

1337 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

1338 
KEY_ESTABLISHMENT_SUITE
,

1339 
ZCL_FRAME_SERVER_CLIENT_DIR
,

1340 
FALSE
, 
z˛_SeqNum
++ );

1343 #i‡
	`deföed
 (
NWK_AUTO_POLL
)

1345 
	`NLME_SëPﬁlR©e
(
z˛SavedPﬁlR©e
);

1348  
ZCL_STATUS_CMD_HAS_RSP
;

1349 
	}
}

1363 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInCmd_C⁄fúmKeyR•
–
z˛Incomög_t
 *
pInMsg
 )

1365 
uöt8
 
ödex
;

1366 
uöt8
 
°©us
 = 
ZFaûuª
;

1367 
uöt8
 
MACv
[
KEY_ESTABLISH_MAC_LENGTH
];

1370 
	`oßl_°›_timîEx
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_REC_AGING_EVT
 );

1373 i‡––
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 ) )

1374 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1376 i‡–
keyE°ablishRec
[
ödex
].
rﬁe
 =
KEY_ESTABLISHMENT_INITIATOR
 &&

1377 
keyE°ablishRec
[
ödex
].
°©e
 =
KeyE°ablishSèã_C⁄fúmPídög
 )

1379 
°©us
 = 
ZSuc˚ss
;

1384 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1388 i‡–
°©us
 =
ZFaûuª
 )

1390 
°©us
 = 
TîmKeySètus_BadMesßge
;

1395 
	`z˛GíîÆ_KeyE°ablishmít_Gíî©eMAC
–
ödex
, 
FALSE
, 
MACv
);

1398 i‡–
	`oßl_memcmp
–
MACv
, 
pInMsg
->
pD©a
, 
KEY_ESTABLISH_MAC_LENGTH
 ) =
TRUE
 )

1400 
°©us
 = 
TîmKeySètus_Suc˚ss
;

1403 
	`ZDSecMgrAddLökKey
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
,

1404 
keyE°ablishRec
[
ödex
].
∑π√rExtAddr
,

1405 
keyE°ablishRec
[
ödex
].
pKey
 );

1410 
°©us
 = 
TîmKeySètus_BadKeyC⁄fúm
;

1414 if–
°©us
 !
TîmKeySètus_Suc˚ss
 )

1416 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1417 &
pInMsg
->
msg
->
§cAddr
,

1418 (
TîmKeySètus_t
)
°©us
,

1419 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

1420 
KEY_ESTABLISHMENT_SUITE
,

1421 
ZCL_FRAME_CLIENT_SERVER_DIR
,

1422 
FALSE
, 
z˛_SeqNum
++ );

1426 i‡–
keyE°ablishRec
[
ödex
].
≠pTaskID
 !
INVALID_TASK_ID
 )

1428 
keyE°ablishmítInd_t
 *
öd
;

1430 
öd
 = (
keyE°ablishmítInd_t
 *)
	`oßl_msg_Æloˇã
( ( keyEstablishmentInd_t ) );

1431 i‡–
öd
 )

1433 
öd
->
hdr
.
evít
 = 
ZCL_KEY_ESTABLISH_IND
;

1434 
öd
->
hdr
.
°©us
 = status;

1437 
öd
->
waôTime
 = 0;

1438 
öd
->
keyE°ablishmítSuôe
 = 0;

1440 
	`oßl_msg_£nd
–
keyE°ablishRec
[
ödex
].
≠pTaskID
, (
uöt8
*)
öd
 );

1445 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1447 #i‡
	`deföed
 (
NWK_AUTO_POLL
)

1449 
	`NLME_SëPﬁlR©e
(
z˛SavedPﬁlR©e
);

1451  
ZCL_STATUS_CMD_HAS_RSP
;

1452 
	}
}

1464 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInCmd_Tîmö©eKeyE°ablish
–
z˛Incomög_t
 *
pInMsg
 )

1466 
uöt8
 
ödex
;

1469 i‡––
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 ) )

1470 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1472 i‡–
keyE°ablishRec
[
ödex
].
≠pTaskID
 !
INVALID_TASK_ID
 )

1474 
keyE°ablishmítInd_t
 *
öd
;

1477 
öd
 = (
keyE°ablishmítInd_t
 *)
	`oßl_msg_Æloˇã
( ( keyEstablishmentInd_t ) );

1478 i‡–
öd
 )

1480 
öd
->
hdr
.
evít
 = 
ZCL_KEY_ESTABLISH_IND
;

1481 
öd
->
hdr
.
°©us
 = 
pInMsg
->
pD©a
[0];

1482 
öd
->
waôTime
 = 
pInMsg
->
pD©a
[1];

1483 
öd
->
keyE°ablishmítSuôe
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

1484 
	`oßl_msg_£nd
–
keyE°ablishRec
[
ödex
].
≠pTaskID
, (
uöt8
*)
öd
 );

1488 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1490 #i‡
	`deföed
 (
NWK_AUTO_POLL
)

1492 
	`NLME_SëPﬁlR©e
(
z˛SavedPﬁlR©e
);

1495  
ZSuc˚ss
;

1496 
	}
}

1509 
ZSètus_t
 
	$z˛GíîÆ_InôüãKeyE°ablish_Cmd_CÆcuœãKey
( )

1511 
uöt8
 
zD©a
[
KEY_ESTABLISH_SHARED_SECRET_LENGTH
];

1512 
uöt8
 *
ˇPublicKey
, *
devi˚Priv©eKey
, *
keyBô
;

1513 
uöt8
 
ödex
, 
°©us
, 
tmp
;

1520 i‡–(
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex_Sèã
–
KeyE°ablishSèã_KeyCÆcuœãPídög
 ))

1521 >
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1523  
ZFaûuª
;

1526 i‡((
ˇPublicKey
 = 
	`oßl_mem_Æloc
(
ZCL_KE_CA_PUBLIC_KEY_LEN
)Ë=
NULL
)

1529 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1531  
ZCL_STATUS_SOFTWARE_FAILURE
;

1533 i‡((
devi˚Priv©eKey
 = 
	`oßl_mem_Æloc
(
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
)Ë=
NULL
)

1535 
	`oßl_mem_‰ì
(
ˇPublicKey
);

1538 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1540  
ZCL_STATUS_SOFTWARE_FAILURE
;

1543 
	`oßl_nv_ªad
(
ZCD_NV_CA_PUBLIC_KEY
, 0, 
ZCL_KE_CA_PUBLIC_KEY_LEN
, 
ˇPublicKey
);

1544 
	`oßl_nv_ªad
(
ZCD_NV_DEVICE_PRIVATE_KEY
, 0, 
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
, 
devi˚Priv©eKey
);

1547 
tmp
 = 
FALSE
;

1548 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
tmp
 );

1550 
°©us
 = 
	`ZSE_ECCKeyBôGíî©e
–
devi˚Priv©eKey
, 
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
,

1551 
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
,

1552 
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
,

1553 
keyE°ablishRec
[
ödex
].
pRemŸePublicKey
,

1554 
ˇPublicKey
, 
zD©a
,

1555 
z˛GíîÆ_KeyE°ablishmít_HashFunc
,

1556 
z˛KeyE°ablish_YõldFunc
, 
z˛KeyE°ablish_YõldLevñ
);

1557 
tmp
 = 
TRUE
;

1558 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
tmp
 );

1560 
	`oßl_mem_‰ì
(
ˇPublicKey
);

1561 
	`oßl_mem_‰ì
(
devi˚Priv©eKey
);

1563 if–
°©us
 =
MCE_SUCCESS
 )

1566 i‡–(
keyBô
 = 
	`oßl_mem_Æloc
–
KEY_ESTABLISH_KEY_DATA_LENGTH
 +

1567 
KEY_ESTABLISH_MAC_KEY_LENGTH
)Ë=
NULL
 )

1570 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1572  
ZCL_STATUS_SOFTWARE_FAILURE
;

1576 
	`z˛GíîÆ_KeyE°ablishmít_KeyDîiveFun˘i⁄
(
zD©a
,

1577 
KEY_ESTABLISH_SHARED_SECRET_LENGTH
,

1578 
keyBô
 );

1581 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pMacKey
, 
keyBô
, 
KEY_ESTABLISH_MAC_KEY_LENGTH
 );

1582 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pKey
, &(
keyBô
[
KEY_ESTABLISH_MAC_KEY_LENGTH
]),

1583 
KEY_ESTABLISH_KEY_DATA_LENGTH
);

1584 
	`oßl_mem_‰ì
–
keyBô
 );

1587 
	`z˛GíîÆ_KeyE°ablish_Síd_EphemîÆD©aR•
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1588 &(
keyE°ablishRec
[
ödex
].
d°Addr
),

1589 
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
,

1590 
FALSE
, 
keyE°ablishRec
[
ödex
].
œ°SeqNum
 );

1594 
keyE°ablishRec
[
ödex
].
age
 = keyE°ablishRec[ödex].
ªmŸeC⁄fKeyGíTime
;

1597 
	`oßl_°¨t_ªlﬂd_timî
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_REC_AGING_EVT
,

1598 
KEY_ESTABLISHMENT_REC_AGING_INTERVAL
 );

1603 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1604 &(
keyE°ablishRec
[
ödex
].
d°Addr
),

1605 
TîmKeySètus_BadKeyC⁄fúm
,

1606 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

1607 
KEY_ESTABLISHMENT_SUITE
,

1608 
ZCL_FRAME_SERVER_CLIENT_DIR
,

1609 
FALSE
, 
z˛_SeqNum
++ );

1611 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1613 #i‡
	`deföed
 (
NWK_AUTO_POLL
)

1615 
	`NLME_SëPﬁlR©e
(
z˛SavedPﬁlR©e
);

1618  
ZFaûuª
;

1621 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_C⁄fúmPídög
;

1622  
ZSuc˚ss
;

1623 
	}
}

1637 
ZSètus_t
 
	$z˛GíîÆ_InôüãKeyE°ablish_R•_CÆcuœãKey
( )

1639 
uöt8
 
zD©a
[
KEY_ESTABLISH_SHARED_SECRET_LENGTH
];

1640 
uöt8
 
MACu
[
KEY_ESTABLISH_MAC_LENGTH
];

1641 
uöt8
 *
ˇPublicKey
, *
devi˚Priv©eKey
, *
keyBô
;

1642 
uöt8
 
ödex
, 
ªt
, 
tmp
, 
cuºítRxSèã
;

1649 i‡–(
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex_Sèã
–
KeyE°ablishSèã_KeyCÆcuœãPídög
 ))

1650 >
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1652  
ZFaûuª
;

1655 i‡((
ˇPublicKey
 = 
	`oßl_mem_Æloc
(
ZCL_KE_CA_PUBLIC_KEY_LEN
)Ë=
NULL
)

1658 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1660  
ZCL_STATUS_SOFTWARE_FAILURE
;

1662 i‡((
devi˚Priv©eKey
 = 
	`oßl_mem_Æloc
(
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
)Ë=
NULL
)

1665 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1667 
	`oßl_mem_‰ì
(
ˇPublicKey
);

1668  
ZCL_STATUS_SOFTWARE_FAILURE
;

1670 
	`oßl_nv_ªad
(
ZCD_NV_CA_PUBLIC_KEY
, 0, 
ZCL_KE_CA_PUBLIC_KEY_LEN
, 
ˇPublicKey
);

1671 
	`oßl_nv_ªad
(
ZCD_NV_DEVICE_PRIVATE_KEY
, 0, 
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
, 
devi˚Priv©eKey
);

1673 
	`ZMacGëReq
–
ZMacRxOnIdÀ
, &
cuºítRxSèã
 );

1676 
tmp
 = 
FALSE
;

1677 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
tmp
 );

1680 
ªt
 = 
	`ZSE_ECCKeyBôGíî©e
–
devi˚Priv©eKey
, 
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
,

1681 
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
,

1682 
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
,

1683 
keyE°ablishRec
[
ödex
].
pRemŸePublicKey
,

1684 
ˇPublicKey
, 
zD©a
,

1685 
z˛GíîÆ_KeyE°ablishmít_HashFunc
,

1686 
z˛KeyE°ablish_YõldFunc
, 
z˛KeyE°ablish_YõldLevñ
);

1688 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
cuºítRxSèã
 );

1690 
	`oßl_mem_‰ì
(
ˇPublicKey
);

1691 
	`oßl_mem_‰ì
(
devi˚Priv©eKey
);

1693 i‡–
ªt
 !
MCE_SUCCESS
 )

1696 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1697 &(
keyE°ablishRec
[
ödex
].
d°Addr
),

1698 
TîmKeySètus_BadKeyC⁄fúm
,

1699 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

1700 
KEY_ESTABLISHMENT_SUITE
,

1701 
ZCL_FRAME_CLIENT_SERVER_DIR
,

1702 
FALSE
, 
z˛_SeqNum
++ );

1704 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1706 #i‡
	`deföed
 (
NWK_AUTO_POLL
)

1708 
	`NLME_SëPﬁlR©e
(
z˛SavedPﬁlR©e
);

1711  
ZFaûuª
;

1716 i‡–(
keyBô
 = 
	`oßl_mem_Æloc
–
KEY_ESTABLISH_KEY_DATA_LENGTH
 +

1717 
KEY_ESTABLISH_MAC_KEY_LENGTH
)Ë=
NULL
 )

1720 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1722  
ZCL_STATUS_SOFTWARE_FAILURE
;

1726 
	`z˛GíîÆ_KeyE°ablishmít_KeyDîiveFun˘i⁄
(
zD©a
,

1727 
KEY_ESTABLISH_SHARED_SECRET_LENGTH
,

1728 
keyBô
 );

1731 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pMacKey
, 
keyBô
, 
KEY_ESTABLISH_KEY_DATA_LENGTH
);

1732 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pKey
, &(
keyBô
[
KEY_ESTABLISH_MAC_KEY_LENGTH
]),

1733 
KEY_ESTABLISH_KEY_DATA_LENGTH
);

1736 
	`z˛GíîÆ_KeyE°ablishmít_Gíî©eMAC
–
ödex
, 
TRUE
, 
MACu
 );

1737 
	`oßl_mem_‰ì
–
keyBô
 );

1740 
	`z˛GíîÆ_KeyE°ablish_Síd_C⁄fúmKey
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1741 &(
keyE°ablishRec
[
ödex
].
d°Addr
),

1742 
MACu
,

1743 
FALSE
, 
z˛_SeqNum
++ );

1747 
keyE°ablishRec
[
ödex
].
age
 = keyE°ablishRec[ödex].
ªmŸeC⁄fKeyGíTime
;

1750 
	`oßl_°¨t_ªlﬂd_timî
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_REC_AGING_EVT
,

1751 
KEY_ESTABLISHMENT_REC_AGING_INTERVAL
 );

1753 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_C⁄fúmPídög
;

1755  
ZSuc˚ss
;

1757 
	}
}

1768 
	$z˛GíîÆ_InôKeyE°ablishRecTabÀ
( )

1770 
uöt8
 
i
;

1772  
i
 = 0; i < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
; i++ )

1774 
	`z˛GíîÆ_Re£tKeyE°ablishRec
(
i
);

1776 
	}
}

1789 
uöt8
 
	$z˛GíîÆ_GëKeyE°ablishRecIndex
–
uöt16
 
∑π√rAddªss
 )

1791 
uöt8
 
i
;

1794  
i
 = 0; i < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 ; i++ )

1796 i‡–
keyE°ablishRec
[
i
].
d°Addr
.
addr
.
sh‹tAddr
 =
∑π√rAddªss
 )

1803  
i
;

1804 
	}
}

1816 
uöt8
 
	$z˛GíîÆ_GëKeyE°ablishRecIndex_Sèã
–
KeyE°ablishSèã_t
 
°©e
 )

1818 
uöt8
 
i
;

1821  
i
 = 0; i < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 ; i++ )

1823 i‡–
keyE°ablishRec
[
i
].
°©e
 == state )

1830  
i
;

1831 
	}
}

1847 
uöt8
 
	$z˛GíîÆ_AddKeyE°ablishRec
–
afAddrTy≥_t
 *
addr
 )

1849 
uöt8
 
ödex
, *
pBuf
;

1853 i‡––
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
(
addr
->addr.
sh‹tAddr
) )

1854 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1857 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
ödex
 );

1861 i‡–(
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
(
INVALID_PARTNER_ADDR
))

1862 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1865 i‡–(
pBuf
 = 
	`oßl_mem_Æloc
–
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
 +

1866 
ZCL_KE_CA_PUBLIC_KEY_LEN
 +

1867 
ZCL_KE_CA_PUBLIC_KEY_LEN
 +

1868 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
 +

1869 
KEY_ESTABLISH_KEY_DATA_LENGTH
 +

1870 
KEY_ESTABLISH_MAC_KEY_LENGTH
 )Ë!
NULL
 )

1872 
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
 = 
pBuf
;

1873 
pBuf
 +
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
;

1874 
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
 = 
pBuf
;

1875 
pBuf
 +
ZCL_KE_CA_PUBLIC_KEY_LEN
;

1876 
keyE°ablishRec
[
ödex
].
pRemŸePublicKey
 = 
pBuf
;

1877 
pBuf
 +
ZCL_KE_CA_PUBLIC_KEY_LEN
;

1878 
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
 = 
pBuf
;

1879 
pBuf
 +
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
;

1880 
keyE°ablishRec
[
ödex
].
pKey
 = 
pBuf
;

1881 
pBuf
 +
KEY_ESTABLISH_KEY_DATA_LENGTH
;

1882 
keyE°ablishRec
[
ödex
].
pMacKey
 = 
pBuf
;

1884 ()
	`oßl_mem˝y
(&
keyE°ablishRec
[
ödex
].
d°Addr
, 
addr
, (
afAddrTy≥_t
));

1891 
ödex
 = 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
;

1895  
ödex
;

1896 
	}
}

1909 
	$z˛GíîÆ_AgeKeyE°ablishRec
( )

1911 
uöt8
 
i
;

1912 
boﬁ
 
ªcFound
 = 
FALSE
;

1914  
i
 = 0; i < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
; i++ )

1917 i‡(
keyE°ablishRec
[
i
].
d°Addr
.
addrMode
 =
afAddrNŸPª£¡
)

1922 i‡(--(
keyE°ablishRec
[
i
].
age
) == 0)

1925 
	`z˛GíîÆ_Re£tKeyE°ablishRec
–
i
 );

1929 
ªcFound
 = 
TRUE
;

1933 i‡–
ªcFound
 =
FALSE
 )

1935 
	`oßl_°›_timîEx
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_REC_AGING_EVT
 );

1937 
	}
}

1948 
	$z˛GíîÆ_Re£tKeyE°ablishRec
–
uöt8
 
ödex
 )

1950 
uöt8
 *
pKeys
;

1952 
pKeys
 = 
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
;

1953 i‡–
pKeys
 !
NULL
 )

1957 ()
	`oßl_mem£t
–
pKeys
, 0, 
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
 +

1958 
ZCL_KE_CA_PUBLIC_KEY_LEN
 +

1959 
ZCL_KE_CA_PUBLIC_KEY_LEN
 +

1960 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
 +

1961 
KEY_ESTABLISH_KEY_DATA_LENGTH
 +

1962 
KEY_ESTABLISH_MAC_KEY_LENGTH
 );

1963 
	`oßl_mem_‰ì
–
pKeys
 );

1967 ()
	`oßl_mem£t
–&(
keyE°ablishRec
[
ödex
]), 0, –
z˛KeyE°ablishRec_t
 ) );

1968 
keyE°ablishRec
[
ödex
].
d°Addr
.
addrMode
 = 
afAddrNŸPª£¡
;

1969 
keyE°ablishRec
[
ödex
].
d°Addr
.
addr
.
sh‹tAddr
 = 
INVALID_PARTNER_ADDR
;

1970 
keyE°ablishRec
[
ödex
].
≠pTaskID
 = 
INVALID_TASK_ID
;

1971 
keyE°ablishRec
[
ödex
].
age
 = 
KEY_ESTABLISHMENT_REC_EXPIRY_TIME
;

1972 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_IdÀ
;

1973 
keyE°ablishRec
[
ödex
].
ªmŸeEphD©aGíTime
 = 
KEY_ESTABLISHMENT_EPH_DATA_GEN_INVALID_TIME
;

1974 
keyE°ablishRec
[
ödex
].
ªmŸeC⁄fKeyGíTime
 = 
KEY_ESTABLISHMENT_CONF_KEY_GEN_INVALID_TIME
;

1975 
	}
}

1987 
	$z˛GíîÆ_KeyE°ablishmít_GëR™dom
(*
buf„r
, 
Àn
)

1989 
uöt8
 *
pBuf
;

1991 
pBuf
 = 
buf„r
;

1996  
Àn
 > 
SEC_KEY_LEN
 )

1998 
	`SSP_GëTrueR™dAES
–
SEC_KEY_LEN
, 
pBuf
 );

1999 
Àn
 -
SEC_KEY_LEN
;

2000 
pBuf
 +
SEC_KEY_LEN
;

2002 
	`SSP_GëTrueR™dAES
–
Àn
, 
pBuf
 );

2003  
MCE_SUCCESS
;

2004 
	}
}

2017 
	$z˛GíîÆ_KeyE°ablishmít_HashFunc
(*
dige°
, 
Àn
, *
d©a
)

2019 
Àn
 *= 8;

2020 
	`s•MMOHash
–
NULL
, 0, 
d©a
, (
uöt16
)
Àn
, 
dige°
 );

2021  
MCE_SUCCESS
;

2022 
	}
}

2038 
	$z˛GíîÆ_KeyE°ablishmít_KeyDîiveFun˘i⁄
–
uöt8
 *
zD©a
,

2039 
uöt8
 
keyBôLí
,

2040 
uöt8
 *
keyBô
 )

2042 
uöt8
 
hashCou¡î
[4] = {0x00, 0x00, 0x00, 0x01};

2043 
uöt8
 
hashedD©a
[
KEY_ESTABLISH_SHARED_SECRET_LENGTH
 + 4];

2044 
uöt8
 
bôLí
;

2046 
bôLí
 = (
keyBôLí
 + 4 ) * 8;

2049 
	`oßl_mem˝y
–
hashedD©a
, 
zD©a
, 
KEY_ESTABLISH_SHARED_SECRET_LENGTH
 );

2050 
	`oßl_mem˝y
–&(
hashedD©a
[
KEY_ESTABLISH_SHARED_SECRET_LENGTH
]), 
hashCou¡î
, 4);

2052 
	`s•MMOHash
(
NULL
, 0, 
hashedD©a
, 
bôLí
, 
keyBô
);

2055 
hashedD©a
[
KEY_ESTABLISH_SHARED_SECRET_LENGTH
 + 3] = 0x02;

2057 
	`s•MMOHash
(
NULL
, 0, 
hashedD©a
, 
bôLí
, &(
keyBô
[
KEY_ESTABLISH_KEY_DATA_LENGTH
]));

2058 
	}
}

2074 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablishmít_Gíî©eMAC
(
uöt8
 
ªcIndex
,

2075 
uöt8
 
ifMACu
,

2076 
uöt8
 *
MAC
)

2078 
uöt8
 
i
;

2079 
uöt8
 
M
;

2080 
uöt8
 *
hashBuf
;

2081 
uöt16
 
bufLí
;

2084 if–
ifMACu
 =
TRUE
 )

2086 
M
 = 0x02;

2090 
M
 = 0x03;

2095  
i
 = 0; i < 
Z_EXTADDR_LEN
; i++ )

2097 i‡–
keyE°ablishRec
[
ªcIndex
].
∑π√rExtAddr
[
i
] != 0 )

2102 i‡–
i
 =
Z_EXTADDR_LEN
 )

2104  
ZFaûuª
;

2108 
bufLí
 = (1 + (
Z_EXTADDR_LEN
 * 2Ë+ (
ZCL_KE_CA_PUBLIC_KEY_LEN
 * 2));

2109 if––
hashBuf
 = 
	`oßl_mem_Æloc
–(
bufLí
Ë)Ë=
NULL
 )

2111  
ZMemEº‹
;

2115 
hashBuf
[0] = 
M
;

2116 
bufLí
 = bufLen * 8;

2118 i‡–(
keyE°ablishRec
[
ªcIndex
].
rﬁe
 =
KEY_ESTABLISHMENT_INITIATOR
 && 
ifMACu
 =
TRUE
) ||

2119 (
keyE°ablishRec
[
ªcIndex
].
rﬁe
 =
KEY_ESTABLISHMENT_RESPONDER
 && 
ifMACu
 =
FALSE
))

2123 
	`SSP_MemCpyRevî£
–&(
hashBuf
[1]), 
	`NLME_GëExtAddr
(), 
Z_EXTADDR_LEN
);

2124 
	`SSP_MemCpyRevî£
–&(
hashBuf
[1+
Z_EXTADDR_LEN
]), 
keyE°ablishRec
[
ªcIndex
].
∑π√rExtAddr
,

2125 
Z_EXTADDR_LEN
);

2126 
	`oßl_mem˝y
–&(
hashBuf
[1 + (2 * 
Z_EXTADDR_LEN
)]),

2127 
keyE°ablishRec
[
ªcIndex
].
pLoˇlEPublicKey
,

2128 
ZCL_KE_CA_PUBLIC_KEY_LEN
 );

2129 
	`oßl_mem˝y
–&(
hashBuf
[1 + (2 * 
Z_EXTADDR_LEN
Ë+ 
ZCL_KE_CA_PUBLIC_KEY_LEN
]),

2130 
keyE°ablishRec
[
ªcIndex
].
pRemŸePublicKey
, 
ZCL_KE_CA_PUBLIC_KEY_LEN
 );

2132 
	`SSP_KeyedHash
 (
hashBuf
, 
bufLí
, 
keyE°ablishRec
[
ªcIndex
].
pMacKey
, 
MAC
);

2138 
	`SSP_MemCpyRevî£
–&(
hashBuf
[1]), 
keyE°ablishRec
[
ªcIndex
].
∑π√rExtAddr
,

2139 
Z_EXTADDR_LEN
);

2140 
	`SSP_MemCpyRevî£
–&(
hashBuf
[1 + 
Z_EXTADDR_LEN
]), 
	`NLME_GëExtAddr
(), Z_EXTADDR_LEN);

2141 
	`oßl_mem˝y
–&(
hashBuf
[ 1 + (2 * 
Z_EXTADDR_LEN
)]),

2142 
keyE°ablishRec
[
ªcIndex
].
pRemŸePublicKey
,

2143 
ZCL_KE_CA_PUBLIC_KEY_LEN
 );

2144 
	`oßl_mem˝y
–&(
hashBuf
[1 + (2 * 
Z_EXTADDR_LEN
Ë+ 
ZCL_KE_CA_PUBLIC_KEY_LEN
]),

2145 
keyE°ablishRec
[
ªcIndex
].
pLoˇlEPublicKey
,

2146 
ZCL_KE_CA_PUBLIC_KEY_LEN
 );

2147 
	`SSP_KeyedHash
 (
hashBuf
, 
bufLí
, 
keyE°ablishRec
[
ªcIndex
].
pMacKey
, 
MAC
);

2150 
	`oßl_mem_‰ì
(
hashBuf
);

2151  
ZSuc˚ss
;

2152 
	}
}

2165 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablishmít_ECDSASign
–
uöt8
 *
öput
, uöt8 
öputLí
,

2166 
uöt8
 *
ouçut
)

2168 
uöt8
 
msgDige°
[
KEY_ESTABLISH_AES_MMO_HASH_SIZE
];

2169 
uöt16
 
bôLí
 = 
öputLí
 * 8;

2170 
uöt8
 
°©us
;

2171 
uöt8
 *
devi˚Priv©eKey
;

2173 i‡((
devi˚Priv©eKey
 = 
	`oßl_mem_Æloc
(
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
)Ë=
NULL
)

2175  
ZCL_STATUS_SOFTWARE_FAILURE
;

2177 
	`oßl_nv_ªad
(
ZCD_NV_DEVICE_PRIVATE_KEY
, 0, 
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
, 
devi˚Priv©eKey
);

2180 
	`s•MMOHash
(
NULL
, 0, 
öput
, 
bôLí
, 
msgDige°
);

2182 
°©us
 = 
	`ZSE_ECDSASign
–(*)
devi˚Priv©eKey
, (*)
msgDige°
,

2183 
z˛GíîÆ_KeyE°ablishmít_GëR™dom
,

2184 (*)
ouçut
, (*)ouçuà+ 
KEY_ESTABLISH_POINT_ORDER_SIZE
,

2185 
z˛KeyE°ablish_YõldFunc
, 
z˛KeyE°ablish_YõldLevñ
 );

2187 
	`oßl_mem_‰ì
(
devi˚Priv©eKey
);

2189 i‡(
°©us
 =
MCE_SUCCESS
 )

2191  
ZSuc˚ss
;

2194  
ZFaûuª
;

2195 
	}
}

2209 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablishmít_ECDSAVîify
–
uöt8
 *
öput
, uöt8 
öputLí
,

2210 
uöt8
 *
sig«tuª
)

2213 
uöt8
 
msgDige°
[
KEY_ESTABLISH_AES_MMO_HASH_SIZE
];

2214 
uöt16
 
bôLí
;

2215 
uöt8
 
ªt
;

2217 
bôLí
 = 
öputLí
 * 8;

2220 
	`s•MMOHash
(
NULL
, 0, 
öput
, 
bôLí
, 
msgDige°
);

2222 
ªt
 = 
	`ZSE_ECDSAVîify
((*)
NULL
, (*)
msgDige°
,

2223 (*)
sig«tuª
, (*)sig«tuª + 
KEY_ESTABLISH_POINT_ORDER_SIZE
,

2224 
z˛KeyE°ablish_YõldFunc
, 
z˛KeyE°ablish_YõldLevñ
 );

2226 i‡–
ªt
 =
MCE_SUCCESS
 )

2228  
ZSuc˚ss
;

2231  
ZFaûuª
;

2232 
	}
}

	@Components/stack/zcl/zcl_key_establish.h

40 #i‚de‡
ZCL_KEY_ESTABLISH_H


41 
	#ZCL_KEY_ESTABLISH_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

52 
	~"ecˇpi.h
"

58 
	#ZCL_KEY_ESTABLISHMENT_ENDPOINT
 10

59 

	)

61 
	#KEY_ESTABLISHMENT_REC_AGING_EVT
 0x01

	)

62 
	#KEY_ESTABLISHMENT_CMD_PROCESS_EVT
 0x02

	)

63 
	#KEY_ESTABLISHMENT_RSP_PROCESS_EVT
 0x04

	)

64 
	#KEY_ESTABLISHMENT_REC_AGING_INTERVAL
 1000

65 
	#KEY_ESTABLISHMENT_WAIT_PERIOD
 500

	)

68 
	#ATTRID_KEY_ESTABLISH_SUITE
 0x0000

	)

69 
	#CERTIFICATE_BASED_KEY_ESTABLISHMENT
 0x0000

	)

72 
	#COMMAND_INITIATE_KEY_ESTABLISHMENT
 0x00

	)

73 
	#COMMAND_EPHEMERAL_DATA_REQUEST
 0x01

	)

74 
	#COMMAND_CONFIRM_KEY
 0x02

	)

75 
	#COMMAND_TERMINATE_KEY_ESTABLISHMENT
 0x03

	)

76 
	#COMMAND_INITIATE_KEY_ESTABLISHMENT_RESPONSE
 0x00

	)

77 
	#COMMAND_EPHEMERAL_DATA_RESPONSE
 0x01

	)

78 
	#COMMAND_CONFIRM_KEY_RESPONSE
 0x02

	)

80 
	#COMMAND_GET_LINK_KEY
 0x04

	)

83 
	#PACKET_LEN_INITIATE_KEY_EST_REQ
 (4+
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
)

	)

84 
	#PACKET_LEN_INITIATE_KEY_EST_RSP
 (4+
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
)

	)

87 
	#KEY_ESTABLISH_SHARED_SECRET_LENGTH
 21

	)

88 
	#KEY_ESTABLISH_KEY_DATA_LENGTH
 16

	)

89 
	#KEY_ESTABLISH_MAC_KEY_LENGTH
 16

	)

90 
	#KEY_ESTABLISH_MAC_LENGTH
 16

	)

91 
	#KEY_ESTABLISH_POINT_ORDER_SIZE
 21

	)

92 
	#KEY_ESTABLISH_AES_MMO_HASH_SIZE
 16

	)

94 
	#KEY_ESTABLISH_CERT_EXT_ADDR_IDX
 22

	)

95 
	#KEY_ESTABLISH_CERT_ISSUER_IDX
 30

	)

96 
	#KEY_ESTABLISH_CERT_IDX
 4

	)

97 
	#KEY_ESTABLISH_CERT_ISSUER_LENTGH
 
Z_EXTADDR_LEN


	)

100 
	#MAX_KEY_ESTABLISHMENT_REC_ENTRY
 2

	)

102 
	#INVALID_PARTNER_ADDR
 0xFFFE

	)

105 
	#KEY_ESTABLISHMENT_INITIATOR
 0

	)

106 
	#KEY_ESTABLISHMENT_RESPONDER
 1

	)

108 
	#KEY_ESTABLISHMENT_REC_EXPIRY_TIME
 0xFF

109 
	#KEY_ESTABLISHMENT_EPH_DATA_GEN_INVALID_TIME
 0xFF

110 
	#KEY_ESTABLISHMENT_CONF_KEY_GEN_INVALID_TIME
 0xFF

111 

	)

113 #i‡!
deföed
 ( 
ZCL_KEY_ESTABLISHMENT_KEY_GENERATE_TIMEOUT
 )

114 
	#ZCL_KEY_ESTABLISHMENT_KEY_GENERATE_TIMEOUT
 4

	)

116 #i‡!
deföed
 ( 
ZCL_KEY_ESTABLISHMENT_MAC_GENERATE_TIMEOUT
 )

117 
	#ZCL_KEY_ESTABLISHMENT_MAC_GENERATE_TIMEOUT
 1

	)

119 #i‡!
deföed
 ( 
ZCL_KEY_ESTABLISHMENT_EKEY_GENERATE_TIMEOUT
 )

120 
	#ZCL_KEY_ESTABLISHMENT_EKEY_GENERATE_TIMEOUT
 1

	)

125 #i‡!
deföed
 (
ZCL_KEY_ESTABLISH_POLL_RATE
)

126 
	#ZCL_KEY_ESTABLISH_POLL_RATE
 1000

	)

136 
afAddrTy≥_t
 
d°Addr
;

137 
uöt8
 
œ°SeqNum
;

138 
uöt8
 
≠pTaskID
;

139 
uöt8
 
∑π√rExtAddr
[
Z_EXTADDR_LEN
];

140 
uöt8
 
rﬁe
;

142 
uöt8
 
age
;

143 
uöt8
 
°©e
;

146 
uöt8
 *
pLoˇlEPriv©eKey
;

147 
uöt8
 *
pLoˇlEPublicKey
;

148 
uöt8
 *
pRemŸePublicKey
;

149 
uöt8
 *
pRemŸeCîtifiˇã
;

151 
uöt8
 *
pKey
;

152 
uöt8
 *
pMacKey
;

154 
uöt8
 
ªmŸeEphD©aGíTime
;

155 
uöt8
 
ªmŸeC⁄fKeyGíTime
;

157 } 
	tz˛KeyE°ablishRec_t
;

162 
KeyE°ablishSèã_IdÀ
 = 0,

163 
KeyE°ablishSèã_InôüãPídög
,

164 
KeyE°ablishSèã_ED©aPídög
,

165 
KeyE°ablishSèã_KeyCÆcuœãPídög
,

166 
KeyE°ablishSèã_C⁄fúmPídög
,

167 
KeyE°ablishSèã_Tîmö©i⁄Pídög


168 } 
	tKeyE°ablishSèã_t
;

173 
TîmKeySètus_Suc˚ss
 = 0,

174 
TîmKeySètus_UnknowIssuî
,

175 
TîmKeySètus_BadKeyC⁄fúm
,

176 
TîmKeySètus_BadMesßge
,

177 
TîmKeySètus_NoResour˚s
,

178 
TîmKeySètus_UnSuµ‹ãdSuôe


179 } 
	tTîmKeySètus_t
;

185 
oßl_evít_hdr_t
 
hdr
;

186 
uöt8
 
waôTime
;

187 
uöt16
 
keyE°ablishmítSuôe
;

188 } 
	tkeyE°ablishmítInd_t
;

202 
z˛GíîÆ_KeyE°ablish_Inô
–
uöt8
 
èsk_id
 );

207 
uöt16
 
z˛KeyE°ablish_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

212 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
uöt8
 
≠pTaskID
,

213 
afAddrTy≥_t
 *
∑π√rAddr
,

214 
uöt8
 
£qNum
);

218 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_Síd_InôüãKeyE°ablishmít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

219 
uöt16
 
keyE°ablishmítSuôe
,

220 
uöt8
 
keyGíî©eTime
,

221 
uöt8
 
macGíî©eTime
,

222 
uöt8
 *
˚πifiˇã
,

223 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

228 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_Síd_EphemîÆD©aReq
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

229 
uöt8
 *
eD©a
,

230 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

235 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_Síd_C⁄fúmKey
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

236 
uöt8
 *
mac
,

237 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

242 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
uöt8
 
§cEP
,

243 
afAddrTy≥_t
 *
d°Addr
,

244 
TîmKeySètus_t
 
°©us
,

245 
uöt8
 
waôTime
,

246 
uöt16
 
keyE°ablishmítSuôe
, 
uöt8
 
dúe˘i⁄
,

247 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

252 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_Síd_InôüãKeyE°ablishmítR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

253 
uöt16
 
keyE°ablishmítSuôe
,

254 
uöt8
 
keyGíî©eTime
,

255 
uöt8
 
macGíî©eTime
,

256 
uöt8
 *
˚πifiˇã
,

257 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

262 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_Síd_EphemîÆD©aR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

263 
uöt8
 *
eD©a
,

264 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

269 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_Síd_C⁄fúmKeyR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

270 
uöt8
 *
mac
,

271 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

276 
ZSètus_t
 
z˛GíîÆ_KeyE°ablishmít_ECDSASign
–
uöt8
 *
öput
, uöt8 
öputLí
,

277 
uöt8
 *
ouçut
);

282 
ZSètus_t
 
z˛GíîÆ_KeyE°ablishmít_ECDSAVîify
–
uöt8
 *
öput
, uöt8 
öputLí
,

283 
uöt8
 *
sig«tuª
);

288 
z˛GíîÆ_KeyE°ablishmít_RegYõldCB
–
YõldFunc
 *
pFnYõld
,

289 
uöt8
 
yõldLevñ
 );

294 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_lighting.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

45 
	~"z˛.h
"

46 
	~"z˛_gíîÆ.h
"

47 
	~"z˛_lightög.h
"

49 #i‡
deföed
 ( 
INTER_PAN
 )

50 
	~"°ub_≠s.h
"

64 
	sz˛LightögCBRec


66 
z˛LightögCBRec
 *
	m√xt
;

67 
uöt8
 
	mídpoöt
;

68 
z˛Lightög_AµCÆlbacks_t
 *
	mCBs
;

69 } 
	tz˛LightögCBRec_t
;

82 
z˛LightögCBRec_t
 *
	gz˛LightögCBs
 = (z˛LightögCBRec_à*)
NULL
;

83 
uöt8
 
	gz˛LightögPlugöRegi°ed
 = 
FALSE
;

88 
ZSètus_t
 
z˛Lightög_HdlIncomög
–
z˛Incomög_t
 *
pInHdÃMsg
 );

89 
ZSètus_t
 
z˛Lightög_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

90 
z˛Lightög_AµCÆlbacks_t
 *
z˛Lightög_FödCÆlbacks
–
uöt8
 
ídpoöt
 );

92 
ZSètus_t
 
z˛Lightög_Pro˚ssInCﬁ‹C⁄åﬁCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

94 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToHue
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

95 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveHue
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

96 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpHue
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

97 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

98 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

99 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

100 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

101 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

102 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveCﬁ‹
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

103 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpCﬁ‹
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

104 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

117 
ZSètus_t
 
	$z˛Lightög_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛Lightög_AµCÆlbacks_t
 *
ˇŒbacks
 )

119 
z˛LightögCBRec_t
 *
pNewIãm
;

120 
z˛LightögCBRec_t
 *
pLo›
;

123 i‡–
z˛LightögPlugöRegi°ed
 =
FALSE
 )

125 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

126 
ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG
,

127 
z˛Lightög_HdlIncomög
 );

128 
z˛LightögPlugöRegi°ed
 = 
TRUE
;

132 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛LightögCBRec_t
 ) );

133 i‡–
pNewIãm
 =
NULL
 )

134  (
ZMemEº‹
);

136 
pNewIãm
->
√xt
 = (
z˛LightögCBRec_t
 *)
NULL
;

137 
pNewIãm
->
ídpoöt
 =Éndpoint;

138 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

141 i‡–
z˛LightögCBs
 =
NULL
 )

143 
z˛LightögCBs
 = 
pNewIãm
;

148 
pLo›
 = 
z˛LightögCBs
;

149  
pLo›
->
√xt
 !
NULL
 )

150 
pLo›
 =ÖLo›->
√xt
;

153 
pLo›
->
√xt
 = 
pNewIãm
;

156  ( 
ZSuc˚ss
 );

157 
	}
}

174 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToHueCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

175 
uöt8
 
hue
, uöt8 
dúe˘i⁄
, 
uöt16
 
å™sôi⁄Time
,

176 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

178 
uöt8
 
buf
[4];

180 
buf
[0] = 
hue
;

181 
buf
[1] = 
dúe˘i⁄
;

182 
buf
[2] = 
	`LO_UINT16
–
å™sôi⁄Time
 );

183 
buf
[3] = 
	`HI_UINT16
–
å™sôi⁄Time
 );

185  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

186 
COMMAND_LIGHTING_MOVE_TO_HUE
, 
TRUE
,

187 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 4, 
buf
 );

188 
	}
}

206 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveHueCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

207 
uöt8
 
moveMode
, uöt8 
øã
,

208 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

210 
uöt8
 
buf
[2];

212 
buf
[0] = 
moveMode
;

213 
buf
[1] = 
øã
;

215  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

216 
COMMAND_LIGHTING_MOVE_HUE
, 
TRUE
,

217 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

218 
	}
}

235 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_SãpHueCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

236 
uöt8
 
°ïMode
, uöt8 
°ïSize
, uöt8 
å™sôi⁄Time
,

237 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

239 
uöt8
 
buf
[3];

241 
buf
[0] = 
°ïMode
;

242 
buf
[1] = 
°ïSize
;

243 
buf
[2] = 
å™sôi⁄Time
;

245  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

246 
COMMAND_LIGHTING_STEP_HUE
, 
TRUE
,

247 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

248 
	}
}

265 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

266 
uöt8
 
ßtuøti⁄
, 
uöt16
 
å™sôi⁄Time
,

267 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

269 
uöt8
 
buf
[3];

271 
buf
[0] = 
ßtuøti⁄
;

272 
buf
[1] = 
	`LO_UINT16
–
å™sôi⁄Time
 );

273 
buf
[2] = 
	`HI_UINT16
–
å™sôi⁄Time
 );

275  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

276 
COMMAND_LIGHTING_MOVE_TO_SATURATION
, 
TRUE
,

277 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

278 
	}
}

295 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

296 
uöt8
 
moveMode
, uöt8 
øã
,

297 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

299 
uöt8
 
buf
[2];

301 
buf
[0] = 
moveMode
;

302 
buf
[1] = 
øã
;

304  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

305 
COMMAND_LIGHTING_MOVE_SATURATION
, 
TRUE
,

306 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

307 
	}
}

324 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_SãpS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

325 
uöt8
 
°ïMode
, uöt8 
°ïSize
, uöt8 
å™sôi⁄Time
,

326 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

328 
uöt8
 
buf
[3];

330 
buf
[0] = 
°ïMode
;

331 
buf
[1] = 
°ïSize
;

332 
buf
[2] = 
å™sôi⁄Time
;

334  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

335 
COMMAND_LIGHTING_STEP_SATURATION
, 
TRUE
,

336 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

337 
	}
}

354 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToHueAndS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

355 
uöt8
 
hue
, uöt8 
ßtuøti⁄
, 
uöt16
 
å™sôi⁄Time
,

356 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

358 
uöt8
 
buf
[4];

360 
buf
[0] = 
hue
;

361 
buf
[1] = 
ßtuøti⁄
;

362 
buf
[2] = 
	`LO_UINT16
–
å™sôi⁄Time
 );

363 
buf
[3] = 
	`HI_UINT16
–
å™sôi⁄Time
 );

365  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

366 
COMMAND_LIGHTING_MOVE_TO_HUE_AND_SATURATION
, 
TRUE
,

367 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 4, 
buf
 );

368 
	}
}

385 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToCﬁ‹Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

386 
uöt16
 
cﬁ‹X
, uöt16 
cﬁ‹Y
, uöt16 
å™sôi⁄Time
,

387 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

389 
uöt8
 
buf
[6];

391 
buf
[0] = 
	`LO_UINT16
–
cﬁ‹X
 );

392 
buf
[1] = 
	`HI_UINT16
–
cﬁ‹X
 );

393 
buf
[2] = 
	`LO_UINT16
–
cﬁ‹Y
 );

394 
buf
[3] = 
	`HI_UINT16
–
cﬁ‹Y
 );

395 
buf
[4] = 
	`LO_UINT16
–
å™sôi⁄Time
 );

396 
buf
[5] = 
	`HI_UINT16
–
å™sôi⁄Time
 );

398  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

399 
COMMAND_LIGHTING_MOVE_TO_COLOR
, 
TRUE
,

400 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 6, 
buf
 );

401 
	}
}

419 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveCﬁ‹Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

420 
öt16
 
øãX
, i¡16 
øãY
,

421 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

423 
uöt8
 
buf
[4];

425 
buf
[0] = 
	`LO_UINT16
–
øãX
 );

426 
buf
[1] = 
	`HI_UINT16
–
øãX
 );

427 
buf
[2] = 
	`LO_UINT16
–
øãY
 );

428 
buf
[3] = 
	`HI_UINT16
–
øãY
 );

430  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

431 
COMMAND_LIGHTING_MOVE_COLOR
, 
TRUE
,

432 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 4, 
buf
 );

433 
	}
}

451 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_SãpCﬁ‹Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

452 
öt16
 
°ïX
, i¡16 
°ïY
, 
uöt16
 
å™sôi⁄Time
,

453 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

455 
uöt8
 
buf
[6];

457 
buf
[0] = 
	`LO_UINT16
–
°ïX
 );

458 
buf
[1] = 
	`HI_UINT16
–
°ïX
 );

459 
buf
[2] = 
	`LO_UINT16
–
°ïY
 );

460 
buf
[3] = 
	`HI_UINT16
–
°ïY
 );

461 
buf
[4] = 
	`LO_UINT16
–
å™sôi⁄Time
 );

462 
buf
[5] = 
	`HI_UINT16
–
å™sôi⁄Time
 );

464  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

465 
COMMAND_LIGHTING_STEP_COLOR
, 
TRUE
,

466 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 6, 
buf
 );

467 
	}
}

484 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToCﬁ‹Tem≥øtuªCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

485 
uöt16
 
cﬁ‹Tem≥øtuª
, uöt16 
å™sôi⁄Time
,

486 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

488 
uöt8
 
buf
[4];

490 
buf
[0] = 
	`LO_UINT16
–
cﬁ‹Tem≥øtuª
 );

491 
buf
[1] = 
	`HI_UINT16
–
cﬁ‹Tem≥øtuª
 );

492 
buf
[2] = 
	`LO_UINT16
–
å™sôi⁄Time
 );

493 
buf
[3] = 
	`HI_UINT16
–
å™sôi⁄Time
 );

495  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

496 
COMMAND_LIGHTING_MOVE_TO_COLOR_TEMPERATURE
, 
TRUE
,

497 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 4, 
buf
 );

498 
	}
}

509 
z˛Lightög_AµCÆlbacks_t
 *
	$z˛Lightög_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

511 
z˛LightögCBRec_t
 *
pCBs
;

513 
pCBs
 = 
z˛LightögCBs
;

514  
pCBs
 !
NULL
 )

516 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

517  ( 
pCBs
->
CBs
 );

518 
pCBs
 =ÖCBs->
√xt
;

520  ( (
z˛Lightög_AµCÆlbacks_t
 *)
NULL
 );

521 
	}
}

534 
ZSètus_t
 
	$z˛Lightög_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

536 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

538 #i‡
	`deföed
 ( 
INTER_PAN
 )

539 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

540  ( 
°©
 );

542 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

545 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

547 
°©
 = 
	`z˛Lightög_HdlInS≥cificComm™ds
–
pInMsg
 );

552 
°©
 = 
ZFaûuª
;

558 
°©
 = 
ZFaûuª
;

560  ( 
°©
 );

561 
	}
}

573 
ZSètus_t
 
	$z˛Lightög_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

575 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

576 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
;

579 
pCBs
 = 
	`z˛Lightög_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

580 i‡(
pCBs
 =
NULL
 )

581  ( 
ZFaûuª
 );

583  
pInMsg
->
msg
->
˛u°îId
 )

585 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
:

586 
°©
 = 
	`z˛Lightög_Pro˚ssInCﬁ‹C⁄åﬁCmds
–
pInMsg
, 
pCBs
 );

589 
ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG
:

592 
°©
 = 
ZFaûuª
;

596  ( 
°©
 );

597 
	}
}

610 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCﬁ‹C⁄åﬁCmds
–
z˛Incomög_t
 *
pInMsg
,

611 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

613 
ZSètus_t
 
°©
;

615  
pInMsg
->
hdr
.
comm™dID
 )

617 
COMMAND_LIGHTING_MOVE_TO_HUE
:

618 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToHue
–
pInMsg
, 
pCBs
 );

621 
COMMAND_LIGHTING_MOVE_HUE
:

622 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveHue
–
pInMsg
, 
pCBs
 );

625 
COMMAND_LIGHTING_STEP_HUE
:

626 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpHue
–
pInMsg
, 
pCBs
 );

629 
COMMAND_LIGHTING_MOVE_TO_SATURATION
:

630 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄
–
pInMsg
, 
pCBs
 );

633 
COMMAND_LIGHTING_MOVE_SATURATION
:

634 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveS©uøti⁄
–
pInMsg
, 
pCBs
 );

637 
COMMAND_LIGHTING_STEP_SATURATION
:

638 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpS©uøti⁄
–
pInMsg
, 
pCBs
 );

641 
COMMAND_LIGHTING_MOVE_TO_HUE_AND_SATURATION
:

642 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄
–
pInMsg
, 
pCBs
 );

645 
COMMAND_LIGHTING_MOVE_TO_COLOR
:

646 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹
–
pInMsg
, 
pCBs
 );

649 
COMMAND_LIGHTING_MOVE_COLOR
:

650 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveCﬁ‹
–
pInMsg
, 
pCBs
 );

653 
COMMAND_LIGHTING_STEP_COLOR
:

654 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpCﬁ‹
–
pInMsg
, 
pCBs
 );

657 
COMMAND_LIGHTING_MOVE_TO_COLOR_TEMPERATURE
:

658 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª
–
pInMsg
, 
pCBs
 );

663 
°©
 = 
ZFaûuª
;

667  ( 
°©
 );

668 
	}
}

680 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToHue
–
z˛Incomög_t
 *
pInMsg
,

681 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

683 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveToHue
 )

685 
z˛CCMoveToHue_t
 
cmd
;

687 
cmd
.
hue
 = 
pInMsg
->
pD©a
[0];

688 
cmd
.
dúe˘i⁄
 = 
pInMsg
->
pD©a
[1];

689 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

691  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveToHue
–&
cmd
 ) );

694  ( 
ZFaûuª
 );

695 
	}
}

707 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveHue
–
z˛Incomög_t
 *
pInMsg
,

708 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

710 
z˛CCMoveHue_t
 
cmd
;

712 
cmd
.
moveMode
 = 
pInMsg
->
pD©a
[0];

713 
cmd
.
øã
 = 
pInMsg
->
pD©a
[1];

718 i‡–
cmd
.
øã
 == 0 )

720 
z˛DeÁu…R•Cmd_t
 
deÁu…R•Cmd
;

722 
deÁu…R•Cmd
.
comm™dID
 = 
pInMsg
->
hdr
.commandID;

723 
deÁu…R•Cmd
.
°©usCode
 = 
ZCL_STATUS_INVALID_FIELD
;

724 
	`z˛_SídDeÁu…R•Cmd
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

725 
pInMsg
->
msg
->
˛u°îId
, &
deÁu…R•Cmd
,

726 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
åue
, 0, 
pInMsg
->
hdr
.
å™sSeqNum
 );

729  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

732 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveHue
 )

733  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveHue
–&
cmd
 ) );

735  ( 
ZFaûuª
 );

736 
	}
}

748 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpHue
–
z˛Incomög_t
 *
pInMsg
,

749 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

751 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_SãpHue
 )

753 
z˛CCSãpHue_t
 
cmd
;

755 
cmd
.
°ïMode
 = 
pInMsg
->
pD©a
[0];

756 
cmd
.
°ïSize
 = 
pInMsg
->
pD©a
[1];

757 
cmd
.
å™sôi⁄Time
 = 
pInMsg
->
pD©a
[2];

759  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_SãpHue
–&
cmd
 ) );

762  ( 
ZFaûuª
 );

763 
	}
}

775 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
,

776 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

778 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄
 )

780 
z˛CCMoveToS©uøti⁄_t
 
cmd
;

782 
cmd
.
ßtuøti⁄
 = 
pInMsg
->
pD©a
[0];

783 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[1],ÖInMsg->pData[2] );

785  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄
–&
cmd
 ) );

788  ( 
ZFaûuª
 );

789 
	}
}

801 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
,

802 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

804 
z˛CCMoveS©uøti⁄_t
 
cmd
;

806 
cmd
.
moveMode
 = 
pInMsg
->
pD©a
[0];

807 
cmd
.
øã
 = 
pInMsg
->
pD©a
[1];

812 i‡–
cmd
.
øã
 == 0 )

814 
z˛DeÁu…R•Cmd_t
 
deÁu…R•Cmd
;

816 
deÁu…R•Cmd
.
comm™dID
 = 
pInMsg
->
hdr
.commandID;

817 
deÁu…R•Cmd
.
°©usCode
 = 
ZCL_STATUS_INVALID_FIELD
;

818 
	`z˛_SídDeÁu…R•Cmd
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

819 
pInMsg
->
msg
->
˛u°îId
, &
deÁu…R•Cmd
,

820 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
åue
, 0, 
pInMsg
->
hdr
.
å™sSeqNum
 );

823  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

826 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveS©uøti⁄
 )

827  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveS©uøti⁄
–&
cmd
 ) );

829  ( 
ZFaûuª
 );

830 
	}
}

842 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
,

843 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

845 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_SãpS©uøti⁄
 )

847 
z˛CCSãpS©uøti⁄_t
 
cmd
;

849 
cmd
.
°ïMode
 = 
pInMsg
->
pD©a
[0];

850 
cmd
.
°ïSize
 = 
pInMsg
->
pD©a
[1];

851 
cmd
.
å™sôi⁄Time
 = 
pInMsg
->
pD©a
[2];

853  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_SãpS©uøti⁄
–&
cmd
 ) );

856  ( 
ZFaûuª
 );

857 
	}
}

869 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
,

870 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

872 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄
 )

874 
z˛CCMoveToHueAndS©uøti⁄_t
 
cmd
;

876 
cmd
.
hue
 = 
pInMsg
->
pD©a
[0];

877 
cmd
.
ßtuøti⁄
 = 
pInMsg
->
pD©a
[1];

878 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

880  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄
–&
cmd
 ) );

883  ( 
ZFaûuª
 );

884 
	}
}

896 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹
–
z˛Incomög_t
 *
pInMsg
,

897 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

899 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveToCﬁ‹
 )

901 
z˛CCMoveToCﬁ‹_t
 
cmd
;

903 
cmd
.
cﬁ‹X
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

904 
cmd
.
cﬁ‹Y
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

905 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[4],ÖInMsg->pData[5] );

907  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveToCﬁ‹
–&
cmd
 ) );

910  ( 
ZFaûuª
 );

911 
	}
}

923 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveCﬁ‹
–
z˛Incomög_t
 *
pInMsg
,

924 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

926 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveCﬁ‹
 )

928 
z˛CCMoveCﬁ‹_t
 
cmd
;

930 
cmd
.
øãX
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

931 
cmd
.
øãY
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

933 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveCﬁ‹
–&
cmd
 );

935  ( 
ZSuc˚ss
 );

938  ( 
ZFaûuª
 );

939 
	}
}

951 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpCﬁ‹
–
z˛Incomög_t
 *
pInMsg
,

952 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

954 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_SãpCﬁ‹
 )

956 
z˛CCSãpCﬁ‹_t
 
cmd
;

958 
cmd
.
°ïX
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

959 
cmd
.
°ïY
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

960 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[4],ÖInMsg->pData[5] );

962  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_SãpCﬁ‹
–&
cmd
 ) );

965  ( 
ZFaûuª
 );

966 
	}
}

978 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª
–
z˛Incomög_t
 *
pInMsg
,

979 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

981 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª
 )

983 
z˛CCMoveToCﬁ‹Tem≥øtuª_t
 
cmd
;

985 
cmd
.
cﬁ‹Tem≥øtuª
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

986 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

988  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª
–&
cmd
 ) );

991  ( 
ZFaûuª
 );

992 
	}
}

	@Components/stack/zcl/zcl_lighting.h

40 #i‚de‡
ZCL_LIGHTING_H


41 
	#ZCL_LIGHTING_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

61 
	#ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_HUE
 0x0000

	)

62 
	#ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_SATURATION
 0x0001

	)

63 
	#ATTRID_LIGHTING_COLOR_CONTROL_REMAINING_TIME
 0x0002

	)

64 
	#ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_X
 0x0003

	)

65 
	#ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_Y
 0x0004

	)

66 
	#ATTRID_LIGHTING_COLOR_CONTROL_DRIFT_COMPENSATION
 0x0005

	)

67 
	#ATTRID_LIGHTING_COLOR_CONTROL_COMPENSATION_TEXT
 0x0006

	)

68 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_TEMPERATURE
 0x0007

	)

69 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_MODE
 0x0008

	)

72 
	#ATTRID_LIGHTING_COLOR_CONTROL_NUM_PRIMARIES
 0x0010

	)

73 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_1_X
 0x0011

	)

74 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_1_Y
 0x0012

	)

75 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_1_INTENSITY
 0x0013

	)

77 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_2_X
 0x0015

	)

78 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_2_Y
 0x0016

	)

79 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_2_INTENSITY
 0x0017

	)

81 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_3_X
 0x0019

	)

82 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_3_Y
 0x001a

	)

83 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_3_INTENSITY
 0x001b

	)

86 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_4_X
 0x0020

	)

87 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_4_Y
 0x0021

	)

88 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_4_INTENSITY
 0x0022

	)

90 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_5_X
 0x0024

	)

91 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_5_Y
 0x0025

	)

92 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_5_INTENSITY
 0x0026

	)

94 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_6_X
 0x0028

	)

95 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_6_Y
 0x0029

	)

96 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_6_INTENSITY
 0x002a

	)

99 
	#ATTRID_LIGHTING_COLOR_CONTROL_WHITE_POINT_X
 0x0030

	)

100 
	#ATTRID_LIGHTING_COLOR_CONTROL_WHITE_POINT_Y
 0x0031

	)

101 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_R_X
 0x0032

	)

102 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_R_Y
 0x0033

	)

103 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_R_INTENSITY
 0x0034

	)

105 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_G_X
 0x0036

	)

106 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_G_Y
 0x0037

	)

107 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_B_INTENSITY
 0x0038

	)

109 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_B_X
 0x003a

	)

110 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_B_Y
 0x003b

	)

111 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_G_INTENSITY
 0x003c

	)

115 
	#DRIFT_COMP_NONE
 0x00

	)

116 
	#DRIFT_COMP_OTHER_UNKNOWN
 0x01

	)

117 
	#DRIFT_COMP_TEMPERATURE_MONITOR
 0x02

	)

118 
	#DRIFT_COMP_OPTICAL_LUMINANCE_MONITOR_FEEDBACK
 0x03

	)

119 
	#DRIFT_COMP_OPTICAL_COLOR_MONITOR_FEEDBACK
 0x04

	)

122 
	#COLOR_MODE_CURRENT_HUE_SATURATION
 0x00

	)

123 
	#COLOR_MODE_CURRENT_X_Y
 0x01

	)

124 
	#COLOR_MODE_COLOR_TEMPERATURE
 0x02

	)

129 
	#COMMAND_LIGHTING_MOVE_TO_HUE
 0x00

	)

130 
	#COMMAND_LIGHTING_MOVE_HUE
 0x01

	)

131 
	#COMMAND_LIGHTING_STEP_HUE
 0x02

	)

132 
	#COMMAND_LIGHTING_MOVE_TO_SATURATION
 0x03

	)

133 
	#COMMAND_LIGHTING_MOVE_SATURATION
 0x04

	)

134 
	#COMMAND_LIGHTING_STEP_SATURATION
 0x05

	)

135 
	#COMMAND_LIGHTING_MOVE_TO_HUE_AND_SATURATION
 0x06

	)

136 
	#COMMAND_LIGHTING_MOVE_TO_COLOR
 0x07

	)

137 
	#COMMAND_LIGHTING_MOVE_COLOR
 0x08

	)

138 
	#COMMAND_LIGHTING_STEP_COLOR
 0x09

	)

139 
	#COMMAND_LIGHTING_MOVE_TO_COLOR_TEMPERATURE
 0x0a

	)

142 
	#LIGHTING_MOVE_TO_HUE_DIRECTION_SHORTEST_DISTANCE
 0x00

	)

143 
	#LIGHTING_MOVE_TO_HUE_DIRECTION_LONGEST_DISTANCE
 0x01

	)

144 
	#LIGHTING_MOVE_TO_HUE_DIRECTION_UP
 0x02

	)

145 
	#LIGHTING_MOVE_TO_HUE_DIRECTION_DOWN
 0x03

	)

147 
	#LIGHTING_MOVE_HUE_STOP
 0x00

	)

148 
	#LIGHTING_MOVE_HUE_UP
 0x01

	)

149 
	#LIGHTING_MOVE_HUE_DOWN
 0x03

	)

151 
	#LIGHTING_STEP_HUE_UP
 0x01

	)

152 
	#LIGHTING_STEP_HUE_DOWN
 0x03

	)

154 
	#LIGHTING_MOVE_SATURATION_STOP
 0x00

	)

155 
	#LIGHTING_MOVE_SATURATION_UP
 0x01

	)

156 
	#LIGHTING_MOVE_SATURATION_DOWN
 0x03

	)

158 
	#LIGHTING_STEP_SATURATION_UP
 0x01

	)

159 
	#LIGHTING_STEP_SATURATION_DOWN
 0x03

	)

165 
	#ATTRID_LIGHTING_BALLAST_CONFIG_PHYSICAL_MIN_LEVEL
 0x0000

	)

166 
	#ATTRID_LIGHTING_BALLAST_CONFIG_PHYSICAL_MAX_LEVEL
 0x0001

	)

167 
	#ATTRID_LIGHTING_BALLAST_BALLAST_STATUS
 0x0002

	)

169 
	#LIGHTING_BALLAST_STATUS_NON_OPERATIONAL
 1

170 
	#LIGHTING_BALLAST_STATUS_LAMP_IS_NOT_IN_SOCKET
 2

172 
	#ATTRID_LIGHTING_BALLAST_MIN_LEVEL
 0x0010

	)

173 
	#ATTRID_LIGHTING_BALLAST_MAX_LEVEL
 0x0011

	)

174 
	#ATTRID_LIGHTING_BALLAST_POWER_ON_LEVEL
 0x0012

	)

175 
	#ATTRID_LIGHTING_BALLAST_POWER_ON_FADE_TIME
 0x0013

	)

176 
	#ATTRID_LIGHTING_BALLAST_INTRISTIC_BALLAST_FACTOR
 0x0014

	)

177 
	#ATTRID_LIGHTING_BALLAST_BALLAST_FACTOR_ADJUSTMENT
 0x0015

	)

179 
	#ATTRID_LIGHTING_BALLAST_LAMP_QUANTITY
 0x0020

	)

181 
	#ATTRID_LIGHTING_BALLAST_LAMP_TYPE
 0x0030

	)

182 
	#ATTRID_LIGHTING_BALLAST_LAMP_MANUFACTURER
 0x0031

	)

183 
	#ATTRID_LIGHTING_BALLAST_LAMP_RATED_HOURS
 0x0032

	)

184 
	#ATTRID_LIGHTING_BALLAST_LAMP_BURN_HOURS
 0x0033

	)

185 
	#ATTRID_LIGHTING_BALLAST_LAMP_ALARM_MODE
 0x0034

	)

186 
	#ATTRID_LIGHTING_BALLAST_LAMP_BURN_HOURS_TRIP_POINT
 0x0035

	)

188 
	#LIGHTING_BALLAST_LAMP_ALARM_MODE_BIT_0_NO_ALARM
 0

	)

189 
	#LIGHTING_BALLAST_LAMP_ALARM_MODE_BIT_0_ALARM
 1

	)

198 
uöt8
 
hue
;

199 
uöt8
 
dúe˘i⁄
;

200 
uöt16
 
å™sôi⁄Time
;

201 } 
	tz˛CmdLightögMoveToHuePaylﬂd_t
;

206 
uöt8
 
moveMode
;

207 
uöt8
 
øã
;

208 } 
	tz˛CmdLightögMoveHuePaylﬂd_t
;

213 
uöt8
 
°ïMode
;

214 
uöt8
 
å™sôi⁄Time
;

215 } 
	tz˛CmdLightögSãpHuePaylﬂd_t
;

220 
uöt8
 
ßtuøti⁄
;

221 
uöt16
 
å™sôi⁄Time
;

222 } 
	tz˛CmdLightögMoveToS©uøti⁄Paylﬂd_t
;

227 
uöt8
 
moveMode
;

228 
uöt8
 
øã
;

229 } 
	tz˛CmdLightögMoveS©uøti⁄Paylﬂd_t
;

234 
uöt8
 
°ïMode
;

235 
uöt8
 
å™sôi⁄Time
;

236 } 
	tz˛CmdLightögSãpS©uøti⁄Paylﬂd_t
;

241 
uöt8
 
hue
;

242 
uöt8
 
ßtuøti⁄
;

243 
uöt16
 
å™sôi⁄Time
;

244 } 
	tz˛CmdLightögMoveToHueAndS©uøti⁄Paylﬂd_t
;

250 
uöt8
 
hue
;

251 
uöt8
 
dúe˘i⁄
;

252 
uöt16
 
å™sôi⁄Time
;

253 } 
	tz˛CCMoveToHue_t
;

257 
uöt8
 
moveMode
;

258 
uöt8
 
øã
;

259 } 
	tz˛CCMoveHue_t
;

263 
uöt8
 
°ïMode
;

264 
uöt8
 
°ïSize
;

265 
uöt8
 
å™sôi⁄Time
;

266 } 
	tz˛CCSãpHue_t
;

270 
uöt8
 
ßtuøti⁄
;

271 
uöt16
 
å™sôi⁄Time
;

272 } 
	tz˛CCMoveToS©uøti⁄_t
;

276 
uöt8
 
moveMode
;

278 
uöt8
 
øã
;

279 } 
	tz˛CCMoveS©uøti⁄_t
;

283 
uöt8
 
°ïMode
;

284 
uöt8
 
°ïSize
;

285 
uöt8
 
å™sôi⁄Time
;

286 } 
	tz˛CCSãpS©uøti⁄_t
;

290 
uöt8
 
hue
;

291 
uöt8
 
ßtuøti⁄
;

292 
uöt16
 
å™sôi⁄Time
;

293 } 
	tz˛CCMoveToHueAndS©uøti⁄_t
;

297 
uöt16
 
cﬁ‹X
;

298 
uöt16
 
cﬁ‹Y
;

299 
uöt16
 
å™sôi⁄Time
;

300 } 
	tz˛CCMoveToCﬁ‹_t
;

304 
öt16
 
øãX
;

306 
öt16
 
øãY
;

308 } 
	tz˛CCMoveCﬁ‹_t
;

312 
öt16
 
°ïX
;

313 
öt16
 
°ïY
;

314 
uöt16
 
å™sôi⁄Time
;

315 } 
	tz˛CCSãpCﬁ‹_t
;

319 
uöt16
 
cﬁ‹Tem≥øtuª
;

320 
uöt16
 
å™sôi⁄Time
;

321 } 
	tz˛CCMoveToCﬁ‹Tem≥øtuª_t
;

327 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_MoveToHue_t
)–
	tz˛CCMoveToHue_t
 *
	tpCmd
 );

332 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_MoveHue_t
)–
	tz˛CCMoveHue_t
 *
	tpCmd
 );

337 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_SãpHue_t
)–
	tz˛CCSãpHue_t
 *
	tpCmd
 );

342 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄_t
)–
	tz˛CCMoveToS©uøti⁄_t
 *
	tpCmd
 );

347 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_MoveS©uøti⁄_t
)–
	tz˛CCMoveS©uøti⁄_t
 *
	tpCmd
 );

352 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_SãpS©uøti⁄_t
)–
	tz˛CCSãpS©uøti⁄_t
 *
	tpCmd
 );

358 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄_t
)–
	tz˛CCMoveToHueAndS©uøti⁄_t
 *
	tpCmd
 );

364 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹_t
)–
	tz˛CCMoveToCﬁ‹_t
 *
	tpCmd
 );

371 (*
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveCﬁ‹_t
)–
	tz˛CCMoveCﬁ‹_t
 *
	tpCmd
 );

378 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_SãpCﬁ‹_t
)–
	tz˛CCSãpCﬁ‹_t
 *
	tpCmd
 );

384 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª_t
)–
	tz˛CCMoveToCﬁ‹Tem≥øtuª_t
 *
	tpCmd
 );

391 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveToHue_t
 
p‚Cﬁ‹C⁄åﬁ_MoveToHue
;

392 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveHue_t
 
p‚Cﬁ‹C⁄åﬁ_MoveHue
;

393 
z˛Lightög_Cﬁ‹C⁄åﬁ_SãpHue_t
 
p‚Cﬁ‹C⁄åﬁ_SãpHue
;

394 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄_t
 
p‚Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄
;

395 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveS©uøti⁄_t
 
p‚Cﬁ‹C⁄åﬁ_MoveS©uøti⁄
;

396 
z˛Lightög_Cﬁ‹C⁄åﬁ_SãpS©uøti⁄_t
 
p‚Cﬁ‹C⁄åﬁ_SãpS©uøti⁄
;

397 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄_t
 
p‚Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄
;

398 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹_t
 
p‚Cﬁ‹C⁄åﬁ_MoveToCﬁ‹
;

399 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveCﬁ‹_t
 
p‚Cﬁ‹C⁄åﬁ_MoveCﬁ‹
;

400 
z˛Lightög_Cﬁ‹C⁄åﬁ_SãpCﬁ‹_t
 
p‚Cﬁ‹C⁄åﬁ_SãpCﬁ‹
;

401 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª_t
 
p‚Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª
;

403 } 
	tz˛Lightög_AµCÆlbacks_t
;

421 
ZSètus_t
 
z˛Lightög_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛Lightög_AµCÆlbacks_t
 *
ˇŒbacks
 );

430 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToHueCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

431 
uöt8
 
hue
, uöt8 
dúe˘i⁄
, 
uöt16
 
å™sôi⁄Time
,

432 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

440 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveHueCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

441 
uöt8
 
moveMode
, uöt8 
øã
,

442 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

450 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_SãpHueCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

451 
uöt8
 
°ïMode
, uöt8 
°ïSize
, uöt8 
å™sôi⁄Time
,

452 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

459 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

460 
uöt8
 
ßtuøti⁄
, 
uöt16
 
å™sôi⁄Time
,

461 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

470 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

471 
uöt8
 
moveMode
, uöt8 
øã
,

472 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

480 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_SãpS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

481 
uöt8
 
°ïMode
, uöt8 
°ïSize
, uöt8 
å™sôi⁄Time
,

482 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

490 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToHueAndS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

491 
uöt8
 
hue
, uöt8 
ßtuøti⁄
, 
uöt16
 
å™sôi⁄Time
,

492 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

500 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToCﬁ‹Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

501 
uöt16
 
cﬁ‹X
, uöt16 
cﬁ‹Y
, uöt16 
å™sôi⁄Time
,

502 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

511 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveCﬁ‹Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

512 
öt16
 
øãX
, i¡16 
øãY
,

513 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

522 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_SãpCﬁ‹Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

523 
öt16
 
°ïX
, i¡16 
°ïY
, 
uöt16
 
å™sôi⁄Time
,

524 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

532 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToCﬁ‹Tem≥øtuªCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

533 
uöt16
 
cﬁ‹Tem≥øtuª
, uöt16 
å™sôi⁄Time
,

534 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

539 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_ms.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

45 
	~"z˛.h
"

46 
	~"z˛_gíîÆ.h
"

47 
	~"z˛_ms.h
"

49 #i‡
deföed
 ( 
INTER_PAN
 )

50 
	~"°ub_≠s.h
"

64 
	sz˛MSCBRec


66 
z˛MSCBRec
 *
	m√xt
;

67 
uöt8
 
	mídpoöt
;

68 
z˛MS_AµCÆlbacks_t
 *
	mCBs
;

69 } 
	tz˛MSCBRec_t
;

82 
z˛MSCBRec_t
 *
	gz˛MSCBs
 = (z˛MSCBRec_à*)
NULL
;

83 
uöt8
 
	gz˛MSPlugöRegi°ed
 = 
FALSE
;

88 
ZSètus_t
 
z˛MS_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

89 
ZSètus_t
 
z˛MS_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

90 
z˛MS_AµCÆlbacks_t
 *
z˛MS_FödCÆlbacks
–
uöt8
 
ídpoöt
 );

92 
ZSètus_t
 
z˛MS_Pro˚ssIn_IŒumö™˚MósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 );

93 
ZSètus_t
 
z˛MS_Pro˚ssIn_IŒumö™˚LevñSísögCmds
–
z˛Incomög_t
 *
pInMsg
 );

94 
ZSètus_t
 
z˛MS_Pro˚ssIn_Tem≥øtuªMósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 );

95 
ZSètus_t
 
z˛MS_Pro˚ssIn_PªssuªMósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 );

96 
ZSètus_t
 
z˛MS_Pro˚ssIn_FlowMósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 );

97 
ZSètus_t
 
z˛MS_Pro˚ssIn_Rñ©iveHumidôyCmds
–
z˛Incomög_t
 *
pInMsg
 );

98 
ZSètus_t
 
z˛MS_Pro˚ssIn_Occu∑ncySísögCmds
–
z˛Incomög_t
 *
pInMsg
 );

110 
ZSètus_t
 
	$z˛MS_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛MS_AµCÆlbacks_t
 *
ˇŒbacks
 )

112 
z˛MSCBRec_t
 *
pNewIãm
;

113 
z˛MSCBRec_t
 *
pLo›
;

116 i‡–!
z˛MSPlugöRegi°ed
 )

118 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT
,

119 
ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING
,

120 
z˛MS_HdlIncomög
 );

121 
z˛MSPlugöRegi°ed
 = 
TRUE
;

125 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛MSCBRec_t
 ) );

126 i‡–
pNewIãm
 =
NULL
 )

127  (
ZMemEº‹
);

129 
pNewIãm
->
√xt
 = (
z˛MSCBRec_t
 *)
NULL
;

130 
pNewIãm
->
ídpoöt
 =Éndpoint;

131 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

134 i‡–
z˛MSCBs
 =
NULL
 )

136 
z˛MSCBs
 = 
pNewIãm
;

141 
pLo›
 = 
z˛MSCBs
;

142  
pLo›
->
√xt
 !
NULL
 )

143 
pLo›
 =ÖLo›->
√xt
;

146 
pLo›
->
√xt
 = 
pNewIãm
;

148  ( 
ZSuc˚ss
 );

149 
	}
}

160 
z˛MS_AµCÆlbacks_t
 *
	$z˛MS_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

162 
z˛MSCBRec_t
 *
pCBs
;

164 
pCBs
 = 
z˛MSCBs
;

165  
pCBs
 )

167 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

168  ( 
pCBs
->
CBs
 );

169 
pCBs
 =ÖCBs->
√xt
;

171  ( (
z˛MS_AµCÆlbacks_t
 *)
NULL
 );

172 
	}
}

186 
ZSètus_t
 
	$z˛MS_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

188 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

190 #i‡
	`deföed
 ( 
INTER_PAN
 )

191 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

192  ( 
°©
 );

194 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

197 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

199 
°©
 = 
	`z˛MS_HdlInS≥cificComm™ds
–
pInMsg
 );

204 
°©
 = 
ZFaûuª
;

210 
°©
 = 
ZFaûuª
;

212  ( 
°©
 );

213 
	}
}

225 
ZSètus_t
 
	$z˛MS_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

227 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

228 
z˛MS_AµCÆlbacks_t
 *
pCBs
;

231 
pCBs
 = (*)
	`z˛MS_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

232 i‡–
pCBs
 =
NULL
 )

233  ( 
ZFaûuª
 );

235  
pInMsg
->
msg
->
˛u°îId
 )

237 
ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT
:

238 
°©
 = 
	`z˛MS_Pro˚ssIn_IŒumö™˚MósuªmítCmds
–
pInMsg
 );

241 
ZCL_CLUSTER_ID_MS_ILLUMINANCE_LEVEL_SENSING_CONFIG
:

242 
°©
 = 
	`z˛MS_Pro˚ssIn_IŒumö™˚LevñSísögCmds
–
pInMsg
 );

245 
ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT
:

246 
°©
 = 
	`z˛MS_Pro˚ssIn_Tem≥øtuªMósuªmítCmds
–
pInMsg
 );

249 
ZCL_CLUSTER_ID_MS_PRESSURE_MEASUREMENT
:

250 
°©
 = 
	`z˛MS_Pro˚ssIn_PªssuªMósuªmítCmds
–
pInMsg
 );

253 
ZCL_CLUSTER_ID_MS_FLOW_MEASUREMENT
:

254 
°©
 = 
	`z˛MS_Pro˚ssIn_FlowMósuªmítCmds
–
pInMsg
 );

257 
ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY
:

258 
°©
 = 
	`z˛MS_Pro˚ssIn_Rñ©iveHumidôyCmds
–
pInMsg
 );

261 
ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING
:

262 
°©
 = 
	`z˛MS_Pro˚ssIn_Occu∑ncySísögCmds
–
pInMsg
 );

266 
°©
 = 
ZFaûuª
;

270  ( 
°©
 );

271 
	}
}

283 
ZSètus_t
 
	$z˛MS_Pro˚ssIn_IŒumö™˚MósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 )

285 
ZSètus_t
 
°©
 = 
ZFaûuª
;

290 ()
pInMsg
;

291 i‡–
°©
 !
ZFaûuª
 )

292 
	`z˛MS_FödCÆlbacks
( 0 );

294  ( 
°©
 );

295 
	}
}

307 
ZSètus_t
 
	$z˛MS_Pro˚ssIn_IŒumö™˚LevñSísögCmds
–
z˛Incomög_t
 *
pInMsg
 )

309 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

310 
uöt8
 
cmdID
;

312 
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

314  
cmdID
 )

318 
°©
 = 
ZFaûuª
;

322  ( 
°©
 );

323 
	}
}

335 
ZSètus_t
 
	$z˛MS_Pro˚ssIn_Tem≥øtuªMósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 )

337 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

338 
uöt8
 
cmdID
;

340 
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

342  
cmdID
 )

346 
°©
 = 
ZFaûuª
;

350  ( 
°©
 );

351 
	}
}

363 
ZSètus_t
 
	$z˛MS_Pro˚ssIn_PªssuªMósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 )

365 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

366 
uöt8
 
cmdID
;

368 
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

370  
cmdID
 )

373 
°©
 = 
ZFaûuª
;

377  ( 
°©
 );

378 
	}
}

390 
ZSètus_t
 
	$z˛MS_Pro˚ssIn_FlowMósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 )

392 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

393 
uöt8
 
cmdID
;

395 
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

397  
cmdID
 )

401 
°©
 = 
ZFaûuª
;

405  ( 
°©
 );

406 
	}
}

418 
ZSètus_t
 
	$z˛MS_Pro˚ssIn_Rñ©iveHumidôyCmds
–
z˛Incomög_t
 *
pInMsg
 )

420 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

421 
uöt8
 
cmdID
;

423 
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

425  
cmdID
 )

429 
°©
 = 
ZFaûuª
;

433  ( 
°©
 );

434 
	}
}

446 
ZSètus_t
 
	$z˛MS_Pro˚ssIn_Occu∑ncySísögCmds
–
z˛Incomög_t
 *
pInMsg
 )

448 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

449 
uöt8
 
cmdID
;

451 
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

453  
cmdID
 )

457 
°©
 = 
ZFaûuª
;

461  ( 
°©
 );

462 
	}
}

	@Components/stack/zcl/zcl_ms.h

40 #i‚de‡
ZCL_MS_H


41 
	#ZCL_MS_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

62 
	#ATTRID_MS_ILLUMINANCE_MEASURED_VALUE
 0x0000

	)

63 
	#ATTRID_MS_ILLUMINANCE_MIN_MEASURED_VALUE
 0x0001

	)

64 
	#ATTRID_MS_ILLUMINANCE_MAX_MEASURED_VALUE
 0x0002

	)

65 
	#ATTRID_MS_ILLUMINANCE_TOLERANCE
 0x0003

	)

66 
	#ATTRID_MS_ILLUMINANCE_LIGHT_SENSOR_TYPE
 0x0004

	)

71 
	#MS_ILLUMINANCE_LIGHT_SENSOR_PHOTODIODE
 0x00

	)

72 
	#MS_ILLUMINANCE_LIGHT_SENSOR_CMOS
 0x01

	)

73 
	#MS_ILLUMINANCE_LIGHT_SENSOR_UNKNOWN
 0xFF

	)

79 
	#ATTRID_MS_ILLUMINANCE_LEVEL_STATUS
 0x0000

	)

80 
	#ATTRID_MS_ILLUMINANCE_LEVEL_LIGHT_SENSOR_TYPE
 0x0001

	)

82 
	#MS_ILLUMINANCE_LEVEL_ON_TARGET
 0x00

	)

83 
	#MS_ILLUMINANCE_LEVEL_BELOW_TARGET
 0x01

	)

84 
	#MS_ILLUMINANCE_LEVEL_ABOVE_TARGET
 0x02

	)

86 
	#MS_ILLUMINANCE_LEVEL_LIGHT_SENSOR_PHOTODIODE
 0x00

	)

87 
	#MS_ILLUMINANCE_LEVEL_LIGHT_SENSOR_CMOS
 0x01

	)

88 
	#MS_ILLUMINANCE_LEVEL_LIGHT_SENSOR_UNKNOWN
 0xFF

	)

90 
	#ATTRID_MS_ILLUMINANCE_TARGET_LEVEL
 0x0010

	)

96 
	#ATTRID_MS_TEMPERATURE_MEASURED_VALUE
 0x0000

	)

97 
	#ATTRID_MS_TEMPERATURE_MIN_MEASURED_VALUE
 0x0001

	)

98 
	#ATTRID_MS_TEMPERATURE_MAX_MEASURED_VALUE
 0x0002

	)

99 
	#ATTRID_MS_TEMPERATURE_TOLERANCE
 0x0003

	)

101 
	#ATTRID_MS_TEMPERATURE_MIN_PERCENT_CHANGE
 0x0010

	)

102 
	#ATTRID_MS_TEMPERATURE_MIN_ABSOLUTE_CHANGE
 0x0011

	)

108 
	#ATTRID_MS_PRESSURE_MEASUREMENT_MEASURED_VALUE
 0x0000

	)

109 
	#ATTRID_MS_PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE
 0x0001

	)

110 
	#ATTRID_MS_PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE
 0x0002

	)

111 
	#ATTRID_MS_PRESSURE_MEASUREMENT_TOLERANCE
 0x0003

	)

120 
	#ATTRID_MS_FLOW_MEASUREMENT_MEASURED_VALUE
 0x0000

	)

121 
	#ATTRID_MS_FLOW_MEASUREMENT_MIN_MEASURED_VALUE
 0x0001

	)

122 
	#ATTRID_MS_FLOW_MEASUREMENT_MAX_MEASURED_VALUE
 0x0002

	)

123 
	#ATTRID_MS_FLOW_MEASUREMENT_TOLERANCE
 0x0003

	)

132 
	#ATTRID_MS_RELATIVE_HUMIDITY_MEASURED_VALUE
 0x0000

	)

133 
	#ATTRID_MS_RELATIVE_HUMIDITY_MIN_MEASURED_VALUE
 0x0001

	)

134 
	#ATTRID_MS_RELATIVE_HUMIDITY_MAX_MEASURED_VALUE
 0x0002

	)

135 
	#ATTRID_MS_RELATIVE_HUMIDITY_TOLERANCE
 0x0003

	)

141 
	#ATTRID_MS_OCCUPANCY_SENSING_CONFIG_OCCUPANCY
 0x0000

	)

142 
	#ATTRID_MS_OCCUPANCY_SENSING_CONFIG_OCCUPANCY_SENSOR_TYPE
 0x0001

	)

144 
	#MS_OCCUPANCY_SENSOR_TYPE_PIR
 0x00

	)

145 
	#MS_OCCUPANCY_SENSOR_TYPE_ULTRASONIC
 0x01

	)

146 
	#MS_OCCUPANCY_SENSOR_TYPE_PIR_AND_ULTRASONIC
 0x02

	)

148 
	#ATTRID_MS_OCCUPANCY_SENSING_CONFIG_PIR_O_TO_U_DELAY
 0x0010

	)

149 
	#ATTRID_MS_OCCUPANCY_SENSING_CONFIG_PIR_U_TO_O_DELAY
 0x0011

	)

151 
	#ATTRID_MS_OCCUPANCY_SENSING_CONFIG_ULTRASONIC_O_TO_U_DELAY
 0x0020

	)

152 
	#ATTRID_MS_OCCUPANCY_SENSING_CONFIG_ULTRASONIC_U_TO_O_DELAY
 0x0021

	)

163 (*
z˛MS_Pœ˚Hﬁdî_t
)( );

169 
z˛MS_Pœ˚Hﬁdî_t
 
p‚MSPœ˚Hﬁdî
;

171 } 
	tz˛MS_AµCÆlbacks_t
;

186 
ZSètus_t
 
z˛MS_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛MS_AµCÆlbacks_t
 *
ˇŒbacks
 );

189 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_ota.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

45 
	~"z˛.h
"

46 
	~"z˛_gíîÆ.h
"

47 
	~"z˛_Ÿa.h
"

48 
	~"Ÿa_comm⁄.h
"

50 
	~"hÆ_lcd.h
"

51 
	~"hÆ_Àd.h
"

52 
	~"hÆ_Ÿa.h
"

54 
	~"MT_OTA.h
"

55 
	~"ZDProfûe.h
"

56 
	~"ZDObje˘.h
"

58 #i‡
deföed
 ( 
INTER_PAN
 )

59 
	~"°ub_≠s.h
"

62 #i‡
deföed
 
OTA_MMO_SIGN


63 
	~"Ÿa_sig«tuª.h
"

73 
	#OTA_MAX_TRANSACTIONS
 4

	)

74 
	#OTA_TRANSACTION_EXPIRATION
 1500

	)

76 
	#ZCL_OTA_HDR_LEN_OFFSET
 6

77 
	#ZCL_OTA_STK_VER_OFFSET
 18

78 

	)

83 
uöt8
 
	gz˛OTA_UpgødeSîvîID
[
Z_EXTADDR_LEN
];

84 
uöt32
 
	gz˛OTA_FûeOff£t
 = 0xFFFFFFFF;

85 
uöt32
 
	gz˛OTA_CuºítFûeVîsi⁄
 = 0xFFFFFFFF;

86 
uöt16
 
	gz˛OTA_CuºítZigBìSèckVîsi⁄
;

87 
uöt32
 
	gz˛OTA_Dow∆ﬂdedFûeVîsi⁄
 = 0xFFFFFFFF;

88 
uöt16
 
	gz˛OTA_Dow∆ﬂdedZigBìSèckVîsi⁄
 = 0xFFFF;

89 
uöt8
 
	gz˛OTA_ImageUpgødeSètus
;

93 
uöt16
 
	gz˛OTA_M™uÁ˘uªrId
;

94 
uöt16
 
	gz˛OTA_ImageTy≥
;

95 
afAddrTy≥_t
 
	gz˛OTA_£rvîAddr
;

96 
uöt8
 
	gz˛OTA_AµTask
 = 0xFF;

97 
z˛OTA_QuîyImageR•P¨ams_t
 
	gquîyRe•⁄£
;

105 
uöt8
 
	gz˛OTA_TaskID
;

108 
uöt8
 
	gz˛OTA_SeqNo
 = 0;

110 
uöt8
 
	gz˛OTA_Pîmô
 = 
TRUE
;

112 #i‡
deföed
 
OTA_MMO_SIGN


113 
OTA_MmoCål_t
 
	gz˛OTA_MmoHash
;

114 
uöt8
 
	gz˛OTA_D©aToHash
[
OTA_MMO_HASH_SIZE
];

115 
uöt8
 
	gz˛OTA_HashPos
;

116 
uöt8
 
	gz˛OTA_Sig√rIEEE
[
Z_EXTADDR_LEN
];

117 
uöt8
 
	gz˛OTA_Sig«tuªD©a
[
OTA_SIGNATURE_LEN
];

118 
uöt8
 
	gz˛OTA_Cîtifiˇã
[
OTA_CERTIFICATE_LEN
];

121 #i‡(
deföed
 
OTA_CLIENT
Ë&& (OTA_CLIENT =
TRUE
)

122 
uöt32
 
	gz˛OTA_Dow∆ﬂdedImageSize
;

123 
uöt16
 
	gz˛OTA_HódîLí
;

125 
uöt16
 
	gz˛OTA_Upd©eDñay
;

126 
z˛OTA_FûeID_t
 
	gz˛OTA_CuºítDlFûeId
;

128 
uöt16
 
	gz˛OTA_EÀmítTag
;

129 
uöt32
 
	gz˛OTA_EÀmítLí
;

130 
uöt32
 
	gz˛OTA_EÀmítPos
;

133 
uöt8
 
	gz˛OTA_BlockRëry
;

134 
uöt8
 
	gz˛OTA_UpgødeEndRëry
;

136 
uöt8
 
	gz˛OTA_Clõ¡PdSèã
;

139 c⁄° 
uöt8
 
	gz˛OTA_HdrMagic
[] = {0x1E, 0xF1, 0xEE, 0x0B};

145 
ZSètus_t
 
z˛OTA_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

147 #i‡(
deföed
 
OTA_CLIENT
Ë&& (OTA_CLIENT =
TRUE
)

148 
z˛OTA_SèπTimî
(
uöt16
 
evítId
, 
uöt32
 
möuãs
);

149 
ZSètus_t
 
£ndImageBlockReq
(
afAddrTy≥_t
 *
d°Addr
);

150 
z˛OTA_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
pMsg
 );

151 
z˛OTA_ImageBlockWaôExpúed
();

152 
z˛OTA_UpgødeCom∂ëe
(
uöt8
 
°©us
);

153 
uöt8
 
z˛OTA_CmpFûeId
(
z˛OTA_FûeID_t
 *
f1
, z˛OTA_FûeID_à*
f2
);

154 
uöt8
 
z˛OTA_Pro˚ssImageD©a
(uöt8 *
pD©a
, uöt8 
Àn
);

156 
ZSètus_t
 
z˛OTA_SídQuîyNextImageReq
–
afAddrTy≥_t
 *
d°Addr
, 
z˛OTA_QuîyNextImageReqP¨ams_t
 *
pP¨ams
 );

157 
ZSètus_t
 
z˛OTA_SídImageBlockReq
–
afAddrTy≥_t
 *
d°Addr
, 
z˛OTA_ImageBlockReqP¨ams_t
 *
pP¨ams
 );

158 
ZSètus_t
 
z˛OTA_SídUpgødeEndReq
–
afAddrTy≥_t
 *
d°Addr
, 
z˛OTA_UpgødeEndReqP¨ams_t
 *
pP¨ams
 );

160 
ZSètus_t
 
z˛OTA_Clõ¡HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

163 #i‡(
deföed
 
OTA_SERVER
Ë&& (OTA_SERVER =
TRUE
)

164 
ZSètus_t
 
z˛OTA_SídQuîyNextImageR•
–
afAddrTy≥_t
 *
d°Addr
, 
z˛OTA_QuîyImageR•P¨ams_t
 *
pP¨ams
 );

165 
ZSètus_t
 
z˛OTA_SídImageBlockR•
–
afAddrTy≥_t
 *
d°Addr
, 
z˛OTA_ImageBlockR•P¨ams_t
 *
pP¨ams
 );

166 
ZSètus_t
 
z˛OTA_SídUpgødeEndR•
–
afAddrTy≥_t
 *
d°Addr
, 
z˛OTA_UpgødeEndR•P¨ams_t
 *
pP¨ams
 );

167 
ZSètus_t
 
z˛OTA_SídQuîyS≥cificFûeR•
–
afAddrTy≥_t
 *
d°Addr
, 
z˛OTA_QuîyImageR•P¨ams_t
 *
pP¨ams
 );

169 
ZSètus_t
 
z˛OTA_Srv_QuîyNextImageReq
(
afAddrTy≥_t
 *
pSrcAddr
, 
z˛OTA_QuîyNextImageReqP¨ams_t
 *
pP¨am
);

170 
ZSètus_t
 
z˛OTA_Srv_ImageBlockReq
(
afAddrTy≥_t
 *
pSrcAddr
, 
z˛OTA_ImageBlockReqP¨ams_t
 *
pP¨am
);

171 
ZSètus_t
 
z˛OTA_Srv_ImagePageReq
(
afAddrTy≥_t
 *
pSrcAddr
, 
z˛OTA_ImagePageReqP¨ams_t
 *
pP¨am
);

172 
ZSètus_t
 
z˛OTA_Srv_UpgødeEndReq
(
afAddrTy≥_t
 *
pSrcAddr
, 
z˛OTA_UpgødeEndReqP¨ams_t
 *
pP¨am
);

173 
ZSètus_t
 
z˛OTA_Srv_QuîyS≥cificFûeReq
(
afAddrTy≥_t
 *
pSrcAddr
, 
z˛OTA_QuîyS≥cificFûeReqP¨ams_t
 *
pP¨am
);

175 
z˛OTA_Pro˚ssNextImgR•
(
uöt8
* 
pMSGpkt
, 
z˛OTA_FûeID_t
 *
pFûeId
, 
afAddrTy≥_t
 *
pAddr
);

176 
z˛OTA_Pro˚ssFûeRódR•
(
uöt8
* 
pMSGpkt
, 
z˛OTA_FûeID_t
 *
pFûeId
, 
afAddrTy≥_t
 *
pAddr
);

177 
z˛OTA_SîvîH™dÀFûeSysCb
(
OTA_MtMsg_t
* 
pMSGpkt
);

179 
ZSètus_t
 
z˛OTA_SîvîHdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

185 
	#ZCL_OTA_MAX_ATTRIBUTES
 7

	)

186 
CONST
 
z˛AârRec_t
 
	gz˛OTA_Aârs
[
ZCL_OTA_MAX_ATTRIBUTES
] =

189 
ZCL_CLUSTER_ID_OTA
,

191 
ATTRID_UPGRADE_SERVER_ID
,

192 
ZCL_DATATYPE_IEEE_ADDR
,

193 
ACCESS_CONTROL_READ
,

194 (*)&
z˛OTA_UpgødeSîvîID


198 
ZCL_CLUSTER_ID_OTA
,

200 
ATTRID_FILE_OFFSET
,

201 
ZCL_DATATYPE_UINT32
,

202 
ACCESS_CONTROL_READ
,

203 (*)&
z˛OTA_FûeOff£t


207 
ZCL_CLUSTER_ID_OTA
,

209 
ATTRID_CURRENT_FILE_VERSION
,

210 
ZCL_DATATYPE_UINT32
,

211 
ACCESS_CONTROL_READ
,

212 (*)&
z˛OTA_CuºítFûeVîsi⁄


216 
ZCL_CLUSTER_ID_OTA
,

218 
ATTRID_CURRENT_ZIGBEE_STACK_VERSION
,

219 
ZCL_DATATYPE_UINT16
,

220 
ACCESS_CONTROL_READ
,

221 (*)&
z˛OTA_CuºítZigBìSèckVîsi⁄


225 
ZCL_CLUSTER_ID_OTA
,

227 
ATTRID_DOWNLOADED_FILE_VERSION
,

228 
ZCL_DATATYPE_UINT32
,

229 
ACCESS_CONTROL_READ
,

230 (*)&
z˛OTA_Dow∆ﬂdedFûeVîsi⁄


234 
ZCL_CLUSTER_ID_OTA
,

236 
ATTRID_DOWNLOADED_ZIGBEE_STACK_VERSION
,

237 
ZCL_DATATYPE_UINT16
,

238 
ACCESS_CONTROL_READ
,

239 (*)&
z˛OTA_Dow∆ﬂdedZigBìSèckVîsi⁄


243 
ZCL_CLUSTER_ID_OTA
,

245 
ATTRID_IMAGE_UPGRADE_STATUS
,

246 
ZCL_DATATYPE_UINT8
,

247 
ACCESS_CONTROL_READ
,

248 (*)&
z˛OTA_ImageUpgødeSètus


256 #i‚de‡
OTA_HA


257 
	#ZCL_OTA_MAX_OPTIONS
 1

	)

258 
z˛O±i⁄Rec_t
 
	gz˛Oè_O±i⁄s
[
ZCL_OTA_MAX_OPTIONS
] =

261 
ZCL_CLUSTER_ID_OTA
,

262 –
AF_EN_SECURITY
 | 
AF_ACK_REQUEST
 ),

267 #i‡
deföed
 
OTA_SERVER
 && (OTA_SERVER =
TRUE
)

270 
	#ZCL_OTA_MAX_INCLUSTERS
 1

	)

271 c⁄° 
cId_t
 
	gz˛OTA_InClu°îLi°
[
ZCL_OTA_MAX_INCLUSTERS
] =

273 
ZCL_CLUSTER_ID_OTA


277 
	#ZCL_OTA_MAX_INCLUSTERS
 0

	)

278 
	#z˛OTA_InClu°îLi°
 
NULL


	)

282 #i‡
deföed
 
OTA_CLIENT
 && (OTA_CLIENT =
TRUE
)

285 
	#ZCL_OTA_MAX_OUTCLUSTERS
 1

	)

286 c⁄° 
cId_t
 
	gz˛OTA_OutClu°îLi°
[
ZCL_OTA_MAX_OUTCLUSTERS
] =

288 
ZCL_CLUSTER_ID_OTA


293 
	#ZCL_OTA_MAX_OUTCLUSTERS
 0

	)

294 
	#z˛OTA_OutClu°îLi°
 
NULL


	)

298 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gz˛OTA_Sim∂eDesc
 =

300 
ZCL_OTA_ENDPOINT
,

301 
ZCL_OTA_SAMPLE_PROFILE_ID
,

302 
ZCL_OTA_SAMPLE_DEVICEID
,

303 
ZCL_OTA_DEVICE_VERSION
,

304 
ZCL_OTA_FLAGS
,

305 
ZCL_OTA_MAX_INCLUSTERS
,

306 (
cId_t
 *)
z˛OTA_InClu°îLi°
,

307 
ZCL_OTA_MAX_OUTCLUSTERS
,

308 (
cId_t
 *)
z˛OTA_OutClu°îLi°


312 
ídPoötDesc_t
 
	gz˛OTA_Ep
 =

314 
ZCL_OTA_ENDPOINT
,

315 &
z˛_TaskID
,

316 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
z˛OTA_Sim∂eDesc
,

317 (
afNëw‹kL©ícyReq_t
) 0

329 
	$z˛OTA_PîmôOè
(
uöt8
 
≥rmô
)

331 
z˛OTA_Pîmô
 = 
≥rmô
;

332 
	}
}

344 
	$z˛OTA_Regi°î
(
uöt8
 
≠∂iˇti⁄TaskId
)

346 
z˛OTA_AµTask
 = 
≠∂iˇti⁄TaskId
;

347 
	}
}

360 
	$z˛OTA_Reque°NextUpd©e
(
uöt16
 
§vAddr
, 
uöt8
 
§vEndPoöt
)

363 
z˛OTA_£rvîAddr
.
addrMode
 = 
afAddr16Bô
;

364 
z˛OTA_£rvîAddr
.
ídPoöt
 = 
§vEndPoöt
;

365 
z˛OTA_£rvîAddr
.
addr
.
sh‹tAddr
 = 
§vAddr
;

368 
	`oßl_£t_evít
(
z˛OTA_TaskID
, 
ZCL_OTA_QUERY_SERVER_EVT
);

369 
	}
}

380 
	$z˛OTA_Inô
–
uöt8
 
èsk_id
 )

382 
z˛OTA_TaskID
 = 
èsk_id
;

385 
	`afRegi°î
–&
z˛OTA_Ep
 );

388 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_OTA
,

389 
ZCL_CLUSTER_ID_OTA
,

390 
z˛OTA_HdlIncomög
 );

393 
z˛OTA_CuºítZigBìSèckVîsi⁄
 = 
OTA_STACK_VER_PRO
;

394 
z˛OTA_ImageUpgødeSètus
 = 
OTA_STATUS_NORMAL
;

397 
	`z˛_ªgi°îAârLi°
–
ZCL_OTA_ENDPOINT
,

398 
ZCL_OTA_MAX_ATTRIBUTES
,

399 
z˛OTA_Aârs
 );

400 #i‚de‡
OTA_HA


402 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
ZCL_OTA_ENDPOINT
, 
ZCL_OTA_MAX_OPTIONS
, 
z˛Oè_O±i⁄s
 );

406 
	`ZDO_Regi°îF‹ZDOMsg
(
èsk_id
, 
IEEE_addr_r•
);

409 
	`oßl_mem£t
(
z˛OTA_UpgødeSîvîID
, 0xFF, (zclOTA_UpgradeServerID));

411 #i‡
	`deföed
 (
OTA_SERVER
Ë&& (OTA_SERVER =
TRUE
)

414 
	`MT_OèRegi°î
(
èsk_id
);

417 
	}
}

429 
uöt16
 
	$z˛OTA_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

431 
afIncomögMSGPackë_t
 *
MSGpkt
;

433 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

435  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
èsk_id
 )) )

437  
MSGpkt
->
hdr
.
evít
 )

439 #i‡(
deföed
 
OTA_CLIENT
Ë&& (OTA_CLIENT =
TRUE
)

440 
ZDO_CB_MSG
:

441 
	`z˛OTA_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

445 #i‡(
deföed
 
OTA_SERVER
Ë&& (OTA_SERVER =
TRUE
)

446 
MT_SYS_OTA_MSG
:

447 
	`z˛OTA_SîvîH™dÀFûeSysCb
((
OTA_MtMsg_t
*)
MSGpkt
);

455 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

459  (
evíts
 ^ 
SYS_EVENT_MSG
);

462 #i‡(
deföed
 
OTA_CLIENT
Ë&& (OTA_CLIENT =
TRUE
)

463 i‡–
evíts
 & 
ZCL_OTA_IMAGE_BLOCK_WAIT_EVT
 )

466 i‡(
z˛OTA_Upd©eDñay
 == 0)

468 
	`z˛OTA_ImageBlockWaôExpúed
();

473 
z˛OTA_Upd©eDñay
--;

474 
	`oßl_°¨t_timîEx
(
z˛OTA_TaskID
, 
ZCL_OTA_IMAGE_BLOCK_WAIT_EVT
, 60000);

477  ( 
evíts
 ^ 
ZCL_OTA_IMAGE_BLOCK_WAIT_EVT
 );

480 i‡–
evíts
 & 
ZCL_OTA_UPGRADE_WAIT_EVT
 )

483 i‡(
z˛OTA_Upd©eDñay
 == 0)

485 i‡(
z˛OTA_ImageUpgødeSètus
 =
OTA_STATUS_COUNTDOWN
)

487 
	`z˛OTA_UpgødeCom∂ëe
(
ZSuc˚ss
);

489 i‡(
z˛OTA_ImageUpgødeSètus
 =
OTA_STATUS_UPGRADE_WAIT
)

491 i‡(++
z˛OTA_UpgødeEndRëry
 > 
OTA_MAX_END_REQ_RETRIES
)

494 
	`z˛OTA_UpgødeCom∂ëe
(
ZSuc˚ss
);

499 
z˛OTA_UpgødeEndReqP¨ams_t
 
ªq
;

501 
ªq
.
°©us
 = 
ZSuc˚ss
;

502 
	`oßl_mem˝y
(&
ªq
.
fûeId
, &
z˛OTA_CuºítDlFûeId
, (
z˛OTA_FûeID_t
));

504 
	`z˛OTA_SídUpgødeEndReq
(&
z˛OTA_£rvîAddr
, &
ªq
);

507 
	`z˛OTA_SèπTimî
(
ZCL_OTA_UPGRADE_WAIT_EVT
, 3600);

514 
z˛OTA_Upd©eDñay
--;

515 
	`oßl_°¨t_timîEx
(
z˛OTA_TaskID
, 
ZCL_OTA_UPGRADE_WAIT_EVT
, 60000);

518  ( 
evíts
 ^ 
ZCL_OTA_UPGRADE_WAIT_EVT
 );

521 i‡(
evíts
 & 
ZCL_OTA_IMAGE_QUERY_TO_EVT
 )

523 i‡(
z˛OTA_ImageUpgødeSètus
 =
OTA_STATUS_NORMAL
)

526 
z˛OTA_CÆlbackMsg_t
 *
pMsg
;

528 
pMsg
 = (
z˛OTA_CÆlbackMsg_t
*Ë
	`oßl_msg_Æloˇã
((zclOTA_CallbackMsg_t));

530 i‡(
pMsg
)

532 
pMsg
->
hdr
.
evít
 = 
ZCL_OTA_CALLBACK_IND
;

533 
pMsg
->
hdr
.
°©us
 = 
ZFaûuª
;

534 
pMsg
->
Ÿa_evít
 = 
ZCL_OTA_START_CALLBACK
;

536 
	`oßl_msg_£nd
(
z˛OTA_AµTask
, (
uöt8
*Ë
pMsg
);

540  ( 
evíts
 ^ 
ZCL_OTA_IMAGE_QUERY_TO_EVT
 );

543 i‡(
evíts
 & 
ZCL_OTA_BLOCK_RSP_TO_EVT
 )

546 i‡(++
z˛OTA_BlockRëry
 > 
OTA_MAX_BLOCK_RETRIES
)

549 
z˛OTA_UpgødeEndReqP¨ams_t
 
ªq
;

551 
ªq
.
°©us
 = 
ZOèAb‹t
;

552 
	`oßl_mem˝y
(&
ªq
.
fûeId
, &
z˛OTA_CuºítDlFûeId
, (
z˛OTA_FûeID_t
));

554 
	`z˛OTA_SídUpgødeEndReq
(&
z˛OTA_£rvîAddr
, &
ªq
);

556 
	`z˛OTA_UpgødeCom∂ëe
(
ZOèAb‹t
);

561 
	`£ndImageBlockReq
(&
z˛OTA_£rvîAddr
);

564  ( 
evíts
 ^ 
ZCL_OTA_BLOCK_RSP_TO_EVT
 );

567 i‡(
evíts
 & 
ZCL_OTA_QUERY_SERVER_EVT
 )

569 
z˛OTA_QuîyNextImageReqP¨ams_t
 
quîyP¨ams
;

571 
quîyP¨ams
.
fõldC⁄åﬁ
 = 0;

572 
quîyP¨ams
.
fûeId
.
m™uÁ˘uªr
 = 
OTA_MANUFACTURER_ID
;

573 
quîyP¨ams
.
fûeId
.
ty≥
 = 
OTA_TYPE_ID
;

574 
quîyP¨ams
.
fûeId
.
vîsi⁄
 = 
z˛OTA_CuºítFûeVîsi⁄
;

576 
	`z˛OTA_SídQuîyNextImageReq
(&
z˛OTA_£rvîAddr
, &
quîyP¨ams
);

579 
	`oßl_°¨t_timîEx
(
z˛OTA_TaskID
, 
ZCL_OTA_IMAGE_QUERY_TO_EVT
, 10000);

581  ( 
evíts
 ^ 
ZCL_OTA_QUERY_SERVER_EVT
 );

587 
	}
}

600 
ZSètus_t
 
	$z˛OTA_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

602 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

604 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

607 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

610 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

612 #i‡(
deföed
 
OTA_SERVER
Ë&& (OTA_SERVER =
TRUE
)

613 
°©
 = 
	`z˛OTA_SîvîHdlIncomög
–
pInMsg
 );

615 
°©
 = 
ZCL_STATUS_UNSUP_CLUSTER_COMMAND
;

620 #i‡(
deföed
 
OTA_CLIENT
Ë&& (OTA_CLIENT =
TRUE
)

621 
°©
 = 
	`z˛OTA_Clõ¡HdlIncomög
–
pInMsg
 );

623 
°©
 = 
ZCL_STATUS_UNSUP_CLUSTER_COMMAND
;

630 
°©
 = 
ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND
;

636 
°©
 = 
ZFaûuª
;

639  ( 
°©
 );

640 
	}
}

642 #i‡(
deföed
 
OTA_SERVER
Ë&& (OTA_SERVER =
TRUE
)

653 
ZSètus_t
 
	$z˛OTA_SídImageNŸify
–
afAddrTy≥_t
 *
d°Addr
,

654 
z˛OTA_ImageNŸifyP¨ams_t
 *
pP¨ams
 )

656 
ZSètus_t
 
°©us
;

657 
uöt8
 
buf
[
PAYLOAD_MAX_LEN_IMAGE_NOTIFY
];

658 
uöt8
 *
pBuf
 = 
buf
;

660 *
pBuf
++ = 
pP¨ams
->
∑ylﬂdTy≥
;

661 *
pBuf
++ = 
pP¨ams
->
quîyJôãr
;

662 i‡(
pP¨ams
->
∑ylﬂdTy≥
 >
NOTIFY_PAYLOAD_JITTER_MFG
)

664 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
fûeId
.
m™uÁ˘uªr
);

665 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
fûeId
.
m™uÁ˘uªr
);

667 i‡(
pP¨ams
->
∑ylﬂdTy≥
 >
NOTIFY_PAYLOAD_JITTER_MFG_TYPE
)

669 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
fûeId
.
ty≥
);

670 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
fûeId
.
ty≥
);

672 i‡(
pP¨ams
->
∑ylﬂdTy≥
 =
NOTIFY_PAYLOAD_JITTER_MFG_TYPE_VERS
)

674 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
fûeId
.
vîsi⁄
);

677 
°©us
 = 
	`z˛_SídComm™d
–
ZCL_OTA_ENDPOINT
, 
d°Addr
, 
ZCL_CLUSTER_ID_OTA
,

678 
COMMAND_IMAGE_NOTIFY
, 
TRUE
,

679 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
TRUE
, 0,

680 
z˛OTA_SeqNo
++, (
uöt16
Ë(
pBuf
 - 
buf
), buf );

682  
°©us
;

683 
	}
}

695 
ZSètus_t
 
	$z˛OTA_SídQuîyNextImageR•
–
afAddrTy≥_t
 *
d°Addr
,

696 
z˛OTA_QuîyImageR•P¨ams_t
 *
pP¨ams
 )

698 
ZSètus_t
 
°©us
;

699 
uöt8
 
buf
[
PAYLOAD_MAX_LEN_QUERY_NEXT_IMAGE_RSP
];

700 
uöt8
 *
pBuf
 = 
buf
;

702 *
pBuf
++ = 
pP¨ams
->
°©us
;

703 i‡(
pP¨ams
->
°©us
 =
ZCL_STATUS_SUCCESS
)

705 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
fûeId
.
m™uÁ˘uªr
);

706 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
fûeId
.
m™uÁ˘uªr
);

707 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
fûeId
.
ty≥
);

708 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
fûeId
.
ty≥
);

709 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
fûeId
.
vîsi⁄
);

710 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
imageSize
);

713 
°©us
 = 
	`z˛_SídComm™d
–
ZCL_OTA_ENDPOINT
, 
d°Addr
, 
ZCL_CLUSTER_ID_OTA
,

714 
COMMAND_QUERY_NEXT_IMAGE_RSP
, 
TRUE
,

715 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
TRUE
, 0,

716 
z˛OTA_SeqNo
++, (
uöt16
Ë(
pBuf
 - 
buf
), buf );

718  
°©us
;

719 
	}
}

731 
ZSètus_t
 
	$z˛OTA_SídImageBlockR•
–
afAddrTy≥_t
 *
d°Addr
,

732 
z˛OTA_ImageBlockR•P¨ams_t
 *
pP¨ams
 )

734 
uöt8
 *
buf
;

735 
uöt8
 *
pBuf
;

736 
ZSètus_t
 
°©us
;

737 
uöt8
 
Àn
;

739 i‡(
pP¨ams
->
°©us
 =
ZCL_STATUS_SUCCESS
)

741 
Àn
 = 
PAYLOAD_MAX_LEN_IMAGE_BLOCK_RSP
 + 
pP¨ams
->
r•
.
suc˚ss
.
d©aSize
;

743 i‡(
pP¨ams
->
°©us
 =
ZCL_STATUS_WAIT_FOR_DATA
)

745 
Àn
 = 
PAYLOAD_MIN_LEN_IMAGE_BLOCK_WAIT
;

749 
Àn
 = 1;

752 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

754 i‡–
buf
 =
NULL
 )

756  (
ZMemEº‹
);

759 
pBuf
 = 
buf
;

760 *
pBuf
++ = 
pP¨ams
->
°©us
;

762 i‡(
pP¨ams
->
°©us
 =
ZCL_STATUS_SUCCESS
)

764 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
r•
.
suc˚ss
.
fûeId
.
m™uÁ˘uªr
);

765 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
r•
.
suc˚ss
.
fûeId
.
m™uÁ˘uªr
);

766 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
r•
.
suc˚ss
.
fûeId
.
ty≥
);

767 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
r•
.
suc˚ss
.
fûeId
.
ty≥
);

768 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
r•
.
suc˚ss
.
fûeId
.
vîsi⁄
);

769 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
r•
.
suc˚ss
.
fûeOff£t
);

770 *
pBuf
++ = 
pP¨ams
->
r•
.
suc˚ss
.
d©aSize
;

771 
	`oßl_mem˝y
(
pBuf
, 
pP¨ams
->
r•
.
suc˚ss
.
pD©a
,ÖP¨ams->r•.suc˚ss.
d©aSize
);

773 i‡(
pP¨ams
->
°©us
 =
ZCL_STATUS_WAIT_FOR_DATA
)

775 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
r•
.
waô
.
cuºítTime
);

776 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
r•
.
waô
.
ªque°Time
);

779 
°©us
 = 
	`z˛_SídComm™d
–
ZCL_OTA_ENDPOINT
, 
d°Addr
, 
ZCL_CLUSTER_ID_OTA
,

780 
COMMAND_IMAGE_BLOCK_RSP
, 
TRUE
,

781 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
TRUE
, 0,

782 
z˛OTA_SeqNo
++, 
Àn
, 
buf
 );

784 
	`oßl_mem_‰ì
(
buf
);

786  
°©us
;

787 
	}
}

799 
ZSètus_t
 
	$z˛OTA_SídUpgødeEndR•
–
afAddrTy≥_t
 *
d°Addr
,

800 
z˛OTA_UpgødeEndR•P¨ams_t
 *
pP¨ams
 )

802 
ZSètus_t
 
°©us
;

803 
uöt8
 
buf
[
PAYLOAD_MAX_LEN_UPGRADE_END_RSP
];

804 
uöt8
 *
pBuf
 = 
buf
;

806 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
fûeId
.
m™uÁ˘uªr
);

807 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
fûeId
.
m™uÁ˘uªr
);

808 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
fûeId
.
ty≥
);

809 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
fûeId
.
ty≥
);

810 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
fûeId
.
vîsi⁄
);

811 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
cuºítTime
);

812 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
upgødeTime
);

814 
°©us
 = 
	`z˛_SídComm™d
–
ZCL_OTA_ENDPOINT
, 
d°Addr
, 
ZCL_CLUSTER_ID_OTA
,

815 
COMMAND_UPGRADE_END_RSP
, 
TRUE
,

816 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
TRUE
, 0,

817 
z˛OTA_SeqNo
++, 
PAYLOAD_MAX_LEN_UPGRADE_END_RSP
, 
buf
 );

819  
°©us
;

820 
	}
}

832 
ZSètus_t
 
	$z˛OTA_SídQuîyS≥cificFûeR•
–
afAddrTy≥_t
 *
d°Addr
,

833 
z˛OTA_QuîyImageR•P¨ams_t
 *
pP¨ams
 )

835 
ZSètus_t
 
°©us
;

836 
uöt8
 
buf
[
PAYLOAD_MAX_LEN_QUERY_SPECIFIC_FILE_RSP
];

837 
uöt8
 *
pBuf
 = 
buf
;

839 *
pBuf
++ = 
pP¨ams
->
°©us
;

840 i‡(
pP¨ams
->
°©us
 =
ZCL_STATUS_SUCCESS
)

842 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
fûeId
.
m™uÁ˘uªr
);

843 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
fûeId
.
m™uÁ˘uªr
);

844 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
fûeId
.
ty≥
);

845 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
fûeId
.
ty≥
);

846 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
fûeId
.
vîsi⁄
);

847 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
imageSize
);

850 
°©us
 = 
	`z˛_SídComm™d
–
ZCL_OTA_ENDPOINT
, 
d°Addr
, 
ZCL_CLUSTER_ID_OTA
,

851 
COMMAND_QUERY_SPECIFIC_FILE_RSP
, 
TRUE
,

852 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
TRUE
, 0,

853 
z˛OTA_SeqNo
++, (
uöt16
Ë(
pBuf
 - 
buf
), buf );

855  
°©us
;

856 
	}
}

859 #i‡(
deföed
 
OTA_CLIENT
Ë&& (OTA_CLIENT =
TRUE
)

870 
ZSètus_t
 
	$z˛OTA_SídQuîyNextImageReq
–
afAddrTy≥_t
 *
d°Addr
,

871 
z˛OTA_QuîyNextImageReqP¨ams_t
 *
pP¨ams
 )

873 
ZSètus_t
 
°©us
;

874 
uöt8
 
buf
[
PAYLOAD_MAX_LEN_QUERY_NEXT_IMAGE_REQ
];

875 
uöt8
 *
pBuf
 = 
buf
;

877 *
pBuf
++ = 
pP¨ams
->
fõldC⁄åﬁ
;

878 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
fûeId
.
m™uÁ˘uªr
);

879 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
fûeId
.
m™uÁ˘uªr
);

880 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
fûeId
.
ty≥
);

881 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
fûeId
.
ty≥
);

882 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
fûeId
.
vîsi⁄
);

883 i‡(
pP¨ams
->
fõldC⁄åﬁ
 == 1)

885 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
h¨dw¨eVîsi⁄
);

886 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
h¨dw¨eVîsi⁄
);

889 
°©us
 = 
	`z˛_SídComm™d
–
ZCL_OTA_ENDPOINT
, 
d°Addr
, 
ZCL_CLUSTER_ID_OTA
,

890 
COMMAND_QUERY_NEXT_IMAGE_REQ
, 
TRUE
,

891 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
FALSE
, 0,

892 
z˛OTA_SeqNo
++, (
uöt16
Ë(
pBuf
 - 
buf
), buf );

894  
°©us
;

895 
	}
}

907 
ZSètus_t
 
	$z˛OTA_SídImageBlockReq
–
afAddrTy≥_t
 *
d°Addr
,

908 
z˛OTA_ImageBlockReqP¨ams_t
 *
pP¨ams
 )

910 
ZSètus_t
 
°©us
;

911 
uöt8
 
buf
[
PAYLOAD_MAX_LEN_IMAGE_BLOCK_REQ
];

912 
uöt8
 *
pBuf
 = 
buf
;

914 *
pBuf
++ = 
pP¨ams
->
fõldC⁄åﬁ
;

915 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
fûeId
.
m™uÁ˘uªr
);

916 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
fûeId
.
m™uÁ˘uªr
);

917 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
fûeId
.
ty≥
);

918 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
fûeId
.
ty≥
);

919 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
fûeId
.
vîsi⁄
);

920 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
fûeOff£t
);

921 *
pBuf
++ = 
pP¨ams
->
maxD©aSize
;

922 i‡(
pP¨ams
->
fõldC⁄åﬁ
 == 1)

924 
	`oßl_˝yExtAddr
(
pBuf
, 
pP¨ams
->
nodeAddr
);

925 
pBuf
 +
Z_EXTADDR_LEN
;

928 
°©us
 = 
	`z˛_SídComm™d
–
ZCL_OTA_ENDPOINT
, 
d°Addr
, 
ZCL_CLUSTER_ID_OTA
,

929 
COMMAND_IMAGE_BLOCK_REQ
, 
TRUE
,

930 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
FALSE
, 0,

931 
z˛OTA_SeqNo
++, (
uöt16
Ë(
pBuf
 - 
buf
), buf );

933  
°©us
;

934 
	}
}

946 
ZSètus_t
 
	$z˛OTA_SídUpgødeEndReq
–
afAddrTy≥_t
 *
d°Addr
,

947 
z˛OTA_UpgødeEndReqP¨ams_t
 *
pP¨ams
 )

949 
ZSètus_t
 
°©us
;

950 
uöt8
 
buf
[
PAYLOAD_MAX_LEN_UPGRADE_END_REQ
];

951 
uöt8
 *
pBuf
 = 
buf
;

953 *
pBuf
++ = 
pP¨ams
->
°©us
;

954 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
fûeId
.
m™uÁ˘uªr
);

955 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
fûeId
.
m™uÁ˘uªr
);

956 *
pBuf
++ = 
	`LO_UINT16
(
pP¨ams
->
fûeId
.
ty≥
);

957 *
pBuf
++ = 
	`HI_UINT16
(
pP¨ams
->
fûeId
.
ty≥
);

958 
pBuf
 = 
	`oßl_buf„r_uöt32
’Buf, 
pP¨ams
->
fûeId
.
vîsi⁄
);

960 
°©us
 = 
	`z˛_SídComm™d
–
ZCL_OTA_ENDPOINT
, 
d°Addr
, 
ZCL_CLUSTER_ID_OTA
,

961 
COMMAND_UPGRADE_END_REQ
, 
TRUE
,

962 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
FALSE
, 0,

963 
z˛OTA_SeqNo
++, (
uöt16
Ë(
pBuf
 - 
buf
), buf );

965  
°©us
;

966 
	}
}

978 
	$z˛OTA_SèπTimî
(
uöt16
 
evítId
, 
uöt32
 
£c⁄ds
)

981 
z˛OTA_Upd©eDñay
 = (
£c⁄ds
 / 60);

984 
	`oßl_°¨t_timîEx
(
z˛OTA_TaskID
, 
evítId
, (
£c⁄ds
 % 60) * 1000);

985 
	}
}

996 
ZSètus_t
 
	$£ndImageBlockReq
(
afAddrTy≥_t
 *
d°Addr
)

998 
z˛OTA_ImageBlockReqP¨ams_t
 
ªq
;

1000 
ªq
.
fõldC⁄åﬁ
 = 0;

1001 
ªq
.
fûeId
.
m™uÁ˘uªr
 = 
z˛OTA_M™uÁ˘uªrId
;

1002 
ªq
.
fûeId
.
ty≥
 = 
z˛OTA_ImageTy≥
;

1003 
ªq
.
fûeId
.
vîsi⁄
 = 
z˛OTA_Dow∆ﬂdedFûeVîsi⁄
;

1004 
ªq
.
fûeOff£t
 = 
z˛OTA_FûeOff£t
;

1006 i‡(
z˛OTA_Dow∆ﬂdedImageSize
 - 
z˛OTA_FûeOff£t
 < 
OTA_MAX_MTU
)

1008 
ªq
.
maxD©aSize
 = 
z˛OTA_Dow∆ﬂdedImageSize
 - 
z˛OTA_FûeOff£t
;

1012 
ªq
.
maxD©aSize
 = 
OTA_MAX_MTU
;

1016 
	`oßl_°¨t_timîEx
(
z˛OTA_TaskID
, 
ZCL_OTA_BLOCK_RSP_TO_EVT
, 
OTA_MAX_BLOCK_RSP_WAIT_TIME
);

1018  
	`z˛OTA_SídImageBlockReq
–
d°Addr
, &
ªq
);

1019 
	}
}

1031 
uöt8
 
	$z˛OTA_Pro˚ssImageD©a
(
uöt8
 *
pD©a
, uöt8 
Àn
)

1033 
öt8
 
i
;

1034 #i‡
deföed
 
OTA_MMO_SIGN


1035 
uöt8
 
skùHash
 = 
FALSE
;

1038 i‡(
z˛OTA_ImageUpgødeSètus
 !
OTA_STATUS_IN_PROGRESS
)

1040  
ZCL_STATUS_ABORT
;

1043 #i‡(
deföed
 
HAL_LED
Ë&& (HAL_LED =
TRUE
)

1045 
	`HÆLedSë
(
HAL_LED_2
, 
HAL_LED_MODE_TOGGLE
);

1049 
	`HÆOTAWrôe
(
z˛OTA_FûeOff£t
, 
pD©a
, 
Àn
, 
HAL_OTA_DL
);

1051 
i
=0; i<
Àn
; i++)

1053 #i‡
deföed
 
OTA_MMO_SIGN


1055 i‡((
z˛OTA_Clõ¡PdSèã
 >
ZCL_OTA_PD_ELEM_LEN1_STATE
) &&

1056 (
z˛OTA_Clõ¡PdSèã
 <
ZCL_OTA_PD_ELEMENT_STATE
))

1058 i‡(
z˛OTA_EÀmítTag
 =
OTA_ECDSA_SIGNATURE_TAG_ID
)

1060 
skùHash
 = 
TRUE
;

1065 
z˛OTA_Clõ¡PdSèã
)

1068 
ZCL_OTA_PD_MAGIC_0_STATE
:

1070 #i‡
deföed
 
OTA_MMO_SIGN


1071 
	`oßl_mem£t
(&
z˛OTA_MmoHash
, 0, (zclOTA_MmoHash));

1072 
z˛OTA_HashPos
 = 0;

1076 
ZCL_OTA_PD_MAGIC_1_STATE
:

1077 
ZCL_OTA_PD_MAGIC_2_STATE
:

1078 
ZCL_OTA_PD_MAGIC_3_STATE
:

1079 i‡(
pD©a
[
i
] !
z˛OTA_HdrMagic
[
z˛OTA_Clõ¡PdSèã
])

1081  
ZCL_STATUS_INVALID_IMAGE
;

1083 
z˛OTA_Clõ¡PdSèã
++;

1086 
ZCL_OTA_PD_HDR_LEN1_STATE
:

1088 i‡(
z˛OTA_FûeOff£t
 =
ZCL_OTA_HDR_LEN_OFFSET
)

1090 
z˛OTA_HódîLí
 = 
pD©a
[
i
];

1091 
z˛OTA_Clõ¡PdSèã
 = 
ZCL_OTA_PD_HDR_LEN2_STATE
;

1095 
ZCL_OTA_PD_HDR_LEN2_STATE
:

1096 
z˛OTA_HódîLí
 |(((
uöt16
)
pD©a
[
i
]) << 8) & 0xFF00;

1097 
z˛OTA_Clõ¡PdSèã
 = 
ZCL_OTA_PD_STK_VER1_STATE
;

1100 
ZCL_OTA_PD_STK_VER1_STATE
:

1102 i‡(
z˛OTA_FûeOff£t
 =
ZCL_OTA_STK_VER_OFFSET
)

1104 
z˛OTA_Dow∆ﬂdedZigBìSèckVîsi⁄
 = 
pD©a
[
i
];

1105 
z˛OTA_Clõ¡PdSèã
 = 
ZCL_OTA_PD_STK_VER2_STATE
;

1109 
ZCL_OTA_PD_STK_VER2_STATE
:

1110 
z˛OTA_Dow∆ﬂdedZigBìSèckVîsi⁄
 |(((
uöt16
)
pD©a
[
i
]) << 8) & 0xFF00;

1111 
z˛OTA_Clõ¡PdSèã
 = 
ZCL_OTA_PD_CONT_HDR_STATE
;

1113 i‡(
z˛OTA_Dow∆ﬂdedZigBìSèckVîsi⁄
 !
OTA_HDR_STACK_VERSION
)

1115  
ZCL_STATUS_INVALID_IMAGE
;

1119 
ZCL_OTA_PD_CONT_HDR_STATE
:

1121 i‡(
z˛OTA_FûeOff£t
 =
z˛OTA_HódîLí
-1)

1123 
z˛OTA_Clõ¡PdSèã
 = 
ZCL_OTA_PD_ELEM_TAG1_STATE
;

1127 
ZCL_OTA_PD_ELEM_TAG1_STATE
:

1128 
z˛OTA_EÀmítTag
 = 
pD©a
[
i
];

1129 
z˛OTA_Clõ¡PdSèã
 = 
ZCL_OTA_PD_ELEM_TAG2_STATE
;

1132 
ZCL_OTA_PD_ELEM_TAG2_STATE
:

1133 
z˛OTA_EÀmítTag
 |(((
uöt16
)
pD©a
[
i
]) << 8) & 0xFF00;

1134 
z˛OTA_EÀmítPos
 = 0;

1135 
z˛OTA_Clõ¡PdSèã
 = 
ZCL_OTA_PD_ELEM_LEN1_STATE
;

1138 
ZCL_OTA_PD_ELEM_LEN1_STATE
:

1139 
z˛OTA_EÀmítLí
 = 
pD©a
[
i
];

1140 
z˛OTA_Clõ¡PdSèã
 = 
ZCL_OTA_PD_ELEM_LEN2_STATE
;

1143 
ZCL_OTA_PD_ELEM_LEN2_STATE
:

1144 
z˛OTA_EÀmítLí
 |((
uöt32
)
pD©a
[
i
] << 8) & 0x0000FF00;

1145 
z˛OTA_Clõ¡PdSèã
 = 
ZCL_OTA_PD_ELEM_LEN3_STATE
;

1148 
ZCL_OTA_PD_ELEM_LEN3_STATE
:

1149 
z˛OTA_EÀmítLí
 |((
uöt32
)
pD©a
[
i
] << 16) & 0x00FF0000;

1150 
z˛OTA_Clõ¡PdSèã
 = 
ZCL_OTA_PD_ELEM_LEN4_STATE
;

1153 
ZCL_OTA_PD_ELEM_LEN4_STATE
:

1154 
z˛OTA_EÀmítLí
 |((
uöt32
)
pD©a
[
i
] << 24) & 0xFF000000;

1155 
z˛OTA_Clõ¡PdSèã
 = 
ZCL_OTA_PD_ELEMENT_STATE
;

1158 i‡(
z˛OTA_EÀmítLí
 > (
z˛OTA_Dow∆ﬂdedImageSize
 - 
z˛OTA_FûeOff£t
))

1160  
ZCL_STATUS_INVALID_IMAGE
;

1163 #i‡
deföed
 
OTA_MMO_SIGN


1164 i‡(
z˛OTA_EÀmítTag
 =
OTA_ECDSA_SIGNATURE_TAG_ID
)

1166 i‡(
z˛OTA_EÀmítLí
 !
OTA_SIGNATURE_LEN
 + 
Z_EXTADDR_LEN
)

1168  
ZCL_STATUS_INVALID_IMAGE
;

1171 i‡(
z˛OTA_EÀmítTag
 =
OTA_ECDSA_CERT_TAG_ID
)

1173 i‡(
z˛OTA_EÀmítLí
 !
OTA_CERTIFICATE_LEN
)

1175  
ZCL_STATUS_INVALID_IMAGE
;

1181 
ZCL_OTA_PD_ELEMENT_STATE
:

1182 #i‡
deföed
 
OTA_MMO_SIGN


1183 i‡(
z˛OTA_EÀmítTag
 =
OTA_ECDSA_SIGNATURE_TAG_ID
)

1185 i‡(
z˛OTA_EÀmítPos
 < 
Z_EXTADDR_LEN
)

1186 
z˛OTA_Sig√rIEEE
[
z˛OTA_EÀmítPos
] = 
pD©a
[
i
];

1188 
z˛OTA_Sig«tuªD©a
[
z˛OTA_EÀmítPos
 - 
Z_EXTADDR_LEN
] = 
pD©a
[
i
];

1190 i‡(
z˛OTA_EÀmítTag
 =
OTA_ECDSA_CERT_TAG_ID
)

1192 
z˛OTA_Cîtifiˇã
[
z˛OTA_EÀmítPos
] = 
pD©a
[
i
];

1196 i‡(++
z˛OTA_EÀmítPos
 =
z˛OTA_EÀmítLí
)

1199 i‡(
z˛OTA_EÀmítTag
 =
OTA_UPGRADE_IMAGE_TAG_ID
)

1202 
uöt32
 
k
;

1203 
k
=0; k<0xffff; k++)

1205 
	`asm
("NOP");

1209 i‡(
	`HÆOTAChkDL
(
HAL_OTA_CRC_OSET
Ë!
SUCCESS
)

1211 #i‡(
deföed
 
HAL_LCD
Ë&& (HAL_LCD =
TRUE
)

1212 
	`HÆLcdWrôeSåög
("OTA CRC Faû", 
HAL_LCD_LINE_3
);

1214  
ZCL_STATUS_INVALID_IMAGE
;

1218 
z˛OTA_Clõ¡PdSèã
 = 
ZCL_OTA_PD_ELEM_TAG1_STATE
;

1226 #i‡
deföed
 
OTA_MMO_SIGN


1231 i‡(
z˛OTA_Clõ¡PdSèã
 =
ZCL_OTA_PD_ELEM_TAG2_STATE
)

1233 
skùHash
 = 
TRUE
;

1235 i‡(
z˛OTA_Clõ¡PdSèã
 =
ZCL_OTA_PD_ELEM_LEN1_STATE
)

1237 i‡(
z˛OTA_EÀmítTag
 !
OTA_ECDSA_SIGNATURE_TAG_ID
)

1242 
z˛OTA_D©aToHash
[
z˛OTA_HashPos
++] = 
	`LO_UINT16
(
z˛OTA_EÀmítTag
);

1245 i‡(
z˛OTA_HashPos
 =
OTA_MMO_HASH_SIZE
)

1247 
	`OTA_CÆcuœãMmoR3
(&
z˛OTA_MmoHash
, 
z˛OTA_D©aToHash
, 
OTA_MMO_HASH_SIZE
, 
FALSE
);

1248 
z˛OTA_HashPos
 = 0;

1251 
skùHash
 = 
FALSE
;

1255 i‡(!
skùHash
)

1258 
z˛OTA_D©aToHash
[
z˛OTA_HashPos
++] = 
pD©a
[
i
];

1261 i‡(
z˛OTA_HashPos
 =
OTA_MMO_HASH_SIZE
)

1263 
	`OTA_CÆcuœãMmoR3
(&
z˛OTA_MmoHash
, 
z˛OTA_D©aToHash
, 
OTA_MMO_HASH_SIZE
, 
FALSE
);

1264 
z˛OTA_HashPos
 = 0;

1270 i‡(++
z˛OTA_FûeOff£t
 >
z˛OTA_Dow∆ﬂdedImageSize
)

1272 
z˛OTA_ImageUpgødeSètus
 = 
OTA_STATUS_COMPLETE
;

1274 #i‡
deföed
 
OTA_MMO_SIGN


1276 
	`OTA_CÆcuœãMmoR3
(&
z˛OTA_MmoHash
, 
z˛OTA_D©aToHash
, 
z˛OTA_HashPos
, 
TRUE
);

1279 i‡(
	`OTA_VÆid©eSig«tuª
(
z˛OTA_MmoHash
.
hash
, 
z˛OTA_Cîtifiˇã
,

1280 
z˛OTA_Sig«tuªD©a
, 
z˛OTA_Sig√rIEEE
Ë!
ZSuc˚ss
)

1281  
ZCL_STATUS_INVALID_IMAGE
;

1284  
ZSuc˚ss
;

1288  
ZSuc˚ss
;

1289 
	}
}

1300 
ZSètus_t
 
	$z˛OTA_Pro˚ssImageNŸify
–
z˛Incomög_t
 *
pInMsg
 )

1302 
z˛OTA_ImageNŸifyP¨ams_t
 
∑øm
;

1303 
z˛OTA_QuîyNextImageReqP¨ams_t
 
ªq
;

1304 
uöt8
 *
pD©a
;

1307 i‡((
pInMsg
->
pD©aLí
 > 
PAYLOAD_MAX_LEN_IMAGE_NOTIFY
) ||

1308 (
pInMsg
->
pD©aLí
 < 
PAYLOAD_MIN_LEN_IMAGE_NOTIFY
))

1311  
ZCL_STATUS_MALFORMED_COMMAND
;

1315 i‡((
z˛OTA_Pîmô
 =
FALSE
) ||

1316 (
z˛OTA_ImageUpgødeSètus
 !
OTA_STATUS_NORMAL
))

1318  
ZFaûuª
;

1322 
pD©a
 = 
pInMsg
->pData;

1323 
∑øm
.
∑ylﬂdTy≥
 = *
pD©a
++;

1324 
∑øm
.
quîyJôãr
 = *
pD©a
++;

1325 
∑øm
.
fûeId
.
m™uÁ˘uªr
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

1326 
pD©a
 += 2;

1327 
∑øm
.
fûeId
.
ty≥
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

1328 
pD©a
 += 2;

1329 
∑øm
.
fûeId
.
vîsi⁄
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

1332 i‡(
pInMsg
->
msg
->
wasBrﬂdˇ°
)

1335 i‡((
∑øm
.
∑ylﬂdTy≥
 >
NOTIFY_PAYLOAD_JITTER_MFG
) &&

1336 (
∑øm
.
fûeId
.
m™uÁ˘uªr
 !
z˛OTA_M™uÁ˘uªrId
))

1338  
ZSuc˚ss
;

1342 i‡((
∑øm
.
∑ylﬂdTy≥
 >
NOTIFY_PAYLOAD_JITTER_MFG_TYPE
) &&

1343 (
∑øm
.
fûeId
.
ty≥
 !
z˛OTA_ImageTy≥
))

1345  
ZSuc˚ss
;

1349 i‡((
∑øm
.
∑ylﬂdTy≥
 >
NOTIFY_PAYLOAD_JITTER_MFG_TYPE_VERS
) &&

1350 (
∑øm
.
fûeId
.
vîsi⁄
 =
z˛OTA_CuºítFûeVîsi⁄
))

1352  
ZSuc˚ss
;

1356 i‡(((
uöt8
Ë
	`oßl_ønd
(Ë% 100Ë> 
∑øm
.
quîyJôãr
)

1359  
ZSuc˚ss
;

1364 
ªq
.
fõldC⁄åﬁ
 = 0;

1365 
ªq
.
fûeId
.
m™uÁ˘uªr
 = 
z˛OTA_M™uÁ˘uªrId
;

1366 
ªq
.
fûeId
.
ty≥
 = 
z˛OTA_ImageTy≥
;

1367 
ªq
.
fûeId
.
vîsi⁄
 = 
z˛OTA_CuºítFûeVîsi⁄
;

1368 
	`z˛OTA_SídQuîyNextImageReq
–&(
pInMsg
->
msg
->
§cAddr
), &
ªq
);

1370  
ZSuc˚ss
;

1371 
	}
}

1382 
ZSètus_t
 
	$z˛OTA_Pro˚ssQuîyNextImageR•
–
z˛Incomög_t
 *
pInMsg
 )

1384 
z˛OTA_QuîyImageR•P¨ams_t
 
∑øm
;

1385 
uöt8
 *
pD©a
;

1386 
uöt8
 
°©us
 = 
ZFaûuª
;

1389 i‡((
pInMsg
->
pD©aLí
 !
PAYLOAD_MAX_LEN_QUERY_NEXT_IMAGE_RSP
) &&

1390 (
pInMsg
->
pD©aLí
 !
PAYLOAD_MIN_LEN_QUERY_NEXT_IMAGE_RSP
))

1393  
ZCL_STATUS_MALFORMED_COMMAND
;

1397 i‡(
z˛OTA_ImageUpgødeSètus
 =
OTA_STATUS_IN_PROGRESS
)

1399  
ZSuc˚ss
;

1403 
pD©a
 = 
pInMsg
->pData;

1404 
∑øm
.
°©us
 = *
pD©a
++;

1407 i‡(
∑øm
.
°©us
 =
ZCL_STATUS_SUCCESS
)

1410 
∑øm
.
fûeId
.
m™uÁ˘uªr
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

1411 
pD©a
 += 2;

1412 
∑øm
.
fûeId
.
ty≥
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

1413 
pD©a
 += 2;

1414 
∑øm
.
fûeId
.
vîsi⁄
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

1415 
pD©a
 += 4;

1416 
∑øm
.
imageSize
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

1419 i‡((
∑øm
.
fûeId
.
ty≥
 =
z˛OTA_ImageTy≥
) &&

1420 (
∑øm
.
fûeId
.
m™uÁ˘uªr
 =
z˛OTA_M™uÁ˘uªrId
))

1423 
z˛OTA_Dow∆ﬂdedFûeVîsi⁄
 = 
∑øm
.
fûeId
.
vîsi⁄
;

1424 
z˛OTA_Dow∆ﬂdedImageSize
 = 
∑øm
.
imageSize
;

1427 
z˛OTA_FûeOff£t
 = 0;

1428 
z˛OTA_Clõ¡PdSèã
 = 
ZCL_OTA_PD_MAGIC_0_STATE
;

1431 
z˛OTA_ImageUpgødeSètus
 = 
OTA_STATUS_IN_PROGRESS
;

1434 
z˛OTA_£rvîAddr
 = 
pInMsg
->
msg
->
§cAddr
;

1437 
	`oßl_mem˝y
(&
z˛OTA_CuºítDlFûeId
, &
∑øm
.
fûeId
, (
z˛OTA_FûeID_t
));

1440 
	`£ndImageBlockReq
(&(
pInMsg
->
msg
->
§cAddr
));

1441 
°©us
 = 
ZCL_STATUS_CMD_HAS_RSP
;

1445 
	`ZDP_IEEEAddrReq
(
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0);

1447 
	`oßl_°›_timîEx
(
z˛OTA_TaskID
, 
ZCL_OTA_IMAGE_QUERY_TO_EVT
);

1451 i‡(
z˛OTA_AµTask
 != 0xFF)

1454 
z˛OTA_CÆlbackMsg_t
 *
pMsg
;

1456 
pMsg
 = (
z˛OTA_CÆlbackMsg_t
*Ë
	`oßl_msg_Æloˇã
((zclOTA_CallbackMsg_t));

1458 i‡(
pMsg
)

1460 
pMsg
->
hdr
.
evít
 = 
ZCL_OTA_CALLBACK_IND
;

1461 
pMsg
->
hdr
.
°©us
 = 
∑øm
.status;

1462 
pMsg
->
Ÿa_evít
 = 
ZCL_OTA_START_CALLBACK
;

1464 
	`oßl_msg_£nd
(
z˛OTA_AµTask
, (
uöt8
*Ë
pMsg
);

1468  
°©us
;

1469 
	}
}

1480 
ZSètus_t
 
	$z˛OTA_Pro˚ssImageBlockR•
–
z˛Incomög_t
 *
pInMsg
 )

1482 
z˛OTA_ImageBlockR•P¨ams_t
 
∑øm
;

1483 
z˛OTA_UpgødeEndReqP¨ams_t
 
ªq
;

1484 
uöt8
 *
pD©a
;

1485 
uöt8
 
°©us
 = 
ZSuc˚ss
;

1488 i‡(
z˛OTA_ImageUpgødeSètus
 !
OTA_STATUS_IN_PROGRESS
)

1490  
ZSuc˚ss
;

1494 
pD©a
 = 
pInMsg
->pData;

1495 
∑øm
.
°©us
 = *
pD©a
++;

1498 i‡(
∑øm
.
°©us
 =
ZCL_STATUS_SUCCESS
)

1501 i‡(
pInMsg
->
pD©aLí
 < 
PAYLOAD_MAX_LEN_IMAGE_BLOCK_RSP
)

1504  
ZCL_STATUS_MALFORMED_COMMAND
;

1508 
∑øm
.
r•
.
suc˚ss
.
fûeId
.
m™uÁ˘uªr
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

1509 
pD©a
 += 2;

1510 
∑øm
.
r•
.
suc˚ss
.
fûeId
.
ty≥
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

1511 
pD©a
 += 2;

1512 
∑øm
.
r•
.
suc˚ss
.
fûeId
.
vîsi⁄
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

1513 
pD©a
 += 4;

1514 
∑øm
.
r•
.
suc˚ss
.
fûeOff£t
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

1515 
pD©a
 += 4;

1516 
∑øm
.
r•
.
suc˚ss
.
d©aSize
 = *
pD©a
++;

1517 
∑øm
.
r•
.
suc˚ss
.
pD©a
 =ÖData;

1520 i‡((
∑øm
.
r•
.
suc˚ss
.
fûeId
.
ty≥
 !
z˛OTA_ImageTy≥
) ||

1521 (
∑øm
.
r•
.
suc˚ss
.
fûeId
.
m™uÁ˘uªr
 !
z˛OTA_M™uÁ˘uªrId
) ||

1522 (
∑øm
.
r•
.
suc˚ss
.
fûeId
.
vîsi⁄
 !
z˛OTA_Dow∆ﬂdedFûeVîsi⁄
))

1524 
°©us
 = 
ZCL_STATUS_INVALID_IMAGE
;

1529 i‡(
∑øm
.
r•
.
suc˚ss
.
fûeOff£t
 !
z˛OTA_FûeOff£t
)

1531  
ZSuc˚ss
;

1534 
°©us
 = 
	`z˛OTA_Pro˚ssImageD©a
(
∑øm
.
r•
.
suc˚ss
.
pD©a
,Ö¨am.r•.suc˚ss.
d©aSize
);

1537 
z˛OTA_BlockRëry
 = 0;

1538 
	`oßl_°›_timîEx
(
z˛OTA_TaskID
, 
ZCL_OTA_BLOCK_RSP_TO_EVT
);

1540 i‡(
°©us
 =
ZSuc˚ss
)

1542 i‡(
z˛OTA_ImageUpgødeSètus
 =
OTA_STATUS_COMPLETE
)

1545 
	`oßl_mem˝y
(&
ªq
.
fûeId
, &
∑øm
.
r•
.
suc˚ss
.fûeId, (
z˛OTA_FûeID_t
));

1546 
ªq
.
°©us
 = 
ZSuc˚ss
;

1547 
	`z˛OTA_SídUpgødeEndReq
–&(
pInMsg
->
msg
->
§cAddr
), &
ªq
 );

1551 
	`£ndImageBlockReq
(&(
pInMsg
->
msg
->
§cAddr
));

1557 i‡(
∑øm
.
°©us
 =
ZCL_STATUS_WAIT_FOR_DATA
)

1560 i‡(
pInMsg
->
pD©aLí
 !
PAYLOAD_MIN_LEN_IMAGE_BLOCK_WAIT
)

1563  
ZCL_STATUS_MALFORMED_COMMAND
;

1567 
∑øm
.
r•
.
waô
.
cuºítTime
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

1568 
pD©a
 += 4;

1569 
∑øm
.
r•
.
waô
.
ªque°Time
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

1572 
z˛OTA_BlockRëry
 = 0;

1573 
	`oßl_°›_timîEx
(
z˛OTA_TaskID
, 
ZCL_OTA_BLOCK_RSP_TO_EVT
);

1576 
	`z˛OTA_SèπTimî
(
ZCL_OTA_IMAGE_BLOCK_WAIT_EVT
,

1577 (
∑øm
.
r•
.
waô
.
ªque°Time
 -Ö¨am.r•.waô.
cuºítTime
));

1579 i‡(
∑øm
.
°©us
 =
ZCL_STATUS_ABORT
)

1582 
z˛OTA_ImageUpgødeSètus
 = 
OTA_STATUS_NORMAL
;

1585 
z˛OTA_BlockRëry
 = 0;

1586 
	`oßl_°›_timîEx
(
z˛OTA_TaskID
, 
ZCL_OTA_BLOCK_RSP_TO_EVT
);

1587 
	`z˛OTA_UpgødeCom∂ëe
(
ZOèAb‹t
);

1589  
ZSuc˚ss
;

1593  
ZCL_STATUS_MALFORMED_COMMAND
;

1596 i‡(
°©us
 !
ZSuc˚ss
)

1599 
z˛OTA_ImageUpgødeSètus
 = 
OTA_STATUS_NORMAL
;

1602 
	`oßl_mem˝y
(&
ªq
.
fûeId
, &
∑øm
.
r•
.
suc˚ss
.fûeId, (
z˛OTA_FûeID_t
));

1603 
ªq
.
°©us
 = status;

1604 
	`z˛OTA_SídUpgødeEndReq
–&(
pInMsg
->
msg
->
§cAddr
), &
ªq
 );

1607  
ZSuc˚ss
;

1608 
	}
}

1619 
ZSètus_t
 
	$z˛OTA_Pro˚ssUpgødeEndR•
–
z˛Incomög_t
 *
pInMsg
 )

1621 
z˛OTA_UpgødeEndR•P¨ams_t
 
∑øm
;

1622 
z˛OTA_FûeID_t
 
cuºítFûeId
 = {
z˛OTA_M™uÁ˘uªrId
, 
z˛OTA_ImageTy≥
, 
z˛OTA_Dow∆ﬂdedFûeVîsi⁄
};

1623 
uöt8
 *
pD©a
;

1626 i‡(
pInMsg
->
pD©aLí
 !
PAYLOAD_MAX_LEN_UPGRADE_END_RSP
)

1629  
ZCL_STATUS_MALFORMED_COMMAND
;

1633 
pD©a
 = 
pInMsg
->pData;

1634 
∑øm
.
fûeId
.
m™uÁ˘uªr
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

1635 
pD©a
 += 2;

1636 
∑øm
.
fûeId
.
ty≥
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

1637 
pD©a
 += 2;

1638 
∑øm
.
fûeId
.
vîsi⁄
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

1639 
pD©a
 += 4;

1640 
∑øm
.
cuºítTime
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

1641 
pD©a
 += 4;

1642 
∑øm
.
upgødeTime
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

1645 i‡((
z˛OTA_ImageUpgødeSètus
 =
OTA_STATUS_COMPLETE
) ||

1646 ((
z˛OTA_ImageUpgødeSètus
 =
OTA_STATUS_UPGRADE_WAIT
Ë&& (
∑øm
.
upgødeTime
!=
OTA_UPGRADE_TIME_WAIT
)))

1649 i‡(
	`z˛OTA_CmpFûeId
(&
∑øm
.
fûeId
, &
cuºítFûeId
Ë=
FALSE
)

1651  
ZSuc˚ss
;

1655 i‡(
∑øm
.
upgødeTime
 !
OTA_UPGRADE_TIME_WAIT
)

1657 
uöt32
 
nŸifyDñay
 = 0;

1659 i‡(
∑øm
.
upgødeTime
 >Ö¨am.
cuºítTime
)

1662 
nŸifyDñay
 = 
∑øm
.
upgødeTime
 -Ö¨am.
cuºítTime
;

1666 
z˛OTA_ImageUpgødeSètus
 = 
OTA_STATUS_COUNTDOWN
;

1668 
	`z˛OTA_SèπTimî
(
ZCL_OTA_UPGRADE_WAIT_EVT
, 
nŸifyDñay
);

1673 
z˛OTA_ImageUpgødeSètus
 = 
OTA_STATUS_UPGRADE_WAIT
;

1675 
	`z˛OTA_SèπTimî
(
ZCL_OTA_UPGRADE_WAIT_EVT
, 3600);

1676 
z˛OTA_UpgødeEndRëry
 = 0;

1680  
ZSuc˚ss
;

1681 
	}
}

1692 
ZSètus_t
 
	$z˛OTA_Pro˚ssQuîyS≥cificFûeR•
–
z˛Incomög_t
 *
pInMsg
 )

1694 
z˛OTA_QuîyImageR•P¨ams_t
 
∑øm
;

1695 
uöt8
 *
pD©a
;

1698 i‡((
pInMsg
->
pD©aLí
 !
PAYLOAD_MAX_LEN_QUERY_SPECIFIC_FILE_RSP
) &&

1699 (
pInMsg
->
pD©aLí
 !
PAYLOAD_MIN_LEN_QUERY_SPECIFIC_FILE_RSP
))

1702  
ZCL_STATUS_MALFORMED_COMMAND
;

1706 i‡(
z˛OTA_ImageUpgødeSètus
 =
OTA_STATUS_IN_PROGRESS
)

1708  
ZSuc˚ss
;

1712 
pD©a
 = 
pInMsg
->pData;

1713 
∑øm
.
°©us
 = *
pD©a
++;

1716 i‡(
∑øm
.
°©us
 =
ZCL_STATUS_SUCCESS
)

1719 
∑øm
.
fûeId
.
m™uÁ˘uªr
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

1720 
pD©a
 += 2;

1721 
∑øm
.
fûeId
.
ty≥
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

1722 
pD©a
 += 2;

1723 
∑øm
.
fûeId
.
vîsi⁄
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

1724 
pD©a
 += 4;

1725 
∑øm
.
imageSize
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

1728 i‡((
∑øm
.
fûeId
.
ty≥
 =
z˛OTA_ImageTy≥
) &&

1729 (
∑øm
.
fûeId
.
m™uÁ˘uªr
 =
z˛OTA_M™uÁ˘uªrId
))

1732 
z˛OTA_Dow∆ﬂdedFûeVîsi⁄
 = 
∑øm
.
fûeId
.
vîsi⁄
;

1733 
z˛OTA_Dow∆ﬂdedImageSize
 = 
∑øm
.
imageSize
;

1736 
z˛OTA_FûeOff£t
 = 0;

1739 
z˛OTA_ImageUpgødeSètus
 = 
OTA_STATUS_IN_PROGRESS
;

1742 
	`£ndImageBlockReq
(&(
pInMsg
->
msg
->
§cAddr
));

1746  
ZSuc˚ss
;

1747 
	}
}

1758 
ZSètus_t
 
	$z˛OTA_Clõ¡HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

1760 
pInMsg
->
hdr
.
comm™dID
)

1762 
COMMAND_IMAGE_NOTIFY
:

1763  
	`z˛OTA_Pro˚ssImageNŸify
–
pInMsg
 );

1765 
COMMAND_QUERY_NEXT_IMAGE_RSP
:

1766  
	`z˛OTA_Pro˚ssQuîyNextImageR•
–
pInMsg
 );

1768 
COMMAND_IMAGE_BLOCK_RSP
:

1769  
	`z˛OTA_Pro˚ssImageBlockR•
–
pInMsg
 );

1771 
COMMAND_UPGRADE_END_RSP
:

1772  
	`z˛OTA_Pro˚ssUpgødeEndR•
–
pInMsg
 );

1774 
COMMAND_QUERY_SPECIFIC_FILE_RSP
:

1775  
	`z˛OTA_Pro˚ssQuîyS≥cificFûeR•
–
pInMsg
 );

1778  
ZFaûuª
;

1780 
	}
}

1791 
uöt8
 
	$z˛OTA_CmpFûeId
(
z˛OTA_FûeID_t
 *
f1
, z˛OTA_FûeID_à*
f2
)

1793 i‡((
f1
->
m™uÁ˘uªr
 == 0xFFFF) ||

1794 (
f2
->
m™uÁ˘uªr
 == 0xFFFF) ||

1795 (
f1
->
m™uÁ˘uªr
 =
f2
->manufacturer))

1797 i‡((
f1
->
ty≥
 == 0xFFFF) ||

1798 (
f2
->
ty≥
 == 0xFFFF) ||

1799 (
f1
->
ty≥
 =
f2
->type))

1801 i‡((
f1
->
vîsi⁄
 == 0xFFFFFFFF) ||

1802 (
f2
->
vîsi⁄
 == 0xFFFFFFFF) ||

1803 (
f1
->
vîsi⁄
 =
f2
->version))

1805  
TRUE
;

1810  
FALSE
;

1811 
	}
}

1822 
	$z˛OTA_ImageBlockWaôExpúed
()

1825 i‡(
z˛OTA_ImageUpgødeSètus
 =
OTA_STATUS_IN_PROGRESS
)

1828 
	`£ndImageBlockReq
(&
z˛OTA_£rvîAddr
);

1830 
	}
}

1841 
	$z˛OTA_UpgødeCom∂ëe
(
uöt8
 
°©us
)

1844 
z˛OTA_ImageUpgødeSètus
 = 
OTA_STATUS_NORMAL
;

1846 i‡((
z˛OTA_Dow∆ﬂdedImageSize
 =
OTA_HEADER_LEN_MIN_ECDSA
) ||

1847 (
z˛OTA_Dow∆ﬂdedImageSize
 =
OTA_HEADER_LEN_MIN
))

1849 
°©us
 = 
ZFaûuª
;

1852 i‡(
z˛OTA_AµTask
 != 0xFF)

1855 
z˛OTA_CÆlbackMsg_t
 *
pMsg
;

1857 
pMsg
 = (
z˛OTA_CÆlbackMsg_t
*Ë
	`oßl_msg_Æloˇã
((zclOTA_CallbackMsg_t));

1859 i‡(
pMsg
)

1861 
pMsg
->
hdr
.
evít
 = 
ZCL_OTA_CALLBACK_IND
;

1862 
pMsg
->
hdr
.
°©us
 = status;

1863 
pMsg
->
Ÿa_evít
 = 
ZCL_OTA_DL_COMPLETE_CALLBACK
;

1865 
	`oßl_msg_£nd
(
z˛OTA_AµTask
, (
uöt8
*Ë
pMsg
);

1868 
	}
}

1879 
	$z˛OTA_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
pMsg
 )

1881 i‡(
pMsg
->
˛u°îID
 =
IEEE_addr_r•
)

1883 
ZDO_NwkIEEEAddrRe•_t
 *
pNwkAddrR•
 = 
	`ZDO_P¨£AddrR•
–
pMsg
 );

1886 i‡(
pNwkAddrR•
 !
NULL
)

1888 i‡(
pNwkAddrR•
->
nwkAddr
 =
z˛OTA_£rvîAddr
.
addr
.
sh‹tAddr
)

1890 
	`oßl_mem˝y
(&
z˛OTA_UpgødeSîvîID
, 
pNwkAddrR•
->
extAddr
, 
Z_EXTADDR_LEN
);

1893 
	`oßl_mem_‰ì
–
pNwkAddrR•
 );

1896 
	}
}

1899 #i‡
deföed
 (
OTA_SERVER
Ë&& (OTA_SERVER =
TRUE
)

1911 
	$z˛OTA_Pro˚ssNextImgR•
(
uöt8
* 
pMsg
, 
z˛OTA_FûeID_t
 *
pFûeId
,

1912 
afAddrTy≥_t
 *
pAddr
)

1914 
z˛OTA_QuîyImageR•P¨ams_t
 
quîyR•
;

1915 
uöt8
 
›ti⁄s
;

1916 
uöt8
 
°©us
;

1919 
°©us
 = *
pMsg
++;

1922 
›ti⁄s
 = *
pMsg
++;

1925 
	`oßl_mem˝y
(&
quîyR•
.
fûeId
, 
pFûeId
, (
z˛OTA_FûeID_t
));

1928 i‡(
°©us
 =
ZSuc˚ss
)

1930 
quîyR•
.
°©us
 = 
ZSuc˚ss
;

1931 
quîyR•
.
imageSize
 = 
	`BUILD_UINT32
(
pMsg
[0],ÖMsg[1],ÖMsg[2],ÖMsg[3]);

1935 
quîyR•
.
°©us
 = 
ZOèNoImageAvaûabÀ
;

1936 
quîyR•
.
imageSize
 = 0;

1939 
quîyRe•⁄£
 = 
quîyR•
;

1942 i‡(
›ti⁄s
 & 
MT_OTA_QUERY_SPECIFIC_OPTION
)

1944 
	`z˛OTA_SídQuîyS≥cificFûeR•
(
pAddr
, &
quîyR•
);

1948 
	`z˛OTA_SídQuîyNextImageR•
(
pAddr
, &
quîyR•
);

1950 
	}
}

1963 
	$z˛OTA_Pro˚ssFûeRódR•
(
uöt8
* 
pMsg
, 
z˛OTA_FûeID_t
 *
pFûeId
,

1964 
afAddrTy≥_t
 *
pAddr
)

1966 
z˛OTA_ImageBlockR•P¨ams_t
 
blockR•
;

1969 
blockR•
.
°©us
 = *
pMsg
++;

1972 i‡(
blockR•
.
°©us
 =
ZSuc˚ss
)

1975 
	`oßl_mem˝y
(&
blockR•
.
r•
.
suc˚ss
.
fûeId
, 
pFûeId
, (
z˛OTA_FûeID_t
));

1976 
blockR•
.
r•
.
suc˚ss
.
fûeOff£t
 = 
	`BUILD_UINT32
(
pMsg
[0],ÖMsg[1],ÖMsg[2],ÖMsg[3]);

1977 
pMsg
 += 4;

1978 
blockR•
.
r•
.
suc˚ss
.
d©aSize
 = *
pMsg
++;

1979 
blockR•
.
r•
.
suc˚ss
.
pD©a
 = 
pMsg
;

1983 
blockR•
.
°©us
 = 
ZOèAb‹t
;

1987 
	`z˛OTA_SídImageBlockR•
(
pAddr
, &
blockR•
);

1988 
	}
}

1999 
	$z˛OTA_SîvîH™dÀFûeSysCb
(
OTA_MtMsg_t
* 
pMSGpkt
)

2001 
z˛OTA_FûeID_t
 
pFûeId
;

2002 
afAddrTy≥_t
 
pAddr
;

2003 
uöt8
 *
pMsg
;

2005 i‡(
pMSGpkt
 !
NULL
)

2008 
pMsg
 = 
pMSGpkt
->
d©a
;

2009 
pMsg
 = 
	`OTA_SåómToFûeId
(&
pFûeId
,ÖMsg);

2010 
pMsg
 = 
	`OTA_SåómToAfAddr
(&
pAddr
,ÖMsg);

2012 
pMSGpkt
->
cmd
)

2014 
MT_OTA_NEXT_IMG_RSP
:

2015 
	`z˛OTA_Pro˚ssNextImgR•
(
pMsg
, &
pFûeId
, &
pAddr
);

2018 
MT_OTA_FILE_READ_RSP
:

2019 
	`z˛OTA_Pro˚ssFûeRódR•
(
pMsg
, &
pFûeId
, &
pAddr
);

2026 
	}
}

2041 
ZSètus_t
 
	$z˛OTA_Srv_QuîyNextImageReq
(
afAddrTy≥_t
 *
pSrcAddr
, 
z˛OTA_QuîyNextImageReqP¨ams_t
 *
pP¨am
)

2043 
uöt8
 
›ti⁄s
 = 0;

2044 
uöt8
 
°©us
;

2046 i‡(
z˛OTA_Pîmô
)

2048 i‡(
pP¨am
->
fõldC⁄åﬁ
)

2050 
›ti⁄s
 |
MT_OTA_HW_VER_PRESENT_OPTION
;

2054 
°©us
 = 
	`MT_OèGëImage
(
pSrcAddr
, &
pP¨am
->
fûeId
,ÖP¨am->
h¨dw¨eVîsi⁄
, 
NULL
, 
›ti⁄s
);

2058 
°©us
 = 
ZOèNoImageAvaûabÀ
;

2061 i‡(
°©us
 !
ZSuc˚ss
)

2063 
z˛OTA_QuîyImageR•P¨ams_t
 
quîyR•
;

2066 
	`oßl_mem˝y
(&
quîyR•
.
fûeId
, &
pP¨am
->fûeId, (
z˛OTA_FûeID_t
));

2067 
quîyR•
.
°©us
 = 
ZOèNoImageAvaûabÀ
;

2068 
quîyR•
.
imageSize
 = 0;

2071 
	`z˛OTA_SídQuîyNextImageR•
(
pSrcAddr
, &
quîyR•
);

2074  
ZCL_STATUS_CMD_HAS_RSP
;

2075 
	}
}

2087 
ZSètus_t
 
	$z˛OTA_Srv_ImageBlockReq
(
afAddrTy≥_t
 *
pSrcAddr
, 
z˛OTA_ImageBlockReqP¨ams_t
 *
pP¨am
)

2089 
uöt8
 
°©us
 = 
ZFaûuª
;

2091 i‡(
pP¨am
->
fûeId
.
vîsi⁄
 !
quîyRe•⁄£
.fileId.version)

2093 
°©us
 = 
ZCL_STATUS_NO_IMAGE_AVAILABLE
;

2098 i‡(
z˛OTA_Pîmô
 && (
pP¨am
 !
NULL
))

2100 
uöt8
 
Àn
 = 
pP¨am
->
maxD©aSize
;

2102 i‡(
Àn
 > 
OTA_MAX_MTU
)

2104 
Àn
 = 
OTA_MAX_MTU
;

2108 
°©us
 = 
	`MT_OèFûeRódReq
(
pSrcAddr
, &
pP¨am
->
fûeId
, 
Àn
,ÖP¨am->
fûeOff£t
);

2111 i‡(
°©us
 !
ZSuc˚ss
)

2113 
z˛OTA_ImageBlockR•P¨ams_t
 
blockR•
;

2116 
blockR•
.
°©us
 = 
ZOèWaôF‹D©a
;

2117 
	`oßl_mem˝y
(&
blockR•
.
r•
.
suc˚ss
.
fûeId
, &
pP¨am
->fûeId, (
z˛OTA_FûeID_t
));

2118 
blockR•
.
r•
.
waô
.
cuºítTime
 = 0;

2119 
blockR•
.
r•
.
waô
.
ªque°Time
 = 
OTA_SEND_BLOCK_WAIT
;

2122 
	`z˛OTA_SídImageBlockR•
(
pSrcAddr
, &
blockR•
);

2125 
°©us
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2130  
°©us
;

2131 
	}
}

2143 
ZSètus_t
 
	$z˛OTA_Srv_ImagePageReq
(
afAddrTy≥_t
 *
pSrcAddr
, 
z˛OTA_ImagePageReqP¨ams_t
 *
pP¨am
)

2146  
ZUnsupClu°îCmd
;

2147 
	}
}

2159 
ZSètus_t
 
	$z˛OTA_Srv_UpgødeEndReq
(
afAddrTy≥_t
 *
pSrcAddr
, 
z˛OTA_UpgødeEndReqP¨ams_t
 *
pP¨am
)

2161 
uöt8
 
°©us
 = 
ZFaûuª
;

2163 i‡(
z˛OTA_Pîmô
 && (
pP¨am
 !
NULL
))

2165 
z˛OTA_UpgødeEndR•P¨ams_t
 
r•P¨ms
;

2167 i‡(
pP¨am
->
°©us
 =
ZSuc˚ss
)

2169 
	`oßl_mem˝y
(&
r•P¨ms
.
fûeId
, &
pP¨am
->fûeId, (
z˛OTA_FûeID_t
));

2170 
r•P¨ms
.
cuºítTime
 = 
	`oßl_GëSy°emClock
();

2171 
r•P¨ms
.
upgødeTime
 =Ñ•P¨ms.
cuºítTime
 + 
OTA_UPGRADE_DELAY
;

2174 
	`z˛OTA_SídUpgødeEndR•
(
pSrcAddr
, &
r•P¨ms
);

2178 
	`MT_OèSídSètus
(
pSrcAddr
->
addr
.
sh‹tAddr
, 
MT_OTA_DL_COMPLETE
, 
pP¨am
->
°©us
, 0);

2180 
°©us
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2183  
°©us
;

2184 
	}
}

2196 
ZSètus_t
 
	$z˛OTA_Srv_QuîyS≥cificFûeReq
(
afAddrTy≥_t
 *
pSrcAddr
, 
z˛OTA_QuîyS≥cificFûeReqP¨ams_t
 *
pP¨am
)

2198 
uöt8
 
°©us
;

2201 i‡(
z˛OTA_Pîmô
)

2203 
°©us
 = 
	`MT_OèGëImage
(
pSrcAddr
, &
pP¨am
->
fûeId
, 0,ÖP¨am->
nodeAddr
, 
MT_OTA_QUERY_SPECIFIC_OPTION
);

2207 
°©us
 = 
ZOèNoImageAvaûabÀ
;

2210 i‡(
°©us
 !
ZSuc˚ss
)

2212 
z˛OTA_QuîyImageR•P¨ams_t
 
quîyR•
;

2215 
	`oßl_mem˝y
(&
quîyR•
.
fûeId
, &
pP¨am
->fûeId, (
z˛OTA_FûeID_t
));

2216 
quîyR•
.
°©us
 = 
ZOèNoImageAvaûabÀ
;

2217 
quîyR•
.
imageSize
 = 0;

2220 
	`z˛OTA_SídQuîyS≥cificFûeR•
(
pSrcAddr
, &
quîyR•
);

2223  
ZCL_STATUS_CMD_HAS_RSP
;

2224 
	}
}

2235 
ZSètus_t
 
	$z˛OTA_Pro˚ssQuîyNextImageReq
–
z˛Incomög_t
 *
pInMsg
 )

2237 
z˛OTA_QuîyNextImageReqP¨ams_t
 
∑øm
;

2238 
uöt8
 *
pD©a
;

2241 i‡((
pInMsg
->
pD©aLí
 !
PAYLOAD_MAX_LEN_QUERY_NEXT_IMAGE_REQ
) &&

2242 (
pInMsg
->
pD©aLí
 !
PAYLOAD_MIN_LEN_QUERY_NEXT_IMAGE_REQ
))

2245  
ZCL_STATUS_MALFORMED_COMMAND
;

2249 
pD©a
 = 
pInMsg
->pData;

2250 
∑øm
.
fõldC⁄åﬁ
 = *
pD©a
++;

2251 
∑øm
.
fûeId
.
m™uÁ˘uªr
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

2252 
pD©a
 += 2;

2253 
∑øm
.
fûeId
.
ty≥
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

2254 
pD©a
 += 2;

2255 
∑øm
.
fûeId
.
vîsi⁄
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

2256 
pD©a
 += 4;

2257 i‡((
∑øm
.
fõldC⁄åﬁ
 & 0x01) != 0)

2259 
∑øm
.
h¨dw¨eVîsi⁄
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

2263  
	`z˛OTA_Srv_QuîyNextImageReq
(&
pInMsg
->
msg
->
§cAddr
, &
∑øm
);

2264 
	}
}

2275 
ZSètus_t
 
	$z˛OTA_Pro˚ssImageBlockReq
–
z˛Incomög_t
 *
pInMsg
 )

2277 
z˛OTA_ImageBlockReqP¨ams_t
 
∑øm
;

2278 
uöt8
 *
pD©a
;

2281 i‡((
pInMsg
->
pD©aLí
 !
PAYLOAD_MAX_LEN_IMAGE_BLOCK_REQ
) &&

2282 (
pInMsg
->
pD©aLí
 !
PAYLOAD_MIN_LEN_IMAGE_BLOCK_REQ
))

2285  
ZCL_STATUS_MALFORMED_COMMAND
;

2289 
pD©a
 = 
pInMsg
->pData;

2290 
∑øm
.
fõldC⁄åﬁ
 = *
pD©a
++;

2291 
∑øm
.
fûeId
.
m™uÁ˘uªr
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

2292 
pD©a
 += 2;

2293 
∑øm
.
fûeId
.
ty≥
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

2294 
pD©a
 += 2;

2295 
∑øm
.
fûeId
.
vîsi⁄
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

2296 
pD©a
 += 4;

2297 
∑øm
.
fûeOff£t
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

2298 
pD©a
 += 4;

2299 
∑øm
.
maxD©aSize
 = *
pD©a
++;

2300 i‡((
∑øm
.
fõldC⁄åﬁ
 & 0x01) != 0)

2302 
	`oßl_˝yExtAddr
(
∑øm
.
nodeAddr
, 
pD©a
);

2306  
	`z˛OTA_Srv_ImageBlockReq
(&
pInMsg
->
msg
->
§cAddr
, &
∑øm
);

2307 
	}
}

2318 
ZSètus_t
 
	$z˛OTA_Pro˚ssImagePageReq
–
z˛Incomög_t
 *
pInMsg
 )

2320 
z˛OTA_ImagePageReqP¨ams_t
 
∑øm
;

2321 
uöt8
 *
pD©a
;

2324 i‡((
pInMsg
->
pD©aLí
 !
PAYLOAD_MAX_LEN_IMAGE_PAGE_REQ
) &&

2325 (
pInMsg
->
pD©aLí
 !
PAYLOAD_MIN_LEN_IMAGE_PAGE_REQ
))

2328  
ZCL_STATUS_MALFORMED_COMMAND
;

2332 
pD©a
 = 
pInMsg
->pData;

2333 
∑øm
.
fõldC⁄åﬁ
 = *
pD©a
++;

2334 
∑øm
.
fûeId
.
m™uÁ˘uªr
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

2335 
pD©a
 += 2;

2336 
∑øm
.
fûeId
.
ty≥
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

2337 
pD©a
 += 2;

2338 
∑øm
.
fûeId
.
vîsi⁄
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

2339 
pD©a
 += 4;

2340 
∑øm
.
fûeOff£t
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

2341 
pD©a
 += 4;

2342 
∑øm
.
maxD©aSize
 = *
pD©a
++;

2343 
∑øm
.
∑geSize
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

2344 
pD©a
 += 2;

2345 
∑øm
.
ª•⁄£S∑cög
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

2346 
pD©a
 += 2;

2347 i‡((
∑øm
.
fõldC⁄åﬁ
 & 0x01) != 0)

2349 
	`oßl_˝yExtAddr
(
∑øm
.
nodeAddr
, 
pD©a
);

2353  
	`z˛OTA_Srv_ImagePageReq
(&
pInMsg
->
msg
->
§cAddr
, &
∑øm
);

2354 
	}
}

2365 
ZSètus_t
 
	$z˛OTA_Pro˚ssUpgødeEndReq
–
z˛Incomög_t
 *
pInMsg
 )

2367 
z˛OTA_UpgødeEndReqP¨ams_t
 
∑øm
;

2368 
uöt8
 *
pD©a
;

2371 i‡((
pInMsg
->
pD©aLí
 !
PAYLOAD_MAX_LEN_UPGRADE_END_REQ
) &&

2372 (
pInMsg
->
pD©aLí
 !
PAYLOAD_MIN_LEN_UPGRADE_END_REQ
))

2375  
ZCL_STATUS_MALFORMED_COMMAND
;

2379 
pD©a
 = 
pInMsg
->pData;

2380 
∑øm
.
°©us
 = *
pD©a
++;

2381 i‡(
∑øm
.
°©us
 =
ZCL_STATUS_SUCCESS
)

2383 
∑øm
.
fûeId
.
m™uÁ˘uªr
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

2384 
pD©a
 += 2;

2385 
∑øm
.
fûeId
.
ty≥
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

2386 
pD©a
 += 2;

2387 
∑øm
.
fûeId
.
vîsi⁄
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

2391  
	`z˛OTA_Srv_UpgødeEndReq
(&
pInMsg
->
msg
->
§cAddr
, &
∑øm
);

2392 
	}
}

2403 
ZSètus_t
 
	$z˛OTA_Pro˚ssQuîyS≥cificFûeReq
–
z˛Incomög_t
 *
pInMsg
 )

2405 
z˛OTA_QuîyS≥cificFûeReqP¨ams_t
 
∑øm
;

2406 
uöt8
 *
pD©a
;

2409 i‡(
pInMsg
->
pD©aLí
 !
PAYLOAD_MAX_LEN_QUERY_SPECIFIC_FILE_REQ
)

2412  
ZCL_STATUS_MALFORMED_COMMAND
;

2416 
pD©a
 = 
pInMsg
->pData;

2417 
	`oßl_˝yExtAddr
(
∑øm
.
nodeAddr
, 
pD©a
);

2418 
pD©a
 +
Z_EXTADDR_LEN
;

2419 
∑øm
.
fûeId
.
m™uÁ˘uªr
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

2420 
pD©a
 += 2;

2421 
∑øm
.
fûeId
.
ty≥
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

2422 
pD©a
 += 2;

2423 
∑øm
.
fûeId
.
vîsi⁄
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

2424 
pD©a
 += 4;

2425 
∑øm
.
°ackVîsi⁄
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

2428  
	`z˛OTA_Srv_QuîyS≥cificFûeReq
(&
pInMsg
->
msg
->
§cAddr
, &
∑øm
);

2429 
	}
}

2440 
ZSètus_t
 
	$z˛OTA_SîvîHdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

2442 
pInMsg
->
hdr
.
comm™dID
)

2444 
COMMAND_QUERY_NEXT_IMAGE_REQ
:

2445  
	`z˛OTA_Pro˚ssQuîyNextImageReq
–
pInMsg
 );

2447 
COMMAND_IMAGE_BLOCK_REQ
:

2448  
	`z˛OTA_Pro˚ssImageBlockReq
–
pInMsg
 );

2450 
COMMAND_IMAGE_PAGE_REQ
:

2451  
	`z˛OTA_Pro˚ssImagePageReq
–
pInMsg
 );

2453 
COMMAND_UPGRADE_END_REQ
:

2454  
	`z˛OTA_Pro˚ssUpgødeEndReq
–
pInMsg
 );

2456 
COMMAND_QUERY_SPECIFIC_FILE_REQ
:

2457  
	`z˛OTA_Pro˚ssQuîyS≥cificFûeReq
–
pInMsg
 );

2460  
ZFaûuª
;

2462 
	}
}

	@Components/stack/zcl/zcl_ota.h

40 #i‚de‡
ZCL_OTA_H


41 
	#ZCL_OTA_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

52 
	~"Ÿa_comm⁄.h
"

57 
	#ZCL_SE_PROFILE_ID
 0x0109

	)

58 
	#ZCL_HA_PROFILE_ID
 0x0104

	)

60 
	#ZCL_SE_DEVICEID_PHYSICAL
 0x0507

	)

62 
	#OTA_MIN_FILENAME_LEN
 27

	)

63 
	#OTA_MAX_MTU
 32

	)

64 
	#OTA_MAX_BLOCK_RETRIES
 10

	)

65 
	#OTA_MAX_END_REQ_RETRIES
 2

	)

66 
	#OTA_MAX_BLOCK_RSP_WAIT_TIME
 ((
uöt16
)5000)

	)

69 
	#ZCL_OTA_ENDPOINT
 14

	)

70 #ifde‡
OTA_HA


71 
	#ZCL_OTA_SAMPLE_PROFILE_ID
 
ZCL_HA_PROFILE_ID


	)

72 
	#ZCL_OTA_SAMPLE_DEVICEID
 0

	)

74 
	#ZCL_OTA_SAMPLE_PROFILE_ID
 
ZCL_SE_PROFILE_ID


	)

75 
	#ZCL_OTA_SAMPLE_DEVICEID
 
ZCL_SE_DEVICEID_PHYSICAL


	)

77 
	#ZCL_OTA_DEVICE_VERSION
 0

	)

78 
	#ZCL_OTA_FLAGS
 0

	)

81 
	#OTA_MANUFACTURER_ID
 0x5678

	)

82 
	#OTA_TYPE_ID
 0x1234

	)

85 
	#OTA_HDR_VERSION
 0x0100

	)

88 
	#OTA_HDR_FC_SEC_CRED_PRESENT
 0x01

	)

89 
	#OTA_HDR_FC_DEV_SPEC_FILE
 0x02

	)

90 
	#OTA_HDR_FC_HW_VER_PRESENT
 0x04

	)

93 
	#OTA_HDR_MFG_MATCH_ALL
 0xFFFF

	)

96 
	#OTA_HDR_IMAGE_SEC_CRED
 0xFFC0

	)

97 
	#OTA_HDR_IMAGE_CONFIG
 0xFFC1

	)

98 
	#OTA_HDR_IMAGE_LOG
 0xFFC2

	)

99 
	#OTA_HDR_IMAGE_MATCH_ALL
 0xFFFF

	)

102 
	#OTA_HDR_FILE_VER_MATCH_ALL
 0xFFFFFFFF

	)

105 
	#OTA_STACK_VER_2006
 0x0000

	)

106 
	#OTA_STACK_VER_2007
 0x0001

	)

107 
	#OTA_STACK_VER_PRO
 0x0002

	)

108 
	#OTA_STACK_VER_IP
 0x0003

	)

111 
	#OTA_SEC_CRED_VER_10
 0x00

	)

112 
	#OTA_SEC_CRED_VER_1X
 0x01

	)

113 
	#OTA_SEC_CRED_VER_20
 0x02

	)

116 
	#ATTRID_UPGRADE_SERVER_ID
 0x0000

	)

117 
	#ATTRID_FILE_OFFSET
 0x0001

	)

118 
	#ATTRID_CURRENT_FILE_VERSION
 0x0002

	)

119 
	#ATTRID_CURRENT_ZIGBEE_STACK_VERSION
 0x0003

	)

120 
	#ATTRID_DOWNLOADED_FILE_VERSION
 0x0004

	)

121 
	#ATTRID_DOWNLOADED_ZIGBEE_STACK_VERSION
 0x0005

	)

122 
	#ATTRID_IMAGE_UPGRADE_STATUS
 0x0006

	)

125 
	#OTA_STATUS_NORMAL
 0x00

	)

126 
	#OTA_STATUS_IN_PROGRESS
 0x01

	)

127 
	#OTA_STATUS_COMPLETE
 0x02

	)

128 
	#OTA_STATUS_UPGRADE_WAIT
 0x03

	)

129 
	#OTA_STATUS_COUNTDOWN
 0x04

	)

130 
	#OTA_STATUS_WAIT_FOR_MORE
 0x05

	)

133 
	#OTA_UPGRADE_TIME_WAIT
 0xFFFFFFFF

	)

136 
	#COMMAND_IMAGE_NOTIFY
 0x00

	)

137 
	#COMMAND_QUERY_NEXT_IMAGE_REQ
 0x01

	)

138 
	#COMMAND_QUERY_NEXT_IMAGE_RSP
 0x02

	)

139 
	#COMMAND_IMAGE_BLOCK_REQ
 0x03

	)

140 
	#COMMAND_IMAGE_PAGE_REQ
 0x04

	)

141 
	#COMMAND_IMAGE_BLOCK_RSP
 0x05

	)

142 
	#COMMAND_UPGRADE_END_REQ
 0x06

	)

143 
	#COMMAND_UPGRADE_END_RSP
 0x07

	)

144 
	#COMMAND_QUERY_SPECIFIC_FILE_REQ
 0x08

	)

145 
	#COMMAND_QUERY_SPECIFIC_FILE_RSP
 0x09

	)

148 
	#PAYLOAD_MAX_LEN_IMAGE_NOTIFY
 10

	)

149 
	#PAYLOAD_MAX_LEN_QUERY_NEXT_IMAGE_REQ
 11

	)

150 
	#PAYLOAD_MAX_LEN_QUERY_NEXT_IMAGE_RSP
 13

	)

151 
	#PAYLOAD_MAX_LEN_IMAGE_BLOCK_REQ
 22

	)

152 
	#PAYLOAD_MAX_LEN_IMAGE_PAGE_REQ
 26

	)

153 
	#PAYLOAD_MAX_LEN_IMAGE_BLOCK_RSP
 14

	)

154 
	#PAYLOAD_MAX_LEN_UPGRADE_END_REQ
 9

	)

155 
	#PAYLOAD_MAX_LEN_UPGRADE_END_RSP
 16

	)

156 
	#PAYLOAD_MAX_LEN_QUERY_SPECIFIC_FILE_REQ
 18

	)

157 
	#PAYLOAD_MAX_LEN_QUERY_SPECIFIC_FILE_RSP
 13

	)

159 
	#PAYLOAD_MIN_LEN_IMAGE_NOTIFY
 2

	)

160 
	#PAYLOAD_MIN_LEN_QUERY_NEXT_IMAGE_REQ
 9

	)

161 
	#PAYLOAD_MIN_LEN_QUERY_NEXT_IMAGE_RSP
 1

	)

162 
	#PAYLOAD_MIN_LEN_IMAGE_BLOCK_REQ
 14

	)

163 
	#PAYLOAD_MIN_LEN_IMAGE_PAGE_REQ
 18

	)

164 
	#PAYLOAD_MIN_LEN_IMAGE_BLOCK_RSP
 14

	)

165 
	#PAYLOAD_MIN_LEN_IMAGE_BLOCK_WAIT
 9

	)

166 
	#PAYLOAD_MIN_LEN_UPGRADE_END_REQ
 1

	)

167 
	#PAYLOAD_MIN_LEN_UPGRADE_END_RSP
 16

	)

168 
	#PAYLOAD_MIN_LEN_QUERY_SPECIFIC_FILE_REQ
 18

	)

169 
	#PAYLOAD_MIN_LEN_QUERY_SPECIFIC_FILE_RSP
 1

	)

172 
	#NOTIFY_PAYLOAD_JITTER
 0x00

	)

173 
	#NOTIFY_PAYLOAD_JITTER_MFG
 0x01

	)

174 
	#NOTIFY_PAYLOAD_JITTER_MFG_TYPE
 0x02

	)

175 
	#NOTIFY_PAYLOAD_JITTER_MFG_TYPE_VERS
 0x03

	)

178 
	#ZCL_OTA_IMAGE_BLOCK_WAIT_EVT
 0x0001

	)

179 
	#ZCL_OTA_UPGRADE_WAIT_EVT
 0x0002

	)

180 
	#ZCL_OTA_QUERY_SERVER_EVT
 0x0004

	)

181 
	#ZCL_OTA_BLOCK_RSP_TO_EVT
 0x0008

	)

182 
	#ZCL_OTA_IMAGE_QUERY_TO_EVT
 0x0010

	)

186 
	#OTA_UPGRADE_DELAY
 60

	)

187 
	#OTA_SEND_BLOCK_WAIT
 5

	)

190 
	#ZCL_OTA_START_CALLBACK
 0

	)

191 
	#ZCL_OTA_DL_COMPLETE_CALLBACK
 1

	)

194 
	#OTA_UPGRADE_IMAGE_TAG_ID
 0

	)

195 
	#OTA_ECDSA_SIGNATURE_TAG_ID
 1

	)

196 
	#OTA_ECDSA_CERT_TAG_ID
 2

	)

199 
	#ZCL_OTA_PD_MAGIC_0_STATE
 0

	)

200 
	#ZCL_OTA_PD_MAGIC_1_STATE
 1

	)

201 
	#ZCL_OTA_PD_MAGIC_2_STATE
 2

	)

202 
	#ZCL_OTA_PD_MAGIC_3_STATE
 3

	)

203 
	#ZCL_OTA_PD_HDR_LEN1_STATE
 4

	)

204 
	#ZCL_OTA_PD_HDR_LEN2_STATE
 5

	)

205 
	#ZCL_OTA_PD_STK_VER1_STATE
 6

	)

206 
	#ZCL_OTA_PD_STK_VER2_STATE
 7

	)

207 
	#ZCL_OTA_PD_CONT_HDR_STATE
 8

	)

208 
	#ZCL_OTA_PD_ELEM_TAG1_STATE
 9

	)

209 
	#ZCL_OTA_PD_ELEM_TAG2_STATE
 10

	)

210 
	#ZCL_OTA_PD_ELEM_LEN1_STATE
 11

	)

211 
	#ZCL_OTA_PD_ELEM_LEN2_STATE
 12

	)

212 
	#ZCL_OTA_PD_ELEM_LEN3_STATE
 13

	)

213 
	#ZCL_OTA_PD_ELEM_LEN4_STATE
 14

	)

214 
	#ZCL_OTA_PD_ELEMENT_STATE
 15

	)

222 
uöt8
 
∑ylﬂdTy≥
;

223 
uöt8
 
quîyJôãr
;

224 
z˛OTA_FûeID_t
 
fûeId
;

225 } 
	tz˛OTA_ImageNŸifyP¨ams_t
;

229 
uöt8
 
fõldC⁄åﬁ
;

230 
z˛OTA_FûeID_t
 
fûeId
;

231 
uöt16
 
h¨dw¨eVîsi⁄
;

232 } 
	tz˛OTA_QuîyNextImageReqP¨ams_t
;

236 
uöt8
 
°©us
;

237 
z˛OTA_FûeID_t
 
fûeId
;

238 
uöt32
 
imageSize
;

239 } 
	tz˛OTA_QuîyImageR•P¨ams_t
;

243 
uöt8
 
fõldC⁄åﬁ
;

244 
z˛OTA_FûeID_t
 
fûeId
;

245 
uöt32
 
fûeOff£t
;

246 
uöt8
 
maxD©aSize
;

247 
uöt8
 
nodeAddr
[
Z_EXTADDR_LEN
];

248 } 
	tz˛OTA_ImageBlockReqP¨ams_t
;

252 
uöt8
 
fõldC⁄åﬁ
;

253 
z˛OTA_FûeID_t
 
fûeId
;

254 
uöt32
 
fûeOff£t
;

255 
uöt8
 
maxD©aSize
;

256 
uöt16
 
∑geSize
;

257 
uöt16
 
ª•⁄£S∑cög
;

258 
uöt8
 
nodeAddr
[
Z_EXTADDR_LEN
];

259 } 
	tz˛OTA_ImagePageReqP¨ams_t
;

263 
z˛OTA_FûeID_t
 
fûeId
;

264 
uöt32
 
fûeOff£t
;

265 
uöt8
 
d©aSize
;

266 
uöt8
 *
pD©a
;

267 } 
	timageBlockR•Suc˚ss_t
;

271 
uöt32
 
cuºítTime
;

272 
uöt32
 
ªque°Time
;

273 } 
	timageBlockR•Waô_t
;

277 
imageBlockR•Suc˚ss_t
 
suc˚ss
;

278 
imageBlockR•Waô_t
 
waô
;

279 } 
	timageBlockR•_t
;

283 
uöt8
 
°©us
;

284 
imageBlockR•_t
 
r•
;

285 } 
	tz˛OTA_ImageBlockR•P¨ams_t
;

289 
uöt8
 
°©us
;

290 
z˛OTA_FûeID_t
 
fûeId
;

291 } 
	tz˛OTA_UpgødeEndReqP¨ams_t
;

295 
z˛OTA_FûeID_t
 
fûeId
;

296 
uöt32
 
cuºítTime
;

297 
uöt32
 
upgødeTime
;

298 } 
	tz˛OTA_UpgødeEndR•P¨ams_t
;

302 
uöt8
 
nodeAddr
[
Z_EXTADDR_LEN
];

303 
z˛OTA_FûeID_t
 
fûeId
;

304 
uöt16
 
°ackVîsi⁄
;

305 } 
	tz˛OTA_QuîyS≥cificFûeReqP¨ams_t
;

309 
z˛OTA_QuîyImageR•P¨ams_t
 
quîyNextImageR•
;

310 
z˛OTA_ImageBlockR•P¨ams_t
 
imageBlockR•
;

311 
z˛OTA_UpgødeEndR•P¨ams_t
 
upgødeEndR•
;

312 
z˛OTA_QuîyImageR•P¨ams_t
 
quîyS≥cificFûeR•
;

313 } 
	tz˛OTA_R•P¨ams_t
;

317 
oßl_evít_hdr_t
 
hdr
;

318 
uöt8
 
Ÿa_evít
;

319 } 
	tz˛OTA_CÆlbackMsg_t
;

325 
uöt8
 
z˛OTA_UpgødeSîvîID
[
Z_EXTADDR_LEN
];

326 
uöt32
 
z˛OTA_FûeOff£t
;

327 
uöt32
 
z˛OTA_CuºítFûeVîsi⁄
;

328 
uöt16
 
z˛OTA_CuºítZigBìSèckVîsi⁄
;

329 
uöt32
 
z˛OTA_Dow∆ﬂdedFûeVîsi⁄
;

330 
uöt16
 
z˛OTA_Dow∆ﬂdedZigBìSèckVîsi⁄
;

331 
uöt8
 
z˛OTA_ImageUpgødeSètus
;

332 
uöt16
 
z˛OTA_M™uÁ˘uªrId
;

333 
uöt16
 
z˛OTA_ImageTy≥
;

349 
z˛OTA_Regi°î
(
uöt8
 
≠∂iˇti⁄TaskId
);

362 
z˛OTA_Reque°NextUpd©e
(
uöt16
 
§vAddr
, 
uöt8
 
§vEndPoöt
);

373 
z˛OTA_PîmôOè
(
uöt8
 
≥rmô
);

384 
z˛OTA_Inô
–
uöt8
 
èsk_id
 );

396 
uöt16
 
z˛OTA_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

398 #i‡
deföed
(
OTA_SERVER
Ë&& (OTA_SERVER =
TRUE
)

409 
ZSètus_t
 
z˛OTA_SídImageNŸify
(
afAddrTy≥_t
 *
d°Addr
, 
z˛OTA_ImageNŸifyP¨ams_t
 *
pP¨ams
);

412 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_pi.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

45 
	~"z˛.h
"

46 
	~"z˛_gíîÆ.h
"

47 
	~"z˛_pi.h
"

49 #i‡
deföed
 ( 
INTER_PAN
 )

50 
	~"°ub_≠s.h
"

64 
	sz˛PICBRec


66 
z˛PICBRec
 *
	m√xt
;

67 
uöt8
 
	mídpoöt
;

68 
z˛PI_AµCÆlbacks_t
 *
	mCBs
;

69 } 
	tz˛PICBRec_t
;

82 
z˛PICBRec_t
 *
	gz˛PICBs
 = (z˛PICBRec_à*)
NULL
;

83 
uöt8
 
	gz˛PIPlugöRegi°ed
 = 
FALSE
;

88 
ZSètus_t
 
z˛PI_HdlIncomög
–
z˛Incomög_t
 *
pInHdÃMsg
 );

89 
ZSètus_t
 
z˛PI_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

90 
z˛PI_AµCÆlbacks_t
 *
z˛PI_FödCÆlbacks
–
uöt8
 
ídpoöt
 );

92 
ZSètus_t
 
z˛PI_Pro˚ssIn_GíîicTu¬eSîvî
–
z˛Incomög_t
 *
pInMsg
,

93 
z˛PI_AµCÆlbacks_t
 *
pCBs
 );

94 
ZSètus_t
 
z˛PI_Pro˚ssIn_GíîicTu¬eClõ¡
–
z˛Incomög_t
 *
pInMsg
,

95 
z˛PI_AµCÆlbacks_t
 *
pCBs
 );

96 
ZSètus_t
 
z˛PI_Pro˚ssIn_BAC√tTu¬ñCmds
–
z˛Incomög_t
 *
pInMsg
,

97 
z˛PI_AµCÆlbacks_t
 *
pCBs
 );

98 
ZSètus_t
 
z˛PI_Pro˚ssIn_11073Tu¬ñCmds
–
z˛Incomög_t
 *
pInMsg
,

99 
z˛PI_AµCÆlbacks_t
 *
pCBs
 );

111 
ZSètus_t
 
	$z˛PI_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛PI_AµCÆlbacks_t
 *
ˇŒbacks
 )

113 
z˛PICBRec_t
 *
pNewIãm
;

114 
z˛PICBRec_t
 *
pLo›
;

117 i‡–!
z˛PIPlugöRegi°ed
 )

119 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_PI_GENERIC_TUNNEL
,

120 
ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL
,

121 
z˛PI_HdlIncomög
 );

122 
z˛PIPlugöRegi°ed
 = 
TRUE
;

126 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛PICBRec_t
 ) );

127 i‡–
pNewIãm
 =
NULL
 )

128  (
ZMemEº‹
);

130 
pNewIãm
->
√xt
 = (
z˛PICBRec_t
 *)
NULL
;

131 
pNewIãm
->
ídpoöt
 =Éndpoint;

132 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

135 i‡–
z˛PICBs
 =
NULL
 )

137 
z˛PICBs
 = 
pNewIãm
;

142 
pLo›
 = 
z˛PICBs
;

143  
pLo›
->
√xt
 !
NULL
 )

144 
pLo›
 =ÖLo›->
√xt
;

147 
pLo›
->
√xt
 = 
pNewIãm
;

149  ( 
ZSuc˚ss
 );

150 
	}
}

171 
ZSètus_t
 
	$z˛PI_Síd_M©chPrŸocﬁAddrCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

172 
uöt8
 
Àn
, uöt8 *
¥ŸocﬁAddr
,

173 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

175 
uöt8
 *
buf
;

176 
ZSètus_t
 
°©
;

178 
buf
 = 
	`oßl_mem_Æloc
–
Àn
+1 );

179 i‡–
buf
 )

181 
buf
[0] = 
Àn
;

182 
	`oßl_mem˝y
–&(
buf
[1]), 
¥ŸocﬁAddr
, 
Àn
 );

184 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_PI_GENERIC_TUNNEL
,

185 
COMMAND_PI_GENERIC_TUNNEL_MATCH_PROTOCOL_ADDR
, 
TRUE
,

186 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

187 (
Àn
+1), 
buf
 );

188 
	`oßl_mem_‰ì
–
buf
 );

192 
°©
 = 
ZMemEº‹
;

195  ( 
°©
 );

196 
	}
}

215 
ZSètus_t
 
	$z˛PI_Síd_M©chPrŸocﬁAddrR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

216 
uöt8
 *
õìAddr
, uöt8 
Àn
, uöt8 *
¥ŸocﬁAddr
,

217 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

219 
uöt8
 *
buf
;

220 
uöt8
 
msgLí
 = 
Z_EXTADDR_LEN
 + 1 + 
Àn
;

221 
ZSètus_t
 
°©
;

223 
buf
 = 
	`oßl_mem_Æloc
–
msgLí
 );

224 i‡–
buf
 )

227 
	`oßl_˝yExtAddr
–
buf
, 
õìAddr
 );

230 
buf
[8] = 
Àn
;

231 
	`oßl_mem˝y
–&(
buf
[9]), 
¥ŸocﬁAddr
, 
Àn
 );

233 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_PI_GENERIC_TUNNEL
,

234 
COMMAND_PI_GENERIC_TUNNEL_MATCH_PROTOCOL_ADDR_RSP
, 
TRUE
,

235 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

236 
msgLí
, 
buf
 );

237 
	`oßl_mem_‰ì
–
buf
 );

241 
°©
 = 
ZMemEº‹
;

244  ( 
°©
 );

245 
	}
}

264 
ZSètus_t
 
	$z˛PI_Síd_Advîti£PrŸocﬁAddrCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

265 
uöt8
 
Àn
, uöt8 *
¥ŸocﬁAddr
,

266 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

268 
uöt8
 *
buf
;

269 
ZSètus_t
 
°©
;

271 
buf
 = 
	`oßl_mem_Æloc
–
Àn
+1 );

272 i‡–
buf
 )

274 
buf
[0] = 
Àn
;

275 
	`oßl_mem˝y
–&(
buf
[1]), 
¥ŸocﬁAddr
, 
Àn
 );

277 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_PI_GENERIC_TUNNEL
,

278 
COMMAND_PI_GENERIC_TUNNEL_ADVERTISE_PROTOCOL_ADDR
, 
TRUE
,

279 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

280 (
Àn
+1), 
buf
 );

281 
	`oßl_mem_‰ì
–
buf
 );

285 
°©
 = 
ZMemEº‹
;

288  ( 
°©
 );

289 
	}
}

317 
ZSètus_t
 
	$z˛PI_Síd_11073Tøns„rAPDUCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

318 
uöt16
 
Àn
, 
uöt8
 *
≠du
, uöt8 
£qNum
 )

320 
uöt8
 *
buf
;

321 
ZSètus_t
 
°©
;

323 
buf
 = 
	`oßl_mem_Æloc
–
Àn
+2 );

324 i‡–
buf
 )

326 
buf
[0] = 
	`LO_UINT16
–
Àn
 );

327 
buf
[1] = 
	`HI_UINT16
–
Àn
 );

328 
	`oßl_mem˝y
–&(
buf
[2]), 
≠du
, 
Àn
 );

332 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL
,

333 
COMMAND_PI_11073_TUNNEL_TRANSFER_APDU
, 
TRUE
,

334 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
TRUE
, 0, 
£qNum
, (
Àn
+2), 
buf
 );

335 
	`oßl_mem_‰ì
–
buf
 );

339 
°©
 = 
ZMemEº‹
;

342  ( 
°©
 );

343 
	}
}

368 
ZSètus_t
 
	$z˛PI_Síd_11073C⁄√˘Req
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

369 
uöt8
 
c⁄√˘Cål
, 
uöt16
 
idÀTimeout
,

370 
uöt8
 *
m™agîAddr
, uöt8 
m™agîEP
,

371 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

373 
uöt8
 *
buf
;

374 
uöt8
 
msgLí
 = 1 + 2 + 
Z_EXTADDR_LEN
 + 1;

375 
ZSètus_t
 
°©
;

377 
buf
 = 
	`oßl_mem_Æloc
–
msgLí
 );

378 i‡–
buf
 )

380 
buf
[0] = 
c⁄√˘Cål
;

381 
buf
[1] = 
	`LO_UINT16
–
idÀTimeout
 );

382 
buf
[2] = 
	`HI_UINT16
–
idÀTimeout
 );

383 
	`oßl_mem˝y
–&(
buf
[3]), 
m™agîAddr
, 
Z_EXTADDR_LEN
 );

384 
buf
[11] = 
m™agîEP
;

386 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL
,

387 
COMMAND_PI_11073_TUNNEL_CONNECT_REQ
, 
TRUE
,

388 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

389 
msgLí
, 
buf
 );

390 
	`oßl_mem_‰ì
–
buf
 );

394 
°©
 = 
ZMemEº‹
;

397  ( 
°©
 );

398 
	}
}

409 
z˛PI_AµCÆlbacks_t
 *
	$z˛PI_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

411 
z˛PICBRec_t
 *
pCBs
;

413 
pCBs
 = 
z˛PICBs
;

414  
pCBs
 )

416 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

417  ( 
pCBs
->
CBs
 );

419  ( (
z˛PI_AµCÆlbacks_t
 *)
NULL
 );

420 
	}
}

434 
ZSètus_t
 
	$z˛PI_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

436 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

438 #i‡
	`deföed
 ( 
INTER_PAN
 )

439 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

440  ( 
°©
 );

443 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

446 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

448 
°©
 = 
	`z˛PI_HdlInS≥cificComm™ds
–
pInMsg
 );

453 
°©
 = 
ZFaûuª
;

459 
°©
 = 
ZFaûuª
;

462  ( 
°©
 );

463 
	}
}

475 
ZSètus_t
 
	$z˛PI_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

477 
ZSètus_t
 
°©
;

478 
z˛PI_AµCÆlbacks_t
 *
pCBs
;

481 
pCBs
 = 
	`z˛PI_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

482 i‡–
pCBs
 =
NULL
 )

483  ( 
ZFaûuª
 );

485  
pInMsg
->
msg
->
˛u°îId
 )

487 
ZCL_CLUSTER_ID_PI_GENERIC_TUNNEL
:

488 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

489 
°©
 = 
	`z˛PI_Pro˚ssIn_GíîicTu¬eSîvî
–
pInMsg
, 
pCBs
 );

491 
°©
 = 
	`z˛PI_Pro˚ssIn_GíîicTu¬eClõ¡
–
pInMsg
, 
pCBs
 );

494 
ZCL_CLUSTER_ID_PI_BACNET_PROTOCOL_TUNNEL
:

495 
°©
 = 
	`z˛PI_Pro˚ssIn_BAC√tTu¬ñCmds
–
pInMsg
, 
pCBs
 );

498 
ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL
:

499 
°©
 = 
	`z˛PI_Pro˚ssIn_11073Tu¬ñCmds
–
pInMsg
, 
pCBs
 );

503 
°©
 = 
ZFaûuª
;

507  ( 
°©
 );

508 
	}
}

520 
ZSètus_t
 
	$z˛PI_Pro˚ssIn_GíîicTu¬eSîvî
–
z˛Incomög_t
 *
pInMsg
,

521 
z˛PI_AµCÆlbacks_t
 *
pCBs
 )

523 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_PI_GENERIC_TUNNEL_MATCH_PROTOCOL_ADDR
 )

524  (
ZFaûuª
);

526 i‡–
pCBs
->
p‚PI_M©chPrŸocﬁAddr
 )

528 
z˛PIM©chPrŸocﬁAddr_t
 
cmd
;

530 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

531 
cmd
.
£qNum
 = 
pInMsg
->
hdr
.
å™sSeqNum
;

532 
cmd
.
Àn
 = 
pInMsg
->
pD©a
[0];

533 
cmd
.
¥ŸocﬁAddr
 = &(
pInMsg
->
pD©a
[1]);

535 
pCBs
->
	`p‚PI_M©chPrŸocﬁAddr
–&
cmd
 );

538  ( 
ZSuc˚ss
 );

539 
	}
}

551 
ZSètus_t
 
	$z˛PI_Pro˚ssIn_GíîicTu¬eClõ¡
–
z˛Incomög_t
 *
pInMsg
,

552 
z˛PI_AµCÆlbacks_t
 *
pCBs
 )

554 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

556  
pInMsg
->
hdr
.
comm™dID
 )

558 
COMMAND_PI_GENERIC_TUNNEL_MATCH_PROTOCOL_ADDR_RSP
:

559 i‡–
pCBs
->
p‚PI_M©chPrŸocﬁAddrR•
 )

561 
z˛PIM©chPrŸocﬁAddrR•_t
 
cmd
;

563 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

564 
cmd
.
õìAddr
 = 
pInMsg
->
pD©a
;

565 
cmd
.
Àn
 = 
pInMsg
->
pD©a
[8];

566 
cmd
.
¥ŸocﬁAddr
 = &(
pInMsg
->
pD©a
[9]);

568 
pCBs
->
	`p‚PI_M©chPrŸocﬁAddrR•
–&
cmd
 );

572 
COMMAND_PI_GENERIC_TUNNEL_ADVERTISE_PROTOCOL_ADDR
:

573 i‡–
pCBs
->
p‚PI_Advîti£PrŸocﬁAddr
 )

575 
z˛PIAdvîti£PrŸocﬁAddr_t
 
cmd
;

577 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

578 
cmd
.
Àn
 = 
pInMsg
->
pD©a
[0];

579 
cmd
.
¥ŸocﬁAddr
 = &(
pInMsg
->
pD©a
[1]);

581 
pCBs
->
	`p‚PI_Advîti£PrŸocﬁAddr
–&
cmd
 );

587 
°©
 = 
ZFaûuª
;

591  ( 
°©
 );

592 
	}
}

604 
ZSètus_t
 
	$z˛PI_Pro˚ssIn_BAC√tTu¬ñCmds
–
z˛Incomög_t
 *
pInMsg
,

605 
z˛PI_AµCÆlbacks_t
 *
pCBs
 )

607 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_PI_BACNET_TUNNEL_TRANSFER_NPDU
 )

608  (
ZFaûuª
);

610 i‡–
pCBs
->
p‚PI_BAC√tTøns„rNPDU
 )

612 
z˛BAC√tTøns„rNPDU_t
 
cmd
;

614 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

615 
cmd
.
Àn
 = 
pInMsg
->
pD©aLí
;

616 
cmd
.
≈du
 = 
pInMsg
->
pD©a
;

618 
pCBs
->
	`p‚PI_BAC√tTøns„rNPDU
–&
cmd
 );

621  ( 
ZSuc˚ss
 );

622 
	}
}

634 
ZSètus_t
 
	$z˛PI_Pro˚ssIn_11073Tu¬ñCmds
–
z˛Incomög_t
 *
pInMsg
,

635 
z˛PI_AµCÆlbacks_t
 *
pCBs
 )

637 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

639  
pInMsg
->
hdr
.
comm™dID
 )

641 
COMMAND_PI_11073_TUNNEL_TRANSFER_APDU
:

642 i‡–
pCBs
->
p‚PI_11073Tøns„rAPDU
 )

644 
z˛11073Tøns„rAPDU_t
 
cmd
;

646 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

647 
cmd
.
Àn
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

648 
cmd
.
≠du
 = &(
pInMsg
->
pD©a
[2]);

650 
pCBs
->
	`p‚PI_11073Tøns„rAPDU
–&
cmd
 );

654 
COMMAND_PI_11073_TUNNEL_CONNECT_REQ
:

655 i‡–
pCBs
->
p‚PI_11073C⁄√˘Req
 )

657 
z˛11073C⁄√˘Req_t
 
cmd
;

659 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

660 
cmd
.
£qNum
 = 
pInMsg
->
hdr
.
å™sSeqNum
;

661 
cmd
.
c⁄√˘Cål
 = 
pInMsg
->
pD©a
[0];

662 
cmd
.
idÀTimeout
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[1],ÖInMsg->pData[2] );

663 
cmd
.
m™agîAddr
 = &(
pInMsg
->
pD©a
[3]);

664 
cmd
.
m™agîEP
 = 
pInMsg
->
pD©a
[11];

666 
pCBs
->
	`p‚PI_11073C⁄√˘Req
–&
cmd
 );

670 
COMMAND_PI_11073_TUNNEL_DISCONNECT_REQ
:

671 i‡–
pCBs
->
p‚PI_11073Disc⁄√˘Req
 )

673 
z˛11073Disc⁄√˘Req_t
 
cmd
;

675 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

676 
cmd
.
£qNum
 = 
pInMsg
->
hdr
.
å™sSeqNum
;

677 
cmd
.
m™agîAddr
 = 
pInMsg
->
pD©a
;

679 
pCBs
->
	`p‚PI_11073Disc⁄√˘Req
–&
cmd
 );

683 
COMMAND_PI_11073_TUNNEL_CONNECT_STATUS_NOTI
:

684 i‡–
pCBs
->
p‚PI_11073C⁄√˘SètusNŸi
 )

686 
z˛11073C⁄√˘SètusNŸi_t
 
cmd
;

688 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

689 
cmd
.
c⁄√˘Sètus
 = 
pInMsg
->
pD©a
[0];

691 
pCBs
->
	`p‚PI_11073C⁄√˘SètusNŸi
–&
cmd
 );

697 
°©
 = 
ZFaûuª
;

701  ( 
°©
 );

702 
	}
}

	@Components/stack/zcl/zcl_pi.h

40 #i‚de‡
ZCL_PI_H


41 
	#ZCL_PI_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

61 
	#ATTRID_PI_GENERIC_TUNNEL_MAX_IN_TRANSFER_SIZE
 0x0001

	)

62 
	#ATTRID_PI_GENERIC_TUNNEL_MAX_OUT_TRANSFER_SIZE
 0x0002

	)

63 
	#ATTRID_PI_GENERIC_TUNNEL_PROTOCOL_ADDR
 0x0003

	)

68 
	#ATTRID_PI_11073_TUNNEL_DEVICEID_LIST
 0x0000

	)

69 
	#ATTRID_PI_11073_TUNNEL_MANAGER_TARGET
 0x0001

	)

70 
	#ATTRID_PI_11073_TUNNEL_MANAGER_ENDPOINT
 0x0002

	)

71 
	#ATTRID_PI_11073_TUNNEL_CONNECTED
 0x0003

	)

72 
	#ATTRID_PI_11073_TUNNEL_PREEMPTIBLE
 0x0004

	)

73 
	#ATTRID_PI_11073_TUNNEL_IDLE_TIMEOUT
 0x0005

	)

76 
	#ATTRID_IOV_BACNET_REG_CHANGE_OF_STATE_CNT
 0x000F

	)

77 
	#ATTRID_IOV_BACNET_REG_CHANGE_OF_STATE_TIME
 0x0010

	)

78 
	#ATTRID_IOV_BACNET_REG_COV_INCREMENT
 0x0016

	)

79 
	#ATTRID_IOV_BACNET_REG_DEVICE_TYPE
 0x001F

	)

80 
	#ATTRID_IOV_BACNET_REG_ELAPSED_ACT_TIME
 0x0021

	)

81 
	#ATTRID_IOV_BACNET_REG_FEEDBACK_VALUE
 0x0028

	)

82 
	#ATTRID_IOV_BACNET_REG_OBJECT_ID
 0x004B

	)

83 
	#ATTRID_IOV_BACNET_REG_OBJECT_NAME
 0x004D

	)

84 
	#ATTRID_IOV_BACNET_REG_OBJECT_TYPE
 0x004F

	)

85 
	#ATTRID_IOV_BACNET_REG_UPDATE_INT
 0x0076

	)

86 
	#ATTRID_IOV_BACNET_REG_TIME_OF_AT_RESET
 0x0072

	)

87 
	#ATTRID_IOV_BACNET_REG_TIME_OF_SC_RESET
 0x0073

	)

88 
	#ATTRID_IOV_BACNET_REG_PROFILE_NAME
 0x00A8

	)

91 
	#ATTRID_IOV_BACNET_EXT_ACKED_TRANSIT
 0x0000

	)

92 
	#ATTRID_IOV_BACNET_EXT_ALARM_VALUE
 0x0006

	)

94 
	#ATTRID_IOV_BACNET_EXT_NOTIFY_CLASS
 0x0011

	)

95 
	#ATTRID_IOV_BACNET_EXT_DEADBAND
 0x0019

	)

96 
	#ATTRID_IOV_BACNET_EXT_EVENT_ENABLE
 0x0023

	)

97 
	#ATTRID_IOV_BACNET_EXT_EVENT_STATE
 0x0024

	)

98 
	#ATTRID_IOV_BACNET_EXT_FAULT_VALUES
 0x0025

	)

99 
	#ATTRID_IOV_BACNET_EXT_HI_LIMIT
 0x002D

	)

100 
	#ATTRID_IOV_BACNET_EXT_LIMIT_ENABLE
 0x0034

	)

101 
	#ATTRID_IOV_BACNET_EXT_LO_LIMIT
 0x003B

	)

102 
	#ATTRID_IOV_BACNET_EXT_NOTIFY_TYPE
 0x0048

	)

103 
	#ATTRID_IOV_BACNET_EXT_TIME_DELAY
 0x0071

	)

104 
	#ATTRID_IOV_BACNET_EXT_EV_TIME_STAMPS
 0x0082

	)

109 
	#CONNECT_CTRL_PREEMPTIBLE_BIT
 0x01

	)

112 
	#CONNECT_STATUS_DISCONNECTED
 0x00

	)

113 
	#CONNECT_STATUS_CONNECTED
 0x01

	)

114 
	#CONNECT_STATUS_NOT_AUTHORIZED
 0x02

	)

115 
	#CONNECT_STATUS_RECONNECT_REQ
 0x03

	)

116 
	#CONNECT_STATUS_ALREADY_CONNECTED
 0x04

	)

119 
	#ACKED_TRANSIT_TO_OFFNORMAL
 0x01

	)

120 
	#ACKED_TRANSIT_TO_FAULT
 0x02

	)

121 
	#ACKED_TRANSIT_TO_NORMAL
 0x04

	)

124 
	#EVENT_STATE_NORMAL
 0x00

	)

125 
	#EVENT_STATE_FAULT
 0x01

	)

126 
	#EVENT_STATE_OFFNORMAL
 0x02

	)

127 
	#EVENT_STATE_HIGH_LIMIT
 0x03

	)

128 
	#EVENT_STATE_LOW_LIMIT
 0x04

	)

131 
	#NORIFY_TYPE_EVENTS
 0x00

	)

132 
	#NORIFY_TYPE_ALARMS
 0x01

	)

138 
	#COMMAND_PI_GENERIC_TUNNEL_MATCH_PROTOCOL_ADDR
 0x00

	)

140 
	#COMMAND_PI_GENERIC_TUNNEL_MATCH_PROTOCOL_ADDR_RSP
 0x00

	)

141 
	#COMMAND_PI_GENERIC_TUNNEL_ADVERTISE_PROTOCOL_ADDR
 0x01

	)

144 
	#COMMAND_PI_BACNET_TUNNEL_TRANSFER_NPDU
 0x00

	)

147 
	#COMMAND_PI_11073_TUNNEL_TRANSFER_APDU
 0x00

	)

148 
	#COMMAND_PI_11073_TUNNEL_CONNECT_REQ
 0x01

	)

149 
	#COMMAND_PI_11073_TUNNEL_DISCONNECT_REQ
 0x02

	)

150 
	#COMMAND_PI_11073_TUNNEL_CONNECT_STATUS_NOTI
 0x03

	)

165 
afAddrTy≥_t
 *
§cAddr
;

166 
uöt8
 
£qNum
;

167 
uöt8
 
Àn
;

168 
uöt8
 *
¥ŸocﬁAddr
;

169 } 
	tz˛PIM©chPrŸocﬁAddr_t
;

174 
afAddrTy≥_t
 *
§cAddr
;

175 
uöt8
 *
õìAddr
;

176 
uöt8
 
Àn
;

177 
uöt8
 *
¥ŸocﬁAddr
;

178 } 
	tz˛PIM©chPrŸocﬁAddrR•_t
;

183 
afAddrTy≥_t
 *
§cAddr
;

184 
uöt8
 
Àn
;

185 
uöt8
 *
¥ŸocﬁAddr
;

186 } 
	tz˛PIAdvîti£PrŸocﬁAddr_t
;

191 
afAddrTy≥_t
 *
§cAddr
;

192 
uöt16
 
Àn
;

193 
uöt8
 *
≈du
;

194 } 
	tz˛BAC√tTøns„rNPDU_t
;

199 
afAddrTy≥_t
 *
§cAddr
;

200 
uöt16
 
Àn
;

201 
uöt8
 *
≠du
;

202 } 
	tz˛11073Tøns„rAPDU_t
;

207 
afAddrTy≥_t
 *
§cAddr
;

208 
uöt8
 
£qNum
;

209 
uöt8
 
c⁄√˘Cål
;

210 
uöt16
 
idÀTimeout
;

212 
uöt8
 *
m™agîAddr
;

214 
uöt8
 
m™agîEP
;

216 } 
	tz˛11073C⁄√˘Req_t
;

221 
afAddrTy≥_t
 *
§cAddr
;

222 
uöt8
 
£qNum
;

223 
uöt8
 *
m™agîAddr
;

225 } 
	tz˛11073Disc⁄√˘Req_t
;

230 
afAddrTy≥_t
 *
§cAddr
;

231 
uöt8
 
c⁄√˘Sètus
;

232 } 
	tz˛11073C⁄√˘SètusNŸi_t
;

236 (*
z˛PICB_M©chPrŸocﬁAddr_t
)–
	tz˛PIM©chPrŸocﬁAddr_t
 *
	tpCmd
 );

240 (*
z˛PICB_M©chPrŸocﬁAddrR•_t
)–
	tz˛PIM©chPrŸocﬁAddrR•_t
 *
	tpR•
 );

244 (*
z˛PICB_Advîti£PrŸocﬁAddr_t
)–
	tz˛PIAdvîti£PrŸocﬁAddr_t
 *
	tpCmd
 );

248 (*
z˛PICB_BAC√tTøns„rNPDU_t
)–
	tz˛BAC√tTøns„rNPDU_t
 *
	tpCmd
 );

252 (*
z˛PICB_11073Tøns„rAPDU_t
)–
	tz˛11073Tøns„rAPDU_t
 *
	tpCmd
 );

256 (*
z˛PICB_11073C⁄√˘Req_t
)–
	tz˛11073C⁄√˘Req_t
 *
	tpCmd
 );

260 (*
z˛PICB_11073Disc⁄√˘Req_t
)–
	tz˛11073Disc⁄√˘Req_t
 *
	tpCmd
 );

264 (*
z˛PICB_11073C⁄√˘SètusNŸi_t
)–
	tz˛11073C⁄√˘SètusNŸi_t
 *
	tpCmd
 );

270 
z˛PICB_M©chPrŸocﬁAddr_t
 
p‚PI_M©chPrŸocﬁAddr
;

271 
z˛PICB_M©chPrŸocﬁAddrR•_t
 
p‚PI_M©chPrŸocﬁAddrR•
;

272 
z˛PICB_Advîti£PrŸocﬁAddr_t
 
p‚PI_Advîti£PrŸocﬁAddr
;

273 
z˛PICB_BAC√tTøns„rNPDU_t
 
p‚PI_BAC√tTøns„rNPDU
;

274 
z˛PICB_11073Tøns„rAPDU_t
 
p‚PI_11073Tøns„rAPDU
;

275 
z˛PICB_11073C⁄√˘Req_t
 
p‚PI_11073C⁄√˘Req
;

276 
z˛PICB_11073Disc⁄√˘Req_t
 
p‚PI_11073Disc⁄√˘Req
;

277 
z˛PICB_11073C⁄√˘SètusNŸi_t
 
p‚PI_11073C⁄√˘SètusNŸi
;

278 } 
	tz˛PI_AµCÆlbacks_t
;

301 
	#z˛PI_Síd_BAC√tTøns„rNPDUCmd
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_PI_BACNET_PROTOCOL_TUNNEL
,\

302 
COMMAND_PI_BACNET_TUNNEL_TRANSFER_NPDU
, 
TRUE
,\

303 
ZCL_FRAME_CLIENT_SERVER_DIR
, (
e
), 0, (
f
), (
c
), (
d
Ë)

	)

321 
	#z˛PI_Síd_11073Disc⁄√˘Req
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL
,\

322 
COMMAND_PI_11073_TUNNEL_DISCONNECT_REQ
, 
TRUE
,\

323 
ZCL_FRAME_CLIENT_SERVER_DIR
, (
d
), 0, (
e
),\

324 
Z_EXTADDR_LEN
, (
c
Ë)

	)

344 
	#z˛PI_Síd_11073C⁄√˘SètusNŸi
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL
,\

345 
COMMAND_PI_11073_TUNNEL_CONNECT_STATUS_NOTI
, 
TRUE
,\

346 
ZCL_FRAME_SERVER_CLIENT_DIR
, (
d
), 0, (
e
), 1, &(
c
Ë)

	)

360 
ZSètus_t
 
z˛PI_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛PI_AµCÆlbacks_t
 *
ˇŒbacks
 );

365 
ZSètus_t
 
z˛PI_Síd_M©chPrŸocﬁAddrCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

366 
uöt8
 
Àn
, uöt8 *
¥ŸocﬁAddr
,

367 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

371 
ZSètus_t
 
z˛PI_Síd_M©chPrŸocﬁAddrR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

372 
uöt8
 *
õìAddr
, uöt8 
Àn
, uöt8 *
¥ŸocﬁAddr
,

373 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

377 
ZSètus_t
 
z˛PI_Síd_Advîti£PrŸocﬁAddrCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

378 
uöt8
 
Àn
, uöt8 *
¥ŸocﬁAddr
,

379 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

383 
ZSètus_t
 
z˛PI_Síd_11073Tøns„rAPDUCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

384 
uöt16
 
Àn
, 
uöt8
 *
≠du
, uöt8 
£qNum
 );

388 
ZSètus_t
 
z˛PI_Síd_11073C⁄√˘Req
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

389 
uöt8
 
c⁄√˘Cål
, 
uöt16
 
idÀTimeout
,

390 
uöt8
 *
m™agîAddr
, uöt8 
m™agîEP
,

391 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

397 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_se.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"z˛.h
"

47 
	~"z˛_gíîÆ.h
"

48 
	~"z˛_£.h
"

49 
	~"DebugTø˚.h
"

51 #i‡
deföed
 ( 
INTER_PAN
 )

52 
	~"°ub_≠s.h
"

56 
	~"z˛_key_e°ablish.h
"

63 
	#INTER_PAN_CLUSTER
–
id
 ) ( (idË=
ZCL_CLUSTER_ID_SE_PRICING
 || \

64 (
id
Ë=
ZCL_CLUSTER_ID_SE_MESSAGE
 )

	)

73 
	sz˛SECBRec


75 
z˛SECBRec
 *
	m√xt
;

76 
uöt8
 
	mídpoöt
;

77 
z˛SE_AµCÆlbacks_t
 *
	mCBs
;

78 } 
	tz˛SECBRec_t
;

91 
z˛SECBRec_t
 *
	gz˛SECBs
 = (z˛SECBRec_à*)
NULL
;

92 
uöt8
 
	gz˛SEPlugöRegi°ed
 = 
FALSE
;

98 
ZSètus_t
 
z˛SE_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

99 
ZSètus_t
 
z˛SE_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

101 #ifde‡
ZCL_SIMPLE_METERING


102 
ZSètus_t
 
z˛SE_Pro˚ssInSim∂eMëîögCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

103 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëProfûeCmd
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

104 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëProfûeR•
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

105 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqMúr‹Cmd
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

106 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqMúr‹R•
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

107 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹RemCmd
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

108 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹RemR•
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

109 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqFa°PﬁlModeCmd
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

110 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqFa°PﬁlModeR•
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

111 #ifde‡
SE_UK_EXT


112 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëS«pshŸCmd
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

113 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëS«pshŸR•
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

114 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_TakeS«pshŸCmd
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

115 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹Rï‹tAârR•
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

119 #ifde‡
ZCL_PRICING


120 
ZSètus_t
 
z˛SE_Pro˚ssInPricögCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

121 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_GëCuºítPri˚
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

122 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_GëScheduÀdPri˚
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

123 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_PublishPri˚
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

124 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_Pri˚AcknowÀdgemít
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

125 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_GëBlockPîiod
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

126 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_PublishBlockPîiod
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

127 #ifde‡
SE_UK_EXT


128 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_PublishT¨iffInf‹m©i⁄
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

129 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_PublishPri˚M©rix
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

130 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_PublishBlockThªshﬁd
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

131 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_PublishC⁄vîsi⁄Fa˘‹
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

132 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_PublishCÆ‹ificVÆue
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

133 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_PublishCO2VÆue
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

134 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_PublishCPPEvít
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

135 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_PublishBûlögPîiod
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

136 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_PublishC⁄sﬁid©edBûl
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

137 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_PublishCªdôPaymítInfo
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

138 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_GëT¨iffInf‹m©i⁄
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

139 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_GëPri˚M©rix
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

140 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_GëBlockThªshﬁds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

141 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_GëC⁄vîsi⁄Fa˘‹
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

142 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_GëCÆ‹ificVÆue
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

143 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_GëCO2VÆue
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

144 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_GëBûlögPîiod
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

145 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_GëC⁄sﬁid©edBûl
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

146 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_CPPEvítRe•⁄£
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

150 #ifde‡
ZCL_MESSAGE


151 
ZSètus_t
 
z˛SE_Pro˚ssInMesßgeCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

152 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Mesßge_Di•œyMesßge
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

153 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Mesßge_C™˚lMesßge
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

154 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Mesßge_GëLa°Mesßge
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

155 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Mesßge_MesßgeC⁄fúm©i⁄
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

158 #ifde‡
ZCL_LOAD_CONTROL


159 
ZSètus_t
 
z˛SE_Pro˚ssInLﬂdC⁄åﬁCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

160 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

161 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

162 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

163 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_Rï‹tEvítSètus
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

164 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_GëScheduÀdEvíts
–
z˛Incomög_t
 *
pInMsg
,

165 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

168 #ifde‡
ZCL_TUNNELING


169 
ZSètus_t
 
z˛SE_Pro˚ssInTu¬ñögCmds
(
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
);

170 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tu¬ñög_Reque°Tu¬ñ
(
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
);

171 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tu¬ñög_ReqTu¬ñR•
(
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
);

172 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tu¬ñög_Clo£Tu¬ñ
(
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
);

173 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tu¬ñög_Tøns„rD©a
(
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
);

174 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tu¬ñög_Tøns„rD©aEº‹
(
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
);

175 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tu¬ñög_AckTøns„rD©a
(
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
);

176 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tu¬ñög_RódyD©a
(
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
);

177 #ifde‡
SE_UK_EXT


178 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tu¬ñög_GëSuµTu¬ñPrŸ
(
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
);

179 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tu¬ñög_SuµTu¬ñPrŸR•
(
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
);

180 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tu¬ñög_Tu¬ñClosuªNŸifiˇti⁄
(
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
);

184 #ifde‡
ZCL_PREPAYMENT


185 
ZSètus_t
 
z˛SE_Pro˚ssInPª∑ymítCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

186 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_SñAvaûEmîgícyCªdô
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
);

187 #i‚de‡
SE_UK_EXT


188 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_Ch™geSuµly
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

189 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_SuµlySètusRe•⁄£
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

191 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_Ch™geDebt
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

192 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_EmîgícyCªdôSëup
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

193 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_C⁄sumîT›up
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

194 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_CªdôAdju°mít
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

195 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_Ch™gePaymítMode
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

196 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_GëPª∑yS«pshŸ
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

197 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_GëT›upLog
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

198 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_SëLowCªdôW¨nögLevñ
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

199 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_GëDebtRïaymítLog
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

200 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_GëPª∑yS«pshŸRe•⁄£
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

201 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_Ch™gePaymítModeRe•⁄£
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

202 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_C⁄sumîT›upRe•⁄£
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

203 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_GëComm™ds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

204 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_PublishT›upLog
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

205 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pª∑ymít_PublishDebtLog
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

209 #ifde‡
ZCL_TOU


210 #ifde‡
SE_UK_EXT


211 
ZSètus_t
 
z˛SE_Pro˚ssInTouCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

212 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tou_PublishCÆíd¨
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

213 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tou_PublishDayProfûe
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

214 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tou_PublishWìkProfûe
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

215 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tou_PublishSós⁄s
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

216 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tou_PublishS≥cülDays
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

217 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tou_GëCÆíd¨
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

218 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tou_GëDayProfûes
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

219 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tou_GëWìkProfûes
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

220 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tou_GëSós⁄s
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

221 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Tou_GëS≥cülDays
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

225 #ifde‡
ZCL_DEVICE_MGMT


226 #ifde‡
SE_UK_EXT


227 
ZSètus_t
 
z˛SE_Pro˚ssInDevi˚MgmtCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

228 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Devi˚Mgmt_GëCh™geTí™cy
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

229 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Devi˚Mgmt_GëCh™geSuµlõr
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

230 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Devi˚Mgmt_GëCh™geSuµly
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

231 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Devi˚Mgmt_SuµlySètusRe•⁄£
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

232 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Devi˚Mgmt_GëPassw‹d
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

233 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Devi˚Mgmt_PublishCh™geTí™cy
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

234 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Devi˚Mgmt_PublishCh™geSuµlõr
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

235 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Devi˚Mgmt_Ch™geSuµly
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

236 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Devi˚Mgmt_Ch™gePassw‹d
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

237 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Devi˚Mgmt_LoˇlCh™geSuµly
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

241 #ifde‡
SE_UK_EXT


242 
uöt8
 
z˛SE_P¨£_UTF8Såög
–uöt8 *
pBuf
, 
UTF8Såög_t
 *
pSåög
, uöt8 
maxLí
 );

245 #ifde‡
ZCL_SIMPLE_METERING


261 
ZSètus_t
 
	$z˛SE_Sim∂eMëîög_Síd_GëProfûeCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

262 
uöt8
 
ch™√l
, 
uöt32
 
ídTime
, uöt8 
numOfPîiods
,

263 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

265 
uöt8
 
buf
[6];

267 
buf
[0] = 
ch™√l
;

268 
	`oßl_buf„r_uöt32
–&
buf
[1], 
ídTime
 );

269 
buf
[5] = 
numOfPîiods
;

271  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

272 
COMMAND_SE_GET_PROFILE_CMD
, 
TRUE
,

273 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 6, 
buf
 );

274 
	}
}

296 
ZSètus_t
 
	$z˛SE_Sim∂eMëîög_Síd_GëProfûeR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

297 
uöt32
 
ídTime
, 
uöt8
 
r•Sètus
, uöt8 
¥ofûeI¡îvÆPîiod
,

298 
uöt8
 
numOfPîiodDñivîed
, 
uöt24
 *
öãrvÆs
,

299 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

301 
uöt8
 *
buf
;

302 
uöt8
 *
pBuf
;

303 
uöt8
 
i
;

304 
uöt8
 
Àn
;

305 
ZSètus_t
 
°©us
;

308 
Àn
 = 4 + 1 + 1 + 1 + (3 * 
numOfPîiodDñivîed
);

309 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

310 i‡–
buf
 =
NULL
 )

312  ( 
ZMemEº‹
 );

315 
	`oßl_buf„r_uöt32
–
buf
, 
ídTime
 );

316 
buf
[4] = 
r•Sètus
;

317 
buf
[5] = 
¥ofûeI¡îvÆPîiod
;

320 
buf
[6] = 
numOfPîiodDñivîed
;

321 
pBuf
 = &
buf
[7];

322  
i
 = 0; i < 
numOfPîiodDñivîed
; i++ )

324 
pBuf
 = 
	`oßl_buf„r_uöt24
–pBuf, *
öãrvÆs
++ );

327 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

328 
COMMAND_SE_GET_PROFILE_RSP
, 
TRUE
,

329 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

331 
	`oßl_mem_‰ì
–
buf
 );

333  
°©us
;

334 
	}
}

346 
ZSètus_t
 
	$z˛SE_Sim∂eMëîög_Síd_ReqMúr‹R•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

347 
uöt16
 
ídpoötId
,

348 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

350 
ZSètus_t
 
°©us
;

351 
uöt8
 
buf
[2];

353 
buf
[0] = (
uöt8
Ë
ídpoötId
 ;

354 
buf
[1] = (
uöt8
)–
ídpoötId
 >> 8 );

356 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

357 
COMMAND_SE_REQ_MIRROR_RSP
, 
TRUE
,

358 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

360  
°©us
 ;

361 
	}
}

373 
ZSètus_t
 
	$z˛SE_Sim∂eMëîög_Síd_RemMúr‹R•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

374 
uöt16
 
ídpoötId
,

375 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

377 
ZSètus_t
 
°©us
;

378 
uöt8
 
buf
[2];

380 
buf
[0] = (
uöt8
Ë
ídpoötId
 ;

381 
buf
[1] = (
uöt8
)–
ídpoötId
 >> 8 );

383 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

384 
COMMAND_SE_MIRROR_REM_RSP
, 
TRUE
,

385 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

387  
°©us
 ;

388 
	}
}

404 
ZSètus_t
 
	$z˛SE_Sim∂eMëîög_Síd_ReqFa°PﬁlModeCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

405 
z˛CCReqFa°PﬁlModeCmd_t
 *
pCmd
,

406 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

408 
ZSètus_t
 
°©us
;

409 
uöt8
 
buf
[
PACKET_LEN_SE_METERING_FAST_POLLING_REQ
];

411 
buf
[0] = 
pCmd
->
Á°PﬁlUpd©ePîiod
;

412 
buf
[1] = 
pCmd
->
duøti⁄
;

414 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

415 
COMMAND_SE_REQ_FAST_POLL_MODE_CMD
, 
TRUE
,

416 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

417 
PACKET_LEN_SE_METERING_FAST_POLLING_REQ
, 
buf
 );

419  
°©us
 ;

420 
	}
}

435 
ZSètus_t
 
	$z˛SE_Sim∂eMëîög_Síd_ReqFa°PﬁlModeR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

436 
z˛CCReqFa°PﬁlModeR•_t
 *
pCmd
,

437 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

439 
ZSètus_t
 
°©us
;

440 
uöt8
 
buf
[
PACKET_LEN_SE_METERING_FAST_POLLING_RSP
];

442 
buf
[0] = 
pCmd
->
≠∂õdUpd©ePîiod
;

443 
	`oßl_buf„r_uöt32
–&
buf
[1], 
pCmd
->
Á°PﬁlModeEndTime
 );

445 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

446 
COMMAND_SE_REQ_FAST_POLL_MODE_RSP
, 
TRUE
,

447 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

448 
PACKET_LEN_SE_METERING_FAST_POLLING_RSP
, 
buf
 );

450  
°©us
 ;

451 
	}
}

453 #ifde‡
SE_UK_EXT


467 
ZSètus_t
 
	$z˛SE_Sim∂eMëîög_Síd_GëS«pshŸCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

468 
z˛CCReqGëS«pshŸCmd_t
 *
pCmd
,

469 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

471 
ZSètus_t
 
°©us
;

472 
uöt8
 
buf
[
PACKET_LEN_SE_GET_SNAPSHOT_CMD
];

474 
	`oßl_buf„r_uöt32
–&
buf
[0], 
pCmd
->
SèπTime
 );

475 
buf
[4] = 
pCmd
->
NumbîOfS«pshŸs
;

476 
buf
[5] = 
	`LO_UINT16
–
pCmd
->
S«pshŸCau£
 );

477 
buf
[6] = 
	`HI_UINT16
–
pCmd
->
S«pshŸCau£
 );

479 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

480 
COMMAND_SE_GET_SNAPSHOT_CMD
, 
TRUE
,

481 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

482 
PACKET_LEN_SE_GET_SNAPSHOT_CMD
, 
buf
 );

484  
°©us
;

485 
	}
}

500 
ZSètus_t
 
	$z˛SE_Sim∂eMëîög_Síd_GëS«pshŸR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

501 
z˛CCReqGëS«pshŸR•_t
 *
pCmd
,

502 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

504 
uöt8
 *
buf
;

505 
uöt8
 *
pBuf
;

506 
uöt16
 
bufLí
;

507 
ZSètus_t
 
°©us
;

508 
uöt16
 
∑ylﬂdLí
;

510 i‡–
pCmd
->
pS«pshŸPaylﬂd
 )

512  
pCmd
->
S«pshŸPaylﬂdTy≥
 )

514 
SE_SNAPSHOT_TYPE_CSD_AND_RCV_REGISTER
:

515 
∑ylﬂdLí
 = 
SE_SNAPSHOT_CSD_AND_RCV_REGISTER_PAYLOAD_LEN
;

518 
SE_SNAPSHOT_TYPE_TOU_INFO_RECEIVED
:

519 
SE_SNAPSHOT_TYPE_TOU_INFO_DELIVERED
:

521 
∑ylﬂdLí
 = 1 + (
pCmd
->
pS«pshŸPaylﬂd
[0] * 6);

524 
SE_SNAPSHOT_TYPE_BLOCK_INFO_RECEIVED
:

525 
SE_SNAPSHOT_TYPE_BLOCK_INFO_DELIVERED
:

527 
∑ylﬂdLí
 = 1 + (
pCmd
->
pS«pshŸPaylﬂd
[0] * 4);

531  
ZInvÆidP¨amëî
;

534 
bufLí
 = 
PACKET_LEN_SE_GET_SNAPSHOT_RSP
 + 
∑ylﬂdLí
;

536 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

537 i‡–
buf
 =
NULL
 )

539  ( 
ZMemEº‹
 );

542 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
IssuîEvítID
 );

543 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
S«pshŸTime
 );

544 *
pBuf
++ = 
pCmd
->
Comm™dIndex
;

545 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
S«pshŸCau£
 );

546 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
S«pshŸCau£
 );

547 *
pBuf
++ = 
pCmd
->
S«pshŸPaylﬂdTy≥
;

549 
	`oßl_mem˝y
(
pBuf
, 
pCmd
->
pS«pshŸPaylﬂd
, 
∑ylﬂdLí
);

551 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

552 
COMMAND_SE_GET_SNAPSHOT_RSP
, 
TRUE
,

553 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

554 
bufLí
, 
buf
 );

556 
	`oßl_mem_‰ì
–
buf
 );

558  
°©us
;

562  
ZInvÆidP¨amëî
;

564 
	}
}

578 
ZSètus_t
 
	$z˛SE_Sim∂eMëîög_Síd_TakeS«pshŸ
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

579 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

581  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

582 
COMMAND_SE_TAKE_SNAPSHOT_CMD
, 
TRUE
,

583 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

584 0, 
NULL
 );

585 
	}
}

600 
ZSètus_t
 
	$z˛SE_Sim∂eMëîög_Síd_Múr‹Rï‹tAârR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

601 
z˛CCReqMúr‹Rï‹tAârR•_t
 *
pCmd
,

602 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

604 
ZSètus_t
 
°©us
;

605 
uöt8
 
buf
[
PACKET_LEN_SE_MIRROR_REPORT_ATTR_RSP
];

607 
buf
[0] = 
pCmd
->
NŸifiˇti⁄Fœgs
;

608 
buf
[1] = 
	`LO_UINT16
–
pCmd
->
Pri˚NŸifiˇti⁄Fœgs
 );

609 
buf
[2] = 
	`HI_UINT16
–
pCmd
->
Pri˚NŸifiˇti⁄Fœgs
 );

610 
buf
[3] = 
pCmd
->
CÆíd¨NŸifiˇti⁄Fœgs
;

611 
buf
[4] = 
	`LO_UINT16
–
pCmd
->
PªPayNŸifiˇti⁄Fœgs
 );

612 
buf
[5] = 
	`HI_UINT16
–
pCmd
->
PªPayNŸifiˇti⁄Fœgs
 );

613 
buf
[6] = 
pCmd
->
Devi˚MgmtNŸifiˇti⁄Fœgs
;

615 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

616 
COMMAND_SE_MIRROR_REPORT_ATTR_RSP
, 
TRUE
,

617 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

618 
PACKET_LEN_SE_MIRROR_REPORT_ATTR_RSP
, 
buf
 );

620  
°©us
;

621 
	}
}

625 #ifde‡
ZCL_PRICING


639 
ZSètus_t
 
	$z˛SE_Pricög_Síd_GëScheduÀdPri˚
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

640 
z˛CCGëScheduÀdPri˚_t
 *
pCmd
,

641 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

643 
uöt8
 
buf
[5];

644 
ZSètus_t
 
°©us
;

646 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
°¨tTime
 );

647 
buf
[4] = 
pCmd
->
numEvíts
;

649 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

650 
COMMAND_SE_GET_SCHEDULED_PRICE
, 
TRUE
,

651 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

652 
£qNum
, 5, 
buf
 );

654  
°©us
;

655 
	}
}

670 
ZSètus_t
 
	$z˛SE_Pricög_Síd_PublishPri˚
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

671 
z˛CCPublishPri˚_t
 *
pCmd
,

672 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

674 
uöt8
 *
buf
;

675 
uöt8
 *
pBuf
;

676 
uöt16
 
bufLí
;

677 
ZSètus_t
 
°©us
;

679 
bufLí
 = 
PACKET_LEN_SE_PUBLISH_PRICE
 + 
pCmd
->
øãLabñ
.
°rLí
;

680 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

681 i‡–
buf
 =
NULL
 )

683  ( 
ZMemEº‹
 );

686 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
¥ovidîId
 );

687 *
pBuf
++ = 
pCmd
->
øãLabñ
.
°rLí
;

688 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
pCmd
->
øãLabñ
.
pSå
,ÖCmd->øãLabñ.
°rLí
 );

689 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
issuîEvítId
 );

690 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
cuºítTime
 );

691 *
pBuf
++ = 
pCmd
->
unôOfMósuª
;

692 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
cuºícy
 );

693 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
cuºícy
 );

694 *
pBuf
++ = 
pCmd
->
¥i˚TøûögDigô
;

695 *
pBuf
++ = 
pCmd
->
numbîOfPri˚Tõrs
;

696 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
°¨tTime
 );

697 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
duøti⁄InMöuãs
 );

698 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
duøti⁄InMöuãs
 );

699 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
¥i˚
 );

700 *
pBuf
++ = 
pCmd
->
¥i˚R©io
;

701 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
gíî©i⁄Pri˚
 );

702 *
pBuf
++ = 
pCmd
->
gíî©i⁄Pri˚R©io
;

703 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
Æã∫©eCo°Dñivîed
 );

704 *
pBuf
++ = 
pCmd
->
Æã∫©eCo°Unô
;

705 *
pBuf
++ = 
pCmd
->
Æã∫©eCo°TøûögDigô
;

706 *
pBuf
++ = 
pCmd
->
numbîOfBlockThªshﬁds
;

707 *
pBuf
 = 
pCmd
->
¥i˚C⁄åﬁ
;

709 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

710 
COMMAND_SE_PUBLISH_PRICE
, 
TRUE
,

711 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

712 
£qNum
, 
bufLí
, 
buf
 );

714 
	`oßl_mem_‰ì
–
buf
 );

716  
°©us
;

717 
	}
}

732 
ZSètus_t
 
	$z˛SE_Pricög_Síd_Pri˚AcknowÀdgemít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

733 
z˛CCPri˚AcknowÀdgemít_t
 *
pCmd
,

734 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

736 
uöt8
 *
buf
;

737 
uöt8
 *
pBuf
;

738 
ZSètus_t
 
°©us
;

740 
buf
 = 
	`oßl_mem_Æloc
–
PACKET_LEN_SE_PRICE_ACKNOWLEDGEMENT
 );

741 i‡–
buf
 =
NULL
 )

743  ( 
ZMemEº‹
 );

746 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
¥ovidîId
 );

747 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
issuîEvítId
 );

748 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
¥i˚AckTime
 );

749 *
pBuf
 = 
pCmd
->
c⁄åﬁ
;

751 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

752 
COMMAND_SE_PRICE_ACKNOWLEDGEMENT
, 
TRUE
,

753 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

754 
£qNum
, 
PACKET_LEN_SE_PRICE_ACKNOWLEDGEMENT
, 
buf
 );

756 
	`oßl_mem_‰ì
–
buf
 );

758  
°©us
;

759 
	}
}

774 
ZSètus_t
 
	$z˛SE_Pricög_Síd_GëBlockPîiod
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

775 
z˛CCGëBlockPîiod_t
 *
pCmd
,

776 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

778 
uöt8
 
buf
[5];

779 
ZSètus_t
 
°©us
;

781 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
°¨tTime
 );

782 
buf
[4] = 
pCmd
->
numEvíts
;

784 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

785 
COMMAND_SE_GET_BLOCK_PERIOD
, 
TRUE
,

786 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

787 
£qNum
, 5, 
buf
 );

789  
°©us
;

790 
	}
}

805 
ZSètus_t
 
	$z˛SE_Pricög_Síd_PublishBlockPîiod
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

806 
z˛CCPublishBlockPîiod_t
 *
pCmd
,

807 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

809 
uöt8
 *
buf
;

810 
uöt8
 *
pBuf
;

811 
uöt16
 
bufLí
;

812 
ZSètus_t
 
°©us
;

814 
bufLí
 = 
PACKET_LEN_SE_PUBLISH_BLOCK_PERIOD
;

815 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

816 i‡–
buf
 =
NULL
 )

818  ( 
ZMemEº‹
 );

821 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
¥ovidîId
 );

822 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
issuîEvítId
 );

823 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
blockPîiodSèπTime
 );

824 
pBuf
 = 
	`oßl_buf„r_uöt24
–pBuf, 
pCmd
->
blockPîiodDurInMös
 );

825 *
pBuf
++ = 
pCmd
->
numPri˚TõrsAndBlock
;

826 #ifde‡
SE_UK_EXT


827 *
pBuf
++ = 
pCmd
->
èriffTy≥
;

829 *
pBuf
 = 
pCmd
->
blockPîiodC⁄åﬁ
;

831 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

832 
COMMAND_SE_PUBLISH_BLOCK_PERIOD
, 
TRUE
,

833 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

834 
£qNum
, 
bufLí
, 
buf
 );

836 
	`oßl_mem_‰ì
–
buf
 );

838  
°©us
;

839 
	}
}

841 #ifde‡
SE_UK_EXT


855 
ZSètus_t
 
	$z˛SE_Pricög_Síd_PublishT¨iffInf‹m©i⁄
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

856 
z˛CCPublishT¨iffInf‹m©i⁄_t
 *
pCmd
,

857 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

859 
uöt8
 *
buf
;

860 
uöt8
 *
pBuf
;

861 
uöt16
 
bufLí
;

862 
ZSètus_t
 
°©us
;

864 
bufLí
 = 
PACKET_LEN_SE_MIN_PUBLISH_TARIFF_INFORMATION
 + 
pCmd
->
èrifLabñ
.
°rLí
;

865 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

866 i‡–
buf
 =
NULL
 )

868  ( 
ZMemEº‹
 );

871 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
suµlõrId
 );

872 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
issuîT¨iffId
 );

873 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
°¨tTime
 );

874 *
pBuf
++ = 
pCmd
->
èriffTy≥
;

875 *
pBuf
++ = 
pCmd
->
èrifLabñ
.
°rLí
;

876 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
pCmd
->
èrifLabñ
.
pSå
,ÖCmd->èrifLabñ.
°rLí
 );

877 *
pBuf
++ = 
pCmd
->
numPri˚TõrsInU£
;

878 *
pBuf
++ = 
pCmd
->
numBlockThªshﬁdsInU£
;

879 *
pBuf
++ = 
pCmd
->
unôOfMósuª
;

880 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
cuºícy
 );

881 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
cuºícy
 );

882 *
pBuf
++ = 
pCmd
->
¥i˚TøûögDigô
;

883 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
°™dögCh¨ge
 );

884 *
pBuf
++ = 
pCmd
->
tõrBlockMode
;

885 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
blockThªshﬁdMask
 );

886 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
blockThªshﬁdMask
 );

887 
pBuf
 = 
	`oßl_buf„r_uöt24
–pBuf, 
pCmd
->
BlockThªshﬁdMu…ùlõr
 );

888 
pBuf
 = 
	`oßl_buf„r_uöt24
–pBuf, 
pCmd
->
BlockThªshﬁdDivis‹
 );

890 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

891 
COMMAND_SE_PUBLISH_TARIFF_INFO
, 
TRUE
,

892 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

893 
£qNum
, 
bufLí
, 
buf
 );

894 
	`oßl_mem_‰ì
–
buf
 );

896  
°©us
;

897 
	}
}

912 
ZSètus_t
 
	$z˛SE_Pricög_Síd_PublishPri˚M©rix
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

913 
z˛CCPublishPri˚M©rix_t
 *
pCmd
,

914 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

916 
uöt8
 *
buf
;

917 
uöt8
 *
pBuf
;

918 
uöt16
 
bufLí
;

919 
ZSètus_t
 
°©us
;

920 
uöt8
 
i
;

922 
bufLí
 = 
PACKET_LEN_SE_MIN_PUBLISH_PRICE_MATRIX
 + (
pCmd
->
numEÀmíts
 * (
uöt32
));

923 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

924 i‡–
buf
 =
NULL
 )

926  ( 
ZMemEº‹
 );

929 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîT¨iffId
 );

930 *
pBuf
++ = 
pCmd
->
comm™dIndex
;

932  
i
 = 0; i < 
pCmd
->
numEÀmíts
; i++ )

934 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
pTõrBlockPri˚
[
i
] );

937 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

938 
COMMAND_SE_PUBLISH_PRICE_MATRIX
, 
TRUE
,

939 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

940 
£qNum
, 
bufLí
, 
buf
 );

941 
	`oßl_mem_‰ì
–
buf
 );

943  
°©us
;

944 
	}
}

959 
ZSètus_t
 
	$z˛SE_Pricög_Síd_PublishBlockThªshﬁds
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

960 
z˛CCPublishBlockThªshﬁds_t
 *
pCmd
,

961 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

963 
uöt8
 *
buf
;

964 
uöt8
 *
pBuf
;

965 
uöt16
 
bufLí
;

966 
ZSètus_t
 
°©us
;

967 
uöt8
 
i
;

969 
bufLí
 = 
PACKET_LEN_SE_MIN_PUBLISH_BLOCK_THRESHOLD
 + (
pCmd
->
numEÀmíts
 * 6);

970 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

971 i‡–
buf
 =
NULL
 )

973  ( 
ZMemEº‹
 );

976 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîT¨iffId
 );

977 *
pBuf
++ = 
pCmd
->
comm™dIndex
;

979  
i
 = 0; i < 
pCmd
->
numEÀmíts
; i++ )

981 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
pCmd
->
pTõrBlockThªshﬁd
[
i
], 6 );

984 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

985 
COMMAND_SE_PUBLISH_BLOCK_THRESHOLD
, 
TRUE
,

986 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

987 
£qNum
, 
bufLí
, 
buf
 );

988 
	`oßl_mem_‰ì
–
buf
 );

990  
°©us
;

991 
	}
}

1006 
ZSètus_t
 
	$z˛SE_Pricög_Síd_PublishC⁄vîsi⁄Fa˘‹
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1007 
z˛CCPublishC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

1008 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1010 
uöt8
 
buf
[
PACKET_LEN_SE_PUBLISH_CONVERSION_FACTOR
];

1011 
uöt8
 *
pBuf
;

1013 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîEvítId
 );

1014 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
°¨tTime
 );

1015 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
c⁄vîsi⁄Fa˘‹
 );

1016 *
pBuf
 = 
pCmd
->
åaûögDigô
;

1018  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1019 
COMMAND_SE_PUBLISH_CONVERSION_FACTOR
, 
TRUE
,

1020 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

1021 
£qNum
, 
PACKET_LEN_SE_PUBLISH_CONVERSION_FACTOR
, 
buf
 );

1022 
	}
}

1037 
ZSètus_t
 
	$z˛SE_Pricög_Síd_PublishCÆ‹ificVÆue
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1038 
z˛CCPublishCÆ‹ificVÆue_t
 *
pCmd
,

1039 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1041 
uöt8
 
buf
[
PACKET_LEN_SE_PUBLISH_CALORIFIC_VALUE
];

1042 
uöt8
 *
pBuf
;

1044 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîEvítId
 );

1045 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
°¨tTime
 );

1046 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
ˇl‹ificVÆue
 );

1047 *
pBuf
++ = 
pCmd
->
ˇl‹ificVÆueUnô
;

1048 *
pBuf
 = 
pCmd
->
åaûögDigô
;

1050  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1051 
COMMAND_SE_PUBLISH_CALORIFIC_VALUE
, 
TRUE
,

1052 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

1053 
£qNum
, 
PACKET_LEN_SE_PUBLISH_CALORIFIC_VALUE
, 
buf
 );

1054 
	}
}

1069 
ZSètus_t
 
	$z˛SE_Pricög_Síd_PublishCO2VÆue
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1070 
z˛CCPublishCO2VÆue_t
 *
pCmd
,

1071 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1073 
uöt8
 
buf
[
PACKET_LEN_SE_PUBLISH_CO2_VALUE
];

1074 
uöt8
 *
pBuf
;

1076 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîEvítId
 );

1077 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
°¨tTime
 );

1078 *
pBuf
++ = 
pCmd
->
èriffTy≥
;

1079 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
CO2VÆue
 );

1080 *
pBuf
++ = 
pCmd
->
CO2VÆueUnô
;

1081 *
pBuf
 = 
pCmd
->
åaûögDigô
;

1083  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1084 
COMMAND_SE_PUBLISH_CO2_VALUE
, 
TRUE
,

1085 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

1086 
£qNum
, 
PACKET_LEN_SE_PUBLISH_CO2_VALUE
, 
buf
 );

1087 
	}
}

1102 
ZSètus_t
 
	$z˛SE_Pricög_Síd_PublishCPPEvít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1103 
z˛CCPublishCPPEvít_t
 *
pCmd
,

1104 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1106 
uöt8
 
buf
[
PACKET_LEN_SE_PUBLISH_CPP_EVENT
];

1107 
uöt8
 *
pBuf
;

1109 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîEvítId
 );

1110 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
°¨tTime
 );

1111 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
duøti⁄InMöuãs
 );

1112 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
duøti⁄InMöuãs
 );

1113 *
pBuf
++ = 
pCmd
->
èriffTy≥
;

1114 *
pBuf
++ = 
pCmd
->
CPPPri˚Tõr
;

1115 *
pBuf
 = 
pCmd
->
CPPAuth
;

1117  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1118 
COMMAND_SE_PUBLISH_CPP_EVENT
, 
TRUE
,

1119 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

1120 
£qNum
, 
PACKET_LEN_SE_PUBLISH_CPP_EVENT
, 
buf
 );

1121 
	}
}

1136 
ZSètus_t
 
	$z˛SE_Pricög_Síd_PublishBûlögPîiod
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1137 
z˛CCPublishBûlögPîiod_t
 *
pCmd
,

1138 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1140 
uöt8
 
buf
[
PACKET_LEN_SE_PUBLISH_BILLING_PERIOD
];

1141 
uöt8
 *
pBuf
;

1143 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîEvítId
 );

1144 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
°¨tTime
 );

1145 
pBuf
 = 
	`oßl_buf„r_uöt24
–pBuf, 
pCmd
->
duøti⁄
 );

1146 *
pBuf
 = 
pCmd
->
èriffTy≥
;

1148  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1149 
COMMAND_SE_PUBLISH_BILLING_PERIOD
, 
TRUE
,

1150 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

1151 
£qNum
, 
PACKET_LEN_SE_PUBLISH_BILLING_PERIOD
, 
buf
 );

1152 
	}
}

1167 
ZSètus_t
 
	$z˛SE_Pricög_Síd_PublishC⁄sﬁid©edBûl
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1168 
z˛CCPublishC⁄sﬁid©edBûl_t
 *
pCmd
,

1169 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1171 
uöt8
 
buf
[
PACKET_LEN_SE_PUBLISH_CONSOLIDATED_BILL
];

1172 
uöt8
 *
pBuf
;

1174 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîEvítId
 );

1175 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
°¨tTime
 );

1176 
pBuf
 = 
	`oßl_buf„r_uöt24
–pBuf, 
pCmd
->
duøti⁄
 );

1177 *
pBuf
++ = 
pCmd
->
èriffTy≥
;

1178 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
c⁄sﬁid©edBûl
 );

1179 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
cuºícy
 );

1180 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
cuºícy
 );

1181 *
pBuf
 = 
pCmd
->
åaûögDigô
;

1183  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1184 
COMMAND_SE_PUBLISH_CONSOLIDATED_BILL
, 
TRUE
,

1185 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

1186 
£qNum
, 
PACKET_LEN_SE_PUBLISH_CONSOLIDATED_BILL
, 
buf
 );

1187 
	}
}

1202 
ZSètus_t
 
	$z˛SE_Pricög_Síd_PublishCªdôPaymítInfo
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1203 
z˛CCPublishCªdôPaymítInfo_t
 *
pCmd
,

1204 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1206 
uöt8
 *
buf
;

1207 
uöt8
 *
pBuf
;

1208 
uöt16
 
bufLí
;

1209 
ZSètus_t
 
°©us
;

1211 
bufLí
 = 
PACKET_LEN_SE_MIN_PUBLISH_CREDIT_PAYMENT_INFO
 + 
pCmd
->
¸edôPaymítRef
.
°rLí
;

1212 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

1213 i‡–
buf
 =
NULL
 )

1215  ( 
ZMemEº‹
 );

1218 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîEvítId
 );

1219 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
∑ymítDueD©e
 );

1220 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
¸edôPaymítOvîdueAmt
 );

1221 *
pBuf
++ = 
pCmd
->
¸edôPaymítSètus
;

1222 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
¸edôPaymít
 );

1223 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
¸edôPaymítD©e
 );

1224 *
pBuf
++ = 
pCmd
->
¸edôPaymítRef
.
°rLí
;

1225 
	`oßl_mem˝y
–
pBuf
, 
pCmd
->
¸edôPaymítRef
.
pSå
,ÖCmd->¸edôPaymítRef.
°rLí
 );

1227 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1228 
COMMAND_SE_PUBLISH_CREDIT_PAYMENT_INFO
, 
TRUE
,

1229 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

1230 
£qNum
, 
bufLí
, 
buf
 );

1231 
	`oßl_mem_‰ì
–
buf
 );

1233  
°©us
;

1234 
	}
}

1249 
ZSètus_t
 
	$z˛SE_Pricög_Síd_GëT¨iffInf‹m©i⁄
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1250 
z˛CCGëT¨iffInf‹m©i⁄_t
 *
pCmd
,

1251 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1253 
uöt8
 
buf
[
PACKET_LEN_SE_GET_TARIFF_INFO
];

1254 
uöt8
 *
pBuf
;

1256 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
°¨tTime
 );

1257 *
pBuf
++ = 
pCmd
->
numEvíts
;

1258 *
pBuf
 = 
pCmd
->
èriffTy≥
;

1260  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1261 
COMMAND_SE_GET_TARIFF_INFO
, 
TRUE
,

1262 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

1263 
£qNum
, 
PACKET_LEN_SE_GET_TARIFF_INFO
, 
buf
 );

1264 
	}
}

1279 
ZSètus_t
 
	$z˛SE_Pricög_Síd_GëPri˚M©rix
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1280 
uöt32
 
issuîId
,

1281 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1283 
uöt8
 
buf
[
PACKET_LEN_SE_GET_PRICE_MATRIX
];

1285 
	`oßl_buf„r_uöt32
–
buf
, 
issuîId
 );

1287  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1288 
COMMAND_SE_GET_PRICE_MATRIX
, 
TRUE
,

1289 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

1290 
£qNum
, 
PACKET_LEN_SE_GET_PRICE_MATRIX
, 
buf
 );

1291 
	}
}

1306 
ZSètus_t
 
	$z˛SE_Pricög_Síd_GëBlockThªshﬁds
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1307 
uöt32
 
issuîId
,

1308 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1310 
uöt8
 
buf
[
PACKET_LEN_SE_GET_BLOCK_THRESHOLD
];

1312 
	`oßl_buf„r_uöt32
–
buf
, 
issuîId
 );

1314  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1315 
COMMAND_SE_GET_BLOCK_THRESHOLD
, 
TRUE
,

1316 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

1317 
£qNum
, 
PACKET_LEN_SE_GET_BLOCK_THRESHOLD
, 
buf
 );

1318 
	}
}

1333 
ZSètus_t
 
	$z˛SE_Pricög_Síd_GëC⁄vîsi⁄Fa˘‹
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1334 
z˛CCGëC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

1335 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1337 
uöt8
 
buf
[
PACKET_LEN_SE_GET_CONVERSION_FACTOR
];

1338 
uöt8
 *
pBuf
;

1340 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
°¨tTime
 );

1341 *
pBuf
 = 
pCmd
->
numEvíts
;

1343  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1344 
COMMAND_SE_GET_CONVERSION_FACTOR
, 
TRUE
,

1345 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

1346 
£qNum
, 
PACKET_LEN_SE_GET_CONVERSION_FACTOR
, 
buf
 );

1347 
	}
}

1362 
ZSètus_t
 
	$z˛SE_Pricög_Síd_GëCÆ‹ificVÆue
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1363 
z˛CCGëCÆ‹ificVÆue_t
 *
pCmd
,

1364 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1366 
uöt8
 
buf
[
PACKET_LEN_SE_GET_CALORIFIC_VALUE
];

1367 
uöt8
 *
pBuf
;

1369 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
°¨tTime
 );

1370 *
pBuf
 = 
pCmd
->
numEvíts
;

1372  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1373 
COMMAND_SE_GET_CALORIFIC_VALUE
, 
TRUE
,

1374 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

1375 
£qNum
, 
PACKET_LEN_SE_GET_CALORIFIC_VALUE
, 
buf
 );

1376 
	}
}

1391 
ZSètus_t
 
	$z˛SE_Pricög_Síd_GëCO2VÆue
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1392 
z˛CCGëCO2VÆue_t
 *
pCmd
,

1393 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1395 
uöt8
 
buf
[
PACKET_LEN_SE_GET_CO2_VALUE
];

1396 
uöt8
 *
pBuf
;

1398 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
°¨tTime
 );

1399 *
pBuf
++ = 
pCmd
->
numEvíts
;

1400 *
pBuf
 = 
pCmd
->
èriffTy≥
;

1402  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1403 
COMMAND_SE_GET_CO2_VALUE
, 
TRUE
,

1404 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

1405 
£qNum
, 
PACKET_LEN_SE_GET_CO2_VALUE
, 
buf
 );

1406 
	}
}

1421 
ZSètus_t
 
	$z˛SE_Pricög_Síd_GëBûlögPîiod
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1422 
z˛CCGëBûlögPîiod_t
 *
pCmd
,

1423 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1425 
uöt8
 
buf
[
PACKET_LEN_SE_GET_BILLING_PERIOD
];

1426 
uöt8
 *
pBuf
;

1428 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
°¨tTime
 );

1429 *
pBuf
++ = 
pCmd
->
numEvíts
;

1430 *
pBuf
 = 
pCmd
->
èriffTy≥
;

1432  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1433 
COMMAND_SE_GET_BILLING_PERIOD
, 
TRUE
,

1434 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

1435 
£qNum
, 
PACKET_LEN_SE_GET_BILLING_PERIOD
, 
buf
 );

1436 
	}
}

1451 
ZSètus_t
 
	$z˛SE_Pricög_Síd_GëC⁄sﬁid©edBûl
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1452 
z˛CCGëC⁄sﬁid©edBûl_t
 *
pCmd
,

1453 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1455 
uöt8
 
buf
[
PACKET_LEN_SE_GET_CONSOLIDATED_BILL
];

1456 
uöt8
 *
pBuf
;

1458 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
°¨tTime
 );

1459 *
pBuf
++ = 
pCmd
->
numEvíts
;

1460 *
pBuf
 = 
pCmd
->
èriffTy≥
;

1462  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1463 
COMMAND_SE_GET_CONSOLIDATED_BILL
, 
TRUE
,

1464 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

1465 
£qNum
, 
PACKET_LEN_SE_GET_CONSOLIDATED_BILL
, 
buf
 );

1466 
	}
}

1481 
ZSètus_t
 
	$z˛SE_Pricög_Síd_CPPEvítRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1482 
z˛CCCPPEvítRe•⁄£_t
 *
pCmd
,

1483 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1485 
uöt8
 
buf
[
PACKET_LEN_SE_CPP_EVENT_RESPONSE
];

1486 
uöt8
 *
pBuf
;

1488 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîEvítId
 );

1489 *
pBuf
 = 
pCmd
->
CPPAuth
;

1491  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

1492 
COMMAND_SE_CPP_EVENT_RESPONSE
, 
TRUE
,

1493 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

1494 
£qNum
, 
PACKET_LEN_SE_CPP_EVENT_RESPONSE
, 
buf
 );

1495 
	}
}

1500 #ifde‡
ZCL_MESSAGE


1514 
ZSètus_t
 
	$z˛SE_Mesßge_Síd_Di•œyMesßge
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1515 
z˛CCDi•œyMesßge_t
 *
pCmd
,

1516 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1518 
uöt8
 *
buf
;

1519 
uöt8
 *
pBuf
;

1520 
uöt16
 
bufLí
;

1521 
ZSètus_t
 
°©us
;

1524 
bufLí
 = 4 + 1 + 4 + 2 + 1 + 
pCmd
->
msgSåög
.
°rLí
;

1526 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

1527 i‡–
buf
 =
NULL
 )

1529  ( 
ZMemEº‹
 );

1532 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
mesßgeId
 );

1533 *
pBuf
++ = 
pCmd
->
mesßgeCål
.
å™smissi⁄Mode
 |

1534 (
pCmd
->
mesßgeCål
.
imp‹èn˚
 << 
SE_PROFILE_MSGCTRL_IMPORTANCE
) |

1535 #i‡
	`deföed
 ( 
SE_UK_EXT
 )

1536 (
pCmd
->
mesßgeCål
.
pöRequúed
 << 
SE_PROFILE_MSGCTRL_PINREQUIRED
 ) |

1537 (
pCmd
->
mesßgeCål
.
ac˚±™˚Requúed
 << 
SE_PROFILE_MSGCTRL_ACCEPTREQUIRED
 ) |

1539 (
pCmd
->
mesßgeCål
.
c⁄fúm©i⁄Requúed
 << 
SE_PROFILE_MSGCTRL_CONFREQUIRED
);

1540 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
°¨tTime
 );

1541 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
duøti⁄InMöuãs
 );

1542 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
duøti⁄InMöuãs
 );

1543 *
pBuf
++ = 
pCmd
->
msgSåög
.
°rLí
;

1545 
	`oßl_mem˝y
–
pBuf
, 
pCmd
->
msgSåög
.
pSå
,ÖCmd->msgSåög.
°rLí
 );

1547 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_MESSAGE
,

1548 
COMMAND_SE_DISPLAY_MESSAGE
, 
TRUE
,

1549 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
,

1550 0, 
£qNum
, 
bufLí
, 
buf
 );

1551 
	`oßl_mem_‰ì
–
buf
 );

1553  
°©us
;

1554 
	}
}

1569 
ZSètus_t
 
	$z˛SE_Mesßge_Síd_C™˚lMesßge
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1570 
z˛CCC™˚lMesßge_t
 *
pCmd
,

1571 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1573 
uöt8
 
buf
[5];

1575 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
mesßgeId
 );

1576 
buf
[4] = 
pCmd
->
mesßgeCål
.
å™smissi⁄Mode
 |

1577 (
pCmd
->
mesßgeCål
.
imp‹èn˚
 << 
SE_PROFILE_MSGCTRL_IMPORTANCE
) |

1578 #i‡
	`deföed
 ( 
SE_UK_EXT
 )

1579 (
pCmd
->
mesßgeCål
.
pöRequúed
 << 
SE_PROFILE_MSGCTRL_PINREQUIRED
 ) |

1580 (
pCmd
->
mesßgeCål
.
ac˚±™˚Requúed
 << 
SE_PROFILE_MSGCTRL_ACCEPTREQUIRED
 ) |

1582 (
pCmd
->
mesßgeCål
.
c⁄fúm©i⁄Requúed
 << 
SE_PROFILE_MSGCTRL_CONFREQUIRED
);

1584  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_MESSAGE
,

1585 
COMMAND_SE_CANCEL_MESSAGE
, 
TRUE
,

1586 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
,

1587 0, 
£qNum
, 5, 
buf
 );

1588 
	}
}

1603 
ZSètus_t
 
	$z˛SE_Mesßge_Síd_MesßgeC⁄fúm©i⁄
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1604 
z˛CCMesßgeC⁄fúm©i⁄_t
 *
pCmd
,

1605 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1607 
uöt8
 *
buf
;

1608 
uöt8
 *
pBuf
;

1609 
uöt16
 
bufLí
 = 4 + 4;

1610 
ZSètus_t
 
°©us
;

1612 #i‡
	`deföed
 ( 
SE_UK_EXT
 )

1614 i‡–
pCmd
->
msgSåög
.
°rLí
 > 
SE_PROFILE_MESSAGE_RESPONSE_LENGTH
 )

1616  (
ZInvÆidP¨amëî
);

1620 
bufLí
 +1 + 
pCmd
->
msgSåög
.
°rLí
;

1623 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

1624 i‡–
buf
 =
NULL
 )

1626  ( 
ZMemEº‹
 );

1629 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
mesßgeId
 );

1630 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
c⁄fúmTime
 );

1632 #i‡
	`deföed
 ( 
SE_UK_EXT
 )

1633 *
pBuf
++ = 
pCmd
->
msgSåög
.
°rLí
;

1634 
	`oßl_mem˝y
–
pBuf
, 
pCmd
->
msgSåög
.
pSå
,ÖCmd->msgSåög.
°rLí
 );

1637 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_MESSAGE
,

1638 
COMMAND_SE_MESSAGE_CONFIRMATION
, 
TRUE
,

1639 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
,

1640 0, 
£qNum
, 
bufLí
, 
buf
 );

1641 
	`oßl_mem_‰ì
–
buf
 );

1643  
°©us
;

1644 
	}
}

1647 #ifde‡
ZCL_LOAD_CONTROL


1661 
ZSètus_t
 
	$z˛SE_LﬂdC⁄åﬁ_Síd_LﬂdC⁄åﬁEvít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1662 
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

1663 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1665 
uöt8
 *
buf
;

1666 
uöt8
 *
pBuf
;

1667 
ZSètus_t
 
°©us
;

1669 
buf
 = 
	`oßl_mem_Æloc
–
PACKET_LEN_SE_LOAD_CONTROL_EVENT
 );

1671 i‡–
buf
 =
NULL
 )

1673  ( 
ZMemEº‹
 );

1676 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîEvít
 );

1677 
pBuf
 = 
	`oßl_buf„r_uöt24
–pBuf, 
pCmd
->
devi˚GroupCœss
 );

1678 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
°¨tTime
 );

1679 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
duøti⁄InMöuãs
 );

1680 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
duøti⁄InMöuãs
 );

1681 *
pBuf
++ = 
pCmd
->
¸ôiˇlôyLevñ
;

1682 *
pBuf
++ = 
pCmd
->
coﬁögTem≥øtuªOff£t
;

1683 *
pBuf
++ = 
pCmd
->
hótögTem≥øtuªOff£t
;

1684 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
coﬁögTem≥øtuªSëPoöt
 );

1685 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
coﬁögTem≥øtuªSëPoöt
 );

1686 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
hótögTem≥øtuªSëPoöt
 );

1687 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
hótögTem≥øtuªSëPoöt
 );

1688 *
pBuf
++ = 
pCmd
->
avîageLﬂdAdju°mítPî˚¡age
;

1689 *
pBuf
++ = 
pCmd
->
dutyCy˛e
;

1690 *
pBuf
 = 
pCmd
->
evítC⁄åﬁ
;

1692 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

1693 
COMMAND_SE_LOAD_CONTROL_EVENT
, 
TRUE
,

1694 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

1695 
PACKET_LEN_SE_LOAD_CONTROL_EVENT
, 
buf
 );

1697 
	`oßl_mem_‰ì
–
buf
 );

1699  
°©us
;

1700 
	}
}

1715 
ZSètus_t
 
	$z˛SE_LﬂdC⁄åﬁ_Síd_C™˚lLﬂdC⁄åﬁEvít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1716 
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

1717 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1719 
uöt8
 
buf
[
PACKET_LEN_SE_CANCEL_LOAD_CONTROL_EVENT
];

1720 
uöt8
 *
pBuf
;

1722 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîEvítID
 );

1723 
pBuf
 = 
	`oßl_buf„r_uöt24
–pBuf, 
pCmd
->
devi˚GroupCœss
 );

1724 *
pBuf
++ = 
pCmd
->
ˇn˚lC⁄åﬁ
;

1725 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
ef„˘iveTime
 );

1727  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

1728 
COMMAND_SE_CANCEL_LOAD_CONTROL_EVENT
, 
TRUE
,

1729 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

1730 
PACKET_LEN_SE_CANCEL_LOAD_CONTROL_EVENT
, 
buf
 );

1731 
	}
}

1746 
ZSètus_t
 
	$z˛SE_LﬂdC⁄åﬁ_Síd_Rï‹tEvítSètus
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1747 
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

1748 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1750 
uöt8
 *
buf
;

1751 
uöt8
 *
pBuf
;

1752 
ZSètus_t
 
°©us
;

1754 
buf
 = 
	`oßl_mem_Æloc
–
PACKET_LEN_SE_REPORT_EVENT_STATUS
 );

1756 i‡–
buf
 =
NULL
 )

1758  ( 
ZMemEº‹
 );

1761 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîEvítID
 );

1762 *
pBuf
++ = 
pCmd
->
evítSètus
;

1763 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
evítSèπTime
 );

1764 *
pBuf
++ = 
pCmd
->
¸ôiˇlôyLevñAµlõd
;

1765 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
coﬁögTem≥øtuªSëPoötAµlõd
 );

1766 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
coﬁögTem≥øtuªSëPoötAµlõd
 );

1767 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
hótögTem≥øtuªSëPoötAµlõd
 );

1768 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
hótögTem≥øtuªSëPoötAµlõd
 );

1769 *
pBuf
++ = 
pCmd
->
avîageLﬂdAdju°mít
;

1770 *
pBuf
++ = 
pCmd
->
dutyCy˛eAµlõd
;

1771 *
pBuf
++ = 
pCmd
->
evítC⁄åﬁ
;

1772 *
pBuf
++ = 
pCmd
->
sig«tuªTy≥
;

1774 
	`z˛GíîÆ_KeyE°ablishmít_ECDSASign
–
buf
, 
PACKET_LEN_SE_REPORT_EVENT_STATUS_ONLY
, 
pBuf
);

1776 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

1777 
COMMAND_SE_REPORT_EVENT_STATUS
, 
TRUE
,

1778 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

1779 
PACKET_LEN_SE_REPORT_EVENT_STATUS
, 
buf
 );

1781 
	`oßl_mem_‰ì
–
buf
 );

1783  
°©us
;

1784 
	}
}

1799 
ZSètus_t
 
	$z˛SE_LﬂdC⁄åﬁ_Síd_GëScheduÀdEvít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1800 
z˛CCGëScheduÀdEvít_t
 *
pCmd
,

1801 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1803 
uöt8
 
buf
[
PACKET_LEN_SE_GET_SCHEDULED_EVENT
];

1805 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
°¨tTime
 );

1806 
buf
[4] = 
pCmd
->
numEvíts
;

1808  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

1809 
COMMAND_SE_GET_SCHEDULED_EVENT
, 
TRUE
,

1810 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

1811 
PACKET_LEN_SE_GET_SCHEDULED_EVENT
, 
buf
 );

1812 
	}
}

1815 #ifde‡
ZCL_PREPAYMENT


1829 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_SñAvaûEmîgícyCªdô
–
uöt8
 
§cEP
,

1830 
afAddrTy≥_t
 *
d°Addr
,

1831 
z˛CCSñAvaûEmîgícyCªdô_t
 *
pCmd
,

1832 
uöt8
 
dißbÀDeÁu…R•
,

1833 
uöt8
 
£qNum
 )

1835 
uöt8
 *
buf
;

1836 
uöt8
 *
pBuf
;

1837 
uöt8
 
bufLí
;

1838 
ZSètus_t
 
°©us
;

1841 
bufLí
 = 
PACKET_LEN_SE_SEL_AVAIL_EMERGENCY_CREDIT
 +

1842 
pCmd
->
sôeId
.
°rLí
 +

1843 
pCmd
->
mëîSîülNumbî
.
°rLí
;

1845 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

1846 i‡–
buf
 =
NULL
 )

1848  ( 
ZMemEº‹
 );

1851 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
comm™dD©eTime
 );

1852 *
pBuf
++ = 
pCmd
->
‹igö©ögDevi˚
;

1853 *
pBuf
++ = 
pCmd
->
sôeId
.
°rLí
;

1854 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
pCmd
->
sôeId
.
pSå
,ÖCmd->sôeId.
°rLí
 );

1855 *
pBuf
++ = 
pCmd
->
mëîSîülNumbî
.
°rLí
;

1856 
	`oßl_mem˝y
–
pBuf
, 
pCmd
->
mëîSîülNumbî
.
pSå
,ÖCmd->mëîSîülNumbî.
°rLí
 );

1858 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

1859 
COMMAND_SE_SEL_AVAIL_EMERGENCY_CREDIT
, 
TRUE
,

1860 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

1861 
£qNum
, 
bufLí
, 
buf
 );

1863 
	`oßl_mem_‰ì
–
buf
 );

1865  
°©us
;

1866 
	}
}

1868 #i‚de‡
SE_UK_EXT


1882 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_Ch™geSuµly
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1883 
z˛CCCh™geSuµly_t
 *
pCmd
,

1884 
uöt8
 
dißbÀDeÁu…R•
,

1885 
uöt8
 
£qNum
 )

1887 
uöt8
 *
buf
;

1888 
uöt8
 *
pBuf
;

1889 
uöt8
 
bufLí
;

1890 
ZSètus_t
 
°©us
;

1893 
bufLí
 = 
PACKET_LEN_SE_CHANGE_SUPPLY
 +

1894 
pCmd
->
sôeId
.
°rLí
 +

1895 
pCmd
->
mëîSîülNumbî
.
°rLí
;

1897 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

1898 i‡–
buf
 =
NULL
 )

1900  ( 
ZMemEº‹
 );

1903 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
¥ovidîId
 );

1904 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
ªque°D©eTime
 );

1905 *
pBuf
++ = 
pCmd
->
sôeId
.
°rLí
;

1906 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
pCmd
->
sôeId
.
pSå
,ÖCmd->sôeId.
°rLí
 );

1907 *
pBuf
++ = 
pCmd
->
mëîSîülNumbî
.
°rLí
;

1908 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
pCmd
->
mëîSîülNumbî
.
pSå
,ÖCmd->mëîSîülNumbî.
°rLí
 );

1909 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
im∂emíèti⁄D©eTime
 );

1910 *
pBuf
++ = 
pCmd
->
¥›o£dSuµlySètus
;

1911 *
pBuf
 = 
pCmd
->
‹igIdSuµlyC⁄åﬁBôs
;

1913 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

1914 
COMMAND_SE_CHANGE_SUPPLY
, 
TRUE
,

1915 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

1916 
£qNum
, 
bufLí
, 
buf
 );

1918 
	`oßl_mem_‰ì
–
buf
 );

1920  
°©us
;

1921 
	}
}

1936 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_SuµlySètusRe•⁄£
–
uöt8
 
§cEP
,

1937 
afAddrTy≥_t
 *
d°Addr
,

1938 
z˛CCSuµlySètusRe•⁄£_t
 *
pCmd
,

1939 
uöt8
 
dißbÀDeÁu…R•
,

1940 
uöt8
 
£qNum
 )

1942 
uöt8
 *
buf
;

1943 
uöt8
 *
pBuf
;

1944 
ZSètus_t
 
°©us
;

1946 
buf
 = 
	`oßl_mem_Æloc
–
PACKET_LEN_SE_SUPPLY_STATUS_RESPONSE
 );

1947 i‡–
buf
 =
NULL
 )

1949  ( 
ZMemEº‹
 );

1952 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
¥ovidîId
 );

1953 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
im∂emíèti⁄D©eTime
 );

1954 *
pBuf
 = 
pCmd
->
suµlySètus
;

1956 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

1957 
COMMAND_SE_SUPPLY_STATUS_RESPONSE
, 
TRUE
,

1958 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

1959 
£qNum
, 
PACKET_LEN_SE_SUPPLY_STATUS_RESPONSE
, 
buf
 );

1961 
	`oßl_mem_‰ì
–
buf
 );

1963  
°©us
;

1964 
	}
}

1980 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_Ch™geDebt
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1981 
z˛CCCh™geDebt_t
 *
pCmd
,

1982 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1984 
uöt8
 *
buf
;

1985 
uöt8
 *
pBuf
;

1986 
ZSètus_t
 
°©us
;

1987 
uöt8
 
bufLí
 = 
PACKET_LEN_SE_MIN_CHANGE_DEBT
 + 
pCmd
->
debtLabñ
.
°rLí
 +ÖCmd->
sig«tuª
.strLen;

1989 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

1990 i‡–
buf
 =
NULL
 )

1992  ( 
ZMemEº‹
 );

1995 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
cmdIssueTime
 );

1996 *
pBuf
++ = 
pCmd
->
debtLabñ
.
°rLí
;

1997 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
pCmd
->
debtLabñ
.
pSå
,ÖCmd->debtLabñ.
°rLí
 );

1998 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
debtAmou¡
 );

1999 *
pBuf
++ = 
pCmd
->
debtRecovîyMëhod
;

2000 *
pBuf
++ = 
pCmd
->
debtTy≥
;

2001 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
ªcovîySèπTime
 );

2002 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
debtRecovîyCﬁÀ˘i⁄Time
 );

2003 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
debtRecovîyCﬁÀ˘i⁄Time
 );

2004 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
debtRecovîyFªquícy
 );

2005 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
debtRecovîyAmt
 );

2006 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
debtRecovîyBÆ™˚P˘
 );

2007 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
debtRecovîyBÆ™˚P˘
 );

2008 *
pBuf
++ = 
pCmd
->
debtRecovîyMaxMis£d
;

2009 *
pBuf
++ = 
pCmd
->
sig«tuª
.
°rLí
;

2010 ()
	`oßl_mem˝y
–
pBuf
, 
pCmd
->
sig«tuª
.
pSå
,ÖCmd->sig«tuª.
°rLí
 );

2012 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2013 
COMMAND_SE_CHANGE_DEBT
, 
TRUE
,

2014 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

2015 
£qNum
, 
bufLí
, 
buf
 );

2017 
	`oßl_mem_‰ì
–
buf
 );

2019  
°©us
;

2020 
	}
}

2035 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_EmîgícyCªdôSëup
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2036 
z˛CCEmîgícyCªdôSëup_t
 *
pCmd
,

2037 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2039 
uöt8
 
buf
[
PACKET_LEN_SE_EMERGENCY_CREDIT_SETUP
];

2040 
uöt8
 *
pBuf
;

2042 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
cmdIssueTime
 );

2043 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
emîgícyCªdôLimô
 );

2044 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
emîgícyCªdôThªshﬁd
 );

2046  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2047 
COMMAND_SE_EMERGENCY_CREDIT_SETUP
, 
TRUE
,

2048 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

2049 
£qNum
, 
PACKET_LEN_SE_EMERGENCY_CREDIT_SETUP
, 
buf
 );

2050 
	}
}

2065 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_C⁄sumîT›up
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2066 
z˛CCC⁄sumîT›up_t
 *
pCmd
,

2067 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2069 
uöt8
 *
buf
;

2070 
uöt8
 *
pBuf
;

2071 
ZSètus_t
 
°©us
;

2072 
uöt8
 
bufLí
 = 
PACKET_LEN_SE_MIN_CONSUMER_TOPUP
 + 
pCmd
->
t›upCode
.
°rLí
;

2074 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

2075 i‡–
buf
 =
NULL
 )

2077  ( 
ZMemEº‹
 );

2080 
pBuf
 = 
buf
;

2082 *
pBuf
++ = 
pCmd
->
‹igö©ögDevi˚
;

2083 *
pBuf
++ = 
pCmd
->
t›upCode
.
°rLí
;

2084 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
pCmd
->
t›upCode
.
pSå
,ÖCmd->t›upCode.
°rLí
 );

2086 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2087 
COMMAND_SE_CONSUMER_TOPUP
, 
TRUE
,

2088 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

2089 
£qNum
, 
bufLí
, 
buf
 );

2090 
	`oßl_mem_‰ì
–
buf
 );

2092  
°©us
;

2093 
	}
}

2108 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_CªdôAdju°mít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2109 
z˛CCCªdôAdju°mít_t
 *
pCmd
,

2110 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2112 
uöt8
 *
buf
;

2113 
uöt8
 *
pBuf
;

2114 
ZSètus_t
 
°©us
;

2115 
uöt8
 
bufLí
 = 
PACKET_LEN_SE_MIN_CREDIT_ADJUSTMENT
 + 
pCmd
->
sig«tuª
.
°rLí
;

2117 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

2118 i‡–
buf
 =
NULL
 )

2120  ( 
ZMemEº‹
 );

2123 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
cmdIssueTime
 );

2124 *
pBuf
++ = 
pCmd
->
¸edôAdju°mítTy≥
;

2125 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
pCmd
->
¸edôAdju°mítVÆue
, 6 );

2126 *
pBuf
++ = 
pCmd
->
sig«tuª
.
°rLí
;

2127 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
pCmd
->
sig«tuª
.
pSå
,ÖCmd->sig«tuª.
°rLí
 );

2129 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2130 
COMMAND_SE_CREDIT_ADJUSTMENT
, 
TRUE
,

2131 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

2132 
£qNum
, 
bufLí
, 
buf
 );

2133 
	`oßl_mem_‰ì
–
buf
 );

2135  
°©us
;

2136 
	}
}

2151 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_Ch™gePaymítMode
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2152 
z˛CCCh™gePaymítMode_t
 *
pCmd
,

2153 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2155 
uöt8
 *
buf
;

2156 
uöt8
 *
pBuf
;

2157 
ZSètus_t
 
°©us
;

2158 
uöt8
 
bufLí
 = 
PACKET_LEN_SE_MIN_CHANGE_PAYMENT_MODE
 + 
pCmd
->
sig«tuª
.
°rLí
;

2160 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

2161 i‡–
buf
 =
NULL
 )

2163  ( 
ZMemEº‹
 );

2166 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
suµlõrId
 );

2167 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
modeEvítId
 );

2168 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
im∂emíèti⁄D©e
 );

2169 *
pBuf
++ = 
pCmd
->
¥›o£dPaymítC⁄åﬁ
;

2170 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
cutOffVÆue
 );

2171 *
pBuf
++ = 
pCmd
->
sig«tuª
.
°rLí
;

2172 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
pCmd
->
sig«tuª
.
pSå
,ÖCmd->sig«tuª.
°rLí
 );

2174 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2175 
COMMAND_SE_CHANGE_PAYMENT_MODE
, 
TRUE
,

2176 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

2177 
£qNum
, 
bufLí
, 
buf
 );

2178 
	`oßl_mem_‰ì
–
buf
 );

2180  
°©us
;

2181 
	}
}

2196 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_GëPª∑yS«pshŸ
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2197 
z˛CCGëPª∑yS«pshŸ_t
 *
pCmd
,

2198 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2200 
uöt8
 
buf
[
PACKET_LEN_SE_GET_PREPAY_SNAPSHOT
];

2201 
uöt8
 *
pBuf
;

2203 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
°¨tTime
 );

2204 *
pBuf
++ = 
pCmd
->
numbîOfS«pshŸs
;

2205 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
¢≠shŸCau£
 );

2206 *
pBuf
 = 
	`HI_UINT16
–
pCmd
->
¢≠shŸCau£
 );

2208  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2209 
COMMAND_SE_GET_PREPAY_SNAPSHOT
, 
TRUE
,

2210 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

2211 
£qNum
, 
PACKET_LEN_SE_GET_PREPAY_SNAPSHOT
, 
buf
 );

2212 
	}
}

2227 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_GëT›upLog
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2228 
uöt8
 
numEvíts
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2230 
uöt8
 
buf
[
PACKET_LEN_SE_GET_TOPUP_LOG
];

2232 
buf
[0] = 
numEvíts
;

2234  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2235 
COMMAND_SE_GET_TOPUP_LOG
, 
TRUE
,

2236 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

2237 
£qNum
, 
PACKET_LEN_SE_GET_TOPUP_LOG
, 
buf
 );

2238 
	}
}

2253 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_SëLowCªdôW¨nögLevñ
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2254 
uöt8
 
w¨nögLevñ
,

2255 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2257 
uöt8
 
buf
[
PACKET_LEN_SE_SET_LOW_CREDIT_WARNING_LEVEL
];

2259 
buf
[0] = 
w¨nögLevñ
;

2261  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2262 
COMMAND_SE_SET_LOW_CREDIT_WARNING_LEVEL
, 
TRUE
,

2263 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

2264 
£qNum
, 
PACKET_LEN_SE_SET_LOW_CREDIT_WARNING_LEVEL
, 
buf
 );

2265 
	}
}

2280 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_GëDebtRïaymítLog
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2281 
z˛CCGëDebtRïaymítLog_t
 *
pCmd
,

2282 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2284 
uöt8
 
buf
[
PACKET_LEN_SE_GET_DEBT_REPAYMENT_LOG
];

2286 
buf
[0] = 
pCmd
->
numbîOfDebt
;

2287 
buf
[1] = 
pCmd
->
debtTy≥
;

2289  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2290 
COMMAND_SE_GET_DEBT_REPAYMENT_LOG
, 
TRUE
,

2291 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

2292 
£qNum
, 
PACKET_LEN_SE_GET_DEBT_REPAYMENT_LOG
, 
buf
 );

2293 
	}
}

2308 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_GëPª∑yS«pshŸRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2309 
z˛CCGëPª∑yS«pshŸRe•⁄£_t
 *
pCmd
,

2310 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2312 
uöt8
 
buf
[
PACKET_LEN_SE_GET_PREPAY_SNAPSHOT_RESPONSE
];

2313 
uöt8
 *
pBuf
;

2315 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
evítIssuîId
 );

2316 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
¢≠shŸTime
 );

2317 *
pBuf
++ = 
pCmd
->
comm™dIndex
;

2318 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
¢≠shŸCau£
 );

2319 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
¢≠shŸCau£
 );

2320 *
pBuf
++ = 
pCmd
->
¢≠shŸPaylﬂdTy≥
;

2322 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
∑ylﬂd
.
ty≥1DebtRemaöög
 );

2323 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
∑ylﬂd
.
ty≥2DebtRemaöög
 );

2324 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
∑ylﬂd
.
ty≥3DebtRemaöög
 );

2325 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
∑ylﬂd
.
emîgícyCªdôRemaöög
 );

2326 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
∑ylﬂd
.
¸edôRemaöög
 );

2328  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2329 
COMMAND_SE_GET_PREPAY_SNAPSHOT_RESPONSE
, 
TRUE
,

2330 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

2331 
£qNum
, 
PACKET_LEN_SE_GET_PREPAY_SNAPSHOT_RESPONSE
, 
buf
 );

2332 
	}
}

2347 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_Ch™gePaymítModeRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2348 
z˛CCCh™gePaymítModeRe•⁄£_t
 *
pCmd
,

2349 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2351 
uöt8
 
buf
[
PACKET_LEN_SE_CHANGE_PAYMENT_MODE_RESPONSE
];

2352 
uöt8
 *
pBuf
 = 
buf
;

2354 *
pBuf
++ = 
pCmd
->
‰õndlyCªdô
;

2355 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
‰õndlyCªdôCÆíd¨
 );

2356 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
emîgícyCªdôLimô
 );

2357 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
cmîgícyCªdôThªshﬁd
 );

2359  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2360 
COMMAND_SE_CHANGE_PAYMENT_MODE_RESPONSE
, 
TRUE
,

2361 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

2362 
£qNum
, 
PACKET_LEN_SE_CHANGE_PAYMENT_MODE_RESPONSE
, 
buf
 );

2363 
	}
}

2378 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_C⁄sumîT›upRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2379 
z˛CCC⁄sumîT›upRe•⁄£_t
 *
pCmd
,

2380 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2382 
uöt8
 
buf
[
PACKET_LEN_SE_SE_CONSUMER_TOPUP_RESPONSE
];

2383 
uöt8
 *
pBuf
 = 
buf
;

2385 *
pBuf
++ = 
pCmd
->
ªsu…Ty≥
;

2386 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
t›upVÆue
 );

2387 *
pBuf
++ = 
pCmd
->
sour˚ofT›up
;

2388 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
¸edôRemaöög
 );

2390  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2391 
COMMAND_SE_CONSUMER_TOPUP_RESPONSE
, 
TRUE
,

2392 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

2393 
£qNum
, 
PACKET_LEN_SE_SE_CONSUMER_TOPUP_RESPONSE
, 
buf
 );

2394 
	}
}

2409 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_GëComm™ds
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2410 
uöt8
 
nŸifiˇti⁄Fœgs
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2412 
uöt8
 
buf
[
PACKET_LEN_SE_GET_COMMANDS
];

2414 
buf
[0] = 
nŸifiˇti⁄Fœgs
;

2416  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2417 
COMMAND_SE_GET_COMMANDS
, 
TRUE
,

2418 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

2419 
£qNum
, 
PACKET_LEN_SE_GET_COMMANDS
, 
buf
 );

2420 
	}
}

2435 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_PublishT›upLog
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2436 
z˛CCPublishT›upLog_t
 *
pCmd
,

2437 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2439 
uöt8
 *
buf
;

2440 
uöt8
 *
pBuf
;

2441 
ZSètus_t
 
°©us
;

2442 
uöt8
 
bufLí
 = 
PACKET_LEN_SE_MIN_PUBLISH_TOPUP_LOG
 + (
pCmd
->
numCodes
 * 
SE_TOPUP_CODE_LEN
);

2443 
uöt8
 
i
;

2445 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

2446 i‡–
buf
 =
NULL
 )

2448  ( 
ZMemEº‹
 );

2451 
pBuf
 = 
buf
;

2453 *
pBuf
++ = 
pCmd
->
cmdIndex
;

2454 *
pBuf
++ = 
pCmd
->
tŸÆCmds
;

2456 
bufLí
 = 2;

2458  
i
 = 0; i < 
pCmd
->
numCodes
; i++ )

2460 *
pBuf
++ = 
pCmd
->
pPaylﬂd
[
i
].
°rLí
;

2461 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
pCmd
->
pPaylﬂd
[
i
].
pSå
,ÖCmd->pPaylﬂd[i].
°rLí
 );

2462 
bufLí
 +1 + 
pCmd
->
pPaylﬂd
[
i
].
°rLí
;

2465 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2466 
COMMAND_SE_PUBLISH_TOPUP_LOG
, 
TRUE
,

2467 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

2468 
£qNum
, 
bufLí
, 
buf
 );

2469 
	`oßl_mem_‰ì
–
buf
 );

2471  
°©us
;

2472 
	}
}

2487 
ZSètus_t
 
	$z˛SE_Pª∑ymít_Síd_PublishDebtLog
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2488 
z˛CCPublishDebtLog_t
 *
pCmd
,

2489 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2491 
uöt8
 *
buf
;

2492 
uöt8
 *
pBuf
;

2493 
ZSètus_t
 
°©us
;

2494 
uöt8
 
bufLí
 = 
PACKET_LEN_SE_MIN_PUBLISH_DEBT_LOG
 + (
pCmd
->
numDebts
 * (
z˛CCDebtPaylﬂd_t
));

2495 
uöt8
 
i
;

2497 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

2498 i‡–
buf
 =
NULL
 )

2500  ( 
ZMemEº‹
 );

2503 
pBuf
 = 
buf
;

2505 *
pBuf
++ = 
pCmd
->
cmdIndex
;

2506 *
pBuf
++ = 
pCmd
->
tŸÆCmds
;

2508  
i
 = 0; i < 
pCmd
->
numDebts
; i++ )

2510 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
pPaylﬂd
[
i
].
cﬁÀ˘i⁄Time
 );

2511 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
pPaylﬂd
[
i
].
amou¡CﬁÀ˘ed
 );

2512 *
pBuf
++ = 
pCmd
->
pPaylﬂd
[
i
].
debtTy≥
;

2513 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
pPaylﬂd
[
i
].
out°™dögDebt
 );

2516 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

2517 
COMMAND_SE_PUBLISH_DEBT_LOG
, 
TRUE
,

2518 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

2519 
£qNum
, 
bufLí
, 
buf
 );

2520 
	`oßl_mem_‰ì
–
buf
 );

2522  
°©us
;

2523 
	}
}

2527 #ifde‡
ZCL_TUNNELING


2541 
ZSètus_t
 
	$z˛SE_Tu¬ñög_Síd_Reque°Tu¬ñ
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2542 
z˛CCReque°Tu¬ñ_t
 *
pCmd
,

2543 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2545 
uöt8
 *
buf
;

2546 
uöt8
 *
pBuf
;

2547 
ZSètus_t
 
°©us
;

2549 
buf
 = 
	`oßl_mem_Æloc
–
PACKET_LEN_SE_TUNNELING_REQUEST
 );

2550 i‡–
buf
 =
NULL
 )

2552  
ZMemEº‹
;

2555 
pBuf
 = 
buf
;

2556 *
pBuf
++ = 
pCmd
->
¥ŸocﬁId
;

2557 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
m™uÁ˘uªrCode
 );

2558 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
m™uÁ˘uªrCode
 );

2559 *
pBuf
++ = 
pCmd
->
ÊowC⁄åﬁSuµ‹t
;

2560 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
maxInTøns„rSize
 );

2561 *
pBuf
 = 
	`HI_UINT16
–
pCmd
->
maxInTøns„rSize
 );

2563 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SE_TUNNELING
,

2564 
COMMAND_SE_REQUEST_TUNNEL
, 
TRUE
,

2565 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

2566 
£qNum
, 
PACKET_LEN_SE_TUNNELING_REQUEST
, 
buf
 );

2568 
	`oßl_mem_‰ì
–
buf
 );

2570  
°©us
;

2571 
	}
}

2586 
ZSètus_t
 
	$z˛SE_Tu¬ñög_Síd_ReqTu¬ñR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2587 
z˛CCReqTu¬ñR•_t
 *
pCmd
,

2588 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2590 
uöt8
 *
buf
;

2591 
uöt8
 *
pBuf
;

2592 
ZSètus_t
 
°©us
;

2594 
buf
 = 
	`oßl_mem_Æloc
–
PACKET_LEN_SE_TUNNELING_RESPONSE
 );

2595 i‡–
buf
 =
NULL
 )

2597  
ZMemEº‹
;

2600 
pBuf
 = 
buf
;

2601 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
tu¬ñId
 ) ;

2602 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
tu¬ñId
 );

2603 *
pBuf
++ = 
pCmd
->
tu¬ñSètus
;

2604 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
maxInTøns„rSize
 ) ;

2605 *
pBuf
 = 
	`HI_UINT16
–
pCmd
->
maxInTøns„rSize
 );

2607 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SE_TUNNELING
,

2608 
COMMAND_SE_REQUEST_TUNNEL_RESPONSE
, 
TRUE
,

2609 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

2610 
£qNum
, 
PACKET_LEN_SE_TUNNELING_RESPONSE
, 
buf
 );

2612 
	`oßl_mem_‰ì
–
buf
 );

2614  
°©us
;

2616 
	}
}

2631 
ZSètus_t
 
	$z˛SE_Tu¬ñög_Síd_Clo£Tu¬ñ
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2632 
z˛CCClo£Tu¬ñ_t
 *
pCmd
,

2633 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2635 
uöt8
 
buf
[
PACKET_LEN_SE_TUNNELING_CLOSE
];

2636 
ZSètus_t
 
°©us
;

2638 
buf
[0] = 
	`LO_UINT16
–
pCmd
->
tu¬ñId
 );

2639 
buf
[1] = 
	`HI_UINT16
–
pCmd
->
tu¬ñId
 );

2641 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SE_TUNNELING
,

2642 
COMMAND_SE_CLOSE_TUNNEL
, 
TRUE
,

2643 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

2644 
£qNum
, 
PACKET_LEN_SE_TUNNELING_CLOSE
, 
buf
 );

2646  
°©us
;

2647 
	}
}

2664 
ZSètus_t
 
	$z˛SE_Tu¬ñög_Síd_Tøns„rD©a
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2665 
z˛CCTøns„rD©a_t
 *
pCmd
, 
uöt8
 
cmdId
,

2666 
uöt16
 
d©aLí
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2668 
uöt8
 *
buf
;

2669 
uöt8
 *
pBuf
;

2670 
uöt8
 
bufLí
;

2671 
ZSètus_t
 
°©us
;

2672 
uöt8
 
dúe˘i⁄
;

2674 
bufLí
 = 
PACKET_LEN_SE_TUNNELING_TRANSFER_DATA
 + 
d©aLí
;

2675 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

2676 i‡–
buf
 =
NULL
 )

2678  
ZMemEº‹
;

2681 
pBuf
 = 
buf
;

2682 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
tu¬ñId
 );

2683 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
tu¬ñId
 );

2685 i‡–
cmdId
 =
COMMAND_SE_DATA_CLIENT_SERVER_DIR
 )

2687 
dúe˘i⁄
 = 
ZCL_FRAME_CLIENT_SERVER_DIR
;

2691 
dúe˘i⁄
 = 
ZCL_FRAME_SERVER_CLIENT_DIR
;

2694 
	`oßl_mem˝y
–
pBuf
, 
pCmd
->
d©a
, 
d©aLí
 );

2696 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SE_TUNNELING
,

2697 
cmdId
, 
TRUE
, 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0,

2698 
£qNum
, 
bufLí
, 
buf
 );

2700 
	`oßl_mem_‰ì
–
buf
 );

2702  
°©us
;

2703 
	}
}

2719 
ZSètus_t
 
	$z˛SE_Tu¬ñög_Síd_Tøns„rD©aEº‹
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2720 
z˛CCTøns„rD©aEº‹_t
 *
pCmd
, 
uöt8
 
cmdId
,

2721 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2723 
uöt8
 
buf
[
PACKET_LEN_SE_TUNNELING_DATA_ERROR
];

2724 
ZSètus_t
 
°©us
;

2725 
uöt8
 
dúe˘i⁄
;

2727 
buf
[0] = 
	`LO_UINT16
–
pCmd
->
tu¬ñId
 );

2728 
buf
[1] = 
	`HI_UINT16
–
pCmd
->
tu¬ñId
 );

2729 
buf
[2] = 
pCmd
->
å™s„rD©aSètus
;

2731 i‡–
cmdId
 =
COMMAND_SE_DATA_ERROR_CLIENT_SERVER_DIR
)

2733 
dúe˘i⁄
 = 
ZCL_FRAME_CLIENT_SERVER_DIR
;

2737 
dúe˘i⁄
 = 
ZCL_FRAME_SERVER_CLIENT_DIR
;

2740 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SE_TUNNELING
,

2741 
cmdId
, 
TRUE
, 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0,

2742 
£qNum
, 
PACKET_LEN_SE_TUNNELING_DATA_ERROR
, 
buf
 );

2744  
°©us
;

2745 
	}
}

2761 
ZSètus_t
 
	$z˛SE_Tu¬ñög_Síd_AckTøns„rD©a
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2762 
z˛CCAckTøns„rD©a_t
 *
pCmd
, 
uöt8
 
cmdId
,

2763 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2765 
uöt8
 
buf
[
PACKET_LEN_SE_TUNNELING_DATA_ACK
];

2766 
ZSètus_t
 
°©us
;

2767 
uöt8
 
dúe˘i⁄
;

2769 
buf
[0] = 
	`LO_UINT16
–
pCmd
->
tu¬ñId
 );

2770 
buf
[1] = 
	`HI_UINT16
–
pCmd
->
tu¬ñId
 );

2771 
buf
[2] = 
	`LO_UINT16
–
pCmd
->
numbîOfByãsLe·
 );

2772 
buf
[3] = 
	`HI_UINT16
–
pCmd
->
numbîOfByãsLe·
 );

2774 i‡–
cmdId
 =
COMMAND_SE_ACK_SERVER_CLIENT_DIR
 )

2776 
dúe˘i⁄
 = 
ZCL_FRAME_SERVER_CLIENT_DIR
;

2780 
dúe˘i⁄
 = 
ZCL_FRAME_CLIENT_SERVER_DIR
;

2783 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SE_TUNNELING
,

2784 
cmdId
, 
TRUE
, 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0,

2785 
£qNum
, 
PACKET_LEN_SE_TUNNELING_DATA_ACK
, 
buf
 );

2787  
°©us
;

2788 
	}
}

2804 
ZSètus_t
 
	$z˛SE_Tu¬ñög_Síd_RódyD©a
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2805 
z˛CCRódyD©a_t
 *
pCmd
, 
uöt8
 
cmdId
,

2806 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2808 
uöt8
 
buf
[
PACKET_LEN_SE_TUNNELING_READY_DATA
];

2809 
ZSètus_t
 
°©us
;

2810 
uöt8
 
dúe˘i⁄
;

2812 
buf
[0] = 
	`LO_UINT16
–
pCmd
->
tu¬ñId
 );

2813 
buf
[1] = 
	`HI_UINT16
–
pCmd
->
tu¬ñId
 );

2814 
buf
[2] = 
	`LO_UINT16
–
pCmd
->
numbîOfO˘ësLe·
 );

2815 
buf
[3] = 
	`HI_UINT16
–
pCmd
->
numbîOfO˘ësLe·
 );

2817 i‡–
cmdId
 =
COMMAND_SE_READY_DATA_CLIENT_SERVER_DIR
 )

2819 
dúe˘i⁄
 = 
ZCL_FRAME_CLIENT_SERVER_DIR
;

2823 
dúe˘i⁄
 = 
ZCL_FRAME_SERVER_CLIENT_DIR
;

2826 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SE_TUNNELING
,

2827 
cmdId
, 
TRUE
, 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0,

2828 
£qNum
, 
PACKET_LEN_SE_TUNNELING_READY_DATA
, 
buf
 );

2830  
°©us
;

2831 
	}
}

2833 #ifde‡
SE_UK_EXT


2847 
ZSètus_t
 
	$z˛SE_Tu¬ñög_Síd_GëSuµTu¬ñPrŸ
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2848 
z˛CCGëSuµTu¬PrŸ_t
 *
pCmd
,

2849 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2851 
uöt8
 
buf
[
PACKET_LEN_SE_TUNNELING_GET_SUPP_PROT
];

2852 
ZSètus_t
 
°©us
;

2854 
buf
[0] = 
pCmd
->
¥ŸocﬁOff£t
;

2856 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SE_TUNNELING
,

2857 
COMMAND_SE_GET_SUPP_TUNNEL_PROTOCOLS
, 
TRUE
,

2858 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

2859 
£qNum
, 
PACKET_LEN_SE_TUNNELING_GET_SUPP_PROT
, 
buf
 );

2860  
°©us
;

2861 
	}
}

2876 
ZSètus_t
 
	$z˛SE_Tu¬ñög_Síd_SuµTu¬ñPrŸR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2877 
z˛CCSuµTu¬PrŸR•_t
 *
pCmd
,

2878 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2880 
uöt8
 *
buf
;

2881 
uöt8
 *
pBuf
;

2882 
uöt8
 
bufLí
;

2883 
uöt8
 
i
;

2884 
ZSètus_t
 
°©us
;

2886 
bufLí
 = 
PACKET_LEN_SE_TUNNELING_SUPP_PROT_RSP
 +

2887 (
pCmd
->
¥ŸocﬁCou¡
 * 
PACKET_LEN_SE_TUNNELING_PROTOCOL_PAYLOAD
);

2889 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

2890 i‡–
buf
 =
NULL
 )

2892  
ZMemEº‹
;

2895 
pBuf
 = 
buf
;

2896 *
pBuf
++ = 
pCmd
->
¥ŸocﬁLi°Comp
;

2897 *
pBuf
++ = 
pCmd
->
¥ŸocﬁCou¡
;

2899  
i
 = 0; i < 
pCmd
->
¥ŸocﬁCou¡
; i++ )

2901 *
pBuf
++ = 
	`LO_UINT16
–
pCmd
->
¥Ÿocﬁ
[
i
].
m™uÁ˘uªrCode
 );

2902 *
pBuf
++ = 
	`HI_UINT16
–
pCmd
->
¥Ÿocﬁ
[
i
].
m™uÁ˘uªrCode
 );

2903 *
pBuf
++ = 
pCmd
->
¥Ÿocﬁ
[
i
].
¥ŸocﬁId
;

2906 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SE_TUNNELING
,

2907 
COMMAND_SE_SUPP_TUNNEL_PROTOCOLS_RSP
, 
TRUE
,

2908 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

2909 
£qNum
, 
bufLí
, 
buf
 );

2911 
	`oßl_mem_‰ì
–
buf
 );

2913  
°©us
;

2914 
	}
}

2929 
ZSètus_t
 
	$z˛SE_Tu¬ñög_Síd_Tu¬ñClosuªNŸifiˇti⁄
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2930 
z˛CCTu¬ñClosuªNŸifiˇti⁄_t
 *
pCmd
,

2931 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2933 
uöt8
 
buf
[
PACKET_LEN_SE_TUNNELING_TUNNEL_CLOSURE
];

2934 
ZSètus_t
 
°©us
;

2936 
buf
[0] = 
	`LO_UINT16
–
pCmd
->
tu¬ñId
 );

2937 
buf
[1] = 
	`HI_UINT16
–
pCmd
->
tu¬ñId
 );

2939 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SE_TUNNELING
,

2940 
COMMAND_SE_TUNNEL_CLOSURE_NOTIFICATION
, 
TRUE
,

2941 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

2942 
£qNum
, 
PACKET_LEN_SE_TUNNELING_TUNNEL_CLOSURE
, 
buf
 );

2944  
°©us
;

2945 
	}
}

2949 #ifde‡
ZCL_TOU


2950 #ifde‡
SE_UK_EXT


2964 
ZSètus_t
 
	$z˛SE_Tou_Síd_PublishCÆíd¨
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2965 
z˛CCPublishCÆíd¨_t
 *
pCmd
,

2966 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

2968 
uöt8
 *
buf
;

2969 
uöt8
 *
pBuf
;

2970 
uöt16
 
bufLí
;

2971 
ZSètus_t
 
°©us
;

2973 
bufLí
 = 
PACKET_LEN_SE_PUBLISH_CALENDAR
 + 
pCmd
->
ˇÀnd¨Name
.
°rLí
;

2974 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

2975 i‡–
buf
 =
NULL
 )

2977  ( 
ZMemEº‹
 );

2980 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîCÆíd¨Id
 );

2981 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
°¨tTime
 );

2982 *
pBuf
++ = 
pCmd
->
ˇÀnd¨Ty≥
;

2983 *
pBuf
++ = 
pCmd
->
ˇÀnd¨TimeRef
;

2984 *
pBuf
++ = 
pCmd
->
ˇÀnd¨Name
.
°rLí
;

2985 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
pCmd
->
ˇÀnd¨Name
.
pSå
,ÖCmd->ˇÀnd¨Name.
°rLí
 );

2986 *
pBuf
++ = 
pCmd
->
numOfSós⁄s
;

2987 *
pBuf
++ = 
pCmd
->
numOfWìkProfûes
;

2988 *
pBuf
 = 
pCmd
->
numOfDayProfûes
;

2990 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_TOU_CALENDAR
,

2991 
COMMAND_SE_PUBLISH_CALENDAR
, 
TRUE
,

2992 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

2993 
£qNum
, 
bufLí
, 
buf
 );

2995 
	`oßl_mem_‰ì
–
buf
 );

2997  
°©us
;

2998 
	}
}

3013 
ZSètus_t
 
	$z˛SE_Tou_Síd_PublishDayProfûe
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3014 
z˛CCPublishDayProfûe_t
 *
pCmd
,

3015 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3017 
uöt8
 *
buf
;

3018 
uöt8
 *
pBuf
;

3019 
uöt16
 
bufLí
;

3020 
ZSètus_t
 
°©us
;

3021 
uöt8
 
i
;

3023 
bufLí
 = 
PACKET_LEN_SE_PUBLISH_DAY_PROFILE
 + ( 
pCmd
->
numTøns„rE¡rõs
 * 
SE_DAY_SCHEDULE_ENTRY_LEN
 );

3024 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

3025 i‡–
buf
 =
NULL
 )

3027  ( 
ZMemEº‹
 );

3030 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîCÆíd¨Id
 );

3031 *
pBuf
++ = 
pCmd
->
dayId
;

3032 *
pBuf
++ = 
pCmd
->
tŸÆNumSchedE¡
;

3033 *
pBuf
++ = 
pCmd
->
comm™dIndex
;

3035  
i
 = 0; i < 
pCmd
->
numTøns„rE¡rõs
; i++ )

3037 i‡–
pCmd
->
issuîCÆíd¨Id
 <
SE_CALENDAR_TYPE_IMPORT_EXPORT_CALENDAR
 )

3039 
z˛CCR©eE¡ry_t
 *
pR©eE¡ry
 = (z˛CCR©eE¡ry_à*)
pCmd
->
pScheduÀE¡rõs
;

3040 
pR©eE¡ry
 +
i
;

3042 *
pBuf
++ = 
	`LO_UINT16
–
pR©eE¡ry
->
°¨tTime
 );

3043 *
pBuf
++ = 
	`HI_UINT16
–
pR©eE¡ry
->
°¨tTime
 );

3044 *
pBuf
++ = 
pR©eE¡ry
->
a˘ivePri˚Tõr
;

3049 
z˛CCFrõndlyCªdôE¡ry_t
 *
pFrõndlyE¡ry
 = (z˛CCFrõndlyCªdôE¡ry_à*)
pCmd
->
pScheduÀE¡rõs
;

3050 
pFrõndlyE¡ry
 +
i
;

3052 *
pBuf
++ = 
	`LO_UINT16
–
pFrõndlyE¡ry
->
°¨tTime
 );

3053 *
pBuf
++ = 
	`HI_UINT16
–
pFrõndlyE¡ry
->
°¨tTime
 );

3054 *
pBuf
++ = 
pFrõndlyE¡ry
->
‰õndCªdôE«bÀ
;

3058 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_TOU_CALENDAR
,

3059 
COMMAND_SE_PUBLISH_DAY_PROFILE
, 
TRUE
,

3060 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

3061 
£qNum
, 
bufLí
, 
buf
 );

3063 
	`oßl_mem_‰ì
–
buf
 );

3065  
°©us
;

3066 
	}
}

3081 
ZSètus_t
 
	$z˛SE_Tou_Síd_PublishWìkProfûe
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3082 
z˛CCPublishWìkProfûe_t
 *
pCmd
,

3083 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3085 
uöt8
 *
buf
;

3086 
uöt8
 *
pBuf
;

3087 
ZSètus_t
 
°©us
;

3089 
buf
 = 
	`oßl_mem_Æloc
–
PACKET_LEN_SE_PUBLISH_WEEK_PROFILE
 );

3090 i‡–
buf
 =
NULL
 )

3092  ( 
ZMemEº‹
 );

3095 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîCÆíd¨Id
 );

3096 *
pBuf
++ = 
pCmd
->
wìkId
;

3097 *
pBuf
++ = 
pCmd
->
dayIdRefM⁄day
;

3098 *
pBuf
++ = 
pCmd
->
dayIdRefTue°day
;

3099 *
pBuf
++ = 
pCmd
->
dayIdRefWed√sday
;

3100 *
pBuf
++ = 
pCmd
->
dayIdRefThursday
;

3101 *
pBuf
++ = 
pCmd
->
dayIdRefFriday
;

3102 *
pBuf
++ = 
pCmd
->
dayIdRefS©urday
;

3103 *
pBuf
 = 
pCmd
->
dayIdRefSunday
;

3105 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_TOU_CALENDAR
,

3106 
COMMAND_SE_PUBLISH_WEEK_PROFILE
, 
TRUE
,

3107 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

3108 
£qNum
, 
PACKET_LEN_SE_PUBLISH_WEEK_PROFILE
, 
buf
 );

3110 
	`oßl_mem_‰ì
–
buf
 );

3112  
°©us
;

3113 
	}
}

3128 
ZSètus_t
 
	$z˛SE_Tou_Síd_PublishSós⁄s
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3129 
z˛CCPublishSós⁄s_t
 *
pCmd
,

3130 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3132 
uöt8
 *
buf
;

3133 
uöt8
 *
pBuf
;

3134 
uöt16
 
bufLí
;

3135 
ZSètus_t
 
°©us
;

3136 
uöt8
 
i
;

3138 
bufLí
 = 
PACKET_LEN_SE_PUBLISH_SEASONS
 + ( 
pCmd
->
numTøns„rE¡rõs
 * 
SE_SEASON_ENTRY_LEN
 );

3139 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

3140 i‡–
buf
 =
NULL
 )

3142  ( 
ZMemEº‹
 );

3145 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîCÆíd¨Id
 );

3146 *
pBuf
++ = 
pCmd
->
comm™dIndex
;

3149  
i
 = 0; i < 
pCmd
->
numTøns„rE¡rõs
; i++ )

3151 
z˛CCSós⁄E¡ry_t
 *
pE¡ry
 = &–
pCmd
->
pSós⁄E¡ry
[
i
] );

3153 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pE¡ry
->
£as⁄SèπD©e
 );

3154 *
pBuf
++ = 
pE¡ry
->
wìkIdRef
;

3157 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_TOU_CALENDAR
,

3158 
COMMAND_SE_PUBLISH_SEASONS
, 
TRUE
,

3159 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

3160 
£qNum
, 
bufLí
, 
buf
 );

3162 
	`oßl_mem_‰ì
–
buf
 );

3164  
°©us
;

3165 
	}
}

3180 
ZSètus_t
 
	$z˛SE_Tou_Síd_PublishS≥cülDays
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3181 
z˛CCPublishS≥cülDays_t
 *
pCmd
,

3182 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3184 
uöt8
 *
buf
;

3185 
uöt8
 *
pBuf
;

3186 
uöt16
 
bufLí
;

3187 
ZSètus_t
 
°©us
;

3188 
uöt8
 
i
;

3190 
bufLí
 = 
PACKET_LEN_SE_PUBLISH_SPECIAL_DAYS
 + ( 
pCmd
->
numTøns„rE¡rõs
 * 
SE_SPECIAL_DAY_ENTRY_LEN
 );

3191 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

3192 i‡–
buf
 =
NULL
 )

3194  ( 
ZMemEº‹
 );

3197 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîEvítId
 );

3198 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
°¨tTime
 );

3199 *
pBuf
++ = 
pCmd
->
ˇÀnd¨Ty≥
;

3200 *
pBuf
++ = 
pCmd
->
tŸÆNumS≥cülDays
;

3201 *
pBuf
++ = 
pCmd
->
comm™dIndex
;

3203  
i
 = 0; i < 
pCmd
->
numTøns„rE¡rõs
; i++ )

3205 
z˛CCS≥cülDayE¡ry_t
 *
pE¡ry
 = &–
pCmd
->
pS≥cülDayE¡ry
[
i
] );

3207 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pE¡ry
->
•ecülDayD©e
 );

3208 *
pBuf
++ = 
pE¡ry
->
dayIdRef
;

3211 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_TOU_CALENDAR
,

3212 
COMMAND_SE_PUBLISH_SPECIAL_DAYS
, 
TRUE
,

3213 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

3214 
£qNum
, 
bufLí
, 
buf
 );

3216 
	`oßl_mem_‰ì
–
buf
 );

3218  
°©us
;

3219 
	}
}

3234 
ZSètus_t
 
	$z˛SE_Tou_Síd_GëCÆíd¨
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3235 
z˛CCGëCÆíd¨_t
 *
pCmd
,

3236 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3238 
uöt8
 
buf
[
PACKET_LEN_SE_GET_CALENDAR
];

3239 
ZSètus_t
 
°©us
;

3241 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
°¨tTime
 );

3242 
buf
[4] = 
pCmd
->
numOfCÆíd¨s
;

3243 
buf
[5] = 
pCmd
->
ˇÀnd¨Ty≥
;

3245 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_TOU_CALENDAR
,

3246 
COMMAND_SE_GET_CALENDAR
, 
TRUE
,

3247 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

3248 
£qNum
, 
PACKET_LEN_SE_GET_CALENDAR
, 
buf
 );

3250  
°©us
;

3251 
	}
}

3266 
ZSètus_t
 
	$z˛SE_Tou_Síd_GëDayProfûes
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3267 
z˛CCGëDayProfûes_t
 *
pCmd
,

3268 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3270 
uöt8
 
buf
[
PACKET_LEN_SE_GET_DAY_PROFILE
];

3271 
ZSètus_t
 
°©us
;

3273 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîCÆíd¨Id
 );

3275 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_TOU_CALENDAR
,

3276 
COMMAND_SE_GET_DAY_PROFILES
, 
TRUE
,

3277 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

3278 
£qNum
, 
PACKET_LEN_SE_GET_DAY_PROFILE
, 
buf
 );

3280  
°©us
;

3281 
	}
}

3296 
ZSètus_t
 
	$z˛SE_Tou_Síd_GëWìkProfûes
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3297 
z˛CCGëWìkProfûes_t
 *
pCmd
,

3298 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3300 
uöt8
 
buf
[
PACKET_LEN_SE_GET_WEEK_PROFILE
];

3301 
ZSètus_t
 
°©us
;

3303 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîCÆíd¨Id
 );

3305 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_TOU_CALENDAR
,

3306 
COMMAND_SE_GET_WEEK_PROFILES
, 
TRUE
,

3307 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

3308 
£qNum
, 
PACKET_LEN_SE_GET_WEEK_PROFILE
, 
buf
 );

3310  
°©us
;

3311 
	}
}

3326 
ZSètus_t
 
	$z˛SE_Tou_Síd_GëSós⁄s
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3327 
z˛CCGëSós⁄s_t
 *
pCmd
,

3328 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3330 
uöt8
 
buf
[
PACKET_LEN_SE_GET_SEASONS
];

3331 
ZSètus_t
 
°©us
;

3333 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
issuîCÆíd¨Id
 );

3335 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_TOU_CALENDAR
,

3336 
COMMAND_SE_GET_SEASONS
, 
TRUE
,

3337 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

3338 
£qNum
, 
PACKET_LEN_SE_GET_SEASONS
, 
buf
 );

3340  
°©us
;

3341 
	}
}

3356 
ZSètus_t
 
	$z˛SE_Tou_Síd_GëS≥cülDays
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3357 
z˛CCGëS≥cülDays_t
 *
pCmd
,

3358 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3360 
uöt8
 
buf
[
PACKET_LEN_SE_GET_SPECIAL_DAYS
];

3361 
ZSètus_t
 
°©us
;

3363 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
°¨tTime
 );

3364 
buf
[4] = 
pCmd
->
numOfEvíts
;

3365 
buf
[5] = 
pCmd
->
ˇÀnd¨Ty≥
;

3367 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_TOU_CALENDAR
,

3368 
COMMAND_SE_GET_SPECIAL_DAYS
, 
TRUE
,

3369 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

3370 
£qNum
, 
PACKET_LEN_SE_GET_SPECIAL_DAYS
, 
buf
 );

3372  
°©us
;

3373 
	}
}

3377 #ifde‡
ZCL_DEVICE_MGMT


3378 #ifde‡
SE_UK_EXT


3391 
ZSètus_t
 
	$z˛SE_Devi˚Mgmt_Síd_GëCh™geTí™cy
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3392 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3394  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_DEVICE_MGMT
,

3395 
COMMAND_SE_GET_CHANGE_OF_TENANCY
, 
TRUE
,

3396 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

3397 
£qNum
, 0, 
NULL
 );

3398 
	}
}

3412 
ZSètus_t
 
	$z˛SE_Devi˚Mgmt_Síd_GëCh™geSuµlõr
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3413 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3415  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_DEVICE_MGMT
,

3416 
COMMAND_SE_GET_CHANGE_OF_SUPPLIER
, 
TRUE
,

3417 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

3418 
£qNum
, 0, 
NULL
 );

3419 
	}
}

3433 
ZSètus_t
 
	$z˛SE_Devi˚Mgmt_Síd_GëCh™geSuµly
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3434 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3436  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_DEVICE_MGMT
,

3437 
COMMAND_SE_GET_CHANGE_SUPPLY
, 
TRUE
,

3438 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

3439 
£qNum
, 0, 
NULL
 );

3440 
	}
}

3455 
ZSètus_t
 
	$z˛SE_Devi˚Mgmt_Síd_SuµlySètusRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3456 
z˛CCSuµlySètusRe•⁄£_t
 *
pCmd
,

3457 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3459 
uöt8
 *
buf
;

3460 
uöt8
 *
pBuf
;

3461 
ZSètus_t
 
°©us
;

3463 
buf
 = 
	`oßl_mem_Æloc
–
PACKET_LEN_SE_SUPPLY_STATUS_RESPONSE
 );

3464 i‡–
buf
 =
NULL
 )

3466  ( 
ZMemEº‹
 );

3469 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
suµlõrId
 );

3470 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
issuîEvítId
 );

3471 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
im∂emíèti⁄D©eTime
 );

3472 *
pBuf
 = 
pCmd
->
suµlySètus
;

3474 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_DEVICE_MGMT
,

3475 
COMMAND_SE_SUPPLY_STATUS_RESPONSE
, 
TRUE
,

3476 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

3477 
£qNum
, 
PACKET_LEN_SE_SUPPLY_STATUS_RESPONSE
, 
buf
 );

3479 
	`oßl_mem_‰ì
–
buf
 );

3481  
°©us
;

3482 
	}
}

3497 
ZSètus_t
 
	$z˛SE_Devi˚Mgmt_Síd_GëPassw‹d
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3498 
z˛CCGëPassw‹d_t
 *
pCmd
,

3499 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3501  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_DEVICE_MGMT
,

3502 
COMMAND_SE_GET_PASSWORD
, 
TRUE
,

3503 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

3504 
£qNum
, 
PACKET_LEN_SE_GET_PASSWORD
,

3505 &(
pCmd
->
∑ssw‹dLevñ
) );

3506 
	}
}

3521 
ZSètus_t
 
	$z˛SE_Devi˚Mgmt_Síd_PublishCh™geTí™cy
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3522 
z˛CCPublishCh™geTí™cy_t
 *
pCmd
,

3523 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3525 
uöt8
 *
buf
;

3526 
uöt8
 *
pBuf
;

3527 
uöt16
 
bufLí
;

3528 
ZSètus_t
 
°©us
;

3530 
bufLí
 = 
PACKET_LEN_SE_PUBLISH_CHANGE_OF_TENANCY
 + 
pCmd
->
sig«tuª
.
°rLí
;

3531 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

3532 i‡–
buf
 =
NULL
 )

3534  ( 
ZMemEº‹
 );

3537 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
suµlõrId
 );

3538 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
evítId
 );

3539 *
pBuf
++ = 
pCmd
->
èriffTy≥
;

3540 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
im∂emíèti⁄D©eTime
 );

3541 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
¥›TíícyCh™geCål
 );

3542 *
pBuf
++ = 
pCmd
->
sig«tuª
.
°rLí
;

3543 (Ë
	`oßl_mem˝y
–
pBuf
, 
pCmd
->
sig«tuª
.
pSå
,ÖCmd->sig«tuª.
°rLí
 );

3545 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_DEVICE_MGMT
,

3546 
COMMAND_SE_PUBLISH_CHANGE_OF_TENANCY
, 
TRUE
,

3547 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

3548 
£qNum
, 
bufLí
, 
buf
 );

3549 
	`oßl_mem_‰ì
–
buf
 );

3551  
°©us
;

3552 
	}
}

3567 
ZSètus_t
 
	$z˛SE_Devi˚Mgmt_Síd_PublishCh™geSuµlõr
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3568 
z˛CCPublishCh™geSuµlõr_t
 *
pCmd
,

3569 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3571 
uöt8
 *
buf
;

3572 
uöt8
 *
pBuf
;

3573 
uöt16
 
bufLí
;

3574 
ZSètus_t
 
°©us
;

3577 
bufLí
 = 
PACKET_LEN_SE_PUBLISH_CHANGE_OF_SUPPLIER
 +

3578 
pCmd
->
suµlõrIdName
.
°rLí
 +

3579 
pCmd
->
sig«tuª
.
°rLí
;

3581 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

3582 i‡–
buf
 =
NULL
 )

3584  ( 
ZMemEº‹
 );

3587 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
suµlõrId
 );

3588 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
evítId
 );

3589 *
pBuf
++ = 
pCmd
->
èriffTy≥
;

3590 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
¥›SuµlõrId
 );

3591 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
suµIdIm∂emD©eTime
 );

3592 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
suµlõrCh™geCål
 );

3593 *
pBuf
++ = 
pCmd
->
suµlõrIdName
.
°rLí
;

3594 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
pCmd
->
suµlõrIdName
.
pSå
,ÖCmd->suµlõrIdName.
°rLí
 );

3595 *
pBuf
++ = 
pCmd
->
sig«tuª
.
°rLí
;

3596 (Ë
	`oßl_mem˝y
–
pBuf
, 
pCmd
->
sig«tuª
.
pSå
,ÖCmd->sig«tuª.
°rLí
 );

3598 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_DEVICE_MGMT
,

3599 
COMMAND_SE_PUBLISH_CHANGE_OF_SUPPLIER
, 
TRUE
,

3600 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

3601 
£qNum
, 
bufLí
, 
buf
 );

3602 
	`oßl_mem_‰ì
–
buf
 );

3604  
°©us
;

3605 
	}
}

3620 
ZSètus_t
 
	$z˛SE_Devi˚Mgmt_Síd_Ch™geSuµly
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3621 
z˛CCCh™geSuµly_t
 *
pCmd
,

3622 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3624 
uöt8
 *
buf
;

3625 
uöt8
 *
pBuf
;

3626 
uöt16
 
bufLí
;

3627 
ZSètus_t
 
°©us
;

3629 
bufLí
 = 
PACKET_LEN_SE_CHANGE_SUPPLY
 + 
pCmd
->
sig«tuª
.
°rLí
;

3630 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

3631 i‡–
buf
 =
NULL
 )

3633  ( 
ZMemEº‹
 );

3636 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
pCmd
->
suµlõrId
 );

3637 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
evítId
 );

3638 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
ªque°D©eTime
 );

3639 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
pCmd
->
im∂emíèti⁄D©eTime
 );

3640 *
pBuf
++ = 
pCmd
->
¥›o£dSuµlySètus
;

3641 *
pBuf
++ = 
pCmd
->
‹igIdSuµlyC⁄åﬁBôs
;

3642 *
pBuf
++ = 
pCmd
->
sig«tuª
.
°rLí
;

3643 (Ë
	`oßl_mem˝y
–
pBuf
, 
pCmd
->
sig«tuª
.
pSå
,ÖCmd->sig«tuª.
°rLí
 );

3645 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_DEVICE_MGMT
,

3646 
COMMAND_SE_CHANGE_SUPPLY
, 
TRUE
,

3647 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

3648 
£qNum
, 
bufLí
, 
buf
 );

3649 
	`oßl_mem_‰ì
–
buf
 );

3651  
°©us
;

3652 
	}
}

3667 
ZSètus_t
 
	$z˛SE_Devi˚Mgmt_Síd_Ch™gePassw‹d
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3668 
z˛CCCh™gePassw‹d_t
 *
pCmd
,

3669 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3671 
uöt8
 *
buf
;

3672 
uöt16
 
bufLí
;

3673 
ZSètus_t
 
°©us
;

3675 
bufLí
 = 
PACKET_LEN_SE_CHANGE_PASSWORD
 + 
pCmd
->
∑ssw‹d
.
°rLí
;

3676 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

3677 i‡–
buf
 =
NULL
 )

3679  ( 
ZMemEº‹
 );

3682 
buf
[0] = 
pCmd
->
∑ssw‹dLevñ
;

3683 
buf
[1] = 
pCmd
->
∑ssw‹d
.
°rLí
;

3684 (Ë
	`oßl_mem˝y
–&(
buf
[2]), 
pCmd
->
∑ssw‹d
.
pSå
,ÖCmd->∑ssw‹d.
°rLí
 );

3686 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_DEVICE_MGMT
,

3687 
COMMAND_SE_CHANGE_PASSWORD
, 
TRUE
,

3688 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

3689 
£qNum
, 
bufLí
, 
buf
 );

3690 
	`oßl_mem_‰ì
–
buf
 );

3692  
°©us
;

3693 
	}
}

3708 
ZSètus_t
 
	$z˛SE_Devi˚Mgmt_Síd_LoˇlCh™geSuµly
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3709 
z˛CCLoˇlCh™geSuµly_t
 *
pCmd
,

3710 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

3712  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_DEVICE_MGMT
,

3713 
COMMAND_SE_LOCAL_CHANGE_SUPPLY
, 
TRUE
,

3714 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

3715 
£qNum
, 
PACKET_LEN_SE_LOCAL_CHANGE_SUPPLY
,

3716 &(
pCmd
->
¥›SuµlySètus
) );

3717 
	}
}

3731 
ZSètus_t
 
	$z˛SE_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛SE_AµCÆlbacks_t
 *
ˇŒbacks
 )

3733 
z˛SECBRec_t
 *
pNewIãm
;

3734 
z˛SECBRec_t
 *
pLo›
;

3737 i‡–!
z˛SEPlugöRegi°ed
 )

3739 #i‚de‡
SE_UK_EXT


3740 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_SE_PRICING
,

3741 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

3742 
z˛SE_HdlIncomög
 );

3744 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_SE_PRICING
,

3745 
ZCL_CLUSTER_ID_SE_DEVICE_MGMT
,

3746 
z˛SE_HdlIncomög
 );

3748 
z˛SEPlugöRegi°ed
 = 
TRUE
;

3752 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛SECBRec_t
 ) );

3753 i‡–
pNewIãm
 =
NULL
 )

3755  ( 
ZMemEº‹
 );

3758 
pNewIãm
->
√xt
 = (
z˛SECBRec_t
 *)
NULL
;

3759 
pNewIãm
->
ídpoöt
 =Éndpoint;

3760 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

3763 i‡–
z˛SECBs
 =
NULL
 )

3765 
z˛SECBs
 = 
pNewIãm
;

3770 
pLo›
 = 
z˛SECBs
;

3771  
pLo›
->
√xt
 !
NULL
 )

3773 
pLo›
 =ÖLo›->
√xt
;

3777 
pLo›
->
√xt
 = 
pNewIãm
;

3780  ( 
ZSuc˚ss
 );

3781 
	}
}

3783 #i‡
deföed
–
ZCL_LOAD_CONTROL
 ) || deföed–
ZCL_SIMPLE_METERING
 ) || \

3784 
deföed
–
ZCL_PRICING
 ) || deföed–
ZCL_MESSAGE
 ) || \

3785 
deföed
–
ZCL_PREPAYMENT
 ) || deföed–
ZCL_TUNNELING
 ) || \

3786 
deföed
–
ZCL_TOU
 ) || 
	$deföed
–
ZCL_DEVICE_MGMT
 )

3796 
z˛SE_AµCÆlbacks_t
 *
	$z˛SE_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

3798 
z˛SECBRec_t
 *
pCBs
;

3800 
pCBs
 = 
z˛SECBs
;

3801  
pCBs
 )

3803 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

3805  ( 
pCBs
->
CBs
 );

3807 
pCBs
 =ÖCBs->
√xt
;

3809  ( (
z˛SE_AµCÆlbacks_t
 *)
NULL
 );

3810 
	}
}

3824 
ZSètus_t
 
	$z˛SE_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

3826 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

3828 #i‡
	`deföed
 ( 
INTER_PAN
 )

3829 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) &&

3830 !
	`INTER_PAN_CLUSTER
(
pInMsg
->
msg
->
˛u°îId
) )

3832  ( 
°©
 );

3835 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

3838 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

3840 
°©
 = 
	`z˛SE_HdlInS≥cificComm™ds
–
pInMsg
 );

3845 
°©
 = 
ZFaûuª
;

3851 
°©
 = 
ZFaûuª
;

3854  ( 
°©
 );

3855 
	}
}

3867 
ZSètus_t
 
	$z˛SE_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

3869 
ZSètus_t
 
°©
;

3870 
z˛SE_AµCÆlbacks_t
 *
pCBs
;

3874 #i‡
	`deföed
–
ZCL_LOAD_CONTROL
 ) || deföed–
ZCL_SIMPLE_METERING
 ) || \

3875 
	`deföed
–
ZCL_PRICING
 ) || deföed–
ZCL_MESSAGE
 ) || \

3876 
	`deföed
–
ZCL_PREPAYMENT
 ) || deföed–
ZCL_TUNNELING
 ) || \

3877 
	`deföed
–
ZCL_TOU
 ) || deföed–
ZCL_DEVICE_MGMT
 )

3879 
pCBs
 = 
	`z˛SE_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

3880 i‡–
pCBs
 =
NULL
 )

3882  ( 
ZFaûuª
 );

3886  
pInMsg
->
msg
->
˛u°îId
 )

3888 #ifde‡
ZCL_SIMPLE_METERING


3889 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
:

3890 
°©
 = 
	`z˛SE_Pro˚ssInSim∂eMëîögCmds
–
pInMsg
, 
pCBs
 );

3894 #ifde‡
ZCL_PRICING


3895 
ZCL_CLUSTER_ID_SE_PRICING
:

3896 
°©
 = 
	`z˛SE_Pro˚ssInPricögCmds
–
pInMsg
, 
pCBs
 );

3900 #ifde‡
ZCL_MESSAGE


3901 
ZCL_CLUSTER_ID_SE_MESSAGE
:

3902 
°©
 = 
	`z˛SE_Pro˚ssInMesßgeCmds
–
pInMsg
, 
pCBs
 );

3906 #ifde‡
ZCL_LOAD_CONTROL


3907 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
:

3908 
°©
 = 
	`z˛SE_Pro˚ssInLﬂdC⁄åﬁCmds
–
pInMsg
, 
pCBs
 );

3912 #ifde‡
ZCL_TUNNELING


3913 
ZCL_CLUSTER_ID_SE_SE_TUNNELING
:

3914 
°©
 = 
	`z˛SE_Pro˚ssInTu¬ñögCmds
–
pInMsg
, 
pCBs
 );

3918 #ifde‡
ZCL_PREPAYMENT


3919 
ZCL_CLUSTER_ID_SE_PREPAYMENT
:

3920 
°©
 = 
	`z˛SE_Pro˚ssInPª∑ymítCmds
–
pInMsg
, 
pCBs
 );

3924 #ifde‡
SE_UK_EXT


3925 #ifde‡
ZCL_TOU


3926 
ZCL_CLUSTER_ID_SE_TOU_CALENDAR
:

3927 
°©
 = 
	`z˛SE_Pro˚ssInTouCmds
–
pInMsg
, 
pCBs
 );

3931 #ifde‡
ZCL_DEVICE_MGMT


3932 
ZCL_CLUSTER_ID_SE_DEVICE_MGMT
:

3933 
°©
 = 
	`z˛SE_Pro˚ssInDevi˚MgmtCmds
–
pInMsg
, 
pCBs
 );

3939 
°©
 = 
ZFaûuª
;

3943  ( 
°©
 );

3944 
	}
}

3946 #ifde‡
ZCL_SIMPLE_METERING


3958 
ZSètus_t
 
	$z˛SE_Pro˚ssInSim∂eMëîögCmds
–
z˛Incomög_t
 *
pInMsg
,

3959 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

3961 
ZSètus_t
 
°©
;

3963 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

3966  
pInMsg
->
hdr
.
comm™dID
 )

3968 
COMMAND_SE_GET_PROFILE_CMD
:

3969 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëProfûeCmd
–
pInMsg
, 
pCBs
 );

3972 
COMMAND_SE_REQ_MIRROR_RSP
:

3973 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqMúr‹R•
–
pInMsg
, 
pCBs
 );

3976 
COMMAND_SE_MIRROR_REM_RSP
:

3977 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹RemR•
–
pInMsg
, 
pCBs
 );

3980 
COMMAND_SE_REQ_FAST_POLL_MODE_CMD
:

3981 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqFa°PﬁlModeCmd
–
pInMsg
, 
pCBs
 );

3984 #ifde‡
SE_UK_EXT


3985 
COMMAND_SE_GET_SNAPSHOT_CMD
:

3986 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëS«pshŸCmd
–
pInMsg
, 
pCBs
 );

3989 
COMMAND_SE_TAKE_SNAPSHOT_CMD
:

3990 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_TakeS«pshŸCmd
–
pInMsg
, 
pCBs
 );

3993 
COMMAND_SE_MIRROR_REPORT_ATTR_RSP
:

3994 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹Rï‹tAârR•
–
pInMsg
, 
pCBs
 );

3999 
°©
 = 
ZFaûuª
;

4006  
pInMsg
->
hdr
.
comm™dID
 )

4008 
COMMAND_SE_GET_PROFILE_RSP
:

4009 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëProfûeR•
–
pInMsg
, 
pCBs
 );

4012 
COMMAND_SE_REQ_MIRROR_CMD
:

4013 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqMúr‹Cmd
–
pInMsg
, 
pCBs
 );

4016 
COMMAND_SE_MIRROR_REM_CMD
:

4017 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹RemCmd
–
pInMsg
, 
pCBs
 );

4020 
COMMAND_SE_REQ_FAST_POLL_MODE_RSP
:

4021 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqFa°PﬁlModeR•
–
pInMsg
, 
pCBs
 );

4024 #ifde‡
SE_UK_EXT


4025 
COMMAND_SE_GET_SNAPSHOT_RSP
:

4026 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëS«pshŸR•
–
pInMsg
, 
pCBs
 );

4031 
°©
 = 
ZFaûuª
;

4036  ( 
°©
 );

4037 
	}
}

4054 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëProfûeCmd
–
z˛Incomög_t
 *
pInMsg
,

4055 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4057 i‡–
pCBs
->
p‚Sim∂eMëî_GëProfûeCmd
 )

4059 
z˛CCGëProfûeCmd_t
 
cmd
;

4061 
cmd
.
ch™√l
 = 
pInMsg
->
pD©a
[0];

4062 
cmd
.
ídTime
 = 
	`oßl_buûd_uöt32
–&
pInMsg
->
pD©a
[1], 4 );

4063 
cmd
.
numOfPîiods
 = 
pInMsg
->
pD©a
[5];

4066 i‡–
cmd
.
ch™√l
 > 
MAX_INTERVAL_CHANNEL_SE_SIMPLE_METERING
 )

4068  
ZCL_STATUS_INVALID_FIELD
;

4070 
pCBs
->
	`p‚Sim∂eMëî_GëProfûeCmd
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4071 
pInMsg
->
hdr
.
å™sSeqNum
 );

4073  
ZCL_STATUS_CMD_HAS_RSP
;

4076  
ZFaûuª
;

4077 
	}
}

4093 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëProfûeR•
–
z˛Incomög_t
 *
pInMsg
,

4094 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4096 i‡–
pCBs
->
p‚Sim∂eMëî_GëProfûeR•
 )

4098 
uöt24
 *
pBuf24
;

4099 
uöt8
 *
pBuf8
;

4100 
uöt8
 
i
;

4101 
z˛CCGëProfûeR•_t
 
cmd
;

4103 
cmd
.
ídTime
 = 
	`oßl_buûd_uöt32
–&
pInMsg
->
pD©a
[0], 4 );

4104 
cmd
.
°©us
 = 
pInMsg
->
pD©a
[4];

4105 
cmd
.
¥ofûeI¡îvÆPîiod
 = 
pInMsg
->
pD©a
[5];

4106 
cmd
.
numOfPîiodDñivîed
 = 
pInMsg
->
pD©a
[6];

4109 i‡–
cmd
.
¥ofûeI¡îvÆPîiod
 > 
MAX_PROFILE_INTERVAL_PERIOD_SE_SIMPLE_METERING
 )

4111  
ZCL_STATUS_INVALID_FIELD
;

4115 
pBuf8
 = &
pInMsg
->
pD©a
[7];

4118 
pBuf24
 = (
uöt24
*)
	`oßl_mem_Æloc
–
cmd
.
numOfPîiodDñivîed
 *

4119 (
uöt24
) );

4120 i‡–
pBuf24
 =
NULL
 )

4122  
ZCL_STATUS_SOFTWARE_FAILURE
;

4125 
cmd
.
öãrvÆs
 = 
pBuf24
;

4126  
i
 = 0; i < 
cmd
.
numOfPîiodDñivîed
; i++ )

4128 *(
pBuf24
++Ë
	`oßl_buûd_uöt32
–
pBuf8
, 3 );

4129 
pBuf8
 += 3;

4132 
pCBs
->
	`p‚Sim∂eMëî_GëProfûeR•
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4133 
pInMsg
->
hdr
.
å™sSeqNum
 );

4135 
	`oßl_mem_‰ì
–
cmd
.
öãrvÆs
 );

4137  
ZSuc˚ss
;

4140  
ZFaûuª
;

4141 
	}
}

4154 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqMúr‹Cmd
–
z˛Incomög_t
 *
pInMsg
,

4155 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4157 i‡–
pCBs
->
p‚Sim∂eMëî_ReqMúr‹Cmd
 )

4159 
pCBs
->
	`p‚Sim∂eMëî_ReqMúr‹Cmd
–&(
pInMsg
->
msg
->
§cAddr
),

4160 
pInMsg
->
hdr
.
å™sSeqNum
 );

4161  
ZSuc˚ss
;

4164  
ZFaûuª
;

4165 
	}
}

4178 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqMúr‹R•
–
z˛Incomög_t
 *
pInMsg
,

4179 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4181 i‡–
pCBs
->
p‚Sim∂eMëî_ReqMúr‹R•
 )

4183 
z˛CCReqMúr‹R•_t
 
cmd
;

4185 
cmd
.
ídpoötId
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

4187 
pCBs
->
	`p‚Sim∂eMëî_ReqMúr‹R•
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4188 
pInMsg
->
hdr
.
å™sSeqNum
 );

4189  
ZSuc˚ss
 ;

4192  
ZFaûuª
;

4193 
	}
}

4206 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹RemCmd
–
z˛Incomög_t
 *
pInMsg
,

4207 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4209 i‡–
pCBs
->
p‚Sim∂eMëî_Múr‹RemCmd
 )

4211 
pCBs
->
	`p‚Sim∂eMëî_Múr‹RemCmd
–&(
pInMsg
->
msg
->
§cAddr
),

4212 
pInMsg
->
hdr
.
å™sSeqNum
 );

4213  
ZSuc˚ss
;

4216  
ZFaûuª
;

4217 
	}
}

4230 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹RemR•
–
z˛Incomög_t
 *
pInMsg
,

4231 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4233 i‡–
pCBs
->
p‚Sim∂eMëî_Múr‹RemR•
 )

4235 
z˛CCMúr‹RemR•_t
 
cmd
;

4237 
cmd
.
ídpoötId
 = 
pInMsg
->
pD©a
[0] | ( (
uöt16
)pInMsg->pData[1] << 8 );

4239 
pCBs
->
	`p‚Sim∂eMëî_Múr‹RemR•
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4240 
pInMsg
->
hdr
.
å™sSeqNum
 );

4241  
ZSuc˚ss
;

4244  
ZFaûuª
;

4245 
	}
}

4260 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqFa°PﬁlModeCmd
–
z˛Incomög_t
 *
pInMsg
,

4261 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4263 i‡–
pCBs
->
p‚Sim∂eMëî_ReqFa°PﬁlModeCmd
 )

4265 
z˛CCReqFa°PﬁlModeCmd_t
 
cmd
;

4266 
z˛AârRec_t
 
©åRec
;

4267 
uöt8
 
Á°PﬁlUpd©ePîiodAâr
 = 0;

4270 i‡–
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
,

4271 
ATTRID_SE_FAST_POLL_UPDATE_PERIOD
, &
©åRec
 ) )

4273 
	`z˛RódAârD©a
–(
uöt8
 *)&
Á°PﬁlUpd©ePîiodAâr
, &
©åRec
, 
NULL
 );

4277 i‡(–
Á°PﬁlUpd©ePîiodAâr
 > 0 ) && (
pInMsg
->
pD©a
[0] < fastPollUpdatePeriodAttr))

4280 
cmd
.
Á°PﬁlUpd©ePîiod
 = 
Á°PﬁlUpd©ePîiodAâr
;

4285 
cmd
.
Á°PﬁlUpd©ePîiod
 = 
pInMsg
->
pD©a
[0];

4289 
cmd
.
duøti⁄
 = 
	`MIN
(
pInMsg
->
pD©a
[1], 
MAX_DURATION_IN_MINUTES_FAST_POLL_MODE
);

4291 
pCBs
->
	`p‚Sim∂eMëî_ReqFa°PﬁlModeCmd
(&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4292 
pInMsg
->
hdr
.
å™sSeqNum
 );

4294  
ZCL_STATUS_CMD_HAS_RSP
;

4297  
ZFaûuª
;

4298 
	}
}

4311 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqFa°PﬁlModeR•
–
z˛Incomög_t
 *
pInMsg
,

4312 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4314 i‡–
pCBs
->
p‚Sim∂eMëî_ReqFa°PﬁlModeR•
 )

4316 
z˛CCReqFa°PﬁlModeR•_t
 
cmd
;

4318 
cmd
.
≠∂õdUpd©ePîiod
 = 
pInMsg
->
pD©a
[0];

4320 
cmd
.
Á°PﬁlModeEndTime
 = 
	`oßl_buûd_uöt32
–&
pInMsg
->
pD©a
[1], 4 );

4322 
pCBs
->
	`p‚Sim∂eMëî_ReqFa°PﬁlModeR•
(&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4323 
pInMsg
->
hdr
.
å™sSeqNum
 );

4325  
ZSuc˚ss
;

4328  
ZFaûuª
;

4329 
	}
}

4331 #ifde‡
SE_UK_EXT


4344 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëS«pshŸCmd
–
z˛Incomög_t
 *
pInMsg
,

4345 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4347 i‡–
pCBs
->
p‚Sim∂eMëî_GëS«pshŸCmd
 )

4349 
z˛CCReqGëS«pshŸCmd_t
 
cmd
;

4351 
cmd
.
SèπTime
 = 
	`oßl_buûd_uöt32
–&
pInMsg
->
pD©a
[0], 4 );

4352 
cmd
.
NumbîOfS«pshŸs
 = 
pInMsg
->
pD©a
[4];

4353 
cmd
.
S«pshŸCau£
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[5],ÖInMsg->pData[6] );

4355 
pCBs
->
	`p‚Sim∂eMëî_GëS«pshŸCmd
(&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4356 
pInMsg
->
hdr
.
å™sSeqNum
 );

4358  
ZCL_STATUS_CMD_HAS_RSP
;

4361  
ZFaûuª
;

4362 
	}
}

4375 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëS«pshŸR•
–
z˛Incomög_t
 *
pInMsg
,

4376 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4378 i‡–
pCBs
->
p‚Sim∂eMëî_GëS«pshŸR•
 )

4380 
z˛CCReqGëS«pshŸR•_t
 
cmd
;

4382 
cmd
.
IssuîEvítID
 = 
	`oßl_buûd_uöt32
–&
pInMsg
->
pD©a
[0], 4 );

4383 
cmd
.
S«pshŸTime
 = 
	`oßl_buûd_uöt32
–&
pInMsg
->
pD©a
[4], 4 );

4384 
cmd
.
Comm™dIndex
 = 
pInMsg
->
pD©a
[8];

4385 
cmd
.
S«pshŸCau£
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[9],ÖInMsg->pData[10] );

4386 
cmd
.
S«pshŸPaylﬂdTy≥
 = 
pInMsg
->
pD©a
[11];

4388 
cmd
.
pS«pshŸPaylﬂd
 = 
pInMsg
->
pD©a
 + 12;

4390 
pCBs
->
	`p‚Sim∂eMëî_GëS«pshŸR•
(&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4391 
pInMsg
->
hdr
.
å™sSeqNum
 );

4393  
ZSuc˚ss
;

4396  
ZFaûuª
;

4397 
	}
}

4410 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_TakeS«pshŸCmd
–
z˛Incomög_t
 *
pInMsg
,

4411 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4413 i‡–
pCBs
->
p‚Sim∂eMëî_TakeS«pshŸCmd
 )

4415 
pCBs
->
	`p‚Sim∂eMëî_TakeS«pshŸCmd
–&(
pInMsg
->
msg
->
§cAddr
),

4416 
pInMsg
->
hdr
.
å™sSeqNum
 );

4418  
ZSuc˚ss
;

4421  
ZFaûuª
;

4422 
	}
}

4435 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹Rï‹tAârR•
–
z˛Incomög_t
 *
pInMsg
,

4436 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4438 i‡–
pCBs
->
p‚Sim∂eMëî_Múr‹Rï‹tAârR•
 )

4440 
z˛CCReqMúr‹Rï‹tAârR•_t
 
cmd
;

4442 
cmd
.
NŸifiˇti⁄Fœgs
 = 
pInMsg
->
pD©a
[0];

4443 
cmd
.
Pri˚NŸifiˇti⁄Fœgs
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[1],ÖInMsg->pData[2] );

4444 
cmd
.
CÆíd¨NŸifiˇti⁄Fœgs
 = 
pInMsg
->
pD©a
[3];

4445 
cmd
.
PªPayNŸifiˇti⁄Fœgs
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[4],ÖInMsg->pData[5] );

4446 
cmd
.
Devi˚MgmtNŸifiˇti⁄Fœgs
 = 
pInMsg
->
pD©a
[6];

4448 
pCBs
->
	`p‚Sim∂eMëî_Múr‹Rï‹tAârR•
(&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4449 
pInMsg
->
hdr
.
å™sSeqNum
 );

4451  
ZSuc˚ss
;

4454  
ZFaûuª
;

4455 
	}
}

4460 #ifde‡
ZCL_PRICING


4472 
ZSètus_t
 
	$z˛SE_Pro˚ssInPricögCmds
–
z˛Incomög_t
 *
pInMsg
,

4473 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4475 
ZSètus_t
 
°©
;

4477 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

4480  
pInMsg
->
hdr
.
comm™dID
 )

4482 
COMMAND_SE_GET_CURRENT_PRICE
:

4483 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_GëCuºítPri˚
–
pInMsg
, 
pCBs
 );

4486 
COMMAND_SE_GET_SCHEDULED_PRICE
:

4487 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_GëScheduÀdPri˚
–
pInMsg
, 
pCBs
 );

4490 
COMMAND_SE_PRICE_ACKNOWLEDGEMENT
:

4491 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_Pri˚AcknowÀdgemít
 ( 
pInMsg
, 
pCBs
 );

4494 
COMMAND_SE_GET_BLOCK_PERIOD
:

4495 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_GëBlockPîiod
 ( 
pInMsg
, 
pCBs
 );

4498 #ifde‡
SE_UK_EXT


4499 
COMMAND_SE_GET_TARIFF_INFO
:

4500 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_GëT¨iffInf‹m©i⁄
 ( 
pInMsg
, 
pCBs
 );

4503 
COMMAND_SE_GET_PRICE_MATRIX
:

4504 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_GëPri˚M©rix
 ( 
pInMsg
, 
pCBs
 );

4507 
COMMAND_SE_GET_BLOCK_THRESHOLD
:

4508 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_GëBlockThªshﬁds
 ( 
pInMsg
, 
pCBs
 );

4511 
COMMAND_SE_GET_CONVERSION_FACTOR
:

4512 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_GëC⁄vîsi⁄Fa˘‹
 ( 
pInMsg
, 
pCBs
 );

4515 
COMMAND_SE_GET_CALORIFIC_VALUE
:

4516 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_GëCÆ‹ificVÆue
 ( 
pInMsg
, 
pCBs
 );

4519 
COMMAND_SE_GET_CO2_VALUE
:

4520 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_GëCO2VÆue
 ( 
pInMsg
, 
pCBs
 );

4523 
COMMAND_SE_GET_BILLING_PERIOD
:

4524 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_GëBûlögPîiod
 ( 
pInMsg
, 
pCBs
 );

4527 
COMMAND_SE_GET_CONSOLIDATED_BILL
:

4528 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_GëC⁄sﬁid©edBûl
 ( 
pInMsg
, 
pCBs
 );

4531 
COMMAND_SE_CPP_EVENT_RESPONSE
:

4532 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_CPPEvítRe•⁄£
 ( 
pInMsg
, 
pCBs
 );

4537 
°©
 = 
ZFaûuª
;

4544  
pInMsg
->
hdr
.
comm™dID
 )

4546 
COMMAND_SE_PUBLISH_PRICE
:

4547 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_PublishPri˚
–
pInMsg
, 
pCBs
 );

4550 
COMMAND_SE_PUBLISH_BLOCK_PERIOD
:

4551 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_PublishBlockPîiod
–
pInMsg
, 
pCBs
 );

4554 #ifde‡
SE_UK_EXT


4555 
COMMAND_SE_PUBLISH_TARIFF_INFO
:

4556 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_PublishT¨iffInf‹m©i⁄
–
pInMsg
, 
pCBs
 );

4559 
COMMAND_SE_PUBLISH_PRICE_MATRIX
:

4560 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_PublishPri˚M©rix
–
pInMsg
, 
pCBs
 );

4563 
COMMAND_SE_PUBLISH_BLOCK_THRESHOLD
:

4564 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_PublishBlockThªshﬁd
–
pInMsg
, 
pCBs
 );

4567 
COMMAND_SE_PUBLISH_CONVERSION_FACTOR
:

4568 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_PublishC⁄vîsi⁄Fa˘‹
–
pInMsg
, 
pCBs
 );

4571 
COMMAND_SE_PUBLISH_CALORIFIC_VALUE
:

4572 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_PublishCÆ‹ificVÆue
–
pInMsg
, 
pCBs
 );

4575 
COMMAND_SE_PUBLISH_CO2_VALUE
:

4576 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_PublishCO2VÆue
–
pInMsg
, 
pCBs
 );

4579 
COMMAND_SE_PUBLISH_CPP_EVENT
:

4580 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_PublishCPPEvít
–
pInMsg
, 
pCBs
 );

4583 
COMMAND_SE_PUBLISH_BILLING_PERIOD
:

4584 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_PublishBûlögPîiod
–
pInMsg
, 
pCBs
 );

4587 
COMMAND_SE_PUBLISH_CONSOLIDATED_BILL
:

4588 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_PublishC⁄sﬁid©edBûl
–
pInMsg
, 
pCBs
 );

4591 
COMMAND_SE_PUBLISH_CREDIT_PAYMENT_INFO
:

4592 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_PublishCªdôPaymítInfo
–
pInMsg
, 
pCBs
 );

4597 
°©
 = 
ZFaûuª
;

4602  ( 
°©
 );

4603 
	}
}

4617 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_GëCuºítPri˚
–
z˛Incomög_t
 *
pInMsg
,

4618 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4620 i‡–
pCBs
->
p‚Pricög_GëCuºítPri˚
 )

4622 
z˛CCGëCuºítPri˚_t
 
cmd
;

4624 
cmd
.
›ti⁄
 = 
pInMsg
->
pD©a
[0];

4626 
pCBs
->
	`p‚Pricög_GëCuºítPri˚
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4627 
pInMsg
->
hdr
.
å™sSeqNum
 );

4629  
ZCL_STATUS_CMD_HAS_RSP
;

4632  
ZFaûuª
;

4633 
	}
}

4647 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_GëScheduÀdPri˚
–
z˛Incomög_t
 *
pInMsg
,

4648 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4650 i‡–
pCBs
->
p‚Pricög_GëScheduÀdPri˚
 )

4652 
z˛CCGëScheduÀdPri˚_t
 
cmd
;

4654 
cmd
.
°¨tTime
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4 );

4655 
cmd
.
numEvíts
 = 
pInMsg
->
pD©a
[4];

4657 
pCBs
->
	`p‚Pricög_GëScheduÀdPri˚
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4658 
pInMsg
->
hdr
.
å™sSeqNum
 );

4659  
ZCL_STATUS_CMD_HAS_RSP
;

4662  
ZFaûuª
;

4663 
	}
}

4679 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_PublishPri˚
–
z˛Incomög_t
 *
pInMsg
,

4680 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4682 i‡–
pCBs
->
p‚Pricög_PublishPri˚
 )

4684 
z˛CCPublishPri˚_t
 
cmd
;

4687 i‡–
	`z˛SE_P¨£InCmd_PublishPri˚
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

4688 
pInMsg
->
pD©aLí
 ) =
ZSuc˚ss
 )

4690 
pCBs
->
	`p‚Pricög_PublishPri˚
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4691 
pInMsg
->
hdr
.
å™sSeqNum
 );

4694 i‡–
cmd
.
øãLabñ
.
pSå
 !
NULL
 )

4696 
	`oßl_mem_‰ì
–
cmd
.
øãLabñ
.
pSå
 );

4700 i‡((
pInMsg
->
pD©aLí
 - 
cmd
.
øãLabñ
.
°rLí
Ë> 
PACKET_LEN_SE_PUBLISH_PRICE_SE_1_0
)

4702  
ZCL_STATUS_CMD_HAS_RSP
;

4707  
ZSuc˚ss
;

4712  
ZCL_STATUS_SOFTWARE_FAILURE
;

4716  
ZFaûuª
;

4717 
	}
}

4730 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_Pri˚AcknowÀdgemít
–
z˛Incomög_t
 *
pInMsg
,

4731 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4733 i‡–
pCBs
->
p‚Pricög_Pri˚AcknowÀdgemít
 )

4735 
z˛CCPri˚AcknowÀdgemít_t
 
cmd
;

4737 
cmd
.
¥ovidîId
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4 );

4738 
cmd
.
issuîEvítId
 = 
	`oßl_buûd_uöt32
–&
pInMsg
->
pD©a
[4], 4 );

4739 
cmd
.
¥i˚AckTime
 = 
	`oßl_buûd_uöt32
–&
pInMsg
->
pD©a
[8], 4 );

4740 
cmd
.
c⁄åﬁ
 = 
pInMsg
->
pD©a
[12];

4742 
pCBs
->
	`p‚Pricög_Pri˚AcknowÀdgemít
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4743 
pInMsg
->
hdr
.
å™sSeqNum
 );

4744  
ZSuc˚ss
;

4747  
ZFaûuª
;

4748 
	}
}

4762 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_GëBlockPîiod
–
z˛Incomög_t
 *
pInMsg
,

4763 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4765 i‡–
pCBs
->
p‚Pricög_GëBlockPîiod
 )

4767 
z˛CCGëBlockPîiod_t
 
cmd
;

4769 
cmd
.
°¨tTime
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4 );

4770 
cmd
.
numEvíts
 = 
pInMsg
->
pD©a
[4];

4772 
pCBs
->
	`p‚Pricög_GëBlockPîiod
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4773 
pInMsg
->
hdr
.
å™sSeqNum
 );

4774  
ZCL_STATUS_CMD_HAS_RSP
;

4777  
ZFaûuª
;

4778 
	}
}

4792 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_PublishBlockPîiod
–
z˛Incomög_t
 *
pInMsg
,

4793 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4795 i‡–
pCBs
->
p‚Pricög_PublishBlockPîiod
 )

4797 
z˛CCPublishBlockPîiod_t
 
cmd
;

4800 
	`z˛SE_P¨£InCmd_PublishBlockPîiod
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

4802 
pCBs
->
	`p‚Pricög_PublishBlockPîiod
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4803 
pInMsg
->
hdr
.
å™sSeqNum
 );

4804  
ZCL_STATUS_CMD_HAS_RSP
;

4807  
ZFaûuª
;

4808 
	}
}

4810 #ifde‡
SE_UK_EXT


4823 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_PublishT¨iffInf‹m©i⁄
–
z˛Incomög_t
 *
pInMsg
,

4824 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4826 i‡–
pCBs
->
p‚Pricög_PublishT¨iffInf‹m©i⁄
 )

4828 
z˛CCPublishT¨iffInf‹m©i⁄_t
 
cmd
;

4830 
	`z˛SE_P¨£InCmd_PublishT¨iffInf‹m©i⁄
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

4831 
pInMsg
->
pD©aLí
 );

4833 
pCBs
->
	`p‚Pricög_PublishT¨iffInf‹m©i⁄
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4834 
pInMsg
->
hdr
.
å™sSeqNum
 );

4835  
ZCL_STATUS_CMD_HAS_RSP
;

4838  
ZFaûuª
;

4839 
	}
}

4854 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_PublishPri˚M©rix
–
z˛Incomög_t
 *
pInMsg
,

4855 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4857 i‡–
pCBs
->
p‚Pricög_PublishPri˚M©rix
 )

4859 
z˛CCPublishPri˚M©rix_t
 
cmd
;

4861 i‡–
	`z˛SE_P¨£InCmd_PublishPri˚M©rix
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

4862 
pInMsg
->
pD©aLí
 ) =
ZSuc˚ss
 )

4864 
pCBs
->
	`p‚Pricög_PublishPri˚M©rix
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4865 
pInMsg
->
hdr
.
å™sSeqNum
 );

4867 i‡–
cmd
.
pTõrBlockPri˚
 !
NULL
 )

4869 
	`oßl_mem_‰ì
–
cmd
.
pTõrBlockPri˚
 );

4872  
ZCL_STATUS_CMD_HAS_RSP
;

4876  
ZCL_STATUS_SOFTWARE_FAILURE
;

4880  
ZFaûuª
;

4881 
	}
}

4896 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_PublishBlockThªshﬁd
–
z˛Incomög_t
 *
pInMsg
,

4897 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4899 i‡–
pCBs
->
p‚Pricög_PublishBlockThªshﬁds
 )

4901 
z˛CCPublishBlockThªshﬁds_t
 
cmd
;

4903 i‡–
	`z˛SE_P¨£InCmd_PublishBlockThªshﬁds
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

4904 
pInMsg
->
pD©aLí
 ) =
ZSuc˚ss
 )

4906 
pCBs
->
	`p‚Pricög_PublishBlockThªshﬁds
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4907 
pInMsg
->
hdr
.
å™sSeqNum
 );

4909 i‡–
cmd
.
pTõrBlockThªshﬁd
 !
NULL
 )

4911 
	`oßl_mem_‰ì
–
cmd
.
pTõrBlockThªshﬁd
 );

4914  
ZCL_STATUS_CMD_HAS_RSP
;

4918  
ZCL_STATUS_SOFTWARE_FAILURE
;

4922  
ZFaûuª
;

4923 
	}
}

4937 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_PublishC⁄vîsi⁄Fa˘‹
–
z˛Incomög_t
 *
pInMsg
,

4938 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4940 i‡–
pCBs
->
p‚Pricög_PublishC⁄vîsi⁄Fa˘‹
 )

4942 
z˛CCPublishC⁄vîsi⁄Fa˘‹_t
 
cmd
;

4944 
	`z˛SE_P¨£InCmd_PublishC⁄vîsi⁄Fa˘‹
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

4945 
pInMsg
->
pD©aLí
 );

4947 
pCBs
->
	`p‚Pricög_PublishC⁄vîsi⁄Fa˘‹
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4948 
pInMsg
->
hdr
.
å™sSeqNum
 );

4949  
ZCL_STATUS_CMD_HAS_RSP
;

4952  
ZFaûuª
;

4953 
	}
}

4967 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_PublishCÆ‹ificVÆue
–
z˛Incomög_t
 *
pInMsg
,

4968 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

4970 i‡–
pCBs
->
p‚Pricög_PublishCÆ‹ificVÆue
 )

4972 
z˛CCPublishCÆ‹ificVÆue_t
 
cmd
;

4974 
	`z˛SE_P¨£InCmd_PublishCÆ‹ificVÆue
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

4975 
pInMsg
->
pD©aLí
 );

4977 
pCBs
->
	`p‚Pricög_PublishCÆ‹ificVÆue
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

4978 
pInMsg
->
hdr
.
å™sSeqNum
 );

4979  
ZCL_STATUS_CMD_HAS_RSP
;

4982  
ZFaûuª
;

4983 
	}
}

4997 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_PublishCO2VÆue
–
z˛Incomög_t
 *
pInMsg
,

4998 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5000 i‡–
pCBs
->
p‚Pricög_PublishCO2VÆue
 )

5002 
z˛CCPublishCO2VÆue_t
 
cmd
;

5004 
	`z˛SE_P¨£InCmd_PublishCO2VÆue
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

5005 
pInMsg
->
pD©aLí
 );

5007 
pCBs
->
	`p‚Pricög_PublishCO2VÆue
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5008 
pInMsg
->
hdr
.
å™sSeqNum
 );

5009  
ZCL_STATUS_CMD_HAS_RSP
;

5012  
ZFaûuª
;

5013 
	}
}

5027 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_PublishCPPEvít
–
z˛Incomög_t
 *
pInMsg
,

5028 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5030 i‡–
pCBs
->
p‚Pricög_PublishCPPEvít
 )

5032 
z˛CCPublishCPPEvít_t
 
cmd
;

5034 
	`z˛SE_P¨£InCmd_PublishCPPEvít
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

5036 
pCBs
->
	`p‚Pricög_PublishCPPEvít
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5037 
pInMsg
->
hdr
.
å™sSeqNum
 );

5038  
ZCL_STATUS_CMD_HAS_RSP
;

5041  
ZFaûuª
;

5042 
	}
}

5056 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_PublishBûlögPîiod
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5058 i‡–
pCBs
->
p‚Pricög_PublishBûlögPîiod
 )

5060 
z˛CCPublishBûlögPîiod_t
 
cmd
;

5062 
	`z˛SE_P¨£InCmd_PublishBûlögPîiod
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

5063 
pInMsg
->
pD©aLí
 );

5065 
pCBs
->
	`p‚Pricög_PublishBûlögPîiod
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5066 
pInMsg
->
hdr
.
å™sSeqNum
 );

5067  
ZCL_STATUS_CMD_HAS_RSP
;

5070  
ZFaûuª
;

5071 
	}
}

5085 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_PublishC⁄sﬁid©edBûl
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5087 i‡–
pCBs
->
p‚Pricög_PublishC⁄sﬁid©edBûl
 )

5089 
z˛CCPublishC⁄sﬁid©edBûl_t
 
cmd
;

5091 
	`z˛SE_P¨£InCmd_PublishC⁄sﬁid©edBûl
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

5092 
pInMsg
->
pD©aLí
 );

5094 
pCBs
->
	`p‚Pricög_PublishC⁄sﬁid©edBûl
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5095 
pInMsg
->
hdr
.
å™sSeqNum
 );

5096  
ZCL_STATUS_CMD_HAS_RSP
;

5099  
ZFaûuª
;

5100 
	}
}

5114 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_PublishCªdôPaymítInfo
–
z˛Incomög_t
 *
pInMsg
,

5115 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5117 i‡–
pCBs
->
p‚Pricög_PublishCªdôPaymítInfo
 )

5119 
z˛CCPublishCªdôPaymítInfo_t
 
cmd
;

5121 
	`z˛SE_P¨£InCmd_PublishCªdôPaymítInfo
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

5122 
pInMsg
->
pD©aLí
 );

5124 
pCBs
->
	`p‚Pricög_PublishCªdôPaymítInfo
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5125 
pInMsg
->
hdr
.
å™sSeqNum
 );

5127  
ZCL_STATUS_CMD_HAS_RSP
;

5130  
ZFaûuª
;

5131 
	}
}

5145 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_GëT¨iffInf‹m©i⁄
–
z˛Incomög_t
 *
pInMsg
,

5146 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5148 i‡–
pCBs
->
p‚Pricög_GëT¨iffInf‹m©i⁄
 )

5150 
z˛CCGëT¨iffInf‹m©i⁄_t
 
cmd
;

5152 
	`z˛SE_P¨£InCmd_GëT¨iffInf‹m©i⁄
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

5153 
pInMsg
->
pD©aLí
 );

5155 
pCBs
->
	`p‚Pricög_GëT¨iffInf‹m©i⁄
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5156 
pInMsg
->
hdr
.
å™sSeqNum
 );

5157  
ZCL_STATUS_CMD_HAS_RSP
;

5160  
ZFaûuª
;

5161 
	}
}

5176 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_GëPri˚M©rix
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5178 i‡–
pCBs
->
p‚Pricög_GëPri˚M©rix
 )

5180 
uöt32
 
issuîT¨iffId
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4 );

5182 
pCBs
->
	`p‚Pricög_GëPri˚M©rix
–
issuîT¨iffId
, &(
pInMsg
->
msg
->
§cAddr
),

5183 
pInMsg
->
hdr
.
å™sSeqNum
 );

5185  
ZCL_STATUS_CMD_HAS_RSP
;

5188  
ZFaûuª
;

5189 
	}
}

5204 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_GëBlockThªshﬁds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5206 i‡–
pCBs
->
p‚Pricög_GëBlockThªshﬁds
 )

5208 
uöt32
 
issuîT¨iffId
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4 );

5210 
pCBs
->
	`p‚Pricög_GëBlockThªshﬁds
–
issuîT¨iffId
, &(
pInMsg
->
msg
->
§cAddr
),

5211 
pInMsg
->
hdr
.
å™sSeqNum
 );

5213  
ZCL_STATUS_CMD_HAS_RSP
;

5216  
ZFaûuª
;

5217 
	}
}

5231 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_GëC⁄vîsi⁄Fa˘‹
–
z˛Incomög_t
 *
pInMsg
,

5232 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5234 i‡–
pCBs
->
p‚Pricög_GëC⁄vîsi⁄Fa˘‹
 )

5236 
z˛CCGëC⁄vîsi⁄Fa˘‹_t
 
cmd
;

5238 
	`z˛SE_P¨£InCmd_GëC⁄vîsi⁄Fa˘‹
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

5239 
pInMsg
->
pD©aLí
 );

5241 
pCBs
->
	`p‚Pricög_GëC⁄vîsi⁄Fa˘‹
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5242 
pInMsg
->
hdr
.
å™sSeqNum
 );

5243  
ZCL_STATUS_CMD_HAS_RSP
;

5246  
ZFaûuª
;

5247 
	}
}

5261 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_GëCÆ‹ificVÆue
–
z˛Incomög_t
 *
pInMsg
,

5262 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5264 i‡–
pCBs
->
p‚Pricög_GëCÆ‹ificVÆue
 )

5266 
z˛CCGëCÆ‹ificVÆue_t
 
cmd
;

5268 
	`z˛SE_P¨£InCmd_GëCÆ‹ificVÆue
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

5269 
pInMsg
->
pD©aLí
 );

5271 
pCBs
->
	`p‚Pricög_GëCÆ‹ificVÆue
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5272 
pInMsg
->
hdr
.
å™sSeqNum
 );

5273  
ZCL_STATUS_CMD_HAS_RSP
;

5276  
ZFaûuª
;

5277 
	}
}

5291 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_GëCO2VÆue
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5293 i‡–
pCBs
->
p‚Pricög_GëCO2VÆue
 )

5295 
z˛CCGëCO2VÆue_t
 
cmd
;

5297 
	`z˛SE_P¨£InCmd_GëCO2VÆue
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

5298 
pInMsg
->
pD©aLí
 );

5300 
pCBs
->
	`p‚Pricög_GëCO2VÆue
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5301 
pInMsg
->
hdr
.
å™sSeqNum
 );

5302  
ZCL_STATUS_CMD_HAS_RSP
;

5305  
ZFaûuª
;

5306 
	}
}

5320 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_GëBûlögPîiod
–
z˛Incomög_t
 *
pInMsg
,

5321 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5323 i‡–
pCBs
->
p‚Pricög_GëBûlögPîiod
 )

5325 
z˛CCGëBûlögPîiod_t
 
cmd
;

5327 
	`z˛SE_P¨£InCmd_GëBûlögPîiod
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

5328 
pInMsg
->
pD©aLí
 );

5330 
pCBs
->
	`p‚Pricög_GëBûlögPîiod
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5331 
pInMsg
->
hdr
.
å™sSeqNum
 );

5333  
ZCL_STATUS_CMD_HAS_RSP
;

5336  
ZFaûuª
;

5337 
	}
}

5351 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_GëC⁄sﬁid©edBûl
–
z˛Incomög_t
 *
pInMsg
,

5352 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5354 i‡–
pCBs
->
p‚Pricög_GëC⁄sﬁid©edBûl
 )

5356 
z˛CCGëC⁄sﬁid©edBûl_t
 
cmd
;

5358 
	`z˛SE_P¨£InCmd_GëC⁄sﬁid©edBûl
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

5359 
pInMsg
->
pD©aLí
 );

5361 
pCBs
->
	`p‚Pricög_GëC⁄sﬁid©edBûl
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5362 
pInMsg
->
hdr
.
å™sSeqNum
 );

5363  
ZCL_STATUS_CMD_HAS_RSP
;

5366  
ZFaûuª
;

5367 
	}
}

5381 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_CPPEvítRe•⁄£
–
z˛Incomög_t
 *
pInMsg
,

5382 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5384 i‡–
pCBs
->
p‚Pricög_CPPEvítRe•⁄£
 )

5386 
z˛CCCPPEvítRe•⁄£_t
 
cmd
;

5388 
	`z˛SE_P¨£InCmd_CPPEvítRe•⁄£
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

5389 
pInMsg
->
pD©aLí
 );

5391 
pCBs
->
	`p‚Pricög_CPPEvítRe•⁄£
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5392 
pInMsg
->
hdr
.
å™sSeqNum
 );

5393  
ZCL_STATUS_CMD_HAS_RSP
;

5396  
ZFaûuª
;

5397 
	}
}

5402 #ifde‡
ZCL_MESSAGE


5414 
ZSètus_t
 
	$z˛SE_Pro˚ssInMesßgeCmds
–
z˛Incomög_t
 *
pInMsg
,

5415 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5417 
ZSètus_t
 
°©
;

5419 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

5422  
pInMsg
->
hdr
.
comm™dID
 )

5424 
COMMAND_SE_GET_LAST_MESSAGE
:

5425 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Mesßge_GëLa°Mesßge
–
pInMsg
, 
pCBs
 );

5428 
COMMAND_SE_MESSAGE_CONFIRMATION
:

5429 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Mesßge_MesßgeC⁄fúm©i⁄
–
pInMsg
, 
pCBs
 );

5433 
°©
 = 
ZFaûuª
;

5440  
pInMsg
->
hdr
.
comm™dID
 )

5442 
COMMAND_SE_DISPLAY_MESSAGE
:

5443 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Mesßge_Di•œyMesßge
–
pInMsg
, 
pCBs
 );

5446 
COMMAND_SE_CANCEL_MESSAGE
:

5447 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Mesßge_C™˚lMesßge
–
pInMsg
, 
pCBs
 );

5451 
°©
 = 
ZFaûuª
;

5456  ( 
°©
 );

5457 
	}
}

5471 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Mesßge_Di•œyMesßge
–
z˛Incomög_t
 *
pInMsg
,

5472 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5474 i‡–
pCBs
->
p‚Mesßge_Di•œyMesßge
 )

5476 
z˛CCDi•œyMesßge_t
 
cmd
;

5478 i‡–
	`z˛SE_P¨£InCmd_Di•œyMesßge
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 ) =
ZSuc˚ss
 )

5480 
pCBs
->
	`p‚Mesßge_Di•œyMesßge
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5481 
pInMsg
->
hdr
.
å™sSeqNum
 );

5484 i‡–
cmd
.
msgSåög
.
pSå
 !
NULL
 )

5486 
	`oßl_mem_‰ì
–
cmd
.
msgSåög
.
pSå
 );

5489  
ZSuc˚ss
;

5493  
ZCL_STATUS_SOFTWARE_FAILURE
;

5497  
ZFaûuª
;

5498 
	}
}

5511 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Mesßge_C™˚lMesßge
–
z˛Incomög_t
 *
pInMsg
,

5512 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5514 i‡–
pCBs
->
p‚Mesßge_C™˚lMesßge
 )

5516 
z˛CCC™˚lMesßge_t
 
cmd
;

5518 
	`z˛SE_P¨£InCmd_C™˚lMesßge
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

5520 
pCBs
->
	`p‚Mesßge_C™˚lMesßge
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5521 
pInMsg
->
hdr
.
å™sSeqNum
 );

5522  
ZSuc˚ss
;

5525  
ZFaûuª
;

5526 
	}
}

5540 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Mesßge_GëLa°Mesßge
–
z˛Incomög_t
 *
pInMsg
,

5541 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5543 i‡–
pCBs
->
p‚Mesßge_GëLa°Mesßge
 )

5545 
pCBs
->
	`p‚Mesßge_GëLa°Mesßge
–&(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

5546  
ZCL_STATUS_CMD_HAS_RSP
;

5549  
ZFaûuª
;

5550 
	}
}

5563 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Mesßge_MesßgeC⁄fúm©i⁄
–
z˛Incomög_t
 *
pInMsg
,

5564 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5566 i‡–
pCBs
->
p‚Mesßge_MesßgeC⁄fúm©i⁄
 )

5568 
z˛CCMesßgeC⁄fúm©i⁄_t
 
cmd
;

5570 
	`z˛SE_P¨£InCmd_MesßgeC⁄fúm©i⁄
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

5571 
pInMsg
->
pD©aLí
 );

5572 
pCBs
->
	`p‚Mesßge_MesßgeC⁄fúm©i⁄
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

5573 
pInMsg
->
hdr
.
å™sSeqNum
 );

5574  
ZSuc˚ss
;

5577  
ZFaûuª
;

5578 
	}
}

5582 #ifde‡
ZCL_LOAD_CONTROL


5594 
ZSètus_t
 
	$z˛SE_Pro˚ssInLﬂdC⁄åﬁCmds
–
z˛Incomög_t
 *
pInMsg
,

5595 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5597 
ZSètus_t
 
°©
;

5599 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

5602  
pInMsg
->
hdr
.
comm™dID
 )

5604 
COMMAND_SE_REPORT_EVENT_STATUS
:

5605 
°©
 = 
	`z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_Rï‹tEvítSètus
–
pInMsg
, 
pCBs
 );

5608 
COMMAND_SE_GET_SCHEDULED_EVENT
:

5609 
°©
 = 
	`z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_GëScheduÀdEvíts
–
pInMsg
, 
pCBs
 );

5613 
°©
 = 
ZFaûuª
;

5620  
pInMsg
->
hdr
.
comm™dID
 )

5622 
COMMAND_SE_LOAD_CONTROL_EVENT
:

5623 
°©
 = 
	`z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít
–
pInMsg
, 
pCBs
 );

5626 
COMMAND_SE_CANCEL_LOAD_CONTROL_EVENT
:

5627 
°©
 = 
	`z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít
–
pInMsg
, 
pCBs
 );

5630 
COMMAND_SE_CANCEL_ALL_LOAD_CONTROL_EVENT
:

5631 
°©
 = 
	`z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts
–
pInMsg
, 
pCBs
 );

5635 
°©
 = 
ZFaûuª
;

5640  ( 
°©
 );

5641 
	}
}

5656 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít
–
z˛Incomög_t
 *
pInMsg
,

5657 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5659 
uöt8
 
°©us
 = 
ZSuc˚ss
;

5661 i‡–
pCBs
->
p‚LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít
 )

5663 
z˛CCLﬂdC⁄åﬁEvít_t
 
cmd
;

5665 
	`z˛SE_P¨£InCmd_LﬂdC⁄åﬁEvít
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

5668 i‡–
cmd
.
duøti⁄InMöuãs
 > 
MAX_DURATION_IN_MINUTES_SE_LOAD_CONTROL
 )

5670 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

5673 i‡–
cmd
.
¸ôiˇlôyLevñ
 > 
MAX_CRITICAL_LEVEL_SE_LOAD_CONTROL
 )

5675 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

5678 i‡–
cmd
. 
coﬁögTem≥øtuªSëPoöt
 !
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
 &&

5679 
cmd
. 
coﬁögTem≥øtuªSëPoöt
 > 
MAX_TEMPERATURE_SETPOINT_SE_LOAD_CONTROL
 )

5681 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

5684 i‡–
cmd
. 
hótögTem≥øtuªSëPoöt
 !
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
 &&

5685 
cmd
. 
hótögTem≥øtuªSëPoöt
 > 
MAX_TEMPERATURE_SETPOINT_SE_LOAD_CONTROL
 )

5687 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

5690 i‡–
cmd
.
avîageLﬂdAdju°mítPî˚¡age
 !
SE_OPTIONAL_FIELD_INT8
 &&

5691 (
cmd
.
avîageLﬂdAdju°mítPî˚¡age
 < 
MIN_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE
 ||

5692 
cmd
.
avîageLﬂdAdju°mítPî˚¡age
 > 
MAX_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE
 ) )

5694 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

5697 i‡–
cmd
. 
dutyCy˛e
 !
SE_OPTIONAL_FIELD_UINT8
 &&

5698 
cmd
. 
dutyCy˛e
 > 
MAX_DUTY_CYCLE_SE_LOAD_CONTROL
 )

5700 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

5704 i‡–
cmd
.
coﬁögTem≥øtuªOff£t
 =
SE_OPTIONAL_FIELD_UINT8
 ||

5705 
cmd
.
hótögTem≥øtuªOff£t
 =
SE_OPTIONAL_FIELD_UINT8
 ||

5706 
cmd
.
coﬁögTem≥øtuªSëPoöt
 =
SE_OPTIONAL_FIELD_UINT16
 ||

5707 
cmd
.
hótögTem≥øtuªSëPoöt
 =
SE_OPTIONAL_FIELD_UINT16
 )

5709 
cmd
.
coﬁögTem≥øtuªOff£t
 = 
SE_OPTIONAL_FIELD_UINT8
;

5710 
cmd
.
hótögTem≥øtuªOff£t
 = 
SE_OPTIONAL_FIELD_UINT8
;

5711 
cmd
.
coﬁögTem≥øtuªSëPoöt
 = 
SE_OPTIONAL_FIELD_UINT16
;

5712 
cmd
.
hótögTem≥øtuªSëPoöt
 = 
SE_OPTIONAL_FIELD_UINT16
;

5715 
pCBs
->
	`p‚LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
), 
°©us
,ÖInMsg->
hdr
.
å™sSeqNum
 );

5719  
ZCL_STATUS_CMD_HAS_RSP
;

5722  
ZFaûuª
;

5723 
	}
}

5736 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít
–
z˛Incomög_t
 *
pInMsg
,

5737 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5739 i‡–
pCBs
->
p‚LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít
 )

5741 
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 
cmd
;

5743 
	`z˛SE_P¨£InCmd_C™˚lLﬂdC⁄åﬁEvít
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

5745 
pCBs
->
	`p‚LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

5746  
ZSuc˚ss
;

5749  
ZFaûuª
;

5750 
	}
}

5763 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts
–
z˛Incomög_t
 *
pInMsg
,

5764 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5766 i‡–
pCBs
->
p‚LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts
 )

5768 
z˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 
cmd
;

5770 
cmd
.
ˇn˚lC⁄åﬁ
 = 
pInMsg
->
pD©a
[0];

5772 
pCBs
->
	`p‚LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

5773  
ZSuc˚ss
;

5776  
ZFaûuª
;

5777 
	}
}

5792 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_Rï‹tEvítSètus
–
z˛Incomög_t
 *
pInMsg
,

5793 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5795 i‡–
pCBs
->
p‚LﬂdC⁄åﬁ_Rï‹tEvítSètus
 )

5798 
z˛CCRï‹tEvítSètus_t
 
cmd
;

5800 
	`z˛SE_P¨£InCmd_Rï‹tEvítSètus
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

5803 i‡–
cmd
.
evítSètus
 !
EVENT_STATUS_LOAD_CONTROL_EVENT_REJECTED
 &&

5804 (
cmd
.
evítSètus
 == 0 ||

5805 
cmd
.
evítSètus
 > 
EVENT_STATUS_LOAD_CONTROL_EVENT_SUPERSEDED
 ) )

5807  
ZCL_STATUS_INVALID_FIELD
;

5810 i‡–
cmd
.
¸ôiˇlôyLevñAµlõd
 > 
MAX_CRITICAL_LEVEL_SE_LOAD_CONTROL
 )

5812  
ZCL_STATUS_INVALID_FIELD
;

5815 i‡–
cmd
.
coﬁögTem≥øtuªSëPoötAµlõd
 !
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
 &&

5816 
cmd
.
coﬁögTem≥øtuªSëPoötAµlõd
 > 
MAX_TEMPERATURE_SETPOINT_SE_LOAD_CONTROL
 )

5818  
ZCL_STATUS_INVALID_FIELD
;

5821 i‡–
cmd
.
hótögTem≥øtuªSëPoötAµlõd
 !
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
 &&

5822 
cmd
.
hótögTem≥øtuªSëPoötAµlõd
 > 
MAX_TEMPERATURE_SETPOINT_SE_LOAD_CONTROL
 )

5824  
ZCL_STATUS_INVALID_FIELD
;

5827 i‡–
cmd
.
avîageLﬂdAdju°mít
 !
SE_OPTIONAL_FIELD_INT8
 &&

5828 (
cmd
.
avîageLﬂdAdju°mít
 < 
MIN_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE
 ||

5829 
cmd
.
avîageLﬂdAdju°mít
 > 
MAX_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE
 ) )

5831  
ZCL_STATUS_INVALID_FIELD
;

5834 i‡–
cmd
.
dutyCy˛eAµlõd
 !
SE_OPTIONAL_FIELD_UINT8
 &&

5835 
cmd
.
dutyCy˛eAµlõd
 > 
MAX_DUTY_CYCLE_SE_LOAD_CONTROL
 )

5837  
ZCL_STATUS_INVALID_FIELD
;

5840 
pCBs
->
	`p‚LﬂdC⁄åﬁ_Rï‹tEvítSètus
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

5842  
ZSuc˚ss
;

5845  
ZFaûuª
;

5846 
	}
}

5859 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_GëScheduÀdEvíts
–
z˛Incomög_t
 *
pInMsg
,

5860 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5862 i‡–
pCBs
->
p‚LﬂdC⁄åﬁ_GëScheduÀdEvíts
 )

5864 
z˛CCGëScheduÀdEvít_t
 
cmd
;

5866 
cmd
.
°¨tTime
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4);

5867 
cmd
.
numEvíts
 = 
pInMsg
->
pD©a
[4];

5869 
pCBs
->
	`p‚LﬂdC⁄åﬁ_GëScheduÀdEvíts
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

5870  
ZSuc˚ss
;

5873  
ZFaûuª
;

5874 
	}
}

5878 #ifde‡
ZCL_PREPAYMENT


5890 
ZSètus_t
 
	$z˛SE_Pro˚ssInPª∑ymítCmds
–
z˛Incomög_t
 *
pInMsg
,

5891 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

5893 
ZSètus_t
 
°©
;

5895 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

5898  
pInMsg
->
hdr
.
comm™dID
 )

5900 
COMMAND_SE_SEL_AVAIL_EMERGENCY_CREDIT
:

5901 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_SñAvaûEmîgícyCªdô
–
pInMsg
, 
pCBs
 );

5904 #i‚de‡
SE_UK_EXT


5905 
COMMAND_SE_CHANGE_SUPPLY
:

5906 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_Ch™geSuµly
–
pInMsg
, 
pCBs
 );

5909 
COMMAND_SE_CHANGE_DEBT
:

5910 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_Ch™geDebt
–
pInMsg
, 
pCBs
 );

5913 
COMMAND_SE_EMERGENCY_CREDIT_SETUP
:

5914 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_EmîgícyCªdôSëup
–
pInMsg
, 
pCBs
 );

5917 
COMMAND_SE_CONSUMER_TOPUP
:

5918 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_C⁄sumîT›up
–
pInMsg
, 
pCBs
 );

5921 
COMMAND_SE_CREDIT_ADJUSTMENT
:

5922 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_CªdôAdju°mít
–
pInMsg
, 
pCBs
 );

5925 
COMMAND_SE_CHANGE_PAYMENT_MODE
:

5926 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_Ch™gePaymítMode
–
pInMsg
, 
pCBs
 );

5929 
COMMAND_SE_GET_PREPAY_SNAPSHOT
:

5930 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_GëPª∑yS«pshŸ
–
pInMsg
, 
pCBs
 );

5933 
COMMAND_SE_GET_TOPUP_LOG
:

5934 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_GëT›upLog
–
pInMsg
, 
pCBs
 );

5937 
COMMAND_SE_SET_LOW_CREDIT_WARNING_LEVEL
:

5938 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_SëLowCªdôW¨nögLevñ
–
pInMsg
, 
pCBs
 );

5941 
COMMAND_SE_GET_DEBT_REPAYMENT_LOG
:

5942 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_GëDebtRïaymítLog
–
pInMsg
, 
pCBs
 );

5947 
°©
 = 
ZFaûuª
;

5954  
pInMsg
->
hdr
.
comm™dID
 )

5956 #i‚de‡
SE_UK_EXT


5957 
COMMAND_SE_SUPPLY_STATUS_RESPONSE
:

5958 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_SuµlySètusRe•⁄£
–
pInMsg
, 
pCBs
 );

5962 
COMMAND_SE_GET_PREPAY_SNAPSHOT_RESPONSE
:

5963 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_GëPª∑yS«pshŸRe•⁄£
–
pInMsg
, 
pCBs
 );

5966 
COMMAND_SE_CHANGE_PAYMENT_MODE_RESPONSE
:

5967 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_Ch™gePaymítModeRe•⁄£
–
pInMsg
, 
pCBs
 );

5970 
COMMAND_SE_CONSUMER_TOPUP_RESPONSE
:

5971 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_C⁄sumîT›upRe•⁄£
–
pInMsg
, 
pCBs
 );

5974 
COMMAND_SE_GET_COMMANDS
:

5975 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_GëComm™ds
–
pInMsg
, 
pCBs
 );

5978 
COMMAND_SE_PUBLISH_TOPUP_LOG
:

5979 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_PublishT›upLog
–
pInMsg
, 
pCBs
 );

5982 
COMMAND_SE_PUBLISH_DEBT_LOG
:

5983 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pª∑ymít_PublishDebtLog
–
pInMsg
, 
pCBs
 );

5988 
°©
 = 
ZFaûuª
;

5993  ( 
°©
 );

5994 
	}
}

6007 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_SñAvaûEmîgícyCªdô
–
z˛Incomög_t
 *
pInMsg
,

6008 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6010 i‡–
pCBs
->
p‚Pª∑ymít_SñAvaûEmîgícyCªdô
 )

6012 
z˛CCSñAvaûEmîgícyCªdô_t
 
cmd
;

6014 
	`z˛SE_P¨£InCmd_SñAvaûEmîgícyCªdô
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

6015 
pInMsg
->
pD©aLí
 );

6018 
pCBs
->
	`p‚Pª∑ymít_SñAvaûEmîgícyCªdô
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6019 
pInMsg
->
hdr
.
å™sSeqNum
 );

6020  
ZSuc˚ss
;

6023  
ZFaûuª
;

6024 
	}
}

6026 #i‚de‡
SE_UK_EXT


6039 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_Ch™geSuµly
–
z˛Incomög_t
 *
pInMsg
,

6040 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6042 i‡–
pCBs
->
p‚Pª∑ymít_Ch™geSuµly
 )

6044 
z˛CCCh™geSuµly_t
 
cmd
;

6046 
	`z˛SE_P¨£InCmd_Ch™geSuµly
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

6049 
pCBs
->
	`p‚Pª∑ymít_Ch™geSuµly
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

6051  
ZCL_STATUS_CMD_HAS_RSP
;

6054  
ZFaûuª
;

6055 
	}
}

6068 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_SuµlySètusRe•⁄£
–
z˛Incomög_t
 *
pInMsg
,

6069 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6071 i‡–
pCBs
->
p‚Pª∑ymít_SuµlySètusRe•⁄£
 )

6073 
z˛CCSuµlySètusRe•⁄£_t
 
cmd
;

6075 
cmd
.
¥ovidîId
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4);

6076 
cmd
.
im∂emíèti⁄D©eTime
 = 
	`oßl_buûd_uöt32
–&
pInMsg
->
pD©a
[4], 4);

6077 
cmd
.
suµlySètus
 = 
pInMsg
->
pD©a
[8];

6079 
pCBs
->
	`p‚Pª∑ymít_SuµlySètusRe•⁄£
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6080 
pInMsg
->
hdr
.
å™sSeqNum
 );

6082  
ZSuc˚ss
;

6085  
ZFaûuª
;

6086 
	}
}

6100 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_Ch™geDebt
–
z˛Incomög_t
 *
pInMsg
,

6101 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6103 i‡–
pCBs
->
p‚Pª∑ymít_Ch™geDebt
 )

6105 
z˛CCCh™geDebt_t
 
cmd
;

6107 
	`z˛SE_P¨£InCmd_Ch™geDebt
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

6109 
pCBs
->
	`p‚Pª∑ymít_Ch™geDebt
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6110 
pInMsg
->
hdr
.
å™sSeqNum
 );

6111  
ZSuc˚ss
;

6114  
ZFaûuª
;

6115 
	}
}

6128 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_EmîgícyCªdôSëup
–
z˛Incomög_t
 *
pInMsg
,

6129 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6131 i‡–
pCBs
->
p‚Pª∑ymít_EmîgícyCªdôSëup
 )

6133 
z˛CCEmîgícyCªdôSëup_t
 
cmd
;

6135 
	`z˛SE_P¨£InCmd_EmîgícyCªdôSëup
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

6136 
pInMsg
->
pD©aLí
 );

6138 
pCBs
->
	`p‚Pª∑ymít_EmîgícyCªdôSëup
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6139 
pInMsg
->
hdr
.
å™sSeqNum
 );

6140  
ZSuc˚ss
;

6143  
ZFaûuª
;

6144 
	}
}

6157 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_C⁄sumîT›up
–
z˛Incomög_t
 *
pInMsg
,

6158 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6160 i‡–
pCBs
->
p‚Pª∑ymít_C⁄sumîT›up
 )

6162 
z˛CCC⁄sumîT›up_t
 
cmd
;

6164 
	`z˛SE_P¨£InCmd_C⁄sumîT›up
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

6166 
pCBs
->
	`p‚Pª∑ymít_C⁄sumîT›up
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6167 
pInMsg
->
hdr
.
å™sSeqNum
 );

6168  
ZSuc˚ss
;

6171  
ZFaûuª
;

6172 
	}
}

6185 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_CªdôAdju°mít
–
z˛Incomög_t
 *
pInMsg
,

6186 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6188 i‡–
pCBs
->
p‚Pª∑ymít_CªdôAdju°mít
 )

6190 
z˛CCCªdôAdju°mít_t
 
cmd
;

6192 
	`z˛SE_P¨£InCmd_CªdôAdju°mít
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

6194 
pCBs
->
	`p‚Pª∑ymít_CªdôAdju°mít
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6195 
pInMsg
->
hdr
.
å™sSeqNum
 );

6196  
ZSuc˚ss
;

6199  
ZFaûuª
;

6200 
	}
}

6213 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_Ch™gePaymítMode
–
z˛Incomög_t
 *
pInMsg
,

6214 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6216 i‡–
pCBs
->
p‚Pª∑ymít_Ch™gePaymítMode
 )

6218 
z˛CCCh™gePaymítMode_t
 
cmd
;

6220 
	`z˛SE_P¨£InCmd_Ch™gePaymítMode
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

6222 
pCBs
->
	`p‚Pª∑ymít_Ch™gePaymítMode
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6223 
pInMsg
->
hdr
.
å™sSeqNum
 );

6224  
ZSuc˚ss
;

6227  
ZFaûuª
;

6228 
	}
}

6241 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_GëPª∑yS«pshŸ
–
z˛Incomög_t
 *
pInMsg
,

6242 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6244 i‡–
pCBs
->
p‚Pª∑ymít_GëPª∑yS«pshŸ
 )

6246 
z˛CCGëPª∑yS«pshŸ_t
 
cmd
;

6248 
	`z˛SE_P¨£InCmd_GëPª∑yS«pshŸ
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

6250 
pCBs
->
	`p‚Pª∑ymít_GëPª∑yS«pshŸ
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6251 
pInMsg
->
hdr
.
å™sSeqNum
 );

6252  
ZSuc˚ss
;

6255  
ZFaûuª
;

6256 
	}
}

6269 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_GëT›upLog
–
z˛Incomög_t
 *
pInMsg
,

6270 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6272 i‡–
pCBs
->
p‚Pª∑ymít_GëT›upLog
 )

6274 
pCBs
->
	`p‚Pª∑ymít_GëT›upLog
–
pInMsg
->
pD©a
[0], &’InMsg->
msg
->
§cAddr
),

6275 
pInMsg
->
hdr
.
å™sSeqNum
 );

6276  
ZSuc˚ss
;

6279  
ZFaûuª
;

6280 
	}
}

6293 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_SëLowCªdôW¨nögLevñ
–
z˛Incomög_t
 *
pInMsg
,

6294 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6296 i‡–
pCBs
->
p‚Pª∑ymít_SëLowCªdôW¨nögLevñ
 )

6298 
pCBs
->
	`p‚Pª∑ymít_SëLowCªdôW¨nögLevñ
–
pInMsg
->
pD©a
[0],

6299 &(
pInMsg
->
msg
->
§cAddr
),

6300 
pInMsg
->
hdr
.
å™sSeqNum
 );

6301  
ZSuc˚ss
;

6304  
ZFaûuª
;

6305 
	}
}

6318 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_GëDebtRïaymítLog
–
z˛Incomög_t
 *
pInMsg
,

6319 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6321 i‡–
pCBs
->
p‚Pª∑ymít_GëDebtRïaymítLog
 )

6323 
z˛CCGëDebtRïaymítLog_t
 
cmd
;

6325 
	`z˛SE_P¨£InCmd_GëDebtRïaymítLog
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

6326 
pInMsg
->
pD©aLí
 );

6328 
pCBs
->
	`p‚Pª∑ymít_GëDebtRïaymítLog
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6329 
pInMsg
->
hdr
.
å™sSeqNum
 );

6330  
ZSuc˚ss
;

6333  
ZFaûuª
;

6334 
	}
}

6347 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_GëPª∑yS«pshŸRe•⁄£
–
z˛Incomög_t
 *
pInMsg
,

6348 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6350 i‡–
pCBs
->
p‚Pª∑ymít_GëPª∑yS«pshŸRe•⁄£
 )

6352 
z˛CCGëPª∑yS«pshŸRe•⁄£_t
 
cmd
;

6354 
	`z˛SE_P¨£InCmd_GëPª∑yS«pshŸRe•⁄£
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

6355 
pInMsg
->
pD©aLí
 );

6357 
pCBs
->
	`p‚Pª∑ymít_GëPª∑yS«pshŸRe•⁄£
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6358 
pInMsg
->
hdr
.
å™sSeqNum
 );

6360  
ZSuc˚ss
;

6363  
ZFaûuª
;

6364 
	}
}

6377 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_Ch™gePaymítModeRe•⁄£
–
z˛Incomög_t
 *
pInMsg
,

6378 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6380 i‡–
pCBs
->
p‚Pª∑ymít_Ch™gePaymítModeRe•⁄£
 )

6382 
z˛CCCh™gePaymítModeRe•⁄£_t
 
cmd
;

6384 
	`z˛SE_P¨£InCmd_Ch™gePaymítModeRe•⁄£
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

6385 
pInMsg
->
pD©aLí
 );

6387 
pCBs
->
	`p‚Pª∑ymít_Ch™gePaymítModeRe•⁄£
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6388 
pInMsg
->
hdr
.
å™sSeqNum
 );

6389  
ZSuc˚ss
;

6392  
ZFaûuª
;

6393 
	}
}

6406 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_C⁄sumîT›upRe•⁄£
–
z˛Incomög_t
 *
pInMsg
,

6407 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6409 i‡–
pCBs
->
p‚Pª∑ymít_C⁄sumîT›upRe•⁄£
 )

6411 
z˛CCC⁄sumîT›upRe•⁄£_t
 
cmd
;

6413 
	`z˛SE_P¨£InCmd_C⁄sumîT›upRe•⁄£
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

6414 
pInMsg
->
pD©aLí
 );

6416 
pCBs
->
	`p‚Pª∑ymít_C⁄sumîT›upRe•⁄£
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6417 
pInMsg
->
hdr
.
å™sSeqNum
 );

6418  
ZSuc˚ss
;

6421  
ZFaûuª
;

6422 
	}
}

6435 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_GëComm™ds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6437 i‡–
pCBs
->
p‚Pª∑ymít_GëComm™ds
 )

6439 
pCBs
->
	`p‚Pª∑ymít_GëComm™ds
–
pInMsg
->
pD©a
[0], &’InMsg->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

6440  
ZSuc˚ss
;

6443  
ZFaûuª
;

6444 
	}
}

6458 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_PublishT›upLog
–
z˛Incomög_t
 *
pInMsg
,

6459 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6461 i‡–
pCBs
->
p‚Pª∑ymít_PublishT›upLog
 )

6463 
z˛CCPublishT›upLog_t
 
cmd
;

6465 i‡–
	`z˛SE_P¨£InCmd_PublishT›upLog
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

6466 
pInMsg
->
pD©aLí
 ) =
ZSuc˚ss
 )

6468 
pCBs
->
	`p‚Pª∑ymít_PublishT›upLog
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6469 
pInMsg
->
hdr
.
å™sSeqNum
 );

6472 i‡–
cmd
.
pPaylﬂd
 !
NULL
 )

6474 
	`oßl_mem_‰ì
–
cmd
.
pPaylﬂd
 );

6477  
ZSuc˚ss
;

6481  
ZCL_STATUS_SOFTWARE_FAILURE
;

6485  
ZFaûuª
;

6486 
	}
}

6500 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pª∑ymít_PublishDebtLog
–
z˛Incomög_t
 *
pInMsg
,

6501 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6503 i‡–
pCBs
->
p‚Pª∑ymít_PublishDebtLog
 )

6505 
z˛CCPublishDebtLog_t
 
cmd
;

6507 i‡–
	`z˛SE_P¨£InCmd_PublishDebtLog
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

6508 
pInMsg
->
pD©aLí
 ) =
ZSuc˚ss
 )

6510 
pCBs
->
	`p‚Pª∑ymít_PublishDebtLog
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6511 
pInMsg
->
hdr
.
å™sSeqNum
 );

6514 i‡–
cmd
.
pPaylﬂd
 !
NULL
 )

6516 
	`oßl_mem_‰ì
–
cmd
.
pPaylﬂd
 );

6519  
ZSuc˚ss
;

6523  
ZCL_STATUS_SOFTWARE_FAILURE
;

6527  
ZFaûuª
;

6528 
	}
}

6532 #ifde‡
ZCL_TUNNELING


6544 
ZSètus_t
 
	$z˛SE_Pro˚ssInTu¬ñögCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6546 
ZSètus_t
 
°©
;

6548 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

6551  
pInMsg
->
hdr
.
comm™dID
 )

6553 
COMMAND_SE_REQUEST_TUNNEL
:

6554 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tu¬ñög_Reque°Tu¬ñ
–
pInMsg
, 
pCBs
 );

6557 
COMMAND_SE_CLOSE_TUNNEL
:

6558 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tu¬ñög_Clo£Tu¬ñ
–
pInMsg
, 
pCBs
 );

6561 
COMMAND_SE_DATA_CLIENT_SERVER_DIR
:

6562 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tu¬ñög_Tøns„rD©a
–
pInMsg
, 
pCBs
 );

6565 
COMMAND_SE_DATA_ERROR_CLIENT_SERVER_DIR
:

6566 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tu¬ñög_Tøns„rD©aEº‹
–
pInMsg
, 
pCBs
 );

6569 
COMMAND_SE_ACK_CLIENT_SERVER_DIR
:

6570 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tu¬ñög_AckTøns„rD©a
–
pInMsg
, 
pCBs
 );

6573 
COMMAND_SE_READY_DATA_CLIENT_SERVER_DIR
:

6574 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tu¬ñög_RódyD©a
–
pInMsg
, 
pCBs
 );

6577 #ifde‡
SE_UK_EXT


6578 
COMMAND_SE_GET_SUPP_TUNNEL_PROTOCOLS
:

6579 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tu¬ñög_GëSuµTu¬ñPrŸ
–
pInMsg
, 
pCBs
 );

6584 
°©
 = 
ZFaûuª
;

6591  
pInMsg
->
hdr
.
comm™dID
 )

6593 
COMMAND_SE_REQUEST_TUNNEL_RESPONSE
:

6594 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tu¬ñög_ReqTu¬ñR•
–
pInMsg
, 
pCBs
 );

6597 
COMMAND_SE_DATA_SERVER_CLIENT_DIR
:

6598 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tu¬ñög_Tøns„rD©a
–
pInMsg
, 
pCBs
 );

6601 
COMMAND_SE_DATA_ERROR_SERVER_CLIENT_DIR
:

6602 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tu¬ñög_Tøns„rD©aEº‹
–
pInMsg
, 
pCBs
 );

6605 
COMMAND_SE_ACK_SERVER_CLIENT_DIR
:

6606 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tu¬ñög_AckTøns„rD©a
–
pInMsg
, 
pCBs
 );

6609 
COMMAND_SE_READY_DATA_SERVER_CLIENT_DIR
:

6610 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tu¬ñög_RódyD©a
–
pInMsg
, 
pCBs
 );

6613 #ifde‡
SE_UK_EXT


6614 
COMMAND_SE_SUPP_TUNNEL_PROTOCOLS_RSP
:

6615 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tu¬ñög_SuµTu¬ñPrŸR•
–
pInMsg
, 
pCBs
 );

6618 
COMMAND_SE_TUNNEL_CLOSURE_NOTIFICATION
:

6619 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tu¬ñög_Tu¬ñClosuªNŸifiˇti⁄
–
pInMsg
, 
pCBs
 );

6623 
°©
 = 
ZFaûuª
;

6629  ( 
°©
 );

6630 
	}
}

6644 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tu¬ñög_Reque°Tu¬ñ
–
z˛Incomög_t
 *
pInMsg
,

6645 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6647 i‡–
pCBs
->
p‚Tu¬ñög_Reque°Tu¬ñ
 )

6649 
z˛CCReque°Tu¬ñ_t
 
cmd
;

6651 
cmd
.
¥ŸocﬁId
 = 
pInMsg
->
pD©a
[0];

6652 
cmd
.
m™uÁ˘uªrCode
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[1],ÖInMsg->pData[2] );

6653 
cmd
.
ÊowC⁄åﬁSuµ‹t
 = 
pInMsg
->
pD©a
[3];

6654 
cmd
.
maxInTøns„rSize
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[4],ÖInMsg->pData[5] );

6656 
pCBs
->
	`p‚Tu¬ñög_Reque°Tu¬ñ
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6657 
pInMsg
->
hdr
.
å™sSeqNum
 );

6658  
ZCL_STATUS_CMD_HAS_RSP
;

6661  
ZFaûuª
;

6662 
	}
}

6675 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tu¬ñög_ReqTu¬ñR•
–
z˛Incomög_t
 *
pInMsg
,

6676 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6678 i‡–
pCBs
->
p‚Tu¬ñög_ReqTu¬ñR•
 )

6681 
z˛CCReqTu¬ñR•_t
 
cmd
;

6683 
cmd
.
tu¬ñId
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

6684 
cmd
.
tu¬ñSètus
 = 
pInMsg
->
pD©a
[2];

6685 
cmd
.
maxInTøns„rSize
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[3],ÖInMsg->pData[4] );

6687 
pCBs
->
	`p‚Tu¬ñög_ReqTu¬ñR•
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6688 
pInMsg
->
hdr
.
å™sSeqNum
 );

6689  
ZSuc˚ss
;

6692  
ZFaûuª
;

6693 
	}
}

6706 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tu¬ñög_Clo£Tu¬ñ
–
z˛Incomög_t
 *
pInMsg
,

6707 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6709 i‡–
pCBs
->
p‚Tu¬ñög_Clo£Tu¬ñ
 )

6711 
z˛CCClo£Tu¬ñ_t
 
cmd
;

6713 
cmd
.
tu¬ñId
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

6715 
pCBs
->
	`p‚Tu¬ñög_Clo£Tu¬ñ
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6716 
pInMsg
->
hdr
.
å™sSeqNum
 );

6717  
ZSuc˚ss
;

6720  
ZFaûuª
;

6721 
	}
}

6735 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tu¬ñög_Tøns„rD©a
–
z˛Incomög_t
 *
pInMsg
,

6736 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6738 i‡–
pCBs
->
p‚Tu¬ñög_Tøns„rD©a
 )

6740 
z˛CCTøns„rD©a_t
 
cmd
;

6741 
uöt16
 
d©aLí
 = 
pInMsg
->
pD©aLí
 - 
PACKET_LEN_SE_TUNNELING_TRANSFER_DATA
;

6743 
	`z˛SE_P¨£InCmd_Tøns„rD©a
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

6745 
pCBs
->
	`p‚Tu¬ñög_Tøns„rD©a
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6746 
pInMsg
->
hdr
.
comm™dID
, 
d©aLí
,

6747 
pInMsg
->
hdr
.
å™sSeqNum
 );

6748  
ZCL_STATUS_CMD_HAS_RSP
;

6751  
ZFaûuª
;

6752 
	}
}

6765 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tu¬ñög_Tøns„rD©aEº‹
–
z˛Incomög_t
 *
pInMsg
,

6766 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6768 i‡–
pCBs
->
p‚Tu¬ñög_Tøns„rD©aEº‹
 )

6770 
z˛CCTøns„rD©aEº‹_t
 
cmd
;

6772 
cmd
.
tu¬ñId
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

6773 
cmd
.
å™s„rD©aSètus
 = 
pInMsg
->
pD©a
[2];

6775 
pCBs
->
	`p‚Tu¬ñög_Tøns„rD©aEº‹
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6776 
pInMsg
->
hdr
.
å™sSeqNum
 );

6777  
ZSuc˚ss
;

6780  
ZFaûuª
;

6781 
	}
}

6794 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tu¬ñög_AckTøns„rD©a
–
z˛Incomög_t
 *
pInMsg
,

6795 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6797 i‡–
pCBs
->
p‚Tu¬ñög_AckTøns„rD©a
 )

6799 
z˛CCAckTøns„rD©a_t
 
cmd
;

6801 
cmd
.
tu¬ñId
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

6802 
cmd
.
numbîOfByãsLe·
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

6804 
pCBs
->
	`p‚Tu¬ñög_AckTøns„rD©a
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6805 
pInMsg
->
hdr
.
comm™dID
,

6806 
pInMsg
->
hdr
.
å™sSeqNum
 );

6807  
ZSuc˚ss
;

6810  
ZFaûuª
;

6811 
	}
}

6824 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tu¬ñög_RódyD©a
–
z˛Incomög_t
 *
pInMsg
,

6825 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6827 i‡–
pCBs
->
p‚Tu¬ñög_RódyD©a
 )

6829 
z˛CCRódyD©a_t
 
cmd
;

6831 
cmd
.
tu¬ñId
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

6832 
cmd
.
numbîOfO˘ësLe·
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

6834 
pCBs
->
	`p‚Tu¬ñög_RódyD©a
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6835 
pInMsg
->
hdr
.
comm™dID
,

6836 
pInMsg
->
hdr
.
å™sSeqNum
 );

6837  
ZSuc˚ss
;

6840  
ZFaûuª
;

6841 
	}
}

6843 #ifde‡
SE_UK_EXT


6856 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tu¬ñög_GëSuµTu¬ñPrŸ
–
z˛Incomög_t
 *
pInMsg
,

6857 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6859 i‡–
pCBs
->
p‚Tu¬ñög_GëSuµTu¬ñPrŸ
 )

6861 
z˛CCGëSuµTu¬PrŸ_t
 
cmd
;

6863 
cmd
.
¥ŸocﬁOff£t
 = 
pInMsg
->
pD©a
[0];

6865 
pCBs
->
	`p‚Tu¬ñög_GëSuµTu¬ñPrŸ
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6866 
pInMsg
->
hdr
.
å™sSeqNum
 );

6868  
ZCL_STATUS_CMD_HAS_RSP
;

6871  
ZFaûuª
;

6872 
	}
}

6887 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tu¬ñög_SuµTu¬ñPrŸR•
–
z˛Incomög_t
 *
pInMsg
,

6888 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6890 i‡–
pCBs
->
p‚Tu¬ñög_SuµTu¬ñPrŸR•
 )

6892 
z˛CCSuµTu¬PrŸR•_t
 *
pCmd
;

6893 
uöt8
 
i
;

6894 
uöt8
 *
buf
;

6896 
pCmd
 = ( 
z˛CCSuµTu¬PrŸR•_t
 * )
	`oßl_mem_Æloc
( ( zclCCSuppTunnProtRsp_t ) +

6897 (–
z˛CCPrŸocﬁPaylﬂd_t
 ) * 
pInMsg
->
pD©a
[1]) );

6898 i‡–
pCmd
 !
NULL
 )

6900 
buf
 = &(
pInMsg
->
pD©a
[0]);

6902 
pCmd
->
¥ŸocﬁLi°Comp
 = *
buf
++;

6903 
pCmd
->
¥ŸocﬁCou¡
 = *
buf
++;

6905  
i
 = 0; i < 
pCmd
->
¥ŸocﬁCou¡
; i++ )

6907 
pCmd
->
¥Ÿocﬁ
[
i
].
m™uÁ˘uªrCode
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

6908 
buf
 += 2;

6909 
pCmd
->
¥Ÿocﬁ
[
i
].
¥ŸocﬁId
 = *
buf
++;

6912 
pCBs
->
	`p‚Tu¬ñög_SuµTu¬ñPrŸR•
–
pCmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

6914 
	`oßl_mem_‰ì
–
pCmd
 );

6916  
ZCL_STATUS_CMD_HAS_RSP
;

6920  
ZCL_STATUS_SOFTWARE_FAILURE
;

6924  
ZFaûuª
;

6925 
	}
}

6938 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tu¬ñög_Tu¬ñClosuªNŸifiˇti⁄
–
z˛Incomög_t
 *
pInMsg
,

6939 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6941 i‡–
pCBs
->
p‚Tu¬ñög_Tu¬ñClosuªNŸifiˇti⁄
 )

6943 
z˛CCTu¬ñClosuªNŸifiˇti⁄_t
 
cmd
;

6945 
cmd
.
tu¬ñId
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

6947 
pCBs
->
	`p‚Tu¬ñög_Tu¬ñClosuªNŸifiˇti⁄
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

6948 
pInMsg
->
hdr
.
å™sSeqNum
 );

6950  
ZSuc˚ss
;

6953  
ZFaûuª
;

6954 
	}
}

6958 #ifde‡
ZCL_TOU


6959 #ifde‡
SE_UK_EXT


6971 
ZSètus_t
 
	$z˛SE_Pro˚ssInTouCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

6973 
ZSètus_t
 
°©
;

6975 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

6978  
pInMsg
->
hdr
.
comm™dID
 )

6980 
COMMAND_SE_GET_CALENDAR
:

6981 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tou_GëCÆíd¨
–
pInMsg
, 
pCBs
 );

6984 
COMMAND_SE_GET_DAY_PROFILES
:

6985 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tou_GëDayProfûes
–
pInMsg
, 
pCBs
 );

6988 
COMMAND_SE_GET_WEEK_PROFILES
:

6989 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tou_GëWìkProfûes
–
pInMsg
, 
pCBs
 );

6992 
COMMAND_SE_GET_SEASONS
:

6993 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tou_GëSós⁄s
–
pInMsg
, 
pCBs
 );

6996 
COMMAND_SE_GET_SPECIAL_DAYS
:

6997 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tou_GëS≥cülDays
–
pInMsg
, 
pCBs
 );

7001 
°©
 = 
ZFaûuª
;

7008  
pInMsg
->
hdr
.
comm™dID
 )

7010 
COMMAND_SE_PUBLISH_CALENDAR
:

7011 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tou_PublishCÆíd¨
–
pInMsg
, 
pCBs
 );

7014 
COMMAND_SE_PUBLISH_DAY_PROFILE
:

7015 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tou_PublishDayProfûe
–
pInMsg
, 
pCBs
 );

7018 
COMMAND_SE_PUBLISH_WEEK_PROFILE
:

7019 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tou_PublishWìkProfûe
–
pInMsg
, 
pCBs
 );

7022 
COMMAND_SE_PUBLISH_SEASONS
:

7023 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tou_PublishSós⁄s
–
pInMsg
, 
pCBs
 );

7026 
COMMAND_SE_PUBLISH_SPECIAL_DAYS
:

7027 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Tou_PublishS≥cülDays
–
pInMsg
, 
pCBs
 );

7031 
°©
 = 
ZFaûuª
;

7036  ( 
°©
 );

7037 
	}
}

7050 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tou_PublishCÆíd¨
–
z˛Incomög_t
 *
pInMsg
,

7051 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7053 i‡–
pCBs
->
p‚Tou_PublishCÆíd¨
 )

7055 
z˛CCPublishCÆíd¨_t
 
cmd
;

7057 
	`z˛SE_P¨£InCmd_PublishCÆíd¨
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

7059 
pCBs
->
	`p‚Tou_PublishCÆíd¨
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7060 
pInMsg
->
hdr
.
å™sSeqNum
 );

7061  
ZSuc˚ss
;

7064  
ZFaûuª
;

7065 
	}
}

7079 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tou_PublishDayProfûe
–
z˛Incomög_t
 *
pInMsg
,

7080 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7082 i‡–
pCBs
->
p‚Tou_PublishDayProfûe
 )

7084 
z˛CCPublishDayProfûe_t
 
cmd
;

7086 i‡–
	`z˛SE_P¨£InCmd_PublishDayProfûe
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

7087 
pInMsg
->
pD©aLí
 ) =
ZSuc˚ss
 )

7089 
pCBs
->
	`p‚Tou_PublishDayProfûe
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7090 
pInMsg
->
hdr
.
å™sSeqNum
 );

7093 i‡–
cmd
.
pScheduÀE¡rõs
 !
NULL
 )

7095 
	`oßl_mem_‰ì
–
cmd
.
pScheduÀE¡rõs
 );

7098  
ZSuc˚ss
;

7102  
ZCL_STATUS_SOFTWARE_FAILURE
;

7106  
ZFaûuª
;

7107 
	}
}

7120 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tou_PublishWìkProfûe
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7122 i‡–
pCBs
->
p‚Tou_PublishWìkProfûe
 )

7124 
z˛CCPublishWìkProfûe_t
 
cmd
;

7127 
cmd
.
issuîCÆíd¨Id
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4 );

7129 
cmd
.
wìkId
 = 
pInMsg
->
pD©a
[4];

7130 
cmd
.
dayIdRefM⁄day
 = 
pInMsg
->
pD©a
[5];

7131 
cmd
.
dayIdRefTue°day
 = 
pInMsg
->
pD©a
[6];

7132 
cmd
.
dayIdRefWed√sday
 = 
pInMsg
->
pD©a
[7];

7133 
cmd
.
dayIdRefThursday
 = 
pInMsg
->
pD©a
[8];

7134 
cmd
.
dayIdRefFriday
 = 
pInMsg
->
pD©a
[9];

7135 
cmd
.
dayIdRefS©urday
 = 
pInMsg
->
pD©a
[10];

7136 
cmd
.
dayIdRefSunday
 = 
pInMsg
->
pD©a
[11];

7138 
pCBs
->
	`p‚Tou_PublishWìkProfûe
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7139 
pInMsg
->
hdr
.
å™sSeqNum
 );

7141  
ZSuc˚ss
;

7144  
ZFaûuª
;

7145 
	}
}

7159 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tou_PublishSós⁄s
–
z˛Incomög_t
 *
pInMsg
,

7160 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7162 i‡–
pCBs
->
p‚Tou_PublishSós⁄s
 )

7164 
z˛CCPublishSós⁄s_t
 
cmd
;

7167 i‡–
	`z˛SE_P¨£InCmd_PublishSós⁄s
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

7168 
pInMsg
->
pD©aLí
 ) =
ZSuc˚ss
 )

7170 
pCBs
->
	`p‚Tou_PublishSós⁄s
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7171 
pInMsg
->
hdr
.
å™sSeqNum
 );

7174 i‡–
cmd
.
pSós⁄E¡ry
 !
NULL
 )

7176 
	`oßl_mem_‰ì
–
cmd
.
pSós⁄E¡ry
 );

7179  
ZSuc˚ss
;

7183  
ZCL_STATUS_SOFTWARE_FAILURE
;

7187  
ZFaûuª
;

7188 
	}
}

7202 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tou_PublishS≥cülDays
–
z˛Incomög_t
 *
pInMsg
,

7203 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7205 i‡–
pCBs
->
p‚Tou_PublishS≥cülDays
 )

7207 
z˛CCPublishS≥cülDays_t
 
cmd
;

7210 i‡–
	`z˛SE_P¨£InCmd_PublishS≥cülDays
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

7211 
pInMsg
->
pD©aLí
 ) =
ZSuc˚ss
 )

7213 
pCBs
->
	`p‚Tou_PublishS≥cülDays
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7214 
pInMsg
->
hdr
.
å™sSeqNum
 );

7217 i‡–
cmd
.
pS≥cülDayE¡ry
 !
NULL
 )

7219 
	`oßl_mem_‰ì
–
cmd
.
pS≥cülDayE¡ry
 );

7222  
ZSuc˚ss
;

7226  
ZCL_STATUS_SOFTWARE_FAILURE
;

7230  
ZFaûuª
;

7231 
	}
}

7245 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tou_GëCÆíd¨
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7247 i‡–
pCBs
->
p‚Tou_GëCÆíd¨
 )

7249 
z˛CCGëCÆíd¨_t
 
cmd
;

7252 
cmd
.
°¨tTime
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4 );

7254 
cmd
.
numOfCÆíd¨s
 = 
pInMsg
->
pD©a
[4];

7255 
cmd
.
ˇÀnd¨Ty≥
 = 
pInMsg
->
pD©a
[5];

7257 
pCBs
->
	`p‚Tou_GëCÆíd¨
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7258 
pInMsg
->
hdr
.
å™sSeqNum
 );

7260  
ZCL_STATUS_CMD_HAS_RSP
;

7263  
ZFaûuª
;

7264 
	}
}

7278 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tou_GëDayProfûes
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7280 i‡–
pCBs
->
p‚Tou_GëDayProfûes
 )

7282 
z˛CCGëDayProfûes_t
 
cmd
;

7285 
cmd
.
issuîCÆíd¨Id
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4 );

7287 
pCBs
->
	`p‚Tou_GëDayProfûes
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7288 
pInMsg
->
hdr
.
å™sSeqNum
 );

7290  
ZCL_STATUS_CMD_HAS_RSP
;

7293  
ZFaûuª
;

7294 
	}
}

7308 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tou_GëWìkProfûes
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7310 i‡–
pCBs
->
p‚Tou_GëWìkProfûes
 )

7312 
z˛CCGëWìkProfûes_t
 
cmd
;

7315 
cmd
.
issuîCÆíd¨Id
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4 );

7317 
pCBs
->
	`p‚Tou_GëWìkProfûes
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7318 
pInMsg
->
hdr
.
å™sSeqNum
 );

7320  
ZCL_STATUS_CMD_HAS_RSP
;

7323  
ZFaûuª
;

7324 
	}
}

7338 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tou_GëSós⁄s
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7340 i‡–
pCBs
->
p‚Tou_GëSós⁄s
 )

7342 
z˛CCGëSós⁄s_t
 
cmd
;

7345 
cmd
.
issuîCÆíd¨Id
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4 );

7347 
pCBs
->
	`p‚Tou_GëSós⁄s
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7348 
pInMsg
->
hdr
.
å™sSeqNum
 );

7350  
ZCL_STATUS_CMD_HAS_RSP
;

7353  
ZFaûuª
;

7354 
	}
}

7368 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Tou_GëS≥cülDays
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7370 i‡–
pCBs
->
p‚Tou_GëS≥cülDays
 )

7372 
z˛CCGëS≥cülDays_t
 
cmd
;

7375 
cmd
.
°¨tTime
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4 );

7377 
cmd
.
numOfEvíts
 = 
pInMsg
->
pD©a
[4];

7378 
cmd
.
ˇÀnd¨Ty≥
 = 
pInMsg
->
pD©a
[5];

7380 
pCBs
->
	`p‚Tou_GëS≥cülDays
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7381 
pInMsg
->
hdr
.
å™sSeqNum
 );

7383  
ZCL_STATUS_CMD_HAS_RSP
;

7386  
ZFaûuª
;

7387 
	}
}

7391 #ifde‡
ZCL_DEVICE_MGMT


7392 #ifde‡
SE_UK_EXT


7404 
ZSètus_t
 
	$z˛SE_Pro˚ssInDevi˚MgmtCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7406 
ZSètus_t
 
°©
;

7408 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

7411  
pInMsg
->
hdr
.
comm™dID
 )

7413 
COMMAND_SE_GET_CHANGE_OF_TENANCY
:

7414 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Devi˚Mgmt_GëCh™geTí™cy
–
pInMsg
, 
pCBs
 );

7417 
COMMAND_SE_GET_CHANGE_OF_SUPPLIER
:

7418 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Devi˚Mgmt_GëCh™geSuµlõr
–
pInMsg
, 
pCBs
 );

7421 
COMMAND_SE_GET_CHANGE_SUPPLY
:

7422 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Devi˚Mgmt_GëCh™geSuµly
–
pInMsg
, 
pCBs
 );

7425 
COMMAND_SE_SUPPLY_STATUS_RESPONSE
:

7426 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Devi˚Mgmt_SuµlySètusRe•⁄£
–
pInMsg
, 
pCBs
 );

7429 
COMMAND_SE_GET_PASSWORD
:

7430 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Devi˚Mgmt_GëPassw‹d
–
pInMsg
, 
pCBs
 );

7434 
°©
 = 
ZFaûuª
;

7441  
pInMsg
->
hdr
.
comm™dID
 )

7443 
COMMAND_SE_PUBLISH_CHANGE_OF_TENANCY
:

7444 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Devi˚Mgmt_PublishCh™geTí™cy
–
pInMsg
, 
pCBs
 );

7447 
COMMAND_SE_PUBLISH_CHANGE_OF_SUPPLIER
:

7448 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Devi˚Mgmt_PublishCh™geSuµlõr
–
pInMsg
, 
pCBs
 );

7451 
COMMAND_SE_CHANGE_SUPPLY
:

7452 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Devi˚Mgmt_Ch™geSuµly
–
pInMsg
, 
pCBs
 );

7455 
COMMAND_SE_CHANGE_PASSWORD
:

7456 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Devi˚Mgmt_Ch™gePassw‹d
–
pInMsg
, 
pCBs
 );

7459 
COMMAND_SE_LOCAL_CHANGE_SUPPLY
:

7460 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Devi˚Mgmt_LoˇlCh™geSuµly
–
pInMsg
, 
pCBs
 );

7464 
°©
 = 
ZFaûuª
;

7469  ( 
°©
 );

7470 
	}
}

7484 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Devi˚Mgmt_GëCh™geTí™cy
–
z˛Incomög_t
 *
pInMsg
,

7485 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7487 i‡–
pCBs
->
p‚Devi˚Mgmt_GëCh™geTí™cy
 )

7489 
pCBs
->
	`p‚Devi˚Mgmt_GëCh™geTí™cy
–&(
pInMsg
->
msg
->
§cAddr
),

7490 
pInMsg
->
hdr
.
å™sSeqNum
 );

7492  
ZCL_STATUS_CMD_HAS_RSP
;

7495  
ZFaûuª
;

7496 
	}
}

7510 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Devi˚Mgmt_GëCh™geSuµlõr
–
z˛Incomög_t
 *
pInMsg
,

7511 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7513 i‡–
pCBs
->
p‚Devi˚Mgmt_GëCh™geSuµlõr
 )

7515 
pCBs
->
	`p‚Devi˚Mgmt_GëCh™geSuµlõr
–&(
pInMsg
->
msg
->
§cAddr
),

7516 
pInMsg
->
hdr
.
å™sSeqNum
 );

7518  
ZCL_STATUS_CMD_HAS_RSP
;

7521  
ZFaûuª
;

7522 
	}
}

7536 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Devi˚Mgmt_GëCh™geSuµly
–
z˛Incomög_t
 *
pInMsg
,

7537 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7539 i‡–
pCBs
->
p‚Devi˚Mgmt_GëCh™geSuµly
 )

7541 
pCBs
->
	`p‚Devi˚Mgmt_GëCh™geSuµly
–&(
pInMsg
->
msg
->
§cAddr
),

7542 
pInMsg
->
hdr
.
å™sSeqNum
 );

7544  
ZCL_STATUS_CMD_HAS_RSP
;

7547  
ZFaûuª
;

7548 
	}
}

7561 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Devi˚Mgmt_SuµlySètusRe•⁄£
–
z˛Incomög_t
 *
pInMsg
,

7562 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7564 i‡–
pCBs
->
p‚Devi˚Mgmt_SuµlySètusRe•⁄£
 )

7566 
z˛CCSuµlySètusRe•⁄£_t
 
cmd
;

7568 
cmd
.
suµlõrId
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4);

7569 
cmd
.
issuîEvítId
 = 
	`oßl_buûd_uöt32
–&
pInMsg
->
pD©a
[4], 4);

7570 
cmd
.
im∂emíèti⁄D©eTime
 = 
	`oßl_buûd_uöt32
–&
pInMsg
->
pD©a
[8], 4);

7571 
cmd
.
suµlySètus
 = 
pInMsg
->
pD©a
[12];

7573 
pCBs
->
	`p‚Devi˚Mgmt_SuµlySètusRe•⁄£
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

7575  
ZSuc˚ss
;

7578  
ZFaûuª
;

7579 
	}
}

7593 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Devi˚Mgmt_GëPassw‹d
–
z˛Incomög_t
 *
pInMsg
,

7594 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7596 i‡–
pCBs
->
p‚Devi˚Mgmt_GëPassw‹d
 )

7598 
z˛CCGëPassw‹d_t
 
cmd
;

7600 
cmd
.
∑ssw‹dLevñ
 = 
pInMsg
->
pD©a
[0];

7602 
pCBs
->
	`p‚Devi˚Mgmt_GëPassw‹d
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

7604  
ZCL_STATUS_CMD_HAS_RSP
;

7607  
ZFaûuª
;

7608 
	}
}

7621 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Devi˚Mgmt_PublishCh™geTí™cy
–
z˛Incomög_t
 *
pInMsg
,

7622 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7624 i‡–
pCBs
->
p‚Devi˚Mgmt_PublishCh™geTí™cy
 )

7626 
z˛CCPublishCh™geTí™cy_t
 
cmd
;

7629 
	`z˛SE_P¨£InCmd_PublishCh™geTí™cy
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

7630 
pInMsg
->
pD©aLí
 );

7632 
pCBs
->
	`p‚Devi˚Mgmt_PublishCh™geTí™cy
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7633 
pInMsg
->
hdr
.
å™sSeqNum
 );

7634  
ZSuc˚ss
;

7637  
ZFaûuª
;

7638 
	}
}

7651 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Devi˚Mgmt_PublishCh™geSuµlõr
–
z˛Incomög_t
 *
pInMsg
,

7652 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7654 i‡–
pCBs
->
p‚Devi˚Mgmt_PublishCh™geSuµlõr
 )

7656 
z˛CCPublishCh™geSuµlõr_t
 
cmd
;

7659 
	`z˛SE_P¨£InCmd_PublishCh™geSuµlõr
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

7660 
pInMsg
->
pD©aLí
 );

7662 
pCBs
->
	`p‚Devi˚Mgmt_PublishCh™geSuµlõr
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7663 
pInMsg
->
hdr
.
å™sSeqNum
 );

7664  
ZSuc˚ss
;

7667  
ZFaûuª
;

7668 
	}
}

7682 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Devi˚Mgmt_Ch™geSuµly
–
z˛Incomög_t
 *
pInMsg
,

7683 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7685 i‡–
pCBs
->
p‚Devi˚Mgmt_Ch™geSuµly
 )

7687 
z˛CCCh™geSuµly_t
 
cmd
;

7690 
	`z˛SE_P¨£InCmd_Ch™geSuµly
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

7692 
pCBs
->
	`p‚Devi˚Mgmt_Ch™geSuµly
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7693 
pInMsg
->
hdr
.
å™sSeqNum
 );

7694  
ZCL_STATUS_CMD_HAS_RSP
;

7697  
ZFaûuª
;

7698 
	}
}

7711 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Devi˚Mgmt_Ch™gePassw‹d
–
z˛Incomög_t
 *
pInMsg
,

7712 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7714 i‡–
pCBs
->
p‚Devi˚Mgmt_Ch™gePassw‹d
 )

7716 
z˛CCCh™gePassw‹d_t
 
cmd
;

7719 
	`z˛SE_P¨£InCmd_Ch™gePassw‹d
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

7721 
pCBs
->
	`p‚Devi˚Mgmt_Ch™gePassw‹d
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7722 
pInMsg
->
hdr
.
å™sSeqNum
 );

7723  
ZSuc˚ss
;

7726  
ZFaûuª
;

7727 
	}
}

7740 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Devi˚Mgmt_LoˇlCh™geSuµly
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

7742 i‡–
pCBs
->
p‚Devi˚Mgmt_LoˇlCh™geSuµly
 )

7744 
z˛CCLoˇlCh™geSuµly_t
 
cmd
;

7746 
cmd
.
¥›SuµlySètus
 = 
pInMsg
->
pD©a
[0];

7748 
pCBs
->
	`p‚Devi˚Mgmt_LoˇlCh™geSuµly
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

7749 
pInMsg
->
hdr
.
å™sSeqNum
 );

7751  
ZSuc˚ss
;

7754  
ZFaûuª
;

7755 
	}
}

7759 #ifde‡
ZCL_PRICING


7772 
ZSètus_t
 
	$z˛SE_P¨£InCmd_PublishPri˚
–
z˛CCPublishPri˚_t
 *
pCmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

7774 
uöt8
 
‹igöÆLí
;

7777 
pCmd
->
¥ovidîId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7778 
buf
 += 4;

7781 
pCmd
->
øãLabñ
.
°rLí
 = *
buf
++;

7782 i‡–
pCmd
->
øãLabñ
.
°rLí
 =
SE_OPTIONAL_FIELD_UINT8
 )

7785 
pCmd
->
øãLabñ
.
°rLí
 = 0;

7788 i‡–
pCmd
->
øãLabñ
.
°rLí
 != 0 )

7790 
‹igöÆLí
 = 
pCmd
->
øãLabñ
.
°rLí
;

7793 i‡–
pCmd
->
øãLabñ
.
°rLí
 > (
SE_RATE_LABEL_LEN
-1) )

7795 
pCmd
->
øãLabñ
.
°rLí
 = (
SE_RATE_LABEL_LEN
-1);

7798 
pCmd
->
øãLabñ
.
pSå
 = 
	`oßl_mem_Æloc
–pCmd->øãLabñ.
°rLí
 );

7799 i‡–
pCmd
->
øãLabñ
.
pSå
 =
NULL
 )

7801  
ZMemEº‹
;

7803 
	`oßl_mem˝y
–
pCmd
->
øãLabñ
.
pSå
, 
buf
,ÖCmd->øãLabñ.
°rLí
 );

7804 
buf
 +
‹igöÆLí
;

7808 
pCmd
->
øãLabñ
.
pSå
 = 
NULL
;

7811 
pCmd
->
issuîEvítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7812 
buf
 += 4;

7814 
pCmd
->
cuºítTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7815 
buf
 += 4;

7817 
pCmd
->
unôOfMósuª
 = *
buf
++;

7818 
pCmd
->
cuºícy
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

7819 
buf
 += 2;

7821 
pCmd
->
¥i˚TøûögDigô
 = *
buf
++;

7822 
pCmd
->
numbîOfPri˚Tõrs
 = *
buf
++;

7823 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7824 
buf
 += 4;

7826 
pCmd
->
duøti⁄InMöuãs
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

7827 
buf
 += 2;

7829 
pCmd
->
¥i˚
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7830 
buf
 += 4;

7832 
pCmd
->
¥i˚R©io
 = *
buf
++;

7833 
pCmd
->
gíî©i⁄Pri˚
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7834 
buf
 += 4;

7836 
pCmd
->
gíî©i⁄Pri˚R©io
 = *
buf
++;

7839 i‡((
Àn
 - 
pCmd
->
øãLabñ
.
°rLí
Ë> 
PACKET_LEN_SE_PUBLISH_PRICE_SE_1_0
)

7841 
pCmd
->
Æã∫©eCo°Dñivîed
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7842 
buf
 += 4;

7844 
pCmd
->
Æã∫©eCo°Unô
 = *
buf
++;

7846 
pCmd
->
Æã∫©eCo°TøûögDigô
 = *
buf
++;

7848 
pCmd
->
numbîOfBlockThªshﬁds
 = *
buf
++;

7850 
pCmd
->
¥i˚C⁄åﬁ
 = *
buf
;

7855 
pCmd
->
Æã∫©eCo°Dñivîed
 = 
SE_OPTIONAL_FIELD_UINT32
;

7856 
pCmd
->
Æã∫©eCo°Unô
 = 
SE_OPTIONAL_FIELD_UINT8
;

7857 
pCmd
->
Æã∫©eCo°TøûögDigô
 = 
SE_OPTIONAL_FIELD_UINT8
;

7858 
pCmd
->
numbîOfBlockThªshﬁds
 = 
SE_OPTIONAL_FIELD_UINT8
;

7859 
pCmd
->
¥i˚C⁄åﬁ
 = 
SE_OPTIONAL_FIELD_UINT8
;

7862  
ZSuc˚ss
;

7863 
	}
}

7876 
	$z˛SE_P¨£InCmd_PublishBlockPîiod
–
z˛CCPublishBlockPîiod_t
 *
pCmd
,

7877 
uöt8
 *
buf
, uöt8 
Àn
 )

7879 ()
Àn
;

7882 
pCmd
->
¥ovidîId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7883 
buf
 += 4;

7885 
pCmd
->
issuîEvítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7886 
buf
 += 4;

7888 
pCmd
->
blockPîiodSèπTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7889 
buf
 += 4;

7891 
pCmd
->
blockPîiodDurInMös
 = 
	`oßl_buûd_uöt32
–
buf
, 3 );

7892 
buf
 += 3;

7894 
pCmd
->
numPri˚TõrsAndBlock
 = *
buf
++;

7896 #ifde‡
SE_UK_EXT


7897 
pCmd
->
èriffTy≥
 = *
buf
++;

7900 
pCmd
->
blockPîiodC⁄åﬁ
 = *
buf
;

7901 
	}
}

7903 #ifde‡
SE_UK_EXT


7915 
	$z˛SE_P¨£InCmd_PublishT¨iffInf‹m©i⁄
–
z˛CCPublishT¨iffInf‹m©i⁄_t
 *
pCmd
,

7916 
uöt8
 *
buf
, uöt8 
Àn
 )

7918 
uöt8
 
fõldLí
;

7919 ()
Àn
;

7922 
pCmd
->
suµlõrId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7923 
buf
 += 4;

7924 
pCmd
->
issuîT¨iffId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7925 
buf
 += 4;

7926 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7927 
buf
 += 4;

7928 
pCmd
->
èriffTy≥
 = *
buf
++;

7930 
fõldLí
 = 
	`z˛SE_P¨£_UTF8Såög
(
buf
, &
pCmd
->
èrifLabñ
, 
SE_TARIFF_LABEL_LEN
);

7931 
buf
 +
fõldLí
;

7933 
pCmd
->
numPri˚TõrsInU£
 = *
buf
++;

7934 
pCmd
->
numBlockThªshﬁdsInU£
 = *
buf
++;

7935 
pCmd
->
unôOfMósuª
 = *
buf
++;

7936 
pCmd
->
cuºícy
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

7937 
buf
 += 2;

7938 
pCmd
->
¥i˚TøûögDigô
 = *
buf
++;

7939 
pCmd
->
°™dögCh¨ge
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7940 
buf
 += 4;

7941 
pCmd
->
tõrBlockMode
 = *
buf
++;

7942 
pCmd
->
blockThªshﬁdMask
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

7943 
buf
 += 2;

7944 
pCmd
->
BlockThªshﬁdMu…ùlõr
 = 
	`oßl_buûd_uöt32
–
buf
, 3 );

7945 
buf
 += 3;

7946 
pCmd
->
BlockThªshﬁdDivis‹
 = 
	`oßl_buûd_uöt32
–
buf
, 3 );

7947 
	}
}

7961 
ZSètus_t
 
	$z˛SE_P¨£InCmd_PublishPri˚M©rix
–
z˛CCPublishPri˚M©rix_t
 *
pCmd
,

7962 
uöt8
 *
buf
, uöt8 
Àn
 )

7965 
pCmd
->
issuîT¨iffId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7966 
buf
 += 4;

7968 
pCmd
->
comm™dIndex
 = *
buf
++;

7969 
pCmd
->
numEÀmíts
 = (
Àn
 - 
PACKET_LEN_SE_MIN_PUBLISH_PRICE_MATRIX
Ë/  (
uöt32
);

7970 
pCmd
->
pTõrBlockPri˚
 = 
NULL
;

7972 i‡–
pCmd
->
numEÀmíts
 )

7974 
pCmd
->
pTõrBlockPri˚
 = 
	`oßl_mem_Æloc
( (
uöt32
Ë*ÖCmd->
numEÀmíts
);

7976 i‡–
pCmd
->
pTõrBlockPri˚
 =
NULL
 )

7978  
ZMemEº‹
;

7981 
uöt8
 
i
;

7983  
i
 = 0; i < 
pCmd
->
numEÀmíts
; i++ )

7985 
pCmd
->
pTõrBlockPri˚
[
i
] = 
	`oßl_buûd_uöt32
–
buf
, 4 );

7986 
buf
 += 4;

7990  
ZSuc˚ss
;

7991 
	}
}

8005 
ZSètus_t
 
	$z˛SE_P¨£InCmd_PublishBlockThªshﬁds
–
z˛CCPublishBlockThªshﬁds_t
 *
pCmd
,

8006 
uöt8
 *
buf
, uöt8 
Àn
 )

8009 
pCmd
->
issuîT¨iffId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8010 
buf
 += 4;

8012 
pCmd
->
comm™dIndex
 = *
buf
++;

8013 
pCmd
->
numEÀmíts
 = (
Àn
 - 
PACKET_LEN_SE_MIN_PUBLISH_BLOCK_THRESHOLD
) / 6;

8014 
pCmd
->
pTõrBlockThªshﬁd
 = 
NULL
;

8016 i‡–
pCmd
->
numEÀmíts
 )

8018 
pCmd
->
pTõrBlockThªshﬁd
 = 
	`oßl_mem_Æloc
(6 *ÖCmd->
numEÀmíts
);

8020 i‡–
pCmd
->
pTõrBlockThªshﬁd
 =
NULL
 )

8022  
ZMemEº‹
;

8025 
uöt8
 
i
;

8027  
i
 = 0; i < 
pCmd
->
numEÀmíts
; i++ )

8029 
	`oßl_mem˝y
–
pCmd
->
pTõrBlockThªshﬁd
[
i
], 
buf
, 6 );

8030 
buf
 += 6;

8034  
ZSuc˚ss
;

8035 
	}
}

8048 
	$z˛SE_P¨£InCmd_PublishC⁄vîsi⁄Fa˘‹
–
z˛CCPublishC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

8049 
uöt8
 *
buf
, uöt8 
Àn
 )

8051 ()
Àn
;

8054 
pCmd
->
issuîEvítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8055 
buf
 += 4;

8056 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8057 
buf
 += 4;

8058 
pCmd
->
c⁄vîsi⁄Fa˘‹
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8059 
buf
 += 4;

8060 
pCmd
->
åaûögDigô
 = *
buf
;

8061 
	}
}

8074 
	$z˛SE_P¨£InCmd_PublishCÆ‹ificVÆue
–
z˛CCPublishCÆ‹ificVÆue_t
 *
pCmd
,

8075 
uöt8
 *
buf
, uöt8 
Àn
 )

8077 ()
Àn
;

8080 
pCmd
->
issuîEvítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8081 
buf
 += 4;

8082 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8083 
buf
 += 4;

8084 
pCmd
->
ˇl‹ificVÆue
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8085 
buf
 += 4;

8086 
pCmd
->
ˇl‹ificVÆueUnô
 = *
buf
++;

8087 
pCmd
->
åaûögDigô
 = *
buf
;

8088 
	}
}

8101 
	$z˛SE_P¨£InCmd_PublishCO2VÆue
–
z˛CCPublishCO2VÆue_t
 *
pCmd
,

8102 
uöt8
 *
buf
, uöt8 
Àn
 )

8104 ()
Àn
;

8107 
pCmd
->
issuîEvítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8108 
buf
 += 4;

8109 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8110 
buf
 += 4;

8111 
pCmd
->
èriffTy≥
 = *
buf
++;

8112 
pCmd
->
CO2VÆue
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8113 
buf
 += 4;

8114 
pCmd
->
CO2VÆueUnô
 = *
buf
++;

8115 
pCmd
->
åaûögDigô
 = *
buf
;

8116 
	}
}

8129 
	$z˛SE_P¨£InCmd_PublishCPPEvít
–
z˛CCPublishCPPEvít_t
 *
pCmd
,

8130 
uöt8
 *
buf
, uöt8 
Àn
 )

8132 ()
Àn
;

8135 
pCmd
->
issuîEvítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8136 
buf
 += 4;

8137 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8138 
buf
 += 4;

8139 
pCmd
->
duøti⁄InMöuãs
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

8140 
buf
 += 2;

8141 
pCmd
->
èriffTy≥
 = *
buf
++;

8142 
pCmd
->
CPPPri˚Tõr
 = *
buf
++;

8143 
pCmd
->
CPPAuth
 = *
buf
;

8144 
	}
}

8157 
	$z˛SE_P¨£InCmd_PublishBûlögPîiod
–
z˛CCPublishBûlögPîiod_t
 *
pCmd
,

8158 
uöt8
 *
buf
, uöt8 
Àn
 )

8160 ()
Àn
;

8163 
pCmd
->
issuîEvítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8164 
buf
 += 4;

8165 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8166 
buf
 += 4;

8167 
pCmd
->
duøti⁄
 = 
	`oßl_buûd_uöt32
–
buf
, 3 );

8168 
buf
 += 3;

8169 
pCmd
->
èriffTy≥
 = *
buf
;

8170 
	}
}

8183 
	$z˛SE_P¨£InCmd_PublishC⁄sﬁid©edBûl
–
z˛CCPublishC⁄sﬁid©edBûl_t
 *
pCmd
,

8184 
uöt8
 *
buf
, uöt8 
Àn
 )

8186 ()
Àn
;

8189 
pCmd
->
issuîEvítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8190 
buf
 += 4;

8191 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8192 
buf
 += 4;

8193 
pCmd
->
duøti⁄
 = 
	`oßl_buûd_uöt32
–
buf
, 3 );

8194 
buf
 += 3;

8195 
pCmd
->
èriffTy≥
 = *
buf
++;

8196 
pCmd
->
c⁄sﬁid©edBûl
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8197 
buf
 += 4;

8198 
pCmd
->
cuºícy
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

8199 
buf
 += 2;

8200 
pCmd
->
åaûögDigô
 = *
buf
;

8201 
	}
}

8214 
	$z˛SE_P¨£InCmd_PublishCªdôPaymítInfo
–
z˛CCPublishCªdôPaymítInfo_t
 *
pCmd
,

8215 
uöt8
 *
buf
, uöt8 
Àn
 )

8218 
pCmd
->
issuîEvítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8219 
buf
 += 4;

8220 
pCmd
->
∑ymítDueD©e
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8221 
buf
 += 4;

8222 
pCmd
->
¸edôPaymítOvîdueAmt
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8223 
buf
 += 4;

8224 
pCmd
->
¸edôPaymítSètus
 = *
buf
++;

8225 
pCmd
->
¸edôPaymít
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8226 
buf
 += 4;

8227 
pCmd
->
¸edôPaymítD©e
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8228 
buf
 += 4;

8229 ()
	`z˛SE_P¨£_UTF8Såög
(
buf
, &
pCmd
->
¸edôPaymítRef
, 
SE_CREDIT_PAYMENT_REF_LEN
);

8230 
	}
}

8243 
	$z˛SE_P¨£InCmd_GëT¨iffInf‹m©i⁄
–
z˛CCGëT¨iffInf‹m©i⁄_t
 *
pCmd
,

8244 
uöt8
 *
buf
, uöt8 
Àn
 )

8246 ()
Àn
;

8249 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8250 
buf
 += 4;

8251 
pCmd
->
numEvíts
 = *
buf
++;

8252 
pCmd
->
èriffTy≥
 = *
buf
;

8253 
	}
}

8266 
	$z˛SE_P¨£InCmd_GëC⁄vîsi⁄Fa˘‹
–
z˛CCGëC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

8267 
uöt8
 *
buf
, uöt8 
Àn
 )

8269 ()
Àn
;

8272 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8273 
buf
 += 4;

8274 
pCmd
->
numEvíts
 = *
buf
;

8275 
	}
}

8288 
	$z˛SE_P¨£InCmd_GëCÆ‹ificVÆue
–
z˛CCGëCÆ‹ificVÆue_t
 *
pCmd
,

8289 
uöt8
 *
buf
, uöt8 
Àn
 )

8291 ()
Àn
;

8294 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8295 
buf
 += 4;

8296 
pCmd
->
numEvíts
 = *
buf
;

8297 
	}
}

8310 
	$z˛SE_P¨£InCmd_GëCO2VÆue
–
z˛CCGëCO2VÆue_t
 *
pCmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

8312 ()
Àn
;

8315 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8316 
buf
 += 4;

8317 
pCmd
->
numEvíts
 = *
buf
++;

8318 
pCmd
->
èriffTy≥
 = *
buf
;

8319 
	}
}

8332 
	$z˛SE_P¨£InCmd_GëBûlögPîiod
–
z˛CCGëBûlögPîiod_t
 *
pCmd
,

8333 
uöt8
 *
buf
, uöt8 
Àn
 )

8335 ()
Àn
;

8338 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8339 
buf
 += 4;

8340 
pCmd
->
numEvíts
 = *
buf
++;

8341 
pCmd
->
èriffTy≥
 = *
buf
;

8342 
	}
}

8355 
	$z˛SE_P¨£InCmd_GëC⁄sﬁid©edBûl
–
z˛CCGëC⁄sﬁid©edBûl_t
 *
pCmd
,

8356 
uöt8
 *
buf
, uöt8 
Àn
 )

8358 ()
Àn
;

8361 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8362 
buf
 += 4;

8363 
pCmd
->
numEvíts
 = *
buf
++;

8364 
pCmd
->
èriffTy≥
 = *
buf
;

8365 
	}
}

8378 
	$z˛SE_P¨£InCmd_CPPEvítRe•⁄£
–
z˛CCCPPEvítRe•⁄£_t
 *
pCmd
,

8379 
uöt8
 *
buf
, uöt8 
Àn
 )

8381 ()
Àn
;

8384 
pCmd
->
issuîEvítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8385 
buf
 += 4;

8386 
pCmd
->
CPPAuth
 = *
buf
;

8387 
	}
}

8391 #ifde‡
ZCL_MESSAGE


8404 
ZSètus_t
 
	$z˛SE_P¨£InCmd_Di•œyMesßge
–
z˛CCDi•œyMesßge_t
 *
pCmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

8406 ()
Àn
;

8408 
pCmd
->
mesßgeId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8411 
	`oßl_mem£t
 ( &(
pCmd
->
mesßgeCål
), 0, –
z˛MesßgeCål_t
 ) );

8413 
pCmd
->
mesßgeCål
.
å™smissi⁄Mode
 = 
buf
[4] & 0x03;

8414 
pCmd
->
mesßgeCål
.
imp‹èn˚
 = ( 
buf
[4] >> 
SE_PROFILE_MSGCTRL_IMPORTANCE
 ) & 0x03;

8415 #i‡
	`deföed
 ( 
SE_UK_EXT
 )

8416 
pCmd
->
mesßgeCål
.
pöRequúed
 = ( 
buf
[4] >> 
SE_PROFILE_MSGCTRL_PINREQUIRED
 ) & 0x01;

8417 
pCmd
->
mesßgeCål
.
ac˚±™˚Requúed
 = ( 
buf
[4] >> 
SE_PROFILE_MSGCTRL_ACCEPTREQUIRED
 ) & 0x01;

8419 
pCmd
->
mesßgeCål
.
c⁄fúm©i⁄Requúed
 = ( 
buf
[4] >> 
SE_PROFILE_MSGCTRL_CONFREQUIRED
 ) & 0x01;

8421 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–&(
buf
[5]), 4 );

8422 
pCmd
->
duøti⁄InMöuãs
 = 
	`BUILD_UINT16
–
buf
[9], buf[10] );

8423 
pCmd
->
msgSåög
.
°rLí
 = 
buf
[11];

8426 i‡–
pCmd
->
msgSåög
.
°rLí
 != 0 )

8428 
pCmd
->
msgSåög
.
pSå
 = 
	`oßl_mem_Æloc
–pCmd->msgSåög.
°rLí
 );

8429 i‡–
pCmd
->
msgSåög
.
pSå
 =
NULL
 )

8431  
ZMemEº‹
;

8433 
	`oßl_mem˝y
–
pCmd
->
msgSåög
.
pSå
, &(
buf
[12]),ÖCmd->msgSåög.
°rLí
 );

8437 
pCmd
->
msgSåög
.
pSå
 = 
NULL
;

8440  
ZSuc˚ss
;

8441 
	}
}

8454 
	$z˛SE_P¨£InCmd_C™˚lMesßge
–
z˛CCC™˚lMesßge_t
 *
pCmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

8456 ()
Àn
;

8458 
pCmd
->
mesßgeId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8461 
	`oßl_mem£t
 ( &(
pCmd
->
mesßgeCål
), 0, –
z˛MesßgeCål_t
 ) );

8463 
pCmd
->
mesßgeCål
.
å™smissi⁄Mode
 = 
buf
[4] & 0x03;

8464 
pCmd
->
mesßgeCål
.
imp‹èn˚
 = ( 
buf
[4] >> 
SE_PROFILE_MSGCTRL_IMPORTANCE
 ) & 0x03;

8465 #i‡
	`deföed
 ( 
SE_UK_EXT
 )

8466 
pCmd
->
mesßgeCål
.
pöRequúed
 = ( 
buf
[4] >> 
SE_PROFILE_MSGCTRL_PINREQUIRED
 ) & 0x01;

8467 
pCmd
->
mesßgeCål
.
ac˚±™˚Requúed
 = ( 
buf
[4] >> 
SE_PROFILE_MSGCTRL_ACCEPTREQUIRED
 ) & 0x01;

8469 
pCmd
->
mesßgeCål
.
c⁄fúm©i⁄Requúed
 = ( 
buf
[4] >> 
SE_PROFILE_MSGCTRL_CONFREQUIRED
 ) & 0x01;

8470 
	}
}

8483 
	$z˛SE_P¨£InCmd_MesßgeC⁄fúm©i⁄
–
z˛CCMesßgeC⁄fúm©i⁄_t
 *
pCmd
,

8484 
uöt8
 *
buf
, uöt8 
Àn
 )

8486 
pCmd
->
mesßgeId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8487 
pCmd
->
c⁄fúmTime
 = 
	`oßl_buûd_uöt32
–&(
buf
[4]), 4 );

8489 #i‡
	`deföed
 ( 
SE_UK_EXT
 )

8490 
pCmd
->
msgSåög
.
°rLí
 = 
buf
[8];

8492 
pCmd
->
msgSåög
.
°rLí
 = 0;

8496 i‡–
pCmd
->
msgSåög
.
°rLí
 != 0 )

8498 
pCmd
->
msgSåög
.
pSå
 = &(
buf
[9]);

8502 
pCmd
->
msgSåög
.
pSå
 = 
NULL
;

8504 
	}
}

8507 #ifde‡
ZCL_LOAD_CONTROL


8519 
	$z˛SE_P¨£InCmd_LﬂdC⁄åﬁEvít
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

8520 
uöt8
 *
buf
, uöt8 
Àn
 )

8522 ()
Àn
;

8527 
pCmd
->
issuîEvít
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8528 
buf
 += 4;

8530 
pCmd
->
devi˚GroupCœss
 = 
	`oßl_buûd_uöt32
–
buf
, 3 );

8531 
buf
 += 3;

8533 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8534 
buf
 += 4;

8536 
pCmd
->
duøti⁄InMöuãs
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

8537 
buf
 += 2;

8539 
pCmd
->
¸ôiˇlôyLevñ
 = *
buf
++;

8540 
pCmd
->
coﬁögTem≥øtuªOff£t
 = *
buf
++;

8541 
pCmd
->
hótögTem≥øtuªOff£t
 = *
buf
++;

8543 
pCmd
->
coﬁögTem≥øtuªSëPoöt
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

8544 
buf
 += 2;

8546 
pCmd
->
hótögTem≥øtuªSëPoöt
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

8547 
buf
 += 2;

8549 
pCmd
->
avîageLﬂdAdju°mítPî˚¡age
 = *
buf
++;

8550 
pCmd
->
dutyCy˛e
 = *
buf
++;

8551 
pCmd
->
evítC⁄åﬁ
 = *
buf
;

8552 
	}
}

8565 
	$z˛SE_P¨£InCmd_C™˚lLﬂdC⁄åﬁEvít
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

8566 
uöt8
 *
buf
, uöt8 
Àn
 )

8568 ()
Àn
;

8573 
pCmd
->
issuîEvítID
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8574 
buf
 += 4;

8576 
pCmd
->
devi˚GroupCœss
 = 
	`oßl_buûd_uöt32
–
buf
, 3 );

8577 
buf
 += 3;

8579 
pCmd
->
ˇn˚lC⁄åﬁ
 = *
buf
++;

8580 
pCmd
->
ef„˘iveTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8581 
	}
}

8594 
	$z˛SE_P¨£InCmd_Rï‹tEvítSètus
–
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

8595 
uöt8
 *
buf
, uöt8 
Àn
 )

8597 ()
Àn
;

8602 
pCmd
->
issuîEvítID
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8603 
buf
 += 4;

8605 
pCmd
->
evítSètus
 = *
buf
++;

8607 
pCmd
->
evítSèπTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8608 
buf
 += 4;

8610 
pCmd
->
¸ôiˇlôyLevñAµlõd
 = *
buf
++;

8611 
pCmd
->
coﬁögTem≥øtuªSëPoötAµlõd
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

8612 
buf
 += 2;

8614 
pCmd
->
hótögTem≥øtuªSëPoötAµlõd
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

8615 
buf
 += 2;

8617 
pCmd
->
avîageLﬂdAdju°mít
 = *
buf
++;

8618 
pCmd
->
dutyCy˛eAµlõd
 = *
buf
++;

8619 
pCmd
->
evítC⁄åﬁ
 = *
buf
++;

8620 
pCmd
->
sig«tuªTy≥
 = *
buf
++;

8622 
	`oßl_mem˝y
–
pCmd
->
sig«tuª
, 
buf
, 
SE_PROFILE_SIGNATURE_LENGTH
 );

8623 
	}
}

8626 #ifde‡
ZCL_PREPAYMENT


8638 
	$z˛SE_P¨£InCmd_SñAvaûEmîgícyCªdô
–
z˛CCSñAvaûEmîgícyCªdô_t
 *
pCmd
,

8639 
uöt8
 *
buf
, uöt8 
Àn
 )

8641 ()
Àn
;

8642 
uöt8
 
‹igöÆLí
;

8645 
pCmd
->
comm™dD©eTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8646 
buf
 += 4;

8648 
pCmd
->
‹igö©ögDevi˚
 = *
buf
++;

8651 
pCmd
->
sôeId
.
°rLí
 = *
buf
++;

8652 i‡–
pCmd
->
sôeId
.
°rLí
 =
SE_OPTIONAL_FIELD_UINT8
 )

8655 
pCmd
->
sôeId
.
°rLí
 = 0;

8658 i‡–
pCmd
->
sôeId
.
°rLí
 != 0 )

8660 
‹igöÆLí
 = 
pCmd
->
sôeId
.
°rLí
;

8663 i‡–
pCmd
->
sôeId
.
°rLí
 > (
SE_SITE_ID_LEN
-1) )

8665 
pCmd
->
sôeId
.
°rLí
 = (
SE_SITE_ID_LEN
-1);

8668 
pCmd
->
sôeId
.
pSå
 = 
buf
;

8670 
buf
 +
‹igöÆLí
;

8674 
pCmd
->
sôeId
.
pSå
 = 
NULL
;

8678 
pCmd
->
mëîSîülNumbî
.
°rLí
 = *
buf
++;

8679 i‡–
pCmd
->
mëîSîülNumbî
.
°rLí
 =
SE_OPTIONAL_FIELD_UINT8
 )

8682 
pCmd
->
mëîSîülNumbî
.
°rLí
 = 0;

8685 i‡–
pCmd
->
mëîSîülNumbî
.
°rLí
 != 0 )

8687 
‹igöÆLí
 = 
pCmd
->
mëîSîülNumbî
.
°rLí
;

8690 i‡–
pCmd
->
mëîSîülNumbî
.
°rLí
 > (
SE_METER_SERIAL_NUM_LEN
-1) )

8692 
pCmd
->
mëîSîülNumbî
.
°rLí
 = (
SE_METER_SERIAL_NUM_LEN
-1);

8695 
pCmd
->
mëîSîülNumbî
.
pSå
 = 
buf
;

8697 
buf
 +
‹igöÆLí
;

8701 
pCmd
->
mëîSîülNumbî
.
pSå
 = 
NULL
;

8703 
	}
}

8705 #i‚de‡
SE_UK_EXT


8717 
	$z˛SE_P¨£InCmd_Ch™geSuµly
–
z˛CCCh™geSuµly_t
 *
pCmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

8719 ()
Àn
;

8720 
uöt8
 
‹igöÆLí
;

8723 
pCmd
->
¥ovidîId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8724 
buf
 += 4;

8726 
pCmd
->
ªque°D©eTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8727 
buf
 += 4;

8730 
pCmd
->
sôeId
.
°rLí
 = *
buf
++;

8731 i‡–
pCmd
->
sôeId
.
°rLí
 =
SE_OPTIONAL_FIELD_UINT8
 )

8734 
pCmd
->
sôeId
.
°rLí
 = 0;

8737 i‡–
pCmd
->
sôeId
.
°rLí
 != 0 )

8739 
‹igöÆLí
 = 
pCmd
->
sôeId
.
°rLí
;

8742 i‡–
pCmd
->
sôeId
.
°rLí
 > (
SE_SITE_ID_LEN
-1) )

8744 
pCmd
->
sôeId
.
°rLí
 = (
SE_SITE_ID_LEN
-1);

8747 
pCmd
->
sôeId
.
pSå
 = 
buf
;

8749 
buf
 +
‹igöÆLí
;

8753 
pCmd
->
sôeId
.
pSå
 = 
NULL
;

8757 
pCmd
->
mëîSîülNumbî
.
°rLí
 = *
buf
++;

8758 i‡–
pCmd
->
mëîSîülNumbî
.
°rLí
 =
SE_OPTIONAL_FIELD_UINT8
 )

8761 
pCmd
->
mëîSîülNumbî
.
°rLí
 = 0;

8764 i‡–
pCmd
->
mëîSîülNumbî
.
°rLí
 != 0 )

8766 
‹igöÆLí
 = 
pCmd
->
mëîSîülNumbî
.
°rLí
;

8769 i‡–
pCmd
->
mëîSîülNumbî
.
°rLí
 > (
SE_METER_SERIAL_NUM_LEN
-1) )

8771 
pCmd
->
mëîSîülNumbî
.
°rLí
 = (
SE_METER_SERIAL_NUM_LEN
-1);

8774 
pCmd
->
mëîSîülNumbî
.
pSå
 = 
buf
;

8776 
buf
 +
‹igöÆLí
;

8780 
pCmd
->
mëîSîülNumbî
.
pSå
 = 
NULL
;

8783 
pCmd
->
im∂emíèti⁄D©eTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8784 
buf
 += 4;

8786 
pCmd
->
¥›o£dSuµlySètus
 = *
buf
++;

8788 
pCmd
->
‹igIdSuµlyC⁄åﬁBôs
 = *
buf
;

8789 
	}
}

8792 #ifde‡
SE_UK_EXT


8804 
	$z˛SE_P¨£InCmd_Ch™geDebt
–
z˛CCCh™geDebt_t
 *
pCmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

8806 ()
Àn
;

8807 
uöt8
 
fõldLí
;

8810 
pCmd
->
cmdIssueTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8811 
buf
 += 4;

8813 
fõldLí
 = 
	`z˛SE_P¨£_UTF8Såög
(
buf
, &
pCmd
->
debtLabñ
, 
SE_DEBT_LABEL_LEN
);

8815 
buf
 +
fõldLí
;

8817 
pCmd
->
debtAmou¡
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8818 
buf
 += 4;

8820 
pCmd
->
debtRecovîyMëhod
 = *
buf
++;

8821 
pCmd
->
debtTy≥
 = *
buf
++;

8823 
pCmd
->
ªcovîySèπTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8824 
buf
 += 4;

8826 
pCmd
->
debtRecovîyCﬁÀ˘i⁄Time
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

8827 
buf
 += 2;

8829 
pCmd
->
debtRecovîyFªquícy
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8830 
buf
 += 4;

8832 
pCmd
->
debtRecovîyAmt
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8833 
buf
 += 4;

8835 
pCmd
->
debtRecovîyBÆ™˚P˘
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

8836 
buf
 += 2;

8838 
pCmd
->
debtRecovîyMaxMis£d
 = *
buf
++;

8840 ()
	`z˛SE_P¨£_UTF8Såög
(
buf
, &
pCmd
->
sig«tuª
, 
SE_SIGNATURE_LEN
);

8841 
	}
}

8854 
	$z˛SE_P¨£InCmd_EmîgícyCªdôSëup
–
z˛CCEmîgícyCªdôSëup_t
 *
pCmd
,

8855 
uöt8
 *
buf
, uöt8 
Àn
 )

8857 ()
Àn
;

8859 
pCmd
->
cmdIssueTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8860 
buf
 += 4;

8861 
pCmd
->
emîgícyCªdôLimô
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8862 
buf
 += 4;

8863 
pCmd
->
emîgícyCªdôThªshﬁd
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8864 
	}
}

8877 
	$z˛SE_P¨£InCmd_C⁄sumîT›up
–
z˛CCC⁄sumîT›up_t
 *
pCmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

8879 ()
Àn
;

8881 
pCmd
->
‹igö©ögDevi˚
 = *
buf
++;

8883 ()
	`z˛SE_P¨£_UTF8Såög
(
buf
, &
pCmd
->
t›upCode
, 
SE_TOPUP_CODE_LEN
);

8884 
	}
}

8897 
	$z˛SE_P¨£InCmd_CªdôAdju°mít
–
z˛CCCªdôAdju°mít_t
 *
pCmd
,

8898 
uöt8
 *
buf
, uöt8 
Àn
 )

8900 ()
Àn
;

8902 
pCmd
->
cmdIssueTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8903 
buf
 += 4;

8905 
pCmd
->
¸edôAdju°mítTy≥
 = *
buf
++;

8907 
	`oßl_mem˝y
–
pCmd
->
¸edôAdju°mítVÆue
, 
buf
, 6 );

8908 
buf
 += 6;

8910 ()
	`z˛SE_P¨£_UTF8Såög
(
buf
, &
pCmd
->
sig«tuª
, 
SE_SIGNATURE_LEN
);

8911 
	}
}

8924 
	$z˛SE_P¨£InCmd_Ch™gePaymítMode
–
z˛CCCh™gePaymítMode_t
 *
pCmd
,

8925 
uöt8
 *
buf
, uöt8 
Àn
 )

8927 ()
Àn
;

8929 
pCmd
->
suµlõrId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8930 
buf
 += 4;

8931 
pCmd
->
modeEvítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8932 
buf
 += 4;

8933 
pCmd
->
im∂emíèti⁄D©e
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8934 
buf
 += 4;

8936 
pCmd
->
¥›o£dPaymítC⁄åﬁ
 = *
buf
++;

8938 
pCmd
->
cutOffVÆue
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8939 
buf
 += 4;

8941 ()
	`z˛SE_P¨£_UTF8Såög
(
buf
, &
pCmd
->
sig«tuª
, 
SE_SIGNATURE_LEN
);

8942 
	}
}

8955 
	$z˛SE_P¨£InCmd_GëPª∑yS«pshŸ
–
z˛CCGëPª∑yS«pshŸ_t
 *
pCmd
,

8956 
uöt8
 *
buf
, uöt8 
Àn
 )

8958 ()
Àn
;

8960 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

8961 
pCmd
->
numbîOfS«pshŸs
 = 
buf
[4];

8962 
pCmd
->
¢≠shŸCau£
 = 
	`BUILD_UINT16
–
buf
[5], buf[6] );

8963 
	}
}

8976 
	$z˛SE_P¨£InCmd_GëDebtRïaymítLog
–
z˛CCGëDebtRïaymítLog_t
 *
pCmd
,

8977 
uöt8
 *
buf
, uöt8 
Àn
 )

8979 ()
Àn
;

8981 
pCmd
->
numbîOfDebt
 = 
buf
[0];

8982 
pCmd
->
debtTy≥
 = 
buf
[1];

8983 
	}
}

8996 
	$z˛SE_P¨£InCmd_GëPª∑yS«pshŸRe•⁄£
–
z˛CCGëPª∑yS«pshŸRe•⁄£_t
 *
pCmd
,

8997 
uöt8
 *
buf
, uöt8 
Àn
 )

8999 ()
Àn
;

9001 
pCmd
->
evítIssuîId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9002 
pCmd
->
¢≠shŸTime
 = 
	`oßl_buûd_uöt32
–
buf
+4, 4 );

9003 
pCmd
->
comm™dIndex
 = 
buf
[8];

9004 
pCmd
->
¢≠shŸCau£
 = 
	`BUILD_UINT16
–
buf
[9], buf[10] );

9005 
pCmd
->
¢≠shŸPaylﬂdTy≥
 = 
buf
[11];

9006 
buf
 += 12;

9008 i‡–
pCmd
->
¢≠shŸPaylﬂdTy≥
 =
SE_SNAPSHOT_TYPE_DEBIT_CREDIT_ADDITION
 )

9010 
pCmd
->
∑ylﬂd
.
ty≥1DebtRemaöög
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9011 
pCmd
->
∑ylﬂd
.
ty≥2DebtRemaöög
 = 
	`oßl_buûd_uöt32
–
buf
+4, 4 );

9012 
pCmd
->
∑ylﬂd
.
ty≥3DebtRemaöög
 = 
	`oßl_buûd_uöt32
–
buf
+8, 4 );

9013 
pCmd
->
∑ylﬂd
.
emîgícyCªdôRemaöög
 = 
	`oßl_buûd_uöt32
–
buf
+12, 4 );

9014 
pCmd
->
∑ylﬂd
.
¸edôRemaöög
 = 
	`oßl_buûd_uöt32
–
buf
+16, 4 );

9016 
	}
}

9029 
	$z˛SE_P¨£InCmd_Ch™gePaymítModeRe•⁄£
–
z˛CCCh™gePaymítModeRe•⁄£_t
 *
pCmd
,

9030 
uöt8
 *
buf
, uöt8 
Àn
 )

9032 ()
Àn
;

9034 
pCmd
->
‰õndlyCªdô
 = *
buf
++;

9035 
pCmd
->
‰õndlyCªdôCÆíd¨
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9036 
pCmd
->
emîgícyCªdôLimô
 = 
	`oßl_buûd_uöt32
–
buf
+4, 4 );

9037 
pCmd
->
cmîgícyCªdôThªshﬁd
 = 
	`oßl_buûd_uöt32
–
buf
+8, 4 );

9038 
	}
}

9051 
	$z˛SE_P¨£InCmd_C⁄sumîT›upRe•⁄£
–
z˛CCC⁄sumîT›upRe•⁄£_t
 *
pCmd
,

9052 
uöt8
 *
buf
, uöt8 
Àn
 )

9054 ()
Àn
;

9056 
pCmd
->
ªsu…Ty≥
 = *
buf
++;

9057 
pCmd
->
t›upVÆue
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9058 
buf
 += 4;

9059 
pCmd
->
sour˚ofT›up
 = *
buf
++;

9060 
pCmd
->
¸edôRemaöög
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9061 
	}
}

9075 
ZSètus_t
 
	$z˛SE_P¨£InCmd_PublishT›upLog
–
z˛CCPublishT›upLog_t
 *
pCmd
,

9076 
uöt8
 *
buf
, uöt8 
Àn
 )

9078 ()
Àn
;

9079 
uöt8
 
i
, 
pos
, 
numCodes
 = 0;

9082 
pos
 = 2;

9083  
pos
 < 
Àn
 )

9085 i‡(
buf
[
pos
] == 0)

9090 
pos
 +
buf
[pos] + 1;

9091 
numCodes
++;

9094 
pCmd
->
cmdIndex
 = *
buf
++;

9095 
pCmd
->
tŸÆCmds
 = *
buf
++;

9096 
pCmd
->
numCodes
 =ÇumCodes;

9098 i‡–
numCodes
 )

9100 
pCmd
->
pPaylﬂd
 = 
	`oßl_mem_Æloc
–(
UTF8Såög_t
Ë* 
numCodes
 );

9102 i‡–
pCmd
->
pPaylﬂd
 =
NULL
 )

9104  
ZMemEº‹
;

9107  
i
 = 0; i < 
numCodes
; i++ )

9109 
uöt8
 
fõldLí
 = 
	`z˛SE_P¨£_UTF8Såög
(
buf
, &
pCmd
->
pPaylﬂd
[
i
], 
SE_TOPUP_CODE_LEN
);

9111 
buf
 +
fõldLí
;

9115  
ZSuc˚ss
;

9116 
	}
}

9130 
ZSètus_t
 
	$z˛SE_P¨£InCmd_PublishDebtLog
–
z˛CCPublishDebtLog_t
 *
pCmd
,

9131 
uöt8
 *
buf
, uöt8 
Àn
 )

9133 
uöt8
 
i
;

9134 
uöt8
 
numDebts
 = (
Àn
 - 2) / 13;

9136 
pCmd
->
cmdIndex
 = *
buf
++;

9137 
pCmd
->
tŸÆCmds
 = *
buf
++;

9138 
pCmd
->
numDebts
 =ÇumDebts;

9140 i‡–
numDebts
 )

9142 
pCmd
->
pPaylﬂd
 = 
	`oßl_mem_Æloc
–(
z˛CCDebtPaylﬂd_t
Ë* 
numDebts
 );

9144 i‡–
pCmd
->
pPaylﬂd
 =
NULL
 )

9146  
ZMemEº‹
;

9149  
i
 = 0; i < 
numDebts
; i++ )

9151 
pCmd
->
pPaylﬂd
[
i
].
cﬁÀ˘i⁄Time
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9152 
pCmd
->
pPaylﬂd
[
i
].
amou¡CﬁÀ˘ed
 = 
	`oßl_buûd_uöt32
–
buf
+4, 4 );

9153 
pCmd
->
pPaylﬂd
[
i
].
debtTy≥
 = 
buf
[8];

9154 
pCmd
->
pPaylﬂd
[
i
].
out°™dögDebt
 = 
	`oßl_buûd_uöt32
–
buf
+9, 4 );

9155 
buf
 += 13;

9159  
ZSuc˚ss
;

9160 
	}
}

9164 #ifde‡
ZCL_TUNNELING


9176 
	$z˛SE_P¨£InCmd_Tøns„rD©a
–
z˛CCTøns„rD©a_t
 *
pCmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

9178 
pCmd
->
tu¬ñId
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

9179 
buf
 += 2;

9181 
pCmd
->
d©a
 = 
buf
;

9182 
	}
}

9185 #ifde‡
ZCL_TOU


9186 #ifde‡
SE_UK_EXT


9198 
	$z˛SE_P¨£InCmd_PublishCÆíd¨
–
z˛CCPublishCÆíd¨_t
 *
pCmd
,

9199 
uöt8
 *
buf
, uöt8 
Àn
 )

9201 
uöt8
 
‹igöÆLí
;

9204 
pCmd
->
issuîCÆíd¨Id
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9205 
buf
 += 4;

9207 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9208 
buf
 += 4;

9210 
pCmd
->
ˇÀnd¨Ty≥
 = *
buf
++;

9211 
pCmd
->
ˇÀnd¨TimeRef
 = *
buf
++;

9214 
pCmd
->
ˇÀnd¨Name
.
°rLí
 = *
buf
++;

9215 i‡–
pCmd
->
ˇÀnd¨Name
.
°rLí
 =
SE_OPTIONAL_FIELD_UINT8
 )

9218 
pCmd
->
ˇÀnd¨Name
.
°rLí
 = 0;

9221 i‡–
pCmd
->
ˇÀnd¨Name
.
°rLí
 != 0 )

9223 
‹igöÆLí
 = 
pCmd
->
ˇÀnd¨Name
.
°rLí
;

9226 i‡–
pCmd
->
ˇÀnd¨Name
.
°rLí
 > (
SE_CALENDAR_NAME_LEN
-1) )

9228 
pCmd
->
ˇÀnd¨Name
.
°rLí
 = (
SE_CALENDAR_NAME_LEN
-1);

9231 
pCmd
->
ˇÀnd¨Name
.
pSå
 = 
buf
;

9233 
buf
 +
‹igöÆLí
;

9237 
pCmd
->
ˇÀnd¨Name
.
pSå
 = 
NULL
;

9240 
pCmd
->
numOfSós⁄s
 = *
buf
++;

9241 
pCmd
->
numOfWìkProfûes
 = *
buf
++;

9242 
pCmd
->
numOfDayProfûes
 = *
buf
;

9243 
	}
}

9257 
ZSètus_t
 
	$z˛SE_P¨£InCmd_PublishDayProfûe
–
z˛CCPublishDayProfûe_t
 *
pCmd
,

9258 
uöt8
 *
buf
, uöt8 
Àn
 )

9261 
pCmd
->
issuîCÆíd¨Id
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9262 
buf
 += 4;

9264 
pCmd
->
dayId
 = *
buf
++;

9265 
pCmd
->
tŸÆNumSchedE¡
 = *
buf
++;

9266 
pCmd
->
comm™dIndex
 = *
buf
++;

9268 
pCmd
->
numTøns„rE¡rõs
 = (
Àn
 - 
PACKET_LEN_SE_PUBLISH_DAY_PROFILE
Ë/ 
SE_DAY_SCHEDULE_ENTRY_LEN
;

9269 i‡(
pCmd
->
numTøns„rE¡rõs
)

9271 i‡–
pCmd
->
issuîCÆíd¨Id
 <
SE_CALENDAR_TYPE_IMPORT_EXPORT_CALENDAR
 )

9273 
pCmd
->
pScheduÀE¡rõs
 = 
	`oßl_mem_Æloc
–pCmd->
numTøns„rE¡rõs
 * –
z˛CCR©eE¡ry_t
 ) );

9275 i‡–
pCmd
->
pScheduÀE¡rõs
 !
NULL
 )

9277 
z˛CCR©eE¡ry_t
 *
pR©eE¡ry
 = (z˛CCR©eE¡ry_à*)
pCmd
->
pScheduÀE¡rõs
;

9278 
uöt8
 
i
;

9280  
i
 = 0; i < 
pCmd
->
numTøns„rE¡rõs
; i++ )

9282 
pR©eE¡ry
->
°¨tTime
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

9283 
buf
 += 2;

9285 
pR©eE¡ry
->
a˘ivePri˚Tõr
 = *
buf
++;

9287 
pR©eE¡ry
++;

9292  
ZMemEº‹
;

9297 
pCmd
->
pScheduÀE¡rõs
 = 
	`oßl_mem_Æloc
–pCmd->
numTøns„rE¡rõs
 * –
z˛CCFrõndlyCªdôE¡ry_t
 ) );

9299 i‡–
pCmd
->
pScheduÀE¡rõs
 !
NULL
 )

9301 
z˛CCFrõndlyCªdôE¡ry_t
 *
pFrõndlyE¡ry
 = (z˛CCFrõndlyCªdôE¡ry_à*)
pCmd
->
pScheduÀE¡rõs
;

9302 
uöt8
 
i
;

9304  
i
 = 0; i < 
pCmd
->
numTøns„rE¡rõs
; i++ )

9306 
pFrõndlyE¡ry
->
°¨tTime
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

9307 
buf
 += 2;

9309 
pFrõndlyE¡ry
->
‰õndCªdôE«bÀ
 = *
buf
++;

9311 
pFrõndlyE¡ry
++;

9316  
ZMemEº‹
;

9321  
ZSuc˚ss
;

9322 
	}
}

9336 
ZSètus_t
 
	$z˛SE_P¨£InCmd_PublishSós⁄s
–
z˛CCPublishSós⁄s_t
 *
pCmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

9339 
pCmd
->
issuîCÆíd¨Id
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9340 
buf
 += 4;

9342 
pCmd
->
comm™dIndex
 = *
buf
++;

9344 
pCmd
->
numTøns„rE¡rõs
 = ( 
Àn
 - 
PACKET_LEN_SE_PUBLISH_SEASONS
 ) / 
SE_SEASON_ENTRY_LEN
;

9346 i‡–
pCmd
->
numTøns„rE¡rõs
 )

9348 
pCmd
->
pSós⁄E¡ry
 = (
z˛CCSós⁄E¡ry_t
 *)
	`oßl_mem_Æloc
–pCmd->
numTøns„rE¡rõs
 *

9349 –
z˛CCSós⁄E¡ry_t
 ) );

9351 i‡–
pCmd
->
pSós⁄E¡ry
 !
NULL
 )

9353 
uöt8
 
i
;

9355  
i
 = 0; i < 
pCmd
->
numTøns„rE¡rõs
; i++ )

9357 
pCmd
->
pSós⁄E¡ry
[
i
].
£as⁄SèπD©e
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9358 
buf
 += 4;

9360 
pCmd
->
pSós⁄E¡ry
[
i
].
wìkIdRef
 = *
buf
++;

9365  
ZMemEº‹
;

9369  
ZSuc˚ss
;

9370 
	}
}

9384 
ZSètus_t
 
	$z˛SE_P¨£InCmd_PublishS≥cülDays
–
z˛CCPublishS≥cülDays_t
 *
pCmd
,

9385 
uöt8
 *
buf
, uöt8 
Àn
 )

9388 
pCmd
->
issuîEvítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9389 
buf
 += 4;

9391 
pCmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9392 
buf
 += 4;

9394 
pCmd
->
ˇÀnd¨Ty≥
 = *
buf
++;

9395 
pCmd
->
tŸÆNumS≥cülDays
 = *
buf
++;

9396 
pCmd
->
comm™dIndex
 = *
buf
++;

9398 
pCmd
->
numTøns„rE¡rõs
 = ( 
Àn
 - 
PACKET_LEN_SE_PUBLISH_SPECIAL_DAYS
 ) / 
SE_SPECIAL_DAY_ENTRY_LEN
;

9400 i‡–
pCmd
->
numTøns„rE¡rõs
 )

9402 
pCmd
->
pS≥cülDayE¡ry
 = (
z˛CCS≥cülDayE¡ry_t
 *)
	`oßl_mem_Æloc
–pCmd->
numTøns„rE¡rõs
 *

9403 –
z˛CCS≥cülDayE¡ry_t
 ) );

9405 i‡–
pCmd
->
pS≥cülDayE¡ry
 !
NULL
 )

9407 
uöt8
 
i
;

9409  
i
 = 0; i < 
pCmd
->
numTøns„rE¡rõs
; i++ )

9411 
pCmd
->
pS≥cülDayE¡ry
[
i
].
•ecülDayD©e
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9412 
buf
 += 4;

9414 
pCmd
->
pS≥cülDayE¡ry
[
i
].
dayIdRef
 = *
buf
++;

9419  
ZMemEº‹
;

9423  
ZSuc˚ss
;

9424 
	}
}

9428 #ifde‡
ZCL_DEVICE_MGMT


9429 #ifde‡
SE_UK_EXT


9441 
	$z˛SE_P¨£InCmd_PublishCh™geTí™cy
–
z˛CCPublishCh™geTí™cy_t
 *
pCmd
,

9442 
uöt8
 *
buf
, uöt8 
Àn
 )

9444 ()
Àn
;

9447 
pCmd
->
suµlõrId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9448 
buf
 += 4;

9450 
pCmd
->
evítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9451 
buf
 += 4;

9453 
pCmd
->
èriffTy≥
 = *
buf
++;

9455 
pCmd
->
im∂emíèti⁄D©eTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9456 
buf
 += 4;

9458 
pCmd
->
¥›TíícyCh™geCål
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9459 
buf
 += 4;

9461 
pCmd
->
sig«tuª
.
°rLí
 = *
buf
++;;

9464 i‡–
pCmd
->
sig«tuª
.
°rLí
 != 0 )

9466 
pCmd
->
sig«tuª
.
pSå
 = 
buf
;

9470 
pCmd
->
sig«tuª
.
pSå
 = 
NULL
;

9472 
	}
}

9485 
	$z˛SE_P¨£InCmd_PublishCh™geSuµlõr
–
z˛CCPublishCh™geSuµlõr_t
 *
pCmd
,

9486 
uöt8
 *
buf
, uöt8 
Àn
 )

9488 ()
Àn
;

9491 
pCmd
->
suµlõrId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9492 
buf
 += 4;

9494 
pCmd
->
evítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9495 
buf
 += 4;

9497 
pCmd
->
èriffTy≥
 = *
buf
++;

9499 
pCmd
->
¥›SuµlõrId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9500 
buf
 += 4;

9502 
pCmd
->
suµIdIm∂emD©eTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9503 
buf
 += 4;

9505 
pCmd
->
suµlõrCh™geCål
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9506 
buf
 += 4;

9508 
pCmd
->
suµlõrIdName
.
°rLí
 = *
buf
++;;

9511 i‡–
pCmd
->
suµlõrIdName
.
°rLí
 != 0 )

9513 
uöt8
 
‹igöÆLí
;

9515 
‹igöÆLí
 = 
pCmd
->
suµlõrIdName
.
°rLí
;

9518 i‡–
pCmd
->
suµlõrIdName
.
°rLí
 > (
SE_SUPPLIER_ID_NAME_LEN
-1) )

9520 
pCmd
->
suµlõrIdName
.
°rLí
 = (
SE_SUPPLIER_ID_NAME_LEN
-1);

9523 
pCmd
->
suµlõrIdName
.
pSå
 = 
buf
;

9524 
buf
 +
‹igöÆLí
;

9528 
pCmd
->
suµlõrIdName
.
pSå
 = 
NULL
;

9531 
pCmd
->
sig«tuª
.
°rLí
 = *
buf
++;;

9534 i‡–
pCmd
->
sig«tuª
.
°rLí
 != 0 )

9536 
pCmd
->
sig«tuª
.
pSå
 = 
buf
;

9540 
pCmd
->
sig«tuª
.
pSå
 = 
NULL
;

9542 
	}
}

9555 
	$z˛SE_P¨£InCmd_Ch™geSuµly
–
z˛CCCh™geSuµly_t
 *
pCmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

9557 ()
Àn
;

9560 
pCmd
->
suµlõrId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9561 
buf
 += 4;

9563 
pCmd
->
evítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9564 
buf
 += 4;

9566 
pCmd
->
ªque°D©eTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9567 
buf
 += 4;

9569 
pCmd
->
im∂emíèti⁄D©eTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

9570 
buf
 += 4;

9572 
pCmd
->
¥›o£dSuµlySètus
 = *
buf
++;

9574 
pCmd
->
‹igIdSuµlyC⁄åﬁBôs
 = *
buf
++;

9576 
pCmd
->
sig«tuª
.
°rLí
 = *
buf
++;;

9579 i‡–
pCmd
->
sig«tuª
.
°rLí
 != 0 )

9581 
pCmd
->
sig«tuª
.
pSå
 = 
buf
;

9585 
pCmd
->
sig«tuª
.
pSå
 = 
NULL
;

9587 
	}
}

9600 
	$z˛SE_P¨£InCmd_Ch™gePassw‹d
–
z˛CCCh™gePassw‹d_t
 *
pCmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

9602 
pCmd
->
∑ssw‹dLevñ
 = *
buf
++;

9604 
pCmd
->
∑ssw‹d
.
°rLí
 = *
buf
++;;

9607 i‡–
pCmd
->
∑ssw‹d
.
°rLí
 != 0 )

9610 i‡–
pCmd
->
∑ssw‹d
.
°rLí
 > (
SE_PASSWORD_LEN
-1) )

9612 
pCmd
->
∑ssw‹d
.
°rLí
 = (
SE_PASSWORD_LEN
-1);

9615 
pCmd
->
∑ssw‹d
.
pSå
 = 
buf
;

9619 
pCmd
->
∑ssw‹d
.
pSå
 = 
NULL
;

9621 
	}
}

9625 #ifde‡
SE_UK_EXT


9637 
uöt8
 
	$z˛SE_P¨£_UTF8Såög
–
uöt8
 *
pBuf
, 
UTF8Såög_t
 *
pSåög
, uöt8 
maxLí
 )

9639 
uöt8
 
‹igöÆLí
 = 0;

9641 
pSåög
->
°rLí
 = *
pBuf
++;

9642 i‡–
pSåög
->
°rLí
 =
SE_OPTIONAL_FIELD_UINT8
 )

9645 
pSåög
->
°rLí
 = 0;

9648 i‡–
pSåög
->
°rLí
 != 0 )

9650 
‹igöÆLí
 = 
pSåög
->
°rLí
;

9653 i‡–
pSåög
->
°rLí
 > (
maxLí
-1) )

9655 
pSåög
->
°rLí
 = (
maxLí
-1);

9658 
pSåög
->
pSå
 = 
pBuf
;

9662 
pSåög
->
pSå
 = 
NULL
;

9665  
‹igöÆLí
 + 1;

9666 
	}
}

	@Components/stack/zcl/zcl_se.h

40 #i‚de‡
ZCL_SE_H


41 
	#ZCL_SE_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

62 
	#ATTRID_MASK_SE_READ_INFORMATION_SET
 0x0000

	)

63 
	#ATTRID_MASK_SE_TOU_INFORMATION_SET
 0x0100

	)

64 
	#ATTRID_MASK_SE_METER_STATUS
 0x0200

	)

65 
	#ATTRID_MASK_SE_FORMATTING
 0x0300

	)

66 
	#ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 0x0400

	)

67 
	#ATTRID_MASK_SE_LOAD_PROFILE_CONFIGURATION
 0x0500

	)

68 
	#ATTRID_MASK_SE_SUPPLY_LIMIT
 0x0600

	)

69 
	#ATTRID_MASK_SE_BLOCK_INFORMATION
 0x0700

	)

70 
	#ATTRID_MASK_SE_ALARMS
 0x0800

	)

71 
	#ATTRID_MASK_SE_BLOCK_INFORMATION_RECEIVED
 0x0900

	)

72 
	#ATTRID_MASK_SE_BILLING
 0x0A00

	)

75 
	#ATTRID_SE_CURRENT_SUMMATION_DELIVERED
 ( 0x0000 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

76 
	#ATTRID_SE_CURRENT_SUMMATION_RECEIVED
 ( 0x0001 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

77 
	#ATTRID_SE_CURRENT_MAX_DEMAND_DELIVERED
 ( 0x0002 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

78 
	#ATTRID_SE_CURRENT_MAX_DEMAND_RECEIVED
 ( 0x0003 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

79 
	#ATTRID_SE_DFT_SUMMATION
 ( 0x0004 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

80 
	#ATTRID_SE_DAILY_FREEZE_TIME
 ( 0x0005 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

81 
	#ATTRID_SE_POWER_FACTOR
 ( 0x0006 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

82 
	#ATTRID_SE_READING_SNAPSHOT_TIME
 ( 0x0007 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

83 
	#ATTRID_SE_CURRENT_MAX_DEMAND_DELIVERD_TIME
 ( 0x0008 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

84 
	#ATTRID_SE_CURRENT_MAX_DEMAND_RECEIVED_TIME
 ( 0x0009 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

85 
	#ATTRID_SE_DEFAULT_UPDATE_PERIOD
 ( 0x000A | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

86 
	#ATTRID_SE_FAST_POLL_UPDATE_PERIOD
 ( 0x000B | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

87 
	#ATTRID_SE_CURRENT_BLOCK_PERIOD_CONSUMPTION_DELIVERED
 ( 0x000C | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

88 
	#ATTRID_SE_DAILY_CONSUMPTION_TARGET
 ( 0x000D | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

89 
	#ATTRID_SE_CURRENT_BLOCK
 ( 0x000E | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

90 
	#ATTRID_SE_PROFILE_INTERVAL_PERIOD
 ( 0x000F | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

91 
	#ATTRID_SE_INTERVAL_READ_REPORTING_PERIOD
 ( 0x0010 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

92 
	#ATTRID_SE_PRESET_READING_TIME
 ( 0x0011 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

93 
	#ATTRID_SE_VOLUME_PER_REPORT
 ( 0x0012 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

94 
	#ATTRID_SE_FLOW_RESTRICTION
 ( 0x0013 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

95 
	#ATTRID_SE_SUPPLY_STATUS
 ( 0x0014 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

96 
	#ATTRID_SE_CURRENT_IN_ENERGY_CARRIER_SUMM
 ( 0x0015 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

97 
	#ATTRID_SE_CURRENT_OUT_ENERGY_CARRIER_SUMM
 ( 0x0016 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

98 
	#ATTRID_SE_INLET_TEMPREATURE
 ( 0x0017 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

99 
	#ATTRID_SE_OUTLET_TEMPREATURE
 ( 0x0018 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

100 
	#ATTRID_SE_CONTROL_TEMPREATURE
 ( 0x0019 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

101 
	#ATTRID_SE_CURRENT_IN_ENERGY_CARRIER_DEMAND
 ( 0x001A | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

102 
	#ATTRID_SE_CURRENT_OUT_ENERGY_CARRIER_DEMAND
 ( 0x001B | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

103 
	#ATTRID_SE_CURRENT_BLOCK_PERIOD_CONSUMPTION_RECEIVED
 ( 0x001D | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

104 
	#ATTRID_SE_CURRENT_BLOCK_RECEIVED
 ( 0x001E | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

107 
	#ATTRID_SE_CURRENT_TIER1_SUMMATION_DELIVERED
 ( 0x0000 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

108 
	#ATTRID_SE_CURRENT_TIER1_SUMMATION_RECEIVED
 ( 0x0001 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

109 
	#ATTRID_SE_CURRENT_TIER2_SUMMATION_DELIVERED
 ( 0x0002 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

110 
	#ATTRID_SE_CURRENT_TIER2_SUMMATION_RECEIVED
 ( 0x0003 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

111 
	#ATTRID_SE_CURRENT_TIER3_SUMMATION_DELIVERED
 ( 0x0004 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

112 
	#ATTRID_SE_CURRENT_TIER3_SUMMATION_RECEIVED
 ( 0x0005 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

113 
	#ATTRID_SE_CURRENT_TIER4_SUMMATION_DELIVERED
 ( 0x0006 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

114 
	#ATTRID_SE_CURRENT_TIER4_SUMMATION_RECEIVED
 ( 0x0007 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

115 
	#ATTRID_SE_CURRENT_TIER5_SUMMATION_DELIVERED
 ( 0x0008 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

116 
	#ATTRID_SE_CURRENT_TIER5_SUMMATION_RECEIVED
 ( 0x0009 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

117 
	#ATTRID_SE_CURRENT_TIER6_SUMMATION_DELIVERED
 ( 0x000A | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

118 
	#ATTRID_SE_CURRENT_TIER6_SUMMATION_RECEIVED
 ( 0x000B | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

119 
	#ATTRID_SE_CURRENT_TIER7_SUMMATION_DELIVERED
 ( 0x000C | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

120 
	#ATTRID_SE_CURRENT_TIER7_SUMMATION_RECEIVED
 ( 0x000D | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

121 
	#ATTRID_SE_CURRENT_TIER8_SUMMATION_DELIVERED
 ( 0x000E | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

122 
	#ATTRID_SE_CURRENT_TIER8_SUMMATION_RECEIVED
 ( 0x000F | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

123 
	#ATTRID_SE_CURRENT_TIER9_SUMMATION_DELIVERED
 ( 0x0010 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

124 
	#ATTRID_SE_CURRENT_TIER9_SUMMATION_RECEIVED
 ( 0x0011 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

125 
	#ATTRID_SE_CURRENT_TIER10_SUMMATION_DELIVERED
 ( 0x0012 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

126 
	#ATTRID_SE_CURRENT_TIER10_SUMMATION_RECEIVED
 ( 0x0013 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

127 
	#ATTRID_SE_CURRENT_TIER11_SUMMATION_DELIVERED
 ( 0x0014 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

128 
	#ATTRID_SE_CURRENT_TIER11_SUMMATION_RECEIVED
 ( 0x0015 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

129 
	#ATTRID_SE_CURRENT_TIER12_SUMMATION_DELIVERED
 ( 0x0016 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

130 
	#ATTRID_SE_CURRENT_TIER12_SUMMATION_RECEIVED
 ( 0x0017 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

131 
	#ATTRID_SE_CURRENT_TIER13_SUMMATION_DELIVERED
 ( 0x0018 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

132 
	#ATTRID_SE_CURRENT_TIER13_SUMMATION_RECEIVED
 ( 0x0019 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

133 
	#ATTRID_SE_CURRENT_TIER14_SUMMATION_DELIVERED
 ( 0x001A | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

134 
	#ATTRID_SE_CURRENT_TIER14_SUMMATION_RECEIVED
 ( 0x001B | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

135 
	#ATTRID_SE_CURRENT_TIER15_SUMMATION_DELIVERED
 ( 0x001C | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

136 
	#ATTRID_SE_CURRENT_TIER15_SUMMATION_RECEIVED
 ( 0x001D | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

139 
	#ATTRID_SE_STATUS
 ( 0x0000 | 
ATTRID_MASK_SE_METER_STATUS
 )

	)

140 
	#ATTRID_SE_REMAINING_BATTERY_LIFE
 ( 0x0001 | 
ATTRID_MASK_SE_METER_STATUS
 )

	)

141 
	#ATTRID_SE_HOURS_IN_OPERATION
 ( 0x0002 | 
ATTRID_MASK_SE_METER_STATUS
 )

	)

142 
	#ATTRID_SE_HOURS_IN_FAULT
 ( 0x0003 | 
ATTRID_MASK_SE_METER_STATUS
 )

	)

143 
	#ATTRID_SE_EXTENDED_STATUS
 ( 0x0004 | 
ATTRID_MASK_SE_METER_STATUS
 )

	)

146 
	#ATTRID_SE_UNIT_OF_MEASURE
 ( 0x0000 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

147 
	#ATTRID_SE_MULTIPLIER
 ( 0x0001 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

148 
	#ATTRID_SE_DIVISOR
 ( 0x0002 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

149 
	#ATTRID_SE_SUMMATION_FORMATTING
 ( 0x0003 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

150 
	#ATTRID_SE_DEMAND_FORMATTING
 ( 0x0004 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

151 
	#ATTRID_SE_HISTORICAL_CONSUMPTION_FORMATTING
 ( 0x0005 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

152 
	#ATTRID_SE_METERING_DEVICE_TYPE
 ( 0x0006 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

153 
	#ATTRID_SE_SITE_ID
 ( 0x0007 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

154 
	#ATTRID_SE_METER_SERIAL_NUMBER
 ( 0x0008 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

155 
	#ATTRID_SE_ENERGY_CARRIER_UNIT_OF_MEASURE
 ( 0x0009 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

156 
	#ATTRID_SE_ENERGY_CARRIER_SUMM_FORMATTING
 ( 0x000A | 
ATTRID_MASK_SE_FORMATTING
 )

	)

157 
	#ATTRID_SE_ENERGY_CARRIER_DEMAND_FORMATTING
 ( 0x000B | 
ATTRID_MASK_SE_FORMATTING
 )

	)

158 
	#ATTRID_SE_TEMPERATURE_UNIT_OF_MEASURE
 ( 0x000C | 
ATTRID_MASK_SE_FORMATTING
 )

	)

159 
	#ATTRID_SE_TEMPERATURE_FORMATTING
 ( 0x000D | 
ATTRID_MASK_SE_FORMATTING
 )

	)

160 
	#ATTRID_SE_MODULE_SERIAL_NUMBER
 ( 0x000E | 
ATTRID_MASK_SE_FORMATTING
 )

	)

161 
	#ATTRID_SE_OPERATING_TARIFF_LEVEL
 ( 0x000F | 
ATTRID_MASK_SE_FORMATTING
 )

	)

164 
	#ATTRID_SE_INSTANTANEOUS_DEMAND
 ( 0x0000 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

165 
	#ATTRID_SE_CURRENTDAY_CONSUMPTION_DELIVERED
 ( 0x0001 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

166 
	#ATTRID_SE_CURRENTDAY_CONSUMPTION_RECEIVED
 ( 0x0002 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

167 
	#ATTRID_SE_PREVIOUSDAY_CONSUMPTION_DELIVERED
 ( 0x0003 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

168 
	#ATTRID_SE_PREVIOUSDAY_CONSUMPTION_RECEIVED
 ( 0x0004 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

169 
	#ATTRID_SE_CUR_PART_PROFILE_INT_START_TIME_DELIVERED
 ( 0x0005 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

170 
	#ATTRID_SE_CUR_PART_PROFILE_INT_START_TIME_RECEIVED
 ( 0x0006 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

171 
	#ATTRID_SE_CUR_PART_PROFILE_INT_VALUE_DELIVERED
 ( 0x0007 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

172 
	#ATTRID_SE_CUR_PART_PROFILE_INT_VALUE_RECEIVED
 ( 0x0008 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

173 
	#ATTRID_SE_CURRENT_DAY_MAX_PRESSURE
 ( 0x0009 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

174 
	#ATTRID_SE_CURRENT_DAY_MIN_PRESSURE
 ( 0x000A | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

175 
	#ATTRID_SE_PREVIOUS_DAY_MAX_PRESSURE
 ( 0x000B | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

176 
	#ATTRID_SE_PREVIOUS_DAY_MIN_PRESSURE
 ( 0x000C | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

177 
	#ATTRID_SE_CURRENT_DAY_MAX_DEMAND
 ( 0x000D | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

178 
	#ATTRID_SE_PREVIOUS_DAY_MAX_DEMAND
 ( 0x000E | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

179 
	#ATTRID_SE_CURRENT_MONTH_MAX_DEMAND
 ( 0x000F | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

180 
	#ATTRID_SE_CURRENT_YEAR_MAX_DEMAND
 ( 0x0010 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

181 
	#ATTRID_SE_CURRENTDAY_MAX_ENERGY_CARR_DEMAND
 ( 0x0011 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

182 
	#ATTRID_SE_PREVIOUSDAY_MAX_ENERGY_CARR_DEMAND
 ( 0x0012 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

183 
	#ATTRID_SE_CUR_MONTH_MAX_ENERGY_CARR_DEMAND
 ( 0x0013 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

184 
	#ATTRID_SE_CUR_MONTH_MIN_ENERGY_CARR_DEMAND
 ( 0x0014 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

185 
	#ATTRID_SE_CUR_YEAR_MAX_ENERGY_CARR_DEMAND
 ( 0x0015 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

186 
	#ATTRID_SE_CUR_YEAR_MIN_ENERGY_CARR_DEMAND
 ( 0x0016 | 
ATTRID_MASK_SE_HISTORICAL_CONSUMPTION
 )

	)

189 
	#ATTRID_SE_MAX_NUMBER_OF_PERIODS_DELIVERED
 ( 0x0000 | 
ATTRID_MASK_SE_LOAD_PROFILE_CONFIGURATION
 )

	)

192 
	#ATTRID_SE_CURRENT_DEMAND_DELIVERED
 ( 0x0000 | 
ATTRID_MASK_SE_SUPPLY_LIMIT
 )

	)

193 
	#ATTRID_SE_DEMAND_LIMIT
 ( 0x0001 | 
ATTRID_MASK_SE_SUPPLY_LIMIT
 )

	)

194 
	#ATTRID_SE_DEMAND_INTEGRATION_PERIOD
 ( 0x0002 | 
ATTRID_MASK_SE_SUPPLY_LIMIT
 )

	)

195 
	#ATTRID_SE_NUMBER_OF_DEMAND_SUBINTERVALS
 ( 0x0003 | 
ATTRID_MASK_SE_SUPPLY_LIMIT
 )

	)

196 
	#ATTRID_SE_DEMAND_LIMIT_ARM_DURATION
 ( 0x0004 | 
ATTRID_MASK_SE_SUPPLY_LIMIT
 )

	)

199 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK1_SUMMATION_DELIVERED
 ( 0x0000 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

200 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK2_SUMMATION_DELIVERED
 ( 0x0001 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

201 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK3_SUMMATION_DELIVERED
 ( 0x0002 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

202 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK4_SUMMATION_DELIVERED
 ( 0x0003 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

203 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK5_SUMMATION_DELIVERED
 ( 0x0004 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

204 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK6_SUMMATION_DELIVERED
 ( 0x0005 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

205 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK7_SUMMATION_DELIVERED
 ( 0x0006 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

206 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK8_SUMMATION_DELIVERED
 ( 0x0007 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

207 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK9_SUMMATION_DELIVERED
 ( 0x0008 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

208 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK10_SUMMATION_DELIVERED
 ( 0x0009 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

209 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK11_SUMMATION_DELIVERED
 ( 0x000A | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

210 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK12_SUMMATION_DELIVERED
 ( 0x000B | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

211 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK13_SUMMATION_DELIVERED
 ( 0x000C | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

212 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK14_SUMMATION_DELIVERED
 ( 0x000D | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

213 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK15_SUMMATION_DELIVERED
 ( 0x000E | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

214 
	#ATTRID_SE_CURRENT_NO_TIER_BLOCK16_SUMMATION_DELIVERED
 ( 0x000F | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

216 
	#ATTRID_SE_CURRENT_TIER1_BLOCK1_SUMMATION_DELIVERED
 ( 0x0010 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

217 
	#ATTRID_SE_CURRENT_TIER1_BLOCK2_SUMMATION_DELIVERED
 ( 0x0011 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

218 
	#ATTRID_SE_CURRENT_TIER1_BLOCK3_SUMMATION_DELIVERED
 ( 0x0012 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

219 
	#ATTRID_SE_CURRENT_TIER1_BLOCK4_SUMMATION_DELIVERED
 ( 0x0013 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

220 
	#ATTRID_SE_CURRENT_TIER1_BLOCK5_SUMMATION_DELIVERED
 ( 0x0014 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

221 
	#ATTRID_SE_CURRENT_TIER1_BLOCK6_SUMMATION_DELIVERED
 ( 0x0015 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

222 
	#ATTRID_SE_CURRENT_TIER1_BLOCK7_SUMMATION_DELIVERED
 ( 0x0016 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

223 
	#ATTRID_SE_CURRENT_TIER1_BLOCK8_SUMMATION_DELIVERED
 ( 0x0017 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

224 
	#ATTRID_SE_CURRENT_TIER1_BLOCK9_SUMMATION_DELIVERED
 ( 0x0018 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

225 
	#ATTRID_SE_CURRENT_TIER1_BLOCK10_SUMMATION_DELIVERED
 ( 0x0019 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

226 
	#ATTRID_SE_CURRENT_TIER1_BLOCK11_SUMMATION_DELIVERED
 ( 0x001A | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

227 
	#ATTRID_SE_CURRENT_TIER1_BLOCK12_SUMMATION_DELIVERED
 ( 0x001B | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

228 
	#ATTRID_SE_CURRENT_TIER1_BLOCK13_SUMMATION_DELIVERED
 ( 0x001C | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

229 
	#ATTRID_SE_CURRENT_TIER1_BLOCK14_SUMMATION_DELIVERED
 ( 0x001D | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

230 
	#ATTRID_SE_CURRENT_TIER1_BLOCK15_SUMMATION_DELIVERED
 ( 0x001E | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

231 
	#ATTRID_SE_CURRENT_TIER1_BLOCK16_SUMMATION_DELIVERED
 ( 0x001F | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

233 
	#ATTRID_SE_CURRENT_TIER2_BLOCK1_SUMMATION_DELIVERED
 ( 0x0020 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

234 
	#ATTRID_SE_CURRENT_TIER2_BLOCK2_SUMMATION_DELIVERED
 ( 0x0021 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

235 
	#ATTRID_SE_CURRENT_TIER2_BLOCK3_SUMMATION_DELIVERED
 ( 0x0022 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

236 
	#ATTRID_SE_CURRENT_TIER2_BLOCK4_SUMMATION_DELIVERED
 ( 0x0023 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

237 
	#ATTRID_SE_CURRENT_TIER2_BLOCK5_SUMMATION_DELIVERED
 ( 0x0024 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

238 
	#ATTRID_SE_CURRENT_TIER2_BLOCK6_SUMMATION_DELIVERED
 ( 0x0025 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

239 
	#ATTRID_SE_CURRENT_TIER2_BLOCK7_SUMMATION_DELIVERED
 ( 0x0026 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

240 
	#ATTRID_SE_CURRENT_TIER2_BLOCK8_SUMMATION_DELIVERED
 ( 0x0027 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

241 
	#ATTRID_SE_CURRENT_TIER2_BLOCK9_SUMMATION_DELIVERED
 ( 0x0028 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

242 
	#ATTRID_SE_CURRENT_TIER2_BLOCK10_SUMMATION_DELIVERED
 ( 0x0029 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

243 
	#ATTRID_SE_CURRENT_TIER2_BLOCK11_SUMMATION_DELIVERED
 ( 0x002A | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

244 
	#ATTRID_SE_CURRENT_TIER2_BLOCK12_SUMMATION_DELIVERED
 ( 0x002B | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

245 
	#ATTRID_SE_CURRENT_TIER2_BLOCK13_SUMMATION_DELIVERED
 ( 0x002C | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

246 
	#ATTRID_SE_CURRENT_TIER2_BLOCK14_SUMMATION_DELIVERED
 ( 0x002D | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

247 
	#ATTRID_SE_CURRENT_TIER2_BLOCK15_SUMMATION_DELIVERED
 ( 0x002E | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

248 
	#ATTRID_SE_CURRENT_TIER2_BLOCK16_SUMMATION_DELIVERED
 ( 0x002F | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

250 
	#ATTRID_SE_CURRENT_TIER3_BLOCK1_SUMMATION_DELIVERED
 ( 0x0030 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

251 
	#ATTRID_SE_CURRENT_TIER3_BLOCK2_SUMMATION_DELIVERED
 ( 0x0031 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

252 
	#ATTRID_SE_CURRENT_TIER3_BLOCK3_SUMMATION_DELIVERED
 ( 0x0032 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

253 
	#ATTRID_SE_CURRENT_TIER3_BLOCK4_SUMMATION_DELIVERED
 ( 0x0033 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

254 
	#ATTRID_SE_CURRENT_TIER3_BLOCK5_SUMMATION_DELIVERED
 ( 0x0034 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

255 
	#ATTRID_SE_CURRENT_TIER3_BLOCK6_SUMMATION_DELIVERED
 ( 0x0035 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

256 
	#ATTRID_SE_CURRENT_TIER3_BLOCK7_SUMMATION_DELIVERED
 ( 0x0036 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

257 
	#ATTRID_SE_CURRENT_TIER3_BLOCK8_SUMMATION_DELIVERED
 ( 0x0037 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

258 
	#ATTRID_SE_CURRENT_TIER3_BLOCK9_SUMMATION_DELIVERED
 ( 0x0038 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

259 
	#ATTRID_SE_CURRENT_TIER3_BLOCK10_SUMMATION_DELIVERED
 ( 0x0039 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

260 
	#ATTRID_SE_CURRENT_TIER3_BLOCK11_SUMMATION_DELIVERED
 ( 0x003A | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

261 
	#ATTRID_SE_CURRENT_TIER3_BLOCK12_SUMMATION_DELIVERED
 ( 0x003B | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

262 
	#ATTRID_SE_CURRENT_TIER3_BLOCK13_SUMMATION_DELIVERED
 ( 0x003C | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

263 
	#ATTRID_SE_CURRENT_TIER3_BLOCK14_SUMMATION_DELIVERED
 ( 0x003D | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

264 
	#ATTRID_SE_CURRENT_TIER3_BLOCK15_SUMMATION_DELIVERED
 ( 0x003E | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

265 
	#ATTRID_SE_CURRENT_TIER3_BLOCK16_SUMMATION_DELIVERED
 ( 0x003F | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

267 
	#ATTRID_SE_CURRENT_TIER4_BLOCK1_SUMMATION_DELIVERED
 ( 0x0040 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

268 
	#ATTRID_SE_CURRENT_TIER4_BLOCK2_SUMMATION_DELIVERED
 ( 0x0041 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

269 
	#ATTRID_SE_CURRENT_TIER4_BLOCK3_SUMMATION_DELIVERED
 ( 0x0042 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

270 
	#ATTRID_SE_CURRENT_TIER4_BLOCK4_SUMMATION_DELIVERED
 ( 0x0043 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

271 
	#ATTRID_SE_CURRENT_TIER4_BLOCK5_SUMMATION_DELIVERED
 ( 0x0044 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

272 
	#ATTRID_SE_CURRENT_TIER4_BLOCK6_SUMMATION_DELIVERED
 ( 0x0045 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

273 
	#ATTRID_SE_CURRENT_TIER4_BLOCK7_SUMMATION_DELIVERED
 ( 0x0046 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

274 
	#ATTRID_SE_CURRENT_TIER4_BLOCK8_SUMMATION_DELIVERED
 ( 0x0047 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

275 
	#ATTRID_SE_CURRENT_TIER4_BLOCK9_SUMMATION_DELIVERED
 ( 0x0048 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

276 
	#ATTRID_SE_CURRENT_TIER4_BLOCK10_SUMMATION_DELIVERED
 ( 0x0049 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

277 
	#ATTRID_SE_CURRENT_TIER4_BLOCK11_SUMMATION_DELIVERED
 ( 0x004A | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

278 
	#ATTRID_SE_CURRENT_TIER4_BLOCK12_SUMMATION_DELIVERED
 ( 0x004B | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

279 
	#ATTRID_SE_CURRENT_TIER4_BLOCK13_SUMMATION_DELIVERED
 ( 0x004C | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

280 
	#ATTRID_SE_CURRENT_TIER4_BLOCK14_SUMMATION_DELIVERED
 ( 0x004D | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

281 
	#ATTRID_SE_CURRENT_TIER4_BLOCK15_SUMMATION_DELIVERED
 ( 0x004E | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

282 
	#ATTRID_SE_CURRENT_TIER4_BLOCK16_SUMMATION_DELIVERED
 ( 0x004F | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

284 
	#ATTRID_SE_CURRENT_TIER5_BLOCK1_SUMMATION_DELIVERED
 ( 0x0050 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

285 
	#ATTRID_SE_CURRENT_TIER5_BLOCK2_SUMMATION_DELIVERED
 ( 0x0051 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

286 
	#ATTRID_SE_CURRENT_TIER5_BLOCK3_SUMMATION_DELIVERED
 ( 0x0052 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

287 
	#ATTRID_SE_CURRENT_TIER5_BLOCK4_SUMMATION_DELIVERED
 ( 0x0053 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

288 
	#ATTRID_SE_CURRENT_TIER5_BLOCK5_SUMMATION_DELIVERED
 ( 0x0054 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

289 
	#ATTRID_SE_CURRENT_TIER5_BLOCK6_SUMMATION_DELIVERED
 ( 0x0055 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

290 
	#ATTRID_SE_CURRENT_TIER5_BLOCK7_SUMMATION_DELIVERED
 ( 0x0056 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

291 
	#ATTRID_SE_CURRENT_TIER5_BLOCK8_SUMMATION_DELIVERED
 ( 0x0057 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

292 
	#ATTRID_SE_CURRENT_TIER5_BLOCK9_SUMMATION_DELIVERED
 ( 0x0058 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

293 
	#ATTRID_SE_CURRENT_TIER5_BLOCK10_SUMMATION_DELIVERED
 ( 0x0059 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

294 
	#ATTRID_SE_CURRENT_TIER5_BLOCK11_SUMMATION_DELIVERED
 ( 0x005A | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

295 
	#ATTRID_SE_CURRENT_TIER5_BLOCK12_SUMMATION_DELIVERED
 ( 0x005B | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

296 
	#ATTRID_SE_CURRENT_TIER5_BLOCK13_SUMMATION_DELIVERED
 ( 0x005C | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

297 
	#ATTRID_SE_CURRENT_TIER5_BLOCK14_SUMMATION_DELIVERED
 ( 0x005D | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

298 
	#ATTRID_SE_CURRENT_TIER5_BLOCK15_SUMMATION_DELIVERED
 ( 0x005E | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

299 
	#ATTRID_SE_CURRENT_TIER5_BLOCK16_SUMMATION_DELIVERED
 ( 0x005F | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

301 
	#ATTRID_SE_CURRENT_TIER6_BLOCK1_SUMMATION_DELIVERED
 ( 0x0060 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

302 
	#ATTRID_SE_CURRENT_TIER6_BLOCK2_SUMMATION_DELIVERED
 ( 0x0061 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

303 
	#ATTRID_SE_CURRENT_TIER6_BLOCK3_SUMMATION_DELIVERED
 ( 0x0062 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

304 
	#ATTRID_SE_CURRENT_TIER6_BLOCK4_SUMMATION_DELIVERED
 ( 0x0063 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

305 
	#ATTRID_SE_CURRENT_TIER6_BLOCK5_SUMMATION_DELIVERED
 ( 0x0064 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

306 
	#ATTRID_SE_CURRENT_TIER6_BLOCK6_SUMMATION_DELIVERED
 ( 0x0065 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

307 
	#ATTRID_SE_CURRENT_TIER6_BLOCK7_SUMMATION_DELIVERED
 ( 0x0066 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

308 
	#ATTRID_SE_CURRENT_TIER6_BLOCK8_SUMMATION_DELIVERED
 ( 0x0067 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

309 
	#ATTRID_SE_CURRENT_TIER6_BLOCK9_SUMMATION_DELIVERED
 ( 0x0068 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

310 
	#ATTRID_SE_CURRENT_TIER6_BLOCK10_SUMMATION_DELIVERED
 ( 0x0069 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

311 
	#ATTRID_SE_CURRENT_TIER6_BLOCK11_SUMMATION_DELIVERED
 ( 0x006A | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

312 
	#ATTRID_SE_CURRENT_TIER6_BLOCK12_SUMMATION_DELIVERED
 ( 0x006B | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

313 
	#ATTRID_SE_CURRENT_TIER6_BLOCK13_SUMMATION_DELIVERED
 ( 0x006C | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

314 
	#ATTRID_SE_CURRENT_TIER6_BLOCK14_SUMMATION_DELIVERED
 ( 0x006D | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

315 
	#ATTRID_SE_CURRENT_TIER6_BLOCK15_SUMMATION_DELIVERED
 ( 0x006E | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

316 
	#ATTRID_SE_CURRENT_TIER6_BLOCK16_SUMMATION_DELIVERED
 ( 0x006F | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

318 
	#ATTRID_SE_CURRENT_TIER7_BLOCK1_SUMMATION_DELIVERED
 ( 0x0070 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

319 
	#ATTRID_SE_CURRENT_TIER7_BLOCK2_SUMMATION_DELIVERED
 ( 0x0071 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

320 
	#ATTRID_SE_CURRENT_TIER7_BLOCK3_SUMMATION_DELIVERED
 ( 0x0072 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

321 
	#ATTRID_SE_CURRENT_TIER7_BLOCK4_SUMMATION_DELIVERED
 ( 0x0073 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

322 
	#ATTRID_SE_CURRENT_TIER7_BLOCK5_SUMMATION_DELIVERED
 ( 0x0074 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

323 
	#ATTRID_SE_CURRENT_TIER7_BLOCK6_SUMMATION_DELIVERED
 ( 0x0075 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

324 
	#ATTRID_SE_CURRENT_TIER7_BLOCK7_SUMMATION_DELIVERED
 ( 0x0076 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

325 
	#ATTRID_SE_CURRENT_TIER7_BLOCK8_SUMMATION_DELIVERED
 ( 0x0077 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

326 
	#ATTRID_SE_CURRENT_TIER7_BLOCK9_SUMMATION_DELIVERED
 ( 0x0078 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

327 
	#ATTRID_SE_CURRENT_TIER7_BLOCK10_SUMMATION_DELIVERED
 ( 0x0079 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

328 
	#ATTRID_SE_CURRENT_TIER7_BLOCK11_SUMMATION_DELIVERED
 ( 0x007A | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

329 
	#ATTRID_SE_CURRENT_TIER7_BLOCK12_SUMMATION_DELIVERED
 ( 0x007B | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

330 
	#ATTRID_SE_CURRENT_TIER7_BLOCK13_SUMMATION_DELIVERED
 ( 0x007C | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

331 
	#ATTRID_SE_CURRENT_TIER7_BLOCK14_SUMMATION_DELIVERED
 ( 0x007D | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

332 
	#ATTRID_SE_CURRENT_TIER7_BLOCK15_SUMMATION_DELIVERED
 ( 0x007E | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

333 
	#ATTRID_SE_CURRENT_TIER7_BLOCK16_SUMMATION_DELIVERED
 ( 0x007F | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

335 
	#ATTRID_SE_CURRENT_TIER8_BLOCK1_SUMMATION_DELIVERED
 ( 0x0080 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

336 
	#ATTRID_SE_CURRENT_TIER8_BLOCK2_SUMMATION_DELIVERED
 ( 0x0081 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

337 
	#ATTRID_SE_CURRENT_TIER8_BLOCK3_SUMMATION_DELIVERED
 ( 0x0082 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

338 
	#ATTRID_SE_CURRENT_TIER8_BLOCK4_SUMMATION_DELIVERED
 ( 0x0083 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

339 
	#ATTRID_SE_CURRENT_TIER8_BLOCK5_SUMMATION_DELIVERED
 ( 0x0084 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

340 
	#ATTRID_SE_CURRENT_TIER8_BLOCK6_SUMMATION_DELIVERED
 ( 0x0085 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

341 
	#ATTRID_SE_CURRENT_TIER8_BLOCK7_SUMMATION_DELIVERED
 ( 0x0086 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

342 
	#ATTRID_SE_CURRENT_TIER8_BLOCK8_SUMMATION_DELIVERED
 ( 0x0087 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

343 
	#ATTRID_SE_CURRENT_TIER8_BLOCK9_SUMMATION_DELIVERED
 ( 0x0088 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

344 
	#ATTRID_SE_CURRENT_TIER8_BLOCK10_SUMMATION_DELIVERED
 ( 0x0089 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

345 
	#ATTRID_SE_CURRENT_TIER8_BLOCK11_SUMMATION_DELIVERED
 ( 0x008A | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

346 
	#ATTRID_SE_CURRENT_TIER8_BLOCK12_SUMMATION_DELIVERED
 ( 0x008B | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

347 
	#ATTRID_SE_CURRENT_TIER8_BLOCK13_SUMMATION_DELIVERED
 ( 0x008C | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

348 
	#ATTRID_SE_CURRENT_TIER8_BLOCK14_SUMMATION_DELIVERED
 ( 0x008D | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

349 
	#ATTRID_SE_CURRENT_TIER8_BLOCK15_SUMMATION_DELIVERED
 ( 0x008E | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

350 
	#ATTRID_SE_CURRENT_TIER8_BLOCK16_SUMMATION_DELIVERED
 ( 0x008F | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

352 
	#ATTRID_SE_CURRENT_TIER9_BLOCK1_SUMMATION_DELIVERED
 ( 0x0090 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

353 
	#ATTRID_SE_CURRENT_TIER9_BLOCK2_SUMMATION_DELIVERED
 ( 0x0091 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

354 
	#ATTRID_SE_CURRENT_TIER9_BLOCK3_SUMMATION_DELIVERED
 ( 0x0092 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

355 
	#ATTRID_SE_CURRENT_TIER9_BLOCK4_SUMMATION_DELIVERED
 ( 0x0093 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

356 
	#ATTRID_SE_CURRENT_TIER9_BLOCK5_SUMMATION_DELIVERED
 ( 0x0094 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

357 
	#ATTRID_SE_CURRENT_TIER9_BLOCK6_SUMMATION_DELIVERED
 ( 0x0095 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

358 
	#ATTRID_SE_CURRENT_TIER9_BLOCK7_SUMMATION_DELIVERED
 ( 0x0096 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

359 
	#ATTRID_SE_CURRENT_TIER9_BLOCK8_SUMMATION_DELIVERED
 ( 0x0097 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

360 
	#ATTRID_SE_CURRENT_TIER9_BLOCK9_SUMMATION_DELIVERED
 ( 0x0098 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

361 
	#ATTRID_SE_CURRENT_TIER9_BLOCK10_SUMMATION_DELIVERED
 ( 0x0099 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

362 
	#ATTRID_SE_CURRENT_TIER9_BLOCK11_SUMMATION_DELIVERED
 ( 0x009A | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

363 
	#ATTRID_SE_CURRENT_TIER9_BLOCK12_SUMMATION_DELIVERED
 ( 0x009B | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

364 
	#ATTRID_SE_CURRENT_TIER9_BLOCK13_SUMMATION_DELIVERED
 ( 0x009C | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

365 
	#ATTRID_SE_CURRENT_TIER9_BLOCK14_SUMMATION_DELIVERED
 ( 0x009D | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

366 
	#ATTRID_SE_CURRENT_TIER9_BLOCK15_SUMMATION_DELIVERED
 ( 0x009E | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

367 
	#ATTRID_SE_CURRENT_TIER9_BLOCK16_SUMMATION_DELIVERED
 ( 0x009F | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

369 
	#ATTRID_SE_CURRENT_TIER10_BLOCK1_SUMMATION_DELIVERED
 ( 0x00A0 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

370 
	#ATTRID_SE_CURRENT_TIER10_BLOCK2_SUMMATION_DELIVERED
 ( 0x00A1 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

371 
	#ATTRID_SE_CURRENT_TIER10_BLOCK3_SUMMATION_DELIVERED
 ( 0x00A2 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

372 
	#ATTRID_SE_CURRENT_TIER10_BLOCK4_SUMMATION_DELIVERED
 ( 0x00A3 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

373 
	#ATTRID_SE_CURRENT_TIER10_BLOCK5_SUMMATION_DELIVERED
 ( 0x00A4 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

374 
	#ATTRID_SE_CURRENT_TIER10_BLOCK6_SUMMATION_DELIVERED
 ( 0x00A5 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

375 
	#ATTRID_SE_CURRENT_TIER10_BLOCK7_SUMMATION_DELIVERED
 ( 0x00A6 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

376 
	#ATTRID_SE_CURRENT_TIER10_BLOCK8_SUMMATION_DELIVERED
 ( 0x00A7 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

377 
	#ATTRID_SE_CURRENT_TIER10_BLOCK9_SUMMATION_DELIVERED
 ( 0x00A8 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

378 
	#ATTRID_SE_CURRENT_TIER10_BLOCK10_SUMMATION_DELIVERED
 ( 0x00A9 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

379 
	#ATTRID_SE_CURRENT_TIER10_BLOCK11_SUMMATION_DELIVERED
 ( 0x00AA | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

380 
	#ATTRID_SE_CURRENT_TIER10_BLOCK12_SUMMATION_DELIVERED
 ( 0x00AB | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

381 
	#ATTRID_SE_CURRENT_TIER10_BLOCK13_SUMMATION_DELIVERED
 ( 0x00AC | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

382 
	#ATTRID_SE_CURRENT_TIER10_BLOCK14_SUMMATION_DELIVERED
 ( 0x00AD | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

383 
	#ATTRID_SE_CURRENT_TIER10_BLOCK15_SUMMATION_DELIVERED
 ( 0x00AE | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

384 
	#ATTRID_SE_CURRENT_TIER10_BLOCK16_SUMMATION_DELIVERED
 ( 0x00AF | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

386 
	#ATTRID_SE_CURRENT_TIER11_BLOCK1_SUMMATION_DELIVERED
 ( 0x00B0 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

387 
	#ATTRID_SE_CURRENT_TIER11_BLOCK2_SUMMATION_DELIVERED
 ( 0x00B1 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

388 
	#ATTRID_SE_CURRENT_TIER11_BLOCK3_SUMMATION_DELIVERED
 ( 0x00B2 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

389 
	#ATTRID_SE_CURRENT_TIER11_BLOCK4_SUMMATION_DELIVERED
 ( 0x00B3 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

390 
	#ATTRID_SE_CURRENT_TIER11_BLOCK5_SUMMATION_DELIVERED
 ( 0x00B4 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

391 
	#ATTRID_SE_CURRENT_TIER11_BLOCK6_SUMMATION_DELIVERED
 ( 0x00B5 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

392 
	#ATTRID_SE_CURRENT_TIER11_BLOCK7_SUMMATION_DELIVERED
 ( 0x00B6 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

393 
	#ATTRID_SE_CURRENT_TIER11_BLOCK8_SUMMATION_DELIVERED
 ( 0x00B7 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

394 
	#ATTRID_SE_CURRENT_TIER11_BLOCK9_SUMMATION_DELIVERED
 ( 0x00B8 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

395 
	#ATTRID_SE_CURRENT_TIER11_BLOCK10_SUMMATION_DELIVERED
 ( 0x00B9 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

396 
	#ATTRID_SE_CURRENT_TIER11_BLOCK11_SUMMATION_DELIVERED
 ( 0x00BA | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

397 
	#ATTRID_SE_CURRENT_TIER11_BLOCK12_SUMMATION_DELIVERED
 ( 0x00BB | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

398 
	#ATTRID_SE_CURRENT_TIER11_BLOCK13_SUMMATION_DELIVERED
 ( 0x00BC | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

399 
	#ATTRID_SE_CURRENT_TIER11_BLOCK14_SUMMATION_DELIVERED
 ( 0x00BD | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

400 
	#ATTRID_SE_CURRENT_TIER11_BLOCK15_SUMMATION_DELIVERED
 ( 0x00BE | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

401 
	#ATTRID_SE_CURRENT_TIER11_BLOCK16_SUMMATION_DELIVERED
 ( 0x00BF | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

403 
	#ATTRID_SE_CURRENT_TIER12_BLOCK1_SUMMATION_DELIVERED
 ( 0x00C0 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

404 
	#ATTRID_SE_CURRENT_TIER12_BLOCK2_SUMMATION_DELIVERED
 ( 0x00C1 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

405 
	#ATTRID_SE_CURRENT_TIER12_BLOCK3_SUMMATION_DELIVERED
 ( 0x00C2 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

406 
	#ATTRID_SE_CURRENT_TIER12_BLOCK4_SUMMATION_DELIVERED
 ( 0x00C3 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

407 
	#ATTRID_SE_CURRENT_TIER12_BLOCK5_SUMMATION_DELIVERED
 ( 0x00C4 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

408 
	#ATTRID_SE_CURRENT_TIER12_BLOCK6_SUMMATION_DELIVERED
 ( 0x00C5 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

409 
	#ATTRID_SE_CURRENT_TIER12_BLOCK7_SUMMATION_DELIVERED
 ( 0x00C6 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

410 
	#ATTRID_SE_CURRENT_TIER12_BLOCK8_SUMMATION_DELIVERED
 ( 0x00C7 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

411 
	#ATTRID_SE_CURRENT_TIER12_BLOCK9_SUMMATION_DELIVERED
 ( 0x00C8 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

412 
	#ATTRID_SE_CURRENT_TIER12_BLOCK10_SUMMATION_DELIVERED
 ( 0x00C9 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

413 
	#ATTRID_SE_CURRENT_TIER12_BLOCK11_SUMMATION_DELIVERED
 ( 0x00CA | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

414 
	#ATTRID_SE_CURRENT_TIER12_BLOCK12_SUMMATION_DELIVERED
 ( 0x00CB | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

415 
	#ATTRID_SE_CURRENT_TIER12_BLOCK13_SUMMATION_DELIVERED
 ( 0x00CC | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

416 
	#ATTRID_SE_CURRENT_TIER12_BLOCK14_SUMMATION_DELIVERED
 ( 0x00CD | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

417 
	#ATTRID_SE_CURRENT_TIER12_BLOCK15_SUMMATION_DELIVERED
 ( 0x00CE | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

418 
	#ATTRID_SE_CURRENT_TIER12_BLOCK16_SUMMATION_DELIVERED
 ( 0x00CF | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

420 
	#ATTRID_SE_CURRENT_TIER13_BLOCK1_SUMMATION_DELIVERED
 ( 0x00D0 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

421 
	#ATTRID_SE_CURRENT_TIER13_BLOCK2_SUMMATION_DELIVERED
 ( 0x00D1 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

422 
	#ATTRID_SE_CURRENT_TIER13_BLOCK3_SUMMATION_DELIVERED
 ( 0x00D2 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

423 
	#ATTRID_SE_CURRENT_TIER13_BLOCK4_SUMMATION_DELIVERED
 ( 0x00D3 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

424 
	#ATTRID_SE_CURRENT_TIER13_BLOCK5_SUMMATION_DELIVERED
 ( 0x00D4 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

425 
	#ATTRID_SE_CURRENT_TIER13_BLOCK6_SUMMATION_DELIVERED
 ( 0x00D5 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

426 
	#ATTRID_SE_CURRENT_TIER13_BLOCK7_SUMMATION_DELIVERED
 ( 0x00D6 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

427 
	#ATTRID_SE_CURRENT_TIER13_BLOCK8_SUMMATION_DELIVERED
 ( 0x00D7 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

428 
	#ATTRID_SE_CURRENT_TIER13_BLOCK9_SUMMATION_DELIVERED
 ( 0x00D8 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

429 
	#ATTRID_SE_CURRENT_TIER13_BLOCK10_SUMMATION_DELIVERED
 ( 0x00D9 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

430 
	#ATTRID_SE_CURRENT_TIER13_BLOCK11_SUMMATION_DELIVERED
 ( 0x00DA | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

431 
	#ATTRID_SE_CURRENT_TIER13_BLOCK12_SUMMATION_DELIVERED
 ( 0x00DB | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

432 
	#ATTRID_SE_CURRENT_TIER13_BLOCK13_SUMMATION_DELIVERED
 ( 0x00DC | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

433 
	#ATTRID_SE_CURRENT_TIER13_BLOCK14_SUMMATION_DELIVERED
 ( 0x00DD | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

434 
	#ATTRID_SE_CURRENT_TIER13_BLOCK15_SUMMATION_DELIVERED
 ( 0x00DE | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

435 
	#ATTRID_SE_CURRENT_TIER13_BLOCK16_SUMMATION_DELIVERED
 ( 0x00DF | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

437 
	#ATTRID_SE_CURRENT_TIER14_BLOCK1_SUMMATION_DELIVERED
 ( 0x00E0 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

438 
	#ATTRID_SE_CURRENT_TIER14_BLOCK2_SUMMATION_DELIVERED
 ( 0x00E1 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

439 
	#ATTRID_SE_CURRENT_TIER14_BLOCK3_SUMMATION_DELIVERED
 ( 0x00E2 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

440 
	#ATTRID_SE_CURRENT_TIER14_BLOCK4_SUMMATION_DELIVERED
 ( 0x00E3 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

441 
	#ATTRID_SE_CURRENT_TIER14_BLOCK5_SUMMATION_DELIVERED
 ( 0x00E4 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

442 
	#ATTRID_SE_CURRENT_TIER14_BLOCK6_SUMMATION_DELIVERED
 ( 0x00E5 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

443 
	#ATTRID_SE_CURRENT_TIER14_BLOCK7_SUMMATION_DELIVERED
 ( 0x00E6 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

444 
	#ATTRID_SE_CURRENT_TIER14_BLOCK8_SUMMATION_DELIVERED
 ( 0x00E7 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

445 
	#ATTRID_SE_CURRENT_TIER14_BLOCK9_SUMMATION_DELIVERED
 ( 0x00E8 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

446 
	#ATTRID_SE_CURRENT_TIER14_BLOCK10_SUMMATION_DELIVERED
 ( 0x00E9 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

447 
	#ATTRID_SE_CURRENT_TIER14_BLOCK11_SUMMATION_DELIVERED
 ( 0x00EA | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

448 
	#ATTRID_SE_CURRENT_TIER14_BLOCK12_SUMMATION_DELIVERED
 ( 0x00EB | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

449 
	#ATTRID_SE_CURRENT_TIER14_BLOCK13_SUMMATION_DELIVERED
 ( 0x00EC | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

450 
	#ATTRID_SE_CURRENT_TIER14_BLOCK14_SUMMATION_DELIVERED
 ( 0x00ED | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

451 
	#ATTRID_SE_CURRENT_TIER14_BLOCK15_SUMMATION_DELIVERED
 ( 0x00EE | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

452 
	#ATTRID_SE_CURRENT_TIER14_BLOCK16_SUMMATION_DELIVERED
 ( 0x00EF | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

454 
	#ATTRID_SE_CURRENT_TIER15_BLOCK1_SUMMATION_DELIVERED
 ( 0x00F0 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

455 
	#ATTRID_SE_CURRENT_TIER15_BLOCK2_SUMMATION_DELIVERED
 ( 0x00F1 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

456 
	#ATTRID_SE_CURRENT_TIER15_BLOCK3_SUMMATION_DELIVERED
 ( 0x00F2 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

457 
	#ATTRID_SE_CURRENT_TIER15_BLOCK4_SUMMATION_DELIVERED
 ( 0x00F3 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

458 
	#ATTRID_SE_CURRENT_TIER15_BLOCK5_SUMMATION_DELIVERED
 ( 0x00F4 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

459 
	#ATTRID_SE_CURRENT_TIER15_BLOCK6_SUMMATION_DELIVERED
 ( 0x00F5 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

460 
	#ATTRID_SE_CURRENT_TIER15_BLOCK7_SUMMATION_DELIVERED
 ( 0x00F6 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

461 
	#ATTRID_SE_CURRENT_TIER15_BLOCK8_SUMMATION_DELIVERED
 ( 0x00F7 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

462 
	#ATTRID_SE_CURRENT_TIER15_BLOCK9_SUMMATION_DELIVERED
 ( 0x00F8 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

463 
	#ATTRID_SE_CURRENT_TIER15_BLOCK10_SUMMATION_DELIVERED
 ( 0x00F9 | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

464 
	#ATTRID_SE_CURRENT_TIER15_BLOCK11_SUMMATION_DELIVERED
 ( 0x00FA | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

465 
	#ATTRID_SE_CURRENT_TIER15_BLOCK12_SUMMATION_DELIVERED
 ( 0x00FB | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

466 
	#ATTRID_SE_CURRENT_TIER15_BLOCK13_SUMMATION_DELIVERED
 ( 0x00FC | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

467 
	#ATTRID_SE_CURRENT_TIER15_BLOCK14_SUMMATION_DELIVERED
 ( 0x00FD | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

468 
	#ATTRID_SE_CURRENT_TIER15_BLOCK15_SUMMATION_DELIVERED
 ( 0x00FE | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

469 
	#ATTRID_SE_CURRENT_TIER15_BLOCK16_SUMMATION_DELIVERED
 ( 0x00FF | 
ATTRID_MASK_SE_BLOCK_INFORMATION
 )

	)

472 
	#ATTRID_SE_GENERIC_ALARM_MASK
 ( 0x0000 | 
ATTRID_MASK_SE_ALARMS
 )

	)

473 
	#ATTRID_SE_ELECTRICITY_ALARM_MASK
 ( 0x0001 | 
ATTRID_MASK_SE_ALARMS
 )

	)

474 
	#ATTRID_SE_GEN_FLOW_PRESSURE_ALARM_MASK
 ( 0x0002 | 
ATTRID_MASK_SE_ALARMS
 )

	)

475 
	#ATTRID_SE_WATER_SPECIFIC_ALARM_MASK
 ( 0x0003 | 
ATTRID_MASK_SE_ALARMS
 )

	)

476 
	#ATTRID_SE_HEAT_COOL_SPECIFIC_ALARM_MASK
 ( 0x0004 | 
ATTRID_MASK_SE_ALARMS
 )

	)

477 
	#ATTRID_SE_GAS_SPECIFIC_ALARM_MASK
 ( 0x0005 | 
ATTRID_MASK_SE_ALARMS
 )

	)

478 
	#ATTRID_SE_MANUFACTURE_ALARM_MASK
 ( 0x0006 | 
ATTRID_MASK_SE_ALARMS
 )

	)

481 
	#ATTRID_SE_CURRENT_TIER_X_BLOCK_Y_RECEIVED
(
X
, 
Y
Ë–((((X)&0xF)<<4Ë| (((Y)&0xF)-1)Ë| 
ATTRID_MASK_SE_BLOCK_INFORMATION_RECEIVED
 )

	)

484 
	#ATTRID_SE_BILL_TO_DATE
 ( 0x0000 | 
ATTRID_MASK_SE_BILLING
 )

	)

485 
	#ATTRID_SE_BILL_TO_DATE_TIME_STAMP
 ( 0x0001 | 
ATTRID_MASK_SE_BILLING
 )

	)

486 
	#ATTRID_SE_PROJECTED_BILL
 ( 0x0002 | 
ATTRID_MASK_SE_BILLING
 )

	)

487 
	#ATTRID_SE_PROJECTED_BILL_TIME_STAMP
 ( 0x0003 | 
ATTRID_MASK_SE_BILLING
 )

	)

490 
	#ATTRID_MASK_SE_NOTIFICATION_SET
 0x0000

	)

491 
	#ATTRID_MASK_SE_MIRROR_CONFIGURATION_SET
 0x0001

	)

494 
	#ATTRID_SE_NOTIFICATION_CONTROL_FLAGS
 ( 0x0000 | 
ATTRID_MASK_SE_NOTIFICATION_SET
 )

	)

495 
	#ATTRID_SE_NOTIFICATION_FLAGS
 ( 0x0001 | 
ATTRID_MASK_SE_NOTIFICATION_SET
 )

	)

496 
	#ATTRID_SE_PRICE_NOTIFICATION_FLAGS
 ( 0x0002 | 
ATTRID_MASK_SE_NOTIFICATION_SET
 )

	)

497 
	#ATTRID_SE_CALENDAR_NOTIFICATION_FLAGS
 ( 0x0003 | 
ATTRID_MASK_SE_NOTIFICATION_SET
 )

	)

498 
	#ATTRID_SE_PRE_PAY_NOTIFICATION_FLAGS
 ( 0x0004 | 
ATTRID_MASK_SE_NOTIFICATION_SET
 )

	)

499 
	#ATTRID_SE_DEVICE_MANAGEMENT_FLAGS
 ( 0x0005 | 
ATTRID_MASK_SE_NOTIFICATION_SET
 )

	)

502 
	#ATTRID_SE_CHANGE_REPORTING_PROFILE
 ( 0x0000 | 
ATTRID_MASK_SE_MIRROR_CONFIGURATION_SET
 )

	)

505 
	#ATTRID_SE_UTILITY_DEFINED_GROUP
 0x0000

	)

506 
	#ATTRID_SE_START_RANDOMIZE_MINUTES
 0x0001

	)

507 
	#ATTRID_SE_STOP_RANDOMIZE_MINUTES
 0x0002

	)

510 
	#ATTRID_MASK_SE_TIER_LABEL
 0x0000

	)

511 
	#ATTRID_MASK_SE_BLOCK_THRESHOLD
 0x0100

	)

512 
	#ATTRID_MASK_SE_BLOCK_PERIOD
 0x0200

	)

513 
	#ATTRID_MASK_SE_COMMODITY
 0x0300

	)

514 
	#ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 0x0400

	)

515 
	#ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 0x0500

	)

516 
	#ATTRID_MASK_SE_TARIFF_INFORMATION
 0x0600

	)

517 
	#ATTRID_MASK_SE_BILLING_INFORMATION
 0x0700

	)

518 
	#ATTRID_MASK_SE_CREDIT_PAYMENT
 0x0800

	)

519 
	#ATTRID_MASK_SE_TAX_CONTROL
 0x0900

	)

520 
	#ATTRID_MASK_SE_EXPORT_TIER_LABEL
 0x8000

	)

521 
	#ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 0x8100

	)

522 
	#ATTRID_MASK_SE_EXPORT_BLOCK_PERIOD
 0x8200

	)

523 
	#ATTRID_MASK_SE_EXPORT_BLOCK_PRICE_INFO
 0x8400

	)

524 
	#ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 0x8500

	)

525 
	#ATTRID_MASK_SE_EXPORT_TARIFF_INFO
 0x8600

	)

526 
	#ATTRID_MASK_SE_EXPORT_BILLING_INFO
 0x8700

	)

529 
	#ATTRID_SE_TIER1_PRICE_LABEL
 ( 0x0000 | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

530 
	#ATTRID_SE_TIER2_PRICE_LABEL
 ( 0x0001 | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

531 
	#ATTRID_SE_TIER3_PRICE_LABEL
 ( 0x0002 | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

532 
	#ATTRID_SE_TIER4_PRICE_LABEL
 ( 0x0003 | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

533 
	#ATTRID_SE_TIER5_PRICE_LABEL
 ( 0x0004 | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

534 
	#ATTRID_SE_TIER6_PRICE_LABEL
 ( 0x0005 | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

535 
	#ATTRID_SE_TIER7_PRICE_LABEL
 ( 0x0006 | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

536 
	#ATTRID_SE_TIER8_PRICE_LABEL
 ( 0x0007 | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

537 
	#ATTRID_SE_TIER9_PRICE_LABEL
 ( 0x0008 | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

538 
	#ATTRID_SE_TIER10_PRICE_LABEL
 ( 0x0009 | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

539 
	#ATTRID_SE_TIER11_PRICE_LABEL
 ( 0x000A | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

540 
	#ATTRID_SE_TIER12_PRICE_LABEL
 ( 0x000B | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

541 
	#ATTRID_SE_TIER13_PRICE_LABEL
 ( 0x000C | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

542 
	#ATTRID_SE_TIER14_PRICE_LABEL
 ( 0x000D | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

543 
	#ATTRID_SE_TIER15_PRICE_LABEL
 ( 0x000E | 
ATTRID_MASK_SE_TIER_LABEL
 )

	)

546 
	#ATTRID_SE_BLOCK1_THRESHOLD
 ( 0x0000 | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

547 
	#ATTRID_SE_BLOCK2_THRESHOLD
 ( 0x0001 | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

548 
	#ATTRID_SE_BLOCK3_THRESHOLD
 ( 0x0002 | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

549 
	#ATTRID_SE_BLOCK4_THRESHOLD
 ( 0x0003 | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

550 
	#ATTRID_SE_BLOCK5_THRESHOLD
 ( 0x0004 | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

551 
	#ATTRID_SE_BLOCK6_THRESHOLD
 ( 0x0005 | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

552 
	#ATTRID_SE_BLOCK7_THRESHOLD
 ( 0x0006 | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

553 
	#ATTRID_SE_BLOCK8_THRESHOLD
 ( 0x0007 | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

554 
	#ATTRID_SE_BLOCK9_THRESHOLD
 ( 0x0008 | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

555 
	#ATTRID_SE_BLOCK10_THRESHOLD
 ( 0x0009 | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

556 
	#ATTRID_SE_BLOCK11_THRESHOLD
 ( 0x000A | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

557 
	#ATTRID_SE_BLOCK12_THRESHOLD
 ( 0x000B | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

558 
	#ATTRID_SE_BLOCK13_THRESHOLD
 ( 0x000C | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

559 
	#ATTRID_SE_BLOCK14_THRESHOLD
 ( 0x000D | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

560 
	#ATTRID_SE_BLOCK15_THRESHOLD
 ( 0x000E | 
ATTRID_MASK_SE_BLOCK_THRESHOLD
 )

	)

563 
	#ATTRID_SE_START_OF_BLOCK_PERIOD
 ( 0x0000 | 
ATTRID_MASK_SE_BLOCK_PERIOD
 )

	)

564 
	#ATTRID_SE_BLOCK_PERIOD_DURATION
 ( 0x0001 | 
ATTRID_MASK_SE_BLOCK_PERIOD
 )

	)

565 
	#ATTRID_SE_THRESHOLD_MULTIPLIER
 ( 0x0002 | 
ATTRID_MASK_SE_BLOCK_PERIOD
 )

	)

566 
	#ATTRID_SE_THRESHOLD_DIVISOR
 ( 0x0003 | 
ATTRID_MASK_SE_BLOCK_PERIOD
 )

	)

569 
	#ATTRID_SE_COMMODITY_TYPE
 ( 0x0000 | 
ATTRID_MASK_SE_COMMODITY
 )

	)

570 
	#ATTRID_SE_STANDING_CHARGE
 ( 0x0001 | 
ATTRID_MASK_SE_COMMODITY
 )

	)

573 
	#ATTRID_SE_NO_TIER_BLOCK1_PRICE
 ( 0x0000 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

574 
	#ATTRID_SE_NO_TIER_BLOCK2_PRICE
 ( 0x0001 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

575 
	#ATTRID_SE_NO_TIER_BLOCK3_PRICE
 ( 0x0002 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

576 
	#ATTRID_SE_NO_TIER_BLOCK4_PRICE
 ( 0x0003 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

577 
	#ATTRID_SE_NO_TIER_BLOCK5_PRICE
 ( 0x0004 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

578 
	#ATTRID_SE_NO_TIER_BLOCK6_PRICE
 ( 0x0005 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

579 
	#ATTRID_SE_NO_TIER_BLOCK7_PRICE
 ( 0x0006 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

580 
	#ATTRID_SE_NO_TIER_BLOCK8_PRICE
 ( 0x0007 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

581 
	#ATTRID_SE_NO_TIER_BLOCK9_PRICE
 ( 0x0008 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

582 
	#ATTRID_SE_NO_TIER_BLOCK10_PRICE
 ( 0x0009 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

583 
	#ATTRID_SE_NO_TIER_BLOCK11_PRICE
 ( 0x000A | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

584 
	#ATTRID_SE_NO_TIER_BLOCK12_PRICE
 ( 0x000B | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

585 
	#ATTRID_SE_NO_TIER_BLOCK13_PRICE
 ( 0x000C | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

586 
	#ATTRID_SE_NO_TIER_BLOCK14_PRICE
 ( 0x000D | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

587 
	#ATTRID_SE_NO_TIER_BLOCK15_PRICE
 ( 0x000E | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

588 
	#ATTRID_SE_NO_TIER_BLOCK16_PRICE
 ( 0x000F | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

590 
	#ATTRID_SE_TIER1_BLOCK1_PRICE
 ( 0x0010 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

591 
	#ATTRID_SE_TIER1_BLOCK2_PRICE
 ( 0x0011 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

592 
	#ATTRID_SE_TIER1_BLOCK3_PRICE
 ( 0x0012 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

593 
	#ATTRID_SE_TIER1_BLOCK4_PRICE
 ( 0x0013 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

594 
	#ATTRID_SE_TIER1_BLOCK5_PRICE
 ( 0x0014 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

595 
	#ATTRID_SE_TIER1_BLOCK6_PRICE
 ( 0x0015 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

596 
	#ATTRID_SE_TIER1_BLOCK7_PRICE
 ( 0x0016 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

597 
	#ATTRID_SE_TIER1_BLOCK8_PRICE
 ( 0x0017 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

598 
	#ATTRID_SE_TIER1_BLOCK9_PRICE
 ( 0x0018 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

599 
	#ATTRID_SE_TIER1_BLOCK10_PRICE
 ( 0x0019 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

600 
	#ATTRID_SE_TIER1_BLOCK11_PRICE
 ( 0x001A | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

601 
	#ATTRID_SE_TIER1_BLOCK12_PRICE
 ( 0x001B | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

602 
	#ATTRID_SE_TIER1_BLOCK13_PRICE
 ( 0x001C | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

603 
	#ATTRID_SE_TIER1_BLOCK14_PRICE
 ( 0x001D | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

604 
	#ATTRID_SE_TIER1_BLOCK15_PRICE
 ( 0x001E | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

605 
	#ATTRID_SE_TIER1_BLOCK16_PRICE
 ( 0x001F | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

607 
	#ATTRID_SE_TIER2_BLOCK1_PRICE
 ( 0x0020 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

608 
	#ATTRID_SE_TIER2_BLOCK2_PRICE
 ( 0x0021 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

609 
	#ATTRID_SE_TIER2_BLOCK3_PRICE
 ( 0x0022 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

610 
	#ATTRID_SE_TIER2_BLOCK4_PRICE
 ( 0x0023 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

611 
	#ATTRID_SE_TIER2_BLOCK5_PRICE
 ( 0x0024 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

612 
	#ATTRID_SE_TIER2_BLOCK6_PRICE
 ( 0x0025 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

613 
	#ATTRID_SE_TIER2_BLOCK7_PRICE
 ( 0x0026 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

614 
	#ATTRID_SE_TIER2_BLOCK8_PRICE
 ( 0x0027 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

615 
	#ATTRID_SE_TIER2_BLOCK9_PRICE
 ( 0x0028 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

616 
	#ATTRID_SE_TIER2_BLOCK10_PRICE
 ( 0x0029 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

617 
	#ATTRID_SE_TIER2_BLOCK11_PRICE
 ( 0x002A | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

618 
	#ATTRID_SE_TIER2_BLOCK12_PRICE
 ( 0x002B | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

619 
	#ATTRID_SE_TIER2_BLOCK13_PRICE
 ( 0x002C | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

620 
	#ATTRID_SE_TIER2_BLOCK14_PRICE
 ( 0x002D | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

621 
	#ATTRID_SE_TIER2_BLOCK15_PRICE
 ( 0x002E | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

622 
	#ATTRID_SE_TIER2_BLOCK16_PRICE
 ( 0x002F | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

624 
	#ATTRID_SE_TIER3_BLOCK1_PRICE
 ( 0x0030 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

625 
	#ATTRID_SE_TIER3_BLOCK2_PRICE
 ( 0x0031 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

626 
	#ATTRID_SE_TIER3_BLOCK3_PRICE
 ( 0x0032 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

627 
	#ATTRID_SE_TIER3_BLOCK4_PRICE
 ( 0x0033 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

628 
	#ATTRID_SE_TIER3_BLOCK5_PRICE
 ( 0x0034 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

629 
	#ATTRID_SE_TIER3_BLOCK6_PRICE
 ( 0x0035 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

630 
	#ATTRID_SE_TIER3_BLOCK7_PRICE
 ( 0x0036 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

631 
	#ATTRID_SE_TIER3_BLOCK8_PRICE
 ( 0x0037 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

632 
	#ATTRID_SE_TIER3_BLOCK9_PRICE
 ( 0x0038 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

633 
	#ATTRID_SE_TIER3_BLOCK10_PRICE
 ( 0x0039 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

634 
	#ATTRID_SE_TIER3_BLOCK11_PRICE
 ( 0x003A | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

635 
	#ATTRID_SE_TIER3_BLOCK12_PRICE
 ( 0x003B | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

636 
	#ATTRID_SE_TIER3_BLOCK13_PRICE
 ( 0x003C | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

637 
	#ATTRID_SE_TIER3_BLOCK14_PRICE
 ( 0x003D | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

638 
	#ATTRID_SE_TIER3_BLOCK15_PRICE
 ( 0x003E | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

639 
	#ATTRID_SE_TIER3_BLOCK16_PRICE
 ( 0x003F | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

641 
	#ATTRID_SE_TIER4_BLOCK1_PRICE
 ( 0x0040 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

642 
	#ATTRID_SE_TIER4_BLOCK2_PRICE
 ( 0x0041 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

643 
	#ATTRID_SE_TIER4_BLOCK3_PRICE
 ( 0x0042 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

644 
	#ATTRID_SE_TIER4_BLOCK4_PRICE
 ( 0x0043 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

645 
	#ATTRID_SE_TIER4_BLOCK5_PRICE
 ( 0x0044 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

646 
	#ATTRID_SE_TIER4_BLOCK6_PRICE
 ( 0x0045 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

647 
	#ATTRID_SE_TIER4_BLOCK7_PRICE
 ( 0x0046 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

648 
	#ATTRID_SE_TIER4_BLOCK8_PRICE
 ( 0x0047 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

649 
	#ATTRID_SE_TIER4_BLOCK9_PRICE
 ( 0x0048 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

650 
	#ATTRID_SE_TIER4_BLOCK10_PRICE
 ( 0x0049 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

651 
	#ATTRID_SE_TIER4_BLOCK11_PRICE
 ( 0x004A | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

652 
	#ATTRID_SE_TIER4_BLOCK12_PRICE
 ( 0x004B | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

653 
	#ATTRID_SE_TIER4_BLOCK13_PRICE
 ( 0x004C | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

654 
	#ATTRID_SE_TIER4_BLOCK14_PRICE
 ( 0x004D | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

655 
	#ATTRID_SE_TIER4_BLOCK15_PRICE
 ( 0x004E | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

656 
	#ATTRID_SE_TIER4_BLOCK16_PRICE
 ( 0x004F | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

658 
	#ATTRID_SE_TIER5_BLOCK1_PRICE
 ( 0x0050 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

659 
	#ATTRID_SE_TIER5_BLOCK2_PRICE
 ( 0x0051 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

660 
	#ATTRID_SE_TIER5_BLOCK3_PRICE
 ( 0x0052 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

661 
	#ATTRID_SE_TIER5_BLOCK4_PRICE
 ( 0x0053 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

662 
	#ATTRID_SE_TIER5_BLOCK5_PRICE
 ( 0x0054 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

663 
	#ATTRID_SE_TIER5_BLOCK6_PRICE
 ( 0x0055 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

664 
	#ATTRID_SE_TIER5_BLOCK7_PRICE
 ( 0x0056 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

665 
	#ATTRID_SE_TIER5_BLOCK8_PRICE
 ( 0x0057 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

666 
	#ATTRID_SE_TIER5_BLOCK9_PRICE
 ( 0x0058 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

667 
	#ATTRID_SE_TIER5_BLOCK10_PRICE
 ( 0x0059 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

668 
	#ATTRID_SE_TIER5_BLOCK11_PRICE
 ( 0x005A | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

669 
	#ATTRID_SE_TIER5_BLOCK12_PRICE
 ( 0x005B | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

670 
	#ATTRID_SE_TIER5_BLOCK13_PRICE
 ( 0x005C | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

671 
	#ATTRID_SE_TIER5_BLOCK14_PRICE
 ( 0x005D | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

672 
	#ATTRID_SE_TIER5_BLOCK15_PRICE
 ( 0x005E | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

673 
	#ATTRID_SE_TIER5_BLOCK16_PRICE
 ( 0x005F | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

675 
	#ATTRID_SE_TIER6_BLOCK1_PRICE
 ( 0x0060 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

676 
	#ATTRID_SE_TIER6_BLOCK2_PRICE
 ( 0x0061 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

677 
	#ATTRID_SE_TIER6_BLOCK3_PRICE
 ( 0x0062 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

678 
	#ATTRID_SE_TIER6_BLOCK4_PRICE
 ( 0x0063 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

679 
	#ATTRID_SE_TIER6_BLOCK5_PRICE
 ( 0x0064 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

680 
	#ATTRID_SE_TIER6_BLOCK6_PRICE
 ( 0x0065 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

681 
	#ATTRID_SE_TIER6_BLOCK7_PRICE
 ( 0x0066 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

682 
	#ATTRID_SE_TIER6_BLOCK8_PRICE
 ( 0x0067 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

683 
	#ATTRID_SE_TIER6_BLOCK9_PRICE
 ( 0x0068 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

684 
	#ATTRID_SE_TIER6_BLOCK10_PRICE
 ( 0x0069 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

685 
	#ATTRID_SE_TIER6_BLOCK11_PRICE
 ( 0x006A | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

686 
	#ATTRID_SE_TIER6_BLOCK12_PRICE
 ( 0x006B | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

687 
	#ATTRID_SE_TIER6_BLOCK13_PRICE
 ( 0x006C | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

688 
	#ATTRID_SE_TIER6_BLOCK14_PRICE
 ( 0x006D | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

689 
	#ATTRID_SE_TIER6_BLOCK15_PRICE
 ( 0x006E | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

690 
	#ATTRID_SE_TIER6_BLOCK16_PRICE
 ( 0x006F | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

692 
	#ATTRID_SE_TIER7_BLOCK1_PRICE
 ( 0x0070 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

693 
	#ATTRID_SE_TIER7_BLOCK2_PRICE
 ( 0x0071 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

694 
	#ATTRID_SE_TIER7_BLOCK3_PRICE
 ( 0x0072 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

695 
	#ATTRID_SE_TIER7_BLOCK4_PRICE
 ( 0x0073 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

696 
	#ATTRID_SE_TIER7_BLOCK5_PRICE
 ( 0x0074 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

697 
	#ATTRID_SE_TIER7_BLOCK6_PRICE
 ( 0x0075 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

698 
	#ATTRID_SE_TIER7_BLOCK7_PRICE
 ( 0x0076 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

699 
	#ATTRID_SE_TIER7_BLOCK8_PRICE
 ( 0x0077 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

700 
	#ATTRID_SE_TIER7_BLOCK9_PRICE
 ( 0x0078 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

701 
	#ATTRID_SE_TIER7_BLOCK10_PRICE
 ( 0x0079 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

702 
	#ATTRID_SE_TIER7_BLOCK11_PRICE
 ( 0x007A | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

703 
	#ATTRID_SE_TIER7_BLOCK12_PRICE
 ( 0x007B | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

704 
	#ATTRID_SE_TIER7_BLOCK13_PRICE
 ( 0x007C | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

705 
	#ATTRID_SE_TIER7_BLOCK14_PRICE
 ( 0x007D | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

706 
	#ATTRID_SE_TIER7_BLOCK15_PRICE
 ( 0x007E | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

707 
	#ATTRID_SE_TIER7_BLOCK16_PRICE
 ( 0x007F | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

709 
	#ATTRID_SE_TIER8_BLOCK1_PRICE
 ( 0x0080 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

710 
	#ATTRID_SE_TIER8_BLOCK2_PRICE
 ( 0x0081 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

711 
	#ATTRID_SE_TIER8_BLOCK3_PRICE
 ( 0x0082 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

712 
	#ATTRID_SE_TIER8_BLOCK4_PRICE
 ( 0x0083 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

713 
	#ATTRID_SE_TIER8_BLOCK5_PRICE
 ( 0x0084 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

714 
	#ATTRID_SE_TIER8_BLOCK6_PRICE
 ( 0x0085 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

715 
	#ATTRID_SE_TIER8_BLOCK7_PRICE
 ( 0x0086 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

716 
	#ATTRID_SE_TIER8_BLOCK8_PRICE
 ( 0x0087 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

717 
	#ATTRID_SE_TIER8_BLOCK9_PRICE
 ( 0x0088 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

718 
	#ATTRID_SE_TIER8_BLOCK10_PRICE
 ( 0x0089 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

719 
	#ATTRID_SE_TIER8_BLOCK11_PRICE
 ( 0x008A | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

720 
	#ATTRID_SE_TIER8_BLOCK12_PRICE
 ( 0x008B | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

721 
	#ATTRID_SE_TIER8_BLOCK13_PRICE
 ( 0x008C | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

722 
	#ATTRID_SE_TIER8_BLOCK14_PRICE
 ( 0x008D | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

723 
	#ATTRID_SE_TIER8_BLOCK15_PRICE
 ( 0x008E | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

724 
	#ATTRID_SE_TIER8_BLOCK16_PRICE
 ( 0x008F | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

726 
	#ATTRID_SE_TIER9_BLOCK1_PRICE
 ( 0x0090 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

727 
	#ATTRID_SE_TIER9_BLOCK2_PRICE
 ( 0x0091 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

728 
	#ATTRID_SE_TIER9_BLOCK3_PRICE
 ( 0x0092 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

729 
	#ATTRID_SE_TIER9_BLOCK4_PRICE
 ( 0x0093 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

730 
	#ATTRID_SE_TIER9_BLOCK5_PRICE
 ( 0x0094 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

731 
	#ATTRID_SE_TIER9_BLOCK6_PRICE
 ( 0x0095 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

732 
	#ATTRID_SE_TIER9_BLOCK7_PRICE
 ( 0x0096 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

733 
	#ATTRID_SE_TIER9_BLOCK8_PRICE
 ( 0x0097 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

734 
	#ATTRID_SE_TIER9_BLOCK9_PRICE
 ( 0x0098 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

735 
	#ATTRID_SE_TIER9_BLOCK10_PRICE
 ( 0x0099 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

736 
	#ATTRID_SE_TIER9_BLOCK11_PRICE
 ( 0x009A | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

737 
	#ATTRID_SE_TIER9_BLOCK12_PRICE
 ( 0x009B | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

738 
	#ATTRID_SE_TIER9_BLOCK13_PRICE
 ( 0x009C | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

739 
	#ATTRID_SE_TIER9_BLOCK14_PRICE
 ( 0x009D | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

740 
	#ATTRID_SE_TIER9_BLOCK15_PRICE
 ( 0x009E | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

741 
	#ATTRID_SE_TIER9_BLOCK16_PRICE
 ( 0x009F | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

743 
	#ATTRID_SE_TIER10_BLOCK1_PRICE
 ( 0x00A0 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

744 
	#ATTRID_SE_TIER10_BLOCK2_PRICE
 ( 0x00A1 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

745 
	#ATTRID_SE_TIER10_BLOCK3_PRICE
 ( 0x00A2 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

746 
	#ATTRID_SE_TIER10_BLOCK4_PRICE
 ( 0x00A3 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

747 
	#ATTRID_SE_TIER10_BLOCK5_PRICE
 ( 0x00A4 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

748 
	#ATTRID_SE_TIER10_BLOCK6_PRICE
 ( 0x00A5 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

749 
	#ATTRID_SE_TIER10_BLOCK7_PRICE
 ( 0x00A6 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

750 
	#ATTRID_SE_TIER10_BLOCK8_PRICE
 ( 0x00A7 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

751 
	#ATTRID_SE_TIER10_BLOCK9_PRICE
 ( 0x00A8 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

752 
	#ATTRID_SE_TIER10_BLOCK10_PRICE
 ( 0x00A9 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

753 
	#ATTRID_SE_TIER10_BLOCK11_PRICE
 ( 0x00AA | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

754 
	#ATTRID_SE_TIER10_BLOCK12_PRICE
 ( 0x00AB | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

755 
	#ATTRID_SE_TIER10_BLOCK13_PRICE
 ( 0x00AC | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

756 
	#ATTRID_SE_TIER10_BLOCK14_PRICE
 ( 0x00AD | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

757 
	#ATTRID_SE_TIER10_BLOCK15_PRICE
 ( 0x00AE | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

758 
	#ATTRID_SE_TIER10_BLOCK16_PRICE
 ( 0x00AF | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

760 
	#ATTRID_SE_TIER11_BLOCK1_PRICE
 ( 0x00B0 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

761 
	#ATTRID_SE_TIER11_BLOCK2_PRICE
 ( 0x00B1 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

762 
	#ATTRID_SE_TIER11_BLOCK3_PRICE
 ( 0x00B2 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

763 
	#ATTRID_SE_TIER11_BLOCK4_PRICE
 ( 0x00B3 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

764 
	#ATTRID_SE_TIER11_BLOCK5_PRICE
 ( 0x00B4 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

765 
	#ATTRID_SE_TIER11_BLOCK6_PRICE
 ( 0x00B5 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

766 
	#ATTRID_SE_TIER11_BLOCK7_PRICE
 ( 0x00B6 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

767 
	#ATTRID_SE_TIER11_BLOCK8_PRICE
 ( 0x00B7 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

768 
	#ATTRID_SE_TIER11_BLOCK9_PRICE
 ( 0x00B8 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

769 
	#ATTRID_SE_TIER11_BLOCK10_PRICE
 ( 0x00B9 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

770 
	#ATTRID_SE_TIER11_BLOCK11_PRICE
 ( 0x00BA | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

771 
	#ATTRID_SE_TIER11_BLOCK12_PRICE
 ( 0x00BB | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

772 
	#ATTRID_SE_TIER11_BLOCK13_PRICE
 ( 0x00BC | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

773 
	#ATTRID_SE_TIER11_BLOCK14_PRICE
 ( 0x00BD | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

774 
	#ATTRID_SE_TIER11_BLOCK15_PRICE
 ( 0x00BE | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

775 
	#ATTRID_SE_TIER11_BLOCK16_PRICE
 ( 0x00BF | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

777 
	#ATTRID_SE_TIER12_BLOCK1_PRICE
 ( 0x00C0 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

778 
	#ATTRID_SE_TIER12_BLOCK2_PRICE
 ( 0x00C1 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

779 
	#ATTRID_SE_TIER12_BLOCK3_PRICE
 ( 0x00C2 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

780 
	#ATTRID_SE_TIER12_BLOCK4_PRICE
 ( 0x00C3 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

781 
	#ATTRID_SE_TIER12_BLOCK5_PRICE
 ( 0x00C4 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

782 
	#ATTRID_SE_TIER12_BLOCK6_PRICE
 ( 0x00C5 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

783 
	#ATTRID_SE_TIER12_BLOCK7_PRICE
 ( 0x00C6 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

784 
	#ATTRID_SE_TIER12_BLOCK8_PRICE
 ( 0x00C7 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

785 
	#ATTRID_SE_TIER12_BLOCK9_PRICE
 ( 0x00C8 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

786 
	#ATTRID_SE_TIER12_BLOCK10_PRICE
 ( 0x00C9 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

787 
	#ATTRID_SE_TIER12_BLOCK11_PRICE
 ( 0x00CA | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

788 
	#ATTRID_SE_TIER12_BLOCK12_PRICE
 ( 0x00CB | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

789 
	#ATTRID_SE_TIER12_BLOCK13_PRICE
 ( 0x00CC | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

790 
	#ATTRID_SE_TIER12_BLOCK14_PRICE
 ( 0x00CD | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

791 
	#ATTRID_SE_TIER12_BLOCK15_PRICE
 ( 0x00CE | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

792 
	#ATTRID_SE_TIER12_BLOCK16_PRICE
 ( 0x00CF | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

794 
	#ATTRID_SE_TIER13_BLOCK1_PRICE
 ( 0x00D0 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

795 
	#ATTRID_SE_TIER13_BLOCK2_PRICE
 ( 0x00D1 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

796 
	#ATTRID_SE_TIER13_BLOCK3_PRICE
 ( 0x00D2 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

797 
	#ATTRID_SE_TIER13_BLOCK4_PRICE
 ( 0x00D3 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

798 
	#ATTRID_SE_TIER13_BLOCK5_PRICE
 ( 0x00D4 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

799 
	#ATTRID_SE_TIER13_BLOCK6_PRICE
 ( 0x00D5 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

800 
	#ATTRID_SE_TIER13_BLOCK7_PRICE
 ( 0x00D6 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

801 
	#ATTRID_SE_TIER13_BLOCK8_PRICE
 ( 0x00D7 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

802 
	#ATTRID_SE_TIER13_BLOCK9_PRICE
 ( 0x00D8 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

803 
	#ATTRID_SE_TIER13_BLOCK10_PRICE
 ( 0x00D9 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

804 
	#ATTRID_SE_TIER13_BLOCK11_PRICE
 ( 0x00DA | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

805 
	#ATTRID_SE_TIER13_BLOCK12_PRICE
 ( 0x00DB | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

806 
	#ATTRID_SE_TIER13_BLOCK13_PRICE
 ( 0x00DC | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

807 
	#ATTRID_SE_TIER13_BLOCK14_PRICE
 ( 0x00DD | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

808 
	#ATTRID_SE_TIER13_BLOCK15_PRICE
 ( 0x00DE | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

809 
	#ATTRID_SE_TIER13_BLOCK16_PRICE
 ( 0x00DF | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

811 
	#ATTRID_SE_TIER14_BLOCK1_PRICE
 ( 0x00E0 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

812 
	#ATTRID_SE_TIER14_BLOCK2_PRICE
 ( 0x00E1 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

813 
	#ATTRID_SE_TIER14_BLOCK3_PRICE
 ( 0x00E2 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

814 
	#ATTRID_SE_TIER14_BLOCK4_PRICE
 ( 0x00E3 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

815 
	#ATTRID_SE_TIER14_BLOCK5_PRICE
 ( 0x00E4 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

816 
	#ATTRID_SE_TIER14_BLOCK6_PRICE
 ( 0x00E5 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

817 
	#ATTRID_SE_TIER14_BLOCK7_PRICE
 ( 0x00E6 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

818 
	#ATTRID_SE_TIER14_BLOCK8_PRICE
 ( 0x00E7 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

819 
	#ATTRID_SE_TIER14_BLOCK9_PRICE
 ( 0x00E8 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

820 
	#ATTRID_SE_TIER14_BLOCK10_PRICE
 ( 0x00E9 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

821 
	#ATTRID_SE_TIER14_BLOCK11_PRICE
 ( 0x00EA | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

822 
	#ATTRID_SE_TIER14_BLOCK12_PRICE
 ( 0x00EB | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

823 
	#ATTRID_SE_TIER14_BLOCK13_PRICE
 ( 0x00EC | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

824 
	#ATTRID_SE_TIER14_BLOCK14_PRICE
 ( 0x00ED | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

825 
	#ATTRID_SE_TIER14_BLOCK15_PRICE
 ( 0x00EE | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

826 
	#ATTRID_SE_TIER14_BLOCK16_PRICE
 ( 0x00EF | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

828 
	#ATTRID_SE_TIER15_BLOCK1_PRICE
 ( 0x00F0 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

829 
	#ATTRID_SE_TIER15_BLOCK2_PRICE
 ( 0x00F1 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

830 
	#ATTRID_SE_TIER15_BLOCK3_PRICE
 ( 0x00F2 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

831 
	#ATTRID_SE_TIER15_BLOCK4_PRICE
 ( 0x00F3 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

832 
	#ATTRID_SE_TIER15_BLOCK5_PRICE
 ( 0x00F4 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

833 
	#ATTRID_SE_TIER15_BLOCK6_PRICE
 ( 0x00F5 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

834 
	#ATTRID_SE_TIER15_BLOCK7_PRICE
 ( 0x00F6 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

835 
	#ATTRID_SE_TIER15_BLOCK8_PRICE
 ( 0x00F7 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

836 
	#ATTRID_SE_TIER15_BLOCK9_PRICE
 ( 0x00F8 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

837 
	#ATTRID_SE_TIER15_BLOCK10_PRICE
 ( 0x00F9 | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

838 
	#ATTRID_SE_TIER15_BLOCK11_PRICE
 ( 0x00FA | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

839 
	#ATTRID_SE_TIER15_BLOCK12_PRICE
 ( 0x00FB | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

840 
	#ATTRID_SE_TIER15_BLOCK13_PRICE
 ( 0x00FC | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

841 
	#ATTRID_SE_TIER15_BLOCK14_PRICE
 ( 0x00FD | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

842 
	#ATTRID_SE_TIER15_BLOCK15_PRICE
 ( 0x00FE | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

843 
	#ATTRID_SE_TIER15_BLOCK16_PRICE
 ( 0x00FF | 
ATTRID_MASK_SE_BLOCK_PRICE_INFORMATION
 )

	)

846 
	#ATTRID_SE_PRICE_TIER_16
 ( 0x000F | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

847 
	#ATTRID_SE_PRICE_TIER_17
 ( 0x0010 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

848 
	#ATTRID_SE_PRICE_TIER_18
 ( 0x0011 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

849 
	#ATTRID_SE_PRICE_TIER_19
 ( 0x0012 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

850 
	#ATTRID_SE_PRICE_TIER_20
 ( 0x0013 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

851 
	#ATTRID_SE_PRICE_TIER_21
 ( 0x0014 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

852 
	#ATTRID_SE_PRICE_TIER_22
 ( 0x0015 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

853 
	#ATTRID_SE_PRICE_TIER_23
 ( 0x0016 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

854 
	#ATTRID_SE_PRICE_TIER_24
 ( 0x0017 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

855 
	#ATTRID_SE_PRICE_TIER_25
 ( 0x0018 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

856 
	#ATTRID_SE_PRICE_TIER_26
 ( 0x0019 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

857 
	#ATTRID_SE_PRICE_TIER_27
 ( 0x001A | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

858 
	#ATTRID_SE_PRICE_TIER_28
 ( 0x001B | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

859 
	#ATTRID_SE_PRICE_TIER_29
 ( 0x001C | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

860 
	#ATTRID_SE_PRICE_TIER_30
 ( 0x001D | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

861 
	#ATTRID_SE_PRICE_TIER_31
 ( 0x001E | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

862 
	#ATTRID_SE_PRICE_TIER_32
 ( 0x001F | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

863 
	#ATTRID_SE_PRICE_TIER_33
 ( 0x0020 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

864 
	#ATTRID_SE_PRICE_TIER_34
 ( 0x0021 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

865 
	#ATTRID_SE_PRICE_TIER_35
 ( 0x0022 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

866 
	#ATTRID_SE_PRICE_TIER_36
 ( 0x0023 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

867 
	#ATTRID_SE_PRICE_TIER_37
 ( 0x0024 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

868 
	#ATTRID_SE_PRICE_TIER_38
 ( 0x0025 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

869 
	#ATTRID_SE_PRICE_TIER_39
 ( 0x0026 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

870 
	#ATTRID_SE_PRICE_TIER_40
 ( 0x0027 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

871 
	#ATTRID_SE_PRICE_TIER_41
 ( 0x0028 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

872 
	#ATTRID_SE_PRICE_TIER_42
 ( 0x0029 | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

873 
	#ATTRID_SE_PRICE_TIER_43
 ( 0x002A | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

874 
	#ATTRID_SE_PRICE_TIER_44
 ( 0x002B | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

875 
	#ATTRID_SE_PRICE_TIER_45
 ( 0x002C | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

876 
	#ATTRID_SE_PRICE_TIER_46
 ( 0x002D | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

877 
	#ATTRID_SE_PRICE_TIER_47
 ( 0x002E | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

878 
	#ATTRID_SE_PRICE_TIER_48
 ( 0x002F | 
ATTRID_MASK_SE_EXT_PRICE_INFORMATION
 )

	)

881 
	#ATTRID_SE_TARIFF_LABEL
 ( 0x0010 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

882 
	#ATTRID_SE_NUM_PRICE_TIERS_IN_USE
 ( 0x0011 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

883 
	#ATTRID_SE_NUM_BLOCK_THRESHOLDS_IN_USE
 ( 0x0012 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

884 
	#ATTRID_SE_TIER_BLOCK_MODE
 ( 0x0013 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

885 
	#ATTRID_SE_BLOCK_THRESHOLD_MASK
 ( 0x0014 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

886 
	#ATTRID_SE_PC_UNIT_OF_MEASURE
 ( 0x0015 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

887 
	#ATTRID_SE_CURRENCY
 ( 0x0016 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

888 
	#ATTRID_SE_PRICE_TRAILING_DIGIT
 ( 0x0017 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

889 
	#ATTRID_SE_STANDARD_CHARGE
 ( 0x0018 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

890 
	#ATTRID_SE_CONSERVATION_FACTOR
 ( 0x0020 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

891 
	#ATTRID_SE_CONSERVATION_FACTOR_TRAILING_DIGIT
 ( 0x0021 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

892 
	#ATTRID_SE_CALORIFIC_VALUE
 ( 0x0022 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

893 
	#ATTRID_SE_CALORIFIC_VALUE_UNIT
 ( 0x0023 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

894 
	#ATTRID_SE_CALORIFIC_VALUE_TRAILING_DIGIT
 ( 0x0024 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

895 
	#ATTRID_SE_CO2
 ( 0x0025 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

896 
	#ATTRID_SE_CO2_UNIT
 ( 0x0026 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

897 
	#ATTRID_SE_CO2_TRAILING_DIGIT
 ( 0x0027 | 
ATTRID_MASK_SE_TARIFF_INFORMATION
 )

	)

900 
	#ATTRID_SE_CURRENT_BILLING_PERIOD_START
 ( 0x0000 | 
ATTRID_MASK_SE_BILLING_INFORMATION
 )

	)

901 
	#ATTRID_SE_CURRENT_BILLING_PERIOD_DURATION
 ( 0x0001 | 
ATTRID_MASK_SE_BILLING_INFORMATION
 )

	)

902 
	#ATTRID_SE_LAST_BILLING_PERIOD_START
 ( 0x0002 | 
ATTRID_MASK_SE_BILLING_INFORMATION
 )

	)

903 
	#ATTRID_SE_LAST_BILLING_PERIOD_DURATION
 ( 0x0003 | 
ATTRID_MASK_SE_BILLING_INFORMATION
 )

	)

904 
	#ATTRID_SE_LAST_BILLING_PERIOD_CONSOLIDATED
 ( 0x0004 | 
ATTRID_MASK_SE_BILLING_INFORMATION
 )

	)

907 
	#ATTRID_SE_CREDIT_PAYMENT_DUE_DATE
 ( 0x0000 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

908 
	#ATTRID_SE_CREDIT_PAYMENT_STATUS
 ( 0x0001 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

909 
	#ATTRID_SE_CREDIT_PAYMENT_OVERDUE_AMOUNT
 ( 0x0002 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

910 
	#ATTRID_SE_PAYMENT_DISCOUNT
 ( 0x000A | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

911 
	#ATTRID_SE_PAYMENT_DISCOUNT_PERIOD
 ( 0x000B | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

912 
	#ATTRID_SE_CREDIT_PAYMENT_1
 ( 0x0010 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

913 
	#ATTRID_SE_CREDIT_PAYMENT_DATE_1
 ( 0x0011 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

914 
	#ATTRID_SE_CREDIT_PAYMENT_REF_1
 ( 0x0012 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

915 
	#ATTRID_SE_CREDIT_PAYMENT_2
 ( 0x0020 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

916 
	#ATTRID_SE_CREDIT_PAYMENT_DATE_2
 ( 0x0021 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

917 
	#ATTRID_SE_CREDIT_PAYMENT_REF_2
 ( 0x0022 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

918 
	#ATTRID_SE_CREDIT_PAYMENT_3
 ( 0x0030 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

919 
	#ATTRID_SE_CREDIT_PAYMENT_DATE_3
 ( 0x0031 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

920 
	#ATTRID_SE_CREDIT_PAYMENT_REF_3
 ( 0x0032 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

921 
	#ATTRID_SE_CREDIT_PAYMENT_4
 ( 0x0040 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

922 
	#ATTRID_SE_CREDIT_PAYMENT_DATE_4
 ( 0x0041 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

923 
	#ATTRID_SE_CREDIT_PAYMENT_REF_4
 ( 0x0042 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

924 
	#ATTRID_SE_CREDIT_PAYMENT_5
 ( 0x0050 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

925 
	#ATTRID_SE_CREDIT_PAYMENT_DATE_5
 ( 0x0051 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

926 
	#ATTRID_SE_CREDIT_PAYMENT_REF_5
 ( 0x0052 | 
ATTRID_MASK_SE_CREDIT_PAYMENT
 )

	)

929 
	#ATTRID_SE_DOMESTIC_PERCENTAGE
 ( 0x0000 | 
ATTRID_MASK_SE_TAX_CONTROL
 )

	)

930 
	#ATTRID_SE_DOMESTIC_FUEL_TAX_RATE
 ( 0x0001 | 
ATTRID_MASK_SE_TAX_CONTROL
 )

	)

931 
	#ATTRID_SE_DOMESTIC_FUEL_TAX_RATE_TRAILING_DIGIT
 ( 0x0002 | 
ATTRID_MASK_SE_TAX_CONTROL
 )

	)

934 
	#ATTRID_SE_EX_TIER1_PRICE_LABEL
 ( 0x0000 | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

935 
	#ATTRID_SE_EX_TIER2_PRICE_LABEL
 ( 0x0001 | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

936 
	#ATTRID_SE_EX_TIER3_PRICE_LABEL
 ( 0x0002 | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

937 
	#ATTRID_SE_EX_TIER4_PRICE_LABEL
 ( 0x0003 | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

938 
	#ATTRID_SE_EX_TIER5_PRICE_LABEL
 ( 0x0004 | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

939 
	#ATTRID_SE_EX_TIER6_PRICE_LABEL
 ( 0x0005 | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

940 
	#ATTRID_SE_EX_TIER7_PRICE_LABEL
 ( 0x0006 | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

941 
	#ATTRID_SE_EX_TIER8_PRICE_LABEL
 ( 0x0007 | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

942 
	#ATTRID_SE_EX_TIER9_PRICE_LABEL
 ( 0x0008 | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

943 
	#ATTRID_SE_EX_TIER10_PRICE_LABEL
 ( 0x0009 | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

944 
	#ATTRID_SE_EX_TIER11_PRICE_LABEL
 ( 0x000A | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

945 
	#ATTRID_SE_EX_TIER12_PRICE_LABEL
 ( 0x000B | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

946 
	#ATTRID_SE_EX_TIER13_PRICE_LABEL
 ( 0x000C | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

947 
	#ATTRID_SE_EX_TIER14_PRICE_LABEL
 ( 0x000D | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

948 
	#ATTRID_SE_EX_TIER15_PRICE_LABEL
 ( 0x000E | 
ATTRID_MASK_SE_EXPORT_TIER_LABEL
 )

	)

951 
	#ATTRID_SE_EX_BLOCK1_THRESHOLD
 ( 0x0000 | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

952 
	#ATTRID_SE_EX_BLOCK2_THRESHOLD
 ( 0x0001 | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

953 
	#ATTRID_SE_EX_BLOCK3_THRESHOLD
 ( 0x0002 | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

954 
	#ATTRID_SE_EX_BLOCK4_THRESHOLD
 ( 0x0003 | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

955 
	#ATTRID_SE_EX_BLOCK5_THRESHOLD
 ( 0x0004 | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

956 
	#ATTRID_SE_EX_BLOCK6_THRESHOLD
 ( 0x0005 | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

957 
	#ATTRID_SE_EX_BLOCK7_THRESHOLD
 ( 0x0006 | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

958 
	#ATTRID_SE_EX_BLOCK8_THRESHOLD
 ( 0x0007 | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

959 
	#ATTRID_SE_EX_BLOCK9_THRESHOLD
 ( 0x0008 | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

960 
	#ATTRID_SE_EX_BLOCK10_THRESHOLD
 ( 0x0009 | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

961 
	#ATTRID_SE_EX_BLOCK11_THRESHOLD
 ( 0x000A | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

962 
	#ATTRID_SE_EX_BLOCK12_THRESHOLD
 ( 0x000B | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

963 
	#ATTRID_SE_EX_BLOCK13_THRESHOLD
 ( 0x000C | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

964 
	#ATTRID_SE_EX_BLOCK14_THRESHOLD
 ( 0x000D | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

965 
	#ATTRID_SE_EX_BLOCK15_THRESHOLD
 ( 0x000E | 
ATTRID_MASK_SE_EXPORT_BLOCK_THRESHOLD
 )

	)

968 
	#ATTRID_SE_EX_START_OF_BLOCK_PERIOD
 ( 0x0000 | 
ATTRID_MASK_SE_EXPORT_BLOCK_PERIOD
 )

	)

969 
	#ATTRID_SE_EX_BLOCK_PERIOD_DURATION
 ( 0x0001 | 
ATTRID_MASK_SE_EXPORT_BLOCK_PERIOD
 )

	)

970 
	#ATTRID_SE_EX_THRESHOLD_MULTIPLIER
 ( 0x0002 | 
ATTRID_MASK_SE_EXPORT_BLOCK_PERIOD
 )

	)

971 
	#ATTRID_SE_EX_THRESHOLD_DIVISOR
 ( 0x0003 | 
ATTRID_MASK_SE_EXPORT_BLOCK_PERIOD
 )

	)

974 
	#ATTRID_SE_EX_TIER_X_BLOCK_Y_PRICE
(
X
,
Y
Ë(–((X&0xF)<<4Ë| ((Y-1)&0xF)Ë| 
ATTRID_MASK_SE_EXPORT_BLOCK_PRICE_INFO
 )

	)

977 
	#ATTRID_SE_EX_PRICE_TIER_16
 ( 0x000F | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

978 
	#ATTRID_SE_EX_PRICE_TIER_17
 ( 0x0010 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

979 
	#ATTRID_SE_EX_PRICE_TIER_18
 ( 0x0011 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

980 
	#ATTRID_SE_EX_PRICE_TIER_19
 ( 0x0012 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

981 
	#ATTRID_SE_EX_PRICE_TIER_20
 ( 0x0013 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

982 
	#ATTRID_SE_EX_PRICE_TIER_21
 ( 0x0014 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

983 
	#ATTRID_SE_EX_PRICE_TIER_22
 ( 0x0015 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

984 
	#ATTRID_SE_EX_PRICE_TIER_23
 ( 0x0016 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

985 
	#ATTRID_SE_EX_PRICE_TIER_24
 ( 0x0017 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

986 
	#ATTRID_SE_EX_PRICE_TIER_25
 ( 0x0018 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

987 
	#ATTRID_SE_EX_PRICE_TIER_26
 ( 0x0019 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

988 
	#ATTRID_SE_EX_PRICE_TIER_27
 ( 0x001A | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

989 
	#ATTRID_SE_EX_PRICE_TIER_28
 ( 0x001B | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

990 
	#ATTRID_SE_EX_PRICE_TIER_29
 ( 0x001C | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

991 
	#ATTRID_SE_EX_PRICE_TIER_30
 ( 0x001D | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

992 
	#ATTRID_SE_EX_PRICE_TIER_31
 ( 0x001E | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

993 
	#ATTRID_SE_EX_PRICE_TIER_32
 ( 0x001F | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

994 
	#ATTRID_SE_EX_PRICE_TIER_33
 ( 0x0020 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

995 
	#ATTRID_SE_EX_PRICE_TIER_34
 ( 0x0021 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

996 
	#ATTRID_SE_EX_PRICE_TIER_35
 ( 0x0022 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

997 
	#ATTRID_SE_EX_PRICE_TIER_36
 ( 0x0023 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

998 
	#ATTRID_SE_EX_PRICE_TIER_37
 ( 0x0024 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

999 
	#ATTRID_SE_EX_PRICE_TIER_38
 ( 0x0025 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

1000 
	#ATTRID_SE_EX_PRICE_TIER_39
 ( 0x0026 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

1001 
	#ATTRID_SE_EX_PRICE_TIER_40
 ( 0x0027 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

1002 
	#ATTRID_SE_EX_PRICE_TIER_41
 ( 0x0028 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

1003 
	#ATTRID_SE_EX_PRICE_TIER_42
 ( 0x0029 | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

1004 
	#ATTRID_SE_EX_PRICE_TIER_43
 ( 0x002A | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

1005 
	#ATTRID_SE_EX_PRICE_TIER_44
 ( 0x002B | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

1006 
	#ATTRID_SE_EX_PRICE_TIER_45
 ( 0x002C | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

1007 
	#ATTRID_SE_EX_PRICE_TIER_46
 ( 0x002D | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

1008 
	#ATTRID_SE_EX_PRICE_TIER_47
 ( 0x002E | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

1009 
	#ATTRID_SE_EX_PRICE_TIER_48
 ( 0x002F | 
ATTRID_MASK_SE_EXPORT_EXT_PRICE_INFO
 )

	)

1012 
	#ATTRID_SE_EX_TARIFF_LABEL
 ( 0x0010 | 
ATTRID_MASK_SE_EXPORT_TARIFF_INFO
 )

	)

1013 
	#ATTRID_SE_EX_NUM_PRICE_TIERS_IN_USE
 ( 0x0011 | 
ATTRID_MASK_SE_EXPORT_TARIFF_INFO
 )

	)

1014 
	#ATTRID_SE_EX_NUM_BLOCK_THRESHOLDS_IN_USE
 ( 0x0012 | 
ATTRID_MASK_SE_EXPORT_TARIFF_INFO
 )

	)

1015 
	#ATTRID_SE_EX_TIER_BLOCK_MODE
 ( 0x0013 | 
ATTRID_MASK_SE_EXPORT_TARIFF_INFO
 )

	)

1016 
	#ATTRID_SE_EX_BLOCK_THRESHOLD_MASK
 ( 0x0014 | 
ATTRID_MASK_SE_EXPORT_TARIFF_INFO
 )

	)

1017 
	#ATTRID_SE_EX_CO2
 ( 0x0025 | 
ATTRID_MASK_SE_EXPORT_TARIFF_INFO
 )

	)

1018 
	#ATTRID_SE_EX_CO2_UNIT
 ( 0x0026 | 
ATTRID_MASK_SE_EXPORT_TARIFF_INFO
 )

	)

1019 
	#ATTRID_SE_EX_CO2_TRAILING_DIGIT
 ( 0x0027 | 
ATTRID_MASK_SE_EXPORT_TARIFF_INFO
 )

	)

1022 
	#ATTRID_SE_EX_CURRENT_BILLING_PERIOD_START
 ( 0x0000 | 
ATTRID_MASK_SE_EXPORT_BILLING_INFO
 )

	)

1023 
	#ATTRID_SE_EX_CURRENT_BILLING_PERIOD_DURATION
 ( 0x0001 | 
ATTRID_MASK_SE_EXPORT_BILLING_INFO
 )

	)

1024 
	#ATTRID_SE_EX_LAST_BILLING_PERIOD_START
 ( 0x0002 | 
ATTRID_MASK_SE_EXPORT_BILLING_INFO
 )

	)

1025 
	#ATTRID_SE_EX_LAST_BILLING_PERIOD_DURATION
 ( 0x0003 | 
ATTRID_MASK_SE_EXPORT_BILLING_INFO
 )

	)

1026 
	#ATTRID_SE_EX_LAST_BILLING_PERIOD_CONSOLIDATED
 ( 0x0004 | 
ATTRID_MASK_SE_EXPORT_BILLING_INFO
 )

	)

1029 
	#ATTRID_MASK_SE_PREPAYMENT_INFO_SET
 ( 0x0000 )

	)

1030 
	#ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 ( 0x0100 )

	)

1031 
	#ATTRID_MASK_SE_DEBT_ATTRIBUTE_SET
 ( 0x0200 )

	)

1032 #i‚de‡
SE_UK_EXT


1033 
	#ATTRID_MASK_SE_SUPPLY_CONTROL_SET
 ( 0x0300 )

	)

1035 
	#ATTRID_MASK_SE_ALARMS_SET
 ( 0x0300 )

	)

1039 
	#ATTRID_SE_PAYMENT_CONTROL
 ( 0x0000 | 
ATTRID_MASK_SE_PREPAYMENT_INFO_SET
 )

	)

1040 
	#ATTRID_SE_CREDIT_REMAINING
 ( 0x0001 | 
ATTRID_MASK_SE_PREPAYMENT_INFO_SET
 )

	)

1041 
	#ATTRID_SE_EMERGENCY_CREDIT_REMAINING
 ( 0x0002 | 
ATTRID_MASK_SE_PREPAYMENT_INFO_SET
 )

	)

1042 
	#ATTRID_SE_CREDIT_STATUS
 ( 0x0003 | 
ATTRID_MASK_SE_PREPAYMENT_INFO_SET
 )

	)

1043 
	#ATTRID_SE_EMERGENCY_CREDIT_LIMIT
 ( 0x0010 | 
ATTRID_MASK_SE_PREPAYMENT_INFO_SET
 )

	)

1044 
	#ATTRID_SE_EMERGENCY_CREDIT_THRESHOLD
 ( 0x0011 | 
ATTRID_MASK_SE_PREPAYMENT_INFO_SET
 )

	)

1045 
	#ATTRID_SE_TOTAL_CREDIT_ADDED
 ( 0x0020 | 
ATTRID_MASK_SE_PREPAYMENT_INFO_SET
 )

	)

1046 
	#ATTRID_SE_MAX_CREDIT_LIMIT
 ( 0x0021 | 
ATTRID_MASK_SE_PREPAYMENT_INFO_SET
 )

	)

1047 
	#ATTRID_SE_FRIENDLY_CREDIT_WARNING
 ( 0x0030 | 
ATTRID_MASK_SE_PREPAYMENT_INFO_SET
 )

	)

1048 
	#ATTRID_SE_CUT_OFF_VALUE
 ( 0x0040 | 
ATTRID_MASK_SE_PREPAYMENT_INFO_SET
 )

	)

1049 
	#ATTRID_SE_PAYMENT_CARD_ID
 ( 0x0080 | 
ATTRID_MASK_SE_PREPAYMENT_INFO_SET
 )

	)

1052 
	#ATTRID_SE_TOPUP_DATE_TIME_1
 ( 0x0000 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1053 
	#ATTRID_SE_TOPUP_AMOUNT_1
 ( 0x0001 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1054 
	#ATTRID_SE_ORIGINATING_DEVICE_1
 ( 0x0002 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1055 
	#ATTRID_SE_TOPUP_CODE_1
 ( 0x0003 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1056 
	#ATTRID_SE_TOPUP_DATE_TIME_2
 ( 0x0010 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1057 
	#ATTRID_SE_TOPUP_AMOUNT_2
 ( 0x0011 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1058 
	#ATTRID_SE_ORIGINATING_DEVICE_2
 ( 0x0012 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1059 
	#ATTRID_SE_TOPUP_CODE_2
 ( 0x0013 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1060 
	#ATTRID_SE_TOPUP_DATE_TIME_3
 ( 0x0020 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1061 
	#ATTRID_SE_TOPUP_AMOUNT_3
 ( 0x0021 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1062 
	#ATTRID_SE_ORIGINATING_DEVICE_3
 ( 0x0022 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1063 
	#ATTRID_SE_TOPUP_CODE_3
 ( 0x0023 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1064 
	#ATTRID_SE_TOPUP_DATE_TIME_4
 ( 0x0030 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1065 
	#ATTRID_SE_TOPUP_AMOUNT_4
 ( 0x0031 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1066 
	#ATTRID_SE_ORIGINATING_DEVICE_4
 ( 0x0032 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1067 
	#ATTRID_SE_TOPUP_CODE_4
 ( 0x0033 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1068 
	#ATTRID_SE_TOPUP_DATE_TIME_5
 ( 0x0040 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1069 
	#ATTRID_SE_TOPUP_AMOUNT_5
 ( 0x0041 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1070 
	#ATTRID_SE_ORIGINATING_DEVICE_5
 ( 0x0042 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1071 
	#ATTRID_SE_TOPUP_CODE_5
 ( 0x0043 | 
ATTRID_MASK_SE_TOPUP_ATTRIBUTE_SET
 )

	)

1074 
	#ATTRID_SE_FUEL_DEBT_REMAINING
 ( 0x0000 | 
ATTRID_MASK_SE_DEBT_ATTRIBUTE_SET
 )

	)

1075 
	#ATTRID_SE_FUEL_DEBT_RECOVERY_RATE
 ( 0x0001 | 
ATTRID_MASK_SE_DEBT_ATTRIBUTE_SET
 )

	)

1076 
	#ATTRID_SE_FUEL_DEBT_RECOVERY_PERIOD
 ( 0x0002 | 
ATTRID_MASK_SE_DEBT_ATTRIBUTE_SET
 )

	)

1077 
	#ATTRID_SE_NON_FUEL_DEBT_REMAINING
 ( 0x0003 | 
ATTRID_MASK_SE_DEBT_ATTRIBUTE_SET
 )

	)

1078 
	#ATTRID_SE_NON_FUEL_DEBT_RECOVERY_RATE
 ( 0x0004 | 
ATTRID_MASK_SE_DEBT_ATTRIBUTE_SET
 )

	)

1079 
	#ATTRID_SE_NON_FUEL_DEBT_RECOVERY_PERIOD
 ( 0x0005 | 
ATTRID_MASK_SE_DEBT_ATTRIBUTE_SET
 )

	)

1081 #i‚de‡
SE_UK_EXT


1083 
	#ATTRID_SE_PROPOSED_CHANGE_PROVIDER_ID
 ( 0x0000 | 
ATTRID_MASK_SE_SUPPLY_CONTROL_SET
 )

	)

1084 
	#ATTRID_SE_PROPOSED_CHANGE_IMPLEMENTATION_TIME
 ( 0x0001 | 
ATTRID_MASK_SE_SUPPLY_CONTROL_SET
 )

	)

1085 
	#ATTRID_SE_PROPOSED_CHANGE_SUPPLY_STATUS
 ( 0x0002 | 
ATTRID_MASK_SE_SUPPLY_CONTROL_SET
 )

	)

1086 
	#ATTRID_SE_DELAYED_SUPPLY_INTERRUPT_VALUE_REMAINING
 ( 0x0003 | 
ATTRID_MASK_SE_SUPPLY_CONTROL_SET
 )

	)

1087 
	#ATTRID_SE_DELAYED_SUPPLY_INTERRUPT_VALUE_TYPE
 ( 0x0004 | 
ATTRID_MASK_SE_SUPPLY_CONTROL_SET
 )

	)

1090 
	#ATTRID_SE_PREPAYMENT_ALARM_STATUS
 ( 0x0000 | 
ATTRID_MASK_SE_ALARMS_SET
 )

	)

1091 
	#ATTRID_SE_PREPAY_GENERIC_ALARM_MASK
 ( 0x0001 | 
ATTRID_MASK_SE_ALARMS_SET
 )

	)

1092 
	#ATTRID_SE_PREPAY_SWITCH_ALARM_MASK
 ( 0x0002 | 
ATTRID_MASK_SE_ALARMS_SET
 )

	)

1093 
	#ATTRID_SE_PREPAY_EVENT_ALARM_MASK
 ( 0x0003 | 
ATTRID_MASK_SE_ALARMS_SET
 )

	)

1097 
	#ATTRID_SE_CLOSE_TUNNEL_TIMEOUT
 0x0000

	)

1099 #ifde‡
SE_UK_EXT


1101 
	#ATTRID_MASK_SE_SUPPLY_CONTROL_SET
 0x0000

	)

1102 
	#ATTRID_MASK_SE_SUPPLIER_CONTROL_SET
 0x0100

	)

1103 
	#ATTRID_MASK_SE_TENANCY_CONTROL_SET
 0x0200

	)

1106 
	#ATTRID_SE_PROPOSED_CHANGE_SUPPLY_IMPLEM_TIME
 ( 0x0000 | 
ATTRID_MASK_SE_SUPPLY_CONTROL_SET
 )

	)

1107 
	#ATTRID_SE_PROPOSED_CHANGE_SUPPLY_STATUS
 ( 0x0001 | 
ATTRID_MASK_SE_SUPPLY_CONTROL_SET
 )

	)

1110 
	#ATTRID_SE_SERVER_SUPPLIER_ID
 ( 0x0000 | 
ATTRID_MASK_SE_SUPPLIER_CONTROL_SET
 )

	)

1111 
	#ATTRID_SE_SUPPLIER_NAME
 ( 0x0001 | 
ATTRID_MASK_SE_SUPPLIER_CONTROL_SET
 )

	)

1112 
	#ATTRID_SE_PROPOSED_SUPPLIER_ID
 ( 0x0010 | 
ATTRID_MASK_SE_SUPPLIER_CONTROL_SET
 )

	)

1113 
	#ATTRID_SE_PROPOSED_SUPPLIER_NAME
 ( 0x0011 | 
ATTRID_MASK_SE_SUPPLIER_CONTROL_SET
 )

	)

1114 
	#ATTRID_SE_PROPOSED_SUPPLIER_CHANGE_DATE_TIME
 ( 0x0012 | 
ATTRID_MASK_SE_SUPPLIER_CONTROL_SET
 )

	)

1115 
	#ATTRID_SE_PROPOSED_SUPPLIER_CHANGE_CONTROL
 ( 0x0013 | 
ATTRID_MASK_SE_SUPPLIER_CONTROL_SET
 )

	)

1116 
	#ATTRID_SE_SERVER_EX_SUPPLIER_ID
 ( 0x0020 | 
ATTRID_MASK_SE_SUPPLIER_CONTROL_SET
 )

	)

1117 
	#ATTRID_SE_EX_SUPPLIER_NAME
 ( 0x0021 | 
ATTRID_MASK_SE_SUPPLIER_CONTROL_SET
 )

	)

1118 
	#ATTRID_SE_EX_PROPOSED_SUPPLIER_ID
 ( 0x0030 | 
ATTRID_MASK_SE_SUPPLIER_CONTROL_SET
 )

	)

1119 
	#ATTRID_SE_EX_PROPOSED_SUPPLIER_NAME
 ( 0x0031 | 
ATTRID_MASK_SE_SUPPLIER_CONTROL_SET
 )

	)

1120 
	#ATTRID_SE_EX_PROPOSED_SUPPLIER_CHANGE_DATE_TIME
 ( 0x0032 | 
ATTRID_MASK_SE_SUPPLIER_CONTROL_SET
 )

	)

1121 
	#ATTRID_SE_EX_PROPOSED_SUPPLIER_CHANGE_CONTROL
 ( 0x0033 | 
ATTRID_MASK_SE_SUPPLIER_CONTROL_SET
 )

	)

1124 
	#ATTRID_SE_CHANGE_TENANCY_UPDATE_DATE_TIME
 ( 0x0000 | 
ATTRID_MASK_SE_TENANCY_CONTROL_SET
 )

	)

1125 
	#ATTRID_SE_PROPOSED_TENANCY_CHANGE_CONTROL
 ( 0x0001 | 
ATTRID_MASK_SE_TENANCY_CONTROL_SET
 )

	)

1128 
	#ATTRID_MASK_SE_SUPPLIER_SET
 0x0000

	)

1129 
	#ATTRID_MASK_SE_EVENT_CONFIGURATION
 0x0100

	)

1132 
	#ATTRID_SE_CLIENT_SUPPLIER_ID
 ( 0x0000 | 
ATTRID_MASK_SE_SUPPLIER_SET
 )

	)

1133 
	#ATTRID_SE_CLIENT_EX_SUPPLIER_ID
 ( 0x0010 | 
ATTRID_MASK_SE_SUPPLIER_SET
 )

	)

1136 
	#ATTRID_SE_METER_COVER_REMOVED
 ( 0x0000 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1137 
	#ATTRID_SE_METER_COVER_CLOSED
 ( 0x0001 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1138 
	#ATTRID_SE_STRONG_MAGNETIC_FIELD
 ( 0x0002 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1139 
	#ATTRID_SE_NO_STRONG_MAGNETIC_FIELD
 ( 0x0003 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1140 
	#ATTRID_SE_BATTERY_FAILURE
 ( 0x0004 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1141 
	#ATTRID_SE_LOW_BATTERY
 ( 0x0005 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1142 
	#ATTRID_SE_PROGRAM_MEMORY_ERROR
 ( 0x0006 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1143 
	#ATTRID_SE_RAM_ERROR
 ( 0x0007 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1144 
	#ATTRID_SE_NV_MEMORY_ERROR
 ( 0x0008 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1145 
	#ATTRID_SE_MEASUREMENT_SYSTEM_ERROR
 ( 0x0009 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1146 
	#ATTRID_SE_WATCHDOG_ERROR
 ( 0x000A | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1147 
	#ATTRID_SE_SUPPLY_DISCONNECT_FAILURE
 ( 0x000B | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1148 
	#ATTRID_SE_SUPPLY_CONNECT_FAILURE
 ( 0x000C | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1149 
	#ATTRID_SE_MEASUREMENT_SOFTWARE_CHANGE
 ( 0x000D | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1150 
	#ATTRID_SE_DST_ENABLED
 ( 0x000E | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1151 
	#ATTRID_SE_DST_DISABLED
 ( 0x000F | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1152 
	#ATTRID_SE_CLOCK_ADJ_BACKWARD
 ( 0x0010 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1153 
	#ATTRID_SE_CLOCK_ADJ_FORWARD
 ( 0x0011 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1154 
	#ATTRID_SE_CLOCK_INVALID
 ( 0x0012 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1155 
	#ATTRID_SE_COMM_ERROR_HAN
 ( 0x0013 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1156 
	#ATTRID_SE_COMM_OK_HAN
 ( 0x0014 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1157 
	#ATTRID_SE_FRAUD_ATTEMPT
 ( 0x0015 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1158 
	#ATTRID_SE_POWER_LOSS
 ( 0x0016 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1159 
	#ATTRID_SE_INCORRECT_PROTOCOLS
 ( 0x0017 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1160 
	#ATTRID_SE_UNUSUAL_HAN_TRAFFIC
 ( 0x0018 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1161 
	#ATTRID_SE_UNEXPECTED_CLOCK_CHANGE
 ( 0x0019 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1162 
	#ATTRID_SE_COMMS_USING_UNAUTH_COMPONENT
 ( 0x001A | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1163 
	#ATTRID_SE_ERROR_REG_CLEAR
 ( 0x001B | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1164 
	#ATTRID_SE_ALARM_REG_CLEAR
 ( 0x001C | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1165 
	#ATTRID_SE_UNEXPECTED_HW_RESET
 ( 0x001D | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1166 
	#ATTRID_SE_UNEXPECTED_PROGRAM_EXECUTION
 ( 0x001E | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1167 
	#ATTRID_SE_EVENT_LOG_CLEAR
 ( 0x001F | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1168 
	#ATTRID_SE_MANUAL_DISCONNECT
 ( 0x0020 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1169 
	#ATTRID_SE_MANUAL_CONNECT
 ( 0x0021 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1170 
	#ATTRID_SE_REMOTE_DISCONNECTION
 ( 0x0022 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1171 
	#ATTRID_SE_LOCAL_DISCONNECTION
 ( 0x0023 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1172 
	#ATTRID_SE_LIMIT_THRESHOLD_EXCEEDED
 ( 0x0024 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1173 
	#ATTRID_SE_LIMIT_THRESHOLD_OK
 ( 0x0025 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1174 
	#ATTRID_SE_LIMIT_THRESHOLD_CHANGED
 ( 0x0026 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1175 
	#ATTRID_SE_MAXIMUM_DEMAND_EXCEEDED
 ( 0x0027 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1176 
	#ATTRID_SE_PROFILE_CLEARED
 ( 0x0028 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1177 
	#ATTRID_SE_FW_READY_FOR_ACTIVATION
 ( 0x0029 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1178 
	#ATTRID_SE_FW_ACTIVATED
 ( 0x002A | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1179 
	#ATTRID_SE_PATCH_FAILURE
 ( 0x002B | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1180 
	#ATTRID_SE_TOU_TARIFF_ACTIVATION
 ( 0x002C | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1181 
	#ATTRID_SE_8X8_TARIFF_ACTIVATED
 ( 0x002D | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1182 
	#ATTRID_SE_SINGLE_TARIFF_RATE_ACTIVATED
 ( 0x002E | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1183 
	#ATTRID_SE_ASYNC_BILLING_OCURRED
 ( 0x002F | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1184 
	#ATTRID_SE_SYNC_BILLING_OCURRED
 ( 0x0030 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1185 
	#ATTRID_SE_INCORRECT_POLARITY
 ( 0x0080 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1186 
	#ATTRID_SE_CURRENT_NO_VOLTAGE
 ( 0x0081 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1187 
	#ATTRID_SE_UNDER_VOLTAGE
 ( 0x0082 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1188 
	#ATTRID_SE_OVER_VOLTAGE
 ( 0x0083 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1189 
	#ATTRID_SE_NORMAL_VOLTAGE
 ( 0x0084 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1190 
	#ATTRID_SE_PF_BELOW_THRESHOLD
 ( 0x0085 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1191 
	#ATTRID_SE_PF_ABOVE_THRESHOLD
 ( 0x0086 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1192 
	#ATTRID_SE_TERMINAL_COVER_REMOVED
 ( 0x0087 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1193 
	#ATTRID_SE_TERMINAL_COVER_CLOSED
 ( 0x0088 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1194 
	#ATTRID_SE_REVERSE_FLOW
 ( 0x00A0 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1195 
	#ATTRID_SE_TILT_TAMPER
 ( 0x00A1 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1196 
	#ATTRID_SE_BATTERY_COVER_REMOVED
 ( 0x00A2 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1197 
	#ATTRID_SE_BATTERY_COVER_CLOSED
 ( 0x00A3 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1198 
	#ATTRID_SE_EXCESS_FLOW
 ( 0x00A4 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1199 
	#ATTRID_SE_CREDIT_OK
 ( 0x00C0 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1200 
	#ATTRID_SE_LOW_CREDIT
 ( 0x00C1 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1201 
	#ATTRID_SE_EMERGENCY_CREDIT_IN_USE
 ( 0x00C2 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1202 
	#ATTRID_SE_EMERGENCY_CREDIT_EXHAUSTED
 ( 0x00C3 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1203 
	#ATTRID_SE_ZERO_CREDIT_EC_NOT_SELECTED
 ( 0x00C4 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1204 
	#ATTRID_SE_SUPPLY_ON
 ( 0x00C5 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1205 
	#ATTRID_SE_SUPPLY_OFF_ARMED
 ( 0x00C6 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1206 
	#ATTRID_SE_SUPPLY_OFF
 ( 0x00C7 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1207 
	#ATTRID_SE_DISCOUNT_APPLIED
 ( 0x00C8 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1208 
	#ATTRID_SE_MANUFACTURER_SPECIFIC_A
 ( 0x00E0 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1209 
	#ATTRID_SE_MANUFACTURER_SPECIFIC_B
 ( 0x00E1 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1210 
	#ATTRID_SE_MANUFACTURER_SPECIFIC_C
 ( 0x00E2 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1211 
	#ATTRID_SE_MANUFACTURER_SPECIFIC_D
 ( 0x00E3 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1212 
	#ATTRID_SE_MANUFACTURER_SPECIFIC_E
 ( 0x00E4 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1213 
	#ATTRID_SE_MANUFACTURER_SPECIFIC_F
 ( 0x00E5 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1214 
	#ATTRID_SE_MANUFACTURER_SPECIFIC_G
 ( 0x00E6 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1215 
	#ATTRID_SE_MANUFACTURER_SPECIFIC_H
 ( 0x00E7 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1216 
	#ATTRID_SE_MANUFACTURER_SPECIFIC_I
 ( 0x00E8 | 
ATTRID_MASK_SE_EVENT_CONFIGURATION
 )

	)

1223 
	#COMMAND_SE_GET_PROFILE_CMD
 0x0000

	)

1224 
	#COMMAND_SE_GET_PROFILE_RSP
 0x0000

	)

1225 
	#COMMAND_SE_REQ_MIRROR_CMD
 0x0001

	)

1226 
	#COMMAND_SE_REQ_MIRROR_RSP
 0x0001

	)

1227 
	#COMMAND_SE_MIRROR_REM_CMD
 0x0002

	)

1228 
	#COMMAND_SE_MIRROR_REM_RSP
 0x0002

	)

1229 
	#COMMAND_SE_REQ_FAST_POLL_MODE_CMD
 0x0003

	)

1230 
	#COMMAND_SE_REQ_FAST_POLL_MODE_RSP
 0x0003

	)

1231 
	#COMMAND_SE_GET_SNAPSHOT_CMD
 0x0004

	)

1232 
	#COMMAND_SE_GET_SNAPSHOT_RSP
 0x0004

	)

1233 
	#COMMAND_SE_TAKE_SNAPSHOT_CMD
 0x0005

	)

1234 
	#COMMAND_SE_MIRROR_REPORT_ATTR_RSP
 0x0006

	)

1237 
	#COMMAND_SE_GET_CURRENT_PRICE
 0x0000

	)

1238 
	#COMMAND_SE_GET_SCHEDULED_PRICE
 0x0001

	)

1239 
	#COMMAND_SE_PRICE_ACKNOWLEDGEMENT
 0x0002

	)

1240 
	#COMMAND_SE_GET_BLOCK_PERIOD
 0x0003

	)

1241 
	#COMMAND_SE_GET_TARIFF_INFO
 0x0010

	)

1242 
	#COMMAND_SE_GET_PRICE_MATRIX
 0x0011

	)

1243 
	#COMMAND_SE_GET_BLOCK_THRESHOLD
 0x0012

	)

1244 
	#COMMAND_SE_GET_CONVERSION_FACTOR
 0x0013

	)

1245 
	#COMMAND_SE_GET_CALORIFIC_VALUE
 0x0014

	)

1246 
	#COMMAND_SE_GET_CO2_VALUE
 0x0015

	)

1247 
	#COMMAND_SE_GET_BILLING_PERIOD
 0x0020

	)

1248 
	#COMMAND_SE_GET_CONSOLIDATED_BILL
 0x0021

	)

1249 
	#COMMAND_SE_CPP_EVENT_RESPONSE
 0x0030

	)

1250 
	#COMMAND_SE_PUBLISH_PRICE
 0x0000

	)

1251 
	#COMMAND_SE_PUBLISH_BLOCK_PERIOD
 0x0001

	)

1252 
	#COMMAND_SE_PUBLISH_TARIFF_INFO
 0x0010

	)

1253 
	#COMMAND_SE_PUBLISH_PRICE_MATRIX
 0x0011

	)

1254 
	#COMMAND_SE_PUBLISH_BLOCK_THRESHOLD
 0x0012

	)

1255 
	#COMMAND_SE_PUBLISH_CONVERSION_FACTOR
 0x0013

	)

1256 
	#COMMAND_SE_PUBLISH_CALORIFIC_VALUE
 0x0014

	)

1257 
	#COMMAND_SE_PUBLISH_CO2_VALUE
 0x0015

	)

1258 
	#COMMAND_SE_PUBLISH_CPP_EVENT
 0x0016

	)

1259 
	#COMMAND_SE_PUBLISH_BILLING_PERIOD
 0x0020

	)

1260 
	#COMMAND_SE_PUBLISH_CONSOLIDATED_BILL
 0x0021

	)

1261 
	#COMMAND_SE_PUBLISH_CREDIT_PAYMENT_INFO
 0x0022

	)

1264 
	#COMMAND_SE_DISPLAY_MESSAGE
 0x0000

	)

1265 
	#COMMAND_SE_CANCEL_MESSAGE
 0x0001

	)

1266 
	#COMMAND_SE_GET_LAST_MESSAGE
 0x0000

	)

1267 
	#COMMAND_SE_MESSAGE_CONFIRMATION
 0x0001

	)

1270 
	#COMMAND_SE_LOAD_CONTROL_EVENT
 0x0000

	)

1271 
	#COMMAND_SE_CANCEL_LOAD_CONTROL_EVENT
 0x0001

	)

1272 
	#COMMAND_SE_CANCEL_ALL_LOAD_CONTROL_EVENT
 0x0002

	)

1273 
	#COMMAND_SE_REPORT_EVENT_STATUS
 0x0000

	)

1274 
	#COMMAND_SE_GET_SCHEDULED_EVENT
 0x0001

	)

1277 
	#COMMAND_SE_SEL_AVAIL_EMERGENCY_CREDIT
 0x0000

	)

1278 #i‚de‡
SE_UK_EXT


1279 
	#COMMAND_SE_CHANGE_SUPPLY
 0x0001

	)

1280 
	#COMMAND_SE_SUPPLY_STATUS_RESPONSE
 0x0000

	)

1282 
	#COMMAND_SE_CHANGE_DEBT
 0x0001

	)

1283 
	#COMMAND_SE_EMERGENCY_CREDIT_SETUP
 0x0002

	)

1284 
	#COMMAND_SE_CONSUMER_TOPUP
 0x0003

	)

1285 
	#COMMAND_SE_CREDIT_ADJUSTMENT
 0x0004

	)

1286 
	#COMMAND_SE_CHANGE_PAYMENT_MODE
 0x0005

	)

1287 
	#COMMAND_SE_GET_PREPAY_SNAPSHOT
 0x0006

	)

1288 
	#COMMAND_SE_GET_TOPUP_LOG
 0x0007

	)

1289 
	#COMMAND_SE_SET_LOW_CREDIT_WARNING_LEVEL
 0x0008

	)

1290 
	#COMMAND_SE_GET_DEBT_REPAYMENT_LOG
 0x0009

	)

1291 
	#COMMAND_SE_GET_PREPAY_SNAPSHOT_RESPONSE
 0x0000

	)

1292 
	#COMMAND_SE_CHANGE_PAYMENT_MODE_RESPONSE
 0x0001

	)

1293 
	#COMMAND_SE_CONSUMER_TOPUP_RESPONSE
 0x0002

	)

1294 
	#COMMAND_SE_GET_COMMANDS
 0x0003

	)

1295 
	#COMMAND_SE_PUBLISH_TOPUP_LOG
 0x0004

	)

1296 
	#COMMAND_SE_PUBLISH_DEBT_LOG
 0x0005

	)

1300 
	#COMMAND_SE_REQUEST_TUNNEL
 0x0000

	)

1301 
	#COMMAND_SE_CLOSE_TUNNEL
 0x0001

	)

1302 
	#COMMAND_SE_DATA_CLIENT_SERVER_DIR
 0x0002

	)

1303 
	#COMMAND_SE_DATA_ERROR_CLIENT_SERVER_DIR
 0x0003

	)

1304 
	#COMMAND_SE_ACK_CLIENT_SERVER_DIR
 0x0004

	)

1305 
	#COMMAND_SE_READY_DATA_CLIENT_SERVER_DIR
 0x0005

	)

1306 
	#COMMAND_SE_GET_SUPP_TUNNEL_PROTOCOLS
 0x0006

	)

1309 
	#COMMAND_SE_REQUEST_TUNNEL_RESPONSE
 0x0000

	)

1310 
	#COMMAND_SE_DATA_SERVER_CLIENT_DIR
 0x0001

	)

1311 
	#COMMAND_SE_DATA_ERROR_SERVER_CLIENT_DIR
 0x0002

	)

1312 
	#COMMAND_SE_ACK_SERVER_CLIENT_DIR
 0x0003

	)

1313 
	#COMMAND_SE_READY_DATA_SERVER_CLIENT_DIR
 0x0004

	)

1314 
	#COMMAND_SE_SUPP_TUNNEL_PROTOCOLS_RSP
 0x0005

	)

1315 
	#COMMAND_SE_TUNNEL_CLOSURE_NOTIFICATION
 0x0006

	)

1317 #ifde‡
SE_UK_EXT


1319 
	#COMMAND_SE_GET_CALENDAR
 0x0000

	)

1320 
	#COMMAND_SE_GET_DAY_PROFILES
 0x0001

	)

1321 
	#COMMAND_SE_GET_WEEK_PROFILES
 0x0002

	)

1322 
	#COMMAND_SE_GET_SEASONS
 0x0003

	)

1323 
	#COMMAND_SE_GET_SPECIAL_DAYS
 0x0004

	)

1324 
	#COMMAND_SE_PUBLISH_CALENDAR
 0x0000

	)

1325 
	#COMMAND_SE_PUBLISH_DAY_PROFILE
 0x0001

	)

1326 
	#COMMAND_SE_PUBLISH_WEEK_PROFILE
 0x0002

	)

1327 
	#COMMAND_SE_PUBLISH_SEASONS
 0x0003

	)

1328 
	#COMMAND_SE_PUBLISH_SPECIAL_DAYS
 0x0004

	)

1331 
	#COMMAND_SE_GET_CHANGE_OF_TENANCY
 0x0000

	)

1332 
	#COMMAND_SE_GET_CHANGE_OF_SUPPLIER
 0x0001

	)

1333 
	#COMMAND_SE_GET_CHANGE_SUPPLY
 0x0002

	)

1334 
	#COMMAND_SE_SUPPLY_STATUS_RESPONSE
 0x0003

	)

1335 
	#COMMAND_SE_GET_PASSWORD
 0x0004

	)

1336 
	#COMMAND_SE_PUBLISH_CHANGE_OF_TENANCY
 0x0000

	)

1337 
	#COMMAND_SE_PUBLISH_CHANGE_OF_SUPPLIER
 0x0001

	)

1338 
	#COMMAND_SE_CHANGE_SUPPLY
 0x0002

	)

1339 
	#COMMAND_SE_CHANGE_PASSWORD
 0x0003

	)

1340 
	#COMMAND_SE_LOCAL_CHANGE_SUPPLY
 0x0004

	)

1348 
	#CURRENT_BLOCK_NO_BLOCKS_IN_USE
 0x00

	)

1349 
	#CURRENT_BLOCK_BLOCK1
 0x01

	)

1350 
	#CURRENT_BLOCK_BLOCK2
 0x02

	)

1351 
	#CURRENT_BLOCK_BLOCK3
 0x03

	)

1352 
	#CURRENT_BLOCK_BLOCK4
 0x04

	)

1353 
	#CURRENT_BLOCK_BLOCK5
 0x05

	)

1354 
	#CURRENT_BLOCK_BLOCK6
 0x06

	)

1355 
	#CURRENT_BLOCK_BLOCK7
 0x07

	)

1356 
	#CURRENT_BLOCK_BLOCK8
 0x08

	)

1357 
	#CURRENT_BLOCK_BLOCK9
 0x09

	)

1358 
	#CURRENT_BLOCK_BLOCK10
 0x0A

	)

1359 
	#CURRENT_BLOCK_BLOCK11
 0x0B

	)

1360 
	#CURRENT_BLOCK_BLOCK12
 0x0C

	)

1361 
	#CURRENT_BLOCK_BLOCK13
 0x0D

	)

1362 
	#CURRENT_BLOCK_BLOCK14
 0x0E

	)

1363 
	#CURRENT_BLOCK_BLOCK15
 0x0F

	)

1364 
	#CURRENT_BLOCK_BLOCK16
 0x10

	)

1367 
	#PROFILE_INTERVAL_PERIOD_DAILY
 0

	)

1368 
	#PROFILE_INTERVAL_PERIOD_60MIN
 1

	)

1369 
	#PROFILE_INTERVAL_PERIOD_30MIN
 2

	)

1370 
	#PROFILE_INTERVAL_PERIOD_15MIN
 3

	)

1371 
	#PROFILE_INTERVAL_PERIOD_10MIN
 4

	)

1372 
	#PROFILE_INTERVAL_PERIOD_7_5MIN
 5

	)

1373 
	#PROFILE_INTERVAL_PERIOD_5MIN
 6

	)

1374 
	#PROFILE_INTERVAL_PERIOD_2_5MIN
 7

	)

1377 
	#PROFILE_INTERVAL_STAT_SUCCESS
 0x00

	)

1378 
	#PROFILE_INTERVAL_STAT_UNDEFINED_CHANNEL
 0x01

	)

1379 
	#PROFILE_INTERVAL_STAT_CHANNEL_NOT_SUPPORT
 0x02

	)

1380 
	#PROFILE_INTERVAL_STAT_INVALID_END_TIME
 0x03

	)

1381 
	#PROFILE_INTERVAL_STAT_TOO_MANY_PERIOD
 0x04

	)

1382 
	#PROFILE_INTERVAL_STAT_NO_INTERVALS
 0x05

	)

1385 
	#STATUS_BITMASK_CHECK_METER
 0x01

1386 
	#STATUS_BITMASK_LOW_BATTERY
 0x02

1387 
	#STATUS_BITMASK_TAMPER_DETECT
 0x04

1388 
	#STATUS_BITMASK_POWER_FAILURE
 0x08

1389 
	#STATUS_BITMASK_PIPE_EMPTY
 0x08

1390 
	#STATUS_BITMASK_TEMPERATURE_SENSOR
 0x08

1391 
	#STATUS_BITMASK_POWER_QUALITY
 0x10

1392 
	#STATUS_BITMASK_LOW_PRESSURE
 0x10

1393 
	#STATUS_BITMASK_BURST_DETECT
 0x10

1394 
	#STATUS_BITMASK_LEAK_DETECT
 0x20

1395 
	#STATUS_BITMASK_SERVICE_DISCONNECT
 0x40

1396 
	#STATUS_BITMASK_REVERSE_FLOW
 0x80

1397 
	#STATUS_BITMASK_FLOW_SENSOR
 0x80

1398 

	)

1400 
	#PACKET_LEN_SE_PUBLISH_PRICE_SE_1_0
 34

	)

1403 
	#PACKET_LEN_SE_PUBLISH_PRICE
 42

	)

1404 
	#PACKET_LEN_SE_PRICE_ACKNOWLEDGEMENT
 13

	)

1405 #ifde‡
SE_UK_EXT


1406 
	#PACKET_LEN_SE_PUBLISH_BLOCK_PERIOD
 18

	)

1408 
	#PACKET_LEN_SE_PUBLISH_BLOCK_PERIOD
 17

	)

1410 
	#PACKET_LEN_SE_LOAD_CONTROL_EVENT
 23

	)

1411 
	#PACKET_LEN_SE_GET_SCHEDULED_EVENT
 5

	)

1412 
	#PACKET_LEN_SE_CANCEL_LOAD_CONTROL_EVENT
 12

	)

1413 
	#PACKET_LEN_SE_REPORT_EVENT_STATUS_ONLY
 18

	)

1414 
	#PACKET_LEN_SE_REPORT_EVENT_STATUS
 (
PACKET_LEN_SE_REPORT_EVENT_STATUS_ONLY
 + 
SE_PROFILE_SIGNATURE_LENGTH
)

	)

1415 
	#PACKET_LEN_SE_METERING_FAST_POLLING_REQ
 2

	)

1416 
	#PACKET_LEN_SE_METERING_FAST_POLLING_RSP
 5

	)

1417 
	#PACKET_LEN_SE_SEL_AVAIL_EMERGENCY_CREDIT
 7

	)

1418 #i‚de‡
SE_UK_EXT


1419 
	#PACKET_LEN_SE_CHANGE_SUPPLY
 16

	)

1420 
	#PACKET_LEN_SE_SUPPLY_STATUS_RESPONSE
 9

	)

1422 
	#PACKET_LEN_SE_GET_SNAPSHOT_CMD
 7

	)

1423 
	#PACKET_LEN_SE_GET_SNAPSHOT_RSP
 12

	)

1424 
	#PACKET_LEN_SE_MIRROR_REPORT_ATTR_RSP
 7

	)

1426 
	#PACKET_LEN_SE_MIN_PUBLISH_TARIFF_INFORMATION
 33

	)

1427 
	#PACKET_LEN_SE_MIN_PUBLISH_PRICE_MATRIX
 5

	)

1428 
	#PACKET_LEN_SE_MIN_PUBLISH_BLOCK_THRESHOLD
 5

	)

1429 
	#PACKET_LEN_SE_PUBLISH_CONVERSION_FACTOR
 13

	)

1430 
	#PACKET_LEN_SE_PUBLISH_CALORIFIC_VALUE
 14

	)

1431 
	#PACKET_LEN_SE_PUBLISH_CO2_VALUE
 15

	)

1432 
	#PACKET_LEN_SE_PUBLISH_CPP_EVENT
 13

	)

1433 
	#PACKET_LEN_SE_PUBLISH_BILLING_PERIOD
 12

	)

1434 
	#PACKET_LEN_SE_PUBLISH_CONSOLIDATED_BILL
 19

	)

1435 
	#PACKET_LEN_SE_MIN_PUBLISH_CREDIT_PAYMENT_INFO
 22

	)

1436 
	#PACKET_LEN_SE_GET_TARIFF_INFO
 6

	)

1437 
	#PACKET_LEN_SE_GET_PRICE_MATRIX
 4

	)

1438 
	#PACKET_LEN_SE_GET_BLOCK_THRESHOLD
 4

	)

1439 
	#PACKET_LEN_SE_GET_CONVERSION_FACTOR
 5

	)

1440 
	#PACKET_LEN_SE_GET_CALORIFIC_VALUE
 5

	)

1441 
	#PACKET_LEN_SE_GET_CO2_VALUE
 6

	)

1442 
	#PACKET_LEN_SE_GET_BILLING_PERIOD
 6

	)

1443 
	#PACKET_LEN_SE_GET_CONSOLIDATED_BILL
 6

	)

1444 
	#PACKET_LEN_SE_CPP_EVENT_RESPONSE
 5

	)

1446 
	#PACKET_LEN_SE_TUNNELING_REQUEST
 6

	)

1447 
	#PACKET_LEN_SE_TUNNELING_RESPONSE
 5

	)

1448 
	#PACKET_LEN_SE_TUNNELING_CLOSE
 2

	)

1449 
	#PACKET_LEN_SE_TUNNELING_TRANSFER_DATA
 2

	)

1450 
	#PACKET_LEN_SE_TUNNELING_DATA_ERROR
 3

	)

1451 
	#PACKET_LEN_SE_TUNNELING_DATA_ACK
 4

	)

1452 
	#PACKET_LEN_SE_TUNNELING_READY_DATA
 4

	)

1453 
	#PACKET_LEN_SE_TUNNELING_GET_SUPP_PROT
 1

	)

1454 
	#PACKET_LEN_SE_TUNNELING_SUPP_PROT_RSP
 2

	)

1455 
	#PACKET_LEN_SE_TUNNELING_PROTOCOL_PAYLOAD
 3

	)

1456 
	#PACKET_LEN_SE_TUNNELING_TUNNEL_CLOSURE
 2

	)

1458 
	#PACKET_LEN_SE_MIN_CHANGE_DEBT
 29

	)

1459 
	#PACKET_LEN_SE_EMERGENCY_CREDIT_SETUP
 12

	)

1460 
	#PACKET_LEN_SE_MIN_CONSUMER_TOPUP
 2

	)

1461 
	#PACKET_LEN_SE_MIN_CREDIT_ADJUSTMENT
 12

	)

1462 
	#PACKET_LEN_SE_MIN_CHANGE_PAYMENT_MODE
 18

	)

1463 
	#PACKET_LEN_SE_GET_PREPAY_SNAPSHOT
 7

	)

1464 
	#PACKET_LEN_SE_GET_TOPUP_LOG
 1

	)

1465 
	#PACKET_LEN_SE_SET_LOW_CREDIT_WARNING_LEVEL
 1

	)

1466 
	#PACKET_LEN_SE_GET_DEBT_REPAYMENT_LOG
 2

	)

1467 
	#PACKET_LEN_SE_GET_PREPAY_SNAPSHOT_RESPONSE
 32

	)

1468 
	#PACKET_LEN_SE_CHANGE_PAYMENT_MODE_RESPONSE
 13

	)

1469 
	#PACKET_LEN_SE_SE_CONSUMER_TOPUP_RESPONSE
 10

	)

1470 
	#PACKET_LEN_SE_GET_COMMANDS
 1

	)

1471 
	#PACKET_LEN_SE_MIN_PUBLISH_TOPUP_LOG
 2

	)

1472 
	#PACKET_LEN_SE_MIN_PUBLISH_DEBT_LOG
 2

	)

1474 #ifde‡
SE_UK_EXT


1475 
	#PACKET_LEN_SE_PUBLISH_CALENDAR
 14

	)

1476 
	#PACKET_LEN_SE_PUBLISH_DAY_PROFILE
 7

	)

1477 
	#PACKET_LEN_SE_PUBLISH_WEEK_PROFILE
 12

	)

1478 
	#PACKET_LEN_SE_PUBLISH_SEASONS
 5

	)

1479 
	#PACKET_LEN_SE_PUBLISH_SPECIAL_DAYS
 11

	)

1480 
	#PACKET_LEN_SE_GET_CALENDAR
 6

	)

1481 
	#PACKET_LEN_SE_GET_DAY_PROFILE
 4

	)

1482 
	#PACKET_LEN_SE_GET_WEEK_PROFILE
 4

	)

1483 
	#PACKET_LEN_SE_GET_SEASONS
 4

	)

1484 
	#PACKET_LEN_SE_GET_SPECIAL_DAYS
 6

	)

1486 
	#PACKET_LEN_SE_SUPPLY_STATUS_RESPONSE
 13

	)

1487 
	#PACKET_LEN_SE_GET_PASSWORD
 1

	)

1488 
	#PACKET_LEN_SE_PUBLISH_CHANGE_OF_TENANCY
 18

	)

1489 
	#PACKET_LEN_SE_PUBLISH_CHANGE_OF_SUPPLIER
 23

	)

1490 
	#PACKET_LEN_SE_CHANGE_SUPPLY
 19

	)

1491 
	#PACKET_LEN_SE_CHANGE_PASSWORD
 2

	)

1492 
	#PACKET_LEN_SE_LOCAL_CHANGE_SUPPLY
 1

	)

1496 
	#MAX_DURATION_IN_MINUTES_SE_LOAD_CONTROL
 1440

1497 
	#MAX_CRITICAL_LEVEL_SE_LOAD_CONTROL
 0x0F

	)

1498 
	#MAX_TEMPERATURE_SETPOINT_SE_LOAD_CONTROL
 0x7FFF

	)

1499 
	#MIN_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE
 -100

	)

1500 
	#MAX_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE
 100

	)

1501 
	#MAX_DUTY_CYCLE_SE_LOAD_CONTROL
 100

	)

1502 
	#MAX_INTERVAL_CHANNEL_SE_SIMPLE_METERING
 1

	)

1503 
	#MAX_PROFILE_INTERVAL_PERIOD_SE_SIMPLE_METERING
 7

	)

1504 
	#MAX_DURATION_IN_MINUTES_FAST_POLL_MODE
 15

	)

1505 
	#MIN_NUM_PRICE_TIERS
 0x00

	)

1506 
	#MAX_NUM_PRICE_TIERS
 0x0F

	)

1507 
	#MIN_NUM_BLOCK_THRESHOLDS_AVAILABLE
 0x00

	)

1508 
	#MAX_NUM_BLOCK_THRESHOLDS_AVAILABLE
 0x0F

	)

1511 
	#SE_RATE_LABEL_LEN
 13

	)

1512 
	#SE_SITE_ID_LEN
 33

	)

1513 
	#SE_METER_SERIAL_NUM_LEN
 17

	)

1514 
	#SE_DEBT_LABEL_LEN
 12

	)

1515 
	#SE_TOPUP_CODE_LEN
 25

	)

1516 
	#SE_CREDIT_PAYMENT_REF_LEN
 20

	)

1517 
	#SE_TARIFF_LABEL_LEN
 20

	)

1518 
	#SE_CALENDAR_NAME_LEN
 12

	)

1519 
	#SE_SUPPLIER_ID_NAME_LEN
 17

	)

1520 
	#SE_PASSWORD_LEN
 13

	)

1524 
	#SE_SIGNATURE_LEN
 48

	)

1527 
	#SE_DEVICE_CLASS_HVAC_COMPRESSOR_FURNACE
 0x0001

	)

1528 
	#SE_DEVICE_CLASS_STRIP_HEATER
 0x0002

	)

1529 
	#SE_DEVICE_CLASS_WATER_HEATER
 0x0004

	)

1530 
	#SE_DEVICE_CLASS_POOL_PUMP
 0x0008

	)

1531 
	#SE_DEVICE_CLASS_SMART_APPLIANCES
 0x0010

	)

1532 
	#SE_DEVICE_CLASS_IRRIGATION_PUMP
 0x0020

	)

1533 
	#SE_DEVICE_CLASS_MANAGED_CI_LOADS
 0x0040

	)

1534 
	#SE_DEVICE_CLASS_SIMPLE_MISC_LOADS
 0x0080

	)

1535 
	#SE_DEVICE_CLASS_EXTERIOR_LIGHTING
 0x0100

	)

1536 
	#SE_DEVICE_CLASS_INTERIOR_LIGHTING
 0x0200

	)

1537 
	#SE_DEVICE_CLASS_ELECTRIC_VEHICLE
 0x0400

	)

1538 
	#SE_DEVICE_CLASS_GENERATION_SYSTEMS
 0x0800

	)

1541 
	#SE_CRITICALITY_LEVELS_GREEN
 0x01

	)

1542 
	#SE_CRITICALITY_LEVELS_1
 0x02

	)

1543 
	#SE_CRITICALITY_LEVELS_2
 0x03

	)

1544 
	#SE_CRITICALITY_LEVELS_3
 0x04

	)

1545 
	#SE_CRITICALITY_LEVELS_4
 0x05

	)

1546 
	#SE_CRITICALITY_LEVELS_5
 0x06

	)

1547 
	#SE_CRITICALITY_LEVELS_EMERGENCY
 0x07

	)

1548 
	#SE_CRITICALITY_LEVELS_PLANNED_OUTAGE
 0x08

	)

1549 
	#SE_CRITICALITY_LEVELS_SERVICE_DISCONNECT
 0x09

	)

1552 
	#SE_EVENT_CONTROL_FIELD_START_TIME
 0x01

	)

1553 
	#SE_EVENT_CONTROL_FIELD_END_TIME
 0x02

	)

1556 
	#SE_OPTIONAL_FIELD_UINT8
 0xFF

	)

1557 
	#SE_OPTIONAL_FIELD_UINT16
 0xFFFF

	)

1558 
	#SE_OPTIONAL_FIELD_UINT32
 0xFFFFFFFF

	)

1559 
	#SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
 0x8000

	)

1560 
	#SE_OPTIONAL_FIELD_INT8
 -128

	)

1563 
	#EVENT_STATUS_LOAD_CONTROL_EVENT_RECEIVED
 0x01

	)

1564 
	#EVENT_STATUS_LOAD_CONTROL_EVENT_STARTED
 0x02

	)

1565 
	#EVENT_STATUS_LOAD_CONTROL_EVENT_COMPLETED
 0x03

	)

1566 
	#EVENT_STATUS_LOAD_CONTROL_USER_OPT_OUT
 0x04

	)

1567 
	#EVENT_STATUS_LOAD_CONTROL_USER_OPT_IN
 0x05

	)

1568 
	#EVENT_STATUS_LOAD_CONTROL_EVENT_CANCELLED
 0x06

	)

1569 
	#EVENT_STATUS_LOAD_CONTROL_EVENT_SUPERSEDED
 0x07

	)

1570 
	#EVENT_STATUS_LOAD_CONTROL_REJECTED_DUPLICATEID
 0xFA

	)

1571 
	#EVENT_STATUS_LOAD_CONTROL_REJECTED_EVT_EXPIRED
 0xFB

	)

1572 
	#EVENT_STATUS_LOAD_CONTROL_REJECTED_EVT_COMPLETED
 0xFC

	)

1573 
	#EVENT_STATUS_LOAD_CONTROL_REJECTED_UNDEFINED_EVT
 0xFD

	)

1574 
	#EVENT_STATUS_LOAD_CONTROL_EVENT_REJECTED
 0xFE

	)

1577 
	#SE_PROFILE_SIGNATURE_TYPE_ECDSA
 0x01

	)

1580 
	#SE_PROFILE_SIGNATURE_LENGTH
 42

	)

1581 
	#SE_PROFILE_MESSAGE_RESPONSE_LENGTH
 20

	)

1584 
	#SE_PROFILE_MSGCTRL_IMPORTANCE
 2

	)

1585 
	#SE_PROFILE_MSGCTRL_PINREQUIRED
 4

	)

1586 
	#SE_PROFILE_MSGCTRL_ACCEPTREQUIRED
 5

	)

1587 
	#SE_PROFILE_MSGCTRL_CONFREQUIRED
 7

	)

1590 
	#SE_PROFILE_PRICE_CONTROL_NOT_USED
 0x00

	)

1591 
	#SE_PROFILE_PRICEACK_REQUIRED_MASK
 0x01

	)

1594 
	#SE_PAYMENT_CTRL_DISC_ENABLED
 0x01

	)

1595 
	#SE_PAYMENT_CTRL_RESERVED1
 0x02

	)

1596 
	#SE_PAYMENT_CTRL_CREDIT_MGMNT_ENABLED
 0x04

	)

1597 
	#SE_PAYMENT_CTRL_RESERVED2
 0x08

	)

1598 
	#SE_PAYMENT_CTRL_CREDIT_DISP_ENABLED
 0x10

	)

1599 
	#SE_PAYMENT_CTRL_RESERVED3
 0x20

	)

1600 
	#SE_PAYMENT_CTRL_ACCOUNT_BASE
 0x40

	)

1601 
	#SE_PAYMENT_CTRL_CONTRACTOR_FITTED
 0x80

	)

1604 
	#SE_CREDIT_STATUS_CREDIT_OK
 0x01

	)

1605 
	#SE_CREDIT_STATUS_LOW_CREDIT
 0x02

	)

1606 
	#SE_CREDIT_STATUS_EMER_CREDIT_ENABLED
 0x04

	)

1607 
	#SE_CREDIT_STATUS_EMER_CREDIT_AVAILABLE
 0x08

	)

1608 
	#SE_CREDIT_STATUS_EMER_CREDIT_SELECTED
 0x10

	)

1609 
	#SE_CREDIT_STATUS_EMER_CREDIT_IN_USE
 0x20

	)

1610 
	#SE_CREDIT_STATUS_EMER_CREDIT_EXHAUSTED
 0x40

	)

1613 
	#SE_ORIG_DEV_ENERGY_SERVICE_INTERFACE
 ( 0x00FF & 
ZCL_SE_DEVICEID_ESP
 )

	)

1614 
	#SE_ORIG_DEV_INPREMISES_DISPLAY_DEV
 ( 0x00FF & 
ZCL_SE_DEVICEID_IN_PREMISE_DISPLAY
 )

	)

1617 
	#SE_SUPPLY_CTRL_ACK_REQUIRED
 0x01

	)

1620 
	#SE_RECOVERY_PERIOD_PER_HOUR
 0x00

	)

1621 
	#SE_RECOVERY_PERIOD_PER_DAY
 0x01

	)

1622 
	#SE_RECOVERY_PERIOD_PER_WEEK
 0x02

	)

1623 
	#SE_RECOVERY_PERIOD_PER_MONTH
 0x03

	)

1624 
	#SE_RECOVERY_PERIOD_PER_QUARTER
 0x04

	)

1627 
	#SE_SUPPLY_OFF
 0x00

	)

1628 
	#SE_SUPPLY_OFF_ARMED
 0x01

	)

1629 
	#SE_SUPPLY_ON
 0x02

	)

1632 
	#SE_SNAPSHOT_TYPE_CSD_AND_RCV_REGISTER
 1

	)

1633 
	#SE_SNAPSHOT_TYPE_TOU_INFO_RECEIVED
 2

	)

1634 
	#SE_SNAPSHOT_TYPE_TOU_INFO_DELIVERED
 3

	)

1635 
	#SE_SNAPSHOT_TYPE_BLOCK_INFO_RECEIVED
 4

	)

1636 
	#SE_SNAPSHOT_TYPE_BLOCK_INFO_DELIVERED
 5

	)

1639 
	#SE_SNAPSHOT_CSD_AND_RCV_REGISTER_PAYLOAD_LEN
 12

	)

1642 
	#SE_SNAPSHOT_CAUSE_GENERAL
 0

	)

1643 
	#SE_SNAPSHOT_CAUSE_END_BILL_PERIOD
 1

	)

1644 
	#SE_SNAPSHOT_CAUSE_END_BLOCK_PERIOD
 2

	)

1645 
	#SE_SNAPSHOT_CAUSE_CHANGE_TARRIF_INFO
 3

	)

1646 
	#SE_SNAPSHOT_CAUSE_CHANGE_OF_CV
 6

	)

1647 
	#SE_SNAPSHOT_CAUSE_CHANGE_OF_CF
 7

	)

1648 
	#SE_SNAPSHOT_CAUSE_CHANGE_OF_TOU_CALENDAR
 8

	)

1649 
	#SE_SNAPSHOT_CAUSE_CRITICAL_PEAK_PRICING
 9

	)

1650 
	#SE_SNAPSHOT_CAUSE_MANUAL_TRIGGER
 10

	)

1653 
	#SE_NOTIFICATION_REPORT_ATTR_RSP_BIT
 1

	)

1656 
	#SE_SNAPSHOT_TYPE_DEBIT_CREDIT_ADDITION
 0

	)

1659 
	#SE_PROTOCOL_ID_DLMS_COSEM
 0

	)

1660 
	#SE_PROTOCOL_ID_IEC_61107
 1

	)

1661 
	#SE_PROTOCOL_ID_ANSI_C12
 2

	)

1662 
	#SE_PROTOCOL_ID_M_BUS
 3

	)

1663 
	#SE_PROTOCOL_ID_SML
 4

	)

1664 
	#SE_PROTOCOL_ID_CLIMATE_TALK
 5

	)

1665 
	#SE_PROTOCOL_ID_RESERVED
 255

	)

1668 
	#SE_TRANSFER_DATA_STATUS_NO_SUCH_TUNNEL
 0x00

	)

1669 
	#SE_TRANSFER_DATA_STATUS_WRONG_DEVICE
 0x01

	)

1670 
	#SE_TRANSFER_DATA_STATUS_DATA_OVERFLOW
 0x02

	)

1673 
	#SE_TUNNEL_STATUS_SUCCESS
 0x00

	)

1674 
	#SE_TUNNEL_STATUS_BUSY
 0x01

	)

1675 
	#SE_TUNNEL_STATUS_NO_MORE_TUNNEL_IDS
 0x02

	)

1676 
	#SE_TUNNEL_STATUS_PROTOCOL_NOT_SUPPORTED
 0x03

	)

1677 
	#SE_TUNNEL_STATUS_FLOW_CONTROL_NOT_SUPPORTED
 0x04

	)

1680 
	#SE_CALENDAR_TYPE_IMPORT_CALENDAR
 0x00

	)

1681 
	#SE_CALENDAR_TYPE_EXPORT_CALENDAR
 0x01

	)

1682 
	#SE_CALENDAR_TYPE_IMPORT_EXPORT_CALENDAR
 0x02

	)

1683 
	#SE_CALENDAR_TYPE_FRIENDLY_CREDIT_CALENDAR
 0x03

	)

1686 
	#SE_CALENDAR_TIME_REF_STANDARD_TIME
 0x00

	)

1687 
	#SE_CALENDAR_TIME_REF_LOCAL_TIME
 0x01

	)

1690 
	#SE_DAY_SCHEDULE_ENTRY_LEN
 3

	)

1691 
	#SE_SEASON_ENTRY_LEN
 5

	)

1692 
	#SE_SPECIAL_DAY_ENTRY_LEN
 5

	)

1695 
	#SE_PSWD_LEVEL_PASSWORD_1
 0x01

	)

1696 
	#SE_PSWD_LEVEL_PASSWORD_2
 0x02

	)

1697 
	#SE_PSWD_LEVEL_PASSWORD_3
 0x03

	)

1698 
	#SE_PSWD_LEVEL_PASSWORD_4
 0x04

	)

1701 
	#SE_PROPOSED_SUPLY_STATUS_SUPPLY_OFF_ARMED
 0x01

	)

1702 
	#SE_PROPOSED_SUPLY_STATUS_SUPPLY_ON
 0x02

	)

1705 
	#SE_EVENT_CONFIGURATION_DO_NOT_LOG
 0x00

	)

1706 
	#SE_EVENT_CONFIGURATION_LOG_TEMPER
 0x01

	)

1707 
	#SE_EVENT_CONFIGURATION_LOG_FAULT
 0x02

	)

1708 
	#SE_EVENT_CONFIGURATION_LOG_GENERAL_EVENT
 0x03

	)

1709 
	#SE_EVENT_CONFIGURATION_LOG_LOG_4
 0x04

	)

1710 
	#SE_EVENT_CONFIGURATION_LOG_LOG_5
 0x05

	)

1711 
	#SE_EVENT_CONFIGURATION_LOG_LOG_6
 0x06

	)

1714 
	#SE_CHANGE_CTRL_PRE_SNAPSHOTS
 0x0001

	)

1715 
	#SE_CHANGE_CTRL_POST_SNAPSHOTS
 0x0002

	)

1716 
	#SE_CHANGE_CTRL_RESET_CREDIT_REGISTER
 0x0004

	)

1717 
	#SE_CHANGE_CTRL_RESET_DEBT_REGISTER
 0x0008

	)

1718 
	#SE_CHANGE_CTRL_RESET_BILLING_PERIOD
 0x0010

	)

1719 
	#SE_CHANGE_CTRL_CLEAR_TARIF_PLAN
 0x0020

	)

1720 
	#SE_CHANGE_CTRL_CLEAR_STANDING_CHARGE
 0x0040

	)

1721 
	#SE_CHANGE_CTRL_BLOCK_HIST_LOAD_PROF_INFO
 0x0080

	)

1722 
	#SE_CHANGE_CTRL_CLEAR_HIST_LOAD_PROF_INFO
 0x0100

	)

1723 
	#SE_CHANGE_CTRL_CLEAR_IPD_DATA_CONSUMER
 0x0200

	)

1724 
	#SE_CHANGE_CTRL_CLEAR_IPD_DATA_SUPPLIER
 0x0400

	)

1725 
	#SE_CHANGE_CTRL_METER_CONN_STATE_ON_OFF_ARM
 0x1800

	)

1726 
	#SE_CHANGE_CTRL_CLEAR_TRANSACTION_LOG
 0x2000

	)

1740 
uöt8
 
ch™√l
;

1741 
uöt32
 
ídTime
;

1742 
uöt8
 
numOfPîiods
;

1743 } 
	tz˛CCGëProfûeCmd_t
;

1747 
uöt32
 
ídTime
;

1748 
uöt8
 
°©us
;

1749 
uöt8
 
¥ofûeI¡îvÆPîiod
;

1750 
uöt8
 
numOfPîiodDñivîed
;

1751 
uöt24
 *
öãrvÆs
;

1752 } 
	tz˛CCGëProfûeR•_t
;

1755 
uöt16
 
ídpoötId
 ;

1756 } 
	tz˛CCReqMúr‹R•_t
 ;

1760 
uöt16
 
ídpoötId
 ;

1761 } 
	tz˛CCMúr‹RemR•_t
 ;

1766 
uöt8
 
Á°PﬁlUpd©ePîiod
;

1767 
uöt8
 
duøti⁄
;

1768 } 
	tz˛CCReqFa°PﬁlModeCmd_t
;

1773 
uöt8
 
≠∂õdUpd©ePîiod
;

1774 
uöt32
 
Á°PﬁlModeEndTime
;

1775 } 
	tz˛CCReqFa°PﬁlModeR•_t
;

1780 
uöt32
 
SèπTime
;

1781 
uöt8
 
NumbîOfS«pshŸs
;

1782 
uöt16
 
S«pshŸCau£
;

1783 } 
	tz˛CCReqGëS«pshŸCmd_t
;

1787 
uöt32
 
IssuîEvítID
;

1788 
uöt32
 
S«pshŸTime
;

1789 
uöt8
 
Comm™dIndex
;

1790 
uöt16
 
S«pshŸCau£
;

1791 
uöt8
 
S«pshŸPaylﬂdTy≥
;

1792 
uöt8
 *
pS«pshŸPaylﬂd
;

1793 } 
	tz˛CCReqGëS«pshŸR•_t
;

1797 
uöt8
 
NŸifiˇti⁄Fœgs
;

1798 
uöt16
 
Pri˚NŸifiˇti⁄Fœgs
;

1799 
uöt8
 
CÆíd¨NŸifiˇti⁄Fœgs
;

1800 
uöt16
 
PªPayNŸifiˇti⁄Fœgs
;

1801 
uöt8
 
Devi˚MgmtNŸifiˇti⁄Fœgs
;

1802 } 
	tz˛CCReqMúr‹Rï‹tAârR•_t
;

1806 
uöt8
 
›ti⁄
;

1807 } 
	tz˛CCGëCuºítPri˚_t
;

1811 
uöt32
 
°¨tTime
;

1812 
uöt8
 
numEvíts
;

1813 } 
	tz˛CCGëScheduÀdPri˚_t
;

1817 
uöt32
 
¥ovidîId
;

1818 
UTF8Såög_t
 
øãLabñ
;

1819 
uöt32
 
issuîEvítId
;

1820 
uöt32
 
cuºítTime
;

1821 
uöt8
 
unôOfMósuª
;

1822 
uöt16
 
cuºícy
;

1823 
uöt8
 
¥i˚TøûögDigô
;

1824 
uöt8
 
numbîOfPri˚Tõrs
;

1825 
uöt32
 
°¨tTime
;

1826 
uöt16
 
duøti⁄InMöuãs
;

1827 
uöt32
 
¥i˚
;

1828 
uöt8
 
¥i˚R©io
;

1829 
uöt32
 
gíî©i⁄Pri˚
;

1830 
uöt8
 
gíî©i⁄Pri˚R©io
;

1831 
uöt32
 
Æã∫©eCo°Dñivîed
;

1832 
uöt8
 
Æã∫©eCo°Unô
;

1833 
uöt8
 
Æã∫©eCo°TøûögDigô
;

1834 
uöt8
 
numbîOfBlockThªshﬁds
;

1835 
uöt8
 
¥i˚C⁄åﬁ
;

1836 } 
	tz˛CCPublishPri˚_t
;

1840 
uöt32
 
¥ovidîId
;

1841 
uöt32
 
issuîEvítId
;

1842 
uöt32
 
¥i˚AckTime
;

1843 
uöt8
 
c⁄åﬁ
;

1844 } 
	tz˛CCPri˚AcknowÀdgemít_t
;

1848 
uöt32
 
°¨tTime
;

1849 
uöt8
 
numEvíts
;

1850 } 
	tz˛CCGëBlockPîiod_t
;

1854 
uöt32
 
¥ovidîId
;

1855 
uöt32
 
issuîEvítId
;

1856 
uöt32
 
blockPîiodSèπTime
;

1857 
uöt24
 
blockPîiodDurInMös
;

1858 
uöt8
 
numPri˚TõrsAndBlock
;

1859 
uöt8
 
èriffTy≥
;

1860 
uöt8
 
blockPîiodC⁄åﬁ
;

1861 } 
	tz˛CCPublishBlockPîiod_t
;

1865 
uöt32
 
suµlõrId
;

1866 
uöt32
 
issuîT¨iffId
;

1867 
uöt32
 
°¨tTime
;

1868 
uöt8
 
èriffTy≥
;

1869 
UTF8Såög_t
 
èrifLabñ
;

1870 
uöt8
 
numPri˚TõrsInU£
;

1871 
uöt8
 
numBlockThªshﬁdsInU£
;

1872 
uöt8
 
unôOfMósuª
;

1873 
uöt16
 
cuºícy
;

1874 
uöt8
 
¥i˚TøûögDigô
;

1875 
uöt32
 
°™dögCh¨ge
;

1876 
uöt8
 
tõrBlockMode
;

1877 
uöt16
 
blockThªshﬁdMask
;

1878 
uöt32
 
BlockThªshﬁdMu…ùlõr
;

1879 
uöt32
 
BlockThªshﬁdDivis‹
;

1880 } 
	tz˛CCPublishT¨iffInf‹m©i⁄_t
;

1884 
uöt32
 
issuîT¨iffId
;

1885 
uöt8
 
comm™dIndex
;

1886 
uöt8
 
numEÀmíts
;

1887 
uöt32
 *
pTõrBlockPri˚
;

1888 } 
	tz˛CCPublishPri˚M©rix_t
;

1890 
uöt8
 
	tz˛BlockThªshﬁd_t
[6];

1894 
uöt32
 
issuîT¨iffId
;

1895 
uöt8
 
comm™dIndex
;

1896 
uöt8
 
numEÀmíts
;

1897 
z˛BlockThªshﬁd_t
 *
pTõrBlockThªshﬁd
;

1898 } 
	tz˛CCPublishBlockThªshﬁds_t
;

1902 
uöt32
 
issuîEvítId
;

1903 
uöt32
 
°¨tTime
;

1904 
uöt32
 
c⁄vîsi⁄Fa˘‹
;

1905 
uöt8
 
åaûögDigô
;

1906 } 
	tz˛CCPublishC⁄vîsi⁄Fa˘‹_t
;

1910 
uöt32
 
issuîEvítId
;

1911 
uöt32
 
°¨tTime
;

1912 
uöt32
 
ˇl‹ificVÆue
;

1913 
uöt8
 
ˇl‹ificVÆueUnô
;

1914 
uöt8
 
åaûögDigô
;

1915 } 
	tz˛CCPublishCÆ‹ificVÆue_t
;

1919 
uöt32
 
issuîEvítId
;

1920 
uöt32
 
°¨tTime
;

1921 
uöt8
 
èriffTy≥
;

1922 
uöt32
 
CO2VÆue
;

1923 
uöt8
 
CO2VÆueUnô
;

1924 
uöt8
 
åaûögDigô
;

1925 } 
	tz˛CCPublishCO2VÆue_t
;

1929 
uöt32
 
issuîEvítId
;

1930 
uöt32
 
°¨tTime
;

1931 
uöt16
 
duøti⁄InMöuãs
;

1932 
uöt8
 
èriffTy≥
;

1933 
uöt8
 
CPPPri˚Tõr
;

1934 
uöt8
 
CPPAuth
;

1935 } 
	tz˛CCPublishCPPEvít_t
;

1939 
uöt32
 
issuîEvítId
;

1940 
uöt32
 
°¨tTime
;

1941 
uöt32
 
duøti⁄
;

1943 
uöt8
 
èriffTy≥
;

1944 } 
	tz˛CCPublishBûlögPîiod_t
;

1948 
uöt32
 
issuîEvítId
;

1949 
uöt32
 
°¨tTime
;

1950 
uöt32
 
duøti⁄
;

1952 
uöt8
 
èriffTy≥
;

1953 
uöt32
 
c⁄sﬁid©edBûl
;

1954 
uöt16
 
cuºícy
;

1955 
uöt8
 
åaûögDigô
;

1956 } 
	tz˛CCPublishC⁄sﬁid©edBûl_t
;

1960 
uöt32
 
issuîEvítId
;

1961 
uöt32
 
∑ymítDueD©e
;

1962 
uöt32
 
¸edôPaymítOvîdueAmt
;

1963 
uöt8
 
¸edôPaymítSètus
;

1964 
uöt32
 
¸edôPaymít
;

1965 
uöt32
 
¸edôPaymítD©e
;

1966 
UTF8Såög_t
 
¸edôPaymítRef
;

1967 } 
	tz˛CCPublishCªdôPaymítInfo_t
;

1971 
uöt32
 
°¨tTime
;

1972 
uöt8
 
numEvíts
;

1973 
uöt8
 
èriffTy≥
;

1974 } 
	tz˛CCGëT¨iffInf‹m©i⁄_t
;

1978 
uöt32
 
°¨tTime
;

1979 
uöt8
 
numEvíts
;

1980 } 
	tz˛CCGëC⁄vîsi⁄Fa˘‹_t
;

1984 
uöt32
 
°¨tTime
;

1985 
uöt8
 
numEvíts
;

1986 } 
	tz˛CCGëCÆ‹ificVÆue_t
;

1990 
uöt32
 
°¨tTime
;

1991 
uöt8
 
numEvíts
;

1992 
uöt8
 
èriffTy≥
;

1993 } 
	tz˛CCGëCO2VÆue_t
;

1997 
uöt32
 
°¨tTime
;

1998 
uöt8
 
numEvíts
;

1999 
uöt8
 
èriffTy≥
;

2000 } 
	tz˛CCGëBûlögPîiod_t
;

2004 
uöt32
 
°¨tTime
;

2005 
uöt8
 
numEvíts
;

2006 
uöt8
 
èriffTy≥
;

2007 } 
	tz˛CCGëC⁄sﬁid©edBûl_t
;

2011 
uöt32
 
issuîEvítId
;

2012 
uöt8
 
CPPAuth
;

2013 } 
	tz˛CCCPPEvítRe•⁄£_t
;

2017 
uöt8
 
å™smissi⁄Mode
;

2018 
uöt8
 
imp‹èn˚
;

2019 
uöt8
 
pöRequúed
;

2020 
uöt8
 
ac˚±™˚Requúed
;

2021 
uöt8
 
c⁄fúm©i⁄Requúed
;

2022 } 
	tz˛MesßgeCål_t
;

2026 
uöt32
 
mesßgeId
;

2027 
z˛MesßgeCål_t
 
mesßgeCål
;

2028 
uöt32
 
°¨tTime
;

2029 
uöt16
 
duøti⁄InMöuãs
;

2030 
UTF8Såög_t
 
msgSåög
;

2031 } 
	tz˛CCDi•œyMesßge_t
;

2035 
uöt32
 
mesßgeId
;

2036 
z˛MesßgeCål_t
 
mesßgeCål
;

2037 } 
	tz˛CCC™˚lMesßge_t
;

2041 
uöt32
 
mesßgeId
;

2042 
uöt32
 
c⁄fúmTime
;

2043 
UTF8Såög_t
 
msgSåög
;

2044 } 
	tz˛CCMesßgeC⁄fúm©i⁄_t
;

2048 
uöt32
 
issuîEvít
;

2049 
uöt24
 
devi˚GroupCœss
;

2050 
uöt32
 
°¨tTime
;

2051 
uöt16
 
duøti⁄InMöuãs
;

2052 
uöt8
 
¸ôiˇlôyLevñ
;

2053 
uöt8
 
coﬁögTem≥øtuªOff£t
;

2054 
uöt8
 
hótögTem≥øtuªOff£t
;

2055 
uöt16
 
coﬁögTem≥øtuªSëPoöt
;

2056 
uöt16
 
hótögTem≥øtuªSëPoöt
;

2057 
öt8
 
avîageLﬂdAdju°mítPî˚¡age
;

2058 
uöt8
 
dutyCy˛e
;

2059 
uöt8
 
evítC⁄åﬁ
;

2060 } 
	tz˛CCLﬂdC⁄åﬁEvít_t
;

2064 
uöt32
 
issuîEvítID
;

2065 
uöt24
 
devi˚GroupCœss
;

2066 
uöt8
 
ˇn˚lC⁄åﬁ
;

2067 
uöt32
 
ef„˘iveTime
;

2068 } 
	tz˛CCC™˚lLﬂdC⁄åﬁEvít_t
;

2072 
uöt8
 
ˇn˚lC⁄åﬁ
;

2073 } 
	tz˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
;

2077 
uöt32
 
issuîEvítID
;

2078 
uöt32
 
evítSèπTime
;

2079 
uöt8
 
evítSètus
;

2080 
uöt8
 
¸ôiˇlôyLevñAµlõd
;

2081 
uöt16
 
coﬁögTem≥øtuªSëPoötAµlõd
;

2082 
uöt16
 
hótögTem≥øtuªSëPoötAµlõd
;

2083 
öt8
 
avîageLﬂdAdju°mít
;

2084 
uöt8
 
dutyCy˛eAµlõd
;

2085 
uöt8
 
evítC⁄åﬁ
;

2086 
uöt8
 
sig«tuªTy≥
;

2087 
uöt8
 
sig«tuª
[
SE_PROFILE_SIGNATURE_LENGTH
];

2088 } 
	tz˛CCRï‹tEvítSètus_t
;

2092 
uöt32
 
°¨tTime
;

2093 
uöt8
 
numEvíts
;

2094 } 
	tz˛CCGëScheduÀdEvít_t
;

2098 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_Suc˚ss
 = 0,

2099 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_UndeföedI¡îvÆ
,

2100 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_I¡îvÆNŸSuµ‹t
,

2101 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_InvÆidEndTime
,

2102 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_M‹ePîiodReque°ed
,

2103 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_NŸAvaûabÀ


2104 } 
	tz˛SE_Sim∂eMëî_GëProfûeR•_Sètus
;

2108 
uöt32
 
comm™dD©eTime
;

2109 
uöt8
 
‹igö©ögDevi˚
;

2110 
UTF8Såög_t
 
sôeId
;

2111 
UTF8Såög_t
 
mëîSîülNumbî
;

2112 } 
	tz˛CCSñAvaûEmîgícyCªdô_t
;

2116 #i‚de‡
SE_UK_EXT


2117 
uöt32
 
¥ovidîId
;

2118 
UTF8Såög_t
 
sôeId
;

2119 
UTF8Såög_t
 
mëîSîülNumbî
;

2121 
uöt32
 
suµlõrId
;

2122 
uöt32
 
evítId
;

2123 
UTF8Såög_t
 
sig«tuª
;

2125 
uöt32
 
ªque°D©eTime
;

2126 
uöt32
 
im∂emíèti⁄D©eTime
;

2127 
uöt8
 
¥›o£dSuµlySètus
;

2128 
uöt8
 
‹igIdSuµlyC⁄åﬁBôs
;

2129 } 
	tz˛CCCh™geSuµly_t
;

2133 #i‚de‡
SE_UK_EXT


2134 
uöt32
 
¥ovidîId
;

2136 
uöt32
 
suµlõrId
;

2137 
uöt32
 
issuîEvítId
;

2139 
uöt32
 
im∂emíèti⁄D©eTime
;

2140 
uöt8
 
suµlySètus
;

2141 } 
	tz˛CCSuµlySètusRe•⁄£_t
;

2145 
uöt32
 
cmdIssueTime
;

2146 
UTF8Såög_t
 
debtLabñ
;

2147 
uöt32
 
debtAmou¡
;

2148 
uöt8
 
debtRecovîyMëhod
;

2149 
uöt8
 
debtTy≥
;

2150 
uöt32
 
ªcovîySèπTime
;

2151 
uöt16
 
debtRecovîyCﬁÀ˘i⁄Time
;

2152 
uöt32
 
debtRecovîyFªquícy
;

2153 
uöt32
 
debtRecovîyAmt
;

2154 
uöt16
 
debtRecovîyBÆ™˚P˘
;

2155 
uöt8
 
debtRecovîyMaxMis£d
;

2156 
UTF8Såög_t
 
sig«tuª
;

2157 } 
	tz˛CCCh™geDebt_t
;

2161 
uöt32
 
cmdIssueTime
;

2162 
uöt32
 
emîgícyCªdôLimô
;

2163 
uöt32
 
emîgícyCªdôThªshﬁd
;

2164 } 
	tz˛CCEmîgícyCªdôSëup_t
;

2168 
uöt8
 
‹igö©ögDevi˚
;

2169 
UTF8Såög_t
 
t›upCode
;

2170 } 
	tz˛CCC⁄sumîT›up_t
;

2174 
uöt32
 
cmdIssueTime
;

2175 
uöt8
 
¸edôAdju°mítTy≥
;

2176 
uöt8
 
¸edôAdju°mítVÆue
[6];

2177 
UTF8Såög_t
 
sig«tuª
;

2178 } 
	tz˛CCCªdôAdju°mít_t
;

2182 
uöt32
 
suµlõrId
;

2183 
uöt32
 
modeEvítId
;

2184 
uöt32
 
im∂emíèti⁄D©e
;

2185 
uöt8
 
¥›o£dPaymítC⁄åﬁ
;

2186 
uöt32
 
cutOffVÆue
;

2187 
UTF8Såög_t
 
sig«tuª
;

2188 } 
	tz˛CCCh™gePaymítMode_t
;

2192 
uöt32
 
°¨tTime
;

2193 
uöt8
 
numbîOfS«pshŸs
;

2194 
uöt16
 
¢≠shŸCau£
;

2195 } 
	tz˛CCGëPª∑yS«pshŸ_t
;

2199 
uöt8
 
numbîOfDebt
;

2200 
uöt8
 
debtTy≥
;

2201 } 
	tz˛CCGëDebtRïaymítLog_t
;

2205 
uöt32
 
ty≥1DebtRemaöög
;

2206 
uöt32
 
ty≥2DebtRemaöög
;

2207 
uöt32
 
ty≥3DebtRemaöög
;

2208 
uöt32
 
emîgícyCªdôRemaöög
;

2209 
uöt32
 
¸edôRemaöög
;

2210 } 
	tz˛CCDebôCªdôS«pshŸPaylﬂd_t
;

2214 
uöt32
 
evítIssuîId
;

2215 
uöt32
 
¢≠shŸTime
;

2216 
uöt8
 
comm™dIndex
;

2217 
uöt16
 
¢≠shŸCau£
;

2218 
uöt8
 
¢≠shŸPaylﬂdTy≥
;

2219 
z˛CCDebôCªdôS«pshŸPaylﬂd_t
 
∑ylﬂd
;

2221 } 
	tz˛CCGëPª∑yS«pshŸRe•⁄£_t
;

2225 
uöt8
 
‰õndlyCªdô
;

2226 
uöt32
 
‰õndlyCªdôCÆíd¨
;

2227 
uöt32
 
emîgícyCªdôLimô
;

2228 
uöt32
 
cmîgícyCªdôThªshﬁd
;

2229 } 
	tz˛CCCh™gePaymítModeRe•⁄£_t
;

2233 
uöt8
 
ªsu…Ty≥
;

2234 
uöt32
 
t›upVÆue
;

2235 
uöt8
 
sour˚ofT›up
;

2236 
uöt32
 
¸edôRemaöög
;

2237 } 
	tz˛CCC⁄sumîT›upRe•⁄£_t
;

2241 
uöt8
 
cmdIndex
;

2242 
uöt8
 
tŸÆCmds
;

2243 
uöt8
 
numCodes
;

2244 
UTF8Såög_t
 *
pPaylﬂd
;

2245 } 
	tz˛CCPublishT›upLog_t
;

2249 
uöt32
 
cﬁÀ˘i⁄Time
;

2250 
uöt32
 
amou¡CﬁÀ˘ed
;

2251 
uöt8
 
debtTy≥
;

2252 
uöt32
 
out°™dögDebt
;

2253 } 
	tz˛CCDebtPaylﬂd_t
;

2257 
uöt8
 
cmdIndex
;

2258 
uöt8
 
tŸÆCmds
;

2259 
uöt8
 
numDebts
;

2260 
z˛CCDebtPaylﬂd_t
 *
pPaylﬂd
;

2261 } 
	tz˛CCPublishDebtLog_t
;

2265 
uöt8
 
¥ŸocﬁId
;

2266 
uöt16
 
m™uÁ˘uªrCode
;

2267 
boﬁ
 
ÊowC⁄åﬁSuµ‹t
;

2268 
uöt16
 
maxInTøns„rSize
;

2269 } 
	tz˛CCReque°Tu¬ñ_t
;

2273 
uöt16
 
tu¬ñId
;

2274 
uöt8
 
tu¬ñSètus
;

2275 
uöt16
 
maxInTøns„rSize
;

2276 } 
	tz˛CCReqTu¬ñR•_t
;

2280 
uöt16
 
tu¬ñId
;

2281 } 
	tz˛CCClo£Tu¬ñ_t
;

2285 
uöt16
 
tu¬ñId
;

2286 
uöt8
 *
d©a
;

2287 } 
	tz˛CCTøns„rD©a_t
;

2291 
uöt16
 
tu¬ñId
;

2292 
uöt8
 
å™s„rD©aSètus
;

2293 } 
	tz˛CCTøns„rD©aEº‹_t
;

2297 
uöt16
 
tu¬ñId
;

2298 
uöt16
 
numbîOfByãsLe·
;

2299 } 
	tz˛CCAckTøns„rD©a_t
;

2303 
uöt16
 
tu¬ñId
;

2304 
uöt16
 
numbîOfO˘ësLe·
;

2305 } 
	tz˛CCRódyD©a_t
;

2309 
uöt8
 
¥ŸocﬁOff£t
;

2310 } 
	tz˛CCGëSuµTu¬PrŸ_t
;

2314 
uöt16
 
m™uÁ˘uªrCode
;

2315 
uöt8
 
¥ŸocﬁId
;

2316 } 
	tz˛CCPrŸocﬁPaylﬂd_t
;

2320 
uöt8
 
¥ŸocﬁLi°Comp
;

2321 
uöt8
 
¥ŸocﬁCou¡
;

2322 
z˛CCPrŸocﬁPaylﬂd_t
 
¥Ÿocﬁ
[];

2324 } 
	tz˛CCSuµTu¬PrŸR•_t
;

2328 
uöt16
 
tu¬ñId
;

2329 } 
	tz˛CCTu¬ñClosuªNŸifiˇti⁄_t
;

2333 
uöt32
 
issuîCÆíd¨Id
;

2334 
uöt32
 
°¨tTime
;

2335 
uöt8
 
ˇÀnd¨Ty≥
;

2336 
uöt8
 
ˇÀnd¨TimeRef
;

2337 
UTF8Såög_t
 
ˇÀnd¨Name
;

2338 
uöt8
 
numOfSós⁄s
;

2339 
uöt8
 
numOfWìkProfûes
;

2340 
uöt8
 
numOfDayProfûes
;

2341 } 
	tz˛CCPublishCÆíd¨_t
;

2345 
uöt16
 
°¨tTime
;

2346 
uöt8
 
a˘ivePri˚Tõr
;

2347 } 
	tz˛CCR©eE¡ry_t
;

2351 
uöt16
 
°¨tTime
;

2352 
uöt8
 
‰õndCªdôE«bÀ
;

2353 } 
	tz˛CCFrõndlyCªdôE¡ry_t
;

2357 
uöt32
 
issuîCÆíd¨Id
;

2358 
uöt8
 
dayId
;

2359 
uöt8
 
tŸÆNumSchedE¡
;

2360 
uöt8
 
comm™dIndex
;

2361 
uöt8
 
numTøns„rE¡rõs
;

2362 *
pScheduÀE¡rõs
;

2363 } 
	tz˛CCPublishDayProfûe_t
;

2367 
uöt32
 
issuîCÆíd¨Id
;

2368 
uöt8
 
wìkId
;

2369 
uöt8
 
dayIdRefM⁄day
;

2370 
uöt8
 
dayIdRefTue°day
;

2371 
uöt8
 
dayIdRefWed√sday
;

2372 
uöt8
 
dayIdRefThursday
;

2373 
uöt8
 
dayIdRefFriday
;

2374 
uöt8
 
dayIdRefS©urday
;

2375 
uöt8
 
dayIdRefSunday
;

2376 } 
	tz˛CCPublishWìkProfûe_t
;

2380 
uöt32
 
£as⁄SèπD©e
;

2381 
uöt8
 
wìkIdRef
;

2382 } 
	tz˛CCSós⁄E¡ry_t
;

2386 
uöt32
 
issuîCÆíd¨Id
;

2387 
uöt8
 
comm™dIndex
;

2388 
uöt8
 
numTøns„rE¡rõs
;

2389 
z˛CCSós⁄E¡ry_t
 *
pSós⁄E¡ry
;

2390 } 
	tz˛CCPublishSós⁄s_t
;

2394 
uöt32
 
•ecülDayD©e
;

2395 
uöt8
 
dayIdRef
;

2396 } 
	tz˛CCS≥cülDayE¡ry_t
;

2400 
uöt32
 
issuîEvítId
;

2401 
uöt32
 
°¨tTime
;

2402 
uöt8
 
ˇÀnd¨Ty≥
;

2403 
uöt8
 
tŸÆNumS≥cülDays
;

2404 
uöt8
 
comm™dIndex
;

2405 
uöt8
 
numTøns„rE¡rõs
;

2406 
z˛CCS≥cülDayE¡ry_t
 *
pS≥cülDayE¡ry
;

2407 } 
	tz˛CCPublishS≥cülDays_t
;

2411 
uöt32
 
°¨tTime
;

2412 
uöt8
 
numOfCÆíd¨s
;

2413 
uöt8
 
ˇÀnd¨Ty≥
;

2414 } 
	tz˛CCGëCÆíd¨_t
;

2418 
uöt32
 
issuîCÆíd¨Id
;

2419 } 
	tz˛CCGëDayProfûes_t
;

2423 
uöt32
 
issuîCÆíd¨Id
;

2424 } 
	tz˛CCGëWìkProfûes_t
;

2428 
uöt32
 
issuîCÆíd¨Id
;

2429 } 
	tz˛CCGëSós⁄s_t
;

2433 
uöt32
 
°¨tTime
;

2434 
uöt8
 
numOfEvíts
;

2435 
uöt8
 
ˇÀnd¨Ty≥
;

2436 } 
	tz˛CCGëS≥cülDays_t
;

2440 
uöt8
 
∑ssw‹dLevñ
;

2441 } 
	tz˛CCGëPassw‹d_t
;

2445 
uöt32
 
suµlõrId
;

2446 
uöt32
 
evítId
;

2447 
uöt8
 
èriffTy≥
;

2448 
uöt32
 
im∂emíèti⁄D©eTime
;

2449 
uöt32
 
¥›TíícyCh™geCål
;

2450 
UTF8Såög_t
 
sig«tuª
;

2451 } 
	tz˛CCPublishCh™geTí™cy_t
;

2455 
uöt32
 
suµlõrId
;

2456 
uöt32
 
evítId
;

2457 
uöt8
 
èriffTy≥
;

2458 
uöt32
 
¥›SuµlõrId
;

2459 
uöt32
 
suµIdIm∂emD©eTime
;

2460 
uöt32
 
suµlõrCh™geCål
;

2461 
UTF8Såög_t
 
suµlõrIdName
;

2462 
UTF8Såög_t
 
sig«tuª
;

2463 } 
	tz˛CCPublishCh™geSuµlõr_t
;

2467 
uöt8
 
∑ssw‹dLevñ
;

2468 
UTF8Såög_t
 
∑ssw‹d
;

2469 } 
	tz˛CCCh™gePassw‹d_t
;

2473 
uöt8
 
¥›SuµlySètus
;

2474 } 
	tz˛CCLoˇlCh™geSuµly_t
;

2479 (*
z˛SE_Sim∂eMëî_GëProfûeCmd_t
)–
	tz˛CCGëProfûeCmd_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2483 (*
z˛SE_Sim∂eMëî_GëProfûeR•_t
)–
	tz˛CCGëProfûeR•_t
 *
	tpR•
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2488 (*
z˛SE_Sim∂eMëî_ReqMúr‹Cmd_t
)–
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2491 (*
z˛SE_Sim∂eMëî_ReqMúr‹R•_t
)–
	tz˛CCReqMúr‹R•_t
 *
	tpR•
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2497 (*
z˛SE_Sim∂eMëî_Múr‹RemCmd_t
)–
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2500 (*
z˛SE_Sim∂eMëî_Múr‹RemR•_t
)–
	tz˛CCMúr‹RemR•_t
 *
	tpR•
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2503 (*
z˛SE_Sim∂eMëî_ReqFa°PﬁlModeCmd_t
)–
	tz˛CCReqFa°PﬁlModeCmd_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2506 (*
z˛SE_Sim∂eMëî_ReqFa°PﬁlModeR•_t
)–
	tz˛CCReqFa°PﬁlModeR•_t
 *
	tpR•
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2509 (*
z˛SE_Sim∂eMëî_GëS«pshŸCmd_t
)–
	tz˛CCReqGëS«pshŸCmd_t
 *
	tpR•
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2512 (*
z˛SE_Sim∂eMëî_GëS«pshŸR•_t
)–
	tz˛CCReqGëS«pshŸR•_t
 *
	tpR•
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2515 (*
z˛SE_Sim∂eMëî_TakeS«pshŸCmd_t
)–
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2518 (*
z˛SE_Sim∂eMëî_Múr‹Rï‹tAârR•_t
)–
	tz˛CCReqMúr‹Rï‹tAârR•_t
 *
	tpR•
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2523 (*
z˛SE_Pricög_GëCuª¡Pri˚_t
)–
	tz˛CCGëCuºítPri˚_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2528 (*
z˛SE_Pricög_GëScheduÀdPri˚_t
)–
	tz˛CCGëScheduÀdPri˚_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2533 (*
z˛SE_Pricög_PublishPri˚_t
)–
	tz˛CCPublishPri˚_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2537 (*
z˛SE_Pricög_Pri˚AcknowÀdgemít_t
)–
	tz˛CCPri˚AcknowÀdgemít_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2542 (*
z˛SE_Pricög_GëBlockPîiod_t
)–
	tz˛CCGëBlockPîiod_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2546 (*
z˛SE_Pricög_PublishBlockPîiod_t
)–
	tz˛CCPublishBlockPîiod_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2550 (*
z˛SE_Mesßge_Di•œyMesßge_t
)–
	tz˛CCDi•œyMesßge_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2554 (*
z˛SE_Mesßge_C™˚lMesßge_t
)–
	tz˛CCC™˚lMesßge_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2559 (*
z˛SE_Mesßge_GëLa°Mesßge_t
)–
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2563 (*
z˛SE_Mesßge_MesßgeC⁄fúm©i⁄_t
)–
	tz˛CCMesßgeC⁄fúm©i⁄_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2567 (*
z˛SE_LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít_t
)–
	tz˛CCLﬂdC⁄åﬁEvít_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t°©us
, uöt8 
	t£qNum
 );

2571 (*
z˛SE_LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít_t
)–
	tz˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
);

2575 (*
z˛SE_LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts_t
)–
	tz˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2579 (*
z˛SE_LﬂdC⁄åﬁ_Rï‹tEvítSètus_t
)–
	tz˛CCRï‹tEvítSètus_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
);

2583 (*
z˛SE_LﬂdC⁄åﬁ_GëScheduÀdEvít_t
)–
	tz˛CCGëScheduÀdEvít_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
);

2586 (*
z˛SE_Pª∑ymít_SñAvaûEmîgícyCªdô_t
)–
	tz˛CCSñAvaûEmîgícyCªdô_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2589 (*
z˛SE_Pª∑ymít_Ch™geSuµly_t
)–
	tz˛CCCh™geSuµly_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2592 (*
z˛SE_Pª∑ymít_SuµlySètusRe•⁄£_t
)–
	tz˛CCSuµlySètusRe•⁄£_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2595 (*
z˛SE_Pricög_PublishT¨iffInf‹m©i⁄_t
)–
	tz˛CCPublishT¨iffInf‹m©i⁄_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2598 (*
z˛SE_Pricög_PublishPri˚M©rix_t
)–
	tz˛CCPublishPri˚M©rix_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2601 (*
z˛SE_Pricög_PublishBlockThªshﬁds_t
)–
	tz˛CCPublishBlockThªshﬁds_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2604 (*
z˛SE_Pricög_PublishC⁄vîsi⁄Fa˘‹_t
)–
	tz˛CCPublishC⁄vîsi⁄Fa˘‹_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2607 (*
z˛SE_Pricög_PublishCÆ‹ificVÆue_t
)–
	tz˛CCPublishCÆ‹ificVÆue_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2610 (*
z˛SE_Pricög_PublishCO2VÆue_t
)–
	tz˛CCPublishCO2VÆue_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2613 (*
z˛SE_Pricög_PublishCPPEvít_t
)–
	tz˛CCPublishCPPEvít_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2616 (*
z˛SE_Pricög_PublishBûlögPîiod_t
)–
	tz˛CCPublishBûlögPîiod_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2619 (*
z˛SE_Pricög_PublishC⁄sﬁid©edBûl_t
)–
	tz˛CCPublishC⁄sﬁid©edBûl_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2622 (*
z˛SE_Pricög_PublishCªdôPaymítInfo_t
)–
	tz˛CCPublishCªdôPaymítInfo_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2625 (*
z˛SE_Pricög_GëT¨iffInf‹m©i⁄_t
)–
	tz˛CCGëT¨iffInf‹m©i⁄_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2628 (*
z˛SE_Pricög_GëPri˚M©rix_t
)–
	tuöt32
 
	tissuîT¨iffId
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2631 (*
z˛SE_Pricög_GëBlockThªshﬁds_t
)–
	tuöt32
 
	tissuîT¨iffId
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2634 (*
z˛SE_Pricög_GëC⁄vîsi⁄Fa˘‹_t
)–
	tz˛CCGëC⁄vîsi⁄Fa˘‹_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2637 (*
z˛SE_Pricög_GëCÆ‹ificVÆue_t
)–
	tz˛CCGëCÆ‹ificVÆue_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2640 (*
z˛SE_Pricög_GëCO2VÆue_t
)–
	tz˛CCGëCO2VÆue_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2643 (*
z˛SE_Pricög_GëBûlögPîiod_t
)–
	tz˛CCGëBûlögPîiod_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2646 (*
z˛SE_Pricög_GëC⁄sﬁid©edBûl_t
)–
	tz˛CCGëC⁄sﬁid©edBûl_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2649 (*
z˛SE_Pricög_CPPEvítRe•⁄£_t
)–
	tz˛CCCPPEvítRe•⁄£_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2652 (*
z˛SE_Pª∑ymít_Ch™geDebt_t
)–
	tz˛CCCh™geDebt_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2655 (*
z˛SE_Pª∑ymít_EmîgícyCªdôSëup_t
)–
	tz˛CCEmîgícyCªdôSëup_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2658 (*
z˛SE_Pª∑ymít_C⁄sumîT›up_t
)–
	tz˛CCC⁄sumîT›up_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2661 (*
z˛SE_Pª∑ymít_CªdôAdju°mít_t
)–
	tz˛CCCªdôAdju°mít_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2664 (*
z˛SE_Pª∑ymít_Ch™gePaymítMode_t
)–
	tz˛CCCh™gePaymítMode_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2667 (*
z˛SE_Pª∑ymít_GëPª∑yS«pshŸ_t
)–
	tz˛CCGëPª∑yS«pshŸ_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2670 (*
z˛SE_Pª∑ymít_GëT›upLog_t
)–
	tuöt8
 
	tnumEvíts
, 
	tafAddrTy≥_t
 *
	t§cAddr
, uöt8 
	t£qNum
 ) ;

2673 (*
z˛SE_Pª∑ymít_SëLowCªdôW¨nögLevñ_t
)–
	tuöt8
 
	tnumEvíts
, 
	tafAddrTy≥_t
 *
	t§cAddr
, uöt8 
	t£qNum
 ) ;

2676 (*
z˛SE_Pª∑ymít_GëDebtRïaymítLog_t
)–
	tz˛CCGëDebtRïaymítLog_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2679 (*
z˛SE_Pª∑ymít_GëPª∑yS«pshŸRe•⁄£_t
)–
	tz˛CCGëPª∑yS«pshŸRe•⁄£_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2682 (*
z˛SE_Pª∑ymít_Ch™gePaymítModeRe•⁄£_t
)–
	tz˛CCCh™gePaymítModeRe•⁄£_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2685 (*
z˛SE_Pª∑ymít_C⁄sumîT›upRe•⁄£_t
)–
	tz˛CCC⁄sumîT›upRe•⁄£_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2688 (*
z˛SE_Pª∑ymít_GëComm™ds_t
)–
	tuöt8
 
	t¥ïayNŸifiˇti⁄Fœgs
, 
	tafAddrTy≥_t
 *
	t§cAddr
, uöt8 
	t£qNum
 ) ;

2691 (*
z˛SE_Pª∑ymít_PublishT›upLog_t
)–
	tz˛CCPublishT›upLog_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2694 (*
z˛SE_Pª∑ymít_PublishDebtLog_t
)–
	tz˛CCPublishDebtLog_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

2697 (*
z˛SE_Tu¬ñög_Reque°Tu¬ñ_t
Ë–
	tz˛CCReque°Tu¬ñ_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2700 (*
z˛SE_Tu¬ñög_ReqTu¬ñR•_t
)–
	tz˛CCReqTu¬ñR•_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2703 (*
z˛SE_Tu¬ñög_Clo£Tu¬ñ_t
Ë–
	tz˛CCClo£Tu¬ñ_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2706 (*
z˛SE_Tu¬ñög_Tøns„rD©a_t
Ë–
	tz˛CCTøns„rD©a_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	tcmdId
, 
	tuöt16
 
	td©aLí
, uöt8 
	t£qNum
 );

2709 (*
z˛SE_Tu¬ñög_Tøns„rD©aEº‹_t
Ë–
	tz˛CCTøns„rD©aEº‹_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2712 (*
z˛SE_Tu¬ñög_AckTøns„rD©a_t
Ë–
	tz˛CCAckTøns„rD©a_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	tcmdId
, uöt8 
	t£qNum
 );

2715 (*
z˛SE_Tu¬ñög_RódyD©a_t
Ë–
	tz˛CCRódyD©a_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	tcmdId
, uöt8 
	t£qNum
 );

2718 (*
z˛SE_Tu¬ñög_GëSuµTu¬ñPrŸ_t
Ë–
	tz˛CCGëSuµTu¬PrŸ_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2721 (*
z˛SE_Tu¬ñög_SuµTu¬ñPrŸR•_t
Ë–
	tz˛CCSuµTu¬PrŸR•_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2724 (*
z˛SE_Tu¬ñög_Tu¬ñClosuªNŸifiˇti⁄_t
Ë–
	tz˛CCTu¬ñClosuªNŸifiˇti⁄_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2727 (*
z˛SE_TOU_PublishCÆíd¨_t
Ë–
	tz˛CCPublishCÆíd¨_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2730 (*
z˛SE_TOU_PublishDayProfûe_t
Ë–
	tz˛CCPublishDayProfûe_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2733 (*
z˛SE_TOU_PublishWìkProfûe_t
Ë–
	tz˛CCPublishWìkProfûe_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2736 (*
z˛SE_TOU_PublishSós⁄s_t
Ë–
	tz˛CCPublishSós⁄s_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2739 (*
z˛SE_TOU_PublishS≥cülDays_t
Ë–
	tz˛CCPublishS≥cülDays_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2742 (*
z˛SE_TOU_GëCÆíd¨_t
Ë–
	tz˛CCGëCÆíd¨_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2745 (*
z˛SE_TOU_GëDayProfûe_t
Ë–
	tz˛CCGëDayProfûes_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2748 (*
z˛SE_TOU_GëWìkProfûes_t
Ë–
	tz˛CCGëWìkProfûes_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2751 (*
z˛SE_TOU_GëSós⁄s_t
Ë–
	tz˛CCGëSós⁄s_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2754 (*
z˛SE_TOU_GëS≥cülDays_t
Ë–
	tz˛CCGëS≥cülDays_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2757 (*
z˛SE_Devi˚Mgmt_GëCh™geTí™cy_t
Ë–
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2760 (*
z˛SE_Devi˚Mgmt_GëCh™geSuµlõr_t
Ë–
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2763 (*
z˛SE_Devi˚Mgmt_GëCh™geSuµly_t
Ë–
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2766 (*
z˛SE_Devi˚Mgmt_SuµlySètusRe•⁄£_t
Ë–
	tz˛CCSuµlySètusRe•⁄£_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2769 (*
z˛SE_Devi˚Mgmt_GëPassw‹d_t
Ë–
	tz˛CCGëPassw‹d_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2772 (*
z˛SE_Devi˚Mgmt_PublishCh™geTí™cy_t
Ë–
	tz˛CCPublishCh™geTí™cy_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2775 (*
z˛SE_Devi˚Mgmt_PublishCh™geSuµlõr_t
Ë–
	tz˛CCPublishCh™geSuµlõr_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2778 (*
z˛SE_Devi˚Mgmt_Ch™geSuµly_t
Ë–
	tz˛CCCh™geSuµly_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2781 (*
z˛SE_Devi˚Mgmt_Ch™gePassw‹d_t
Ë–
	tz˛CCCh™gePassw‹d_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2784 (*
z˛SE_Devi˚Mgmt_LoˇlCh™geSuµly_t
Ë–
	tz˛CCLoˇlCh™geSuµly_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

2790 
z˛SE_Pricög_PublishPri˚_t
 
p‚Pricög_PublishPri˚
;

2791 
z˛SE_Pricög_PublishBlockPîiod_t
 
p‚Pricög_PublishBlockPîiod
;

2792 #ifde‡
SE_UK_EXT


2793 
z˛SE_Pricög_PublishT¨iffInf‹m©i⁄_t
 
p‚Pricög_PublishT¨iffInf‹m©i⁄
;

2794 
z˛SE_Pricög_PublishPri˚M©rix_t
 
p‚Pricög_PublishPri˚M©rix
;

2795 
z˛SE_Pricög_PublishBlockThªshﬁds_t
 
p‚Pricög_PublishBlockThªshﬁds
;

2796 
z˛SE_Pricög_PublishC⁄vîsi⁄Fa˘‹_t
 
p‚Pricög_PublishC⁄vîsi⁄Fa˘‹
;

2797 
z˛SE_Pricög_PublishCÆ‹ificVÆue_t
 
p‚Pricög_PublishCÆ‹ificVÆue
;

2798 
z˛SE_Pricög_PublishCO2VÆue_t
 
p‚Pricög_PublishCO2VÆue
;

2799 
z˛SE_Pricög_PublishCPPEvít_t
 
p‚Pricög_PublishCPPEvít
;

2800 
z˛SE_Pricög_PublishBûlögPîiod_t
 
p‚Pricög_PublishBûlögPîiod
;

2801 
z˛SE_Pricög_PublishC⁄sﬁid©edBûl_t
 
p‚Pricög_PublishC⁄sﬁid©edBûl
;

2802 
z˛SE_Pricög_PublishCªdôPaymítInfo_t
 
p‚Pricög_PublishCªdôPaymítInfo
;

2804 
z˛SE_Pricög_GëCuª¡Pri˚_t
 
p‚Pricög_GëCuºítPri˚
;

2805 
z˛SE_Pricög_GëScheduÀdPri˚_t
 
p‚Pricög_GëScheduÀdPri˚
;

2806 
z˛SE_Pricög_Pri˚AcknowÀdgemít_t
 
p‚Pricög_Pri˚AcknowÀdgemít
;

2807 
z˛SE_Pricög_GëBlockPîiod_t
 
p‚Pricög_GëBlockPîiod
;

2808 #ifde‡
SE_UK_EXT


2809 
z˛SE_Pricög_GëT¨iffInf‹m©i⁄_t
 
p‚Pricög_GëT¨iffInf‹m©i⁄
;

2810 
z˛SE_Pricög_GëPri˚M©rix_t
 
p‚Pricög_GëPri˚M©rix
;

2811 
z˛SE_Pricög_GëBlockThªshﬁds_t
 
p‚Pricög_GëBlockThªshﬁds
;

2812 
z˛SE_Pricög_GëC⁄vîsi⁄Fa˘‹_t
 
p‚Pricög_GëC⁄vîsi⁄Fa˘‹
;

2813 
z˛SE_Pricög_GëCÆ‹ificVÆue_t
 
p‚Pricög_GëCÆ‹ificVÆue
;

2814 
z˛SE_Pricög_GëCO2VÆue_t
 
p‚Pricög_GëCO2VÆue
;

2815 
z˛SE_Pricög_GëBûlögPîiod_t
 
p‚Pricög_GëBûlögPîiod
;

2816 
z˛SE_Pricög_GëC⁄sﬁid©edBûl_t
 
p‚Pricög_GëC⁄sﬁid©edBûl
;

2817 
z˛SE_Pricög_CPPEvítRe•⁄£_t
 
p‚Pricög_CPPEvítRe•⁄£
;

2819 
z˛SE_LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít_t
 
p‚LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít
;

2820 
z˛SE_LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít_t
 
p‚LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít
;

2821 
z˛SE_LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts_t
 
p‚LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts
;

2822 
z˛SE_LﬂdC⁄åﬁ_Rï‹tEvítSètus_t
 
p‚LﬂdC⁄åﬁ_Rï‹tEvítSètus
;

2823 
z˛SE_LﬂdC⁄åﬁ_GëScheduÀdEvít_t
 
p‚LﬂdC⁄åﬁ_GëScheduÀdEvíts
;

2824 
z˛SE_Sim∂eMëî_GëProfûeR•_t
 
p‚Sim∂eMëî_GëProfûeR•
;

2825 
z˛SE_Sim∂eMëî_ReqMúr‹Cmd_t
 
p‚Sim∂eMëî_ReqMúr‹Cmd
;

2826 
z˛SE_Sim∂eMëî_Múr‹RemCmd_t
 
p‚Sim∂eMëî_Múr‹RemCmd
;

2827 
z˛SE_Sim∂eMëî_ReqFa°PﬁlModeR•_t
 
p‚Sim∂eMëî_ReqFa°PﬁlModeR•
;

2828 #ifde‡
SE_UK_EXT


2829 
z˛SE_Sim∂eMëî_GëS«pshŸR•_t
 
p‚Sim∂eMëî_GëS«pshŸR•
;

2831 
z˛SE_Sim∂eMëî_GëProfûeCmd_t
 
p‚Sim∂eMëî_GëProfûeCmd
;

2832 
z˛SE_Sim∂eMëî_ReqMúr‹R•_t
 
p‚Sim∂eMëî_ReqMúr‹R•
;

2833 
z˛SE_Sim∂eMëî_Múr‹RemR•_t
 
p‚Sim∂eMëî_Múr‹RemR•
;

2834 
z˛SE_Sim∂eMëî_ReqFa°PﬁlModeCmd_t
 
p‚Sim∂eMëî_ReqFa°PﬁlModeCmd
;

2835 #ifde‡
SE_UK_EXT


2836 
z˛SE_Sim∂eMëî_GëS«pshŸCmd_t
 
p‚Sim∂eMëî_GëS«pshŸCmd
;

2837 
z˛SE_Sim∂eMëî_TakeS«pshŸCmd_t
 
p‚Sim∂eMëî_TakeS«pshŸCmd
;

2838 
z˛SE_Sim∂eMëî_Múr‹Rï‹tAârR•_t
 
p‚Sim∂eMëî_Múr‹Rï‹tAârR•
;

2840 
z˛SE_Mesßge_Di•œyMesßge_t
 
p‚Mesßge_Di•œyMesßge
;

2841 
z˛SE_Mesßge_C™˚lMesßge_t
 
p‚Mesßge_C™˚lMesßge
;

2842 
z˛SE_Mesßge_GëLa°Mesßge_t
 
p‚Mesßge_GëLa°Mesßge
;

2843 
z˛SE_Mesßge_MesßgeC⁄fúm©i⁄_t
 
p‚Mesßge_MesßgeC⁄fúm©i⁄
;

2844 
z˛SE_Tu¬ñög_ReqTu¬ñR•_t
 
p‚Tu¬ñög_ReqTu¬ñR•
;

2845 
z˛SE_Tu¬ñög_Tøns„rD©a_t
 
p‚Tu¬ñög_Tøns„rD©a
;

2846 
z˛SE_Tu¬ñög_Tøns„rD©aEº‹_t
 
p‚Tu¬ñög_Tøns„rD©aEº‹
;

2847 
z˛SE_Tu¬ñög_AckTøns„rD©a_t
 
p‚Tu¬ñög_AckTøns„rD©a
;

2848 
z˛SE_Tu¬ñög_RódyD©a_t
 
p‚Tu¬ñög_RódyD©a
;

2849 #ifde‡
SE_UK_EXT


2850 
z˛SE_Tu¬ñög_SuµTu¬ñPrŸR•_t
 
p‚Tu¬ñög_SuµTu¬ñPrŸR•
;

2851 
z˛SE_Tu¬ñög_Tu¬ñClosuªNŸifiˇti⁄_t
 
p‚Tu¬ñög_Tu¬ñClosuªNŸifiˇti⁄
;

2853 
z˛SE_Tu¬ñög_Reque°Tu¬ñ_t
 
p‚Tu¬ñög_Reque°Tu¬ñ
;

2854 
z˛SE_Tu¬ñög_Clo£Tu¬ñ_t
 
p‚Tu¬ñög_Clo£Tu¬ñ
;

2855 #ifde‡
SE_UK_EXT


2856 
z˛SE_Tu¬ñög_GëSuµTu¬ñPrŸ_t
 
p‚Tu¬ñög_GëSuµTu¬ñPrŸ
;

2858 
z˛SE_Pª∑ymít_SuµlySètusRe•⁄£_t
 
p‚Pª∑ymít_SuµlySètusRe•⁄£
;

2859 #ifde‡
SE_UK_EXT


2860 
z˛SE_Pª∑ymít_GëPª∑yS«pshŸRe•⁄£_t
 
p‚Pª∑ymít_GëPª∑yS«pshŸRe•⁄£
;

2861 
z˛SE_Pª∑ymít_Ch™gePaymítModeRe•⁄£_t
 
p‚Pª∑ymít_Ch™gePaymítModeRe•⁄£
;

2862 
z˛SE_Pª∑ymít_C⁄sumîT›upRe•⁄£_t
 
p‚Pª∑ymít_C⁄sumîT›upRe•⁄£
;

2863 
z˛SE_Pª∑ymít_GëComm™ds_t
 
p‚Pª∑ymít_GëComm™ds
;

2864 
z˛SE_Pª∑ymít_PublishT›upLog_t
 
p‚Pª∑ymít_PublishT›upLog
;

2865 
z˛SE_Pª∑ymít_PublishDebtLog_t
 
p‚Pª∑ymít_PublishDebtLog
;

2867 
z˛SE_Pª∑ymít_SñAvaûEmîgícyCªdô_t
 
p‚Pª∑ymít_SñAvaûEmîgícyCªdô
;

2868 
z˛SE_Pª∑ymít_Ch™geSuµly_t
 
p‚Pª∑ymít_Ch™geSuµly
;

2869 #ifde‡
SE_UK_EXT


2870 
z˛SE_Pª∑ymít_Ch™geDebt_t
 
p‚Pª∑ymít_Ch™geDebt
;

2871 
z˛SE_Pª∑ymít_EmîgícyCªdôSëup_t
 
p‚Pª∑ymít_EmîgícyCªdôSëup
;

2872 
z˛SE_Pª∑ymít_C⁄sumîT›up_t
 
p‚Pª∑ymít_C⁄sumîT›up
;

2873 
z˛SE_Pª∑ymít_CªdôAdju°mít_t
 
p‚Pª∑ymít_CªdôAdju°mít
;

2874 
z˛SE_Pª∑ymít_Ch™gePaymítMode_t
 
p‚Pª∑ymít_Ch™gePaymítMode
;

2875 
z˛SE_Pª∑ymít_GëPª∑yS«pshŸ_t
 
p‚Pª∑ymít_GëPª∑yS«pshŸ
;

2876 
z˛SE_Pª∑ymít_GëT›upLog_t
 
p‚Pª∑ymít_GëT›upLog
;

2877 
z˛SE_Pª∑ymít_SëLowCªdôW¨nögLevñ_t
 
p‚Pª∑ymít_SëLowCªdôW¨nögLevñ
;

2878 
z˛SE_Pª∑ymít_GëDebtRïaymítLog_t
 
p‚Pª∑ymít_GëDebtRïaymítLog
;

2879 
z˛SE_TOU_PublishCÆíd¨_t
 
p‚Tou_PublishCÆíd¨
;

2880 
z˛SE_TOU_PublishDayProfûe_t
 
p‚Tou_PublishDayProfûe
;

2881 
z˛SE_TOU_PublishWìkProfûe_t
 
p‚Tou_PublishWìkProfûe
;

2882 
z˛SE_TOU_PublishSós⁄s_t
 
p‚Tou_PublishSós⁄s
;

2883 
z˛SE_TOU_PublishS≥cülDays_t
 
p‚Tou_PublishS≥cülDays
;

2884 
z˛SE_TOU_GëCÆíd¨_t
 
p‚Tou_GëCÆíd¨
;

2885 
z˛SE_TOU_GëDayProfûe_t
 
p‚Tou_GëDayProfûes
;

2886 
z˛SE_TOU_GëWìkProfûes_t
 
p‚Tou_GëWìkProfûes
;

2887 
z˛SE_TOU_GëSós⁄s_t
 
p‚Tou_GëSós⁄s
;

2888 
z˛SE_TOU_GëS≥cülDays_t
 
p‚Tou_GëS≥cülDays
;

2889 
z˛SE_Devi˚Mgmt_PublishCh™geTí™cy_t
 
p‚Devi˚Mgmt_PublishCh™geTí™cy
;

2890 
z˛SE_Devi˚Mgmt_PublishCh™geSuµlõr_t
 
p‚Devi˚Mgmt_PublishCh™geSuµlõr
;

2891 
z˛SE_Devi˚Mgmt_Ch™geSuµly_t
 
p‚Devi˚Mgmt_Ch™geSuµly
;

2892 
z˛SE_Devi˚Mgmt_Ch™gePassw‹d_t
 
p‚Devi˚Mgmt_Ch™gePassw‹d
;

2893 
z˛SE_Devi˚Mgmt_LoˇlCh™geSuµly_t
 
p‚Devi˚Mgmt_LoˇlCh™geSuµly
;

2894 
z˛SE_Devi˚Mgmt_GëCh™geTí™cy_t
 
p‚Devi˚Mgmt_GëCh™geTí™cy
;

2895 
z˛SE_Devi˚Mgmt_GëCh™geSuµlõr_t
 
p‚Devi˚Mgmt_GëCh™geSuµlõr
;

2896 
z˛SE_Devi˚Mgmt_GëCh™geSuµly_t
 
p‚Devi˚Mgmt_GëCh™geSuµly
;

2897 
z˛SE_Devi˚Mgmt_SuµlySètusRe•⁄£_t
 
p‚Devi˚Mgmt_SuµlySètusRe•⁄£
;

2898 
z˛SE_Devi˚Mgmt_GëPassw‹d_t
 
p‚Devi˚Mgmt_GëPassw‹d
;

2900 } 
	tz˛SE_AµCÆlbacks_t
;

2916 
ZSètus_t
 
z˛SE_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛SE_AµCÆlbacks_t
 *
ˇŒbacks
 );

2918 #ifde‡
ZCL_SIMPLE_METERING


2922 
ZSètus_t
 
z˛SE_Sim∂eMëîög_Síd_GëProfûeCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2923 
uöt8
 
ch™√l
, 
uöt32
 
ídTime
, uöt8 
numOfPîiods
,

2924 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

2928 
ZSètus_t
 
z˛SE_Sim∂eMëîög_Síd_GëProfûeR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2929 
uöt32
 
ídTime
, 
uöt8
 
r•Sètus
, uöt8 
¥ofûeI¡îvÆPîiod
,

2930 
uöt8
 
numOfPîiodDñivîed
, 
uöt24
 *
öãrvÆs
,

2931 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

2936 
ZSètus_t
 
z˛SE_Sim∂eMëîög_Síd_ReqMúr‹R•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2937 
uöt16
 
ídpoötId
,

2938 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 ) ;

2943 
ZSètus_t
 
z˛SE_Sim∂eMëîög_Síd_RemMúr‹R•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2944 
uöt16
 
ídpoötId
,

2945 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 ) ;

2950 
ZSètus_t
 
z˛SE_Sim∂eMëîög_Síd_ReqFa°PﬁlModeCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2951 
z˛CCReqFa°PﬁlModeCmd_t
 *
pCmd
,

2952 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 ) ;

2957 
ZSètus_t
 
z˛SE_Sim∂eMëîög_Síd_ReqFa°PﬁlModeR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2958 
z˛CCReqFa°PﬁlModeR•_t
 *
pCmd
,

2959 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 ) ;

2961 #ifde‡
SE_UK_EXT


2965 
ZSètus_t
 
z˛SE_Sim∂eMëîög_Síd_GëS«pshŸCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2966 
z˛CCReqGëS«pshŸCmd_t
 *
pCmd
,

2967 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

2972 
ZSètus_t
 
z˛SE_Sim∂eMëîög_Síd_GëS«pshŸR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2973 
z˛CCReqGëS«pshŸR•_t
 *
pCmd
,

2974 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

2979 
ZSètus_t
 
z˛SE_Sim∂eMëîög_Síd_TakeS«pshŸ
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2980 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

2985 
ZSètus_t
 
z˛SE_Sim∂eMëîög_Síd_Múr‹Rï‹tAârR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2986 
z˛CCReqMúr‹Rï‹tAârR•_t
 *
pCmd
,

2987 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

2991 #ifde‡
ZCL_PRICING


2996 
ZSètus_t
 
z˛SE_Pricög_Síd_PublishPri˚
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

2997 
z˛CCPublishPri˚_t
 *
pCmd
,

2998 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3000 
ZSètus_t
 
z˛SE_Pricög_Síd_GëScheduÀdPri˚
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3001 
z˛CCGëScheduÀdPri˚_t
 *
pCmd
,

3002 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3007 
ZSètus_t
 
z˛SE_Pricög_Síd_Pri˚AcknowÀdgemít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3008 
z˛CCPri˚AcknowÀdgemít_t
 *
pCmd
,

3009 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3013 
ZSètus_t
 
z˛SE_Pricög_Síd_GëBlockPîiod
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3014 
z˛CCGëBlockPîiod_t
 *
pCmd
,

3015 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3019 
ZSètus_t
 
z˛SE_Pricög_Síd_PublishBlockPîiod
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3020 
z˛CCPublishBlockPîiod_t
 *
pCmd
,

3021 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3023 #ifde‡
SE_UK_EXT


3027 
ZSètus_t
 
z˛SE_Pricög_Síd_PublishT¨iffInf‹m©i⁄
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3028 
z˛CCPublishT¨iffInf‹m©i⁄_t
 *
pCmd
,

3029 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3034 
ZSètus_t
 
z˛SE_Pricög_Síd_PublishPri˚M©rix
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3035 
z˛CCPublishPri˚M©rix_t
 *
pCmd
,

3036 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3041 
ZSètus_t
 
z˛SE_Pricög_Síd_PublishBlockThªshﬁds
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3042 
z˛CCPublishBlockThªshﬁds_t
 *
pCmd
,

3043 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3048 
ZSètus_t
 
z˛SE_Pricög_Síd_PublishC⁄vîsi⁄Fa˘‹
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3049 
z˛CCPublishC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

3050 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3055 
ZSètus_t
 
z˛SE_Pricög_Síd_PublishCÆ‹ificVÆue
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3056 
z˛CCPublishCÆ‹ificVÆue_t
 *
pCmd
,

3057 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3062 
ZSètus_t
 
z˛SE_Pricög_Síd_PublishCO2VÆue
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3063 
z˛CCPublishCO2VÆue_t
 *
pCmd
,

3064 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3069 
ZSètus_t
 
z˛SE_Pricög_Síd_PublishCPPEvít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3070 
z˛CCPublishCPPEvít_t
 *
pCmd
,

3071 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3076 
ZSètus_t
 
z˛SE_Pricög_Síd_PublishBûlögPîiod
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3077 
z˛CCPublishBûlögPîiod_t
 *
pCmd
,

3078 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3083 
ZSètus_t
 
z˛SE_Pricög_Síd_PublishC⁄sﬁid©edBûl
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3084 
z˛CCPublishC⁄sﬁid©edBûl_t
 *
pCmd
,

3085 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3090 
ZSètus_t
 
z˛SE_Pricög_Síd_PublishCªdôPaymítInfo
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3091 
z˛CCPublishCªdôPaymítInfo_t
 *
pCmd
,

3092 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3097 
ZSètus_t
 
z˛SE_Pricög_Síd_GëT¨iffInf‹m©i⁄
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3098 
z˛CCGëT¨iffInf‹m©i⁄_t
 *
pCmd
,

3099 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3104 
ZSètus_t
 
z˛SE_Pricög_Síd_GëPri˚M©rix
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3105 
uöt32
 
issuîId
,

3106 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3111 
ZSètus_t
 
z˛SE_Pricög_Síd_GëBlockThªshﬁds
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3112 
uöt32
 
issuîId
,

3113 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3118 
ZSètus_t
 
z˛SE_Pricög_Síd_GëC⁄vîsi⁄Fa˘‹
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3119 
z˛CCGëC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

3120 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3125 
ZSètus_t
 
z˛SE_Pricög_Síd_GëCÆ‹ificVÆue
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3126 
z˛CCGëCÆ‹ificVÆue_t
 *
pCmd
,

3127 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3132 
ZSètus_t
 
z˛SE_Pricög_Síd_GëCO2VÆue
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3133 
z˛CCGëCO2VÆue_t
 *
pCmd
,

3134 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3139 
ZSètus_t
 
z˛SE_Pricög_Síd_GëBûlögPîiod
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3140 
z˛CCGëBûlögPîiod_t
 *
pCmd
,

3141 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3146 
ZSètus_t
 
z˛SE_Pricög_Síd_GëC⁄sﬁid©edBûl
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3147 
z˛CCGëC⁄sﬁid©edBûl_t
 *
pCmd
,

3148 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3153 
ZSètus_t
 
z˛SE_Pricög_Síd_CPPEvítRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3154 
z˛CCCPPEvítRe•⁄£_t
 *
pCmd
,

3155 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3159 #ifde‡
ZCL_MESSAGE


3163 
ZSètus_t
 
z˛SE_Mesßge_Síd_Di•œyMesßge
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3164 
z˛CCDi•œyMesßge_t
 *
pCmd
,

3165 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3169 
ZSètus_t
 
z˛SE_Mesßge_Síd_C™˚lMesßge
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3170 
z˛CCC™˚lMesßge_t
 *
pCmd
,

3171 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3176 
ZSètus_t
 
z˛SE_Mesßge_Síd_MesßgeC⁄fúm©i⁄
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3177 
z˛CCMesßgeC⁄fúm©i⁄_t
 *
pCmd
,

3178 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3181 #ifde‡
ZCL_LOAD_CONTROL


3185 
ZSètus_t
 
z˛SE_LﬂdC⁄åﬁ_Síd_LﬂdC⁄åﬁEvít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3186 
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

3187 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3192 
ZSètus_t
 
z˛SE_LﬂdC⁄åﬁ_Síd_C™˚lLﬂdC⁄åﬁEvít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3193 
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

3194 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3199 
ZSètus_t
 
z˛SE_LﬂdC⁄åﬁ_Síd_Rï‹tEvítSètus
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3200 
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

3201 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3207 
ZSètus_t
 
z˛SE_LﬂdC⁄åﬁ_Síd_GëScheduÀdEvít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3208 
z˛CCGëScheduÀdEvít_t
 *
pCmd
,

3209 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3212 #ifde‡
ZCL_PREPAYMENT


3216 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_SñAvaûEmîgícyCªdô
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3217 
z˛CCSñAvaûEmîgícyCªdô_t
 *
pCmd
,

3218 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3220 #i‚de‡
SE_UK_EXT


3224 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_Ch™geSuµly
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3225 
z˛CCCh™geSuµly_t
 *
pCmd
,

3226 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3231 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_SuµlySètusRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3232 
z˛CCSuµlySètusRe•⁄£_t
 *
pCmd
,

3233 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3239 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_Ch™geDebt
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3240 
z˛CCCh™geDebt_t
 *
pCmd
,

3241 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3246 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_EmîgícyCªdôSëup
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3247 
z˛CCEmîgícyCªdôSëup_t
 *
pCmd
,

3248 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3253 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_C⁄sumîT›up
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3254 
z˛CCC⁄sumîT›up_t
 *
pCmd
,

3255 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3260 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_CªdôAdju°mít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3261 
z˛CCCªdôAdju°mít_t
 *
pCmd
,

3262 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3268 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_Ch™gePaymítMode
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3269 
z˛CCCh™gePaymítMode_t
 *
pCmd
,

3270 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3276 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_GëPª∑yS«pshŸ
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3277 
z˛CCGëPª∑yS«pshŸ_t
 *
pCmd
,

3278 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3283 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_GëT›upLog
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3284 
uöt8
 
numEvíts
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3289 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_SëLowCªdôW¨nögLevñ
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3290 
uöt8
 
w¨nögLevñ
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3295 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_GëDebtRïaymítLog
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3296 
z˛CCGëDebtRïaymítLog_t
 *
pCmd
,

3297 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3302 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_GëPª∑yS«pshŸRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3303 
z˛CCGëPª∑yS«pshŸRe•⁄£_t
 *
pCmd
,

3304 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3309 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_Ch™gePaymítModeRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3310 
z˛CCCh™gePaymítModeRe•⁄£_t
 *
pCmd
,

3311 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3317 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_C⁄sumîT›upRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3318 
z˛CCC⁄sumîT›upRe•⁄£_t
 *
pCmd
,

3319 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3324 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_GëComm™ds
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3325 
uöt8
 
nŸifiˇti⁄Fœgs
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3330 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_PublishT›upLog
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3331 
z˛CCPublishT›upLog_t
 *
pCmd
,

3332 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3337 
ZSètus_t
 
z˛SE_Pª∑ymít_Síd_PublishDebtLog
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3338 
z˛CCPublishDebtLog_t
 *
pCmd
,

3339 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3343 #ifde‡
ZCL_TUNNELING


3347 
ZSètus_t
 
z˛SE_Tu¬ñög_Síd_Reque°Tu¬ñ
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3348 
z˛CCReque°Tu¬ñ_t
 *
pCmd
,

3349 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3353 
ZSètus_t
 
z˛SE_Tu¬ñög_Síd_ReqTu¬ñR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3354 
z˛CCReqTu¬ñR•_t
 *
pCmd
,

3355 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3359 
ZSètus_t
 
z˛SE_Tu¬ñög_Síd_Clo£Tu¬ñ
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3360 
z˛CCClo£Tu¬ñ_t
 *
pCmd
,

3361 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3365 
ZSètus_t
 
z˛SE_Tu¬ñög_Síd_Tøns„rD©a
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3366 
z˛CCTøns„rD©a_t
 *
pCmd
, 
uöt8
 
cmdId
,

3367 
uöt16
 
d©aLí
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3371 
ZSètus_t
 
z˛SE_Tu¬ñög_Síd_Tøns„rD©aEº‹
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3372 
z˛CCTøns„rD©aEº‹_t
 *
pCmd
, 
uöt8
 
cmdId
,

3373 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3377 
ZSètus_t
 
z˛SE_Tu¬ñög_Síd_AckTøns„rD©a
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3378 
z˛CCAckTøns„rD©a_t
 *
pCmd
, 
uöt8
 
cmdId
,

3379 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3383 
ZSètus_t
 
z˛SE_Tu¬ñög_Síd_RódyD©a
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3384 
z˛CCRódyD©a_t
 *
pCmd
, 
uöt8
 
cmdId
,

3385 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3386 #ifde‡
SE_UK_EXT


3390 
ZSètus_t
 
z˛SE_Tu¬ñög_Síd_GëSuµTu¬ñPrŸ
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3391 
z˛CCGëSuµTu¬PrŸ_t
 *
pCmd
,

3392 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3396 
ZSètus_t
 
z˛SE_Tu¬ñög_Síd_SuµTu¬ñPrŸR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3397 
z˛CCSuµTu¬PrŸR•_t
 *
pCmd
,

3398 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3402 
ZSètus_t
 
z˛SE_Tu¬ñög_Síd_Tu¬ñClosuªNŸifiˇti⁄
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3403 
z˛CCTu¬ñClosuªNŸifiˇti⁄_t
 *
pCmd
,

3404 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3408 #ifde‡
ZCL_TOU


3409 #ifde‡
SE_UK_EXT


3413 
ZSètus_t
 
z˛SE_Tou_Síd_PublishCÆíd¨
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3414 
z˛CCPublishCÆíd¨_t
 *
pCmd
,

3415 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3419 
ZSètus_t
 
z˛SE_Tou_Síd_PublishDayProfûe
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3420 
z˛CCPublishDayProfûe_t
 *
pCmd
,

3421 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3425 
ZSètus_t
 
z˛SE_Tou_Síd_PublishWìkProfûe
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3426 
z˛CCPublishWìkProfûe_t
 *
pCmd
,

3427 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3431 
ZSètus_t
 
z˛SE_Tou_Síd_PublishSós⁄s
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3432 
z˛CCPublishSós⁄s_t
 *
pCmd
,

3433 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3437 
ZSètus_t
 
z˛SE_Tou_Síd_PublishS≥cülDays
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3438 
z˛CCPublishS≥cülDays_t
 *
pCmd
,

3439 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3443 
ZSètus_t
 
z˛SE_Tou_Síd_GëCÆíd¨
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3444 
z˛CCGëCÆíd¨_t
 *
pCmd
,

3445 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3449 
ZSètus_t
 
z˛SE_Tou_Síd_GëDayProfûes
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3450 
z˛CCGëDayProfûes_t
 *
pCmd
,

3451 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3455 
ZSètus_t
 
z˛SE_Tou_Síd_GëWìkProfûes
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3456 
z˛CCGëWìkProfûes_t
 *
pCmd
,

3457 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3461 
ZSètus_t
 
z˛SE_Tou_Síd_GëSós⁄s
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3462 
z˛CCGëSós⁄s_t
 *
pCmd
,

3463 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3467 
ZSètus_t
 
z˛SE_Tou_Síd_GëS≥cülDays
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3468 
z˛CCGëS≥cülDays_t
 *
pCmd
,

3469 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3473 #ifde‡
ZCL_DEVICE_MGMT


3474 #ifde‡
SE_UK_EXT


3478 
ZSètus_t
 
z˛SE_Devi˚Mgmt_Síd_GëCh™geTí™cy
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3479 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3483 
ZSètus_t
 
z˛SE_Devi˚Mgmt_Síd_GëCh™geSuµlõr
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3484 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3488 
ZSètus_t
 
z˛SE_Devi˚Mgmt_Síd_GëCh™geSuµly
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3489 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3493 
ZSètus_t
 
z˛SE_Devi˚Mgmt_Síd_SuµlySètusRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3494 
z˛CCSuµlySètusRe•⁄£_t
 *
pCmd
,

3495 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3499 
ZSètus_t
 
z˛SE_Devi˚Mgmt_Síd_GëPassw‹d
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3500 
z˛CCGëPassw‹d_t
 *
pCmd
,

3501 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3505 
ZSètus_t
 
z˛SE_Devi˚Mgmt_Síd_PublishCh™geTí™cy
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3506 
z˛CCPublishCh™geTí™cy_t
 *
pCmd
,

3507 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3511 
ZSètus_t
 
z˛SE_Devi˚Mgmt_Síd_PublishCh™geSuµlõr
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3512 
z˛CCPublishCh™geSuµlõr_t
 *
pCmd
,

3513 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3517 
ZSètus_t
 
z˛SE_Devi˚Mgmt_Síd_Ch™geSuµly
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3518 
z˛CCCh™geSuµly_t
 *
pCmd
,

3519 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3523 
ZSètus_t
 
z˛SE_Devi˚Mgmt_Síd_Ch™gePassw‹d
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3524 
z˛CCCh™gePassw‹d_t
 *
pCmd
,

3525 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3529 
ZSètus_t
 
z˛SE_Devi˚Mgmt_Síd_LoˇlCh™geSuµly
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

3530 
z˛CCLoˇlCh™geSuµly_t
 *
pCmd
,

3531 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

3535 #ifde‡
ZCL_PRICING


3539 
ZSètus_t
 
z˛SE_P¨£InCmd_PublishPri˚
–
z˛CCPublishPri˚_t
 *
pCmd
, 
uöt8
 *
buf
, uöt8 
Àn
 );

3544 
z˛SE_P¨£InCmd_PublishBlockPîiod
–
z˛CCPublishBlockPîiod_t
 *
pCmd
,

3545 
uöt8
 *
buf
, uöt8 
Àn
 );

3547 #ifde‡
SE_UK_EXT


3551 
z˛SE_P¨£InCmd_PublishT¨iffInf‹m©i⁄
–
z˛CCPublishT¨iffInf‹m©i⁄_t
 *
pCmd
,

3552 
uöt8
 *
buf
, uöt8 
Àn
 );

3557 
ZSètus_t
 
z˛SE_P¨£InCmd_PublishPri˚M©rix
–
z˛CCPublishPri˚M©rix_t
 *
pCmd
,

3558 
uöt8
 *
buf
, uöt8 
Àn
 );

3563 
ZSètus_t
 
z˛SE_P¨£InCmd_PublishBlockThªshﬁds
–
z˛CCPublishBlockThªshﬁds_t
 *
pCmd
,

3564 
uöt8
 *
buf
, uöt8 
Àn
 );

3569 
z˛SE_P¨£InCmd_PublishC⁄vîsi⁄Fa˘‹
–
z˛CCPublishC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

3570 
uöt8
 *
buf
, uöt8 
Àn
 );

3575 
z˛SE_P¨£InCmd_PublishCÆ‹ificVÆue
–
z˛CCPublishCÆ‹ificVÆue_t
 *
pCmd
,

3576 
uöt8
 *
buf
, uöt8 
Àn
 );

3581 
z˛SE_P¨£InCmd_PublishCO2VÆue
–
z˛CCPublishCO2VÆue_t
 *
pCmd
,

3582 
uöt8
 *
buf
, uöt8 
Àn
 );

3587 
z˛SE_P¨£InCmd_PublishCPPEvít
–
z˛CCPublishCPPEvít_t
 *
pCmd
,

3588 
uöt8
 *
buf
, uöt8 
Àn
 );

3593 
z˛SE_P¨£InCmd_PublishBûlögPîiod
–
z˛CCPublishBûlögPîiod_t
 *
pCmd
,

3594 
uöt8
 *
buf
, uöt8 
Àn
 );

3599 
z˛SE_P¨£InCmd_PublishC⁄sﬁid©edBûl
–
z˛CCPublishC⁄sﬁid©edBûl_t
 *
pCmd
,

3600 
uöt8
 *
buf
, uöt8 
Àn
 );

3605 
z˛SE_P¨£InCmd_PublishCªdôPaymítInfo
–
z˛CCPublishCªdôPaymítInfo_t
 *
pCmd
,

3606 
uöt8
 *
buf
, uöt8 
Àn
 );

3611 
z˛SE_P¨£InCmd_GëT¨iffInf‹m©i⁄
–
z˛CCGëT¨iffInf‹m©i⁄_t
 *
pCmd
,

3612 
uöt8
 *
buf
, uöt8 
Àn
 );

3617 
z˛SE_P¨£InCmd_GëC⁄vîsi⁄Fa˘‹
–
z˛CCGëC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

3618 
uöt8
 *
buf
, uöt8 
Àn
 );

3623 
z˛SE_P¨£InCmd_GëCÆ‹ificVÆue
–
z˛CCGëCÆ‹ificVÆue_t
 *
pCmd
,

3624 
uöt8
 *
buf
, uöt8 
Àn
 );

3629 
z˛SE_P¨£InCmd_GëCO2VÆue
–
z˛CCGëCO2VÆue_t
 *
pCmd
,

3630 
uöt8
 *
buf
, uöt8 
Àn
 );

3635 
z˛SE_P¨£InCmd_GëBûlögPîiod
–
z˛CCGëBûlögPîiod_t
 *
pCmd
,

3636 
uöt8
 *
buf
, uöt8 
Àn
 );

3641 
z˛SE_P¨£InCmd_GëC⁄sﬁid©edBûl
–
z˛CCGëC⁄sﬁid©edBûl_t
 *
pCmd
,

3642 
uöt8
 *
buf
, uöt8 
Àn
 );

3647 
z˛SE_P¨£InCmd_CPPEvítRe•⁄£
–
z˛CCCPPEvítRe•⁄£_t
 *
pCmd
,

3648 
uöt8
 *
buf
, uöt8 
Àn
 );

3653 #ifde‡
ZCL_MESSAGE


3657 
ZSètus_t
 
z˛SE_P¨£InCmd_Di•œyMesßge
–
z˛CCDi•œyMesßge_t
 *
pCmd
,

3658 
uöt8
 *
buf
, uöt8 
Àn
 );

3663 
z˛SE_P¨£InCmd_C™˚lMesßge
–
z˛CCC™˚lMesßge_t
 *
pCmd
,

3664 
uöt8
 *
buf
, uöt8 
Àn
 );

3669 
z˛SE_P¨£InCmd_MesßgeC⁄fúm©i⁄
–
z˛CCMesßgeC⁄fúm©i⁄_t
 *
pCmd
,

3670 
uöt8
 *
buf
, uöt8 
Àn
 );

3674 #ifde‡
ZCL_LOAD_CONTROL


3678 
z˛SE_P¨£InCmd_LﬂdC⁄åﬁEvít
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

3679 
uöt8
 *
buf
, uöt8 
Àn
 );

3684 
z˛SE_P¨£InCmd_C™˚lLﬂdC⁄åﬁEvít
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

3685 
uöt8
 *
buf
, uöt8 
Àn
 );

3690 
z˛SE_P¨£InCmd_Rï‹tEvítSètus
–
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

3691 
uöt8
 *
buf
, uöt8 
Àn
 );

3695 #ifde‡
ZCL_PREPAYMENT


3699 
z˛SE_P¨£InCmd_SñAvaûEmîgícyCªdô
–
z˛CCSñAvaûEmîgícyCªdô_t
 *
pCmd
,

3700 
uöt8
 *
buf
, uöt8 
Àn
 );

3702 #i‚de‡
SE_UK_EXT


3706 
z˛SE_P¨£InCmd_Ch™geSuµly
–
z˛CCCh™geSuµly_t
 *
pCmd
,

3707 
uöt8
 *
buf
, uöt8 
Àn
 );

3712 
z˛SE_P¨£InCmd_Ch™geDebt
–
z˛CCCh™geDebt_t
 *
pCmd
,

3713 
uöt8
 *
buf
, uöt8 
Àn
 );

3718 
z˛SE_P¨£InCmd_EmîgícyCªdôSëup
–
z˛CCEmîgícyCªdôSëup_t
 *
pCmd
,

3719 
uöt8
 *
buf
, uöt8 
Àn
 );

3724 
z˛SE_P¨£InCmd_C⁄sumîT›up
–
z˛CCC⁄sumîT›up_t
 *
pCmd
,

3725 
uöt8
 *
buf
, uöt8 
Àn
 );

3730 
z˛SE_P¨£InCmd_CªdôAdju°mít
–
z˛CCCªdôAdju°mít_t
 *
pCmd
,

3731 
uöt8
 *
buf
, uöt8 
Àn
 );

3736 
z˛SE_P¨£InCmd_Ch™gePaymítMode
–
z˛CCCh™gePaymítMode_t
 *
pCmd
,

3737 
uöt8
 *
buf
, uöt8 
Àn
 );

3742 
z˛SE_P¨£InCmd_GëPª∑yS«pshŸ
–
z˛CCGëPª∑yS«pshŸ_t
 *
pCmd
,

3743 
uöt8
 *
buf
, uöt8 
Àn
 );

3748 
z˛SE_P¨£InCmd_GëDebtRïaymítLog
–
z˛CCGëDebtRïaymítLog_t
 *
pCmd
,

3749 
uöt8
 *
buf
, uöt8 
Àn
 );

3754 
z˛SE_P¨£InCmd_GëPª∑yS«pshŸRe•⁄£
–
z˛CCGëPª∑yS«pshŸRe•⁄£_t
 *
pCmd
,

3755 
uöt8
 *
buf
, uöt8 
Àn
 );

3760 
z˛SE_P¨£InCmd_Ch™gePaymítModeRe•⁄£
–
z˛CCCh™gePaymítModeRe•⁄£_t
 *
pCmd
,

3761 
uöt8
 *
buf
, uöt8 
Àn
 );

3766 
z˛SE_P¨£InCmd_C⁄sumîT›upRe•⁄£
–
z˛CCC⁄sumîT›upRe•⁄£_t
 *
pCmd
,

3767 
uöt8
 *
buf
, uöt8 
Àn
 );

3772 
ZSètus_t
 
z˛SE_P¨£InCmd_PublishT›upLog
–
z˛CCPublishT›upLog_t
 *
pCmd
,

3773 
uöt8
 *
buf
, uöt8 
Àn
 );

3778 
ZSètus_t
 
z˛SE_P¨£InCmd_PublishDebtLog
–
z˛CCPublishDebtLog_t
 *
pCmd
,

3779 
uöt8
 *
buf
, uöt8 
Àn
 );

3783 #ifde‡
ZCL_TUNNELING


3787 
z˛SE_P¨£InCmd_Tøns„rD©a
–
z˛CCTøns„rD©a_t
 *
pCmd
,

3788 
uöt8
 *
buf
, uöt8 
Àn
 );

3791 #ifde‡
ZCL_TOU


3792 #ifde‡
SE_UK_EXT


3796 
z˛SE_P¨£InCmd_PublishCÆíd¨
–
z˛CCPublishCÆíd¨_t
 *
pCmd
,

3797 
uöt8
 *
buf
, uöt8 
Àn
 );

3802 
ZSètus_t
 
z˛SE_P¨£InCmd_PublishDayProfûe
–
z˛CCPublishDayProfûe_t
 *
pCmd
,

3803 
uöt8
 *
buf
, uöt8 
Àn
 );

3808 
ZSètus_t
 
z˛SE_P¨£InCmd_PublishSós⁄s
–
z˛CCPublishSós⁄s_t
 *
pCmd
,

3809 
uöt8
 *
buf
, uöt8 
Àn
 );

3814 
ZSètus_t
 
z˛SE_P¨£InCmd_PublishS≥cülDays
–
z˛CCPublishS≥cülDays_t
 *
pCmd
,

3815 
uöt8
 *
buf
, uöt8 
Àn
 );

3819 #ifde‡
ZCL_DEVICE_MGMT


3820 #ifde‡
SE_UK_EXT


3824 
z˛SE_P¨£InCmd_PublishCh™geTí™cy
–
z˛CCPublishCh™geTí™cy_t
 *
pCmd
,

3825 
uöt8
 *
buf
, uöt8 
Àn
 );

3830 
z˛SE_P¨£InCmd_PublishCh™geSuµlõr
–
z˛CCPublishCh™geSuµlõr_t
 *
pCmd
,

3831 
uöt8
 *
buf
, uöt8 
Àn
 );

3836 
z˛SE_P¨£InCmd_Ch™geSuµly
–
z˛CCCh™geSuµly_t
 *
pCmd
,

3837 
uöt8
 *
buf
, uöt8 
Àn
 );

3842 
z˛SE_P¨£InCmd_Ch™gePassw‹d
–
z˛CCCh™gePassw‹d_t
 *
pCmd
,

3843 
uöt8
 *
buf
, uöt8 
Àn
 );

3851 #ifde‡
ZCL_PRICING


3871 
	#z˛SE_Pricög_Síd_GëCuºítPri˚
(
a
, 
b
, 
c
, 
d
, 
e
) \

3872 
	`z˛_SídComm™d
–(
a
), (
b
), 
ZCL_CLUSTER_ID_SE_PRICING
, \

3873 
COMMAND_SE_GET_CURRENT_PRICE
, 
TRUE
, \

3874 
ZCL_FRAME_CLIENT_SERVER_DIR
, (
d
), 0, (
e
), 1, &(
c
Ë);

	)

3879 #ifde‡
ZCL_SIMPLE_METERING


3893 
	#z˛SE_Sim∂eMëîög_Síd_ReqMúr‹Cmd
(
a
, 
b
, 
c
, 
d
) \

3894 
	`z˛_SídComm™d
–(
a
), (
b
), 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
, \

3895 
COMMAND_SE_REQ_MIRROR_CMD
, 
TRUE
, \

3896 
ZCL_FRAME_SERVER_CLIENT_DIR
, (
c
), 0, (
d
), 0, 
NULL
 );

	)

3911 
	#z˛SE_Sim∂eMëîög_Síd_RemMúr‹Cmd
(
a
, 
b
, 
c
, 
d
) \

3912 
	`z˛_SídComm™d
–(
a
), (
b
), 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
, \

3913 
COMMAND_SE_MIRROR_REM_CMD
, 
TRUE
, \

3914 
ZCL_FRAME_SERVER_CLIENT_DIR
, (
c
), 0, (
d
), 0, 
NULL
 );

	)

3919 #ifde‡
ZCL_MESSAGE


3936 
	#z˛SE_Mesßge_Síd_GëLa°Mesßge
(
a
, 
b
, 
c
, 
d
) \

3937 
	`z˛_SídComm™d
–(
a
), (
b
), 
ZCL_CLUSTER_ID_SE_MESSAGE
, \

3938 
COMMAND_SE_GET_LAST_MESSAGE
, 
TRUE
, \

3939 
ZCL_FRAME_CLIENT_SERVER_DIR
, (
c
), 0, (
d
), 0, 
NULL
 );

	)

3943 #ifde‡
ZCL_LOAD_CONTROL


3963 
	#z˛SE_LﬂdC⁄åﬁ_Síd_C™˚lAŒLﬂdC⁄åﬁEvít
(
a
, 
b
, 
c
, 
d
, 
e
) \

3964 
	`z˛_SídComm™d
–(
a
), (
b
), 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
, \

3965 
COMMAND_SE_CANCEL_ALL_LOAD_CONTROL_EVENT
, 
TRUE
, \

3966 
ZCL_FRAME_SERVER_CLIENT_DIR
, (
d
), 0, (
e
), 1, &(
c
Ë);

	)

3972 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_ss.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

45 
	~"z˛.h
"

46 
	~"z˛_gíîÆ.h
"

47 
	~"z˛_ss.h
"

49 #i‡
deföed
 ( 
INTER_PAN
 )

50 
	~"°ub_≠s.h
"

56 
	#z˛SS_Z⁄eTy≥Suµ‹ãd
–
a
 ) ( (aË=
SS_IAS_ZONE_TYPE_STANDARD_CIE
 || \

57 (
a
Ë=
SS_IAS_ZONE_TYPE_MOTION_SENSOR
 || \

58 (
a
Ë=
SS_IAS_ZONE_TYPE_CONTACT_SWITCH
 || \

59 (
a
Ë=
SS_IAS_ZONE_TYPE_FIRE_SENSOR
 || \

60 (
a
Ë=
SS_IAS_ZONE_TYPE_WATER_SENSOR
 || \

61 (
a
Ë=
SS_IAS_ZONE_TYPE_GAS_SENSOR
 || \

62 (
a
Ë=
SS_IAS_ZONE_TYPE_PERSONAL_EMERGENCY_DEVICE
 || \

63 (
a
Ë=
SS_IAS_ZONE_TYPE_VIBRATION_MOVEMENT_SENSOR
 || \

64 (
a
Ë=
SS_IAS_ZONE_TYPE_REMOTE_CONTROL
 || \

65 (
a
Ë=
SS_IAS_ZONE_TYPE_KEY_FOB
 || \

66 (
a
Ë=
SS_IAS_ZONE_TYPE_KEYPAD
 || \

67 (
a
Ë=
SS_IAS_ZONE_TYPE_STANDARD_WARNING_DEVICE
 )

	)

76 
	sz˛SSCBRec


78 
z˛SSCBRec
 *
	m√xt
;

79 
uöt8
 
	mídpoöt
;

80 
z˛SS_AµCÆlbacks_t
 *
	mCBs
;

81 } 
	tz˛SSCBRec_t
;

83 
	sz˛SS_Z⁄eIãm


85 
z˛SS_Z⁄eIãm
 *
	m√xt
;

86 
uöt8
 
	mídpoöt
;

87 
IAS_ACE_Z⁄eTabÀ_t
 
	mz⁄e
;

88 } 
	tz˛SS_Z⁄eIãm_t
;

93 c⁄° 
uöt8
 
	gz˛SS_UknownIìeAddªss
[8] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

102 
z˛SSCBRec_t
 *
	gz˛SSCBs
 = (z˛SSCBRec_à*)
NULL
;

103 
uöt8
 
	gz˛SSPlugöRegi°ed
 = 
FALSE
;

105 #i‡
deföed
(
ZCL_ZONE
Ë|| deföed(
ZCL_ACE
)

106 
z˛SS_Z⁄eIãm_t
 *
	gz˛SS_Z⁄eTabÀ
 = (z˛SS_Z⁄eIãm_à*)
NULL
;

112 
ZSètus_t
 
z˛SS_HdlIncomög
–
z˛Incomög_t
 *
pInHdÃMsg
 );

113 
ZSètus_t
 
z˛SS_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

114 
z˛SS_AµCÆlbacks_t
 *
z˛SS_FödCÆlbacks
–
uöt8
 
ídpoöt
 );

116 #ifde‡
ZCL_ZONE


117 
ZSètus_t
 
z˛SS_Pro˚ssInZ⁄eSètusCmdsSîvî
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

118 
ZSètus_t
 
z˛SS_Pro˚ssInZ⁄eSètusCmdsClõ¡
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

120 
z˛SS_Pro˚ssInCmd_Z⁄eSètus_Ch™geNŸifiˇti⁄
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

121 
ZSètus_t
 
z˛SS_Pro˚ssInCmd_Z⁄eSètus_EƒﬁlReque°
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

122 
z˛SS_Pro˚ssInCmd_Z⁄eSètus_EƒﬁlRe•⁄£
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

125 #ifde‡
ZCL_ACE


126 
ZSètus_t
 
z˛SS_Pro˚ssInACECmdsSîvî
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

127 
ZSètus_t
 
z˛SS_Pro˚ssInACECmdsClõ¡
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

129 
ZSètus_t
 
z˛SS_Pro˚ssInCmd_ACE_Arm
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

130 
z˛SS_Pro˚ssInCmd_ACE_By∑ss
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

131 
z˛SS_Pro˚ssInCmd_ACE_Emîgícy
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

132 
z˛SS_Pro˚ssInCmd_ACE_Fúe
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

133 
z˛SS_Pro˚ssInCmd_ACE_P™ic
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

134 
ZSètus_t
 
z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eIDM≠
–
z˛Incomög_t
 *
pInMsg
 );

135 
ZSètus_t
 
z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eInf‹m©i⁄
–
z˛Incomög_t
 *
pInMsg
 );

136 
z˛SS_Pro˚ssInCmd_ACE_ArmRe•⁄£
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

137 
z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eIDM≠Re•⁄£
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

138 
z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

141 #ifde‡
ZCL_WD


142 
ZSètus_t
 
z˛SS_Pro˚ssInWDCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

144 
z˛SS_Pro˚ssInCmd_WD_SèπW¨nög
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

145 
z˛SS_Pro˚ssInCmd_WD_Squawk
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

148 #ifde‡
ZCL_ZONE


149 
uöt8
 
z˛SS_GëNextFªeZ⁄eID
( );

150 
ZSètus_t
 
z˛SS_AddZ⁄e
–
uöt8
 
ídpoöt
, 
IAS_ACE_Z⁄eTabÀ_t
 *
z⁄e
 );

151 
uöt8
 
z˛SS_Cou¡AŒZ⁄es
( );

152 
uöt8
 
z˛SS_Z⁄eIDAvaûabÀ
–uöt8 
z⁄eID
 );

155 #i‡
deföed
(
ZCL_ZONE
Ë|| deföed(
ZCL_ACE
)

156 
IAS_ACE_Z⁄eTabÀ_t
 *
z˛SS_FödZ⁄e
–
uöt8
 
ídpoöt
, uöt8 
z⁄eID
 );

169 
ZSètus_t
 
	$z˛SS_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛SS_AµCÆlbacks_t
 *
ˇŒbacks
 )

171 
z˛SSCBRec_t
 *
pNewIãm
;

172 
z˛SSCBRec_t
 *
pLo›
;

175 i‡–!
z˛SSPlugöRegi°ed
 )

177 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_SS_IAS_ZONE
,

178 
ZCL_CLUSTER_ID_SS_IAS_WD
,

179 
z˛SS_HdlIncomög
 );

180 
z˛SSPlugöRegi°ed
 = 
TRUE
;

184 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛SSCBRec_t
 ) );

185 i‡–
pNewIãm
 =
NULL
 )

186  (
ZMemEº‹
);

188 
pNewIãm
->
√xt
 = (
z˛SSCBRec_t
 *)
NULL
;

189 
pNewIãm
->
ídpoöt
 =Éndpoint;

190 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

193 i‡–
z˛SSCBs
 =
NULL
 )

195 
z˛SSCBs
 = 
pNewIãm
;

200 
pLo›
 = 
z˛SSCBs
;

201  
pLo›
->
√xt
 !
NULL
 )

202 
pLo›
 =ÖLo›->
√xt
;

205 
pLo›
->
√xt
 = 
pNewIãm
;

207  ( 
ZSuc˚ss
 );

208 
	}
}

210 #ifde‡
ZCL_ZONE


223 
ZSètus_t
 
	$z˛SS_IAS_Síd_Z⁄eSètusCh™geNŸifiˇti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

224 
uöt16
 
z⁄eSètus
, 
uöt8
 
exãndedSètus
,

225 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

227 
uöt8
 
buf
[3];

229 
buf
[0] = 
	`LO_UINT16
–
z⁄eSètus
 );

230 
buf
[1] = 
	`HI_UINT16
–
z⁄eSètus
 );

231 
buf
[2] = 
exãndedSètus
;

233  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ZONE
,

234 
COMMAND_SS_IAS_ZONE_STATUS_CHANGE_NOTIFICATION
, 
TRUE
,

235 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

236 
	}
}

250 
ZSètus_t
 
	$z˛SS_IAS_Síd_Z⁄eSètusEƒﬁlReque°Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

251 
uöt16
 
z⁄eTy≥
, uöt16 
m™uÁ˘uªrCode
,

252 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

254 
uöt8
 
buf
[4];

256 
buf
[0] = 
	`LO_UINT16
–
z⁄eTy≥
 );

257 
buf
[1] = 
	`HI_UINT16
–
z⁄eTy≥
 );

258 
buf
[2] = 
	`LO_UINT16
–
m™uÁ˘uªrCode
 );

259 
buf
[3] = 
	`HI_UINT16
–
m™uÁ˘uªrCode
 );

261  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ZONE
,

262 
COMMAND_SS_IAS_ZONE_STATUS_ENROLL_REQUEST
, 
TRUE
,

263 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 4, 
buf
 );

264 
	}
}

278 
ZSètus_t
 
	$z˛SS_IAS_Síd_Z⁄eSètusEƒﬁlRe•⁄£Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

279 
uöt8
 
ª•⁄£Code
, uöt8 
z⁄eID
,

280 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

282 
uöt8
 
buf
[2];

284 
buf
[0] = 
ª•⁄£Code
;

285 
buf
[1] = 
z⁄eID
;

287  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ZONE
,

288 
COMMAND_SS_IAS_ZONE_STATUS_ENROLL_RESPONSE
, 
TRUE
,

289 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

290 
	}
}

293 #ifde‡
ZCL_ACE


305 
ZSètus_t
 
	$z˛SS_Síd_IAS_ACE_ArmCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

306 
uöt8
 
¨mMode
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

308 
uöt8
 
buf
[1];

310 
buf
[0] = 
¨mMode
;

312  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ACE
,

313 
COMMAND_SS_IAS_ACE_ARM
, 
TRUE
,

314 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 1, 
buf
 );

315 
	}
}

329 
ZSètus_t
 
	$z˛SS_Síd_IAS_ACE_By∑ssCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

330 
uöt8
 
numbîOfZ⁄es
, uöt8 *
by∑ssBuf
,

331 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

333 
uöt8
 *
buf
;

334 
uöt8
 *
pBuf
;

335 
uöt8
 
Àn
 = 1 + 
numbîOfZ⁄es
;

336 
ZSètus_t
 
°©
;

338 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

339 i‡–
buf
 )

341 
pBuf
 = 
buf
;

343 *
pBuf
++ = 
numbîOfZ⁄es
;

344 
	`oßl_mem˝y
–
pBuf
, 
by∑ssBuf
, 
numbîOfZ⁄es
 );

346 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ACE
,

347 
COMMAND_SS_IAS_ACE_BYPASS
, 
TRUE
,

348 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

349 
	`oßl_mem_‰ì
–
buf
 );

352 
°©
 = 
ZFaûuª
;

354  ( 
°©
 );

355 
	}
}

368 
ZSètus_t
 
	$z˛SS_Síd_IAS_ACE_GëZ⁄eInf‹m©i⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

369 
uöt8
 
z⁄eID
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

371 
uöt8
 
buf
[1];

373 
buf
[0] = 
z⁄eID
;

375  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ACE
,

376 
COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION
, 
TRUE
,

377 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 1, 
buf
 );

378 
	}
}

391 
ZSètus_t
 
	$z˛SS_Síd_IAS_ACE_ArmRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

392 
uöt8
 
¨mNŸifiˇti⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

394 
uöt8
 
buf
[1];

396 
buf
[0] = 
¨mNŸifiˇti⁄
;

398  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ACE
,

399 
COMMAND_SS_IAS_ACE_ARM_RESPONSE
, 
TRUE
,

400 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 1, 
buf
 );

401 
	}
}

414 
ZSètus_t
 
	$z˛SS_Síd_IAS_ACE_GëZ⁄eIDM≠Re•⁄£Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

415 
uöt16
 *
z⁄eIDM≠
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

417 
uöt8
 *
buf
;

418 
uöt8
 *
pIndex
;

419 
uöt8
 
j
,
Àn
 = 32;

420 
ZSètus_t
 
°©
;

422 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

424 i‡–
buf
 )

426 
pIndex
 = 
buf
;

428  
j
 = 0; j < 16; j++ )

430 *
pIndex
++ = 
	`LO_UINT16
–*
z⁄eIDM≠
 );

431 *
pIndex
++ = 
	`HI_UINT16
–*
z⁄eIDM≠
++ );

434 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ACE
,

435 
COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP_RESPONSE
, 
TRUE
,

436 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

437 
	`oßl_mem_‰ì
–
buf
 );

440 
°©
 = 
ZMemEº‹
;

442  ( 
°©
 );

444 
	}
}

459 
ZSètus_t
 
	$z˛SS_Síd_IAS_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

460 
uöt8
 
z⁄eID
, 
uöt16
 
z⁄eTy≥
, uöt8 *
õìAddªss
,

461 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

463 
uöt8
 *
buf
;

464 
uöt8
 
Àn
 = 11;

465 
ZSètus_t
 
°©
;

467 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

469 i‡–
buf
 )

471 
buf
[0] = 
z⁄eID
;

472 
buf
[1] = 
	`LO_UINT16
–
z⁄eTy≥
);

473 
buf
[2] = 
	`HI_UINT16
–
z⁄eTy≥
);

474 
	`oßl_˝yExtAddr
–&
buf
[3], 
õìAddªss
 );

476 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ACE
,

477 
COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION_RESPONSE
, 
TRUE
,

478 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

479 
	`oßl_mem_‰ì
–
buf
 );

482 
°©
 = 
ZMemEº‹
;

484  ( 
°©
 );

485 
	}
}

488 #ifde‡
ZCL_WD


498 
ZSètus_t
 
	$z˛SS_Síd_IAS_WD_SèπW¨nögCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

499 
z˛CmdSSWDSèπW¨nögPaylﬂd_t
 *
w¨nög
,

500 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

502 
uöt8
 
buf
[3];

504 
buf
[0] = 
w¨nög
->
w¨nögmesßge
.
w¨nögbyã
;

505 
buf
[1] = 
	`LO_UINT16
–
w¨nög
->
duøti⁄
 );

506 
buf
[2] = 
	`HI_UINT16
–
w¨nög
->
duøti⁄
 );

508  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_WD
,

509 
COMMAND_SS_IAS_WD_START_WARNING
, 
TRUE
,

510 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

511 
	}
}

522 
ZSètus_t
 
	$z˛SS_Síd_IAS_WD_SquawkCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

523 
z˛CmdSSWDSquawkPaylﬂd_t
 *
squawk
,

524 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

526 
uöt8
 
buf
[1];

527 
buf
[0] = 
squawk
->
squawkbyã
;

529  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_WD
,

530 
COMMAND_SS_IAS_WD_SQUAWK
, 
TRUE
,

531 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 1, 
buf
);

532 
	}
}

544 
z˛SS_AµCÆlbacks_t
 *
	$z˛SS_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

546 
z˛SSCBRec_t
 *
pCBs
;

548 
pCBs
 = 
z˛SSCBs
;

549  
pCBs
 )

551 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

552  ( 
pCBs
->
CBs
 );

553 
pCBs
 =ÖCBs->
√xt
;

555  ( (
z˛SS_AµCÆlbacks_t
 *)
NULL
 );

556 
	}
}

570 
ZSètus_t
 
	$z˛SS_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

572 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

574 #i‡
	`deföed
 ( 
INTER_PAN
 )

575 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

576  ( 
°©
 );

578 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

581 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

583 
°©
 = 
	`z˛SS_HdlInS≥cificComm™ds
–
pInMsg
 );

588 
°©
 = 
ZFaûuª
;

594 
°©
 = 
ZFaûuª
;

596  ( 
°©
 );

597 
	}
}

609 
ZSètus_t
 
	$z˛SS_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

611 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

612 
z˛SS_AµCÆlbacks_t
 *
pCBs
;

615 
pCBs
 = (*)
	`z˛SS_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

616 i‡–
pCBs
 =
NULL
 )

617  ( 
ZFaûuª
 );

619  
pInMsg
->
msg
->
˛u°îId
 )

621 #ifde‡
ZCL_ZONE


622 
ZCL_CLUSTER_ID_SS_IAS_ZONE
:

623 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

624 
°©
 = 
	`z˛SS_Pro˚ssInZ⁄eSètusCmdsSîvî
–
pInMsg
, 
pCBs
 );

626 
°©
 = 
	`z˛SS_Pro˚ssInZ⁄eSètusCmdsClõ¡
–
pInMsg
, 
pCBs
 );

630 #ifde‡
ZCL_ACE


631 
ZCL_CLUSTER_ID_SS_IAS_ACE
:

632 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

633 
°©
 = 
	`z˛SS_Pro˚ssInACECmdsSîvî
–
pInMsg
, 
pCBs
 );

635 
°©
 = 
	`z˛SS_Pro˚ssInACECmdsClõ¡
–
pInMsg
, 
pCBs
 );

639 #ifde‡
ZCL_WD


640 
ZCL_CLUSTER_ID_SS_IAS_WD
:

641 
°©
 = 
	`z˛SS_Pro˚ssInWDCmds
–
pInMsg
, 
pCBs
 );

646 
°©
 = 
ZFaûuª
;

650  ( 
°©
 );

651 
	}
}

653 #ifde‡
ZCL_ZONE


664 
ZSètus_t
 
	$z˛SS_Pro˚ssInZ⁄eSètusCmdsSîvî
–
z˛Incomög_t
 *
pInMsg
,

665 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

667 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

669 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SS_IAS_ZONE_STATUS_ENROLL_RESPONSE
 )

670 
	`z˛SS_Pro˚ssInCmd_Z⁄eSètus_EƒﬁlRe•⁄£
–
pInMsg
, 
pCBs
 );

672 
°©
 = 
ZFaûuª
;

674  ( 
°©
 );

675 
	}
}

687 
ZSètus_t
 
	$z˛SS_Pro˚ssInZ⁄eSètusCmdsClõ¡
–
z˛Incomög_t
 *
pInMsg
,

688 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

690 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

692  
pInMsg
->
hdr
.
comm™dID
 )

694 
COMMAND_SS_IAS_ZONE_STATUS_CHANGE_NOTIFICATION
:

695 
	`z˛SS_Pro˚ssInCmd_Z⁄eSètus_Ch™geNŸifiˇti⁄
–
pInMsg
, 
pCBs
 );

698 
COMMAND_SS_IAS_ZONE_STATUS_ENROLL_REQUEST
:

699 
°©
 = 
	`z˛SS_Pro˚ssInCmd_Z⁄eSètus_EƒﬁlReque°
–
pInMsg
, 
pCBs
 );

703 
°©
 = 
ZFaûuª
;

707  ( 
°©
 );

708 
	}
}

711 #ifde‡
ZCL_ACE


722 
ZSètus_t
 
	$z˛SS_Pro˚ssInACECmdsSîvî
–
z˛Incomög_t
 *
pInMsg
,

723 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

725 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

727  
pInMsg
->
hdr
.
comm™dID
 )

729 
COMMAND_SS_IAS_ACE_ARM
:

730 
°©
 = 
	`z˛SS_Pro˚ssInCmd_ACE_Arm
–
pInMsg
, 
pCBs
 );

733 
COMMAND_SS_IAS_ACE_BYPASS
:

734 
	`z˛SS_Pro˚ssInCmd_ACE_By∑ss
–
pInMsg
, 
pCBs
 );

737 
COMMAND_SS_IAS_ACE_EMERGENCY
:

738 
	`z˛SS_Pro˚ssInCmd_ACE_Emîgícy
–
pInMsg
, 
pCBs
 );

741 
COMMAND_SS_IAS_ACE_FIRE
:

742 
	`z˛SS_Pro˚ssInCmd_ACE_Fúe
–
pInMsg
, 
pCBs
 );

745 
COMMAND_SS_IAS_ACE_PANIC
:

746 
	`z˛SS_Pro˚ssInCmd_ACE_P™ic
–
pInMsg
, 
pCBs
 );

749 
COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP
:

750 
°©
 = 
	`z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eIDM≠
–
pInMsg
 );

753 
COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION
:

754 
°©
 = 
	`z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eInf‹m©i⁄
–
pInMsg
 );

758 
°©
 = 
ZFaûuª
;

762  ( 
°©
 );

763 
	}
}

775 
ZSètus_t
 
	$z˛SS_Pro˚ssInACECmdsClõ¡
–
z˛Incomög_t
 *
pInMsg
,

776 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

778 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

780  
pInMsg
->
hdr
.
comm™dID
 )

782 
COMMAND_SS_IAS_ACE_ARM_RESPONSE
:

783 
	`z˛SS_Pro˚ssInCmd_ACE_ArmRe•⁄£
–
pInMsg
, 
pCBs
 );

786 
COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP_RESPONSE
:

787 
	`z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eIDM≠Re•⁄£
–
pInMsg
, 
pCBs
 );

790 
COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION_RESPONSE
:

791 
	`z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£
–
pInMsg
, 
pCBs
 );

795 
°©
 = 
ZFaûuª
;

799  ( 
°©
 );

800 
	}
}

803 #ifde‡
ZCL_ZONE


814 
ZSètus_t
 
	$z˛SS_AddZ⁄e
–
uöt8
 
ídpoöt
, 
IAS_ACE_Z⁄eTabÀ_t
 *
z⁄e
 )

816 
z˛SS_Z⁄eIãm_t
 *
pNewIãm
;

817 
z˛SS_Z⁄eIãm_t
 *
pLo›
;

820 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛SS_Z⁄eIãm_t
 ) );

821 i‡–
pNewIãm
 =
NULL
 )

822  ( 
ZMemEº‹
 );

825 
pNewIãm
->
√xt
 = (
z˛SS_Z⁄eIãm_t
 *)
NULL
;

826 
pNewIãm
->
ídpoöt
 =Éndpoint;

827 
	`oßl_mem˝y
–(
uöt8
*)&(
pNewIãm
->
z⁄e
), (uöt8*)z⁄e,  ( 
IAS_ACE_Z⁄eTabÀ_t
 ));

830 i‡–
z˛SS_Z⁄eTabÀ
 =
NULL
 )

832 
z˛SS_Z⁄eTabÀ
 = 
pNewIãm
;

837 
pLo›
 = 
z˛SS_Z⁄eTabÀ
;

838  
pLo›
->
√xt
 !
NULL
 )

839 
pLo›
 =ÖLo›->
√xt
;

842 
pLo›
->
√xt
 = 
pNewIãm
;

845  ( 
ZSuc˚ss
 );

846 
	}
}

857 
uöt8
 
	$z˛SS_Cou¡AŒZ⁄es
( )

859 
z˛SS_Z⁄eIãm_t
 *
pLo›
;

860 
uöt8
 
˙t
 = 0;

863 
pLo›
 = 
z˛SS_Z⁄eTabÀ
;

864  
pLo›
 )

866 
˙t
++;

867 
pLo›
 =ÖLo›->
√xt
;

869  ( 
˙t
 );

870 
	}
}

881 
uöt8
 
	$z˛SS_GëNextFªeZ⁄eID
( )

883 
uöt8
 
√xtAvaûZ⁄eID
 = 0;

885 i‡–
	`z˛SS_Z⁄eIDAvaûabÀ
–
√xtAvaûZ⁄eID
 ) =
FALSE
 )

887 
uöt8
 
z⁄eID
 = 
√xtAvaûZ⁄eID
;

892 i‡–++
z⁄eID
 =
ZCL_SS_MAX_ZONE_ID
 )

893 
z⁄eID
 = 0;

895 }  (
z⁄eID
 !
√xtAvaûZ⁄eID
Ë&& (
	`z˛SS_Z⁄eIDAvaûabÀ
–√xtAvaûZ⁄eID ) =
FALSE
) );

898 i‡–
z⁄eID
 !
√xtAvaûZ⁄eID
 )

899 
√xtAvaûZ⁄eID
 = 
z⁄eID
;

902  ( 
√xtAvaûZ⁄eID
 );

903 
	}
}

915 
uöt8
 
	$z˛SS_Z⁄eIDAvaûabÀ
–
uöt8
 
z⁄eID
 )

917 
z˛SS_Z⁄eIãm_t
 *
pLo›
;

919 i‡–
z⁄eID
 < 
ZCL_SS_MAX_ZONE_ID
 )

921 
pLo›
 = 
z˛SS_Z⁄eTabÀ
;

922  
pLo›
 )

924 i‡–
pLo›
->
z⁄e
.
z⁄eID
 == zoneID )

926  ( 
FALSE
 );

928 
pLo›
 =ÖLo›->
√xt
;

932  ( 
TRUE
 );

935  ( 
FALSE
 );

936 
	}
}

939 #i‡
deföed
(
ZCL_ZONE
Ë|| deföed(
ZCL_ACE
)

950 
IAS_ACE_Z⁄eTabÀ_t
 *
	$z˛SS_FödZ⁄e
–
uöt8
 
ídpoöt
, uöt8 
z⁄eID
 )

952 
z˛SS_Z⁄eIãm_t
 *
pLo›
;

955 
pLo›
 = 
z˛SS_Z⁄eTabÀ
;

956  
pLo›
 )

958 i‡–
pLo›
->
ídpoöt
 =ídpoöà&&ÖLo›->
z⁄e
.
z⁄eID
 == zoneID )

960  ( &(
pLo›
->
z⁄e
) );

962 
pLo›
 =ÖLo›->
√xt
;

965  ( (
IAS_ACE_Z⁄eTabÀ_t
 *)
NULL
 );

966 
	}
}

978 
uöt8
 
	$z˛SS_RemoveZ⁄e
–
uöt8
 
ídpoöt
, uöt8 
z⁄eID
 )

980 
z˛SS_Z⁄eIãm_t
 *
pLo›
;

981 
z˛SS_Z⁄eIãm_t
 *
pPªv
;

984 
pLo›
 = 
z˛SS_Z⁄eTabÀ
;

985 
pPªv
 = 
NULL
;

986  
pLo›
 )

988 i‡–
pLo›
->
ídpoöt
 =ídpoöà&&ÖLo›->
z⁄e
.
z⁄eID
 == zoneID )

990 i‡–
pPªv
 =
NULL
 )

991 
z˛SS_Z⁄eTabÀ
 = 
pLo›
->
√xt
;

993 
pPªv
->
√xt
 = 
pLo›
->next;

996 
	`oßl_mem_‰ì
–
pLo›
 );

998  ( 
TRUE
 );

1000 
pPªv
 = 
pLo›
;

1001 
pLo›
 =ÖLo›->
√xt
;

1004  ( 
FALSE
 );

1005 
	}
}

1018 
	$z˛SS_Upd©eZ⁄eAddªss
–
uöt8
 
ídpoöt
, uöt8 
z⁄eID
, uöt8 *
õìAddr
 )

1020 
IAS_ACE_Z⁄eTabÀ_t
 *
z⁄e
;

1022 
z⁄e
 = 
	`z˛SS_FödZ⁄e
–
ídpoöt
, 
z⁄eID
 );

1023 i‡–
z⁄e
 !
NULL
 )

1026 
	`oßl_˝yExtAddr
–
z⁄e
->
z⁄eAddªss
, 
õìAddr
 );

1028 
	}
}

1031 #ifde‡
ZCL_ZONE


1041 
	$z˛SS_Pro˚ssInCmd_Z⁄eSètus_Ch™geNŸifiˇti⁄
–
z˛Incomög_t
 *
pInMsg
,

1042 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1044 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ZONE_STATUS_CHANGE_NOTIFICATION
 )

1047 i‡–
pCBs
->
p‚Ch™geNŸifiˇti⁄
 )

1049 
z˛Z⁄eCh™geNŸif_t
 
cmd
;

1051 
cmd
.
z⁄eSètus
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

1052 
cmd
.
exãndedSètus
 = 
pInMsg
->
pD©a
[2];

1054 
pCBs
->
	`p‚Ch™geNŸifiˇti⁄
–&
cmd
 );

1056 
	}
}

1067 
ZSètus_t
 
	$z˛SS_Pro˚ssInCmd_Z⁄eSètus_EƒﬁlReque°
–
z˛Incomög_t
 *
pInMsg
,

1068 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1070 
IAS_ACE_Z⁄eTabÀ_t
 
z⁄e
;

1071 
uöt16
 
z⁄eTy≥
;

1072 
uöt16
 
m™uCode
;

1073 
uöt8
 
z⁄eID
;

1074 
uöt8
 
°©us
;

1076 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ZONE_STATUS_ENROLL_REQUEST
 )

1077  ( 
ZFaûuª
 );

1079 
z⁄eTy≥
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

1080 
m™uCode
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

1082 i‡–
	`z˛SS_Z⁄eTy≥Suµ‹ãd
–
z⁄eTy≥
 ) )

1085 i‡–
	`z˛SS_Cou¡AŒZ⁄es
(Ë< 
ZCL_SS_MAX_ZONES
-1 )

1088 
z⁄eID
 = 
	`z˛SS_GëNextFªeZ⁄eID
();

1090 
z⁄e
.
z⁄eID
 = zoneID;

1091 
z⁄e
.
z⁄eTy≥
 = zoneType;

1094 
	`oßl_˝yExtAddr
–
z⁄e
.
z⁄eAddªss
, (*)
z˛SS_UknownIìeAddªss
 );

1096 i‡–
	`z˛SS_AddZ⁄e
–
pInMsg
->
msg
->
ídPoöt
, &
z⁄e
 ) =
ZSuc˚ss
 )

1098 
°©us
 = 
ZCL_STATUS_SUCCESS
;

1103 
°©us
 = 
SS_IAS_ZONE_STATUS_ENROLL_RESPONSE_CODE_NO_ENROLL_PERMIT
;

1109 
°©us
 = 
SS_IAS_ZONE_STATUS_ENROLL_RESPONSE_CODE_TOO_MANY_ZONES
;

1115 
°©us
 = 
SS_IAS_ZONE_STATUS_ENROLL_RESPONSE_CODE_NOT_SUPPORTED
;

1119 
	`z˛SS_IAS_Síd_Z⁄eSètusEƒﬁlRe•⁄£Cmd
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

1120 
°©us
, 
z⁄eID
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1121 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

1124 i‡–
pCBs
->
p‚EƒﬁlReque°
 )

1126 
z˛Z⁄eEƒﬁlReq_t
 
ªq
;

1128 
ªq
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

1129 
ªq
.
z⁄eID
 = zoneID;

1130 
ªq
.
z⁄eTy≥
 = zoneType;

1131 
ªq
.
m™uÁ˘uªrCode
 = 
m™uCode
;

1133 
pCBs
->
	`p‚EƒﬁlReque°
–&
ªq
 );

1137  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

1138 
	}
}

1149 
	$z˛SS_Pro˚ssInCmd_Z⁄eSètus_EƒﬁlRe•⁄£
–
z˛Incomög_t
 *
pInMsg
,

1150 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1152 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ZONE_STATUS_ENROLL_RESPONSE
 )

1155 i‡–
pCBs
->
p‚EƒﬁlRe•⁄£
 )

1157 
z˛Z⁄eEƒﬁlR•_t
 
r•
;

1159 
r•
.
ª•⁄£Code
 = 
pInMsg
->
pD©a
[0];

1160 
r•
.
z⁄eID
 = 
pInMsg
->
pD©a
[1];

1162 
pCBs
->
	`p‚EƒﬁlRe•⁄£
–&
r•
 );

1164 
	}
}

1167 #ifde‡
ZCL_ACE


1176 
ZSètus_t
 
	$z˛SS_Pro˚ssInCmd_ACE_Arm
–
z˛Incomög_t
 *
pInMsg
,

1177 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1179 
uöt8
 
¨mNŸifiˇti⁄
;

1181 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_ARM
 )

1182  ( 
ZFaûuª
 );

1184 i‡–
pCBs
->
p‚ACE_Arm
 )

1186 
¨mNŸifiˇti⁄
 = 
pCBs
->
	`p‚ACE_Arm
–
pInMsg
->
pD©a
[0] );

1189 
	`z˛SS_Síd_IAS_ACE_ArmRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

1190 
¨mNŸifiˇti⁄
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1193  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

1194 
	}
}

1204 
	$z˛SS_Pro˚ssInCmd_ACE_By∑ss
–
z˛Incomög_t
 *
pInMsg
,

1205 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1207 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_BYPASS
 )

1210 i‡–
pCBs
->
p‚ACE_By∑ss
 )

1212 
z˛ACEBy∑ss_t
 
cmd
;

1214 
cmd
.
numbîOfZ⁄es
 = 
pInMsg
->
pD©a
[0];

1215 
cmd
.
by∑ssBuf
 = &(
pInMsg
->
pD©a
[1]);

1217 
pCBs
->
	`p‚ACE_By∑ss
–&
cmd
 ) ;

1219 
	}
}

1229 
	$z˛SS_Pro˚ssInCmd_ACE_Emîgícy
–
z˛Incomög_t
 *
pInMsg
,

1230 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1232 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_EMERGENCY
 )

1235 i‡–
pCBs
->
p‚ACE_Emîgícy
 )

1236 
pCBs
->
	`p‚ACE_Emîgícy
();

1238 
	}
}

1248 
	$z˛SS_Pro˚ssInCmd_ACE_Fúe
–
z˛Incomög_t
 *
pInMsg
,

1249 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1251 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_FIRE
 )

1254 i‡–
pCBs
->
p‚ACE_Fúe
 )

1255 
pCBs
->
	`p‚ACE_Fúe
();

1256 
	}
}

1266 
	$z˛SS_Pro˚ssInCmd_ACE_P™ic
–
z˛Incomög_t
 *
pInMsg
,

1267 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1269 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_PANIC
 )

1272 i‡–
pCBs
->
p‚ACE_P™ic
 )

1273 
pCBs
->
	`p‚ACE_P™ic
();

1274 
	}
}

1284 
ZSètus_t
 
	$z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eIDM≠
–
z˛Incomög_t
 *
pInMsg
 )

1286 
uöt16
 
z⁄eIDM≠
[16];

1287 
uöt16
 
m≠Se˘i⁄
;

1288 
uöt8
 
z⁄eID
;

1289 
uöt8
 
i
, 
j
;

1291 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP
 )

1292  ( 
ZFaûuª
 );

1294  
i
 = 0; i < 16; i++ )

1296 
m≠Se˘i⁄
 = 0;

1299  
j
 = 0; j < 16; j++ )

1301 
z⁄eID
 = 16 * 
i
 + 
j
;

1302 i‡–
	`z˛SS_FödZ⁄e
–
pInMsg
->
msg
->
ídPoöt
, 
z⁄eID
 ) !
NULL
 )

1305 
m≠Se˘i⁄
 |(0x01 << 
j
 );

1308 
z⁄eIDM≠
[
i
] = 
m≠Se˘i⁄
;

1312 
	`z˛SS_Síd_IAS_ACE_GëZ⁄eIDM≠Re•⁄£Cmd
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

1313 
z⁄eIDM≠
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1314  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

1315 
	}
}

1325 
ZSètus_t
 
	$z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eInf‹m©i⁄
–
z˛Incomög_t
 *
pInMsg
 )

1327 
IAS_ACE_Z⁄eTabÀ_t
 
z⁄e
;

1328 
IAS_ACE_Z⁄eTabÀ_t
 *
pZ⁄e
;

1330 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION
 )

1331  ( 
ZFaûuª
 );

1333 
pZ⁄e
 = 
	`z˛SS_FödZ⁄e
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->
pD©a
[0] );

1334 i‡–
pZ⁄e
 =
NULL
 )

1337 
pZ⁄e
 = &
z⁄e
;

1338 
pZ⁄e
->
z⁄eID
 = 
pInMsg
->
pD©a
[0];

1339 
pZ⁄e
->
z⁄eTy≥
 = 
SS_IAS_ZONE_TYPE_INVALID_ZONE_TYPE
;

1340 
	`oßl_˝yExtAddr
–
pZ⁄e
->
z⁄eAddªss
, (*)
z˛SS_UknownIìeAddªss
 );

1344 
	`z˛SS_Síd_IAS_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£Cmd
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

1345 
pZ⁄e
->
z⁄eID
,ÖZ⁄e->
z⁄eTy≥
,

1346 
pZ⁄e
->
z⁄eAddªss
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1347  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

1348 
	}
}

1358 
	$z˛SS_Pro˚ssInCmd_ACE_ArmRe•⁄£
–
z˛Incomög_t
 *
pInMsg
,

1359 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1361 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_ARM_RESPONSE
 )

1364 i‡–
pCBs
->
p‚ACE_ArmRe•⁄£
 )

1365 
pCBs
->
	`p‚ACE_ArmRe•⁄£
(
pInMsg
->
pD©a
[0]);

1366 
	}
}

1377 
	$z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eIDM≠Re•⁄£
–
z˛Incomög_t
 *
pInMsg
,

1378 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1380 
uöt16
 *
buf
;

1381 
uöt16
 *
pIndex
;

1382 
uöt8
 *
pD©a
;

1383 
uöt8
 
i
, 
Àn
 = 32;

1385 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP_RESPONSE
 )

1388 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

1390 i‡–
buf
 )

1392 
pIndex
 = 
buf
;

1393 
pD©a
 = 
pInMsg
->pData;

1395  
i
 = 0; i < 16; i++ )

1397 *
pIndex
++ = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

1398 
pD©a
 += 2;

1401 i‡–
pCBs
->
p‚ACE_GëZ⁄eIDM≠Re•⁄£
 )

1402 
pCBs
->
	`p‚ACE_GëZ⁄eIDM≠Re•⁄£
–
buf
 );

1404 
	`oßl_mem_‰ì
–
buf
 );

1406 
	}
}

1416 
	$z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£
–
z˛Incomög_t
 *
pInMsg
,

1417 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1419 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION_RESPONSE
 )

1422 i‡–
pCBs
->
p‚ACE_GëZ⁄eInf‹m©i⁄Re•⁄£
 )

1424 
z˛ACEGëZ⁄eInfoR•_t
 
r•
;

1426 
r•
.
z⁄eID
 = 
pInMsg
->
pD©a
[0];

1427 
r•
.
z⁄eTy≥
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[1],ÖInMsg->pData[2] );

1428 
r•
.
õìAddr
 = &(
pInMsg
->
pD©a
[3]);

1430 
pCBs
->
	`p‚ACE_GëZ⁄eInf‹m©i⁄Re•⁄£
–&
r•
 );

1432 
	}
}

1435 #ifde‡
ZCL_WD


1446 
ZSètus_t
 
	$z˛SS_Pro˚ssInWDCmds
–
z˛Incomög_t
 *
pInMsg
,

1447 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1449 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

1451  
pInMsg
->
hdr
.
comm™dID
 )

1453 
COMMAND_SS_IAS_WD_START_WARNING
:

1454 
	`z˛SS_Pro˚ssInCmd_WD_SèπW¨nög
–
pInMsg
, 
pCBs
 );

1457 
COMMAND_SS_IAS_WD_SQUAWK
:

1458 
	`z˛SS_Pro˚ssInCmd_WD_Squawk
–
pInMsg
, 
pCBs
 );

1462 
°©
 = 
ZFaûuª
;

1466  ( 
°©
 );

1467 
	}
}

1477 
	$z˛SS_Pro˚ssInCmd_WD_SèπW¨nög
–
z˛Incomög_t
 *
pInMsg
,

1478 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1480 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_WD_START_WARNING
 )

1483 i‡–
pCBs
->
p‚WD_SèπW¨nög
 )

1485 
z˛WDSèπW¨nög_t
 
cmd
;

1487 
cmd
.
w¨nögs
.
w¨nögbyã
 = 
pInMsg
->
pD©a
[0];

1488 
cmd
.
duøti⁄
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[1],ÖInMsg->pData[2] );

1490 
pCBs
->
	`p‚WD_SèπW¨nög
–&
cmd
 );

1492 
	}
}

1502 
	$z˛SS_Pro˚ssInCmd_WD_Squawk
–
z˛Incomög_t
 *
pInMsg
,

1503 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1505 
z˛CmdSSWDSquawkPaylﬂd_t
 
squawk
;

1507 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_WD_SQUAWK
 )

1510 i‡–
pCBs
->
p‚WD_Squawk
 )

1512 
squawk
.
squawkbyã
 = 
pInMsg
->
pD©a
[0];

1513 
pCBs
->
	`p‚WD_Squawk
–
squawk
 );

1515 
	}
}

	@Components/stack/zcl/zcl_ss.h

40 #i‚de‡
ZCL_SS_H


41 
	#ZCL_SS_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

61 
	#ATTRID_SS_IAS_ZONE_STATE
 0x0000

	)

62 
	#ATTRID_SS_IAS_ZONE_TYPE
 0x0001

	)

63 
	#ATTRID_SS_IAS_ZONE_STATUS
 0x0002

	)

65 
	#SS_IAS_ZONE_STATE_NOT_ENROLLED
 0x00

	)

66 
	#SS_IAS_ZONE_STATE_ENROLLED
 0x01

	)

68 
	#SS_IAS_ZONE_TYPE_STANDARD_CIE
 0x0000

	)

69 
	#SS_IAS_ZONE_TYPE_MOTION_SENSOR
 0x000D

	)

70 
	#SS_IAS_ZONE_TYPE_CONTACT_SWITCH
 0x0015

	)

71 
	#SS_IAS_ZONE_TYPE_FIRE_SENSOR
 0x0028

	)

72 
	#SS_IAS_ZONE_TYPE_WATER_SENSOR
 0x002A

	)

73 
	#SS_IAS_ZONE_TYPE_GAS_SENSOR
 0x002B

	)

74 
	#SS_IAS_ZONE_TYPE_PERSONAL_EMERGENCY_DEVICE
 0x002C

	)

75 
	#SS_IAS_ZONE_TYPE_VIBRATION_MOVEMENT_SENSOR
 0x002D

	)

76 
	#SS_IAS_ZONE_TYPE_REMOTE_CONTROL
 0x010F

	)

77 
	#SS_IAS_ZONE_TYPE_KEY_FOB
 0x0115

	)

78 
	#SS_IAS_ZONE_TYPE_KEYPAD
 0x021D

	)

79 
	#SS_IAS_ZONE_TYPE_STANDARD_WARNING_DEVICE
 0x0225

	)

80 
	#SS_IAS_ZONE_TYPE_INVALID_ZONE_TYPE
 0xFFFF

	)

82 
	#SS_IAS_ZONE_STATUS_ALARM1_ALARMED
 0x0001

	)

83 
	#SS_IAS_ZONE_STATUS_ALARM2_ALARMED
 0x0002

	)

84 
	#SS_IAS_ZONE_STATUS_TAMPERED_YES
 0x0004

	)

85 
	#SS_IAS_ZONE_STATUS_BATTERY_LOW
 0x0008

	)

86 
	#SS_IAS_ZONE_STATUS_SUPERVISION_REPORTS_YES
 0x0010

	)

87 
	#SS_IAS_ZONE_STATUS_RESTORE_REPORTS_YES
 0x0020

	)

88 
	#SS_IAS_ZONE_STATUS_TROUBLE_YES
 0x0040

	)

89 
	#SS_IAS_ZONE_STATUS_AC_MAINS_FAULT
 0x0080

	)

92 
	#ATTRID_SS_IAS_CIE_ADDRESS
 0x0010

	)

94 
	#COMMAND_SS_IAS_ZONE_STATUS_CHANGE_NOTIFICATION
 0x00

	)

95 
	#COMMAND_SS_IAS_ZONE_STATUS_ENROLL_REQUEST
 0x01

	)

96 
	#COMMAND_SS_IAS_ZONE_STATUS_ENROLL_RESPONSE
 0x00

	)

98 
	#SS_IAS_ZONE_STATUS_ENROLL_RESPONSE_CODE_SUCCESS
 0x00

	)

99 
	#SS_IAS_ZONE_STATUS_ENROLL_RESPONSE_CODE_NOT_SUPPORTED
 0x01

	)

100 
	#SS_IAS_ZONE_STATUS_ENROLL_RESPONSE_CODE_NO_ENROLL_PERMIT
 0x02

	)

101 
	#SS_IAS_ZONE_STATUS_ENROLL_RESPONSE_CODE_TOO_MANY_ZONES
 0x03

	)

110 
	#COMMAND_SS_IAS_ACE_ARM
 0x00

	)

111 
	#COMMAND_SS_IAS_ACE_BYPASS
 0x01

	)

112 
	#COMMAND_SS_IAS_ACE_EMERGENCY
 0x02

	)

113 
	#COMMAND_SS_IAS_ACE_FIRE
 0x03

	)

114 
	#COMMAND_SS_IAS_ACE_PANIC
 0x04

	)

115 
	#COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP
 0x05

	)

116 
	#COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION
 0x06

	)

118 
	#COMMAND_SS_IAS_ACE_ARM_RESPONSE
 0x00

	)

119 
	#COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP_RESPONSE
 0x01

	)

120 
	#COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION_RESPONSE
 0x02

	)

122 
	#SS_IAS_ACE_ARM_DISARM
 0x00

	)

123 
	#SS_IAS_ACE_ARM_DAY_HOME_ZONES_ONLY
 0x01

	)

124 
	#SS_IAS_ACE_ARM_NIGHT_SLEEP_ZONES_ONLY
 0x02

	)

125 
	#SS_IAS_ACE_ARM_ALL_ZONES
 0x03

	)

127 
	#SS_IAS_ACE_ARM_NOTIFICATION_ALL_ZONES_DISARMED
 0x00

	)

128 
	#SS_IAS_ACE_ARM_NOTIFICATION_DAY_HOME_ZONES_ONLY
 0x01

	)

129 
	#SS_IAS_ACE_ARM_NOTIFICATION_NIGHT_SLEEP_ZONES_ONLY
 0x02

	)

130 
	#SS_IAS_ACE_ARM_NOTIFICATION_ALL_ZONES_ARMED
 0x03

	)

136 
	#ATTRID_SS_IAS_WD_MAXIMUM_DURATION
 0x0000

	)

138 
	#COMMAND_SS_IAS_WD_START_WARNING
 0x00

	)

139 
	#COMMAND_SS_IAS_WD_SQUAWK
 0x01

	)

141 
	#SS_IAS_START_WARNING_WARNING_MODE_STOP
 0

	)

142 
	#SS_IAS_START_WARNING_WARNING_MODE_BURGLAR
 1

	)

143 
	#SS_IAS_START_WARNING_WARNING_MODE_FIRE
 2

	)

144 
	#SS_IAS_START_WARNING_WARNING_MODE_EMERGENCY
 3

	)

146 
	#SS_IAS_START_WARNING_STROBE_NO_STROBE_WARNING
 0

	)

147 
	#SS_IAS_START_WARNING_STROBE_USE_STPOBE_IN_PARALLEL_TO_WARNING
 1

	)

150 
	#SS_IAS_SQUAWK_SQUAWK_MODE_SYSTEM_ALARMED_NOTIFICATION_SOUND
 0

	)

151 
	#SS_IAS_SQUAWK_SQUAWK_MODE_SYSTEM_DISARMED_NOTIFICATION_SOUND
 1

	)

153 
	#SS_IAS_SQUAWK_STROBE_NO_STROBE_SQUAWK
 0

	)

154 
	#SS_IAS_SQUAWK_STROBE_USE_STROBE_BLINK_IN_PARALLEL_TO_SQUAWK
 1

	)

156 
	#SS_IAS_SQUAWK_SQUAWK_LEVEL_LOW_LEVEL_SOUND
 0

	)

157 
	#SS_IAS_SQUAWK_SQUAWK_LEVEL_MEDIUM_LEVEL_SOUND
 1

	)

158 
	#SS_IAS_SQUAWK_SQUAWK_LEVEL_HIGH_LEVEL_SOUND
 2

	)

159 
	#SS_IAS_SQUAWK_SQUAWK_LEVEL_VERY_HIGH_LEVEL_SOUND
 3

	)

162 
	#ZCL_SS_MAX_ZONES
 256

	)

163 
	#ZCL_SS_MAX_ZONE_ID
 254

	)

171 
uöt8
 
z⁄eSètus
;

172 
uöt8
 
exãndedSètus
;

173 } 
	tz˛CmdSSIASZ⁄eSètusCh™geNŸifiˇti⁄_t
;

178 
uöt16
 
z⁄eTy≥
;

179 
uöt16
 
m™uÁ˘uªrCode
;

180 } 
	tz˛CmdSSIASZ⁄eEƒﬁlReque°_t
;

185 
uöt8
 
ª•⁄£Code
;

186 
uöt8
 
z⁄eID
;

187 } 
	tz˛CmdSSIASZ⁄eEƒﬁlRe•⁄£_t
;

192 
uöt8
 
z⁄eID
;

193 
uöt16
 
z⁄eTy≥
;

194 
uöt8
 
z⁄eAddªss
[8];

195 } 
	tIAS_ACE_Z⁄eTabÀ_t
;

198 
uöt8
 
	tz˛CmdSSIASACEArmPaylﬂd_t
;

203 
uöt8
 
numZ⁄es
;

204 
uöt8
 
z⁄eID
[];

205 } 
	tz˛CmdSSIASACEBy∑ssPaylﬂd_t
;

208 
uöt8
 
	tz˛CmdSSIASACEGëZ⁄eInf‹m©i⁄Paylﬂd_t
;

211 
uöt8
 
	tz˛CmdSSIASACEArmRe•⁄£Paylﬂd_t
;

214 
uöt16
 
	tz˛CmdSSIASZ⁄eIDM≠Se˘i⁄_t
[16];

219 
uöt8
 
z⁄eID
;

220 
uöt16
 
z⁄eTy≥
;

221 
uöt8
 *
õìAddªss
;

222 } 
	tz˛CmdSSIASACEGëZ⁄eInf‹m©i⁄Re•⁄£Paylﬂd_t
;

227 
w¨nMode
:4;

228 
w¨nSåobe
:2;

229 
ª£rved
:2;

230 } 
	tw¨nögbôs_t
;

234 
w¨nögbôs_t
 
w¨nögbôs
;

235 
uöt8
 
w¨nögbyã
;

236 } 
	tw¨nög_t
;

240 
w¨nög_t
 
w¨nögmesßge
;

241 
uöt16
 
duøti⁄
;

242 } 
	tz˛CmdSSWDSèπW¨nögPaylﬂd_t
;

247 
squawkMode
:4;

248 
°robe
:1;

249 
ª£rved
:1;

250 
squawkLevñ
:2;

251 } 
	tsquawkbôs_t
;

255 
squawkbôs_t
 
squawkbôs
;

256 
uöt8
 
squawkbyã
;

257 } 
	tz˛CmdSSWDSquawkPaylﬂd_t
;

263 
uöt16
 
z⁄eSètus
;

264 
uöt8
 
exãndedSètus
;

265 } 
	tz˛Z⁄eCh™geNŸif_t
;

269 
afAddrTy≥_t
 *
§cAddr
;

270 
uöt8
 
z⁄eID
;

271 
uöt16
 
z⁄eTy≥
;

272 
uöt16
 
m™uÁ˘uªrCode
;

273 } 
	tz˛Z⁄eEƒﬁlReq_t
;

277 
uöt8
 
ª•⁄£Code
;

278 
uöt8
 
z⁄eID
;

279 } 
	tz˛Z⁄eEƒﬁlR•_t
;

283 
uöt8
 
numbîOfZ⁄es
;

284 
uöt8
 *
by∑ssBuf
;

285 } 
	tz˛ACEBy∑ss_t
;

289 
uöt8
 
z⁄eID
;

290 
uöt16
 
z⁄eTy≥
;

291 
uöt8
 *
õìAddr
;

292 } 
	tz˛ACEGëZ⁄eInfoR•_t
;

296 
w¨nög_t
 
w¨nögs
;

297 
uöt16
 
duøti⁄
;

298 } 
	tz˛WDSèπW¨nög_t
;

304 (*
z˛SS_Ch™geNŸifiˇti⁄_t
)–
	tz˛Z⁄eCh™geNŸif_t
 *
	tpCmd
 );

311 (*
z˛SS_EƒﬁlReque°_t
)–
	tz˛Z⁄eEƒﬁlReq_t
 *
	tpReq
 );

316 (*
z˛SS_EƒﬁlRe•⁄£_t
)–
	tz˛Z⁄eEƒﬁlR•_t
 *
	tpR•
 );

321 
uöt8
 (*
	tz˛SS_ACE_Arm_t
)–
	tuöt8
 
	t¨mMode
 );

326 (*
z˛SS_ACE_By∑ss_t
)–
	tz˛ACEBy∑ss_t
 *
	tpCmd
 );

330 (*
z˛SS_ACE_Emîgícy_t
)( );

334 (*
z˛SS_ACE_Fúe_t
)( );

338 (*
z˛SS_ACE_P™ic_t
)( );

342 (*
z˛SS_ACE_GëZ⁄eIDM≠_t
)( );

346 (*
z˛SS_ACE_GëZ⁄eInf‹m©i⁄_t
)–
	tuöt8
 
	tz⁄eID
 );

350 (*
z˛SS_ACE_ArmRe•⁄£_t
)–
	tuöt8
 
	t¨mNŸifiˇti⁄
 );

354 (*
z˛SS_ACE_GëZ⁄eIDM≠Re•⁄£_t
)–
	tuöt16
 *
	tz⁄eIDM≠
 );

360 (*
z˛SS_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£_t
)–
	tz˛ACEGëZ⁄eInfoR•_t
 *
	tpR•
 );

365 (*
z˛SS_WD_SèπW¨nög_t
)–
	tz˛WDSèπW¨nög_t
 *
	tpCmd
 );

369 (*
z˛SS_WD_Squawk_t
)–
	tz˛CmdSSWDSquawkPaylﬂd_t
 
	tsquawks
 );

376 
z˛SS_Ch™geNŸifiˇti⁄_t
 
p‚Ch™geNŸifiˇti⁄
;

377 
z˛SS_EƒﬁlReque°_t
 
p‚EƒﬁlReque°
;

378 
z˛SS_EƒﬁlRe•⁄£_t
 
p‚EƒﬁlRe•⁄£
;

379 
z˛SS_ACE_Arm_t
 
p‚ACE_Arm
;

380 
z˛SS_ACE_By∑ss_t
 
p‚ACE_By∑ss
;

381 
z˛SS_ACE_Emîgícy_t
 
p‚ACE_Emîgícy
;

382 
z˛SS_ACE_Fúe_t
 
p‚ACE_Fúe
;

383 
z˛SS_ACE_P™ic_t
 
p‚ACE_P™ic
;

386 
z˛SS_ACE_ArmRe•⁄£_t
 
p‚ACE_ArmRe•⁄£
;

387 
z˛SS_ACE_GëZ⁄eIDM≠Re•⁄£_t
 
p‚ACE_GëZ⁄eIDM≠Re•⁄£
;

388 
z˛SS_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£_t
 
p‚ACE_GëZ⁄eInf‹m©i⁄Re•⁄£
;

389 
z˛SS_WD_SèπW¨nög_t
 
p‚WD_SèπW¨nög
;

390 
z˛SS_WD_Squawk_t
 
p‚WD_Squawk
;

392 } 
	tz˛SS_AµCÆlbacks_t
;

399 #ifde‡
ZCL_ACE


405 
	#z˛SS_Síd_IAS_ACE_EmîgícyCmd
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_SS_IAS_ACE
,\

406 
COMMAND_SS_IAS_ACE_EMERGENCY
, 
TRUE
,\

407 
ZCL_FRAME_CLIENT_SERVER_DIR
, (
c
), 0, (
d
), 0, 
NULL
 )

	)

414 
	#z˛SS_Síd_IAS_ACE_FúeCmd
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_SS_IAS_ACE
,\

415 
COMMAND_SS_IAS_ACE_FIRE
, 
TRUE
,\

416 
ZCL_FRAME_CLIENT_SERVER_DIR
, (
c
), 0, (
d
), 0, 
NULL
 )

	)

423 
	#z˛SS_Síd_IAS_ACE_P™icCmd
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_SS_IAS_ACE
,\

424 
COMMAND_SS_IAS_ACE_PANIC
, 
TRUE
,\

425 
ZCL_FRAME_CLIENT_SERVER_DIR
, (
c
), 0, (
d
), 0, 
NULL
 )

	)

432 
	#z˛SS_Síd_IAS_ACE_GëZ⁄eIDM≠Cmd
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_SS_IAS_ACE
,\

433 
COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP
, 
TRUE
,\

434 
ZCL_FRAME_CLIENT_SERVER_DIR
, (
c
), 0, (
d
), 0, 
NULL
 )

	)

449 
ZSètus_t
 
z˛SS_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛SS_AµCÆlbacks_t
 *
ˇŒbacks
 );

451 #ifde‡
ZCL_ZONE


457 
ZSètus_t
 
z˛SS_IAS_Síd_Z⁄eSètusCh™geNŸifiˇti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

458 
uöt16
 
z⁄eSètus
, 
uöt8
 
exãndedSètus
,

459 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

466 
ZSètus_t
 
z˛SS_IAS_Síd_Z⁄eSètusEƒﬁlReque°Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

467 
uöt16
 
z⁄eTy≥
, uöt16 
m™uÁ˘uªrCode
,

468 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

475 
ZSètus_t
 
z˛SS_IAS_Síd_Z⁄eSètusEƒﬁlRe•⁄£Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

476 
uöt8
 
ª•⁄£Code
, uöt8 
z⁄eID
,

477 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

480 #ifde‡
ZCL_ACE


485 
ZSètus_t
 
z˛SS_Síd_IAS_ACE_ArmCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

486 
uöt8
 
¨mMode
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

493 
ZSètus_t
 
z˛SS_Síd_IAS_ACE_By∑ssCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

494 
uöt8
 
numbîOfZ⁄es
, uöt8 *
by∑ssBuf
,

495 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

501 
ZSètus_t
 
z˛SS_Síd_IAS_ACE_GëZ⁄eInf‹m©i⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

502 
uöt8
 
z⁄eID
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

507 
ZSètus_t
 
z˛SS_Síd_IAS_ACE_ArmRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

508 
uöt8
 
¨mNŸifiˇti⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

514 
ZSètus_t
 
z˛SS_Síd_IAS_ACE_GëZ⁄eIDM≠Re•⁄£Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

515 
uöt16
 *
z⁄eIDM≠
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

523 
ZSètus_t
 
z˛SS_Síd_IAS_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

524 
uöt8
 
z⁄eID
, 
uöt16
 
z⁄eTy≥
, uöt8 *
õìAddªss
,

525 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

528 #ifde‡
ZCL_WD


533 
ZSètus_t
 
z˛SS_Síd_IAS_WD_SèπW¨nögCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

534 
z˛CmdSSWDSèπW¨nögPaylﬂd_t
 *
w¨nög
,

535 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

541 
ZSètus_t
 
z˛SS_Síd_IAS_WD_SquawkCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

542 
z˛CmdSSWDSquawkPaylﬂd_t
 *
squawk
,

543 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

546 #i‡
deföed
(
ZCL_ZONE
Ë|| deföed(
ZCL_ACE
)

551 
z˛SS_Upd©eZ⁄eAddªss
–
uöt8
 
ídpoöt
, uöt8 
z⁄eID
, uöt8 *
õìAddr
 );

558 
uöt8
 
z˛SS_RemoveZ⁄e
–uöt8 
ídpoöt
, uöt8 
z⁄eID
 );

564 #ifde‡
__˝lu•lus


	@Components/stack/zdo/ZDApp.c

45 
	~"ZComDef.h
"

46 
	~"ZMac.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

49 
	~"OSAL_PwrMgr.h
"

50 
	~"OSAL_Nv.h
"

51 
	~"AF.h
"

52 
	~"APSMEDE.h
"

53 
	~"NLMEDE.h
"

54 
	~"AddrMgr.h
"

55 
	~"ZDProfûe.h
"

56 
	~"ZDObje˘.h
"

57 
	~"ZDC⁄fig.h
"

58 
	~"ZDSecMgr.h
"

59 
	~"ZDAµ.h
"

60 
	~"DebugTø˚.h
"

61 
	~"nwk_utû.h
"

62 
	~"OnBﬂrd.h
"

63 
	~"ZGlobÆs.h
"

64 
	~"ZDNwkMgr.h
"

65 
	~"πg.h
"

67 
	~"s•.h
"

70 
	~"hÆ_Àd.h
"

71 
	~"hÆ_lcd.h
"

72 
	~"hÆ_key.h
"

74 #i‡
deföed
–
MT_MAC_FUNC
 ) || deföed–
MT_MAC_CB_FUNC
 )

82 #i‡!
deföed
–
NWK_START_DELAY
 )

83 
	#NWK_START_DELAY
 100

85 

	)

86 #i‡!
deföed
–
LEAVE_RESET_DELAY
 )

87 
	#LEAVE_RESET_DELAY
 5000

89 

	)

92 
	#ZDO_INIT_HOLD_NWK_START
 0xFFFF

	)

94 #i‡!
deföed
–
EXTENDED_JOINING_RANDOM_MASK
 )

95 
	#EXTENDED_JOINING_RANDOM_MASK
 0x007F

	)

98 #i‡!
deföed
–
BEACON_REQUEST_DELAY
 )

99 
	#BEACON_REQUEST_DELAY
 100

101 

	)

102 #i‡!
deföed
–
BEACON_REQ_DELAY_MASK
 )

103 
	#BEACON_REQ_DELAY_MASK
 0x007F

	)

106 
	#MAX_RESUME_RETRY
 3

	)

108 
	#MAX_DEVICE_UNAUTH_TIMEOUT
 5000

109 

	)

111 
	#DEFAULT_BEACON_ORDER
 
BEACON_ORDER_NO_BEACONS


	)

112 
	#DEFAULT_SUPERFRAME_ORDER
 
DEFAULT_BEACON_ORDER


	)

114 #i‡!
deföed
–
MAX_NWK_FRAMECOUNTER_CHANGES
 )

117 
	#MAX_NWK_FRAMECOUNTER_CHANGES
 1000

	)

121 
	#ZDAPP_LEAVE_CTRL_INIT
 0

	)

122 
	#ZDAPP_LEAVE_CTRL_SET
 1

	)

123 
	#ZDAPP_LEAVE_CTRL_RA
 2

	)

126 
	#ZDAµ_NwkWrôeNVReque°
 
AddrMgrWrôeNVReque°


	)

129 #i‡!
deföed
 
ZDO_NV_SAVE_RFDs


130 
	#ZDO_NV_SAVE_RFDs
 
TRUE


	)

134 #i‡
ZDO_NV_SAVE_RFDs


135 
	#ZDAPP_UPDATE_NWK_NV_TIME
 700

	)

137 
	#ZDAPP_UPDATE_NWK_NV_TIME
 65000

	)

144 #i‡
deföed
–
LCD_SUPPORTED
 )

145 
uöt8
 
	gM©chR•s
 = 0;

148 
uöt8
 
	gzdoDiscCou¡î
 = 1;

150 
zAddrTy≥_t
 
	gZDAµNwkAddr
;

152 
uöt8
 
	gzd≠pMgmtNwkDiscR•TønsSeq
;

153 
uöt8
 
	gzd≠pMgmtNwkDiscReqInProgªss
 = 
FALSE
;

154 
zAddrTy≥_t
 
	gzd≠pMgmtNwkDiscR•Addr
;

155 
uöt8
 
	gzd≠pMgmtNwkDiscSèπIndex
;

156 
uöt8
 
	gzd≠pMgmtSavedNwkSèã
;

158 
uöt16
 
	gnwkFømeCou¡îCh™ges
 = 0;

159 
uöt8
 
	gc⁄töueJoöög
 = 
TRUE
;

161 
uöt8
 
	g_tmpRejoöSèã
;

164 
uöt8
 
	gZDO_U£ExãndedPANID
[
Z_EXTADDR_LEN
];

166 
p‚ZdoCb
 
	gzdoCBFunc
[
MAX_ZDO_CB_FUNC
];

180 
ZDAµ_Nëw‹kSèπEvt
( );

181 
ZDAµ_Devi˚AuthEvt
( );

182 
ZDAµ_SaveNëw‹kSèãEvt
( );

184 
uöt8
 
ZDAµ_RódNëw‹kRe°‹eSèã
( );

185 
uöt8
 
ZDAµ_Re°‹eNëw‹kSèã
( );

186 
ZDAµDëîmöeDevi˚Ty≥
( );

187 
ZDAµ_InôU£rDesc
( );

188 
ZDAµCheckF‹HﬁdKey
( );

189 
ZDAµ_Pro˚ssOSALMsg
–
oßl_evít_hdr_t
 *
msgPå
 );

190 
ZDAµ_Pro˚ssNëw‹kJoö
( );

191 
ZDAµ_SëCo‹dAddªss
–
uöt8
 
ídPoöt
, uöt8 
d°EP
 );

192 
uöt8
 
ZDAµ_Re°‹eNwkKey
( );

193 
√tw‹kDesc_t
* 
ZDAµ_NwkDescLi°Pro˚ssög
();

195 
ZDAµ_SecInô
–
uöt8
 
°©e
 );

196 
UINT16
 
ZDAµ_Pro˚ssSecEvít
–
uöt8
 
èsk_id
, UINT16 
evíts
 );

197 
ZDAµ_Pro˚ssSecMsg
–
oßl_evít_hdr_t
 *
msgPå
 );

199 
ZDAµ_SídMsg
–
uöt8
 
èskID
, uöt8 
cmd
, uöt8 
Àn
, uöt8 *
buf
 );

201 
ZDAµ_Re£tTimîSèπ
–
uöt16
 
dñay
 );

202 
ZDAµ_Re£tTimîC™˚l
( );

203 
ZDAµ_LóveCålInô
( );

204 
ZDAµ_LóveCålSë
–
uöt8
 
ø
 );

205 
uöt8
 
ZDAµ_LóveCålBy∑ss
( );

206 
ZDAµ_LóveCålSèπup
–
devSèãs_t
* 
°©e
, 
uöt16
* 
°¨tDñay
 );

207 
ZDAµ_LóveUpd©e
–
uöt16
 
nwkAddr
, 
uöt8
* 
extAddr
,

208 
uöt8
 
ªmoveChûdªn
 );

209 
ZDAµ_NodeProfûeSync
–
uöt8
 
°ackProfûe
 );

210 
ZDAµ_Pro˚ssMsgCBs
–
zdoIncomögMsg_t
 *
öMsg
 );

211 
ZDAµ_Regi°îCBs
( );

212 
ZDAµ_InôZdoCBFunc
();

218 
uöt8
 
	gZDAµTaskID
;

219 
uöt8
 
	gnwkSètus
;

220 
ídPoötDesc_t
 *
	gZDAµ_AutoFödMode_ïDesc
 = (ídPoötDesc_à*)
NULL
;

221 
uöt8
 
	gZDAµ_LóveCål
;

223 #i‡
deföed
–
HOLD_AUTO_START
 )

224 
devSèãs_t
 
	gdevSèã
 = 
DEV_HOLD
;

226 
devSèãs_t
 
	gdevSèã
 = 
DEV_INIT
;

229 #i‡–
ZG_BUILD_RTRONLY_TYPE
 ) || ( 
ZG_BUILD_ENDDEVICE_TYPE
 )

230 
devSèπModes_t
 
	gdevSèπMode
 = 
MODE_JOIN
;

235 
devSèπModes_t
 
	gdevSèπMode
 = 
MODE_HARD
;

238 
uöt8
 
	gªåyC¡
;

240 
ídPoötDesc_t
 
	gZDAµ_ïDesc
 =

242 
ZDO_EP
,

243 &
ZDAµTaskID
,

244 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)
NULL
,

245 (
afNëw‹kL©ícyReq_t
)0

248 
uöt16
 
	gZDAµ_SavedPﬁlR©e
 = 
POLL_RATE
;

259 
	$ZDAµ_Inô
–
uöt8
 
èsk_id
 )

262 
ZDAµTaskID
 = 
èsk_id
;

265 
ZDAµNwkAddr
.
addrMode
 = 
Addr16Bô
;

266 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 = 
INVALID_NODE_ADDR
;

267 ()
	`NLME_GëExtAddr
();

270 
	`ZDAµCheckF‹HﬁdKey
();

273 
	`ZDO_Inô
();

278 
	`afRegi°î
–(
ídPoötDesc_t
 *)&
ZDAµ_ïDesc
 );

280 #i‡
	`deföed
–
ZDO_USERDESC_RESPONSE
 )

281 
	`ZDAµ_InôU£rDesc
();

285 i‡–
devSèã
 !
DEV_HOLD
 )

287 
	`ZDOInôDevi˚
( 0 );

291 
	`ZDOInôDevi˚
–
ZDO_INIT_HOLD_NWK_START
 );

293 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0, 50, 500 );

297 
	`ZDAµ_InôZdoCBFunc
();

299 
	`ZDAµ_Regi°îCBs
();

300 
	}
}

311 
	$ZDAµ_SecInô
–
uöt8
 
°©e
 )

313 
uöt8
 
zgPªC⁄figKey
[
SEC_KEY_LEN
];

315 i‡–
ZG_SECURE_ENABLED
 && 
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

318 
ZDO_C⁄fig_Node_Des¸ùt‹
.
SîvîMask
 |
PRIM_TRUST_CENTER
;

321 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

323 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 |
CAPINFO_SECURITY_CAPABLE
;

327 
	`ZDSecMgrInô
(
°©e
);

329 i‡–
ZG_SECURE_ENABLED
 )

331 i‡–
°©e
 !
ZDO_INITDEV_RESTORED_NETWORK_STATE
 )

333 
nwkFømeCou¡î
 = 0;

335 if–
_NIB
.
nwkKeyLﬂded
 =
FALSE
 )

337 i‡––
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 ) ||

338 ––
zgSecurôyMode
 =
ZG_SECURITY_RESIDENTIAL
 ) && 
zgPªC⁄figKeys
 ) )

340 
	`ZDSecMgrRódKeyFromNv
(
ZCD_NV_PRECFGKEY
, 
zgPªC⁄figKey
);

341 
	`SSP_Upd©eNwkKey
–
zgPªC⁄figKey
, 0);

342 
	`SSP_SwôchNwkKey
( 0 );

345 
	`oßl_mem£t
(
zgPªC⁄figKey
, 0x00, 
SEC_KEY_LEN
);

350 
	}
}

363 
UINT16
 
	$ZDAµ_evít_lo›
–
uöt8
 
èsk_id
, 
UINT16
 
evíts
 )

365 
uöt8
 *
msg_±r
;

367 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

369  (
msg_±r
 = 
	`oßl_msg_ª˚ive
–
ZDAµTaskID
 )) )

371 
	`ZDAµ_Pro˚ssOSALMsg
–(
oßl_evít_hdr_t
 *)
msg_±r
 );

374 
	`oßl_msg_dóŒoˇã
–
msg_±r
 );

378  (
evíts
 ^ 
SYS_EVENT_MSG
);

381 i‡–
evíts
 & 
ZDO_NETWORK_INIT
 )

384 
devSèã
 = 
DEV_INIT
;

385 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

387 
	`ZDO_SèπDevi˚
–(
uöt8
)
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
, 
devSèπMode
,

388 
DEFAULT_BEACON_ORDER
, 
DEFAULT_SUPERFRAME_ORDER
 );

391  (
evíts
 ^ 
ZDO_NETWORK_INIT
);

394 i‡–
ZSTACK_ROUTER_BUILD
 )

396 i‡–
evíts
 & 
ZDO_NETWORK_START
 )

398 
	`ZDAµ_Nëw‹kSèπEvt
();

401  (
evíts
 ^ 
ZDO_NETWORK_START
);

404 i‡–
evíts
 & 
ZDO_ROUTER_START
 )

406 i‡–
nwkSètus
 =
ZSuc˚ss
 )

408 i‡–
devSèã
 =
DEV_END_DEVICE
 )

409 
devSèã
 = 
DEV_ROUTER
;

411 
	`oßl_pwrmgr_devi˚
–
PWRMGR_ALWAYS_ON
 );

417 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

420  (
evíts
 ^ 
ZDO_ROUTER_START
);

424 i‡–
evíts
 & 
ZDO_STATE_CHANGE_EVT
 )

426 
	`ZDO_Upd©eNwkSètus
–
devSèã
 );

429 i‡–
zgC⁄˚¡øt‹E«bÀ
 =
TRUE
 )

432 
	`oßl_°¨t_timîEx
–
NWK_TaskID
, 
NWK_MTO_RTG_REQ_EVT
, 100 );

436  (
evíts
 ^ 
ZDO_STATE_CHANGE_EVT
);

439 i‡–
evíts
 & 
ZDO_COMMAND_CNF
 )

444  (
evíts
 ^ 
ZDO_COMMAND_CNF
);

447 i‡–
evíts
 & 
ZDO_NWK_UPDATE_NV
 )

449 
	`ZDAµ_SaveNëw‹kSèãEvt
();

452  (
evíts
 ^ 
ZDO_NWK_UPDATE_NV
);

455 i‡–
evíts
 & 
ZDO_DEVICE_RESET
 )

457 #ifde‡
ZBA_FALLBACK_NWKKEY


458 i‡–
devSèã
 =
DEV_END_DEVICE_UNAUTH
 )

460 
	`ZDSecMgrFÆlbackNwkKey
();

466 
	`zgWrôeSèπupO±i⁄s
–
ZG_STARTUP_SET
, 
ZCD_STARTOPT_DEFAULT_NETWORK_STATE
 );

470 
	`Sy°emRe£tSo·
();

474 i‡–
ZG_SECURE_ENABLED
 )

476  ( 
	`ZDAµ_Pro˚ssSecEvít
–
èsk_id
, 
evíts
 ) );

483 
	}
}

495 
UINT16
 
	$ZDAµ_Pro˚ssSecEvít
–
uöt8
 
èsk_id
, 
UINT16
 
evíts
 )

497 ()
èsk_id
;

499 i‡–
ZSTACK_ROUTER_BUILD
 )

501 i‡–
evíts
 & 
ZDO_NEW_DEVICE
 )

504 i‡–
	`ZDSecMgrNewDevi˚Evít
(Ë=
TRUE
 )

506 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_NEW_DEVICE
, 1000 );

510  (
evíts
 ^ 
ZDO_NEW_DEVICE
);

514 i‡–(
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
)

515 || (
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_SE_STANDARD
) )

517 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

519 i‡–
evíts
 & 
ZDO_SECMGR_EVENT
 )

521 
	`ZDSecMgrEvít
();

524  (
evíts
 ^ 
ZDO_SECMGR_EVENT
);

529 i‡–
evíts
 & 
ZDO_DEVICE_AUTH
 )

531 
	`ZDAµ_Devi˚AuthEvt
();

534  (
evíts
 ^ 
ZDO_DEVICE_AUTH
);

537 i‡–
evíts
 & 
ZDO_FRAMECOUNTER_CHANGE
 )

539 i‡–
nwkFømeCou¡îCh™ges
++ > 
MAX_NWK_FRAMECOUNTER_CHANGES
 )

541 
	`ZDAµ_SaveNwkKey
();

545  (
evíts
 ^ 
ZDO_FRAMECOUNTER_CHANGE
);

548 i‡–
evíts
 & 
ZDO_APS_FRAMECOUNTER_CHANGE
 )

550 #i‡
	`deföed
 (
NV_RESTORE
)

551 
	`ZDSecMgrSaveApsLökKey
();

555  (
evíts
 ^ 
ZDO_APS_FRAMECOUNTER_CHANGE
);

558 i‡–
evíts
 & 
ZDO_TCLK_FRAMECOUNTER_CHANGE
 )

560 
	`ZDSecMgrSaveTCLökKey
();

563  (
evíts
 ^ 
ZDO_TCLK_FRAMECOUNTER_CHANGE
);

568 
	}
}

607 
uöt8
 
	$ZDOInôDevi˚
–
uöt16
 
°¨tDñay
 )

609 
uöt8
 
√tw‹kSèãNV
 = 
ZDO_INITDEV_NEW_NETWORK_STATE
;

610 
uöt16
 
exãndedDñay
 = 0;

612 i‡–
devSèã
 =
DEV_HOLD
 )

615 
	`zgInôIãms
–
FALSE
 );

618 
	`ZDC⁄fig_InôDes¸ùt‹s
();

620 
_NIB
.
C≠abûôyFœgs
 = 
ZDO_C⁄fig_Node_Des¸ùt‹
.CapabilityFlags;

622 #i‡
	`deföed
 ( 
NV_RESTORE
 )

626 i‡–
	`HÆKeyRód
(Ë=
SW_BYPASS_NV
 )

627 
√tw‹kSèãNV
 = 
ZDO_INITDEV_NEW_NETWORK_STATE
;

631 
√tw‹kSèãNV
 = 
	`ZDAµ_RódNëw‹kRe°‹eSèã
();

634 i‡–
√tw‹kSèãNV
 =
ZDO_INITDEV_RESTORED_NETWORK_STATE
 )

636 
√tw‹kSèãNV
 = 
	`ZDAµ_Re°‹eNëw‹kSèã
();

641 
	`NLME_InôNV
();

642 
	`NLME_SëDeÁu…NV
();

644 
	`ZDSecMgrCÀ¨NVKeyVÆues
();

648 i‡–
√tw‹kSèãNV
 =
ZDO_INITDEV_NEW_NETWORK_STATE
 )

650 
	`ZDAµDëîmöeDevi˚Ty≥
();

653 
exãndedDñay
 = (
uöt16
)((
NWK_START_DELAY
 + 
°¨tDñay
)

654 + (
	`oßl_ønd
(Ë& 
EXTENDED_JOINING_RANDOM_MASK
));

658 
	`ZDAµ_SecInô
–
√tw‹kSèãNV
 );

660 if–
ZDO_INIT_HOLD_NWK_START
 !
°¨tDñay
 )

662 
devSèã
 = 
DEV_INIT
;

665 
	`ZDAµ_LóveCålInô
();

668 
	`ZDAµ_LóveCålSèπup
–&
devSèã
, &
°¨tDñay
 );

671 i‡–
devSèã
 =
DEV_HOLD
 )

674 
	`zgWrôeSèπupO±i⁄s
–
ZG_STARTUP_SET
, 
ZCD_STARTOPT_DEFAULT_NETWORK_STATE
 );

677 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

679  ( 
ZDO_INITDEV_LEAVE_NOT_STARTED
 );

683 
	`ZDAµ_Nëw‹kInô
–
exãndedDñay
 );

687 
	`NLME_SëBrﬂdˇ°Fûãr
–
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 );

689  ( 
√tw‹kSèãNV
 );

690 
	}
}

707 
uöt8
 
	$ZDAµ_RódNëw‹kRe°‹eSèã
( )

709 
uöt8
 
√tw‹kSèãNV
 = 
ZDO_INITDEV_RESTORED_NETWORK_STATE
;

712 i‡–
	`zgRódSèπupO±i⁄s
(Ë& 
ZCD_STARTOPT_DEFAULT_NETWORK_STATE
 )

714 
√tw‹kSèãNV
 = 
ZDO_INITDEV_NEW_NETWORK_STATE
;

717  ( 
√tw‹kSèãNV
 );

718 
	}
}

735 
	$ZDAµDëîmöeDevi˚Ty≥
( )

737 i‡–
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_COORDINATOR
 )

739 
devSèπMode
 = 
MODE_HARD
;

740 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_COORDINATOR
;

744 i‡–
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_ROUTER
 )

745 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_ROUTER
;

746 i‡–
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_ENDDEVICE
 )

747 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_DEVICE
;

751 i‡–
	`nwk_ExtPANIDVÆid
–
AIB_≠sU£ExãndedPANID
 ) =
Ál£
 )

753 
devSèπMode
 = 
MODE_JOIN
;

757 
devSèπMode
 = 
MODE_REJOIN
;

760 
	}
}

771 
	$ZDAµ_Nëw‹kSèπEvt
( )

773 i‡–
nwkSètus
 =
ZSuc˚ss
 )

776 i‡–
devSèã
 =
DEV_COORD_STARTING
 )

778 
devSèã
 = 
DEV_ZB_COORD
;

781 
	`oßl_pwrmgr_devi˚
–
PWRMGR_ALWAYS_ON
 );

782 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

787 i‡––
	`NLME_GëE√rgyThªshﬁd
(Ë+ 
ENERGY_SCAN_INCREMENT
 ) < 0xff )

789 
	`NLME_SëE√rgyThªshﬁd
–(
uöt8
)(
	`NLME_GëE√rgyThªshﬁd
(Ë+ 
ENERGY_SCAN_INCREMENT
) );

790 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_NETWORK_INIT
 );

795 
devSèã
 = 
DEV_INIT
;

796 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

799 
	}
}

810 
	$ZDAµ_Devi˚AuthEvt
( )

813 i‡–
devSèã
 =
DEV_END_DEVICE_UNAUTH
 )

816 
	`ZDAµ_Re£tTimîC™˚l
();

818 
devSèã
 = 
DEV_END_DEVICE
;

819 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

822 #i‡
	`deföed
 ( 
POWER_SAVING
 )

823 
	`oßl_pwrmgr_devi˚
–
PWRMGR_BATTERY
 );

826 i‡–
ZSTACK_ROUTER_BUILD
 )

828 i‡–
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 !
NODETYPE_DEVICE
 )

831 
	`NLME_SèπRouãrReque°
–0, 0, 
Ál£
 );

836 
	`ZDAµ_NVUpd©e
();

839 
	`ZDAµ_SaveNwkKey
();

841 
	`ZDAµ_A¬oun˚NewAddªss
();

843 i‡–(
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 & 
CAPINFO_RCVR_ON_IDLE
) == 0 )

845 
	`NLME_SëPﬁlR©e
–
ZDAµ_SavedPﬁlR©e
 );

850 
	`ZDAµ_NVUpd©e
();

852 
	}
}

863 
	$ZDAµ_SaveNëw‹kSèãEvt
( )

865 #i‡
	`deföed
 ( 
NV_RESTORE
 )

866 #i‡
	`deföed
 ( 
NV_TURN_OFF_RADIO
 )

868 
uöt8
 
RxOnIdÀ
;

869 
uöt8
 
x
 = 
Ál£
;

870 
	`ZMacGëReq
–
ZMacRxOnIdÀ
, &
RxOnIdÀ
 );

871 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
x
 );

875 
	`NLME_Upd©eNV
–
NWK_NV_NIB_ENABLE
 |

876 
NWK_NV_DEVICELIST_ENABLE
 |

877 
NWK_NV_BINDING_ENABLE
 |

878 
NWK_NV_ADDRMGR_ENABLE
 );

882 
	`zgWrôeSèπupO±i⁄s
–
FALSE
, 
ZCD_STARTOPT_DEFAULT_NETWORK_STATE
 );

884 #i‡
	`deföed
 ( 
NV_TURN_OFF_RADIO
 )

885 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
RxOnIdÀ
 );

888 
	}
}

906 
uöt8
 
	$ZDAµ_Re°‹eNëw‹kSèã
( )

908 
uöt8
 
nvSèt
;

911 
nvSèt
 = 
	`NLME_InôNV
();

913 i‡–
nvSèt
 !
NV_OPER_FAILED
 )

915 i‡–
	`NLME_Re°‹eFromNV
() )

918 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 = 
	`NLME_GëSh‹tAddr
();

919 i‡–
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 == 0 )

920 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_COORDINATOR
;

921 
devSèπMode
 = 
MODE_RESUME
;

922 
	`oßl_˝yExtAddr
–
ZDO_U£ExãndedPANID
, 
_NIB
.
exãndedPANID
 );

925 
nvSèt
 = 
NV_ITEM_UNINIT
;

927 i‡–
ZG_SECURE_ENABLED
 )

929 
nwkFømeCou¡îCh™ges
 = 0;

931 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

933 
	`ZDAµ_Re°‹eNwkKey
();

942 i‡–
nvSèt
 =
ZSUCCESS
 )

943  ( 
ZDO_INITDEV_RESTORED_NETWORK_STATE
 );

945  ( 
ZDO_INITDEV_NEW_NETWORK_STATE
 );

946 
	}
}

959 
	$ZDAµ_InôU£rDesc
( )

961 
U£rDes¸ùt‹F‹m©_t
 
ZDO_DeÁu…U£rDes¸ùt‹
;

966 
	`oßl_mem£t
–&
ZDO_DeÁu…U£rDes¸ùt‹
, 0, –
U£rDes¸ùt‹F‹m©_t
 ) );

967 i‡–
ZSUCCESS
 =
	`oßl_nv_ôem_öô
–
ZCD_NV_USERDESC
,

968 (
U£rDes¸ùt‹F‹m©_t
), (*)&
ZDO_DeÁu…U£rDes¸ùt‹
 ) )

970 i‡–
ZSUCCESS
 =
	`oßl_nv_ªad
–
ZCD_NV_USERDESC
, 0,

971 (
U£rDes¸ùt‹F‹m©_t
), (*)&
ZDO_DeÁu…U£rDes¸ùt‹
 ) )

973 i‡–
ZDO_DeÁu…U£rDes¸ùt‹
.
Àn
 != 0 )

975 
ZDO_C⁄fig_Node_Des¸ùt‹
.
U£rDescAvaû
 = 
TRUE
;

979 
	}
}

990 
	$ZDAµCheckF‹HﬁdKey
( )

992 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

996 i‡–
	`HÆKeyRód
 (Ë=
SW_BYPASS_START
)

999 
devSèã
 = 
DEV_HOLD
;

1002 
	}
}

1013 
	$ZDAµ_Pro˚ssOSALMsg
–
oßl_evít_hdr_t
 *
msgPå
 )

1016 
uöt8
 
£¡EP
;

1017 
uöt8
 
£¡Sètus
;

1018 
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
;

1019 
uöt8
 
tmp
;

1021  
msgPå
->
evít
 )

1024 
AF_INCOMING_MSG_CMD
:

1025 
	`ZDP_IncomögD©a
–(
afIncomögMSGPackë_t
 *)
msgPå
 );

1028 
ZDO_CB_MSG
:

1029 
	`ZDAµ_Pro˚ssMsgCBs
–(
zdoIncomögMsg_t
 *)
msgPå
 );

1032 
AF_DATA_CONFIRM_CMD
:

1036 
afD©aC⁄fúm
 = (
afD©aC⁄fúm_t
 *)
msgPå
;

1037 
£¡EP
 = 
afD©aC⁄fúm
->
ídpoöt
;

1038 
£¡Sètus
 = 
afD©aC⁄fúm
->
hdr
.
°©us
;

1041 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 )

1042 i‡–
pZDNwkMgr_Pro˚ssD©aC⁄fúm
 )

1043 
	`pZDNwkMgr_Pro˚ssD©aC⁄fúm
–
afD©aC⁄fúm
 );

1045 ()
£¡EP
;

1046 ()
£¡Sètus
;

1049 
ZDO_NWK_DISC_CNF
:

1050 i‡(
devSèã
 !
DEV_NWK_DISC
)

1053 i‡–
ZG_BUILD_JOINING_TYPE
 && 
ZG_DEVICE_JOINING_TYPE
 )

1057 
√tw‹kDesc_t
 *
pCho£nNwk
;

1058 i‡––(
pCho£nNwk
 = 
	`ZDAµ_NwkDescLi°Pro˚ssög
()Ë!
NULL
 ) && (
zdoDiscCou¡î
 > 
NUM_DISC_ATTEMPTS
) )

1060 i‡–
devSèπMode
 =
MODE_JOIN
 )

1062 
devSèã
 = 
DEV_NWK_JOINING
;

1064 
	`ZDAµ_NodeProfûeSync
–
pCho£nNwk
->
°ackProfûe
);

1066 i‡–
	`NLME_JoöReque°
–
pCho£nNwk
->
exãndedPANID
,ÖCho£nNwk->
∑nId
,

1067 
pCho£nNwk
->
logiˇlCh™√l
,

1068 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
,

1069 
pCho£nNwk
->
cho£nRouãr
,ÖCho£nNwk->
cho£nRouãrDïth
 ) !
ZSuc˚ss
 )

1071 
	`ZDAµ_Nëw‹kInô
–(
uöt16
)(
NWK_START_DELAY


1072 + ((
uöt16
)(
	`oßl_ønd
()& 
EXTENDED_JOINING_RANDOM_MASK
))) );

1075 i‡–
devSèπMode
 =
MODE_REJOIN
 )

1077 
devSèã
 = 
DEV_NWK_REJOIN
;

1081 i‡–
_NIB
.
nwkDevAddªss
 =
INVALID_NODE_ADDR
 )

1083 
_NIB
.
nwkDevAddªss
 = 
	`oßl_ønd
();

1084 
	`ZMacSëReq
–
ZMacSh‹tAddªss
, (
byã
*)&
_NIB
.
nwkDevAddªss
 );

1087 i‡–
ZG_SECURE_ENABLED
 )

1089 
	`ZDAµ_Re°‹eNwkKey
();

1093 i‡–
_NIB
.
nwkP™Id
 =
INVALID_PAN_ID
 )

1095 
_NIB
.
nwkP™Id
 = 
pCho£nNwk
->
∑nId
;

1096 
	`ZMacSëReq
–
ZMacP™Id
, (
byã
*)&(
_NIB
.
nwkP™Id
) );

1099 
tmp
 = 
åue
;

1100 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
tmp
 );

1101 i‡–
	`NLME_ReJoöReque°
–
ZDO_U£ExãndedPANID
, 
pCho£nNwk
->
logiˇlCh™√l
Ë!
ZSuc˚ss
 )

1103 
	`ZDAµ_Nëw‹kInô
–(
uöt16
)(
NWK_START_DELAY


1104 + ((
uöt16
)(
	`oßl_ønd
()& 
EXTENDED_JOINING_RANDOM_MASK
))) );

1108 i‡–
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 & 
CAPINFO_RCVR_ON_IDLE
 )

1111 
	`NLME_SëPﬁlR©e
( 0 );

1112 
	`NLME_SëQueuedPﬁlR©e
( 0 );

1113 
	`NLME_SëRe•⁄£R©e
( 0 );

1117 i‡–(
ZG_SECURE_ENABLED
Ë&& (
devSèπMode
 =
MODE_JOIN
) )

1119 
ZDAµ_SavedPﬁlR©e
 = 
zgPﬁlR©e
;

1120 
	`NLME_SëPﬁlR©e
–
zgRejoöPﬁlR©e
 );

1126 i‡–
c⁄töueJoöög
 )

1128 #i‡
	`deföed
 ( 
MANAGED_SCAN
 )

1129 
	`ZDAµ_Nëw‹kInô
–
MANAGEDSCAN_DELAY_BETWEEN_SCANS
 );

1131 
zdoDiscCou¡î
++;

1132 
	`ZDAµ_Nëw‹kInô
–(
uöt16
)(
BEACON_REQUEST_DELAY


1133 + ((
uöt16
)(
	`oßl_ønd
()& 
BEACON_REQ_DELAY_MASK
))) );

1140 
ZDO_NWK_JOIN_IND
:

1141 i‡–
ZG_BUILD_JOINING_TYPE
 && 
ZG_DEVICE_JOINING_TYPE
 )

1143 
	`ZDAµ_Pro˚ssNëw‹kJoö
();

1147 
ZDO_NWK_JOIN_REQ
:

1148 i‡–
ZG_BUILD_JOINING_TYPE
 && 
ZG_DEVICE_JOINING_TYPE
 )

1150 
ªåyC¡
 = 0;

1151 
devSèπMode
 = 
MODE_RESUME
;

1152 
_tmpRejoöSèã
 = 
åue
;

1153 
	`oßl_˝yExtAddr
–
ZDO_U£ExãndedPANID
, 
_NIB
.
exãndedPANID
 );

1154 
zgDeÁu…SèπögSˇnDuøti⁄
 = 
BEACON_ORDER_60_MSEC
;

1155 
	`ZDAµ_Nëw‹kInô
( 0 );

1160 i‡–
ZG_SECURE_ENABLED
 )

1161 
	`ZDAµ_Pro˚ssSecMsg
–
msgPå
 );

1165 
	}
}

1176 
	$ZDAµ_Pro˚ssMsgCBs
–
zdoIncomögMsg_t
 *
öMsg
 )

1178  
öMsg
->
˛u°îID
 )

1180 #i‡
	`deföed
 ( 
ZDO_NWKADDR_REQUEST
 ) || deföed ( 
ZDO_IEEEADDR_REQUEST
 ) || deföed ( 
REFLECTOR
 )

1181 
NWK_addr_r•
:

1182 
IEEE_addr_r•
:

1184 
ZDO_NwkIEEEAddrRe•_t
 *
pAddrR•
;

1185 
pAddrR•
 = 
	`ZDO_P¨£AddrR•
–
öMsg
 );

1186 i‡–
pAddrR•
 )

1188 i‡–
pAddrR•
->
°©us
 =
ZSuc˚ss
 )

1190 
	`ZDO_Upd©eAddrM™agî
–
pAddrR•
->
nwkAddr
,ÖAddrR•->
extAddr
 );

1192 
	`oßl_mem_‰ì
–
pAddrR•
 );

1198 #i‡
	`deföed
 ( 
REFLECTOR
 )

1199 
Böd_ªq
:

1200 
Unböd_ªq
:

1202 
ZDO_BödUnbödReq_t
 
bödReq
;

1203 
	`ZDO_P¨£BödUnbödReq
–
öMsg
, &
bödReq
 );

1204 
	`ZDO_Pro˚ssBödUnbödReq
–
öMsg
, &
bödReq
 );

1209 #i‡–
ZG_BUILD_COORDINATOR_TYPE
 )

1210 
Böd_r•
:

1211 
Unböd_r•
:

1212 i‡(
ZG_DEVICE_COORDINATOR_TYPE
 && 
m©chED
)

1214 
	`ZDM©chSídSèã
(

1215 (
uöt8
)((
öMsg
->
˛u°îID
 =
Böd_r•
Ë? 
ZDMATCH_REASON_BIND_RSP
 : 
ZDMATCH_REASON_UNBIND_RSP
),

1216 
	`ZDO_P¨£BödR•
(
öMsg
), inMsg->
TønsSeq
 );

1220 
End_Devi˚_Böd_ªq
:

1221 i‡(
ZG_DEVICE_COORDINATOR_TYPE
)

1223 
ZDEndDevi˚Böd_t
 
bödReq
;

1224 
	`ZDO_P¨£EndDevi˚BödReq
–
öMsg
, &
bödReq
 );

1225 
	`ZDO_M©chEndDevi˚Böd
–&
bödReq
 );

1228 i‡–
bödReq
.
numInClu°îs
 )

1229 
	`oßl_mem_‰ì
–
bödReq
.
öClu°îs
 );

1230 i‡–
bödReq
.
numOutClu°îs
 )

1231 
	`oßl_mem_‰ì
–
bödReq
.
outClu°îs
 );

1236 
	}
}

1247 
	$ZDAµ_Regi°îCBs
( )

1249 #i‡
	`deföed
 ( 
ZDO_IEEEADDR_REQUEST
 ) || deföed ( 
REFLECTOR
 )

1250 
	`ZDO_Regi°îF‹ZDOMsg
–
ZDAµTaskID
, 
IEEE_addr_r•
 );

1252 #i‡
	`deföed
 ( 
ZDO_NWKADDR_REQUEST
 ) || deföed ( 
REFLECTOR
 )

1253 
	`ZDO_Regi°îF‹ZDOMsg
–
ZDAµTaskID
, 
NWK_addr_r•
 );

1255 #i‡
ZG_BUILD_COORDINATOR_TYPE


1256 
	`ZDO_Regi°îF‹ZDOMsg
–
ZDAµTaskID
, 
Böd_r•
 );

1257 
	`ZDO_Regi°îF‹ZDOMsg
–
ZDAµTaskID
, 
Unböd_r•
 );

1258 
	`ZDO_Regi°îF‹ZDOMsg
–
ZDAµTaskID
, 
End_Devi˚_Böd_ªq
 );

1260 #i‡
	`deföed
 ( 
REFLECTOR
 )

1261 
	`ZDO_Regi°îF‹ZDOMsg
–
ZDAµTaskID
, 
Böd_ªq
 );

1262 
	`ZDO_Regi°îF‹ZDOMsg
–
ZDAµTaskID
, 
Unböd_ªq
 );

1264 
	}
}

1275 
	$ZDAµ_Pro˚ssSecMsg
–
oßl_evít_hdr_t
 *
msgPå
 )

1277  
msgPå
->
evít
 )

1279 
ZDO_ESTABLISH_KEY_CFM
:

1280 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

1282 
	`ZDSecMgrE°ablishKeyCfm
–(
ZDO_E°ablishKeyCfm_t
*)
msgPå
 );

1286 
ZDO_ESTABLISH_KEY_IND
:

1287 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

1289 i‡–
ZG_BUILD_JOINING_TYPE
 && 
ZG_DEVICE_JOINING_TYPE
 )

1291 
	`ZDSecMgrE°ablishKeyInd
–(
ZDO_E°ablishKeyInd_t
*)
msgPå
 );

1296 
ZDO_TRANSPORT_KEY_IND
:

1297 i‡–
ZG_BUILD_JOINING_TYPE
 && 
ZG_DEVICE_JOINING_TYPE
 )

1299 
	`ZDSecMgrTøn•‹tKeyInd
–(
ZDO_Tøn•‹tKeyInd_t
*)
msgPå
 );

1303 
ZDO_UPDATE_DEVICE_IND
:

1304 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

1306 
	`ZDSecMgrUpd©eDevi˚Ind
–(
ZDO_Upd©eDevi˚Ind_t
*)
msgPå
 );

1310 
ZDO_REMOVE_DEVICE_IND
:

1311 i‡–
ZG_BUILD_RTRONLY_TYPE
 && ( 
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_ROUTER
 ) )

1313 
	`ZDSecMgrRemoveDevi˚Ind
–(
ZDO_RemoveDevi˚Ind_t
*)
msgPå
 );

1317 
ZDO_REQUEST_KEY_IND
:

1318 i‡(–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 ) ||

1319 –
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_SE_STANDARD
 ))

1321 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

1323 
	`ZDSecMgrReque°KeyInd
–(
ZDO_Reque°KeyInd_t
*)
msgPå
 );

1328 
ZDO_SWITCH_KEY_IND
:

1329 i‡–
ZG_BUILD_JOINING_TYPE
 && 
ZG_DEVICE_JOINING_TYPE
 )

1331 
	`ZDSecMgrSwôchKeyInd
–(
ZDO_SwôchKeyInd_t
*)
msgPå
 );

1335 
ZDO_AUTHENTICATE_IND
:

1336 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

1338 
	`ZDSecMgrAuthítiˇãInd
–(
ZDO_AuthítiˇãInd_t
*)
msgPå
 );

1342 
ZDO_AUTHENTICATE_CFM
:

1343 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

1345 
	`ZDSecMgrAuthítiˇãCfm
–(
ZDO_AuthítiˇãCfm_t
*)
msgPå
 );

1353 
	}
}

1366 
	$ZDAµ_Pro˚ssNëw‹kJoö
( )

1368 i‡–(
devSèã
 =
DEV_NWK_JOINING
) ||

1369 ((
devSèã
 =
DEV_NWK_ORPHAN
) &&

1370 (
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 =
NODETYPE_ROUTER
)) )

1373 i‡–
nwkSètus
 =
ZSuc˚ss
 )

1375 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

1377 #i‡
	`deföed
 ( 
POWER_SAVING
 )

1378 
	`oßl_pwrmgr_devi˚
–
PWRMGR_BATTERY
 );

1381 i‡–
ZG_SECURE_ENABLED
 && ( 
	`ZDAµ_Re°‹eNwkKey
(Ë=
Ál£
 ) )

1384 
devSèã
 = 
DEV_END_DEVICE_UNAUTH
;

1387 
	`ZDAµ_Re£tTimîSèπ
( 10000 );

1391 i‡–
ZSTACK_ROUTER_BUILD
 )

1393 i‡–
devSèã
 =
DEV_NWK_ORPHAN


1394 && 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 !
NODETYPE_DEVICE
 )

1397 
_NIB
.
nwkSèã
 = 
NWK_ROUTER
;

1401 i‡–
devSèã
 =
DEV_NWK_JOINING
 )

1403 
	`ZDAµ_A¬oun˚NewAddªss
();

1406 
devSèã
 = 
DEV_END_DEVICE
;

1407 i‡–
ZSTACK_ROUTER_BUILD
 )

1410 i‡–
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 !
NODETYPE_DEVICE
 )

1412 
	`NLME_SèπRouãrReque°
–0, 0, 
Ál£
 );

1419 i‡–(
devSèπMode
 =
MODE_RESUME
Ë&& (++
ªåyC¡
 >
MAX_RESUME_RETRY
) )

1421 i‡–
_NIB
.
nwkP™Id
 =0xFFFF || _NIB.nwkP™Id =
INVALID_PAN_ID
 )

1422 
devSèπMode
 = 
MODE_JOIN
;

1425 
devSèπMode
 = 
MODE_REJOIN
;

1426 
_tmpRejoöSèã
 = 
åue
;

1430 i‡–(
	`NLME_GëSh‹tAddr
(Ë!
INVALID_NODE_ADDR
) ||

1431 (
_NIB
.
nwkDevAddªss
 !
INVALID_NODE_ADDR
) )

1433 
uöt16
 
addr
 = 
INVALID_NODE_ADDR
;

1435 
_NIB
.
nwkDevAddªss
 = 
INVALID_NODE_ADDR
;

1436 
	`ZMacSëReq
–
ZMacSh‹tAddªss
, (
uöt8
 *)&
addr
 );

1440 
	`nwkNeighb‹InôTabÀ
();

1441 
	`NLME_NwkDiscTîm
();

1443 
zdoDiscCou¡î
 = 1;

1448 
	`ZDAµ_Nëw‹kInô
–(
uöt16
)(
NWK_START_DELAY


1449 + ((
uöt16
)(
	`oßl_ønd
()& 
EXTENDED_JOINING_RANDOM_MASK
))) );

1452 i‡–
devSèã
 =
DEV_NWK_ORPHAN
 || devSèã =
DEV_NWK_REJOIN
 )

1455 i‡(
nwkSètus
 =
ZSuc˚ss
)

1457 i‡–
ZG_SECURE_ENABLED
 )

1459 
	`ZDAµ_Re°‹eNwkKey
();

1462 
devSèã
 = 
DEV_END_DEVICE
;

1463 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

1465 #i‡
	`deföed
 ( 
POWER_SAVING
 )

1466 
	`oßl_pwrmgr_devi˚
–
PWRMGR_BATTERY
 );

1469 i‡–
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 & 
CAPINFO_RCVR_ON_IDLE
 )

1472 
	`NLME_SëPﬁlR©e
( 0 );

1473 
	`NLME_SëQueuedPﬁlR©e
( 0 );

1474 
	`NLME_SëRe•⁄£R©e
( 0 );

1477 i‡–
ZSTACK_ROUTER_BUILD
 )

1480 i‡–
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 !
NODETYPE_DEVICE
 )

1482 
	`NLME_SèπRouãrReque°
–0, 0, 
Ál£
 );

1486 
	`ZDAµ_A¬oun˚NewAddªss
();

1490 i‡–
devSèπMode
 =
MODE_RESUME
 )

1492 i‡–++
ªåyC¡
 <
MAX_RESUME_RETRY
 )

1494 i‡–
_NIB
.
nwkP™Id
 =0xFFFF || _NIB.nwkP™Id =
INVALID_PAN_ID
 )

1495 
devSèπMode
 = 
MODE_JOIN
;

1498 
devSèπMode
 = 
MODE_REJOIN
;

1499 
_tmpRejoöSèã
 = 
åue
;

1503 if–
AIB_≠sU£In£cuªJoö
 =
åue
 )

1505 
devSèπMode
 = 
MODE_JOIN
;

1510 
	`nwkNeighb‹InôTabÀ
();

1511 
	`NLME_NwkDiscTîm
();

1514 
	`ZDAµ_Nëw‹kInô
–(
uöt16
)(
NWK_START_DELAY


1515 + (
	`oßl_ønd
()& 
EXTENDED_JOINING_RANDOM_MASK
)) );

1518 #i‡
	`deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

1522 i‡–
_NIB
.
nwkAddrAŒoc
 =
NWK_ADDRESSING_STOCHASTIC
 )

1525 
	`ZDAµ_A¬oun˚NewAddªss
();

1528 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

1532 
	}
}

1543 
	$ZDAµ_SaveNwkKey
( )

1545 
nwkA˘iveKeyIãms
 
keyIãms
;

1547 
	`SSP_RódNwkA˘iveKey
–&
keyIãms
 );

1548 
keyIãms
.
‰ameCou¡î
++;

1550 
	`oßl_nv_wrôe
–
ZCD_NV_NWKKEY
, 0, –
nwkA˘iveKeyIãms
 ),

1551 (*)&
keyIãms
 );

1553 
nwkFømeCou¡îCh™ges
 = 0;

1556 
	`oßl_mem£t
–&
keyIãms
, 0x00, (keyItems) );

1558 
	}
}

1569 
	$ZDAµ_Re£tNwkKey
( )

1571 
nwkA˘iveKeyIãms
 
keyIãms
;

1573 
	`oßl_mem£t
–&
keyIãms
, 0, –
nwkA˘iveKeyIãms
 ) );

1574 
	`oßl_nv_wrôe
–
ZCD_NV_NWKKEY
, 0, –
nwkA˘iveKeyIãms
 ),

1575 (*)&
keyIãms
 );

1576 
	}
}

1589 
uöt8
 
	$ZDAµ_Re°‹eNwkKey
( )

1591 
nwkA˘iveKeyIãms
 
keyIãms
;

1592 
uöt8
 
ªt
 = 
Ál£
;

1594 i‡–
	`oßl_nv_ªad
–
ZCD_NV_NWKKEY
, 0, (
nwkA˘iveKeyIãms
), (*)&
keyIãms
 )

1595 =
ZSUCCESS
 )

1597 i‡–
keyIãms
.
‰ameCou¡î
 > 0 )

1600 
keyIãms
.
‰ameCou¡î
 +
MAX_NWK_FRAMECOUNTER_CHANGES
;

1601 
nwkFømeCou¡î
 = 
keyIãms
.
‰ameCou¡î
;

1602 
ªt
 = 
åue
;

1606 
nwkFømeCou¡îCh™ges
 = 
MAX_NWK_FRAMECOUNTER_CHANGES
 + 1;

1609 
	`oßl_mem£t
–&
keyIãms
, 0x00, (keyItems) );

1611  ( 
ªt
 );

1612 
	}
}

1623 
	$ZDAµ_Re£tTimîSèπ
–
uöt16
 
dñay
 )

1626 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_DEVICE_RESET
, 
dñay
 );

1627 
	}
}

1638 
	$ZDAµ_Re£tTimîC™˚l
( )

1641 
	`oßl_°›_timîEx
–
ZDAµTaskID
, 
ZDO_DEVICE_RESET
 );

1642 
	}
}

1653 
	$ZDAµ_LóveCålInô
( )

1655 
uöt8
 
°©us
;

1659 
ZDAµ_LóveCål
 = 
ZDAPP_LEAVE_CTRL_INIT
;

1661 
°©us
 = 
	`oßl_nv_ôem_öô
–
ZCD_NV_LEAVE_CTRL
,

1662 (
ZDAµ_LóveCål
),

1663 &
ZDAµ_LóveCål
 );

1665 i‡–
°©us
 =
ZSUCCESS
 )

1668 
	`oßl_nv_ªad
–
ZCD_NV_LEAVE_CTRL
,

1670 –
uöt8
 ),

1671 &
ZDAµ_LóveCål
);

1673 
	}
}

1684 
	$ZDAµ_LóveCålSë
–
uöt8
 
ø
 )

1686 
ZDAµ_LóveCål
 = 
ZDAPP_LEAVE_CTRL_SET
;

1688 i‡–
ø
 =
TRUE
 )

1690 
ZDAµ_LóveCål
 |
ZDAPP_LEAVE_CTRL_RA
;

1694 
	`oßl_nv_wrôe
–
ZCD_NV_LEAVE_CTRL
,

1696 –
uöt8
 ),

1697 &
ZDAµ_LóveCål
);

1698 
	}
}

1709 
	$ZDAµ_LóveCålRe£t
( )

1712 
ZDAµ_LóveCål
 = 
ZDAPP_LEAVE_CTRL_INIT
;

1715 
	`oßl_nv_wrôe
–
ZCD_NV_LEAVE_CTRL
,

1717 –
uöt8
 ),

1718 &
ZDAµ_LóveCål
);

1719 
	}
}

1730 
uöt8
 
	$ZDAµ_LóveCålBy∑ss
( )

1732 
uöt8
 
by∑ss
;

1734 i‡–
ZDAµ_LóveCål
 & 
ZDAPP_LEAVE_CTRL_SET
 )

1736 
by∑ss
 = 
TRUE
;

1740 
by∑ss
 = 
FALSE
;

1743  
by∑ss
;

1744 
	}
}

1756 
	$ZDAµ_LóveCålSèπup
–
devSèãs_t
* 
°©e
, 
uöt16
* 
°¨tDñay
 )

1758 *
°¨tDñay
 = 0;

1760 i‡–
ZDAµ_LóveCål
 & 
ZDAPP_LEAVE_CTRL_SET
 )

1762 i‡–
ZDAµ_LóveCål
 & 
ZDAPP_LEAVE_CTRL_RA
 )

1764 *
°¨tDñay
 = 
LEAVE_RESET_DELAY
;

1768 *
°©e
 = 
DEV_HOLD
;

1772 
	`ZDAµ_LóveCålRe£t
();

1774 
	}
}

1785 
	$ZDAµ_LóveRe£t
–
uöt8
 
ø
 )

1787 
	`ZDAµ_LóveCålSë
–
ø
 );

1789 
	`ZDAµ_Re£tTimîSèπ
–
LEAVE_RESET_DELAY
 );

1790 
	}
}

1803 
	$ZDAµ_LóveUpd©e
–
uöt16
 
nwkAddr
, 
uöt8
* 
extAddr
,

1804 
uöt8
 
ªmoveChûdªn
 )

1807 
	`ZDSecMgrDevi˚RemoveByExtAddr
(
extAddr
);

1810 
	`ZDSecMgrAddrCÀ¨
–
extAddr
 );

1812 i‡–
pbödRemoveDev
 )

1814 
zAddrTy≥_t
 
devAddr
;

1817 
devAddr
.
addrMode
 = 
Addr64Bô
;

1818 
	`oßl_mem˝y
(
devAddr
.
addr
.
extAddr
,ÉxtAddr, 
Z_EXTADDR_LEN
);

1820 
	`pbödRemoveDev
(&
devAddr
);

1824 i‡–
ZSTACK_ROUTER_BUILD
 )

1826 
	`NLME_RemoveChûd
–
extAddr
, 
ªmoveChûdªn
 );

1830 
	`RTG_RemoveRtgE¡ry
–
nwkAddr
, 0 );

1833 
	`nwkNeighb‹Remove
–
nwkAddr
, 
_NIB
.
nwkP™Id
 );

1836 
	`ZDAµ_NwkWrôeNVReque°
();

1837 
	}
}

1849 
ZSètus_t
 
	$ZDAµ_Nëw‹kDiscovîyReq
–
uöt32
 
sˇnCh™√ls
, 
uöt8
 
sˇnDuøti⁄
)

1854  
	`NLME_Nëw‹kDiscovîyReque°
(
sˇnCh™√ls
, 
sˇnDuøti⁄
);

1855 
	}
}

1867 
ZSètus_t
 
	$ZDAµ_JoöReq
–
uöt8
 
ch™√l
, 
uöt16
 
∑nID
, uöt8 *
exãndedP™ID
,

1868 
uöt16
 
cho£nP¨ít
, 
uöt8
 
∑ª¡Dïth
, uöt8 
°ackProfûe
 )

1872 
	`ZDAµ_NodeProfûeSync
–
°ackProfûe
);

1875  
	`NLME_JoöReque°
(
exãndedP™ID
, 
∑nID
,
ch™√l
,

1876 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
,

1877 
cho£nP¨ít
, 
∑ª¡Dïth
);

1879 
	}
}

1891 
uöt8
 
	$ZDAµ_Devi˚C⁄figuªd
( )

1893 
uöt16
 
nwkAddr
 = 
INVALID_NODE_ADDR
;

1895 
	`oßl_nv_ªad
–
ZCD_NV_NIB
, 
	`oßl_off£tof
–
nwkIB_t
, 
nwkDevAddªss
 ),

1896 –
uöt16
), &
nwkAddr
 );

1899  ( 
nwkAddr
 =
INVALID_NODE_ADDR
 ? 
FALSE
 : 
TRUE
 );

1900 
	}
}

1920 
	$ZDAµ_SídEvítMsg
–
uöt8
 
cmd
, uöt8 
Àn
, uöt8 *
buf
 )

1922 
	`ZDAµ_SídMsg
–
ZDAµTaskID
, 
cmd
, 
Àn
, 
buf
 );

1923 
	}
}

1937 
	$ZDAµ_SídMsg
–
uöt8
 
èskID
, uöt8 
cmd
, uöt8 
Àn
, uöt8 *
buf
 )

1939 
oßl_evít_hdr_t
 *
msgPå
;

1942 
msgPå
 = (
oßl_evít_hdr_t
 *)
	`oßl_msg_Æloˇã
–
Àn
 );

1943 i‡–
msgPå
 )

1945 i‡–(
Àn
 > 0Ë&& (
buf
 !
NULL
) )

1946 
	`oßl_mem˝y
–
msgPå
, 
buf
, 
Àn
 );

1948 
msgPå
->
evít
 = 
cmd
;

1949 
	`oßl_msg_£nd
–
èskID
, (
uöt8
 *)
msgPå
 );

1951 
	}
}

1966 
ZSètus_t
 
	$ZDO_Nëw‹kDiscovîyC⁄fúmCB
(
uöt8
 
°©us
)

1968 
oßl_evít_hdr_t
 
msg
;

1972 #i‡
	`deföed
 ( 
ZDO_MGMT_NWKDISC_RESPONSE
 )

1973 i‡–
zd≠pMgmtNwkDiscReqInProgªss
 )

1975 
zd≠pMgmtNwkDiscReqInProgªss
 = 
Ál£
;

1976 
	`ZDO_FöishPro˚ssögMgmtNwkDiscReq
();

1983 i‡(
zdoCBFunc
[
ZDO_NWK_DISCOVERY_CNF_CBID
] !
NULL
 )

1985 
zdoCBFunc
[
ZDO_NWK_DISCOVERY_CNF_CBID
]–(*)&
°©us
 );

1990 
msg
.
°©us
 = 
ZDO_SUCCESS
;

1991 
	`ZDAµ_SídMsg
–
ZDAµTaskID
, 
ZDO_NWK_DISC_CNF
, (
oßl_evít_hdr_t
), (
uöt8
 *)&
msg
 );

1994  (
ZSuc˚ss
);

1995 
	}
}

2007 
	#STACK_PROFILE_MAX
 2

	)

2008 
√tw‹kDesc_t
* 
	$ZDAµ_NwkDescLi°Pro˚ssög
()

2010 
√tw‹kDesc_t
 *
pNwkDesc
;

2011 
uöt8
 
i
, 
Resu…Cou¡
 = 0;

2012 
uöt8
 
°ackProfûe
;

2013 
uöt8
 
°ackProfûePro
;

2014 
uöt8
 
£À˘ed
;

2017 
pNwkDesc
 = 
	`nwk_gëNwkDescLi°
();

2018 
pNwkDesc
)

2020 
Resu…Cou¡
++;

2021 
pNwkDesc
 =ÖNwkDesc->
√xtDesc
;

2025 
°ackProfûePro
 = 
FALSE
;

2026 
£À˘ed
 = 
FALSE
;

2029  
°ackProfûe
 = 0; sèckProfûê< 
STACK_PROFILE_MAX
; stackProfile++ )

2031 
pNwkDesc
 = 
	`nwk_gëNwkDescLi°
();

2032  
i
 = 0; i < 
Resu…Cou¡
; i++, 
pNwkDesc
 =ÖNwkDesc->
√xtDesc
 )

2034 i‡–
zgC⁄figPANID
 != 0xFFFF )

2037 i‡–
pNwkDesc
->
∑nId
 !
zgC⁄figPANID
 )

2041 i‡–
	`nwk_ExtPANIDVÆid
–
ZDO_U£ExãndedPANID
Ë=
åue
 )

2045 i‡–
	`oßl_ExtAddrEquÆ
–
ZDO_U£ExãndedPANID
, 
pNwkDesc
->
exãndedPANID
Ë=
Ál£
 )

2051 i‡–
ZSTACK_ROUTER_BUILD
 )

2053 i‡–
°ackProfûePro
 =
FALSE
 )

2055 i‡–!
pNwkDesc
->
rouãrC≠acôy
 )

2062 i‡–!
pNwkDesc
->
devi˚C≠acôy
 )

2068 i‡–
ZSTACK_END_DEVICE_BUILD
 )

2070 i‡–!
pNwkDesc
->
devi˚C≠acôy
 )

2077 i‡–
pNwkDesc
->
vîsi⁄
 !
_NIB
.
nwkPrŸocﬁVîsi⁄
 )

2081 i‡–
pNwkDesc
->
°ackProfûe
 !
zgSèckProfûe
 )

2083 i‡–((
zgSèckProfûe
 =
HOME_CONTROLS
Ë&& (
pNwkDesc
->
°ackProfûe
 =
ZIGBEEPRO_PROFILE
))

2084 || ((
zgSèckProfûe
 =
ZIGBEEPRO_PROFILE
Ë&& (
pNwkDesc
->
°ackProfûe
 =
HOME_CONTROLS
)) )

2086 
°ackProfûePro
 = 
TRUE
;

2089 i‡–
°ackProfûe
 == 0 )

2098 i‡(
i
 < 
Resu…Cou¡
)

2100 
£À˘ed
 = 
TRUE
;

2105 i‡–(
£À˘ed
 =
TRUE
Ë|| (
°ackProfûePro
 =
FALSE
) )

2111 i‡–
i
 =
Resu…Cou¡
 )

2113  (
NULL
);

2117  (
pNwkDesc
);

2119 
	}
}

2131 
	$ZDO_Nëw‹kF‹m©i⁄C⁄fúmCB
–
ZSètus_t
 
Sètus
 )

2133 
nwkSètus
 = (
byã
)
Sètus
;

2135 i‡–
Sètus
 =
ZSUCCESS
 )

2138 
	`HÆLedSë
 ( 
HAL_LED_3
, 
HAL_LED_MODE_ON
 );

2141 
	`HÆLedSë
 (
HAL_LED_4
, 
HAL_LED_MODE_OFF
);

2143 #i‡
	`deföed
 ( 
ZBIT
 )

2144 
	`SIM_SëCﬁ‹
(0xd0ffd0);

2147 i‡–
devSèã
 =
DEV_HOLD
 )

2150 
devSèã
 = 
DEV_COORD_STARTING
;

2153 #i‡
	`deföed
(
BLINK_LEDS
)

2156 
	`HÆLedSë
 ( 
HAL_LED_3
, 
HAL_LED_MODE_FLASH
 );

2160 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_NETWORK_START
 );

2161 
	}
}

2180 
	$ZDO_bóc⁄NŸifyIndCB
–
NLME_bóc⁄Ind_t
 *
pBóc⁄
 )

2184 i‡(
zdoCBFunc
[
ZDO_BEACON_NOTIFY_IND_CBID
] !
NULL
 )

2186 
zdoCBFunc
[
ZDO_BEACON_NOTIFY_IND_CBID
]–(*)
pBóc⁄
 );

2190 
√tw‹kDesc_t
 *
pNwkDesc
;

2191 
√tw‹kDesc_t
 *
pLa°NwkDesc
;

2192 
uöt8
 
found
 = 
Ál£
;

2195 
pNwkDesc
 = 
NwkDescLi°
;

2196 
pLa°NwkDesc
 = 
NwkDescLi°
;

2197 
pNwkDesc
)

2199 i‡((
pNwkDesc
->
∑nId
 =
pBóc⁄
->
∑nID
) &&

2200 (
pNwkDesc
->
logiˇlCh™√l
 =
pBóc⁄
->logicalChannel))

2202 
found
 = 
åue
;

2205 
pLa°NwkDesc
 = 
pNwkDesc
;

2206 
pNwkDesc
 =ÖNwkDesc->
√xtDesc
;

2210 i‡(
found
 =
Ál£
)

2212 
pNwkDesc
 = 
	`oßl_mem_Æloc
–(
√tw‹kDesc_t
) );

2213 i‡–!
pNwkDesc
 )

2220 
	`oßl_mem£t
–
pNwkDesc
, 0, (
√tw‹kDesc_t
) );

2223 
pNwkDesc
->
cho£nRouãr
 = 
INVALID_NODE_ADDR
;

2224 
pNwkDesc
->
cho£nRouãrDïth
 = 0xFF;

2227 i‡–!
NwkDescLi°
 )

2229 
NwkDescLi°
 = 
pNwkDesc
;

2233 
pLa°NwkDesc
->
√xtDesc
 = 
pNwkDesc
;

2238 
pNwkDesc
->
°ackProfûe
 = 
pBóc⁄
->stackProfile;

2239 
pNwkDesc
->
vîsi⁄
 = 
pBóc⁄
->
¥ŸocﬁVîsi⁄
;

2240 
pNwkDesc
->
logiˇlCh™√l
 = 
pBóc⁄
->logicalChannel;

2241 
pNwkDesc
->
∑nId
 = 
pBóc⁄
->
∑nID
;

2242 
pNwkDesc
->
upd©eId
 = 
pBóc⁄
->
upd©eID
;

2245 i‡–
pBóc⁄
->
¥ŸocﬁVîsi⁄
 !
ZB_PROT_V1_0
 )

2247 
	`oßl_˝yExtAddr
–
pNwkDesc
->
exãndedPANID
, 
pBóc⁄
->
exãndedP™ID
 );

2251 
	`oßl_mem£t
–
pNwkDesc
->
exãndedPANID
, 0xFF, 
Z_EXTADDR_LEN
 );

2256 i‡––
pBóc⁄
->
LQI
 > 
gMIN_TREE_LINK_COST
 ) &&

2257 ––
pBóc⁄
->
≥rmôJoöög
 =
TRUE
 ) || ( 
_tmpRejoöSèã
 ) ) )

2259 
uöt8
 
£À˘ed
 = 
FALSE
;

2260 
uöt8
 
ˇ∑côy
 = 
FALSE
;

2262 i‡–
_NIB
.
nwkAddrAŒoc
 =
NWK_ADDRESSING_STOCHASTIC
 )

2264 i‡–((
pBóc⁄
->
LQI
 > 
pNwkDesc
->
cho£nRouãrLökQuÆôy
) &&

2265 (
pBóc⁄
->
dïth
 < 
MAX_NODE_DEPTH
)) ||

2266 ((
pBóc⁄
->
LQI
 =
pNwkDesc
->
cho£nRouãrLökQuÆôy
) &&

2267 (
pBóc⁄
->
dïth
 < 
pNwkDesc
->
cho£nRouãrDïth
)) )

2269 
£À˘ed
 = 
TRUE
;

2274 i‡–
pBóc⁄
->
dïth
 < 
pNwkDesc
->
cho£nRouãrDïth
 )

2276 
£À˘ed
 = 
TRUE
;

2280 i‡–
ZSTACK_ROUTER_BUILD
 )

2282 
ˇ∑côy
 = 
pBóc⁄
->
rouãrC≠acôy
;

2284 i‡–
ZSTACK_END_DEVICE_BUILD
 )

2286 
ˇ∑côy
 = 
pBóc⁄
->
devi˚C≠acôy
;

2289 i‡–(
ˇ∑côy
Ë&& (
£À˘ed
) )

2292 
pNwkDesc
->
cho£nRouãr
 = 
pBóc⁄
->
sour˚Addr
;

2293 
pNwkDesc
->
cho£nRouãrLökQuÆôy
 = 
pBóc⁄
->
LQI
;

2294 
pNwkDesc
->
cho£nRouãrDïth
 = 
pBóc⁄
->
dïth
;

2297 i‡–
pBóc⁄
->
devi˚C≠acôy
 )

2298 
pNwkDesc
->
devi˚C≠acôy
 = 1;

2300 i‡–
pBóc⁄
->
rouãrC≠acôy
 )

2301 
pNwkDesc
->
rouãrC≠acôy
 = 1;

2304 
	}
}

2316 
	$ZDO_SèπRouãrC⁄fúmCB
–
ZSètus_t
 
Sètus
 )

2318 
nwkSètus
 = (
byã
)
Sètus
;

2320 i‡–
Sètus
 =
ZSUCCESS
 )

2323 
	`HÆLedSë
 ( 
HAL_LED_3
, 
HAL_LED_MODE_ON
 );

2325 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
);

2326 i‡–
devSèã
 =
DEV_HOLD
 )

2329 
devSèã
 = 
DEV_END_DEVICE
;

2332 #i‡
	`deföed
(
BLINK_LEDS
)

2335 
	`HÆLedSë
–
HAL_LED_3
, 
HAL_LED_MODE_FLASH
 );

2339 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_ROUTER_START
 );

2340 
	}
}

2353 
	$ZDO_JoöC⁄fúmCB
–
uöt16
 
P™Id
, 
ZSètus_t
 
Sètus
 )

2355 ()
P™Id
;

2357 
nwkSètus
 = (
byã
)
Sètus
;

2359 i‡–
Sètus
 =
ZSUCCESS
 )

2362 
	`HÆLedSë
 ( 
HAL_LED_3
, 
HAL_LED_MODE_ON
 );

2364 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
);

2365 i‡–(
devSèã
 =
DEV_HOLD
) )

2368 
devSèã
 = 
DEV_NWK_JOINING
;

2371 i‡–!
ZG_SECURE_ENABLED
 )

2374 
	`ZDAµ_NVUpd©e
();

2379 #i‡
	`deföed
(
BLINK_LEDS
)

2380 
	`HÆLedSë
 ( 
HAL_LED_3
, 
HAL_LED_MODE_FLASH
 );

2385 i‡(
zdoCBFunc
[
ZDO_JOIN_CNF_CBID
] !
NULL
 )

2387 
zdoJoöCnf_t
 
joöCnf
;

2389 
joöCnf
.
°©us
 = 
Sètus
;

2390 
joöCnf
.
devi˚Addr
 = 
_NIB
.
nwkDevAddªss
;

2391 
joöCnf
.
∑ª¡Addr
 = 
_NIB
.
nwkCo‹dAddªss
;

2393 
zdoCBFunc
[
ZDO_JOIN_CNF_CBID
]–(*)&
joöCnf
 );

2397 
	`ZDAµ_SídMsg
–
ZDAµTaskID
, 
ZDO_NWK_JOIN_IND
, (
oßl_evít_hdr_t
), (
byã
*)
NULL
 );

2399 
	}
}

2412 
	$ZDO_AddrCh™geIndiˇti⁄CB
–
uöt16
 
√wAddr
 )

2414 
ZDO_AddrCh™geInd_t
 *
pZDOAddrCh™geMsg
;

2415 
ïLi°_t
 *
pIãm
 = 
ïLi°
;

2418 
	`ZDAµ_NVUpd©e
();

2421 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

2423 
pIãm
 !
NULL
)

2425 i‡(
pIãm
->
ïDesc
->
ídPoöt
 !
ZDO_EP
)

2427 
pZDOAddrCh™geMsg
 = (
ZDO_AddrCh™geInd_t
 *)
	`oßl_msg_Æloˇã
( ( ZDO_AddrChangeInd_t ) );

2428 i‡(
pZDOAddrCh™geMsg
 !
NULL
)

2430 
pZDOAddrCh™geMsg
->
hdr
.
evít
 = 
ZDO_ADDR_CHANGE_IND
;

2431 
pZDOAddrCh™geMsg
->
sh‹tAddr
 = 
√wAddr
;

2432 
	`oßl_msg_£nd
–*(
pIãm
->
ïDesc
->
èsk_id
), (
uöt8
 *)
pZDOAddrCh™geMsg
 );

2435 
pIãm
 =ÖIãm->
√xtDesc
;

2439 
	`ZDAµ_A¬oun˚NewAddªss
();

2440 
	}
}

2458 
ZSètus_t
 
	$ZDO_JoöIndiˇti⁄CB
(
uöt16
 
Sh‹tAddªss
, 
uöt8
 *
ExãndedAddªss
,

2459 
uöt8
 
C≠abûôyFœgs
, uöt8 
ty≥
)

2461 ()
Sh‹tAddªss
;

2462 ()
ExãndedAddªss
;

2463 #i‡
ZDO_NV_SAVE_RFDs


2464 ()
C≠abûôyFœgs
;

2467 i‡(
C≠abûôyFœgs
 & 
CAPINFO_DEVICETYPE_FFD
)

2470 
	`ZDAµ_NVUpd©e
();

2473 i‡(
ZG_SECURE_ENABLED
)

2475 i‡(
ty≥
 =
NWK_ASSOC_JOIN
 ||Åy≥ =
NWK_ASSOC_REJOIN_UNSECURE
)

2477 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_NEW_DEVICE
, 600 );

2481  
ZSuc˚ss
;

2482 
	}
}

2497 
	$ZDO_C⁄˚¡øt‹Indiˇti⁄CB
–
uöt16
 
nwkAddr
, 
uöt8
 *
extAddr
, uöt8 
pktCo°
 )

2499 
zdoC⁄˚¡øt‹Ind_t
 
c⁄Ind
;

2501 
c⁄Ind
.
nwkAddr
 =ÇwkAddr;

2502 
c⁄Ind
.
extAddr
 =ÉxtAddr;

2503 
c⁄Ind
.
pktCo°
 =ÖktCost;

2505 if–
zdoCBFunc
[
ZDO_CONCENTRATOR_IND_CBID
] !
NULL
 )

2507 
zdoCBFunc
[
ZDO_CONCENTRATOR_IND_CBID
]–(*)&
c⁄Ind
 );

2509 
	}
}

2522 
	$ZDO_LóveCnf
–
NLME_LóveCnf_t
* 
˙f
 )

2525 i‡–
	`oßl_ExtAddrEquÆ
–
˙f
->
extAddr
,

2526 
	`NLME_GëExtAddr
(ËË=
TRUE
 )

2529 i‡––
zdoCBFunc
[
ZDO_LEAVE_CNF_CBID
] =
NULL
 ) ||

2530 –(*
zdoCBFunc
[
ZDO_LEAVE_CNF_CBID
])–
˙f
 ) =
NULL
 ) )

2533 
	`ZDAµ_LóveRe£t
–
˙f
->
ªjoö
 );

2536 i‡–
ZSTACK_ROUTER_BUILD
 )

2539 
	`ZDAµ_LóveUpd©e
–
˙f
->
d°Addr
,

2540 
˙f
->
extAddr
,

2541 
˙f
->
ªmoveChûdªn
 );

2543 
	}
}

2556 
	$ZDO_LóveInd
–
NLME_LóveInd_t
* 
öd
 )

2558 
uöt8
 
Àave
;

2563 i‡–
öd
->
ªque°
 =
TRUE
 )

2566 i‡–
ZSTACK_ROUTER_BUILD
 )

2568 
NLME_LóveR•_t
 
r•
;

2569 
r•
.
ªjoö
 = 
öd
->rejoin;

2570 
r•
.
ªmoveChûdªn
 = 
öd
->removeChildren;

2571 
	`NLME_LóveR•
–&
r•
 );

2575 
	`ZDAµ_LóveRe£t
–
öd
->
ªjoö
 );

2579 
Àave
 = 
FALSE
;

2582 i‡–
öd
->
§cAddr
 =
	`NLME_GëCo‹dSh‹tAddr
() )

2584 i‡––
öd
->
ªmoveChûdªn
 =
TRUE
 ) ||

2585 –
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 ==

2586 
NODETYPE_DEVICE
 ) )

2588 
Àave
 = 
TRUE
;

2591 i‡–
öd
->
ªmoveChûdªn
 =
TRUE
 )

2597 i‡–
Àave
 =
TRUE
 )

2600 
	`ZDAµ_LóveRe£t
–
öd
->
ªjoö
 );

2605 
	`ZDAµ_LóveUpd©e
–
öd
->
§cAddr
,

2606 
öd
->
extAddr
,

2607 
öd
->
ªmoveChûdªn
 );

2612 i‡(
zdoCBFunc
[
ZDO_LEAVE_IND_CBID
] !
NULL
)

2614 ()
zdoCBFunc
[
ZDO_LEAVE_IND_CBID
](
öd
);

2616 
	}
}

2630 
	$ZDO_SyncIndiˇti⁄CB
–
uöt8
 
ty≥
, 
uöt16
 
sh‹tAddr
 )

2632 ()
sh‹tAddr
;

2634 i‡–
ZSTACK_END_DEVICE_BUILD


2635 || (
ZSTACK_ROUTER_BUILD
 && ((
_NIB
.
C≠abûôyFœgs
 & 
ZMAC_ASSOC_CAPINFO_FFD_TYPE
) == 0)))

2637 i‡–
ty≥
 == 1 )

2640 
	`nwkNeighb‹InôTabÀ
();

2643 
	`ZDAµ_SídMsg
–
ZDAµTaskID
, 
ZDO_NWK_JOIN_REQ
, (
oßl_evít_hdr_t
), 
NULL
 );

2646 
	}
}

2660 
	$ZDO_M™ytoO√FaûuªIndiˇti⁄CB
()

2667 
	`RTG_MTORouãReq
();

2668 
	}
}

2680 
	$ZDO_PﬁlC⁄fúmCB
–
uöt8
 
°©us
 )

2682 ()
°©us
;

2684 
	}
}

2696 
	$ZDAµ_NwkWrôeNVReque°
( )

2698 #i‡
	`deföed
 ( 
NV_RESTORE
 )

2699 i‡–!
	`oßl_gë_timeoutEx
–
ZDAµTaskID
, 
ZDO_NWK_UPDATE_NV
 ) )

2702 
	`ZDAµ_NVUpd©e
();

2705 
	}
}

2725 
ZSètus_t
 
	$ZDO_Upd©eDevi˚Indiˇti⁄
–
uöt8
 *
extAddr
, uöt8 
°©us
 )

2729 ()
extAddr
;

2730 ()
°©us
;

2732  
ZSuc˚ss
;

2733 
	}
}

2744 
	$ZDAµ_InMsgCB
–
zdoIncomögMsg_t
 *
öMsg
 )

2746 i‡–
öMsg
->
˛u°îID
 & 
ZDO_RESPONSE_BIT
 )

2754 i‡–!(
öMsg
->
wasBrﬂdˇ°
Ë&& inMsg->
˛u°îID
 !
Devi˚_™n˚
 )

2756 
	`ZDP_GíîicR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZDP_NOT_SUPPORTED
, 0,

2757 (
uöt16
)(
öMsg
->
˛u°îID
 | 
ZDO_RESPONSE_BIT
), inMsg->
SecurôyU£
 );

2760 
	}
}

2773 
	$ZDAµ_Ch™geM©chDescRe•Pîmissi⁄
–
uöt8
 
ídpoöt
, uöt8 
a˘i⁄
 )

2776 
	`afSëM©ch
–
ídpoöt
, 
a˘i⁄
 );

2777 
	}
}

2788 
	$ZDAµ_Nëw‹kInô
–
uöt16
 
dñay
 )

2790 i‡–
dñay
 )

2793 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_NETWORK_INIT
, 
dñay
 );

2797 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_NETWORK_INIT
 );

2799 
	}
}

2811 
	$ZDAµ_NwkSèãUpd©eCB
( )

2814 i‡–!
	`oßl_gë_timeoutEx
–
ZDAµTaskID
, 
ZDO_NWK_UPDATE_NV
 ) )

2817 
	`ZDAµ_NVUpd©e
();

2819 
	}
}

2830 
	$ZDAµ_NodeProfûeSync
–
uöt8
 
°ackProfûe
 )

2832 i‡–
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 & 
CAPINFO_DEVICETYPE_FFD
 )

2834 i‡–
°ackProfûe
 !
zgSèckProfûe
 )

2836 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_DEVICE
;

2837 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 = 
CAPINFO_DEVICETYPE_RFD
 | 
CAPINFO_POWER_AC
 | 
CAPINFO_RCVR_ON_IDLE
;

2838 
	`NLME_SëBrﬂdˇ°Fûãr
–
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 );

2841 
	}
}

2853 
uöt8
 
	$ZDAµ_SèπJoöögCy˛e
( )

2855 i‡–
devSèã
 =
DEV_INIT
 || devSèã =
DEV_NWK_DISC
 )

2857 
c⁄töueJoöög
 = 
TRUE
;

2858 
	`ZDAµ_Nëw‹kInô
( 0 );

2860  ( 
TRUE
 );

2863  ( 
FALSE
 );

2864 
	}
}

2875 
uöt8
 
	$ZDAµ_St›JoöögCy˛e
( )

2877 i‡–
devSèã
 =
DEV_INIT
 || devSèã =
DEV_NWK_DISC
 )

2879 
c⁄töueJoöög
 = 
FALSE
;

2880  ( 
TRUE
 );

2883  ( 
FALSE
 );

2884 
	}
}

2896 
	$ZDAµ_A¬oun˚NewAddªss
( )

2898 #i‡
	`deföed
 ( 
ZIGBEE_NWK_UNIQUE_ADDR_CHECK
 )

2900 
	`APSME_HﬁdD©aReque°s
( 0 );

2903 
	`ZDP_Devi˚A¬˚
–
	`NLME_GëSh‹tAddr
(), 
	`NLME_GëExtAddr
(),

2904 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
, 0 );

2906 #i‡
	`deföed
 ( 
ZIGBEE_NWK_UNIQUE_ADDR_CHECK
 )

2908 
	`APSME_HﬁdD©aReque°s
–
ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT
 );

2910 
	}
}

2921 
	$ZDAµ_NVUpd©e
( )

2923 #i‡
	`deföed
 ( 
NV_RESTORE
 )

2924 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_NWK_UPDATE_NV
, 
ZDAPP_UPDATE_NWK_NV_TIME
 );

2926 
	}
}

2939 
uöt16
 
	$ZDAµ_Co‹dSèπPANIDC⁄Êi˘CB
–
uöt16
 
∑nid
 )

2941  ( 
∑nid
 + 1 );

2942 
	}
}

2955 
	$ZDO_SrcRtgIndCB
 (
uöt16
 
§cAddr
, 
uöt8
 
ªœyC¡
, uöt16* 
pRñayLi°
 )

2957 
zdoSrcRtg_t
 
§cRtg
;

2959 
§cRtg
.
§cAddr
 = srcAddr;

2960 
§cRtg
.
ªœyC¡
 =ÑelayCnt;

2961 
§cRtg
.
pRñayLi°
 =ÖRelayList;

2963 if–
zdoCBFunc
[
ZDO_SRC_RTG_IND_CBID
] !
NULL
 )

2965 
zdoCBFunc
[
ZDO_SRC_RTG_IND_CBID
]–(*)&
§cRtg
 );

2967 
	}
}

2978 
	$ZDAµ_InôZdoCBFunc
( )

2980 
uöt8
 
i
;

2982  
i
=0; i< 
MAX_ZDO_CB_FUNC
; i++ )

2984 
zdoCBFunc
[
i
] = 
NULL
;

2986 
	}
}

3002 
ZSètus_t
 
	$ZDO_Regi°îF‹ZdoCB
–
uöt8
 
ödID
, 
p‚ZdoCb
 
pFn
 )

3005 i‡–
ödID
 < 
MAX_ZDO_CB_FUNC
 )

3007 
zdoCBFunc
[
ödID
] = 
pFn
;

3008  
ZSuc˚ss
;

3011  
ZInvÆidP¨amëî
;

3012 
	}
}

3027 
ZSètus_t
 
	$ZDO_Dîegi°îF‹ZdoCB
–
uöt8
 
ödID
 )

3030 i‡–
ödID
 < 
MAX_ZDO_CB_FUNC
 )

3032 
zdoCBFunc
[
ödID
] = 
NULL
;

3033  
ZSuc˚ss
;

3036  
ZInvÆidP¨amëî
;

3037 
	}
}

	@Components/stack/zdo/ZDApp.h

41 #i‚de‡
ZDAPP_H


42 
	#ZDAPP_H


	)

44 #ifde‡
__˝lu•lus


52 
	~"ZComDef.h
"

53 
	~"ZMac.h
"

54 
	~"NLMEDE.h
"

55 
	~"APS.h
"

56 
	~"AF.h
"

57 
	~"ZDProfûe.h
"

69 
	#ZDO_CONFIG_MAX_BO
 15

	)

72 
	#ZDO_NETWORK_INIT
 0x0001

	)

73 
	#ZDO_NETWORK_START
 0x0002

	)

74 
	#ZDO_DEVICE_RESET
 0x0004

	)

75 
	#ZDO_COMMAND_CNF
 0x0008

	)

76 
	#ZDO_STATE_CHANGE_EVT
 0x0010

	)

77 
	#ZDO_ROUTER_START
 0x0020

	)

78 
	#ZDO_NEW_DEVICE
 0x0040

	)

79 
	#ZDO_DEVICE_AUTH
 0x0080

	)

80 
	#ZDO_SECMGR_EVENT
 0x0100

	)

81 
	#ZDO_NWK_UPDATE_NV
 0x0200

	)

82 
	#ZDO_FRAMECOUNTER_CHANGE
 0x0400

	)

83 
	#ZDO_TCLK_FRAMECOUNTER_CHANGE
 0x0800

	)

84 
	#ZDO_APS_FRAMECOUNTER_CHANGE
 0x1000

	)

87 
	#ZDO_NWK_DISC_CNF
 0x01

	)

88 
	#ZDO_NWK_JOIN_IND
 0x02

	)

89 
	#ZDO_NWK_JOIN_REQ
 0x03

	)

90 
	#ZDO_ESTABLISH_KEY_CFM
 0x04

	)

91 
	#ZDO_ESTABLISH_KEY_IND
 0x05

	)

92 
	#ZDO_TRANSPORT_KEY_IND
 0x06

	)

93 
	#ZDO_UPDATE_DEVICE_IND
 0x07

	)

94 
	#ZDO_REMOVE_DEVICE_IND
 0x08

	)

95 
	#ZDO_REQUEST_KEY_IND
 0x09

	)

96 
	#ZDO_SWITCH_KEY_IND
 0x0A

	)

97 
	#ZDO_AUTHENTICATE_IND
 0x0B

	)

98 
	#ZDO_AUTHENTICATE_CFM
 0x0C

	)

101 
	#ZDO_CMD_ID
 0

	)

102 
	#ZDO_CMD_ID_LEN
 1

	)

105 
	#ZDO_ESTABLISH_KEY_CFM_LEN
 \

106 ((
uöt8
) \

107 ((
ZDO_E°ablishKeyCfm_t
ËË)

	)

109 
	#ZDO_ESTABLISH_KEY_IND_LEN
 \

110 ((
uöt8
) \

111 ((
ZDO_E°ablishKeyInd_t
ËË)

	)

113 
	#ZDO_TRANSPORT_KEY_IND_LEN
 \

114 ((
uöt8
) \

115 ((
ZDO_Tøn•‹tKeyInd_t
ËË)

	)

117 
	#ZDO_UPDATE_DEVICE_IND_LEN
 \

118 ((
uöt8
) \

119 ((
ZDO_Upd©eDevi˚Ind_t
ËË)

	)

121 
	#ZDO_REMOVE_DEVICE_IND_LEN
 \

122 ((
uöt8
) \

123 ((
ZDO_RemoveDevi˚Ind_t
ËË)

	)

125 
	#ZDO_REQUEST_KEY_IND_LEN
 \

126 ((
uöt8
) \

127 ((
ZDO_Reque°KeyInd_t
ËË)

	)

129 
	#ZDO_SWITCH_KEY_IND_LEN
 \

130 ((
uöt8
) \

131 ((
ZDO_SwôchKeyInd_t
ËË)

	)

133 
	#ZDO_AUTHENTICATE_IND_LEN
 \

134 ((
uöt8
) \

135 ((
ZDO_AuthítiˇãInd_t
ËË)

	)

137 
	#ZDO_AUTHENTICATE_CFM_LEN
 \

138 ((
uöt8
) \

139 ((
ZDO_AuthítiˇãCfm_t
ËË)

	)

141 
	#NWK_RETRY_DELAY
 1000

142 

	)

143 
	#ZDO_MATCH_DESC_ACCEPT_ACTION
 1

144 

	)

145 #i‡!
deföed
 
NUM_DISC_ATTEMPTS


146 
	#NUM_DISC_ATTEMPTS
 2

	)

150 
	#ZDO_INITDEV_RESTORED_NETWORK_STATE
 0x00

	)

151 
	#ZDO_INITDEV_NEW_NETWORK_STATE
 0x01

	)

152 
	#ZDO_INITDEV_LEAVE_NOT_STARTED
 0x02

	)

154 #i‡
deföed
 ( 
MANAGED_SCAN
 )

160 
	#MANAGEDSCAN_TIMES_PRE_CHANNEL
 5

	)

161 
	#MANAGEDSCAN_DELAY_BETWEEN_SCANS
 150

162 

	)

163 
uöt8
 
zdoDiscCou¡î
;

168 
	#ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT
 0

169 

	)

178 
	gDEV_HOLD
,

179 
	gDEV_INIT
,

180 
	gDEV_NWK_DISC
,

181 
	gDEV_NWK_JOINING
,

182 
	gDEV_NWK_REJOIN
,

183 
	gDEV_END_DEVICE_UNAUTH
,

184 
	gDEV_END_DEVICE
,

185 
	gDEV_ROUTER
,

186 
	gDEV_COORD_STARTING
,

187 
	gDEV_ZB_COORD
,

188 
	gDEV_NWK_ORPHAN


189 } 
	tdevSèãs_t
;

193 
	gZDO_SUCCESS
,

194 
	gZDO_FAIL


195 } 
	tzdoSètus_t
;

200 
oßl_evít_hdr_t
 
	ghdr
;

201 
uöt8
 
	gd°AddrD°EP
;

202 
zAddrTy≥_t
 
	gd°Addr
;

203 
uöt8
 
	gd°AddrClu°îIDLSB
;

204 
uöt8
 
	gd°AddrClu°îIDMSB
;

205 
uöt8
 
	gd°AddrRemove
;

206 
uöt8
 
	gd°AddrEP
;

207 } 
	tZDO_NewD°Addr_t
;

212 
oßl_evít_hdr_t
 
	ghdr
;

213 
uöt8
 
	g∑πExtAddr
[
Z_EXTADDR_LEN
];

214 
uöt8
 
	g°©us
;

215 } 
	tZDO_E°ablishKeyCfm_t
;

219 
oßl_evít_hdr_t
 
	ghdr
;

220 
uöt16
 
	g§cAddr
;

221 
uöt8
 
	göôExtAddr
[
Z_EXTADDR_LEN
];

222 
uöt8
 
	gmëhod
;

223 
uöt8
 
	g≠sSecuª
;

224 
uöt8
 
	gnwkSecuª
;

226 } 
	tZDO_E°ablishKeyInd_t
;

230 
oßl_evít_hdr_t
 
	ghdr
;

231 
uöt16
 
	g§cAddr
;

232 
uöt8
 
	gkeyTy≥
;

233 
uöt8
 
	gkeySeqNum
;

234 
uöt8
 
	gkey
[
SEC_KEY_LEN
];

235 
uöt8
 
	g§cExtAddr
[
Z_EXTADDR_LEN
];

236 
uöt8
 
	göôüt‹
;

237 
uöt8
 
	g£cuª
;

238 } 
	tZDO_Tøn•‹tKeyInd_t
;

242 
oßl_evít_hdr_t
 
	ghdr
;

243 
uöt16
 
	g§cAddr
;

244 
uöt8
 
	gdevExtAddr
[
Z_EXTADDR_LEN
];

245 
uöt16
 
	gdevAddr
;

246 
uöt8
 
	g°©us
;

247 } 
	tZDO_Upd©eDevi˚Ind_t
;

251 
oßl_evít_hdr_t
 
	ghdr
;

252 
uöt16
 
	g§cAddr
;

253 
uöt8
 
	gchûdExtAddr
[
Z_EXTADDR_LEN
];

254 } 
	tZDO_RemoveDevi˚Ind_t
;

258 
oßl_evít_hdr_t
 
	ghdr
;

259 
uöt16
 
	g§cAddr
;

260 
uöt8
 
	gkeyTy≥
;

261 
uöt8
 
	g∑πExtAddr
[
Z_EXTADDR_LEN
];

262 } 
	tZDO_Reque°KeyInd_t
;

266 
oßl_evít_hdr_t
 
	ghdr
;

267 
uöt16
 
	g§cAddr
;

268 
uöt8
 
	gkeySeqNum
;

269 } 
	tZDO_SwôchKeyInd_t
;

273 
oßl_evít_hdr_t
 
	ghdr
;

274 
APSME_AuthítiˇãInd_t
 
	g≠s
;

275 } 
	tZDO_AuthítiˇãInd_t
;

279 
oßl_evít_hdr_t
 
	ghdr
;

280 
APSME_AuthítiˇãCfm_t
 
	g≠s
;

281 } 
	tZDO_AuthítiˇãCfm_t
;

285 
oßl_evít_hdr_t
 
	ghdr
;

286 
uöt16
 
	gnwkAddr
;

287 
uöt8
 
	gnumInClu°îs
;

288 
uöt16
 *
	gpInClu°îs
;

289 
uöt8
 
	gnumOutClu°îs
;

290 
uöt16
 *
	gpOutClu°îs
;

291 } 
	tZDO_M©chDescR•Sít_t
;

295 
oßl_evít_hdr_t
 
	ghdr
;

296 
uöt16
 
	gsh‹tAddr
;

297 } 
	tZDO_AddrCh™geInd_t
;

300 * (*
	tp‚ZdoCb
)–*
	t∑øm
 );

305 
	gZDO_SRC_RTG_IND_CBID
,

306 
	gZDO_CONCENTRATOR_IND_CBID
,

307 
	gZDO_NWK_DISCOVERY_CNF_CBID
,

308 
	gZDO_BEACON_NOTIFY_IND_CBID
,

309 
	gZDO_JOIN_CNF_CBID
,

310 
	gZDO_LEAVE_CNF_CBID
,

311 
	gZDO_LEAVE_IND_CBID
,

312 
	gMAX_ZDO_CB_FUNC


317 
uöt16
 
	g§cAddr
;

318 
uöt8
 
	gªœyC¡
;

319 
uöt16
 *
	gpRñayLi°
;

320 } 
	tzdoSrcRtg_t
;

324 
uöt16
 
	gnwkAddr
;

325 
uöt8
 *
	gextAddr
;

326 
uöt8
 
	gpktCo°
;

327 } 
	tzdoC⁄˚¡øt‹Ind_t
;

332 
uöt16
 
	gsour˚Addr
;

333 
uöt16
 
	g∑nID
;

334 
uöt8
 
	glogiˇlCh™√l
;

335 
uöt8
 
	g≥rmôJoöög
;

336 
uöt8
 
	grouãrC≠acôy
;

337 
uöt8
 
	gdevi˚C≠acôy
;

338 
uöt8
 
	g¥ŸocﬁVîsi⁄
;

339 
uöt8
 
	g°ackProfûe
 ;

340 
uöt8
 
	gLQI
 ;

341 
uöt8
 
	gdïth
 ;

342 
uöt8
 
	gupd©eID
;

343 
uöt8
 
	gexãndedP™ID
[8];

344 } 
	tzdoBóc⁄Ind_t
;

348 
uöt8
 
	g°©us
;

349 
uöt16
 
	gdevi˚Addr
;

350 
uöt16
 
	g∑ª¡Addr
;

351 } 
	tzdoJoöCnf_t
;

356 
uöt8
 
ZDAµTaskID
;

357 
uöt8
 
nwkSètus
;

358 
devSèãs_t
 
devSèã
;

363 
zAddrTy≥_t
 
ZDAµNwkAddr
;

364 
uöt8
 
ßveExtAddr
[];

366 
uöt8
 
zd≠pMgmtNwkDiscR•TønsSeq
;

367 
uöt8
 
zd≠pMgmtNwkDiscReqInProgªss
;

368 
zAddrTy≥_t
 
zd≠pMgmtNwkDiscR•Addr
;

369 
uöt8
 
zd≠pMgmtNwkDiscSèπIndex
;

370 
uöt8
 
zd≠pMgmtSavedNwkSèã
;

372 
uöt8
 
ZDO_U£ExãndedPANID
[
Z_EXTADDR_LEN
];

377 
ZDO_AddrCh™geIndiˇti⁄CB
–
uöt16
 
√wAddr
 );

385 
ZDAµ_Inô
–
uöt8
 
èsk_id
 );

390 
UINT16
 
ZDAµ_evít_lo›
–
uöt8
 
èsk_id
, UINT16 
evíts
 );

422 
uöt8
 
ZDOInôDevi˚
–
uöt16
 
°¨tDñay
 );

428 
ZDAµ_SídEvítMsg
–
uöt8
 
cmd
, uöt8 
Àn
, uöt8 *
buf
 );

433 
ZSètus_t
 
ZDAµ_E°ablishKey
–
uöt8
 
ídPoöt
,

434 
uöt16
 
nwkAddr
,

435 
uöt8
* 
extAddr
 );

441 
ZDAµ_Nëw‹kInô
–
uöt16
 
dñay
 );

446 
ZSètus_t
 
ZDAµ_Nëw‹kDiscovîyReq
–
uöt32
 
sˇnCh™√ls
, 
uöt8
 
sˇnDuøti⁄
);

451 
ZSètus_t
 
ZDAµ_JoöReq
–
uöt8
 
ch™√l
, 
uöt16
 
∑nID
,

452 
uöt8
 *
exãndedP™ID
, 
uöt16
 
cho£nP¨ít
,

453 
uöt8
 
∑ª¡Dïth
, uöt8 
°ackProfûe
);

465 
ZSètus_t
 
ZDO_Nëw‹kDiscovîyC⁄fúmCB
–
uöt8
 
°©us
 );

471 
ZDO_Nëw‹kF‹m©i⁄C⁄fúmCB
–
ZSètus_t
 
Sètus
 );

477 
ZDO_bóc⁄NŸifyIndCB
–
NLME_bóc⁄Ind_t
 *
bóc⁄
 );

483 
ZDO_JoöC⁄fúmCB
–
uöt16
 
P™Id
, 
ZSètus_t
 
Sètus
 );

488 
ZSètus_t
 
ZDO_JoöIndiˇti⁄CB
(
uöt16
 
Sh‹tAddªss
, 
uöt8
 *
ExãndedAddªss
,

489 
uöt8
 
C≠abûôyFœgs
, uöt8 
ty≥
);

494 
ZDO_C⁄˚¡øt‹Indiˇti⁄CB
–
uöt16
 
nwkAddr
, 
uöt8
 *
extAddr
, uöt8 
pktCo°
 );

500 
ZDO_SèπRouãrC⁄fúmCB
–
ZSètus_t
 
Sètus
 );

506 
ZDO_LóveCnf
–
NLME_LóveCnf_t
* 
˙f
 );

511 
ZDO_LóveInd
–
NLME_LóveInd_t
* 
öd
 );

516 
ZDO_SyncIndiˇti⁄CB
–
uöt8
 
ty≥
, 
uöt16
 
sh‹tAddr
 );

521 
ZDO_M™ytoO√FaûuªIndiˇti⁄CB
( );

526 
ZDO_PﬁlC⁄fúmCB
–
uöt8
 
°©us
 );

531 
ZSètus_t
 
ZDO_Upd©eDevi˚Indiˇti⁄
–
uöt8
 *
extAddr
, uöt8 
°©us
 );

538 
ZDAµ_InMsgCB
–
zdoIncomögMsg_t
 *
öMsg
 );

540 
ZDO_SèπRouãrC⁄fúm
–
ZSètus_t
 
Sètus
 );

548 
ZDAµ_NwkSèãUpd©eCB
( );

558 
ZDAµ_Ch™geM©chDescRe•Pîmissi⁄
–
uöt8
 
ídpoöt
, uöt8 
a˘i⁄
 );

564 
ZDAµ_SaveNwkKey
( );

570 
ZDAµ_Re£tNwkKey
( );

579 
uöt8
 
ZDAµ_SèπJoöögCy˛e
( );

587 
uöt8
 
ZDAµ_St›JoöögCy˛e
( );

593 
ZDAµ_A¬oun˚NewAddªss
( );

598 
ZDAµ_NVUpd©e
( );

604 
uöt16
 
ZDAµ_Co‹dSèπPANIDC⁄Êi˘CB
–uöt16 
∑nid
 );

610 
ZDAµ_LóveRe£t
–
uöt8
 
ø
 );

616 
ZDAµ_LóveCålRe£t
( );

622 
uöt8
 
ZDAµ_Devi˚C⁄figuªd
( );

635 
ZDO_SrcRtgIndCB
 (
uöt16
 
§cAddr
, 
uöt8
 
ªœyC¡
, uöt16* 
pRñayLi°
 );

651 
ZSètus_t
 
ZDO_Regi°îF‹ZdoCB
–
uöt8
 
ödID
, 
p‚ZdoCb
 
pFn
 );

666 
ZSètus_t
 
ZDO_Dîegi°îF‹ZdoCB
–
uöt8
 
ödID
 );

670 #ifde‡
__˝lu•lus


	@Components/stack/zdo/ZDConfig.c

46 
	~"ZComdef.h
"

47 
	~"AF.h
"

48 
	~"ZDObje˘.h
"

49 
	~"ZDC⁄fig.h
"

66 
NodeDes¸ùt‹F‹m©_t
 
	gZDO_C⁄fig_Node_Des¸ùt‹
;

67 
NodePowîDes¸ùt‹F‹m©_t
 
	gZDO_C⁄fig_Powî_Des¸ùt‹
;

95 
	$ZDC⁄fig_InôDes¸ùt‹s
( )

97 
	`ZDC⁄fig_Upd©eNodeDes¸ùt‹
();

98 
	`ZDC⁄fig_Upd©ePowîDes¸ùt‹
();

99 
	}
}

110 
	$ZDC⁄fig_Upd©eNodeDes¸ùt‹
( )

113 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

114 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_COORDINATOR
;

115 i‡–
ZSTACK_ROUTER_BUILD
 )

116 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_ROUTER
;

117 i‡–
ZSTACK_END_DEVICE_BUILD
 )

118 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_DEVICE
;

120 
ZDO_C⁄fig_Node_Des¸ùt‹
.
Com∂exDescAvaû
 = 
FALSE
;

121 
ZDO_C⁄fig_Node_Des¸ùt‹
.
U£rDescAvaû
 = 
FALSE
;

122 
ZDO_C⁄fig_Node_Des¸ùt‹
.
Re£rved
 = 0;

123 
ZDO_C⁄fig_Node_Des¸ùt‹
.
APSFœgs
 = 0;

124 
ZDO_C⁄fig_Node_Des¸ùt‹
.
FªquícyB™d
 = 
NODEFREQ_2400
;

127 i‡–
ZSTACK_ROUTER_BUILD
 )

129 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs


130 (
CAPINFO_DEVICETYPE_FFD
 | 
CAPINFO_POWER_AC
 | 
CAPINFO_RCVR_ON_IDLE
);

132 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

133 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 |
CAPINFO_ALTPANCOORD
;

135 i‡–
ZSTACK_END_DEVICE_BUILD
 )

137 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 = (
CAPINFO_DEVICETYPE_RFD


138 #i‡–
RFD_RCVC_ALWAYS_ON
 =
TRUE
)

139 | 
CAPINFO_RCVR_ON_IDLE


145 
ZDO_C⁄fig_Node_Des¸ùt‹
.
M™uÁ˘uªrCode
[0] = 0;

146 
ZDO_C⁄fig_Node_Des¸ùt‹
.
M™uÁ˘uªrCode
[1] = 0;

149 
ZDO_C⁄fig_Node_Des¸ùt‹
.
MaxBuf„rSize
 = 
MAX_BUFFER_SIZE
;

152 
ZDO_C⁄fig_Node_Des¸ùt‹
.
MaxInTøns„rSize
[0] = 
	`LO_UINT16
–
MAX_TRANSFER_SIZE
 );

153 
ZDO_C⁄fig_Node_Des¸ùt‹
.
MaxInTøns„rSize
[1] = 
	`HI_UINT16
–
MAX_TRANSFER_SIZE
 );

156 
ZDO_C⁄fig_Node_Des¸ùt‹
.
MaxOutTøns„rSize
[0] = 
	`LO_UINT16
–
MAX_TRANSFER_SIZE
 );

157 
ZDO_C⁄fig_Node_Des¸ùt‹
.
MaxOutTøns„rSize
[1] = 
	`HI_UINT16
–
MAX_TRANSFER_SIZE
 );

160 
ZDO_C⁄fig_Node_Des¸ùt‹
.
SîvîMask
 = 0;

164 
ZDO_C⁄fig_Node_Des¸ùt‹
.
Des¸ùt‹C≠abûôy
 = 0;

165 
	}
}

176 
	$ZDC⁄fig_Upd©ePowîDes¸ùt‹
( )

179 i‡–
ZSTACK_ROUTER_BUILD
 )

181 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
PowîMode
 = 
NODECURPWR_RCVR_ALWAYS_ON
;

182 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
AvaûabÀPowîSour˚s
 = 
NODEAVAILPWR_MAINS
;

183 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
CuºítPowîSour˚
 = 
NODEAVAILPWR_MAINS
;

184 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
CuºítPowîSour˚Levñ
 = 
NODEPOWER_LEVEL_100
;

186 i‡–
ZSTACK_END_DEVICE_BUILD
 )

188 i‡–
zgPﬁlR©e
 )

189 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
PowîMode
 = 
NODECURPWR_RCVR_AUTO
;

191 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
PowîMode
 = 
NODECURPWR_RCVR_STIM
;

193 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
AvaûabÀPowîSour˚s
 = 
NODEAVAILPWR_RECHARGE
;

194 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
CuºítPowîSour˚
 = 
NODEAVAILPWR_RECHARGE
;

195 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
CuºítPowîSour˚Levñ
 = 
NODEPOWER_LEVEL_66
;

197 
	}
}

	@Components/stack/zdo/ZDConfig.h

42 #i‚de‡
ZDCONFIG_H


43 
	#ZDCONFIG_H


	)

45 #ifde‡
__˝lu•lus


53 
	~"AF.h
"

58 #i‡
deföed
 ( 
MT_ZDO_FUNC
 )

60 
	#ZDO_NWKADDR_REQUEST


	)

61 
	#ZDO_IEEEADDR_REQUEST


	)

62 
	#ZDO_MATCH_REQUEST


	)

63 
	#ZDO_NODEDESC_REQUEST


	)

64 
	#ZDO_POWERDESC_REQUEST


	)

65 
	#ZDO_SIMPLEDESC_REQUEST


	)

66 
	#ZDO_ACTIVEEP_REQUEST


	)

68 
	#ZDO_COMPLEXDESC_REQUEST


	)

69 
	#ZDO_USERDESC_REQUEST


	)

70 
	#ZDO_USERDESCSET_REQUEST


	)

71 
	#ZDO_ENDDEVICEBIND_REQUEST


	)

72 
	#ZDO_BIND_UNBIND_REQUEST


	)

73 
	#ZDO_SERVERDISC_REQUEST


	)

74 
	#ZDO_NETWORKSTART_REQUEST


	)

75 
	#ZDO_MANUAL_JOIN


	)

77 
	#ZDO_COMPLEXDESC_RESPONSE


	)

78 
	#ZDO_USERDESC_RESPONSE


	)

79 
	#ZDO_USERDESCSET_RESPONSE


	)

80 
	#ZDO_SERVERDISC_RESPONSE


	)

81 
	#ZDO_ENDDEVICE_ANNCE


	)

83 #i‡
deföed
 ( 
MT_ZDO_MGMT
 )

84 
	#ZDO_MGMT_NWKDISC_REQUEST


	)

85 
	#ZDO_MGMT_LQI_REQUEST


	)

86 
	#ZDO_MGMT_RTG_REQUEST


	)

87 
	#ZDO_MGMT_BIND_REQUEST


	)

88 
	#ZDO_MGMT_LEAVE_REQUEST


	)

89 
	#ZDO_MGMT_JOINDIRECT_REQUEST


	)

90 
	#ZDO_MGMT_PERMIT_JOIN_REQUEST


	)

91 
	#ZDO_MGMT_NWKUPDATE_REQUEST


	)

92 
	#ZDO_MGMT_NWKDISC_RESPONSE


	)

93 
	#ZDO_MGMT_LQI_RESPONSE


	)

94 
	#ZDO_MGMT_RTG_RESPONSE


	)

95 
	#ZDO_MGMT_BIND_RESPONSE


	)

96 
	#ZDO_MGMT_LEAVE_RESPONSE


	)

97 
	#ZDO_MGMT_JOINDIRECT_RESPONSE


	)

98 
	#ZDO_MGMT_PERMIT_JOIN_RESPONSE


	)

99 
	#ZDO_MGMT_NWKUPDATE_NOTIFY


	)

109 
	#ZDO_MATCH_REQUEST


	)

117 
	#ZDO_ENDDEVICEBIND_REQUEST


	)

128 
	#ZDO_ENDDEVICE_ANNCE


	)

145 #i‡
deföed
 ( 
REFLECTOR
 )

147 #i‡!
deföed
(
ZDO_NWKADDR_REQUEST
)

148 
	#ZDO_NWKADDR_REQUEST


	)

150 #i‡!
deföed
(
ZDO_IEEEADDR_REQUEST
)

151 
	#ZDO_IEEEADDR_REQUEST


	)

153 
	#ZDO_BIND_UNBIND_RESPONSE


	)

162 
	#MAX_BUFFER_SIZE
 80

	)

164 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

166 
	#MAX_TRANSFER_SIZE
 160

	)

168 
	#MAX_TRANSFER_SIZE
 80

	)

171 
	#MAX_ENDPOINTS
 240

	)

174 
	#ZDOLOGICALTYPE_MASK
 0x07

	)

175 
	#ZDOAPSFLAGS_MASK
 0x07

	)

176 
	#ZDOFREQUENCYBANDS_MASK
 0x1F

	)

177 
	#ZDOAPSFLAGS_BITLEN
 3

	)

179 
	#SIMPLE_DESC_DATA_SIZE
 7

	)

180 
	#NODE_DESC_DATA_SIZE
 10

	)

183 
	#ZDOENDPOINT_BITLEN
 5

	)

184 
	#ZDOENDPOINT_MASK
 0x1F

	)

185 
	#ZDOINTERFACE_MASK
 0x07

	)

186 
	#ZDOAPPFLAGS_MASK
 0x0F

	)

187 
	#ZDOAPPDEVVER_MASK
 0x0F

	)

188 
	#ZDOAPPDEVVER_BITLEN
 4

	)

194 
NodeDes¸ùt‹F‹m©_t
 
ZDO_C⁄fig_Node_Des¸ùt‹
;

195 
NodePowîDes¸ùt‹F‹m©_t
 
ZDO_C⁄fig_Powî_Des¸ùt‹
;

200 
ZDC⁄fig_InôDes¸ùt‹s
( );

201 
ZDC⁄fig_Upd©eNodeDes¸ùt‹
( );

202 
ZDC⁄fig_Upd©ePowîDes¸ùt‹
( );

209 #ifde‡
__˝lu•lus


	@Components/stack/zdo/ZDNwkMgr.c

40 #ifde‡
__˝lu•lus


48 
	~"ZComdef.h
"

49 
	~"nwk_utû.h
"

50 
	~"ZDAµ.h
"

51 
	~"ZDObje˘.h
"

52 
	~"ZGlobÆs.h
"

53 
	~"ZDNwkMgr.h
"

55 #i‡
deföed
–
MT_ZDO_FUNC
 )

56 
	~"MT_ZDO.h
"

59 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

60 
	~"OnBﬂrd.h
"

64 
	~"hÆ_lcd.h
"

70 
	#ONE_MINUTE
 60000

71 

	)

72 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

73 c⁄° 
NwkMgrSå_1
[] = "NM-failÇot hi";

74 c⁄° 
NwkMgrSå_2
[] = "NM-cur<last fail";

75 c⁄° 
NwkMgrSå_3
[] = "NM-energyÅoo hi";

76 c⁄° 
NwkMgrSå_4
[] = "NM-energyÇot up";

89 
uöt8
 
ZDNwkMgr_TaskID
 = 0;

96 
uöt8
 
ZDNwkMgr_MgmtNwkUpd©eNŸifyTønsSeq
 = 0;

97 
zAddrTy≥_t
 
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
;

98 
uöt16
 
ZDNwkMgr_Upd©eNŸifyTimî
 = 0;

99 
uöt8
 
ZDNwkMgr_NumUpd©eNŸifySít
 = 0;

100 
uöt8
 
ZDNwkMgr_WaôögF‹NŸifyC⁄fúm
 = 
FALSE
;

101 
uöt16
 
ZDNwkMgr_TŸÆTønsmissi⁄s
;

102 
uöt16
 
ZDNwkMgr_TxFaûuªs
;

104 
ZDO_MgmtNwkUpd©eReq_t
 
ZDNwkMgr_MgmtNwkUpd©eReq
;

106 #i‡
deföed
 ( 
NWK_MANAGER
 )

107 
uöt16
 
ZDNwkMgr_Upd©eReque°Timî
 = 0;

108 
uöt8
 
ZDNwkMgr_La°Ch™√lE√rgy
 = 0;

109 
uöt16
 
ZDNwkMgr_La°Ch™√lFaûuªR©e
 = 0;

112 
uöt8
 
ZDNwkMgr_NewCh™√l
;

115 #i‡
deföed
 ( 
NWK_MANAGER
 )

116 
uöt8
 
ZDNwkMgr_P™IdUpd©eInProgªss
 = 
FALSE
;

123 (*
pZDNwkMgr_Rï‹tCh™√lI¡î„ªn˚
)–
NLME_Ch™I¡î„ªn˚_t
 *
ch™I¡î„ªn˚
 ) = 
NULL
;

124 (*
pZDNwkMgr_Pro˚ssD©aC⁄fúm
)–
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
 ) = 
NULL
;

125 (*
pZDNwkMgr_EDSˇnC⁄fúmCB
)–
NLME_EDSˇnC⁄fúm_t
 *
EDSˇnC⁄fúm
 ) = 
NULL
;

128 (*
pZDNwkMgr_Nëw‹kRï‹tCB
)–
ZDNwkMgr_Nëw‹kRï‹t_t
 *
pRï‹t
 ) = 
NULL
;

129 (*
pZDNwkMgr_Nëw‹kUpd©eCB
)–
ZDNwkMgr_Nëw‹kUpd©e_t
 *
pUpd©e
 ) = 
NULL
;

135 
ZDNwkMgr_Pro˚ssSîvîDiscR•
–
zdoIncomögMsg_t
 *
öMsg
 );

136 
ZDNwkMgr_SëNwkM™agîAddr
–
uöt16
 
nwkM™agîAddr
 );

139 
ZDNwkMgr_Pro˚ssMsgCBs
–
zdoIncomögMsg_t
 *
öMsg
 );

141 
ZDNwkMgr_Pro˚ssMgmtNwkUpd©eReq
–
zdoIncomögMsg_t
 *
öMsg
 );

142 
ZDNwkMgr_Pro˚ssCh™√lI¡î„ªn˚
–
ZDNwkMgr_Ch™I¡î„ªn˚_t
 *
pCh™I¡î„ªn˚
 );

143 
ZDNwkMgr_Pro˚ssEDSˇnC⁄fúm
–
ZDNwkMgr_EDSˇnC⁄fúm_t
 *
pEDSˇnC⁄fúm
 );

144 
ZDNwkMgr_CheckF‹Ch™√lI¡î„ªn˚
–
ZDNwkMgr_EDSˇnC⁄fúm_t
 *
pEDSˇnC⁄fúm
 );

145 
ZDNwkMgr_BuûdAndSídUpd©eNŸify
–
uöt8
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

146 
uöt16
 
tŸÆTønsmissi⁄s
, uöt16 
txFaûuªs
,

147 
ZDNwkMgr_EDSˇnC⁄fúm_t
 *
pEDSˇnC⁄fúm
, 
uöt8
 
txO±i⁄s
 );

148 
ZDNwkMgr_EDSˇnC⁄fúmCB
–
NLME_EDSˇnC⁄fúm_t
 *
EDSˇnC⁄fúm
 );

149 
ZDNwkMgr_Pro˚ssD©aC⁄fúm
–
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
 );

150 
ZDNwkMgr_Rï‹tCh™√lI¡î„ªn˚
–
NLME_Ch™I¡î„ªn˚_t
 *
ch™I¡î„ªn˚
 );

152 #i‡
deföed
 ( 
NWK_MANAGER
 )

153 
ZDNwkMgr_Pro˚ssMgmtNwkUpd©eNŸify
–
zdoIncomögMsg_t
 *
öMsg
 );

154 
ZDNwkMgr_CheckF‹Ch™√lCh™ge
–
ZDO_MgmtNwkUpd©eNŸify_t
 *
pNŸify
 );

158 #i‡
deföed
 ( 
NWK_MANAGER
 )

159 
ZDNwkMgr_Nëw‹kRï‹tCB
–
ZDNwkMgr_Nëw‹kRï‹t_t
 *
pRï‹t
 );

160 
ZDNwkMgr_Nëw‹kUpd©eCB
–
ZDNwkMgr_Nëw‹kUpd©e_t
 *
pUpd©e
 );

162 
ZDNwkMgr_Pro˚ssNëw‹kRï‹t
–
ZDNwkMgr_Nëw‹kRï‹t_t
 *
pNëw‹kRï‹t
 );

163 
ZDNwkMgr_Pro˚ssNëw‹kUpd©e
–
ZDNwkMgr_Nëw‹kUpd©e_t
 *
pNëw‹kUpd©e
 );

180 
ZDNwkMgr_Inô
–
byã
 
èsk_id
 )

183 
ZDNwkMgr_TaskID
 = 
èsk_id
;

185 
ZDO_Regi°îF‹ZDOMsg
–
ZDNwkMgr_TaskID
, 
Sîvî_Discovîy_r•
 );

188 
ZDO_Regi°îF‹ZDOMsg
–
ZDNwkMgr_TaskID
, 
Mgmt_NWK_Upd©e_ªq
 );

189 #i‡
deföed
 ( 
NWK_MANAGER
 )

190 
ZDO_Regi°îF‹ZDOMsg
–
ZDNwkMgr_TaskID
, 
Mgmt_NWK_Upd©e_nŸify
 );

193 
pZDNwkMgr_EDSˇnC⁄fúmCB
 = 
ZDNwkMgr_EDSˇnC⁄fúmCB
;

194 
pZDNwkMgr_Pro˚ssD©aC⁄fúm
 = 
ZDNwkMgr_Pro˚ssD©aC⁄fúm
;

195 
pZDNwkMgr_Rï‹tCh™√lI¡î„ªn˚
 = 
ZDNwkMgr_Rï‹tCh™√lI¡î„ªn˚
;

198 #i‡
deföed
 ( 
NWK_MANAGER
 )

199 
pZDNwkMgr_Nëw‹kRï‹tCB
 = 
ZDNwkMgr_Nëw‹kRï‹tCB
;

200 
pZDNwkMgr_Nëw‹kUpd©eCB
 = 
ZDNwkMgr_Nëw‹kUpd©eCB
;

203 
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
.
addrMode
 = 
Addr16Bô
;

204 
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
.
addr
.
sh‹tAddr
 = 
INVALID_NODE_ADDR
;

220 
UINT16
 
ZDNwkMgr_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 )

222 
oßl_evít_hdr_t
 *
msgPå
;

223 ()
èsk_id
;

225 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

227 
msgPå
 = (
oßl_evít_hdr_t
 *)
oßl_msg_ª˚ive
–
ZDNwkMgr_TaskID
 );

228  
msgPå
 )

230  
msgPå
->
evít
 )

232 
ZDO_CB_MSG
:

234 
ZDNwkMgr_Pro˚ssMsgCBs
–(
zdoIncomögMsg_t
 *)
msgPå
 );

237 
NM_CHANNEL_INTERFERE
:

239 
ZDNwkMgr_Pro˚ssCh™√lI¡î„ªn˚
–(
ZDNwkMgr_Ch™I¡î„ªn˚_t
 *)
msgPå
 );

242 
NM_ED_SCAN_CONFIRM
:

244 
ZDNwkMgr_Pro˚ssEDSˇnC⁄fúm
–(
ZDNwkMgr_EDSˇnC⁄fúm_t
 *)
msgPå
 );

246 #i‡
deföed
 ( 
NWK_MANAGER
 )

247 
ZDO_NETWORK_REPORT
:

249 
ZDNwkMgr_Pro˚ssNëw‹kRï‹t
–(
ZDNwkMgr_Nëw‹kRï‹t_t
 *)
msgPå
 );

252 
ZDO_NETWORK_UPDATE
:

254 
ZDNwkMgr_Pro˚ssNëw‹kUpd©e
–(
ZDNwkMgr_Nëw‹kUpd©e_t
 *)
msgPå
 );

262 
oßl_msg_dóŒoˇã
–(
uöt8
 *)
msgPå
 );

265 
msgPå
 = (
oßl_evít_hdr_t
 *)
oßl_msg_ª˚ive
–
ZDNwkMgr_TaskID
 );

269  (
evíts
 ^ 
SYS_EVENT_MSG
);

272 i‡–
evíts
 & 
ZDNWKMGR_CHANNEL_CHANGE_EVT
 )

275 
_NIB
.
nwkLogiˇlCh™√l
 = 
ZDNwkMgr_NewCh™√l
;

276 
ZMacSëReq
–
ZMacCh™√l
, &
ZDNwkMgr_NewCh™√l
 );

279 
ZDAµ_NwkSèãUpd©eCB
();

282 
_NIB
.
nwkTŸÆTønsmissi⁄s
 = 0;

283 
nwkTønsmissi⁄Faûuªs
–
TRUE
 );

285  ( 
evíts
 ^ 
ZDNWKMGR_CHANNEL_CHANGE_EVT
 );

288 i‡–
evíts
 & 
ZDNWKMGR_UPDATE_NOTIFY_EVT
 )

291 i‡–
ZDNwkMgr_Upd©eNŸifyTimî
 > 0 )

293 
ZDNwkMgr_Upd©eNŸifyTimî
--;

294 
oßl_°¨t_timîEx
–
ZDNwkMgr_TaskID
, 
ZDNWKMGR_UPDATE_NOTIFY_EVT
, 
ONE_MINUTE
 );

298 
ZDNwkMgr_NumUpd©eNŸifySít
 = 0;

301  ( 
evíts
 ^ 
ZDNWKMGR_UPDATE_NOTIFY_EVT
 );

304 #i‡
deföed
 ( 
NWK_MANAGER
 )

305 i‡–
evíts
 & 
ZDNWKMGR_UPDATE_REQUEST_EVT
 )

308 i‡–
ZDNwkMgr_Upd©eReque°Timî
 > 0 )

310 
ZDNwkMgr_Upd©eReque°Timî
--;

311 
oßl_°¨t_timîEx
–
ZDNwkMgr_TaskID
, 
ZDNWKMGR_UPDATE_REQUEST_EVT
, 
ONE_MINUTE
 );

314  ( 
evíts
 ^ 
ZDNWKMGR_UPDATE_REQUEST_EVT
 );

318 i‡–
evíts
 & 
ZDNWKMGR_SCAN_REQUEST_EVT
 )

320 i‡–
ZDNwkMgr_MgmtNwkUpd©eReq
.
sˇnCou¡
 > 0 )

322 i‡–
NLME_EDSˇnReque°
–
ZDNwkMgr_MgmtNwkUpd©eReq
.
ch™√lMask
,

323 
ZDNwkMgr_MgmtNwkUpd©eReq
.
sˇnDuøti⁄
 ) =
ZSuc˚ss
 )

325 
ZDNwkMgr_MgmtNwkUpd©eReq
.
sˇnCou¡
--;

329  ( 
evíts
 ^ 
ZDNWKMGR_SCAN_REQUEST_EVT
 );

345 
ZDNwkMgr_Pro˚ssMsgCBs
–
zdoIncomögMsg_t
 *
öMsg
 )

347  
öMsg
->
˛u°îID
 )

349 
Mgmt_NWK_Upd©e_ªq
:

350 
ZDNwkMgr_Pro˚ssMgmtNwkUpd©eReq
–
öMsg
 );

352 #i‡
deföed
 ( 
NWK_MANAGER
 )

353 
Mgmt_NWK_Upd©e_nŸify
:

354 
ZDNwkMgr_Pro˚ssMgmtNwkUpd©eNŸify
–
öMsg
 );

357 
Sîvî_Discovîy_r•
:

358 
ZDNwkMgr_Pro˚ssSîvîDiscR•
–
öMsg
 );

370 #i‡
deföed
 ( 
NWK_MANAGER
 )

381 
ZDNwkMgr_Pro˚ssMgmtNwkUpd©eNŸify
–
zdoIncomögMsg_t
 *
öMsg
 )

383 i‡–
zgNwkMgrMode
 =
ZDNWKMGR_ENABLE
 )

385 
ZDO_MgmtNwkUpd©eNŸify_t
 *
pNŸify
 = 
ZDO_P¨£MgmtNwkUpd©eNŸify
–
öMsg
 );

386 i‡–
pNŸify
 )

388 
ZDNwkMgr_CheckF‹Ch™√lCh™ge
–
pNŸify
 );

390 
oßl_mem_‰ì
–
pNŸify
 );

406 
ZDNwkMgr_CheckF‹Ch™√lCh™ge
–
ZDO_MgmtNwkUpd©eNŸify_t
 *
pNŸify
 )

408 
uöt8
 
i
;

409 
uöt16
 
ÁûuªR©e
;

410 
uöt8
 
lowe°E√rgyIndex
;

411 
uöt8
 
lowe°E√rgyVÆue
 = 0xFF;

415 
ÁûuªR©e
 = ( 
pNŸify
->
å™smissi⁄Faûuªs
 * 100 ) /ÖNŸify->
tŸÆTønsmissi⁄s
;

416 i‡–
ÁûuªR©e
 < 
ZDNWKMGR_CC_TX_FAILURE
 )

418 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

419 
HÆLcdWrôeSåög
–(*)
NwkMgrSå_1
, 
HAL_LCD_LINE_1
 );

420 
HÆLcdWrôeSåögVÆueVÆue
–": ", 
ÁûuªR©e
, 10, 
ZDNWKMGR_CC_TX_FAILURE
, 10, 
HAL_LCD_LINE_2
 );

427 i‡–
ÁûuªR©e
 < 
ZDNwkMgr_La°Ch™√lFaûuªR©e
 )

429 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

430 
HÆLcdWrôeSåög
–(*)
NwkMgrSå_2
, 
HAL_LCD_LINE_1
 );

431 
HÆLcdWrôeSåögVÆueVÆue
–": ", 
ÁûuªR©e
, 10,

432 
ZDNwkMgr_La°Ch™√lFaûuªR©e
, 10, 
HAL_LCD_LINE_2
 );

439  
i
 = 0; i < 
pNŸify
->
li°Cou¡
; i++ )

441 i‡–
pNŸify
->
íîgyVÆues
[
i
] < 
lowe°E√rgyVÆue
 )

443 
lowe°E√rgyIndex
 = 
i
;

444 
lowe°E√rgyVÆue
 = 
pNŸify
->
íîgyVÆues
[
i
];

450 i‡–
lowe°E√rgyVÆue
 > 
ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL
 )

452 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

453 
HÆLcdWrôeSåög
–(*)
NwkMgrSå_3
, 
HAL_LCD_LINE_1
 );

454 
HÆLcdWrôeSåögVÆueVÆue
–": ", 
lowe°E√rgyVÆue
, 10,

455 
ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL
, 10, 
HAL_LCD_LINE_2
 );

461  
i
 = 0; i < 
ED_SCAN_MAXCHANNELS
; i++ )

463 i‡––(
uöt32
)1 << 
i
 ) & 
pNŸify
->
sˇ¬edCh™√ls
 )

465 i‡–
lowe°E√rgyIndex
 == 0 )

467 
lowe°E√rgyIndex
--;

471 i‡––
_NIB
.
nwkLogiˇlCh™√l
 !
i
 ) && ( 
ZDNwkMgr_Upd©eReque°Timî
 == 0 ) )

473 
uöt32
 
ch™√lMask
;

474 
zAddrTy≥_t
 
d°Addr
;

477 
ZDNwkMgr_NewCh™√l
 = 
i
;

485 
ZDNwkMgr_La°Ch™√lE√rgy
 = 
lowe°E√rgyVÆue
;

486 
ZDNwkMgr_La°Ch™√lFaûuªR©e
 = 
ÁûuªR©e
;

491 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

492 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR_DEVRXON
;

493 
ch™√lMask
 = (
uöt32
)1 << 
i
;

496 
NLME_SëUpd©eID
(
_NIB
.
nwkUpd©eId
 + 1);

498 
ZDP_MgmtNwkUpd©eReq
–&
d°Addr
, 
ch™√lMask
, 0x„, 0, 
_NIB
.
nwkUpd©eId
, 0 );

504 
ZDNwkMgr_Upd©eReque°Timî
 = 
ZDNWKMGR_UPDATE_REQUEST_TIMER
;

505 
oßl_°¨t_timîEx
–
ZDNwkMgr_TaskID
, 
ZDNWKMGR_UPDATE_REQUEST_EVT
, 
ONE_MINUTE
 );

512 
oßl_°¨t_timîEx
–
ZDNwkMgr_TaskID
, 
ZDNWKMGR_CHANNEL_CHANGE_EVT
,

513 
ZDNWKMGR_BCAST_DELIVERY_TIME
 );

528 
ZDNwkMgr_Pro˚ssMgmtNwkUpd©eReq
–
zdoIncomögMsg_t
 *
öMsg
 )

530 
ZDO_MgmtNwkUpd©eReq_t
 
Req
;

532 
ZDO_P¨£MgmtNwkUpd©eReq
–
öMsg
, &
Req
 );

534 i‡–
Req
.
sˇnDuøti⁄
 <= 0x05 )

537 i‡––!
öMsg
->
wasBrﬂdˇ°
 ) &&

538 –
Req
.
sˇnCou¡
 > 
ZDNWKMGR_MIN_SCAN_COUNT
 ) &&

539 –
Req
.
sˇnCou¡
 <
ZDNWKMGR_MAX_SCAN_COUNT
 ) )

541 i‡–
NLME_EDSˇnReque°
–
Req
.
ch™√lMask
, Req.
sˇnDuøti⁄
 ) =
ZSuc˚ss
 )

544 
ZDNwkMgr_MgmtNwkUpd©eNŸifyTønsSeq
 = 
öMsg
->
TønsSeq
;

545 
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
.
addr
.
sh‹tAddr
 = 
öMsg
->
§cAddr
.addr.shortAddr;

547 
Req
.
sˇnCou¡
--;

550 
ZDNwkMgr_MgmtNwkUpd©eReq
 = 
Req
;

554 i‡–
Req
.
sˇnDuøti⁄
 == 0xFE )

558 i‡–
Req
.
nwkUpd©eId
 > 
_NIB
.nwkUpdateId )

560 
uöt8
 
i
;

563 
NLME_SëUpd©eID
(
Req
.
nwkUpd©eId
);

566  
i
 = 0; i < 
ED_SCAN_MAXCHANNELS
; i++ )

568 i‡––(
uöt32
)1 << 
i
 ) & 
Req
.
ch™√lMask
 )

574 i‡–
_NIB
.
nwkLogiˇlCh™√l
 !
i
 )

576 
ZDNwkMgr_NewCh™√l
 = 
i
;

584 
oßl_°¨t_timîEx
–
ZDNwkMgr_TaskID
, 
ZDNWKMGR_CHANNEL_CHANGE_EVT
,

585 
ZDNWKMGR_BCAST_DELIVERY_TIME
 );

589 i‡–
Req
.
sˇnDuøti⁄
 == 0xFF )

592 i‡–
Req
.
nwkUpd©eId
 > 
_NIB
.nwkUpdateId )

594 
NLME_SëUpd©eID
(
Req
.
nwkUpd©eId
);

596 i‡––
Req
.
ch™√lMask
 !0 ) && ( 
_NIB
.
ch™√lLi°
 != Req.channelMask ) )

598 
_NIB
.
ch™√lLi°
 = 
Req
.
ch™√lMask
;

601 
ZDAµ_NwkSèãUpd©eCB
();

604 
ZDNwkMgr_SëNwkM™agîAddr
–
Req
.
nwkM™agîAddr
 );

610 i‡–!
öMsg
->
wasBrﬂdˇ°
 )

612 
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
.
addr
.
sh‹tAddr
 = 
öMsg
->
§cAddr
.addr.shortAddr;

613 
ZDP_MgmtNwkUpd©eNŸify
–
öMsg
->
TønsSeq
, &
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
,

614 
ZDP_INVALID_REQTYPE
, 0, 0, 0, 0, 
NULL
, 
AF_TX_OPTIONS_NONE
, 
Ál£
 );

628 
ZDNwkMgr_Pro˚ssSîvîDiscR•
–
zdoIncomögMsg_t
 *
öMsg
 )

630 
ZDO_SîvîDiscR•_t
 
R•
;

632 
ZDO_P¨£SîvîDiscR•
–
öMsg
, &
R•
 );

634 i‡–
R•
.
°©us
 =
ZSuc˚ss
 )

637 i‡–
R•
.
£rvîMask
 & 
NETWORK_MANAGER
 )

640 
ZDNwkMgr_SëNwkM™agîAddr
–
öMsg
->
§cAddr
.
addr
.
sh‹tAddr
 );

655 
ZDNwkMgr_Pro˚ssCh™√lI¡î„ªn˚
–
ZDNwkMgr_Ch™I¡î„ªn˚_t
 *
pCh™I¡î„ªn˚
 )

660 i‡–
ZDNwkMgr_NumUpd©eNŸifySít
 < 4 )

663 i‡–
NLME_EDSˇnReque°
–
MAX_CHANNELS_24GHZ
, 
_NIB
.
sˇnDuøti⁄
 ) =
ZSuc˚ss
 )

666 
ZDNwkMgr_TŸÆTønsmissi⁄s
 = 
pCh™I¡î„ªn˚
->
tŸÆTønsmissi⁄s
;

667 
ZDNwkMgr_TxFaûuªs
 = 
pCh™I¡î„ªn˚
->
txFaûuªs
;

670 
ZDNwkMgr_MgmtNwkUpd©eReq
.
sˇnCou¡
 = 0xFF;

685 
ZDNwkMgr_Pro˚ssEDSˇnC⁄fúm
–
ZDNwkMgr_EDSˇnC⁄fúm_t
 *
pEDSˇnC⁄fúm
 )

687 i‡–
ZDNwkMgr_MgmtNwkUpd©eReq
.
sˇnCou¡
 == 0xFF )

690 
ZDNwkMgr_CheckF‹Ch™√lI¡î„ªn˚
–
pEDSˇnC⁄fúm
 );

692 
ZDNwkMgr_MgmtNwkUpd©eReq
.
sˇnCou¡
 = 0;

697 
uöt16
 
txFaûuªs
 = 
nwkTønsmissi⁄Faûuªs
–
FALSE
 );

699 
ZDNwkMgr_BuûdAndSídUpd©eNŸify
–
ZDNwkMgr_MgmtNwkUpd©eNŸifyTønsSeq
,

700 &
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
,

701 
_NIB
.
nwkTŸÆTønsmissi⁄s
, 
txFaûuªs
,

702 
pEDSˇnC⁄fúm
, 
AF_TX_OPTIONS_NONE
 );

704 i‡–
ZDNwkMgr_MgmtNwkUpd©eReq
.
sˇnCou¡
 > 0 )

706 
oßl_°¨t_timîEx
–
ZDNwkMgr_TaskID
, 
ZDNWKMGR_SCAN_REQUEST_EVT
, 50 );

721 
ZDNwkMgr_CheckF‹Ch™√lI¡î„ªn˚
–
ZDNwkMgr_EDSˇnC⁄fúm_t
 *
pEDSˇnC⁄fúm
 )

723 
uöt8
 
i
;

724 
uöt8
 
ch™√lE√rgy
 = 0;

725 
uöt8
 
íîgyIn¸ó£d
 = 
FALSE
;

728 i‡––(
uöt32
)1 << 
_NIB
.
nwkLogiˇlCh™√l
 ) & 
pEDSˇnC⁄fúm
->
sˇ¬edCh™√ls
 )

730 
ch™√lE√rgy
 = 
pEDSˇnC⁄fúm
->
íîgyDëe˘Li°
[
_NIB
.
nwkLogiˇlCh™√l
];

736  
i
 = 0; i < 
ED_SCAN_MAXCHANNELS
; i++ )

738 i‡–––(
uöt32
)1 << 
i
 ) & 
pEDSˇnC⁄fúm
->
sˇ¬edCh™√ls
 ) &&

739 –
ch™√lE√rgy
 > 
pEDSˇnC⁄fúm
->
íîgyDëe˘Li°
[
i
] ) )

741 
íîgyIn¸ó£d
 = 
TRUE
;

749 i‡–
íîgyIn¸ó£d
 )

752 
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
.
addr
.
sh‹tAddr
 = 
_NIB
.
nwkM™agîAddr
;

753 
ZDNwkMgr_BuûdAndSídUpd©eNŸify
–0, &
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
,

754 
ZDNwkMgr_TŸÆTønsmissi⁄s
, 
ZDNwkMgr_TxFaûuªs
,

755 
pEDSˇnC⁄fúm
, 
AF_MSG_ACK_REQUEST
 );

756 
ZDNwkMgr_WaôögF‹NŸifyC⁄fúm
 = 
TRUE
;

758 i‡–
ZDNwkMgr_NumUpd©eNŸifySít
 == 0 )

761 
ZDNwkMgr_Upd©eNŸifyTimî
 = 
ZDNWKMGR_UPDATE_NOTIFY_TIMER
;

762 
oßl_°¨t_timîEx
–
ZDNwkMgr_TaskID
, 
ZDNWKMGR_UPDATE_NOTIFY_EVT
, 
ONE_MINUTE
 );

765 
ZDNwkMgr_NumUpd©eNŸifySít
++;

767 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

770 
HÆLcdWrôeSåög
–(*)
NwkMgrSå_4
, 
HAL_LCD_LINE_1
 );

771 
HÆLcdWrôeSåögVÆueVÆue
–": ", 
_NIB
.
nwkLogiˇlCh™√l
, 10, 
ch™√lE√rgy
, 10, 
HAL_LCD_LINE_2
 );

788 
ZDNwkMgr_BuûdAndSídUpd©eNŸify
–
uöt8
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

789 
uöt16
 
tŸÆTønsmissi⁄s
, uöt16 
txFaûuªs
,

790 
ZDNwkMgr_EDSˇnC⁄fúm_t
 *
pEDSˇnC⁄fúm
,

791 
uöt8
 
txO±i⁄s
 )

793 
uöt8
 
i
;

794 
uöt8
 
li°Cou¡
 = 0;

795 
uöt8
 *
íîgyVÆues
 = 
NULL
;

798  
i
 = 0; i < 
ED_SCAN_MAXCHANNELS
; i++ )

800 i‡––(
uöt32
)1 << 
i
 ) & 
pEDSˇnC⁄fúm
->
sˇ¬edCh™√ls
 )

801 
li°Cou¡
++;

804 i‡–
li°Cou¡
 > 0 )

806 
íîgyVÆues
 = (
uöt8
 *)
oßl_mem_Æloc
–
li°Cou¡
 );

807 i‡–
íîgyVÆues
 )

809 
uöt8
 
j
 = 0;

811  
i
 = 0; i < 
ED_SCAN_MAXCHANNELS
; i++ )

813 i‡––(
uöt32
)1 << 
i
 ) & 
pEDSˇnC⁄fúm
->
sˇ¬edCh™√ls
 )

814 
íîgyVÆues
[
j
++] = 
pEDSˇnC⁄fúm
->
íîgyDëe˘Li°
[
i
];

820 
ZDP_MgmtNwkUpd©eNŸify
–
TønsSeq
, 
d°Addr
, 
pEDSˇnC⁄fúm
->
°©us
,

821 
pEDSˇnC⁄fúm
->
sˇ¬edCh™√ls
,

822 
tŸÆTønsmissi⁄s
, 
txFaûuªs
,

823 
li°Cou¡
, 
íîgyVÆues
, 
txO±i⁄s
, 
Ál£
 );

824 i‡–
íîgyVÆues
 )

825 
oßl_mem_‰ì
–
íîgyVÆues
 );

828 #i‡
deföed
 ( 
NWK_MANAGER
 )

838 
NwkMgr_SëNwkM™agî
( )

840 i‡–
zgNwkMgrMode
 =
ZDNWKMGR_ENABLE
 )

843 
ZDNwkMgr_SëNwkM™agîAddr
–
_NIB
.
nwkDevAddªss
 );

846 
ZDO_C⁄fig_Node_Des¸ùt‹
.
SîvîMask
 |
NETWORK_MANAGER
;

860 
ZDNwkMgr_SëNwkM™agîAddr
–
uöt16
 
nwkM™agîAddr
 )

862 i‡–
_NIB
.
nwkM™agîAddr
 !=ÇwkManagerAddr )

865 
_NIB
.
nwkM™agîAddr
 =ÇwkManagerAddr;

868 
ZDAµ_NwkSèãUpd©eCB
();

882 
ZDNwkMgr_Rï‹tCh™√lI¡î„ªn˚
–
NLME_Ch™I¡î„ªn˚_t
 *
ch™I¡î„ªn˚
 )

884 
ZDNwkMgr_Ch™I¡î„ªn˚_t
 *
pCh™I¡î„ªn˚
;

887 
pCh™I¡î„ªn˚
 = (
ZDNwkMgr_Ch™I¡î„ªn˚_t
 *)
oßl_msg_Æloˇã
( ( ZDNwkMgr_ChanInterference_t ) );

888 i‡–
pCh™I¡î„ªn˚
 )

890 
pCh™I¡î„ªn˚
->
hdr
.
evít
 = 
NM_CHANNEL_INTERFERE
;

893 
pCh™I¡î„ªn˚
->
tŸÆTønsmissi⁄s
 = 
ch™I¡î„ªn˚
->totalTransmissions;

894 
pCh™I¡î„ªn˚
->
txFaûuªs
 = 
ch™I¡î„ªn˚
->txFailures;

896 
oßl_msg_£nd
–
ZDNwkMgr_TaskID
, (
uöt8
 *)
pCh™I¡î„ªn˚
 );

910 
ZDNwkMgr_EDSˇnC⁄fúmCB
–
NLME_EDSˇnC⁄fúm_t
 *
EDSˇnC⁄fúm
 )

912 
ZDNwkMgr_EDSˇnC⁄fúm_t
 *
pEDSˇnC⁄fúm
;

915 
pEDSˇnC⁄fúm
 = (
ZDNwkMgr_EDSˇnC⁄fúm_t
 *)
oßl_msg_Æloˇã
( ( ZDNwkMgr_EDScanConfirm_t ) );

916 i‡–
pEDSˇnC⁄fúm
 )

918 
pEDSˇnC⁄fúm
->
hdr
.
evít
 = 
NM_ED_SCAN_CONFIRM
;

921 
pEDSˇnC⁄fúm
->
°©us
 = 
EDSˇnC⁄fúm
->status;

922 
pEDSˇnC⁄fúm
->
sˇ¬edCh™√ls
 = 
EDSˇnC⁄fúm
->scannedChannels;

923 
oßl_mem˝y
–
pEDSˇnC⁄fúm
->
íîgyDëe˘Li°
, 
EDSˇnC⁄fúm
->íîgyDëe˘Li°, 
ED_SCAN_MAXCHANNELS
 );

925 
oßl_msg_£nd
–
ZDNwkMgr_TaskID
, (
uöt8
 *)
pEDSˇnC⁄fúm
 );

938 
ZDNwkMgr_Pro˚ssD©aC⁄fúm
–
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
 )

940 i‡–
ZDNwkMgr_WaôögF‹NŸifyC⁄fúm
 &&

941 –
afD©aC⁄fúm
->
å™sID
 == 0 ) &&

942 –
afD©aC⁄fúm
->
hdr
.
°©us
 =
ZSuc˚ss
 ) )

947 
_NIB
.
nwkTŸÆTønsmissi⁄s
 = 0;

948 
nwkTønsmissi⁄Faûuªs
–
TRUE
 );

950 
ZDNwkMgr_WaôögF‹NŸifyC⁄fúm
 = 
FALSE
;

957 #i‡
deföed
 ( 
NWK_MANAGER
 )

970 
ZDNwkMgr_Nëw‹kRï‹tCB
–
ZDNwkMgr_Nëw‹kRï‹t_t
 *
pRï‹t
 )

973 
oßl_msg_£nd
–
ZDNwkMgr_TaskID
, (
uöt8
 *)
pRï‹t
 );

988 
ZDNwkMgr_Nëw‹kUpd©eCB
–
ZDNwkMgr_Nëw‹kUpd©e_t
 *
pUpd©e
 )

991 
oßl_msg_£nd
–
ZDNwkMgr_TaskID
, (
uöt8
 *)
pUpd©e
 );

1003 
ZDNwkMgr_Pro˚ssNëw‹kRï‹t
–
ZDNwkMgr_Nëw‹kRï‹t_t
 *
pNëw‹kRï‹t
 )

1005 
uöt8
 
i
;

1006 
uöt16
 
√wPID
;

1007 
uöt8
 
unique
 = 
TRUE
;

1009 i‡–
pNëw‹kRï‹t
->
ªp‹tTy≥
 =
NWKREPORT_PANID_CONFLICT
 )

1011 i‡–
ZDNwkMgr_P™IdUpd©eInProgªss
 =
FALSE
 )

1016 
√wPID
 = (
uöt16
)
oßl_ønd
();

1021  
i
 = 0; i < 
pNëw‹kRï‹t
->
ªp‹tInfoC¡
; i++ )

1023 i‡–
pNëw‹kRï‹t
->
∑nIDs
[
i
] =
√wPID
 )

1025 
unique
 = 
FALSE
;

1029 }  !
unique
 );

1032 
NLME_SídNëw‹kUpd©e
–
NWK_BROADCAST_SHORTADDR
, 
NWKUPDATE_PANID_UPDATE
,

1033 
_NIB
.
exãndedPANID
, _NIB.
nwkUpd©eId
+1, 
√wPID
 );

1035 
ZDNwkMgr_P™IdUpd©eInProgªss
 = 
TRUE
;

1049 
ZDNwkMgr_Pro˚ssNëw‹kUpd©e
–
ZDNwkMgr_Nëw‹kUpd©e_t
 *
pNëw‹kUpd©e
 )

1051 i‡–
pNëw‹kUpd©e
->
upd©eTy≥
 =
NWKUPDATE_PANID_UPDATE
 )

1054 
ZDAµ_NwkSèãUpd©eCB
();

1056 
ZDNwkMgr_P™IdUpd©eInProgªss
 = 
FALSE
;

	@Components/stack/zdo/ZDNwkMgr.h

40 #i‚de‡
ZDNWKMGR_H


41 
	#ZDNWKMGR_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"nwk_globÆs.h
"

53 
	~"nwk_utû.h
"

54 
	~"ZDAµ.h
"

61 
	#ZDNWKMGR_DISABLE
 0x00

	)

62 
	#ZDNWKMGR_ENABLE
 0x01

	)

65 
	#ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL
 0x1E

	)

68 #i‡!
deföed
 ( 
ZDNWKMGR_MIN_TRANSMISSIONS
 )

69 
	#ZDNWKMGR_MIN_TRANSMISSIONS
 20

	)

73 
	#ZDNWKMGR_CI_TX_FAILURE
 25

	)

76 
	#ZDNWKMGR_CC_TX_FAILURE
 50

	)

79 
	#ZDNWKMGR_MIN_SCAN_COUNT
 0

	)

80 
	#ZDNWKMGR_MAX_SCAN_COUNT
 5

	)

83 
	#ZDNWKMGR_UPDATE_NOTIFY_TIMER
 60

84 
	#ZDNWKMGR_UPDATE_REQUEST_TIMER
 60

85 

	)

87 
	#ZDNWKMGR_CHANNEL_CHANGE_EVT
 0x0001

	)

88 
	#ZDNWKMGR_UPDATE_NOTIFY_EVT
 0x0002

	)

89 
	#ZDNWKMGR_UPDATE_REQUEST_EVT
 0x0004

	)

90 
	#ZDNWKMGR_SCAN_REQUEST_EVT
 0x0008

	)

92 
	#ZDNWKMGR_BCAST_DELIVERY_TIME
 ( 
_NIB
.
Brﬂdˇ°DñivîyTime
 * 100 )

	)

101 
oßl_evít_hdr_t
 
hdr
;

102 
uöt8
 
å™sSeq
;

103 
uöt16
 
§cAddr
;

104 
uöt32
 
ch™√lMask
;

105 
uöt8
 
sˇnDuøti⁄
;

106 
uöt8
 
sˇnCou¡
;

107 
öt16
 
nwkM™agîAddr
;

108 
uöt8
 
wasBrﬂdˇ°
;

109 } 
	tZDNwkMgr_MgmtNwkUpd©eReque°_t
;

114 
oßl_evít_hdr_t
 
hdr
;

115 
uöt16
 
§cAddr
;

116 
uöt8
 
°©us
;

117 
uöt32
 
sˇ¬edCh™√ls
;

118 
uöt16
 
tŸÆTønsmissi⁄s
;

119 
uöt16
 
txFaûuªs
;

120 
uöt8
 
li°Cou¡
;

121 
uöt8
 *
íîgyVÆues
;

122 } 
	tZDNwkMgr_MgmtNwkUpd©eNŸify_t
;

127 
oßl_evít_hdr_t
 
hdr
;

128 
uöt16
 
tŸÆTønsmissi⁄s
;

129 
uöt16
 
txFaûuªs
;

130 } 
	tZDNwkMgr_Ch™I¡î„ªn˚_t
;

135 
oßl_evít_hdr_t
 
hdr
;

136 
uöt8
 
°©us
;

137 
uöt32
 
sˇ¬edCh™√ls
;

138 
uöt8
 
íîgyDëe˘Li°
[
ED_SCAN_MAXCHANNELS
];

139 } 
	tZDNwkMgr_EDSˇnC⁄fúm_t
;

144 
oßl_evít_hdr_t
 
hdr
;

145 
uöt16
 
§cAddr
;

146 
uöt8
 
ªp‹tTy≥
;

147 
uöt8
 
EPID
[
Z_EXTADDR_LEN
];

148 
uöt8
 
ªp‹tInfoC¡
;

149 
uöt16
 
∑nIDs
[];

150 } 
	tZDNwkMgr_Nëw‹kRï‹t_t
;

155 
oßl_evít_hdr_t
 
hdr
;

156 
uöt8
 
upd©eTy≥
;

157 
uöt8
 
upd©eInfoC¡
;

158 
uöt16
 
√wP™ID
;

159 } 
	tZDNwkMgr_Nëw‹kUpd©e_t
;

164 
byã
 
ZDNwkMgr_TaskID
;

176 
ZDNwkMgr_Inô
–
byã
 
èsk_id
 );

181 
UINT16
 
ZDNwkMgr_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 );

187 (*
pZDNwkMgr_EDSˇnC⁄fúmCB
)–
NLME_EDSˇnC⁄fúm_t
 *
EDSˇnC⁄fúm
 );

188 (*
pZDNwkMgr_Pro˚ssD©aC⁄fúm
)–
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
 );

189 (*
pZDNwkMgr_Rï‹tCh™√lI¡î„ªn˚
)–
NLME_Ch™I¡î„ªn˚_t
 *
ch™I¡î„ªn˚
 );

192 (*
pZDNwkMgr_Nëw‹kRï‹tCB
)–
ZDNwkMgr_Nëw‹kRï‹t_t
 *
pRï‹t
 );

193 (*
pZDNwkMgr_Nëw‹kUpd©eCB
)–
ZDNwkMgr_Nëw‹kUpd©e_t
 *
pUpd©e
 );

195 #i‡
deföed
 ( 
NWK_MANAGER
 )

199 
NwkMgr_SëNwkM™agî
( );

205 #ifde‡
__˝lu•lus


	@Components/stack/zdo/ZDObject.c

43 
	~"ZComdef.h
"

44 
	~"OSAL.h
"

45 
	~"OSAL_Nv.h
"

46 
	~"πg.h
"

47 
	~"NLMEDE.h
"

48 
	~"nwk_globÆs.h
"

49 
	~"APS.h
"

50 
	~"APSMEDE.h
"

51 
	~"AssocLi°.h
"

52 
	~"BödögTabÀ.h
"

53 
	~"AddrMgr.h
"

54 
	~"AF.h
"

55 
	~"ZDObje˘.h
"

56 
	~"ZDProfûe.h
"

57 
	~"ZDC⁄fig.h
"

58 
	~"ZDSecMgr.h
"

59 
	~"ZDAµ.h
"

60 
	~"nwk_utû.h
"

61 
	~"ZGlobÆs.h
"

62 #i‡
deföed
 
MT_ZDO_CB_FUNC


63 
	~"MT.h
"

66 #i‡
deföed
–
LCD_SUPPORTED
 )

67 
	~"OnBﬂrd.h
"

71 
	~"hÆ_lcd.h
"

81 
	#ZDO_Pro˚ssMgmtPîmôJoöTimeout
 
NLME_PîmôJoöögTimeout


	)

84 
	#ZDO_MGMT_RTG_ENTRY_ACTIVE
 0x00

	)

85 
	#ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY
 0x01

	)

86 
	#ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED
 0x02

	)

87 
	#ZDO_MGMT_RTG_ENTRY_INACTIVE
 0x03

	)

92 #i‡
deföed
 ( 
REFLECTOR
 )

95 
byã
 
	mSrcTønsSeq
;

96 
zAddrTy≥_t
 
	mSrcAddr
;

97 
uöt16
 
	mLoˇlCo‹dö©‹
;

98 
byã
 
	mïI¡f
;

99 
uöt16
 
	mProfûeID
;

100 
byã
 
	mnumInClu°îs
;

101 
uöt16
 *
	möClu°îs
;

102 
byã
 
	mnumOutClu°îs
;

103 
uöt16
 *
	moutClu°îs
;

104 
byã
 
	mSecurôyU£
;

105 
byã
 
	m°©us
;

106 } 
	tZDO_EDBöd_t
;

111 
	mZDMATCH_INIT
,

112 
	mZDMATCH_WAIT_REQ
,

113 
	mZDMATCH_SENDING_BINDS


118 
	mZDMATCH_SENDING_NOT
,

119 
	mZDMATCH_SENDING_UNBIND
,

120 
	mZDMATCH_SENDING_BIND


138 
uöt16
 
	gZDOBuûdBuf
[26];

140 #i‡
deföed
 ( 
REFLECTOR
 )

141 
ZDO_EDBöd_t
 *
	gZDO_EDBöd
;

144 #i‡
deföed
 ( 
MANAGED_SCAN
 )

145 
uöt32
 
	gm™agedSˇnNextCh™√l
 = 0;

146 
uöt32
 
	gm™agedSˇnCh™√lMask
 = 0;

147 
uöt8
 
	gm™agedSˇnTimesPîCh™√l
 = 0;

150 
ZDM©chEndDevi˚Böd_t
 *
	gm©chED
 = (ZDM©chEndDevi˚Böd_à*)
NULL
;

152 
uöt32
 
	g≠sCh™√lMask
 = 0;

157 
ZDODevi˚Sëup
( );

158 #i‡
deföed
 ( 
MANAGED_SCAN
 )

159 
ZDOM™agedSˇn_Next
( );

161 #i‡
deföed
 ( 
REFLECTOR
 )

162 
ZDO_RemoveEndDevi˚Böd
( );

163 
ZDO_SídEDBödR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
, byã 
Sètus
, byã 
£cU£
 );

165 
byã
 
ZDO_Com∑ªClu°îLi°s
–byã 
numLi°1
, 
uöt16
 *
li°1
,

166 
byã
 
numLi°2
, 
uöt16
 *
li°2
, uöt16 *
pM©ches
 );

167 
ZDO_RemoveM©chMem‹y
( );

168 
uöt8
 
ZDO_C›yM©chInfo
–
ZDEndDevi˚Böd_t
 *
de°Req
, ZDEndDevi˚Böd_à*
§cReq
 );

169 
ZDO_EndDevi˚BödM©chTimeoutCB
( );

170 
uöt8
 *
ZDO_C⁄vîtOTAClu°îs
–uöt8 
˙t
, uöt8 *
öBuf
, 
uöt16
 *
outLi°
 );

171 
zdoSídSèãCh™geMsg
(
uöt8
 
°©e
, uöt8 
èskId
);

182 
	$ZDO_Inô
( )

185 #i‡
	`deföed
 ( 
REFLECTOR
 )

186 
ZDO_EDBöd
 = 
NULL
;

190 
	`oßl_˝yExtAddr
–
ZDO_U£ExãndedPANID
, 
AIB_≠sU£ExãndedPANID
 );

193 
	`ZDODevi˚Sëup
();

194 
	}
}

196 #i‡
deföed
 ( 
MANAGED_SCAN
 )

206 
	$ZDOM™agedSˇn_Next
( )

209 i‡–
m™agedSˇnNextCh™√l
 =0 && 
m™agedSˇnTimesPîCh™√l
 == 0 )

212 
m™agedSˇnNextCh™√l
 = 1;

214  
m™agedSˇnNextCh™√l
 && (
zgDeÁu…Ch™√lLi°
 & managedScanNextChannel) == 0 )

215 
m™agedSˇnNextCh™√l
 <<= 1;

217 
m™agedSˇnCh™√lMask
 = 
m™agedSˇnNextCh™√l
;

218 
m™agedSˇnTimesPîCh™√l
 = 
MANAGEDSCAN_TIMES_PRE_CHANNEL
;

223 i‡–
m™agedSˇnTimesPîCh™√l
 == 0 )

226 
m™agedSˇnCh™√lMask
 = 
m™agedSˇnNextCh™√l
;

227 
m™agedSˇnTimesPîCh™√l
 = 
MANAGEDSCAN_TIMES_PRE_CHANNEL
;

231 
m™agedSˇnTimesPîCh™√l
--;

233 i‡–
m™agedSˇnTimesPîCh™√l
 == 0 )

235 
m™agedSˇnNextCh™√l
 <<= 1;

236  
m™agedSˇnNextCh™√l
 && (
zgDeÁu…Ch™√lLi°
 & managedScanNextChannel) == 0 )

237 
m™agedSˇnNextCh™√l
 <<= 1;

239 i‡–
m™agedSˇnNextCh™√l
 == 0 )

240 
zdoDiscCou¡î
 = 
NUM_DISC_ATTEMPTS
 + 1;

244 
	}
}

256 
	$ZDODevi˚Sëup
( )

258 i‡–
ZG_BUILD_COORDINATOR_TYPE
 )

260 
	`NLME_Co‹dö©‹Inô
();

263 #i‡
	`deföed
 ( 
REFLECTOR
 )

264 
	`APS_ReÊe˘‹Inô
–(
ZG_DEVICE_COORDINATOR_TYPE
Ë? 
APS_REFLECTOR_PUBLIC
 : 
APS_REFLECTOR_PRIVATE
 );

267 i‡–
ZG_BUILD_JOINING_TYPE
 )

269 
	`NLME_Devi˚JoöögInô
();

271 
	}
}

285 
	$ZDO_SèπDevi˚
–
byã
 
logiˇlTy≥
, 
devSèπModes_t
 
°¨tMode
, byã 
bóc⁄Ordî
, byã 
su≥r‰ameOrdî
 )

287 
ZSètus_t
 
ªt
;

288 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 )

289 
uöt8
 
discRërõs
 = 0;

291 #i‡
	`deföed
 ( 
ZIGBEE_COMMISSIONING
 )

292 
uöt8
 
sˇnC¡
 = 0;

295 
ªt
 = 
ZUnsuµ‹ãdMode
;

297 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
logiˇlTy≥
 =
NODETYPE_COORDINATOR
 )

299 i‡–
°¨tMode
 =
MODE_HARD
 )

301 
devSèã
 = 
DEV_COORD_STARTING
;

302 
ªt
 = 
	`NLME_Nëw‹kF‹m©i⁄Reque°
–
zgC⁄figPANID
, 
zgApsU£ExãndedPANID
, 
zgDeÁu…Ch™√lLi°
,

303 
zgDeÁu…SèπögSˇnDuøti⁄
, 
bóc⁄Ordî
,

304 
su≥r‰ameOrdî
, 
Ál£
 );

306 i‡–
°¨tMode
 =
MODE_RESUME
 )

309 
devSèã
 = 
DEV_COORD_STARTING
;

310 
ªt
 = 
	`NLME_SèπRouãrReque°
–
bóc⁄Ordî
, bóc⁄Ordî, 
Ál£
 );

314 #i‡
	`deföed
–
LCD_SUPPORTED
 )

315 
	`HÆLcdWrôeS¸ìn
( "StartDevice ERR", "MODE unknown" );

320 i‡–
ZG_BUILD_JOINING_TYPE
 && (
logiˇlTy≥
 =
NODETYPE_ROUTER
 ||ÜogiˇlTy≥ =
NODETYPE_DEVICE
) )

322 i‡–(
°¨tMode
 =
MODE_JOIN
Ë|| (°¨tModê=
MODE_REJOIN
) )

324 
devSèã
 = 
DEV_NWK_DISC
;

326 #i‡
	`deföed
–
MANAGED_SCAN
 )

327 
	`ZDOM™agedSˇn_Next
();

328 
ªt
 = 
	`NLME_Nëw‹kDiscovîyReque°
–
m™agedSˇnCh™√lMask
, 
BEACON_ORDER_15_MSEC
 );

330 
ªt
 = 
	`NLME_Nëw‹kDiscovîyReque°
–
zgDeÁu…Ch™√lLi°
, 
zgDeÁu…SèπögSˇnDuøti⁄
 );

331 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 )

332 i‡–!–
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 & 
CAPINFO_RCVR_ON_IDLE
 ) &&

333 –
ªt
 =
ZSuc˚ss
 ) && ( ++
discRërõs
 == 4 ) )

341 
zgDeÁu…Ch™√lLi°
 = 
MAX_CHANNELS_24GHZ
;

344 #i‡
	`deföed
 ( 
ZIGBEE_COMMISSIONING
 )

345 i‡(
°¨tMode
 =
MODE_REJOIN
 && 
sˇnC¡
++ >= 5 )

353 
zgDeÁu…Ch™√lLi°
 = 
MAX_CHANNELS_24GHZ
;

358 i‡–
°¨tMode
 =
MODE_RESUME
 )

360 i‡–
logiˇlTy≥
 =
NODETYPE_ROUTER
 )

362 
ZMacSˇnCnf_t
 
sˇnCnf
;

363 
devSèã
 = 
DEV_NWK_ORPHAN
;

366 
sˇnCnf
.
hdr
.
Sètus
 = 
ZSUCCESS
;

367 
sˇnCnf
.
SˇnTy≥
 = 
ZMAC_ORPHAN_SCAN
;

368 
sˇnCnf
.
Unsˇ¬edCh™√ls
 = 0;

369 
sˇnCnf
.
Resu…Li°Size
 = 0;

370 
	`nwk_SˇnJoöögOΩh™
(&
sˇnCnf
);

372 
ªt
 = 
ZSuc˚ss
;

376 
devSèã
 = 
DEV_NWK_ORPHAN
;

377 
ªt
 = 
	`NLME_OΩh™JoöReque°
–
zgDeÁu…Ch™√lLi°
,

378 
zgDeÁu…SèπögSˇnDuøti⁄
 );

383 #i‡
	`deföed
–
LCD_SUPPORTED
 )

384 
	`HÆLcdWrôeS¸ìn
( "StartDevice ERR", "MODE unknown" );

389 i‡–
ªt
 !
ZSuc˚ss
 )

391 
	`oßl_°¨t_timîEx
(
ZDAµTaskID
, 
ZDO_NETWORK_INIT
, 
NWK_RETRY_DELAY
 );

393 
	}
}

412 
	$zdoSídSèãCh™geMsg
(
uöt8
 
°©e
, uöt8 
èskId
)

414 
oßl_evít_hdr_t
 *
pMsg
 = (oßl_evít_hdr_à*)
	`oßl_msg_föd
(
èskId
, 
ZDO_STATE_CHANGE
);

416 i‡(
NULL
 =
pMsg
)

418 i‡(
NULL
 =(
pMsg
 = (
oßl_evít_hdr_t
 *)
	`oßl_msg_Æloˇã
((osal_event_hdr_t))))

422 
	`oßl_£t_evít
(
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
);

426 
pMsg
->
evít
 = 
ZDO_STATE_CHANGE
;

427 
pMsg
->
°©us
 = 
°©e
;

429 ()
	`oßl_msg_£nd
(
èskId
, (
uöt8
 *)
pMsg
);

435 
pMsg
->
°©us
 = 
°©e
;

437 
	}
}

461 
	$ZDO_Upd©eNwkSètus
(
devSèãs_t
 
°©e
)

463 
ïLi°_t
 *
pIãm
 = 
ïLi°
;

465 
pIãm
 !
NULL
)

467 i‡(
pIãm
->
ïDesc
->
ídPoöt
 !
ZDO_EP
)

469 
	`zdoSídSèãCh™geMsg
(
°©e
, *(
pIãm
->
ïDesc
->
èsk_id
));

472 
pIãm
 =ÖIãm->
√xtDesc
;

474 #i‡
deföed
 
MT_ZDO_CB_FUNC


475 
	`zdoSídSèãCh™geMsg
(
°©e
, 
MT_TaskID
);

478 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 = 
	`NLME_GëSh‹tAddr
();

479 ()
	`NLME_GëExtAddr
();

480 
	}
}

482 #i‡
deföed
 ( 
REFLECTOR
 )

492 
	$ZDO_RemoveEndDevi˚Böd
( )

494 i‡–
ZDO_EDBöd
 !
NULL
 )

497 i‡–
ZDO_EDBöd
->
öClu°îs
 !
NULL
 )

499 
	`oßl_mem_‰ì
–
ZDO_EDBöd
->
öClu°îs
 );

501 i‡–
ZDO_EDBöd
->
outClu°îs
 !
NULL
 )

503 
	`oßl_mem_‰ì
–
ZDO_EDBöd
->
outClu°îs
 );

505 
	`oßl_mem_‰ì
–
ZDO_EDBöd
 );

506 
ZDO_EDBöd
 = 
NULL
;

508 
	}
}

511 #i‡
deföed
 ( 
REFLECTOR
 )

521 
	$ZDO_SídEDBödR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
, byã 
Sètus
, byã 
£cU£
 )

523 
	`ZDP_EndDevi˚BödR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
£cU£
 );

525 #i‡
	`deföed
–
LCD_SUPPORTED
 )

526 
	`HÆLcdWrôeSåög
–"End Devi˚ Böd", 
HAL_LCD_LINE_1
 );

527 i‡–
Sètus
 =
ZDP_SUCCESS
 )

529 
	`HÆLcdWrôeSåög
–"Suc˚s†Sít", 
HAL_LCD_LINE_2
 );

533 
	`HÆLcdWrôeSåög
–"Timeout", 
HAL_LCD_LINE_2
 );

537 
	}
}

553 
byã
 
	$ZDO_Com∑ªClu°îLi°s
–
byã
 
numLi°1
, 
uöt16
 *
li°1
,

554 
byã
 
numLi°2
, 
uöt16
 *
li°2
, uöt16 *
pM©ches
 )

556 
byã
 
x
, 
y
;

557 
uöt16
 
z
;

558 
byã
 
numM©ches
 = 0;

561  
x
 = 0; x < 
numLi°1
; x++ )

563  
y
 = 0; y < 
numLi°2
; y++ )

565 
z
 = 
li°2
[
y
];

566 i‡–
li°1
[
x
] =
z
 )

568 
pM©ches
[
numM©ches
++] = 
z
;

573  ( 
numM©ches
 );

574 
	}
}

592 
byã
 
	$ZDO_AnyClu°îM©ches
–
byã
 
AC¡
, 
uöt16
 *
ALi°
, byã 
BC¡
, uöt16 *
BLi°
 )

594 
byã
 
x
, 
y
;

596  
x
 = 0; x < 
AC¡
; x++ )

598  
y
 = 0; y < 
BC¡
; y++ )

600 i‡–
ALi°
[
x
] =
BLi°
[
y
] )

602  
åue
;

607  
Ál£
;

608 
	}
}

624 
	$ZDO_Pro˚ssNodeDescReq
–
zdoIncomögMsg_t
 *
öMsg
 )

626 
uöt16
 
aoi
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[0], inMsg->asdu[1] );

627 
NodeDes¸ùt‹F‹m©_t
 *
desc
 = 
NULL
;

629 i‡–
aoi
 =
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 )

631 
desc
 = &
ZDO_C⁄fig_Node_Des¸ùt‹
;

634 i‡–
desc
 !
NULL
 )

636 
	`ZDP_NodeDescMsg
–
öMsg
, 
aoi
, 
desc
 );

640 
	`ZDP_GíîicR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
),

641 
ZDP_INVALID_REQTYPE
, 
aoi
, 
Node_Desc_r•
, 
öMsg
->
SecurôyU£
 );

643 
	}
}

655 
	$ZDO_Pro˚ssPowîDescReq
–
zdoIncomögMsg_t
 *
öMsg
 )

657 
uöt16
 
aoi
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[0], inMsg->asdu[1] );

658 
NodePowîDes¸ùt‹F‹m©_t
 *
desc
 = 
NULL
;

660 i‡–
aoi
 =
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 )

662 
desc
 = &
ZDO_C⁄fig_Powî_Des¸ùt‹
;

665 i‡–
desc
 !
NULL
 )

667 
	`ZDP_PowîDescMsg
–
öMsg
, 
aoi
, 
desc
 );

671 
	`ZDP_GíîicR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
),

672 
ZDP_INVALID_REQTYPE
, 
aoi
, 
Powî_Desc_r•
, 
öMsg
->
SecurôyU£
 );

674 
	}
}

686 
	$ZDO_Pro˚ssSim∂eDescReq
–
zdoIncomögMsg_t
 *
öMsg
 )

688 
Sim∂eDes¸ùti⁄F‹m©_t
 *
sDesc
 = 
NULL
;

689 
uöt16
 
aoi
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[0], inMsg->asdu[1] );

690 
byã
 
ídPoöt
 = 
öMsg
->
asdu
[2];

691 
byã
 
‰ì
 = 
Ál£
;

692 
byã
 
°©
 = 
ZDP_SUCCESS
;

694 i‡–(
ídPoöt
 =
ZDO_EP
Ë|| (ídPoöà> 
MAX_ENDPOINTS
) )

696 
°©
 = 
ZDP_INVALID_EP
;

698 i‡–
aoi
 =
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 )

700 
‰ì
 = 
	`afFödSim∂eDesc
–&
sDesc
, 
ídPoöt
 );

701 i‡–
sDesc
 =
NULL
 )

703 
°©
 = 
ZDP_NOT_ACTIVE
;

708 i‡–
ZSTACK_ROUTER_BUILD
 )

710 
°©
 = 
ZDP_DEVICE_NOT_FOUND
;

712 i‡–
ZSTACK_END_DEVICE_BUILD
 )

714 
°©
 = 
ZDP_INVALID_REQTYPE
;

718 
	`ZDP_Sim∂eDescMsg
–
öMsg
, 
°©
, 
sDesc
 );

720 i‡–
‰ì
 && 
sDesc
 )

722 
	`oßl_mem_‰ì
–
sDesc
 );

724 
	}
}

736 
	$ZDO_Pro˚ssA˘iveEPReq
–
zdoIncomögMsg_t
 *
öMsg
 )

738 
byã
 
˙t
 = 0;

739 
uöt16
 
aoi
;

740 
byã
 
°©
 = 
ZDP_SUCCESS
;

742 
aoi
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[0], inMsg->asdu[1] );

744 i‡–
aoi
 =
	`NLME_GëSh‹tAddr
() )

746 
˙t
 = 
	`afNumEndPoöts
() - 1;

747 
	`afEndPoöts
–(
uöt8
 *)
ZDOBuûdBuf
, 
åue
 );

751 
°©
 = 
ZDP_INVALID_REQTYPE
;

754 
	`ZDP_A˘iveEPR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
°©
,

755 
aoi
, 
˙t
, (
uöt8
 *)
ZDOBuûdBuf
, 
öMsg
->
SecurôyU£
 );

756 
	}
}

768 
uöt8
 *
	$ZDO_C⁄vîtOTAClu°îs
–
uöt8
 
˙t
, uöt8 *
öBuf
, 
uöt16
 *
outLi°
 )

770 
uöt8
 
x
;

772  
x
 = 0; x < 
˙t
; x++ )

775 
outLi°
[
x
] = 
	`BUILD_UINT16
–
öBuf
[0], inBuf[1] );

776 
öBuf
 +–
uöt16
 );

778  ( 
öBuf
 );

779 
	}
}

791 
	$ZDO_Pro˚ssM©chDescReq
–
zdoIncomögMsg_t
 *
öMsg
 )

793 
uöt8
 
ïC¡
 = 0;

794 
uöt8
 
numInClu°îs
;

795 
uöt16
 *
öClu°îs
 = 
NULL
;

796 
uöt8
 
numOutClu°îs
;

797 
uöt16
 *
outClu°îs
 = 
NULL
;

798 
ïLi°_t
 *
ïDesc
;

799 
Sim∂eDes¸ùti⁄F‹m©_t
 *
sDesc
 = 
NULL
;

800 
uöt8
 
Æloˇãd
;

801 
uöt8
 *
msg
;

802 
uöt16
 
aoi
;

803 
uöt16
 
¥ofûeID
;

806 
msg
 = 
öMsg
->
asdu
;

807 
aoi
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

808 
¥ofûeID
 = 
	`BUILD_UINT16
–
msg
[2], msg[3] );

809 
msg
 += 4;

811 i‡–
ADDR_BCAST_NOT_ME
 =
	`NLME_IsAddªssBrﬂdˇ°
(
aoi
) )

813 
	`ZDP_M©chDescR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZDP_INVALID_REQTYPE
,

814 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
, 0, 
NULL
, 
öMsg
->
SecurôyU£
 );

817 i‡–(
ADDR_NOT_BCAST
 =
	`NLME_IsAddªssBrﬂdˇ°
(
aoi
)Ë&& (aoò!
ZDAµNwkAddr
.
addr
.
sh‹tAddr
) )

819 
	`ZDP_M©chDescR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZDP_INVALID_REQTYPE
,

820 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
, 0, 
NULL
, 
öMsg
->
SecurôyU£
 );

824 i‡((
numInClu°îs
 = *
msg
++) &&

825 (
öClu°îs
 = (
uöt16
*)
	`oßl_mem_Æloc
–
numInClu°îs
 * ( uint16 ) )))

827 
msg
 = 
	`ZDO_C⁄vîtOTAClu°îs
–
numInClu°îs
, msg, 
öClu°îs
 );

831 
numInClu°îs
 = 0;

834 i‡((
numOutClu°îs
 = *
msg
++) &&

835 (
outClu°îs
 = (
uöt16
 *)
	`oßl_mem_Æloc
–
numOutClu°îs
 * ( uint16 ) )))

837 
msg
 = 
	`ZDO_C⁄vîtOTAClu°îs
–
numOutClu°îs
, msg, 
outClu°îs
 );

841 
numOutClu°îs
 = 0;

845 
ïDesc
 = 
ïLi°
;

846  
ïDesc
 )

849 i‡–
ïDesc
->ïDesc->
ídPoöt
 !
ZDO_EP
 && (ïDesc->
Êags
&
eEP_AŒowM©ch
) )

851 i‡–
ïDesc
->
p‚DescCB
 )

853 
sDesc
 = (
Sim∂eDes¸ùti⁄F‹m©_t
 *)
ïDesc
->
	`p‚DescCB
–
AF_DESCRIPTOR_SIMPLE
,ÉpDesc->ïDesc->
ídPoöt
 );

854 
Æloˇãd
 = 
TRUE
;

858 
sDesc
 = 
ïDesc
->ïDesc->
sim∂eDesc
;

859 
Æloˇãd
 = 
FALSE
;

862 i‡–
sDesc
 && sDesc->
AµProfId
 =
¥ofûeID
 )

864 
uöt8
 *
uöt8Buf
 = (uöt8 *)
ZDOBuûdBuf
;

867 i‡((
	`ZDO_AnyClu°îM©ches
–
numInClu°îs
, 
öClu°îs
,

868 
sDesc
->
AµNumInClu°îs
, sDesc->
pAµInClu°îLi°
 )) ||

870 (
	`ZDO_AnyClu°îM©ches
–
numOutClu°îs
, 
outClu°îs
,

871 
sDesc
->
AµNumOutClu°îs
, sDesc->
pAµOutClu°îLi°
 )))

874 
uöt8
 
bufLí
 = –
ZDO_M©chDescR•Sít_t
 ) + (
numOutClu°îs
 + 
numInClu°îs
Ë* (
uöt16
);

875 
ZDO_M©chDescR•Sít_t
 *
pR•Sít
 = (ZDO_M©chDescR•Sít_à*Ë
	`oßl_msg_Æloˇã
–
bufLí
 );

877 i‡(
pR•Sít
)

879 
pR•Sít
->
hdr
.
evít
 = 
ZDO_MATCH_DESC_RSP_SENT
;

880 
pR•Sít
->
nwkAddr
 = 
öMsg
->
§cAddr
.
addr
.
sh‹tAddr
;

881 
pR•Sít
->
numInClu°îs
 =ÇumInClusters;

882 
pR•Sít
->
numOutClu°îs
 =ÇumOutClusters;

884 i‡(
numInClu°îs
)

886 
pR•Sít
->
pInClu°îs
 = (
uöt16
*) (pRspSent + 1);

887 
	`oßl_mem˝y
(
pR•Sít
->
pInClu°îs
, 
öClu°îs
, 
numInClu°îs
 * (
uöt16
));

891 
pR•Sít
->
pInClu°îs
 = 
NULL
;

894 i‡(
numOutClu°îs
)

896 
pR•Sít
->
pOutClu°îs
 = (
uöt16
*)’R•Síà+ 1Ë+ 
numInClu°îs
;

897 
	`oßl_mem˝y
(
pR•Sít
->
pOutClu°îs
, 
outClu°îs
, 
numOutClu°îs
 * (
uöt16
));

901 
pR•Sít
->
pOutClu°îs
 = 
NULL
;

904 
	`oßl_msg_£nd
–*
ïDesc
->ïDesc->
èsk_id
, (
uöt8
 *)
pR•Sít
 );

907 
uöt8Buf
[
ïC¡
++] = 
sDesc
->
EndPoöt
;

911 i‡–
Æloˇãd
 )

913 
	`oßl_mem_‰ì
–
sDesc
 );

916 
ïDesc
 =ÉpDesc->
√xtDesc
;

919 i‡–
ïC¡
 )

922 i‡–
ZSuc˚ss
 =
	`ZDP_M©chDescR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZDP_SUCCESS
,

923 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
, 
ïC¡
, (
uöt8
 *)
ZDOBuûdBuf
, 
öMsg
->
SecurôyU£
 ) )

925 #i‡
	`deföed
–
LCD_SUPPORTED
 )

926 
	`HÆLcdWrôeS¸ìn
( "Match Desc Req", "Rsp Sent" );

933 i‡(
ADDR_NOT_BCAST
 =
	`NLME_IsAddªssBrﬂdˇ°
(
aoi
))

936 
	`ZDP_M©chDescR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZDP_SUCCESS
,

937 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
, 0, (
uöt8
 *)
ZDOBuûdBuf
, 
öMsg
->
SecurôyU£
 );

938 #i‡
	`deföed
–
LCD_SUPPORTED
 )

939 
	`HÆLcdWrôeS¸ìn
( "Match Desc Req", "Rsp Non Matched" );

945 #i‡
	`deföed
–
LCD_SUPPORTED
 )

946 
	`HÆLcdWrôeS¸ìn
( "Match Desc Req", "Non Matched" );

951 i‡–
öClu°îs
 !
NULL
 )

953 
	`oßl_mem_‰ì
–
öClu°îs
 );

956 i‡–
outClu°îs
 !
NULL
 )

958 
	`oßl_mem_‰ì
–
outClu°îs
 );

960 
	}
}

972 
	$ZDO_Pro˚ssBödUnbödReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_BödUnbödReq_t
 *
pReq
 )

974 
zAddrTy≥_t
 
Sour˚Addr
;

975 
byã
 
bödSèt
;

977 
Sour˚Addr
.
addrMode
 = 
Addr64Bô
;

978 
	`oßl_˝yExtAddr
–
Sour˚Addr
.
addr
.
extAddr
, 
pReq
->
§cAddªss
 );

984 i‡–!
	`oßl_ExtAddrEquÆ
–
Sour˚Addr
.
addr
.
extAddr
, 
	`NLME_GëExtAddr
()) ||

985 (
pReq
->
d°Addªss
.
addrMode
 !
Addr64Bô
 &&

986 
pReq
->
d°Addªss
.
addrMode
 !
AddrGroup
) )

988 
bödSèt
 = 
ZDP_NOT_SUPPORTED
;

993 i‡–(
pReq
->
§cEndpoöt
 =0 ||ÖReq->§cEndpoöà> 
MAX_ENDPOINTS
)

994 || (–
pReq
->
d°Addªss
.
addrMode
 =
Addr64Bô
 ) &&

995 (
pReq
->
d°Endpoöt
 =0 ||ÖReq->d°Endpoöà> 
MAX_ENDPOINTS
)) )

997 
bödSèt
 = 
ZDP_INVALID_EP
;

1001 i‡–
öMsg
->
˛u°îID
 =
Böd_ªq
 )

1004 
bödSèt
 = 
ZDP_TABLE_FULL
;

1006 #i‡
	`deföed
–
APP_TP
 ) || deföed–
APP_TP2
 )

1008 i‡–
	`bödNumOfE¡rõs
(Ë< 
gNWK_MAX_BINDING_ENTRIES
 )

1011 i‡–
	`APSME_BödReque°
–
pReq
->
§cEndpoöt
,ÖReq->
˛u°îID
,

1012 &(
pReq
->
d°Addªss
),ÖReq->
d°Endpoöt
 ) =
ZSuc˚ss
 )

1014 
uöt16
 
nwkAddr
;

1017 
bödSèt
 = 
ZDP_SUCCESS
;

1020 
	`ZDAµ_NVUpd©e
();

1023 i‡–
pReq
->
d°Addªss
.
addrMode
 =
Addr64Bô
 )

1025 i‡–
	`APSME_LookupNwkAddr
–
pReq
->
d°Addªss
.
addr
.
extAddr
, &
nwkAddr
 ) =
FALSE
 )

1027 
	`ZDP_NwkAddrReq
–
pReq
->
d°Addªss
.
addr
.
extAddr
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0 );

1035 i‡–
	`APSME_UnBödReque°
–
pReq
->
§cEndpoöt
,ÖReq->
˛u°îID
,

1036 &(
pReq
->
d°Addªss
),ÖReq->
d°Endpoöt
 ) =
ZSuc˚ss
 )

1038 
bödSèt
 = 
ZDP_SUCCESS
;

1041 
	`ZDAµ_NVUpd©e
();

1044 
bödSèt
 = 
ZDP_NO_ENTRY
;

1050 
	`ZDP_SídD©a
–&(
öMsg
->
TønsSeq
), &(öMsg->
§cAddr
),

1051 (
öMsg
->
˛u°îID
 | 
ZDO_RESPONSE_BIT
), 1, &
bödSèt
,

1052 
öMsg
->
SecurôyU£
 );

1053 
	}
}

1065 
	$ZDO_Upd©eAddrM™agî
–
uöt16
 
nwkAddr
, 
uöt8
 *
extAddr
 )

1067 
AddrMgrE¡ry_t
 
addrE¡ry
;

1070 
addrE¡ry
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

1071 
addrE¡ry
.
nwkAddr
 =ÇwkAddr;

1072 
	`AddrMgrExtAddrSë
–
addrE¡ry
.
extAddr
,ÉxtAddr );

1073 
	`AddrMgrE¡ryUpd©e
–&
addrE¡ry
 );

1074 
	}
}

1085 
	$ZDO_Pro˚ssSîvîDiscReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1087 
uöt16
 
£rvîMask
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[0], inMsg->asdu[1] );

1088 
uöt16
 
m©chMask
 = 
£rvîMask
 & 
ZDO_C⁄fig_Node_Des¸ùt‹
.
SîvîMask
;

1090 i‡–
m©chMask
 )

1092 
	`ZDP_SîvîDiscR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZSUCCESS
,

1093 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
, 
m©chMask
, 
öMsg
->
SecurôyU£
 );

1095 
	}
}

1111 
	$ZDO_EndDevi˚TimeoutCB
( )

1113 #i‡
	`deföed
 ( 
REFLECTOR
 )

1114 
byã
 
°©
;

1115 i‡–
ZDO_EDBöd
 )

1117 
°©
 = 
ZDO_EDBöd
->
°©us
;

1120 
	`ZDO_SídEDBödR•
–
ZDO_EDBöd
->
SrcTønsSeq
, &(ZDO_EDBöd->
SrcAddr
),

1121 
°©
, 
ZDO_EDBöd
->
SecurôyU£
 );

1123 
	`ZDO_RemoveEndDevi˚Böd
();

1126 
	}
}

1145 
	$ZDO_Pro˚ssMgmtLqiReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1147 
byã
 
x
;

1148 
byã
 
ödex
;

1149 
byã
 
numIãms
;

1150 
byã
 
maxIãms
;

1151 
ZDP_MgmtLqiIãm_t
* 
èbÀ
 = 
NULL
;

1152 
ZDP_MgmtLqiIãm_t
* 
ôem
;

1153 
√ighb‹E¡ry_t
 
íåy
;

1154 
byã
 
aIãms
;

1155 
assocüãd_devi˚s_t
 *
aDevi˚
;

1156 
AddrMgrE¡ry_t
 
nwkE¡ry
;

1157 
uöt8
 
SèπIndex
 = 
öMsg
->
asdu
[0];

1160 
	`NLME_GëReque°
–
nwkNumNeighb‹TabÀE¡rõs
, 0, &
maxIãms
 );

1163 
aIãms
 = (
uöt8
)
	`AssocCou¡
–
PARENT
, 
CHILD_FFD_RX_IDLE
 );

1166 
maxIãms
 +
aIãms
;

1169 i‡–
maxIãms
 > 
SèπIndex
 )

1171 
numIãms
 = 
maxIãms
 - 
SèπIndex
;

1174 i‡–
numIãms
 > 
ZDO_MAX_LQI_ITEMS
 )

1175 
numIãms
 = 
ZDO_MAX_LQI_ITEMS
;

1178 
èbÀ
 = (
ZDP_MgmtLqiIãm_t
*)
	`oßl_mem_Æloc
( ()

1179 –
numIãms
 * –
ZDP_MgmtLqiIãm_t
 ) ) );

1181 i‡–
èbÀ
 !
NULL
 )

1183 
x
 = 0;

1184 
ôem
 = 
èbÀ
;

1185 
ödex
 = 
SèπIndex
;

1188  ; 
x
 < 
numIãms
; x++ )

1190 i‡–
ödex
 < 
aIãms
 )

1193 
aDevi˚
 = 
	`AssocFödDevi˚
–
ödex
++ );

1196 
ôem
->
∑nID
 = 
_NIB
.
nwkP™Id
;

1197 
	`oßl_˝yExtAddr
–
ôem
->
extP™ID
, 
_NIB
.
exãndedPANID
 );

1198 
ôem
->
nwkAddr
 = 
aDevi˚
->
sh‹tAddr
;

1199 
ôem
->
≥rmô
 = 
ZDP_MGMT_BOOL_UNKNOWN
;

1200 
ôem
->
dïth
 = 0xFF;

1201 
ôem
->
lqi
 = 
aDevi˚
->
lökInfo
.
rxLqi
;

1204 
nwkE¡ry
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

1205 
nwkE¡ry
.
nwkAddr
 = 
aDevi˚
->
sh‹tAddr
;

1207 i‡–
	`AddrMgrE¡ryLookupNwk
–&
nwkE¡ry
 ) =
TRUE
 )

1209 
	`oßl_˝yExtAddr
–
ôem
->
extAddr
, 
nwkE¡ry
.extAddr );

1213 
	`oßl_mem£t
–
ôem
->
extAddr
, 0xFF, 
Z_EXTADDR_LEN
 );

1217 i‡–
aDevi˚
->
nodeRñ©i⁄
 =
PARENT
 )

1219 i‡–
aDevi˚
->
sh‹tAddr
 == 0 )

1221 
ôem
->
devTy≥
 = 
ZDP_MGMT_DT_COORD
;

1222 
ôem
->
dïth
 = 0;

1226 
ôem
->
devTy≥
 = 
ZDP_MGMT_DT_ROUTER
;

1227 
ôem
->
dïth
 = 
_NIB
.
nodeDïth
 - 1;

1230 
ôem
->
rxOnIdÀ
 = 
ZDP_MGMT_BOOL_UNKNOWN
;

1231 
ôem
->
ªœti⁄
 = 
ZDP_MGMT_REL_PARENT
;

1236 
ôem
->
dïth
 = 
_NIB
.
nodeDïth
 + 1;

1238 i‡–
aDevi˚
->
nodeRñ©i⁄
 < 
CHILD_FFD
 )

1240 
ôem
->
devTy≥
 = 
ZDP_MGMT_DT_ENDDEV
;

1242 i‡–
aDevi˚
->
nodeRñ©i⁄
 =
CHILD_RFD
 )

1244 
ôem
->
rxOnIdÀ
 = 
FALSE
;

1248 
ôem
->
rxOnIdÀ
 = 
TRUE
;

1253 
ôem
->
devTy≥
 = 
ZDP_MGMT_DT_ROUTER
;

1255 i‡–
aDevi˚
->
nodeRñ©i⁄
 =
CHILD_FFD
 )

1257 
ôem
->
rxOnIdÀ
 = 
FALSE
;

1261 
ôem
->
rxOnIdÀ
 = 
TRUE
;

1265 
ôem
->
ªœti⁄
 = 
ZDP_MGMT_REL_CHILD
;

1268 
ôem
++;

1272 i‡–
SèπIndex
 <
aIãms
 )

1274 
ödex
 = 0;

1277 
ödex
 = 
SèπIndex
 - 
aIãms
;

1283  ; 
x
 < 
numIãms
; x++ )

1286 
	`NLME_GëReque°
–
nwkNeighb‹TabÀ
, 
ödex
++, &
íåy
 );

1289 
ôem
->
∑nID
 = 
íåy
.
∑nId
;

1290 
	`oßl_˝yExtAddr
–
ôem
->
extP™ID
, 
_NIB
.
exãndedPANID
 );

1291 
	`oßl_mem£t
–
ôem
->
extAddr
, 0xFF, 
Z_EXTADDR_LEN
 );

1292 
ôem
->
nwkAddr
 = 
íåy
.
√ighb‹Addªss
;

1293 
ôem
->
rxOnIdÀ
 = 
ZDP_MGMT_BOOL_UNKNOWN
;

1294 
ôem
->
ªœti⁄
 = 
ZDP_MGMT_REL_UNKNOWN
;

1295 
ôem
->
≥rmô
 = 
ZDP_MGMT_BOOL_UNKNOWN
;

1296 
ôem
->
dïth
 = 0xFF;

1297 
ôem
->
lqi
 = 
íåy
.
lökInfo
.
rxLqi
;

1299 i‡–
ôem
->
nwkAddr
 == 0 )

1301 
ôem
->
devTy≥
 = 
ZDP_MGMT_DT_COORD
;

1305 
ôem
->
devTy≥
 = 
ZDP_MGMT_DT_ROUTER
;

1308 
ôem
++;

1314 
numIãms
 = 0;

1318 
	`ZDP_MgmtLqiR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZSuc˚ss
, 
maxIãms
,

1319 
SèπIndex
, 
numIãms
, 
èbÀ
, 
Ál£
 );

1321 i‡–
èbÀ
 )

1323 
	`oßl_mem_‰ì
–
èbÀ
 );

1325 
	}
}

1337 
	$ZDO_Pro˚ssMgmtNwkDiscReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1339 
NLME_SˇnFõlds_t
 
sˇn
;

1340 
uöt8
 
ödex
;

1341 
uöt8
 *
msg
;

1343 
msg
 = 
öMsg
->
asdu
;

1344 
sˇn
.
ch™√ls
 = 
	`oßl_buûd_uöt32
–
msg
, 4 );

1345 
msg
 += 4;

1346 
sˇn
.
duøti⁄
 = *
msg
++;

1347 
ödex
 = *
msg
;

1348 
sˇn
.
sˇnTy≥
 = 
ZMAC_ACTIVE_SCAN
;

1349 
sˇn
.
sˇnAµ
 = 
NLME_DISC_SCAN
;

1352 
zd≠pMgmtNwkDiscReqInProgªss
 = 
åue
;

1353 
zd≠pMgmtNwkDiscR•Addr
.
addrMode
 = 
Addr16Bô
;

1354 
zd≠pMgmtNwkDiscR•Addr
.
addr
.
sh‹tAddr
 = 
öMsg
->
§cAddr
.addr.shortAddr;

1355 
zd≠pMgmtNwkDiscSèπIndex
 = 
ödex
;

1356 
zd≠pMgmtNwkDiscR•TønsSeq
 = 
öMsg
->
TønsSeq
;

1358 i‡–
	`NLME_NwkDiscReq2
–&
sˇn
 ) !
ZSuc˚ss
 )

1360 
	`NLME_NwkDiscTîm
();

1364 
	}
}

1366 #i‡
deföed
 ( 
ZDO_MGMT_NWKDISC_RESPONSE
 )

1382 
	$ZDO_FöishPro˚ssögMgmtNwkDiscReq
( )

1384 
byã
 
cou¡
, 
i
, 
Resu…Cou¡
 = 0;

1385 
√tw‹kDesc_t
 *
√wDesc
 = 
NULL
, *
pLi°
, *
Nëw‹kLi°
;

1387 
Nëw‹kLi°
 = 
	`nwk_gëNwkDescLi°
();

1390 
pLi°
 = 
	`nwk_gëNwkDescLi°
();

1391 
pLi°
)

1393 
Resu…Cou¡
++;

1394 
pLi°
 =ÖLi°->
√xtDesc
;

1397 i‡–
ZSTACK_ROUTER_BUILD
 )

1400 
pLi°
 = 
	`nwk_gëNwkDescLi°
();

1401  
pLi°
 )

1403 i‡–
pLi°
->
∑nId
 =
_NIB
.
nwkP™Id
 )

1409 i‡–!
pLi°
->
√xtDesc
 )

1413 
pLi°
 =ÖLi°->
√xtDesc
;

1419 i‡–!
pLi°
 || (pLi°->
∑nId
 !
_NIB
.
nwkP™Id
) )

1421 
√wDesc
 = (
√tw‹kDesc_t
 *)
	`oßl_mem_Æloc
( (ÇetworkDesc_t ) );

1422 i‡–
√wDesc
 )

1424 
byã
 
pJoö
;

1426 
√wDesc
->
∑nId
 = 
_NIB
.
nwkP™Id
;

1427 
√wDesc
->
logiˇlCh™√l
 = 
_NIB
.
nwkLogiˇlCh™√l
;

1428 
√wDesc
->
vîsi⁄
 = 
	`NLME_GëPrŸocﬁVîsi⁄
();

1429 
√wDesc
->
°ackProfûe
 = 
zgSèckProfûe
;

1432 
	`oßl_˝yExtAddr
–
√wDesc
->
exãndedPANID
, 
_NIB
.extendedPANID);

1434 
	`ZMacGëReq
–
ZMacAssocüti⁄Pîmô
, &
pJoö
 );

1435 
√wDesc
->
cho£nRouãr
 = ((
pJoö
Ë? 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 :

1436 
INVALID_NODE_ADDR
);

1438 
√wDesc
->
√xtDesc
 = 
Nëw‹kLi°
;

1439 
Nëw‹kLi°
 = 
√wDesc
;

1440 
Resu…Cou¡
++;

1446 i‡–
zd≠pMgmtNwkDiscSèπIndex
 > 
Resu…Cou¡
 )

1448 
cou¡
 = 0;

1452 
cou¡
 = 
Resu…Cou¡
 - 
zd≠pMgmtNwkDiscSèπIndex
;

1453 i‡–
cou¡
 > 
ZDO_MAX_NWKDISC_ITEMS
 )

1455 
cou¡
 = 
ZDO_MAX_NWKDISC_ITEMS
;

1459  
i
 = 0; i < 
zd≠pMgmtNwkDiscSèπIndex
; i++ )

1461 
Nëw‹kLi°
 = Nëw‹kLi°->
√xtDesc
;

1465 
	`ZDP_MgmtNwkDiscR•
–
zd≠pMgmtNwkDiscR•TønsSeq
,

1466 &
zd≠pMgmtNwkDiscR•Addr
, 
ZSuc˚ss
, 
Resu…Cou¡
,

1467 
zd≠pMgmtNwkDiscSèπIndex
,

1468 
cou¡
,

1469 
Nëw‹kLi°
,

1470 
Ál£
 );

1472 i‡–
ZSTACK_ROUTER_BUILD
 )

1474 i‡–
√wDesc
 !
NULL
 )

1476 
	`oßl_mem_‰ì
–
√wDesc
 );

1480 
	`NLME_NwkDiscTîm
();

1481 
	}
}

1497 
	$ZDO_Pro˚ssMgmtRtgReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1499 
byã
 
x
;

1500 
byã
 
maxNumIãms
;

1501 
byã
 
numIãms
 = 0;

1502 
uöt8
 *
pBuf
 = 
NULL
;

1503 
πgIãm_t
 *
pLi°
;

1504 
uöt8
 
SèπIndex
 = 
öMsg
->
asdu
[0];

1507 
	`NLME_GëReque°
–
nwkNumRoutögTabÀE¡rõs
, 0, &
maxNumIãms
 );

1509 i‡–
maxNumIãms
 > 
SèπIndex
 )

1511 
numIãms
 = 
maxNumIãms
 - 
SèπIndex
;

1514 i‡–
numIãms
 > 
ZDO_MAX_RTG_ITEMS
 )

1516 
numIãms
 = 
ZDO_MAX_RTG_ITEMS
;

1520 
pBuf
 = 
	`oßl_mem_Æloc
–()(–
πgIãm_t
 ) * 
numIãms
) );

1522 i‡–
pBuf
 !
NULL
 )

1525 
pLi°
 = (
πgIãm_t
 *)
pBuf
;

1528  
x
 = 0; x < 
numIãms
; x++ )

1530 
	`NLME_GëReque°
–
nwkRoutögTabÀ
, (
uöt16
)(
x
 + 
SèπIndex
), (*)
pLi°
 );

1533  
pLi°
->
°©us
 )

1535 
RT_ACTIVE
:

1536 
pLi°
->
°©us
 = 
ZDO_MGMT_RTG_ENTRY_ACTIVE
;

1539 
RT_DISC
:

1540 
pLi°
->
°©us
 = 
ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY
;

1543 
RT_LINK_FAIL
:

1544 
pLi°
->
°©us
 = 
ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED
;

1547 
RT_INIT
:

1548 
RT_REPAIR
:

1550 
pLi°
->
°©us
 = 
ZDO_MGMT_RTG_ENTRY_INACTIVE
;

1555 
pLi°
++;

1560 
numIãms
 = 0;

1565 
	`ZDP_MgmtRtgR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZSuc˚ss
, 
maxNumIãms
, 
SèπIndex
, 
numIãms
,

1566 (
πgIãm_t
 *)
pBuf
, 
Ál£
 );

1568 i‡–
pBuf
 !
NULL
 )

1570 
	`oßl_mem_‰ì
–
pBuf
 );

1572 
	}
}

1587 
	$ZDO_Pro˚ssMgmtBödReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1589 #i‡
	`deföed
 ( 
REFLECTOR
 )

1590 
byã
 
x
;

1591 
uöt16
 
maxNumIãms
;

1592 
uöt16
 
numIãms
;

1593 
uöt8
 *
pBuf
 = 
NULL
;

1594 
≠sBödögIãm_t
 *
pLi°
;

1595 
uöt8
 
SèπIndex
 = 
öMsg
->
asdu
[0];

1596 
uöt8
 
°©us
;

1599 
	`APSME_GëReque°
–
≠sNumBödögTabÀE¡rõs
, 0, (
byã
*)(&
maxNumIãms
) );

1601 i‡–
maxNumIãms
 > 
SèπIndex
 )

1603 
numIãms
 = 
maxNumIãms
 - 
SèπIndex
;

1607 
numIãms
 = 0;

1611 i‡–
numIãms
 > 
ZDO_MAX_BIND_ITEMS
 )

1613 
numIãms
 = 
ZDO_MAX_BIND_ITEMS
;

1617 i‡–
numIãms
 && (
pBuf
 = 
	`oßl_mem_Æloc
––
≠sBödögIãm_t
 ) *ÇumItems )) )

1619 
°©us
 = 
ZSuc˚ss
;

1622 
pLi°
 = (
≠sBödögIãm_t
 *)
pBuf
;

1625  
x
 = 0; x < 
numIãms
; x++ )

1627 
	`APSME_GëReque°
–
≠sBödögTabÀ
, (
x
 + 
SèπIndex
), (*)
pLi°
 );

1628 
pLi°
++;

1634 
°©us
 = 
ZDP_NOT_PERMITTED
;

1635 
numIãms
 = 0;

1639 
	`ZDP_MgmtBödR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
°©us
, (
byã
)
maxNumIãms
, 
SèπIndex
,

1640 (
byã
)
numIãms
, (
≠sBödögIãm_t
 *)
pBuf
, 
Ál£
 );

1642 i‡–
pBuf
 )

1644 
	`oßl_mem_‰ì
–
pBuf
 );

1647 ()
öMsg
;

1649 
	}
}

1661 
	$ZDO_Pro˚ssMgmtDúe˘JoöReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1663 
uöt8
 *
devi˚Addr
;

1664 
uöt8
 
ˇpInfo
;

1665 
uöt8
 
°©
;

1668 
devi˚Addr
 = 
öMsg
->
asdu
;

1669 
ˇpInfo
 = 
öMsg
->
asdu
[
Z_EXTADDR_LEN
];

1671 
°©
 = (
byã
Ë
	`NLME_Dúe˘JoöReque°
–
devi˚Addr
, 
ˇpInfo
 );

1673 
	`ZDP_MgmtDúe˘JoöR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
°©
, 
Ál£
 );

1674 
	}
}

1686 
	$ZDO_Pro˚ssMgmtLóveReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1688 
NLME_LóveReq_t
 
ªq
;

1689 
ZSètus_t
 
°©us
;

1690 
uöt8
 
›ti⁄
;

1691 
uöt8
 *
msg
 = 
öMsg
->
asdu
;

1693 i‡––
	`AddrMgrExtAddrVÆid
–
msg
 ) =
FALSE
 ) ||

1694 –
	`oßl_ExtAddrEquÆ
–
msg
, 
	`NLME_GëExtAddr
(ËË=
TRUE
 ) )

1697 
ªq
.
extAddr
 = 
NULL
;

1702 
ªq
.
extAddr
 = 
msg
;

1705 
›ti⁄
 = 
msg
[
Z_EXTADDR_LEN
];

1706 i‡–
›ti⁄
 & 
ZDP_MGMT_LEAVE_REQ_RC
 )

1708 
ªq
.
ªmoveChûdªn
 = 
TRUE
;

1711 i‡–
›ti⁄
 & 
ZDP_MGMT_LEAVE_REQ_REJOIN
 )

1713 
ªq
.
ªjoö
 = 
TRUE
;

1716 
ªq
.
sûít
 = 
FALSE
;

1718 
°©us
 = 
	`NLME_LóveReq
–&
ªq
 );

1720 
	`ZDP_MgmtLóveR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
°©us
, 
FALSE
 );

1721 
	}
}

1734 
	$ZDO_Pro˚ssMgmtPîmôJoöReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1736 
uöt8
 
°©
;

1737 
uöt8
 
duøti⁄
;

1738 
uöt8
 
tcsig
;

1740 
duøti⁄
 = 
öMsg
->
asdu
[
ZDP_MGMT_PERMIT_JOIN_REQ_DURATION
];

1741 
tcsig
 = 
öMsg
->
asdu
[
ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG
];

1744 
°©
 = (
byã
Ë
	`NLME_PîmôJoöögReque°
–
duøti⁄
 );

1747 i‡–
ZG_SECURE_ENABLED
 && 
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

1749 i‡–
tcsig
 =
TRUE
 )

1751 
	`ZDSecMgrPîmôJoöög
–
duøti⁄
 );

1756 i‡–!
öMsg
->
wasBrﬂdˇ°
 )

1758 
	`ZDP_MgmtPîmôJoöR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
°©
, 
Ál£
 );

1760 
	}
}

1777 
	$ZDO_Pro˚ssMgmtPîmôJoöTimeout
( )

1779 #i‡
	`deföed
–
ZDO_MGMT_PERMIT_JOIN_RESPONSE
 )

1781 i‡–
ZG_SECURE_ENABLED
 && 
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

1783 
	`ZDSecMgrPîmôJoöögTimeout
();

1786 
	}
}

1798 
	$ZDO_Pro˚ssU£rDescReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1800 
uöt16
 
aoi
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[0], inMsg->asdu[1] );

1801 
U£rDes¸ùt‹F‹m©_t
 
u£rDesc
;

1803 i‡–(
aoi
 =
ZDAµNwkAddr
.
addr
.
sh‹tAddr
Ë&& (
ZSUCCESS
 =
	`oßl_nv_ªad
(

1804 
ZCD_NV_USERDESC
, 0, (
U£rDes¸ùt‹F‹m©_t
), &
u£rDesc
 )) )

1806 
	`ZDP_U£rDescR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
aoi
, &
u£rDesc
, 
Ál£
 );

1810 
	`ZDP_GíîicR•
(
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
),

1811 
ZDP_NOT_SUPPORTED
, 
aoi
, 
U£r_Desc_r•
, 
öMsg
->
SecurôyU£
 );

1813 
	}
}

1825 
	$ZDO_Pro˚ssU£rDescSë
–
zdoIncomögMsg_t
 *
öMsg
 )

1827 
uöt8
 *
msg
;

1828 
uöt16
 
aoi
;

1829 
U£rDes¸ùt‹F‹m©_t
 
u£rDesc
;

1830 
uöt8
 
outMsg
[3];

1831 
uöt8
 
°©us
;

1833 
msg
 = 
öMsg
->
asdu
;

1834 
aoi
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

1836 i‡–
aoi
 =
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 )

1838 
u£rDesc
.
Àn
 = (
msg
[2] < 
AF_MAX_USER_DESCRIPTOR_LEN
) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;

1839 
msg
 ++;

1841 
	`oßl_mem˝y
–
u£rDesc
.
desc
, &
msg
[2], u£rDesc.
Àn
 );

1842 
	`oßl_nv_wrôe
–
ZCD_NV_USERDESC
, 0, (
U£rDes¸ùt‹F‹m©_t
), &
u£rDesc
 );

1843 i‡–
u£rDesc
.
Àn
 != 0 )

1845 
ZDO_C⁄fig_Node_Des¸ùt‹
.
U£rDescAvaû
 = 
TRUE
;

1849 
ZDO_C⁄fig_Node_Des¸ùt‹
.
U£rDescAvaû
 = 
FALSE
;

1852 
°©us
 = 
ZDP_SUCCESS
;

1856 
°©us
 = 
ZDP_NOT_SUPPORTED
;

1859 
outMsg
[0] = 
°©us
;

1860 
outMsg
[1] = 
	`LO_UINT16
–
aoi
 );

1861 
outMsg
[2] = 
	`LO_UINT16
–
aoi
 );

1863 
	`ZDP_SídD©a
–&(
öMsg
->
TønsSeq
), &(öMsg->
§cAddr
), 
U£r_Desc_c⁄f
, 3, 
outMsg
,

1864 
öMsg
->
SecurôyU£
 );

1865 
	}
}

1876 
	$ZDO_Pro˚ssDevi˚A¬˚
–
zdoIncomögMsg_t
 *
öMsg
 )

1878 
ZDO_Devi˚A¬˚_t
 
A¬˚
;

1879 
AddrMgrE¡ry_t
 
addrE¡ry
;

1880 
uöt8
 
∑ª¡Ext
[
Z_EXTADDR_LEN
];

1883 
	`ZDO_P¨£Devi˚A¬˚
–
öMsg
, &
A¬˚
 );

1885 i‡–
ZSTACK_END_DEVICE_BUILD
 )

1888 i‡–
	`oßl_ExtAddrEquÆ
–
	`NLME_GëExtAddr
(), 
A¬˚
.
extAddr
 ) && A¬˚.
nwkAddr
 =
	`NLME_GëSh‹tAddr
() )

1894 #i‡
	`deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

1896 
	`nwkNeighb‹RemoveAŒSå™ded
();

1899 i‡–
	`NLME_CheckNewAddrSë
–
A¬˚
.
nwkAddr
, A¬˚.
extAddr
 )=
ZFaûuª
 )

1905 #i‡
	`deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

1907 
	`NLME_GëCo‹dExtAddr
–
∑ª¡Ext
 );

1908 i‡–
	`oßl_ExtAddrEquÆ
–
∑ª¡Ext
, 
A¬˚
.
extAddr
 ) )

1910 i‡–
A¬˚
.
nwkAddr
 !
	`NLME_GëCo‹dSh‹tAddr
() )

1913 
_NIB
.
nwkCo‹dAddªss
 = 
A¬˚
.
nwkAddr
;

1914 
	`ZMacSëReq
–
ZMacCo‹dSh‹tAddªss
, (
byã
*)&(
_NIB
.
nwkCo‹dAddªss
) );

1918 i‡–
ZSTACK_ROUTER_BUILD
 )

1928 i‡–
öMsg
->
macDe°Addr
 !
	`NLME_GëSh‹tAddr
() )

1930 
assocüãd_devi˚s_t
 *
dev_±r
;

1933 
dev_±r
 = 
	`AssocGëWôhExt
–
A¬˚
.
extAddr
 );

1934 i‡–
dev_±r
 )

1936 i‡–
dev_±r
->
nodeRñ©i⁄
 =
CHILD_RFD
 ||

1937 
dev_±r
->
nodeRñ©i⁄
 =
CHILD_RFD_RX_IDLE
 )

1939 
	`AssocRemove
–
A¬˚
.
extAddr
 );

1944 i‡–
A¬˚
.
nwkAddr
 !
	`NLME_GëSh‹tAddr
() )

1948 i‡–
	`AssocCh™geNwkAddr
–
A¬˚
.
nwkAddr
, A¬˚.
extAddr
 ) )

1951 
	`ZDAµ_NVUpd©e
();

1957 
	`nwkNeighb‹Upd©eNwkAddr
–
A¬˚
.
nwkAddr
, A¬˚.
extAddr
 );

1960 
	`RTG_RemoveRtgE¡ry
–
A¬˚
.
nwkAddr
, 0 );

1965 
addrE¡ry
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

1966 
addrE¡ry
.
nwkAddr
 = 
A¬˚
.nwkAddr;

1967 i‡–
	`AddrMgrE¡ryLookupNwk
–&
addrE¡ry
 ) )

1969 
	`oßl_mem£t
–
∑ª¡Ext
, 0, 
Z_EXTADDR_LEN
 );

1970 i‡–
	`oßl_ExtAddrEquÆ
–
∑ª¡Ext
, 
addrE¡ry
.
extAddr
 ) )

1972 
	`AddrMgrExtAddrSë
–
addrE¡ry
.
extAddr
, 
A¬˚
.extAddr );

1973 
	`AddrMgrE¡ryUpd©e
–&
addrE¡ry
 );

1978 
	`AddrMgrExtAddrSë
–
addrE¡ry
.
extAddr
, 
A¬˚
.extAddr );

1979 i‡–
	`AddrMgrE¡ryLookupExt
–&
addrE¡ry
 ) )

1981 i‡–
addrE¡ry
.
nwkAddr
 !
A¬˚
.nwkAddr )

1983 
addrE¡ry
.
nwkAddr
 = 
A¬˚
.nwkAddr;

1984 
	`AddrMgrE¡ryUpd©e
–&
addrE¡ry
 );

1987 
	}
}

1999 
	$ZDO_BuûdSim∂eDescBuf
–
uöt8
 *
buf
, 
Sim∂eDes¸ùti⁄F‹m©_t
 *
desc
 )

2001 
byã
 
˙t
;

2002 
uöt16
 *
±r
;

2004 *
buf
++ = 
desc
->
EndPoöt
;

2005 *
buf
++ = 
	`HI_UINT16
–
desc
->
AµProfId
 );

2006 *
buf
++ = 
	`LO_UINT16
–
desc
->
AµProfId
 );

2007 *
buf
++ = 
	`HI_UINT16
–
desc
->
AµDevi˚Id
 );

2008 *
buf
++ = 
	`LO_UINT16
–
desc
->
AµDevi˚Id
 );

2010 *
buf
++ = (
byã
)(
desc
->
AµDevVî
 << 4);

2012 *
buf
++ = 
desc
->
AµNumInClu°îs
;

2013 
±r
 = 
desc
->
pAµInClu°îLi°
;

2014  
˙t
 = 0; c¡ < 
desc
->
AµNumInClu°îs
; 
±r
++, cnt++ )

2016 *
buf
++ = 
	`HI_UINT16
–*
±r
 );

2017 *
buf
++ = 
	`LO_UINT16
–*
±r
 );

2020 *
buf
++ = 
desc
->
AµNumOutClu°îs
;

2021 
±r
 = 
desc
->
pAµOutClu°îLi°
;

2022  
˙t
 = 0; c¡ < 
desc
->
AµNumOutClu°îs
; 
±r
++, cnt++ )

2024 *
buf
++ = 
	`HI_UINT16
–*
±r
 );

2025 *
buf
++ = 
	`LO_UINT16
–*
±r
 );

2027 
	}
}

2041 
	$ZDO_M©chEndDevi˚Böd
–
ZDEndDevi˚Böd_t
 *
bödReq
 )

2043 
zAddrTy≥_t
 
d°Addr
;

2044 
uöt8
 
£ndR•
 = 
FALSE
;

2045 
uöt8
 
°©us
;

2048 i‡–
m©chED
 =
NULL
 )

2051 
m©chED
 = (
ZDM©chEndDevi˚Böd_t
 *)
	`oßl_mem_Æloc
(  ( ZDMatchEndDeviceBind_t ) );

2052 i‡–
m©chED
 )

2055 
	`oßl_mem£t
–(
uöt8
 *)
m©chED
, 0,  ( 
ZDM©chEndDevi˚Böd_t
 ) );

2058 i‡–!
	`ZDO_C›yM©chInfo
–&(
m©chED
->
ed1
), 
bödReq
 ) )

2060 
°©us
 = 
ZDP_NO_ENTRY
;

2061 
£ndR•
 = 
TRUE
;

2066 
°©us
 = 
ZDP_NO_ENTRY
;

2067 
£ndR•
 = 
TRUE
;

2070 i‡–!
£ndR•
 )

2073 
m©chED
->
°©e
 = 
ZDMATCH_WAIT_REQ
;

2076 
	`APS_SëEndDevi˚BödTimeout
–
AIB_MaxBödögTime
, 
ZDO_EndDevi˚BödM©chTimeoutCB
 );

2081 
m©chED
->
°©e
 = 
ZDMATCH_SENDING_BINDS
;

2084 i‡–!
	`ZDO_C›yM©chInfo
–&(
m©chED
->
ed2
), 
bödReq
 ) )

2086 
°©us
 = 
ZDP_NO_ENTRY
;

2087 
£ndR•
 = 
TRUE
;

2091 
m©chED
->
ed1numM©ched
 = 
	`ZDO_Com∑ªClu°îLi°s
(

2092 
m©chED
->
ed1
.
numOutClu°îs
, m©chED->ed1.
outClu°îs
,

2093 
m©chED
->
ed2
.
numInClu°îs
, m©chED->ed2.
öClu°îs
, 
ZDOBuûdBuf
 );

2094 i‡–
m©chED
->
ed1numM©ched
 )

2097 
m©chED
->
ed1M©ched
 = 
	`oßl_mem_Æloc
–()(m©chED->
ed1numM©ched
 *  ( 
uöt16
 )) );

2098 i‡–
m©chED
->
ed1M©ched
 )

2100 
	`oßl_mem˝y
–
m©chED
->
ed1M©ched
, 
ZDOBuûdBuf
, (m©chED->
ed1numM©ched
 *  ( 
uöt16
 )) );

2105 
°©us
 = 
ZDP_NO_ENTRY
;

2106 
£ndR•
 = 
TRUE
;

2111 
m©chED
->
ed2numM©ched
 = 
	`ZDO_Com∑ªClu°îLi°s
(

2112 
m©chED
->
ed2
.
numOutClu°îs
, m©chED->ed2.
outClu°îs
,

2113 
m©chED
->
ed1
.
numInClu°îs
, m©chED->ed1.
öClu°îs
, 
ZDOBuûdBuf
 );

2114 i‡–
m©chED
->
ed2numM©ched
 )

2117 
m©chED
->
ed2M©ched
 = 
	`oßl_mem_Æloc
–()(m©chED->
ed2numM©ched
 *  ( 
uöt16
 )) );

2118 i‡–
m©chED
->
ed2M©ched
 )

2120 
	`oßl_mem˝y
–
m©chED
->
ed2M©ched
, 
ZDOBuûdBuf
, (m©chED->
ed2numM©ched
 *  ( 
uöt16
 )) );

2125 
°©us
 = 
ZDP_NO_ENTRY
;

2126 
£ndR•
 = 
TRUE
;

2130 i‡–(
£ndR•
 =
FALSE
Ë&& (
m©chED
->
ed1numM©ched
 || m©chED->
ed2numM©ched
) )

2133 
	`ZDM©chSídSèã
–
ZDMATCH_REASON_START
, 
ZDP_SUCCESS
, 0 );

2137 
°©us
 = 
ZDP_NO_MATCH
;

2138 
£ndR•
 = 
TRUE
;

2142 i‡–
£ndR•
 )

2145 
d°Addr
.
addrMode
 = 
Addr16Bô
;

2146 
d°Addr
.
addr
.
sh‹tAddr
 = 
bödReq
->
§cAddr
;

2147 
	`ZDP_EndDevi˚BödR•
–
bödReq
->
TønsSeq
, &
d°Addr
, 
°©us
, bödReq->
SecurôyU£
 );

2149 i‡–
m©chED
->
°©e
 =
ZDMATCH_SENDING_BINDS
 )

2152 
d°Addr
.
addrMode
 = 
Addr16Bô
;

2153 
d°Addr
.
addr
.
sh‹tAddr
 = 
m©chED
->
ed1
.
§cAddr
;

2154 
	`ZDP_EndDevi˚BödR•
–
m©chED
->
ed1
.
TønsSeq
, &
d°Addr
, 
°©us
, m©chED->ed1.
SecurôyU£
 );

2158 
	`ZDO_RemoveM©chMem‹y
();

2160 
	}
}

2171 
	$ZDO_RemoveM©chMem‹y
( )

2173 i‡–
m©chED
 !
NULL
 )

2175 i‡–
m©chED
->
ed2M©ched
 !
NULL
 )

2177 
	`oßl_mem_‰ì
–
m©chED
->
ed2M©ched
 );

2179 i‡–
m©chED
->
ed1M©ched
 !
NULL
 )

2181 
	`oßl_mem_‰ì
–
m©chED
->
ed1M©ched
 );

2183 i‡–
m©chED
->
ed1
.
öClu°îs
 !
NULL
 )

2185 
	`oßl_mem_‰ì
–
m©chED
->
ed1
.
öClu°îs
 );

2187 i‡–
m©chED
->
ed1
.
outClu°îs
 !
NULL
 )

2189 
	`oßl_mem_‰ì
–
m©chED
->
ed1
.
outClu°îs
 );

2191 i‡–
m©chED
->
ed2
.
öClu°îs
 !
NULL
 )

2193 
	`oßl_mem_‰ì
–
m©chED
->
ed2
.
öClu°îs
 );

2195 i‡–
m©chED
->
ed2
.
outClu°îs
 !
NULL
 )

2197 
	`oßl_mem_‰ì
–
m©chED
->
ed2
.
outClu°îs
 );

2200 
	`oßl_mem_‰ì
–
m©chED
 );

2201 
m©chED
 = (
ZDM©chEndDevi˚Böd_t
 *)
NULL
;

2203 
	}
}

2215 
uöt8
 
	$ZDO_C›yM©chInfo
–
ZDEndDevi˚Böd_t
 *
de°Req
, ZDEndDevi˚Böd_à*
§cReq
 )

2217 
uöt8
 
ÆlOK
 = 
TRUE
;

2220 
	`oßl_mem˝y
–(
uöt8
 *)
de°Req
, 
§cReq
,  ( 
ZDEndDevi˚Böd_t
 ) );

2223 
de°Req
->
öClu°îs
 = 
NULL
;

2224 
de°Req
->
outClu°îs
 = 
NULL
;

2227 i‡–
§cReq
->
numInClu°îs
 )

2229 
de°Req
->
öClu°îs
 = 
	`oßl_mem_Æloc
–()(
§cReq
->
numInClu°îs
 *  ( 
uöt16
 )) );

2230 i‡–
de°Req
->
öClu°îs
 )

2233 
	`oßl_mem˝y
–(
uöt8
*)(
de°Req
->
öClu°îs
), (uöt8 *)(
§cReq
->inClusters),

2234 (
§cReq
->
numInClu°îs
 *  ( 
uöt16
 )) );

2238 
ÆlOK
 = 
FALSE
;

2243 i‡–
§cReq
->
numOutClu°îs
 )

2245 
de°Req
->
outClu°îs
 = 
	`oßl_mem_Æloc
–()(
§cReq
->
numOutClu°îs
 *  ( 
uöt16
 )) );

2246 i‡–
de°Req
->
outClu°îs
 )

2249 
	`oßl_mem˝y
–(
uöt8
 *)(
de°Req
->
outClu°îs
), (uöt8 *)(
§cReq
->outClusters),

2250 (
§cReq
->
numOutClu°îs
 *  ( 
uöt16
 )) );

2254 
ÆlOK
 = 
FALSE
;

2258 i‡–
ÆlOK
 =
FALSE
 )

2260 i‡–
de°Req
->
öClu°îs
 !
NULL
 )

2262 
	`oßl_mem_‰ì
–
de°Req
->
öClu°îs
 );

2264 i‡–
de°Req
->
outClu°îs
 !
NULL
 )

2266 
	`oßl_mem_‰ì
–
de°Req
->
outClu°îs
 );

2270  ( 
ÆlOK
 );

2271 
	}
}

2285 
uöt8
 
	$ZDM©chSídSèã
–
uöt8
 
ªas⁄
, uöt8 
°©us
, uöt8 
TønsSeq
 )

2287 
uöt8
 *
d°IEEEAddr
 = 
NULL
;

2288 
uöt8
 
d°EP
 = 0xFF;

2289 
zAddrTy≥_t
 
d°Addr
;

2290 
zAddrTy≥_t
 
de°ö©i⁄Addr
;

2291 
uöt16
 
msgTy≥
;

2292 
uöt16
 
˛u°îID
 = 0xFFFF;

2293 
ZDEndDevi˚Böd_t
 *
ed
 = 
NULL
;

2294 
uöt8
 
r•Sètus
 = 
ZDP_SUCCESS
;

2296 i‡–
m©chED
 =
NULL
 )

2298  ( 
FALSE
 );

2302 i‡–
ªas⁄
 =
ZDMATCH_REASON_BIND_RSP
 ||Ñós⁄ =
ZDMATCH_REASON_UNBIND_RSP
 )

2304 i‡–
TønsSeq
 !
m©chED
->
å™sSeq
 )

2306 –
FALSE
 );

2311 
	`APS_SëEndDevi˚BödTimeout
–0, 
ZDO_EndDevi˚BödM©chTimeoutCB
 );

2313 i‡–
ªas⁄
 =
ZDMATCH_REASON_TIMEOUT
 )

2315 
r•Sètus
 = 
ZDP_TIMEOUT
;

2318 i‡–
ªas⁄
 =
ZDMATCH_REASON_START
 ||Ñós⁄ =
ZDMATCH_REASON_BIND_RSP
 )

2320 
m©chED
->
£ndög
 = 
ZDMATCH_SENDING_UNBIND
;

2322 i‡–
ªas⁄
 =
ZDMATCH_REASON_BIND_RSP
 && 
°©us
 !
ZDP_SUCCESS
 )

2324 
r•Sètus
 = 
°©us
;

2327 i‡–
ªas⁄
 =
ZDMATCH_REASON_UNBIND_RSP
 )

2329 i‡–
°©us
 =
ZDP_SUCCESS
 )

2331 
m©chED
->
£ndög
 = 
ZDMATCH_SENDING_UNBIND
;

2335 
m©chED
->
£ndög
 = 
ZDMATCH_SENDING_BIND
;

2339 i‡–
ªas⁄
 !
ZDMATCH_REASON_START
 && 
m©chED
->
£ndög
 =
ZDMATCH_SENDING_UNBIND
 )

2342 i‡–
m©chED
->
ed1numM©ched
 )

2344 
m©chED
->
ed1numM©ched
--;

2346 i‡–
m©chED
->
ed2numM©ched
 )

2348 
m©chED
->
ed2numM©ched
--;

2353 i‡–
m©chED
->
ed1numM©ched
 )

2355 
ed
 = &(
m©chED
->
ed1
);

2356 
˛u°îID
 = 
m©chED
->
ed1M©ched
[m©chED->
ed1numM©ched
-1];

2357 
d°IEEEAddr
 = 
m©chED
->
ed2
.
õìAddr
;

2358 
d°EP
 = 
m©chED
->
ed2
.
ídpoöt
;

2360 i‡–
m©chED
->
ed2numM©ched
 )

2362 
ed
 = &(
m©chED
->
ed2
);

2363 
˛u°îID
 = 
m©chED
->
ed2M©ched
[m©chED->
ed2numM©ched
-1];

2364 
d°IEEEAddr
 = 
m©chED
->
ed1
.
õìAddr
;

2365 
d°EP
 = 
m©chED
->
ed1
.
ídpoöt
;

2368 
d°Addr
.
addrMode
 = 
Addr16Bô
;

2371 i‡–(
r•Sètus
 =
ZDP_SUCCESS
Ë&& 
ed
 )

2374 i‡–
m©chED
->
£ndög
 =
ZDMATCH_SENDING_UNBIND
 )

2376 
msgTy≥
 = 
Unböd_ªq
;

2380 
msgTy≥
 = 
Böd_ªq
;

2383 
d°Addr
.
addr
.
sh‹tAddr
 = 
ed
->
§cAddr
;

2386 
m©chED
->
å™sSeq
 = 
ZDP_TønsID
;

2388 
de°ö©i⁄Addr
.
addrMode
 = 
Addr64Bô
;

2389 
	`oßl_˝yExtAddr
–
de°ö©i⁄Addr
.
addr
.
extAddr
, 
d°IEEEAddr
 );

2391 
	`ZDP_BödUnbödReq
–
msgTy≥
, &
d°Addr
, 
ed
->
õìAddr
,Éd->
ídpoöt
, 
˛u°îID
,

2392 &
de°ö©i⁄Addr
, 
d°EP
, 
ed
->
SecurôyU£
 );

2395 
	`APS_SëEndDevi˚BödTimeout
–
AIB_MaxBödögTime
, 
ZDO_EndDevi˚BödM©chTimeoutCB
 );

2401 
d°Addr
.
addr
.
sh‹tAddr
 = 
m©chED
->
ed1
.
§cAddr
;

2402 
	`ZDP_EndDevi˚BödR•
–
m©chED
->
ed1
.
TønsSeq
, &
d°Addr
, 
r•Sètus
, m©chED->ed1.
SecurôyU£
 );

2405 i‡–
m©chED
->
°©e
 =
ZDMATCH_SENDING_BINDS
 )

2407 
d°Addr
.
addr
.
sh‹tAddr
 = 
m©chED
->
ed2
.
§cAddr
;

2408 
	`ZDP_EndDevi˚BödR•
–
m©chED
->
ed2
.
TønsSeq
, &
d°Addr
, 
r•Sètus
, m©chED->ed2.
SecurôyU£
 );

2412 
	`ZDO_RemoveM©chMem‹y
();

2415  ( 
TRUE
 );

2416 
	}
}

2427 
	$ZDO_EndDevi˚BödM©chTimeoutCB
( )

2429 
	`ZDM©chSídSèã
–
ZDMATCH_REASON_TIMEOUT
, 
ZDP_TIMEOUT
, 0 );

2430 
	}
}

2449 
	$ZDO_P¨£EndDevi˚BödReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDEndDevi˚Böd_t
 *
bödReq
 )

2451 
uöt8
 *
msg
;

2454 
bödReq
->
TønsSeq
 = 
öMsg
->TransSeq;

2455 
bödReq
->
§cAddr
 = 
öMsg
->§cAddr.
addr
.
sh‹tAddr
;

2456 
bödReq
->
SecurôyU£
 = 
öMsg
->SecurityUse;

2457 
msg
 = 
öMsg
->
asdu
;

2459 
bödReq
->
loˇlCo‹dö©‹
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2460 
msg
 += 2;

2462 
	`oßl_˝yExtAddr
–
bödReq
->
õìAddr
, 
msg
 );

2463 
msg
 +
Z_EXTADDR_LEN
;

2465 
bödReq
->
ídpoöt
 = *
msg
++;

2466 
bödReq
->
¥ofûeID
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2467 
msg
 += 2;

2469 
bödReq
->
öClu°îs
 = 
NULL
;

2470 
bödReq
->
outClu°îs
 = 
NULL
;

2472 i‡((
bödReq
->
numInClu°îs
 = *
msg
++) &&

2473 (
bödReq
->
öClu°îs
 = (
uöt16
*)
	`oßl_mem_Æloc
–(bödReq->
numInClu°îs
 * ( uint16 )))))

2475 
msg
 = 
	`ZDO_C⁄vîtOTAClu°îs
–
bödReq
->
numInClu°îs
, msg, bödReq->
öClu°îs
 );

2479 
bödReq
->
numInClu°îs
 = 0;

2482 i‡((
bödReq
->
numOutClu°îs
 = *
msg
++) &&

2483 (
bödReq
->
outClu°îs
 = (
uöt16
*)
	`oßl_mem_Æloc
((bödReq->
numOutClu°îs
 * (uint16)))))

2485 
msg
 = 
	`ZDO_C⁄vîtOTAClu°îs
–
bödReq
->
numOutClu°îs
, msg, bödReq->
outClu°îs
 );

2489 
bödReq
->
numOutClu°îs
 = 0;

2491 
	}
}

2503 
	$ZDO_P¨£BödUnbödReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_BödUnbödReq_t
 *
pReq
 )

2505 
uöt8
 *
msg
;

2507 
msg
 = 
öMsg
->
asdu
;

2508 
	`oßl_˝yExtAddr
–
pReq
->
§cAddªss
, 
msg
 );

2509 
msg
 +
Z_EXTADDR_LEN
;

2510 
pReq
->
§cEndpoöt
 = *
msg
++;

2511 
pReq
->
˛u°îID
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2512 
msg
 += 2;

2513 
pReq
->
d°Addªss
.
addrMode
 = *
msg
++;

2514 i‡–
pReq
->
d°Addªss
.
addrMode
 =
Addr64Bô
 )

2516 
	`oßl_˝yExtAddr
–
pReq
->
d°Addªss
.
addr
.
extAddr
, 
msg
 );

2517 
msg
 +
Z_EXTADDR_LEN
;

2518 
pReq
->
d°Endpoöt
 = *
msg
;

2523 
pReq
->
d°Addªss
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2525 
	}
}

2539 
ZDO_NwkIEEEAddrRe•_t
 *
	$ZDO_P¨£AddrR•
–
zdoIncomögMsg_t
 *
öMsg
 )

2541 
ZDO_NwkIEEEAddrRe•_t
 *
r•
;

2542 
uöt8
 *
msg
;

2543 
byã
 
˙t
 = 0;

2546 i‡–
öMsg
->
asduLí
 > (1 + 
Z_EXTADDR_LEN
 + 2) )

2548 
˙t
 = 
öMsg
->
asdu
[1 + 
Z_EXTADDR_LEN
 + 2];

2552 
˙t
 = 0;

2556 
r•
 = (
ZDO_NwkIEEEAddrRe•_t
 *)
	`oßl_mem_Æloc
–(ZDO_NwkIEEEAddrRe•_tË+ (
˙t
 *  ( 
uöt16
 )) );

2558 i‡–
r•
 )

2560 
msg
 = 
öMsg
->
asdu
;

2562 
r•
->
°©us
 = *
msg
++;

2563 i‡–
r•
->
°©us
 =
ZDO_SUCCESS
 )

2565 
	`oßl_˝yExtAddr
–
r•
->
extAddr
, 
msg
 );

2566 
msg
 +
Z_EXTADDR_LEN
;

2567 
r•
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2569 
msg
 += 2;

2570 
r•
->
numAssocDevs
 = 0;

2573 i‡–
˙t
 > 0 )

2575 
uöt16
 *
pLi°
 = &(
r•
->
devLi°
[0]);

2576 
byã
 
n
 = 
˙t
;

2578 
r•
->
numAssocDevs
 = *
msg
++;

2579 
r•
->
°¨tIndex
 = *
msg
++;

2581  
n
 != 0 )

2583 *
pLi°
++ = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2584 
msg
 +–
uöt16
 );

2585 
n
--;

2591  ( 
r•
 );

2592 
	}
}

2604 
	$ZDO_P¨£NodeDescR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_NodeDescR•_t
 *
pNDR•
 )

2606 
uöt8
 *
msg
;

2608 
msg
 = 
öMsg
->
asdu
;

2610 
pNDR•
->
°©us
 = *
msg
++;

2611 
pNDR•
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2613 i‡–
pNDR•
->
°©us
 =
ZDP_SUCCESS
 )

2615 
msg
 += 2;

2616 
pNDR•
->
nodeDesc
.
LogiˇlTy≥
 = *
msg
 & 0x07;

2618 
pNDR•
->
nodeDesc
.
Com∂exDescAvaû
 = ( *
msg
 & 0x08 ) >> 3;

2619 
pNDR•
->
nodeDesc
.
U£rDescAvaû
 = ( *
msg
 & 0x10 ) >> 4;

2621 
msg
++;

2622 
pNDR•
->
nodeDesc
.
FªquícyB™d
 = (*
msg
 >> 3) & 0x1f;

2623 
pNDR•
->
nodeDesc
.
APSFœgs
 = *
msg
++ & 0x07;

2624 
pNDR•
->
nodeDesc
.
C≠abûôyFœgs
 = *
msg
++;

2625 
pNDR•
->
nodeDesc
.
M™uÁ˘uªrCode
[0] = *
msg
++;

2626 
pNDR•
->
nodeDesc
.
M™uÁ˘uªrCode
[1] = *
msg
++;

2627 
pNDR•
->
nodeDesc
.
MaxBuf„rSize
 = *
msg
++;

2628 
pNDR•
->
nodeDesc
.
MaxInTøns„rSize
[0] = *
msg
++;

2629 
pNDR•
->
nodeDesc
.
MaxInTøns„rSize
[1] = *
msg
++;

2630 
pNDR•
->
nodeDesc
.
SîvîMask
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2631 
msg
 += 2;

2632 
pNDR•
->
nodeDesc
.
MaxOutTøns„rSize
[0] = *
msg
++;

2633 
pNDR•
->
nodeDesc
.
MaxOutTøns„rSize
[1] = *
msg
++;

2634 
pNDR•
->
nodeDesc
.
Des¸ùt‹C≠abûôy
 = *
msg
;

2636 
	}
}

2648 
	$ZDO_P¨£PowîDescR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_PowîR•_t
 *
pNPR•
 )

2650 
uöt8
 *
msg
;

2652 
msg
 = 
öMsg
->
asdu
;

2653 
pNPR•
->
°©us
 = *
msg
++;

2654 
pNPR•
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2656 i‡–
pNPR•
->
°©us
 =
ZDP_SUCCESS
 )

2658 
msg
 += 2;

2659 
pNPR•
->
pwrDesc
.
AvaûabÀPowîSour˚s
 = *
msg
 >> 4;

2660 
pNPR•
->
pwrDesc
.
PowîMode
 = *
msg
++ & 0x0F;

2661 
pNPR•
->
pwrDesc
.
CuºítPowîSour˚Levñ
 = *
msg
 >> 4;

2662 
pNPR•
->
pwrDesc
.
CuºítPowîSour˚
 = *
msg
++ & 0x0F;

2664 
	}
}

2681 
	$ZDO_P¨£Sim∂eDescR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_Sim∂eDescR•_t
 *
pSim∂eDescR•
 )

2683 
uöt8
 *
msg
;

2685 
msg
 = 
öMsg
->
asdu
;

2686 
pSim∂eDescR•
->
°©us
 = *
msg
++;

2687 
pSim∂eDescR•
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2688 
msg
 + ( 
uöt16
 );

2689 
msg
++;

2691 i‡–
pSim∂eDescR•
->
°©us
 =
ZDP_SUCCESS
 )

2693 
	`ZDO_P¨£Sim∂eDescBuf
–
msg
, &(
pSim∂eDescR•
->
sim∂eDesc
) );

2695 
	}
}

2706 
ZDO_A˘iveEndpoötR•_t
 *
	$ZDO_P¨£EPLi°R•
–
zdoIncomögMsg_t
 *
öMsg
 )

2708 
ZDO_A˘iveEndpoötR•_t
 *
pR•
;

2709 
uöt8
 *
msg
;

2710 
uöt8
 
Sètus
;

2711 
uöt8
 
˙t
;

2713 
msg
 = 
öMsg
->
asdu
;

2714 
Sètus
 = *
msg
++;

2715 
˙t
 = 
msg
[2];

2717 
pR•
 = (
ZDO_A˘iveEndpoötR•_t
 *)
	`oßl_mem_Æloc
––ZDO_A˘iveEndpoötR•_àË+ 
˙t
 );

2718 i‡–
pR•
 )

2720 
pR•
->
°©us
 = 
Sètus
;

2721 
pR•
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2722 
msg
 +–
uöt16
 );

2723 
pR•
->
˙t
 = cnt;

2724 
msg
++;

2725 
	`oßl_mem˝y
–
pR•
->
ïLi°
, 
msg
, 
˙t
 );

2728  ( 
pR•
 );

2729 
	}
}

2741 
	$ZDO_P¨£SîvîDiscR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_SîvîDiscR•_t
 *
pR•
 )

2743 
pR•
->
°©us
 = 
öMsg
->
asdu
[0];

2744 
pR•
->
£rvîMask
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[1], inMsg->asdu[2] );

2745 
	}
}

2759 
ZDO_MgmtLqiR•_t
 *
	$ZDO_P¨£MgmtLqiR•
–
zdoIncomögMsg_t
 *
öMsg
 )

2761 
ZDO_MgmtLqiR•_t
 *
pR•
;

2762 
uöt8
 
°©us
;

2763 
uöt8
 
°¨tIndex
 = 0;

2764 
uöt8
 
√ighb‹LqiCou¡
 = 0;

2765 
uöt8
 
√ighb‹LqiE¡rõs
 = 0;

2766 
uöt8
 *
msg
;

2768 
msg
 = 
öMsg
->
asdu
;

2770 
°©us
 = *
msg
++;

2771 i‡–
°©us
 =
ZSuc˚ss
 )

2773 
√ighb‹LqiE¡rõs
 = *
msg
++;

2774 
°¨tIndex
 = *
msg
++;

2775 
√ighb‹LqiCou¡
 = *
msg
++;

2779 
pR•
 = (
ZDO_MgmtLqiR•_t
 *)
	`oßl_mem_Æloc
(

2780 –
ZDO_MgmtLqiR•_t
 ) + (
√ighb‹LqiCou¡
 * –
√ighb‹LqiIãm_t
 )) );

2781 i‡–
pR•
 )

2783 
uöt8
 
x
;

2784 
√ighb‹LqiIãm_t
 *
pLi°
 = 
pR•
->
li°
;

2785 
pR•
->
°©us
 = status;

2786 
pR•
->
√ighb‹LqiE¡rõs
 =ÇeighborLqiEntries;

2787 
pR•
->
°¨tIndex
 = startIndex;

2788 
pR•
->
√ighb‹LqiCou¡
 =ÇeighborLqiCount;

2790  
x
 = 0; x < 
√ighb‹LqiCou¡
; x++ )

2792 
	`oßl_˝yExtAddr
(
pLi°
->
extPANId
, 
msg
);

2793 
msg
 +
Z_EXTADDR_LEN
;

2795 
msg
 +
Z_EXTADDR_LEN
;

2796 
pLi°
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2797 
msg
 += 2 + 1 + 1 + 1;

2798 
pLi°
->
rxLqi
 = *
msg
++;

2799 
pLi°
->
txQuÆôy
 = 0;

2800 
pLi°
++;

2804  ( 
pR•
 );

2805 
	}
}

2819 
ZDO_MgmNwkDiscR•_t
 *
	$ZDO_P¨£MgmNwkDiscR•
–
zdoIncomögMsg_t
 *
öMsg
 )

2821 
ZDO_MgmNwkDiscR•_t
 *
pR•
;

2822 
uöt8
 
°©us
;

2823 
uöt8
 
√tw‹kCou¡
 = 0;

2824 
uöt8
 
°¨tIndex
 = 0;

2825 
uöt8
 
√tw‹kLi°Cou¡
 = 0;

2826 
uöt8
 *
msg
;

2828 
msg
 = 
öMsg
->
asdu
;

2829 
°©us
 = *
msg
++;

2831 i‡–
°©us
 =
ZSuc˚ss
 )

2833 
√tw‹kCou¡
 = *
msg
++;

2834 
°¨tIndex
 = *
msg
++;

2835 
√tw‹kLi°Cou¡
 = *
msg
++;

2839 
pR•
 = (
ZDO_MgmNwkDiscR•_t
 *)
	`oßl_mem_Æloc
( ( ZDO_MgmNwkDiscRsp_t )

2840 + (
√tw‹kLi°Cou¡
 * –
mgmtNwkDiscIãm_t
 )) );

2841 i‡–
pR•
 )

2843 
uöt8
 
x
;

2844 
mgmtNwkDiscIãm_t
 *
pLi°
;

2846 
pR•
->
°©us
 = status;

2847 
pR•
->
√tw‹kCou¡
 =ÇetworkCount;

2848 
pR•
->
°¨tIndex
 = startIndex;

2849 
pR•
->
√tw‹kLi°Cou¡
 =ÇetworkListCount;

2850 
pLi°
 = 
pR•
->
li°
;

2852  
x
 = 0; x < 
√tw‹kLi°Cou¡
; x++ )

2854 
	`oßl_˝yExtAddr
(
pLi°
->
exãndedPANID
, 
msg
);

2855 
pLi°
->
PANId
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2856 
msg
 +
Z_EXTADDR_LEN
;

2858 
pLi°
->
logiˇlCh™√l
 = *
msg
++;

2859 
pLi°
->
°ackProfûe
 = (*
msg
) & 0x0F;

2860 
pLi°
->
vîsi⁄
 = (*
msg
++ >> 4) & 0x0F;

2861 
pLi°
->
bóc⁄Ordî
 = (*
msg
) & 0x0F;

2862 
pLi°
->
su≥rFømeOrdî
 = (*
msg
++ >> 4) & 0x0F;

2863 
pLi°
->
≥rmôJoöög
 = *
msg
++;

2864 
pLi°
++;

2868  ( 
pR•
 );

2869 
	}
}

2883 
ZDO_MgmtRtgR•_t
 *
	$ZDO_P¨£MgmtRtgR•
–
zdoIncomögMsg_t
 *
öMsg
 )

2885 
ZDO_MgmtRtgR•_t
 *
pR•
;

2886 
uöt8
 
°©us
;

2887 
uöt8
 
πgCou¡
 = 0;

2888 
uöt8
 
°¨tIndex
 = 0;

2889 
uöt8
 
πgLi°Cou¡
 = 0;

2890 
uöt8
 *
msg
;

2892 
msg
 = 
öMsg
->
asdu
;

2894 
°©us
 = *
msg
++;

2895 i‡–
°©us
 =
ZSuc˚ss
 )

2897 
πgCou¡
 = *
msg
++;

2898 
°¨tIndex
 = *
msg
++;

2899 
πgLi°Cou¡
 = *
msg
++;

2903 
pR•
 = (
ZDO_MgmtRtgR•_t
 *)
	`oßl_mem_Æloc
(

2904 –
ZDO_MgmtRtgR•_t
 ) + (
πgLi°Cou¡
 * –
πgIãm_t
 )) );

2905 i‡–
pR•
 )

2907 
uöt8
 
x
;

2908 
πgIãm_t
 *
pLi°
 = 
pR•
->
li°
;

2909 
pR•
->
°©us
 = status;

2910 
pR•
->
πgCou¡
 =ÑtgCount;

2911 
pR•
->
°¨tIndex
 = startIndex;

2912 
pR•
->
πgLi°Cou¡
 =ÑtgListCount;

2914  
x
 = 0; x < 
πgLi°Cou¡
; x++ )

2916 
pLi°
->
d°Addªss
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2917 
msg
 += 2;

2918 
pLi°
->
°©us
 = *
msg
++;

2919 
pLi°
->
√xtH›Addªss
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2920 
msg
 += 2;

2921 
pLi°
++;

2925  ( 
pR•
 );

2926 
	}
}

2940 
ZDO_MgmtBödR•_t
 *
	$ZDO_P¨£MgmtBödR•
–
zdoIncomögMsg_t
 *
öMsg
 )

2942 
ZDO_MgmtBödR•_t
 *
pR•
;

2943 
uöt8
 
°©us
;

2944 
uöt8
 
bödögCou¡
 = 0;

2945 
uöt8
 
°¨tIndex
 = 0;

2946 
uöt8
 
bödögLi°Cou¡
 = 0;

2947 
uöt8
 *
msg
;

2949 
msg
 = 
öMsg
->
asdu
;

2951 
°©us
 = *
msg
++;

2952 i‡–
°©us
 =
ZSuc˚ss
 )

2954 
bödögCou¡
 = *
msg
++;

2955 
°¨tIndex
 = *
msg
++;

2956 
bödögLi°Cou¡
 = *
msg
++;

2960 
pR•
 = (
ZDO_MgmtBödR•_t
 *)
	`oßl_mem_Æloc
(

2961 ( ( 
ZDO_MgmtBödR•_t
 ) + (
bödögLi°Cou¡
 * –
≠sBödögIãm_t
 ))) );

2962 i‡–
pR•
 )

2964 
uöt8
 
x
;

2965 
≠sBödögIãm_t
 *
pLi°
 = 
pR•
->
li°
;

2966 
pR•
->
°©us
 = status;

2967 
pR•
->
bödögCou¡
 = bindingCount;

2968 
pR•
->
°¨tIndex
 = startIndex;

2969 
pR•
->
bödögLi°Cou¡
 = bindingListCount;

2971  
x
 = 0; x < 
bödögLi°Cou¡
; x++ )

2973 
	`oßl_˝yExtAddr
–
pLi°
->
§cAddr
, 
msg
 );

2974 
msg
 +
Z_EXTADDR_LEN
;

2975 
pLi°
->
§cEP
 = *
msg
++;

2979 
pLi°
->
˛u°îID
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2980 
msg
 += 2;

2981 
pLi°
->
d°Addr
.
addrMode
 = *
msg
++;

2982 i‡–
pLi°
->
d°Addr
.
addrMode
 =
Addr64Bô
 )

2984 
	`oßl_˝yExtAddr
–
pLi°
->
d°Addr
.
addr
.
extAddr
, 
msg
 );

2985 
msg
 +
Z_EXTADDR_LEN
;

2986 
pLi°
->
d°EP
 = *
msg
++;

2990 
pLi°
->
d°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2991 
msg
 += 2;

2994 
pLi°
++;

2998  ( 
pR•
 );

2999 
	}
}

3013 
ZDO_U£rDescR•_t
 *
	$ZDO_P¨£U£rDescR•
–
zdoIncomögMsg_t
 *
öMsg
 )

3015 
ZDO_U£rDescR•_t
 *
pR•
;

3016 
uöt8
 *
msg
;

3017 
uöt8
 
descLí
 = 0;

3019 
msg
 = 
öMsg
->
asdu
;

3021 i‡–
msg
[0] =
ZSuc˚ss
 )

3023 
descLí
 = 
msg
[3];

3026 
pR•
 = (
ZDO_U£rDescR•_t
 *)
	`oßl_mem_Æloc
– ( ZDO_U£rDescR•_àË+ 
descLí
 );

3027 i‡–
pR•
 )

3029 
pR•
->
°©us
 = 
msg
[0];

3030 
pR•
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[1], msg[2] );

3031 
pR•
->
Àngth
 = 
descLí
;

3032 i‡–
descLí
 )

3034 
	`oßl_mem˝y
–
pR•
->
desc
, &
msg
[4], 
descLí
 );

3038  ( 
pR•
 );

3039 
	}
}

3059 
uöt8
 
	$ZDO_P¨£Sim∂eDescBuf
–
uöt8
 *
buf
, 
Sim∂eDes¸ùti⁄F‹m©_t
 *
desc
 )

3061 
uöt8
 
num
, 
i
;

3063 
desc
->
EndPoöt
 = *
buf
++;

3064 
desc
->
AµProfId
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

3065 
buf
 += 2;

3066 
desc
->
AµDevi˚Id
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

3067 
buf
 += 2;

3068 
desc
->
AµDevVî
 = *
buf
 >> 4;

3070 
desc
->
Re£rved
 = 0;

3071 
buf
++;

3074 
num
 = 
desc
->
AµNumInClu°îs
 = *
buf
++;

3075 i‡–
num
 )

3077 i‡(!(
desc
->
pAµInClu°îLi°
 = (
uöt16
 *)
	`oßl_mem_Æloc
(
num
*(uint16))))

3082 
i
=0; i<
num
; ++i)

3084 
desc
->
pAµInClu°îLi°
[
i
] = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

3085 
buf
 += 2;

3090 
num
 = 
desc
->
AµNumOutClu°îs
 = *
buf
++;

3091 i‡(
num
)

3093 i‡(!(
desc
->
pAµOutClu°îLi°
 = (
uöt16
 *)
	`oßl_mem_Æloc
(
num
*(uint16))))

3096 i‡–
desc
->
pAµInClu°îLi°
 !
NULL
 )

3098 
	`oßl_mem_‰ì
(
desc
->
pAµInClu°îLi°
);

3100 
desc
->
pAµInClu°îLi°
 = 
NULL
;

3104 
i
=0; i<
num
; ++i)

3106 
desc
->
pAµOutClu°îLi°
[
i
] = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

3107 
buf
 += 2;

3111 
	}
}

3123 
	$ZDO_P¨£Devi˚A¬˚
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_Devi˚A¬˚_t
 *
pA¬˚
 )

3125 
uöt8
 *
msg
;

3128 
msg
 = 
öMsg
->
asdu
;

3129 
pA¬˚
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

3130 
msg
 += 2;

3131 
	`oßl_˝yExtAddr
–
pA¬˚
->
extAddr
, 
msg
 );

3132 
msg
 +
Z_EXTADDR_LEN
;

3133 
pA¬˚
->
ˇ∑bûôõs
 = *
msg
;

3134 
	}
}

3148 
ZDO_MgmtNwkUpd©eNŸify_t
 *
	$ZDO_P¨£MgmtNwkUpd©eNŸify
–
zdoIncomögMsg_t
 *
öMsg
 )

3150 
uöt8
 
°©us
;

3151 
uöt32
 
sˇ¬edCh™√ls
 = 0;

3152 
uöt16
 
tŸÆTønsmissi⁄s
 = 0;

3153 
uöt16
 
å™smissi⁄Faûuªs
 = 0;

3154 
uöt8
 
li°Cou¡
 = 0;

3155 
uöt8
 *
msg
 = 
öMsg
->
asdu
;

3156 
ZDO_MgmtNwkUpd©eNŸify_t
 *
pR•
;

3158 
°©us
 = *
msg
++;

3159 i‡–
°©us
 =
ZSuc˚ss
 )

3161 
sˇ¬edCh™√ls
 = 
	`oßl_buûd_uöt32
–
msg
, 4 );

3162 
msg
 += 4;

3163 
tŸÆTønsmissi⁄s
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

3164 
msg
 += 2;

3165 
å™smissi⁄Faûuªs
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

3166 
msg
 += 2;

3167 
li°Cou¡
 = *
msg
++;

3170 
pR•
 = (
ZDO_MgmtNwkUpd©eNŸify_t
 *)
	`oßl_mem_Æloc
– ( ZDO_MgmtNwkUpd©eNŸify_àË+ 
li°Cou¡
 );

3172 i‡–
pR•
 )

3174 
pR•
->
°©us
 = status;

3175 
pR•
->
sˇ¬edCh™√ls
 = scannedChannels;

3176 
pR•
->
tŸÆTønsmissi⁄s
 =ÅotalTransmissions;

3177 
pR•
->
å™smissi⁄Faûuªs
 =ÅransmissionFailures;

3178 
pR•
->
li°Cou¡
 =ÜistCount;

3181 i‡–
li°Cou¡
 > 0 )

3183 
	`oßl_mem˝y
–
pR•
->
íîgyVÆues
, 
msg
, 
li°Cou¡
 );

3187  ( 
pR•
 );

3188 
	}
}

3201 
	$ZDO_P¨£MgmtNwkUpd©eReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_MgmtNwkUpd©eReq_t
 *
pReq
 )

3203 
uöt8
 *
msg
 = 
öMsg
->
asdu
;

3205 
pReq
->
ch™√lMask
 = 
	`oßl_buûd_uöt32
–
msg
, 4 );

3206 
msg
 += 4;

3207 
pReq
->
sˇnDuøti⁄
 = *
msg
++;

3209 i‡–
pReq
->
sˇnDuøti⁄
 <= 0x05 )

3212 
pReq
->
sˇnCou¡
 = *
msg
;

3214 i‡––
pReq
->
sˇnDuøti⁄
 == 0xFE ) || (ÖReq->scanDuration == 0xFF ) )

3217 
pReq
->
nwkUpd©eId
 = *
msg
++;

3219 i‡–
pReq
->
sˇnDuøti⁄
 == 0xFF )

3221 
pReq
->
nwkM™agîAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

3224 
	}
}

	@Components/stack/zdo/ZDObject.h

40 #i‚de‡
ZDOBJECT_H


41 
	#ZDOBJECT_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"NLMEDE.h
"

52 
	~"ZDAµ.h
"

57 #i‡
deföed
–
ZIGBEE_FRAGMENTATION
 ) || ( 
SECURE
 == 0 )

58 
	#ZDO_MAX_LQI_ITEMS
 3

	)

60 
	#ZDO_MAX_LQI_ITEMS
 2

	)

63 
	#ZDO_MAX_NWKDISC_ITEMS
 5

	)

64 
	#ZDO_MAX_RTG_ITEMS
 10

	)

65 
	#ZDO_MAX_BIND_ITEMS
 3

	)

72 
MODE_JOIN
,

73 
MODE_RESUME
,

75 
MODE_HARD
,

76 
MODE_REJOIN


77 } 
	tdevSèπModes_t
;

81 
uöt8
 
°©us
;

82 
uöt16
 
nwkAddr
;

83 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

84 
uöt8
 
numAssocDevs
;

85 
uöt8
 
°¨tIndex
;

86 
uöt16
 
devLi°
[];

87 } 
	tZDO_NwkIEEEAddrRe•_t
;

91 
uöt8
 
°©us
;

92 
uöt16
 
nwkAddr
;

93 
NodeDes¸ùt‹F‹m©_t
 
nodeDesc
;

94 } 
	tZDO_NodeDescR•_t
;

98 
uöt8
 
°©us
;

99 
uöt16
 
nwkAddr
;

100 
NodePowîDes¸ùt‹F‹m©_t
 
pwrDesc
;

101 } 
	tZDO_PowîR•_t
;

105 
uöt8
 
°©us
;

106 
uöt16
 
nwkAddr
;

107 
Sim∂eDes¸ùti⁄F‹m©_t
 
sim∂eDesc
;

108 } 
	tZDO_Sim∂eDescR•_t
;

112 
uöt8
 
°©us
;

113 
uöt16
 
nwkAddr
;

114 
uöt8
 
˙t
;

115 
uöt8
 
ïLi°
[];

116 } 
	tZDO_A˘iveEndpoötR•_t
;

118 
ZDO_A˘iveEndpoötR•_t
 
	tZDO_M©chDescR•_t
;

122 
uöt8
 
°©us
;

123 
uöt8
 
√tw‹kCou¡
;

124 
uöt8
 
°¨tIndex
;

125 
uöt8
 
√tw‹kLi°Cou¡
;

126 
mgmtNwkDiscIãm_t
 
li°
[];

127 } 
	tZDO_MgmNwkDiscR•_t
;

131 
uöt8
 
°©us
;

132 
uöt8
 
√ighb‹LqiE¡rõs
;

133 
uöt8
 
°¨tIndex
;

134 
uöt8
 
√ighb‹LqiCou¡
;

135 
√ighb‹LqiIãm_t
 
li°
[];

136 } 
	tZDO_MgmtLqiR•_t
;

140 
uöt8
 
°©us
;

141 
uöt8
 
πgCou¡
;

142 
uöt8
 
°¨tIndex
;

143 
uöt8
 
πgLi°Cou¡
;

144 
πgIãm_t
 
li°
[];

145 } 
	tZDO_MgmtRtgR•_t
;

149 
uöt8
 
°©us
;

150 
uöt8
 
bödögCou¡
;

151 
uöt8
 
°¨tIndex
;

152 
uöt8
 
bödögLi°Cou¡
;

153 
≠sBödögIãm_t
 
li°
[];

154 } 
	tZDO_MgmtBödR•_t
;

158 
uöt8
 
°©us
;

159 
uöt16
 
nwkAddr
;

160 
uöt8
 
Àngth
;

161 
uöt8
 
desc
[];

162 } 
	tZDO_U£rDescR•_t
;

166 
uöt8
 
°©us
;

167 
uöt16
 
£rvîMask
;

168 } 
	tZDO_SîvîDiscR•_t
;

172 
uöt8
 
§cAddªss
[
Z_EXTADDR_LEN
];

173 
uöt8
 
§cEndpoöt
;

174 
uöt16
 
˛u°îID
;

175 
zAddrTy≥_t
 
d°Addªss
;

176 
uöt8
 
d°Endpoöt
;

177 } 
	tZDO_BödUnbödReq_t
;

181 
uöt16
 
nwkAddr
;

182 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

183 
uöt8
 
ˇ∑bûôõs
;

184 } 
	tZDO_Devi˚A¬˚_t
;

188 
uöt32
 
ch™√lMask
;

189 
uöt8
 
sˇnDuøti⁄
;

190 
uöt8
 
sˇnCou¡
;

191 
uöt8
 
nwkUpd©eId
;

192 
öt16
 
nwkM™agîAddr
;

193 } 
	tZDO_MgmtNwkUpd©eReq_t
;

197 
uöt8
 
°©us
;

198 
uöt32
 
sˇ¬edCh™√ls
;

199 
uöt16
 
tŸÆTønsmissi⁄s
;

200 
uöt16
 
å™smissi⁄Faûuªs
;

201 
uöt8
 
li°Cou¡
;

202 
uöt8
 
íîgyVÆues
[];

203 } 
	tZDO_MgmtNwkUpd©eNŸify_t
;

211 
ZDMATCH_REASON_START
,

212 
ZDMATCH_REASON_TIMEOUT
,

213 
ZDMATCH_REASON_UNBIND_RSP
,

214 
ZDMATCH_REASON_BIND_RSP


219 
ZDEndDevi˚Böd_t
 
ed1
;

220 
ZDEndDevi˚Böd_t
 
ed2
;

221 
uöt8
 
°©e
;

222 
uöt8
 
£ndög
;

223 
uöt8
 
å™sSeq
;

224 
uöt8
 
ed1numM©ched
;

225 
uöt16
 *
ed1M©ched
;

226 
uöt8
 
ed2numM©ched
;

227 
uöt16
 *
ed2M©ched
;

228 } 
	tZDM©chEndDevi˚Böd_t
;

237 
ZDM©chEndDevi˚Böd_t
 *
m©chED
;

247 
ZDO_Inô
( );

252 
ZDO_SèπDevi˚
–
byã
 
logiˇlTy≥
, 
devSèπModes_t
 
°¨tMode
,

253 
byã
 
bóc⁄Ordî
, byã 
su≥r‰ameOrdî
 );

258 
ZDO_Upd©eNwkSètus
–
devSèãs_t
 
°©e
 );

263 
ZDO_M©chEndDevi˚Böd
–
ZDEndDevi˚Böd_t
 *
bödReq
 );

269 
byã
 
ZDO_AnyClu°îM©ches
(

270 
byã
 
AC¡
, 
uöt16
 *
ALi°
, byã 
BC¡
, uöt16 *
BLi°
 );

275 
ZDO_Pro˚ssNodeDescReq
–
zdoIncomögMsg_t
 *
öMsg
 );

280 
ZDO_Pro˚ssPowîDescReq
–
zdoIncomögMsg_t
 *
öMsg
 );

285 
ZDO_Pro˚ssSim∂eDescReq
–
zdoIncomögMsg_t
 *
öMsg
 );

290 
ZDO_Pro˚ssA˘iveEPReq
–
zdoIncomögMsg_t
 *
öMsg
 );

295 
ZDO_Pro˚ssM©chDescReq
–
zdoIncomögMsg_t
 *
öMsg
 );

300 
ZDO_Pro˚ssSîvîDiscR•
–
zdoIncomögMsg_t
 *
öMsg
 );

305 
ZDO_Pro˚ssSîvîDiscReq
–
zdoIncomögMsg_t
 *
öMsg
 );

311 
uöt8
 
ZDM©chSídSèã
–uöt8 
ªas⁄
, uöt8 
°©us
, uöt8 
TønsSeq
 );

320 
ZDO_EndDevi˚TimeoutCB
( );

330 
ZDO_Pro˚ssMgmNwkDiscR•
–
zdoIncomögMsg_t
 *
öMsg
 );

336 
ZDO_Pro˚ssMgmtNwkDiscReq
–
zdoIncomögMsg_t
 *
öMsg
 );

342 
ZDO_FöishPro˚ssögMgmtNwkDiscReq
( );

348 
ZDO_P¨£MgmtNwkUpd©eReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_MgmtNwkUpd©eReq_t
 *
pReq
 );

354 
ZDO_Pro˚ssMgmtLqiReq
–
zdoIncomögMsg_t
 *
öMsg
 );

360 
ZDO_Pro˚ssMgmtRtgReq
–
zdoIncomögMsg_t
 *
öMsg
 );

362 
ZDO_Pro˚ssMgmtBödReq
–
zdoIncomögMsg_t
 *
öMsg
 );

364 
ZDO_Pro˚ssMgmtBödR•
–
zdoIncomögMsg_t
 *
öMsg
 );

366 
ZDO_Pro˚ssMgmtDúe˘JoöReq
–
zdoIncomögMsg_t
 *
öMsg
 );

368 
ZDO_Pro˚ssMgmtLóveReq
–
zdoIncomögMsg_t
 *
öMsg
 );

370 
ZDO_Pro˚ssMgmtPîmôJoöReq
–
zdoIncomögMsg_t
 *
öMsg
 );

372 
ZDO_Pro˚ssU£rDescReq
–
zdoIncomögMsg_t
 *
öMsg
 );

374 
ZDO_Pro˚ssU£rDescSë
–
zdoIncomögMsg_t
 *
öMsg
 );

376 
ZDO_Pro˚ssDevi˚A¬˚
–
zdoIncomögMsg_t
 *
öMsg
 );

378 
ZDO_BuûdSim∂eDescBuf
–
uöt8
 *
buf
, 
Sim∂eDes¸ùti⁄F‹m©_t
 *
desc
 );

380 
uöt8
 
ZDO_P¨£Sim∂eDescBuf
–uöt8 *
buf
, 
Sim∂eDes¸ùti⁄F‹m©_t
 *
desc
 );

382 
ZDO_Upd©eAddrM™agî
–
uöt16
 
nwkAddr
, 
uöt8
 *
extAddr
 );

391 
ZDO_NwkIEEEAddrRe•_t
 *
ZDO_P¨£AddrR•
–
zdoIncomögMsg_t
 *
öMsg
 );

396 
ZDO_P¨£NodeDescR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_NodeDescR•_t
 *
pNDR•
 );

401 
ZDO_P¨£PowîDescR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_PowîR•_t
 *
pNPR•
 );

410 
ZDO_P¨£Sim∂eDescR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_Sim∂eDescR•_t
 *
pSim∂eDescR•
 );

419 
ZDO_A˘iveEndpoötR•_t
 *
ZDO_P¨£EPLi°R•
–
zdoIncomögMsg_t
 *
öMsg
 );

427 
	#ZDO_P¨£BödR•
(
a
Ë((
uöt8
)(*◊->
asdu
)))

	)

436 
ZDO_MgmNwkDiscR•_t
 *
ZDO_P¨£MgmNwkDiscR•
–
zdoIncomögMsg_t
 *
öMsg
 );

445 
ZDO_MgmtLqiR•_t
 *
ZDO_P¨£MgmtLqiR•
–
zdoIncomögMsg_t
 *
öMsg
 );

454 
ZDO_MgmtRtgR•_t
 *
ZDO_P¨£MgmtRtgR•
–
zdoIncomögMsg_t
 *
öMsg
 );

463 
ZDO_MgmtBödR•_t
 *
ZDO_P¨£MgmtBödR•
–
zdoIncomögMsg_t
 *
öMsg
 );

471 
	#ZDO_P¨£MgmtDúe˘JoöR•
(
a
Ë((
uöt8
)(*◊->
asdu
)))

	)

479 
	#ZDO_P¨£MgmtLóveR•
(
a
Ë((
uöt8
)(*◊->
asdu
)))

	)

487 
	#ZDO_P¨£MgmtPîmôJoöR•
(
a
Ë((
uöt8
)(*◊->
asdu
)))

	)

496 
ZDO_U£rDescR•_t
 *
ZDO_P¨£U£rDescR•
–
zdoIncomögMsg_t
 *
öMsg
 );

502 
ZDO_P¨£SîvîDiscR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_SîvîDiscR•_t
 *
pR•
 );

510 
ZDO_P¨£EndDevi˚BödReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDEndDevi˚Böd_t
 *
bödReq
 );

515 
ZDO_P¨£BödUnbödReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_BödUnbödReq_t
 *
pReq
 );

520 
ZDO_Pro˚ssBödUnbödReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_BödUnbödReq_t
 *
pReq
 );

528 
	#ZDO_P¨£U£rDescC⁄f
(
a
Ë((
uöt8
)(*◊->
asdu
)))

	)

533 
ZDO_P¨£Devi˚A¬˚
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_Devi˚A¬˚_t
 *
pA¬˚
 );

542 
ZDO_MgmtNwkUpd©eNŸify_t
 *
ZDO_P¨£MgmtNwkUpd©eNŸify
–
zdoIncomögMsg_t
 *
öMsg
 );

547 #ifde‡
__˝lu•lus


	@Components/stack/zdo/ZDProfile.c

43 
	~"ZComdef.h
"

44 
	~"OSAL.h
"

45 
	~"AF.h
"

46 
	~"NLMEDE.h
"

47 
	~"nwk_utû.h
"

48 
	~"APS.h
"

50 
	~"AddrMgr.h
"

51 
	~"ZDC⁄fig.h
"

52 
	~"ZDProfûe.h
"

53 
	~"ZDObje˘.h
"

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
–
LCD_SUPPORTED
 )

57 
	~"OnBﬂrd.h
"

60 
	~"nwk_utû.h
"

62 #i‡
deföed
–
MT_ZDO_FUNC
 )

63 
	~"MT_ZDO.h
"

70 
	#ZADDR_TO_AFADDR
–
pZADDR
, 
AFADDR
 ) { \

71 (
AFADDR
).
ídPoöt
 = 
ZDP_AF_ENDPOINT
; \

72 (
AFADDR
).
addrMode
 = (
afAddrMode_t
)(
pZADDR
)->addrMode; \

73 (
AFADDR
).
addr
.
sh‹tAddr
 = (
pZADDR
)->addr.shortAddr; \

74 }

	)

76 
	#FûlAndSídBuf„r
–
TRANSSEQ
, 
ADDR
, 
ID
, 
LEN
, 
BUF
 ) { \

77 
afSètus_t
 
°©
; \

78 
ZDP_TmpBuf
 = (
BUF
)+1; \

79 
°©
 = 
	`fûlAndSíd
–(
TRANSSEQ
), (
ADDR
), (
ID
), (
LEN
) ); \

80 
	`oßl_mem_‰ì
–(
BUF
) ); \

81 
ZDP_TmpBuf
 = 
ZDP_Buf
+1; \

82  
°©
; \

83 }

	)

85 
	#FûlAndSídTxO±i⁄s
–
TRANSSEQ
, 
ADDR
, 
ID
, 
LEN
, 
TxO
 ) { \

86 
afSètus_t
 
°©
; \

87 
ZDP_TxO±i⁄s
 = (
TxO
); \

88 
°©
 = 
	`fûlAndSíd
–(
TRANSSEQ
), (
ADDR
), (
ID
), (
LEN
) ); \

89 
ZDP_TxO±i⁄s
 = 
AF_TX_OPTIONS_NONE
; \

90  
°©
; \

91 }

	)

93 
	#FûlAndSídBuf„rTxO±i⁄s
–
TRANSSEQ
, 
ADDR
, 
ID
, 
LEN
, 
BUF
, 
TxO
 ) { \

94 
afSètus_t
 
°©
; \

95 
ZDP_TmpBuf
 = (
BUF
)+1; \

96 
ZDP_TxO±i⁄s
 = (
TxO
); \

97 
°©
 = 
	`fûlAndSíd
–(
TRANSSEQ
), (
ADDR
), (
ID
), (
LEN
) ); \

98 
	`oßl_mem_‰ì
–(
BUF
) ); \

99 
ZDP_TmpBuf
 = 
ZDP_Buf
+1; \

100 
ZDP_TxO±i⁄s
 = 
AF_TX_OPTIONS_NONE
; \

101  
°©
; \

102 }

	)

108 
	#ZDP_BUF_SZ
 80

	)

110 
CONST
 
byã
 
	gZDP_AF_ENDPOINT
 = 0;

117 *
	m√xt
;

118 
uöt8
 
	mèskID
;

119 
uöt16
 
	m˛u°îID
;

120 } 
	tZDO_MsgCB_t
;

127 
byã
 
	gZDP_TønsID
 = 0;

133 
ídPoötDesc_t
 
ZDAµ_ïDesc
;

143 
afSètus_t
 
fûlAndSíd
–
uöt8
 *
å™sSeq
, 
zAddrTy≥_t
 *
addr
, 
cId_t
 
˛u°îID
, 
byã
 
Àn
 );

144 
uöt8
 
ZDO_SídMsgCBs
–
zdoIncomögMsg_t
 *
öMsg
 );

145 
zdpPro˚ssAddrReq
–
zdoIncomögMsg_t
 *
öMsg
 );

151 
uöt8
 
	gZDP_Buf
[ 
ZDP_BUF_SZ
 ];

152 
uöt8
 *
	gZDP_TmpBuf
 = 
ZDP_Buf
+1;

154 
byã
 
	gZDP_TxO±i⁄s
 = 
AF_TX_OPTIONS_NONE
;

155 
ZDO_MsgCB_t
 *
	gzdoMsgCBs
 = (ZDO_MsgCB_à*)
NULL
;

161 (*
	tp‚ZDPMsgPro˚ss‹
)–
	tzdoIncomögMsg_t
 *
	töMsg
 );

165 
uöt16
 
˛u°îID
;

166 
p‚ZDPMsgPro˚ss‹
 
pFn
;

167 } 
	tzdpMsgProcIãm_t
;

169 
CONST
 
zdpMsgProcIãm_t
 
zdpMsgProcs
[] =

171 #i‡–
RFD_RCVC_ALWAYS_ON
==
TRUE
 ) || ( 
ZG_BUILD_RTR_TYPE
 )

173 { 
NWK_addr_ªq
, 
zdpPro˚ssAddrReq
 },

174 { 
Devi˚_™n˚
, 
ZDO_Pro˚ssDevi˚A¬˚
 },

176 { 
IEEE_addr_ªq
, 
zdpPro˚ssAddrReq
 },

177 { 
Node_Desc_ªq
, 
ZDO_Pro˚ssNodeDescReq
 },

178 { 
Powî_Desc_ªq
, 
ZDO_Pro˚ssPowîDescReq
 },

179 { 
Sim∂e_Desc_ªq
, 
ZDO_Pro˚ssSim∂eDescReq
 },

180 { 
A˘ive_EP_ªq
, 
ZDO_Pro˚ssA˘iveEPReq
 },

181 { 
M©ch_Desc_ªq
, 
ZDO_Pro˚ssM©chDescReq
 },

182 #i‡
	`deföed
 ( 
ZDO_MGMT_NWKDISC_RESPONSE
 )

183 { 
Mgmt_NWK_Disc_ªq
, 
ZDO_Pro˚ssMgmtNwkDiscReq
 },

185 #i‡
	`deföed
 ( 
ZDO_MGMT_LQI_RESPONSE
 ) && ( 
ZG_BUILD_RTR_TYPE
 )

186 { 
Mgmt_Lqi_ªq
, 
ZDO_Pro˚ssMgmtLqiReq
 },

188 #i‡
	`deföed
 ( 
ZDO_MGMT_RTG_RESPONSE
 ) && ( 
ZG_BUILD_RTR_TYPE
 )

189 { 
Mgmt_Rtg_ªq
, 
ZDO_Pro˚ssMgmtRtgReq
 },

191 #i‡
	`deföed
 ( 
ZDO_MGMT_BIND_RESPONSE
 ) && deföed ( 
REFLECTOR
 )

192 { 
Mgmt_Böd_ªq
, 
ZDO_Pro˚ssMgmtBödReq
 },

194 #i‡
	`deföed
 ( 
ZDO_MGMT_JOINDIRECT_RESPONSE
 ) && ( 
ZG_BUILD_RTR_TYPE
 )

195 { 
Mgmt_Dúe˘_Joö_ªq
, 
ZDO_Pro˚ssMgmtDúe˘JoöReq
 },

197 #i‡
	`deföed
 ( 
ZDO_MGMT_LEAVE_RESPONSE
 )

198 { 
Mgmt_Lóve_ªq
, 
ZDO_Pro˚ssMgmtLóveReq
 },

200 #i‡
	`deföed
 ( 
ZDO_MGMT_PERMIT_JOIN_RESPONSE
 ) && ( 
ZG_BUILD_RTR_TYPE
 )

201 { 
Mgmt_Pîmô_Joö_ªq
, 
ZDO_Pro˚ssMgmtPîmôJoöReq
 },

203 #i‡
	`deföed
 ( 
ZDO_USERDESC_RESPONSE
 )

204 { 
U£r_Desc_ªq
, 
ZDO_Pro˚ssU£rDescReq
 },

206 #i‡
	`deföed
 ( 
ZDO_USERDESCSET_RESPONSE
 )

207 { 
U£r_Desc_£t
, 
ZDO_Pro˚ssU£rDescSë
 },

209 #i‡
	`deföed
 ( 
ZDO_SERVERDISC_RESPONSE
 )

210 { 
Sîvî_Discovîy_ªq
, 
ZDO_Pro˚ssSîvîDiscReq
 },

212 {0xFFFF, 
NULL
}

213 
	}
};

225 
afSètus_t
 
	$fûlAndSíd
–
uöt8
 *
å™sSeq
, 
zAddrTy≥_t
 *
addr
, 
cId_t
 
˛u°îID
, 
byã
 
Àn
 )

227 
afAddrTy≥_t
 
afAddr
;

229 
	`oßl_mem£t
–&
afAddr
, 0, (
afAddrTy≥_t
) );

230 
	`ZADDR_TO_AFADDR
–
addr
, 
afAddr
 );

232 *(
ZDP_TmpBuf
-1Ë*
å™sSeq
;

234  
	`AF_D©aReque°
–&
afAddr
, &
ZDAµ_ïDesc
, 
˛u°îID
,

235 (
uöt16
)(
Àn
+1), (
uöt8
*)(
ZDP_TmpBuf
-1),

236 
å™sSeq
, 
ZDP_TxO±i⁄s
, 
AF_DEFAULT_RADIUS
 );

238 
	}
}

254 
afSètus_t
 
	$ZDP_SídD©a
–
uöt8
 *
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
cmd
,

255 
byã
 
Àn
, 
uöt8
 *
buf
, byã 
SecurôyE«bÀ
 )

257 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

258 
byã
 
˙t
 = 
Àn
;

260  
˙t
-- )

262 *
pBuf
++ = *
buf
++;

265 
	`FûlAndSídTxO±i⁄s
–
TønsSeq
, 
d°Addr
, 
cmd
, 
Àn
, ((
SecurôyE«bÀ
Ë? 
AF_EN_SECURITY
 : 0) );

266 
	}
}

280 
afSètus_t
 
	$ZDP_NWKAddrOfI¡îe°Req
–
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
nwkAddr
,

281 
byã
 
cmd
, byã 
SecurôyE«bÀ
 )

283 ()
SecurôyE«bÀ
;

285 
ZDP_TmpBuf
[0] = 
	`LO_UINT16
–
nwkAddr
 );

286 
ZDP_TmpBuf
[1] = 
	`HI_UINT16
–
nwkAddr
 );

288  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
cmd
, 2 );

289 
	}
}

307 
afSètus_t
 
	$ZDP_NwkAddrReq
–
uöt8
 *
IEEEAddªss
, 
byã
 
ReqTy≥
,

308 
byã
 
SèπIndex
, byã 
SecurôyE«bÀ
 )

310 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

311 
byã
 
Àn
 = 
Z_EXTADDR_LEN
 + 1 + 1;

312 
zAddrTy≥_t
 
d°Addr
;

314 ()
SecurôyE«bÀ
;

316 i‡–
	`oßl_ExtAddrEquÆ
–
ßveExtAddr
, 
IEEEAddªss
 ) =
FALSE
 )

318 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

319 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR_DEVRXON
;

323 
d°Addr
.
addrMode
 = 
Addr16Bô
;

324 
d°Addr
.
addr
.
sh‹tAddr
 = 
ZDAµNwkAddr
.addr.shortAddr;

327 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
IEEEAddªss
 );

329 *
pBuf
++ = 
ReqTy≥
;

330 *
pBuf
++ = 
SèπIndex
;

332  
	`fûlAndSíd
–&
ZDP_TønsID
, &
d°Addr
, 
NWK_addr_ªq
, 
Àn
 );

333 
	}
}

348 
afSètus_t
 
	$ZDP_IEEEAddrReq
–
uöt16
 
sh‹tAddr
, 
byã
 
ReqTy≥
,

349 
byã
 
SèπIndex
, byã 
SecurôyE«bÀ
 )

351 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

352 
byã
 
Àn
 = 2 + 1 + 1;

353 
zAddrTy≥_t
 
d°Addr
;

355 ()
SecurôyE«bÀ
;

357 
d°Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

358 
d°Addr
.
addr
.
sh‹tAddr
 = shortAddr;

360 *
pBuf
++ = 
	`LO_UINT16
–
sh‹tAddr
 );

361 *
pBuf
++ = 
	`HI_UINT16
–
sh‹tAddr
 );

363 *
pBuf
++ = 
ReqTy≥
;

364 *
pBuf
++ = 
SèπIndex
;

366  
	`fûlAndSíd
–&
ZDP_TønsID
, &
d°Addr
, 
IEEE_addr_ªq
, 
Àn
 );

367 
	}
}

388 
afSètus_t
 
	$ZDP_M©chDescReq
–
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
nwkAddr
,

389 
uöt16
 
ProfûeID
,

390 
byã
 
NumInClu°îs
, 
cId_t
 *
InClu°îLi°
,

391 
byã
 
NumOutClu°îs
, 
cId_t
 *
OutClu°îLi°
,

392 
byã
 
SecurôyE«bÀ
 )

394 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

396 
byã
 
i
, 
Àn
 = 2 + 2 + 1 + 1;

398 ()
SecurôyE«bÀ
;

400 
Àn
 +(
NumInClu°îs
 + 
NumOutClu°îs
Ë* (
uöt16
);

402 i‡–
Àn
 >
ZDP_BUF_SZ
-1 )

404  
afSètus_MEM_FAIL
;

411 i‡–((
d°Addr
->
addrMode
 =
AddrBrﬂdˇ°
Ë|| (d°Addr->addrModê=
Addr16Bô
))

412 && (
d°Addr
->
addr
.
sh‹tAddr
 =
NWK_BROADCAST_SHORTADDR_DEVALL
) )

414 
d°Addr
->
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR_DEVRXON
;

416 i‡–
nwkAddr
 =
NWK_BROADCAST_SHORTADDR_DEVALL
 )

418 
nwkAddr
 = 
NWK_BROADCAST_SHORTADDR_DEVRXON
;

421 *
pBuf
++ = 
	`LO_UINT16
–
nwkAddr
 );

422 *
pBuf
++ = 
	`HI_UINT16
–
nwkAddr
 );

424 *
pBuf
++ = 
	`LO_UINT16
–
ProfûeID
 );

425 *
pBuf
++ = 
	`HI_UINT16
–
ProfûeID
 );

427 *
pBuf
++ = 
NumInClu°îs
;

428 i‡–
NumInClu°îs
 )

430 
i
=0; i<
NumInClu°îs
; ++i) {

431 *
pBuf
++ = 
	`LO_UINT16
–
InClu°îLi°
[
i
] );

432 *
pBuf
++ = 
	`HI_UINT16
–
InClu°îLi°
[
i
] );

436 *
pBuf
++ = 
NumOutClu°îs
;

437 i‡–
NumOutClu°îs
 )

439 
i
=0; i<
NumOutClu°îs
; ++i) {

440 *
pBuf
++ = 
	`LO_UINT16
–
OutClu°îLi°
[
i
] );

441 *
pBuf
++ = 
	`HI_UINT16
–
OutClu°îLi°
[
i
] );

445  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
M©ch_Desc_ªq
, 
Àn
 );

446 
	}
}

462 
afSètus_t
 
	$ZDP_Sim∂eDescReq
–
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
nwkAddr
,

463 
byã
 
ídPoöt
, byã 
SecurôyE«bÀ
 )

466 ()
SecurôyE«bÀ
;

468 
ZDP_TmpBuf
[0] = 
	`LO_UINT16
–
nwkAddr
 );

469 
ZDP_TmpBuf
[1] = 
	`HI_UINT16
–
nwkAddr
 );

470 
ZDP_TmpBuf
[2] = 
ídPoöt
;

472  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
Sim∂e_Desc_ªq
, 3 );

473 
	}
}

489 
afSètus_t
 
	$ZDP_U£rDescSë
–
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
nwkAddr
,

490 
U£rDes¸ùt‹F‹m©_t
 *
U£rDes¸ùt‹
,

491 
byã
 
SecurôyE«bÀ
 )

493 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

494 
byã
 
Àn
 = (
U£rDes¸ùt‹
->À¿< 
AF_MAX_USER_DESCRIPTOR_LEN
) ?

495 
U£rDes¸ùt‹
->
Àn
 : 
AF_MAX_USER_DESCRIPTOR_LEN
;

496 
byã
 
addrLí
 = 2;

498 ()
SecurôyE«bÀ
;

500 *
pBuf
++ = 
	`LO_UINT16
–
nwkAddr
 );

501 *
pBuf
++ = 
	`HI_UINT16
–
nwkAddr
 );

503 *
pBuf
++ = 
Àn
;

504 
addrLí
 = 3;

506 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
U£rDes¸ùt‹
->
desc
, 
Àn
 );

507 
	`oßl_mem£t
–
pBuf
, 
AF_USER_DESCRIPTOR_FILL
, 
AF_MAX_USER_DESCRIPTOR_LEN
-
Àn
 );

509  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
U£r_Desc_£t
, (
AF_MAX_USER_DESCRIPTOR_LEN
 + 
addrLí
) );

510 
	}
}

522 
afSètus_t
 
	$ZDP_SîvîDiscReq
–
uöt16
 
£rvîMask
, 
byã
 
SecurôyE«bÀ
 )

524 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

525 
zAddrTy≥_t
 
d°Addr
;

527 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

528 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR_DEVRXON
;

530 *
pBuf
++ = 
	`LO_UINT16
–
£rvîMask
 );

531 *
pBuf
 = 
	`HI_UINT16
–
£rvîMask
 );

533 
	`FûlAndSídTxO±i⁄s
–&
ZDP_TønsID
, &
d°Addr
, 
Sîvî_Discovîy_ªq
, 2,

534 ((
SecurôyE«bÀ
Ë? 
AF_EN_SECURITY
 : 
AF_TX_OPTIONS_NONE
) );

535 
	}
}

551 
afSètus_t
 
	$ZDP_Devi˚A¬˚
–
uöt16
 
nwkAddr
, 
uöt8
 *
IEEEAddr
,

552 
byã
 
ˇ∑bûôõs
, byã 
SecurôyE«bÀ
 )

554 
zAddrTy≥_t
 
d°Addr
;

555 
uöt8
 
Àn
;

557 ()
SecurôyE«bÀ
;

559 
d°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrBrﬂdˇ°
;

560 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR_DEVRXON
;

562 
ZDP_TmpBuf
[0] = 
	`LO_UINT16
–
nwkAddr
 );

563 
ZDP_TmpBuf
[1] = 
	`HI_UINT16
–
nwkAddr
 );

564 
	`oßl_˝yExtAddr
–&
ZDP_TmpBuf
[2], 
IEEEAddr
 );

565 
Àn
 = 2 + 
Z_EXTADDR_LEN
;

567 
ZDP_TmpBuf
[10] = 
ˇ∑bûôõs
;

568 
Àn
++;

570  
	`fûlAndSíd
–&
ZDP_TønsID
, &
d°Addr
, 
Devi˚_™n˚
, 
Àn
 );

571 
	}
}

587 
	$zdpPro˚ssAddrReq
–
zdoIncomögMsg_t
 *
öMsg
 )

589 
assocüãd_devi˚s_t
 *
pAssoc
;

590 
uöt8
 
ªqTy≥
;

591 
uöt16
 
aoi
 = 
INVALID_NODE_ADDR
;

592 
uöt8
 *
õì
 = 
NULL
;

594 
ªqTy≥
 = 
öMsg
->
asdu
[(öMsg->
˛u°îID
 =
NWK_addr_ªq
Ë? 
Z_EXTADDR_LEN
 : –
uöt16
 ) ];

596 i‡–
öMsg
->
˛u°îID
 =
NWK_addr_ªq
 )

599 
õì
 = 
öMsg
->
asdu
;

601 i‡–
	`oßl_ExtAddrEquÆ
–
ßveExtAddr
, 
õì
 ) )

603 
aoi
 = 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
;

606 i‡–(
ZSTACK_ROUTER_BUILD
)

607 && (((
pAssoc
 = 
	`AssocGëWôhExt
–
õì
 )Ë!
NULL
)

608 && (
pAssoc
->
nodeRñ©i⁄
 =
CHILD_RFD
)) )

610 
aoi
 = 
pAssoc
->
sh‹tAddr
;

611 i‡–
ªqTy≥
 !
ZDP_ADDR_REQTYPE_SINGLE
 )

612 
ªqTy≥
 = 0xFF;

617 
aoi
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[0], inMsg->asdu[1] );

619 i‡–
aoi
 =
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 )

621 
õì
 = 
ßveExtAddr
;

623 i‡–(
ZSTACK_ROUTER_BUILD
)

624 && (((
pAssoc
 = 
	`AssocGëWôhSh‹t
–
aoi
 )Ë!
NULL
)

625 && (
pAssoc
->
nodeRñ©i⁄
 =
CHILD_RFD
)) )

627 
AddrMgrE¡ry_t
 
addrE¡ry
;

628 
addrE¡ry
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

629 
addrE¡ry
.
ödex
 = 
pAssoc
->
addrIdx
;

630 i‡–
	`AddrMgrE¡ryGë
–&
addrE¡ry
 ) )

632 
õì
 = 
addrE¡ry
.
extAddr
;

635 i‡–
ªqTy≥
 !
ZDP_ADDR_REQTYPE_SINGLE
 )

636 
ªqTy≥
 = 0xFF;

640 i‡–((
aoi
 !
INVALID_NODE_ADDR
Ë&& (
õì
 !
NULL
)Ë|| (
öMsg
->
wasBrﬂdˇ°
 =
FALSE
) )

642 
uöt8
 
°©
;

643 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

645 
uöt8
 
Àn
 = 1 + 
Z_EXTADDR_LEN
 + 2;

648 i‡–(
aoi
 !
INVALID_NODE_ADDR
Ë&& (
õì
 !
NULL
) )

650 
°©
 = ((
ªqTy≥
 =
ZDP_ADDR_REQTYPE_SINGLE
Ë|| (ªqTy≥ =
ZDP_ADDR_REQTYPE_EXTENDED
))

651 ? 
ZDP_SUCCESS
 : 
ZDP_INVALID_REQTYPE
;

656 
°©
 = 
ZDP_DEVICE_NOT_FOUND
;

659 i‡–
öMsg
->
˛u°îID
 =
NWK_addr_ªq
 )

661 
aoi
 = 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
;

665 
õì
 = 
ßveExtAddr
;

669 *
pBuf
++ = 
°©
;

671 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
õì
 );

673 *
pBuf
++ = 
	`LO_UINT16
–
aoi
 );

674 *
pBuf
++ = 
	`HI_UINT16
–
aoi
 );

676 i‡–
ZSTACK_ROUTER_BUILD
 )

678 i‡–(
ªqTy≥
 =
ZDP_ADDR_REQTYPE_EXTENDED
Ë&& (
aoi
 =
ZDAµNwkAddr
.
addr
.
sh‹tAddr
)

679 && (
°©
 =
ZDP_SUCCESS
) )

681 
uöt8
 
˙t
 = 0;

682 
uöt16
 *
li°
 = 
	`AssocMakeLi°
–&
˙t
 );

684 i‡–
li°
 !
NULL
 )

686 
byã
 
idx
 = 
öMsg
->
asdu
[(((öMsg->
˛u°îID
 =
NWK_addr_ªq
Ë? 
Z_EXTADDR_LEN
 : –
uöt16
 )) + 1)];

687 
uöt16
 *
pLi°
 = 
li°
 + 
idx
;

690 i‡–
˙t
 > 
idx
 )

692 
˙t
 -
idx
;

693 
Àn
 +(
˙t
 * –
uöt16
 ));

697 
˙t
 = 0;

699 *
pBuf
++ = 
˙t
;

700 
Àn
++;

703 *
pBuf
++ = 
idx
;

704 
Àn
++;

706  
˙t
 != 0 )

708 *
pBuf
++ = 
	`LO_UINT16
–*
pLi°
 );

709 *
pBuf
++ = 
	`HI_UINT16
–*
pLi°
 );

710 
pLi°
++;

711 
˙t
--;

714 
	`oßl_mem_‰ì
–(
uöt8
 *)
li°
 );

719 *
pBuf
++ = 0;

720 
Àn
++;

725 
ZDP_TxO±i⁄s
 = 
AF_MSG_ACK_REQUEST
;

726 
	`fûlAndSíd
–&(
öMsg
->
TønsSeq
), &(öMsg->
§cAddr
), (
cId_t
)(öMsg->
˛u°îID
 | 
ZDO_RESPONSE_BIT
), 
Àn
 );

727 
ZDP_TxO±i⁄s
 = 
AF_TX_OPTIONS_NONE
;

729 
	}
}

743 
afSètus_t
 
	$ZDP_NodeDescMsg
–
zdoIncomögMsg_t
 *
öMsg
,

744 
uöt16
 
nwkAddr
, 
NodeDes¸ùt‹F‹m©_t
 *
pNodeDesc
 )

746 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

747 
byã
 
Àn
;

749 
Àn
 = 1 + 2 + 13;

751 *
pBuf
++ = 
ZDP_SUCCESS
;

753 *
pBuf
++ = 
	`LO_UINT16
–
nwkAddr
 );

754 *
pBuf
++ = 
	`HI_UINT16
–
nwkAddr
 );

756 *
pBuf
++ = (
byã
)((
pNodeDesc
->
Com∂exDescAvaû
 << 3) |

757 (
pNodeDesc
->
U£rDescAvaû
 << 4) |

758 (
pNodeDesc
->
LogiˇlTy≥
 & 0x07));

760 *
pBuf
++ = (
byã
)((
pNodeDesc
->
FªquícyB™d
 << 3Ë| (pNodeDesc->
APSFœgs
 & 0x07));

761 *
pBuf
++ = 
pNodeDesc
->
C≠abûôyFœgs
;

762 *
pBuf
++ = 
pNodeDesc
->
M™uÁ˘uªrCode
[0];

763 *
pBuf
++ = 
pNodeDesc
->
M™uÁ˘uªrCode
[1];

764 *
pBuf
++ = 
pNodeDesc
->
MaxBuf„rSize
;

765 *
pBuf
++ = 
pNodeDesc
->
MaxInTøns„rSize
[0];

766 *
pBuf
++ = 
pNodeDesc
->
MaxInTøns„rSize
[1];

768 *
pBuf
++ = 
	`LO_UINT16
–
pNodeDesc
->
SîvîMask
 );

769 *
pBuf
++ = 
	`HI_UINT16
–
pNodeDesc
->
SîvîMask
 );

770 *
pBuf
++ = 
pNodeDesc
->
MaxOutTøns„rSize
[0];

771 *
pBuf
++ = 
pNodeDesc
->
MaxOutTøns„rSize
[1];

772 *
pBuf
 = 
pNodeDesc
->
Des¸ùt‹C≠abûôy
;

774  
	`fûlAndSíd
–&(
öMsg
->
TønsSeq
), &(öMsg->
§cAddr
), 
Node_Desc_r•
, 
Àn
 );

775 
	}
}

789 
afSètus_t
 
	$ZDP_PowîDescMsg
–
zdoIncomögMsg_t
 *
öMsg
,

790 
uöt16
 
nwkAddr
, 
NodePowîDes¸ùt‹F‹m©_t
 *
pPowîDesc
 )

792 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

793 
byã
 
Àn
 = 1 + 2 + 2;

795 *
pBuf
++ = 
ZDP_SUCCESS
;

797 *
pBuf
++ = 
	`LO_UINT16
–
nwkAddr
 );

798 *
pBuf
++ = 
	`HI_UINT16
–
nwkAddr
 );

800 *
pBuf
++ = (
byã
)((
pPowîDesc
->
AvaûabÀPowîSour˚s
 << 4)

801 | (
pPowîDesc
->
PowîMode
 & 0x0F));

802 *
pBuf
++ = (
byã
)((
pPowîDesc
->
CuºítPowîSour˚Levñ
 << 4)

803 | (
pPowîDesc
->
CuºítPowîSour˚
 & 0x0F));

805  
	`fûlAndSíd
–&(
öMsg
->
TønsSeq
), &(öMsg->
§cAddr
), 
Powî_Desc_r•
, 
Àn
 );

806 
	}
}

820 
afSètus_t
 
	$ZDP_Sim∂eDescMsg
–
zdoIncomögMsg_t
 *
öMsg
, 
byã
 
Sètus
,

821 
Sim∂eDes¸ùti⁄F‹m©_t
 *
pSim∂eDesc
 )

823 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

824 
uöt8
 
i
, 
Àn
;

826 i‡–
Sètus
 =
ZDP_SUCCESS
 && 
pSim∂eDesc
 )

829 
Àn
 = 1 + 2 + 1 + 8;

830 
Àn
 +(
pSim∂eDesc
->
AµNumInClu°îs
 +ÖSim∂eDesc->
AµNumOutClu°îs
Ë*  ( 
uöt16
 );

834 
Àn
 = 1 + 2 + 1;

836 i‡–
Àn
 >
ZDP_BUF_SZ
-1 )

838  
afSètus_MEM_FAIL
;

841 *
pBuf
++ = 
Sètus
;

843 *
pBuf
++ = 
	`LO_UINT16
–
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 );

844 *
pBuf
++ = 
	`HI_UINT16
–
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 );

846 i‡–
Àn
 > 4 )

848 *
pBuf
++ = 
Àn
 - 4;

850 *
pBuf
++ = 
pSim∂eDesc
->
EndPoöt
;

851 *
pBuf
++ = 
	`LO_UINT16
–
pSim∂eDesc
->
AµProfId
 );

852 *
pBuf
++ = 
	`HI_UINT16
–
pSim∂eDesc
->
AµProfId
 );

853 *
pBuf
++ = 
	`LO_UINT16
–
pSim∂eDesc
->
AµDevi˚Id
 );

854 *
pBuf
++ = 
	`HI_UINT16
–
pSim∂eDesc
->
AµDevi˚Id
 );

856 *
pBuf
++ = (
byã
)(
pSim∂eDesc
->
AµDevVî
 << 4);

858 *
pBuf
++ = 
pSim∂eDesc
->
AµNumInClu°îs
;

859 i‡–
pSim∂eDesc
->
AµNumInClu°îs
 )

861 
i
=0; i<
pSim∂eDesc
->
AµNumInClu°îs
; ++i)

863 *
pBuf
++ = 
	`LO_UINT16
–
pSim∂eDesc
->
pAµInClu°îLi°
[
i
] );

864 *
pBuf
++ = 
	`HI_UINT16
–
pSim∂eDesc
->
pAµInClu°îLi°
[
i
] );

868 *
pBuf
++ = 
pSim∂eDesc
->
AµNumOutClu°îs
;

869 i‡–
pSim∂eDesc
->
AµNumOutClu°îs
 )

871 
i
=0; i<
pSim∂eDesc
->
AµNumOutClu°îs
; ++i)

873 *
pBuf
++ = 
	`LO_UINT16
–
pSim∂eDesc
->
pAµOutClu°îLi°
[
i
] );

874 *
pBuf
++ = 
	`HI_UINT16
–
pSim∂eDesc
->
pAµOutClu°îLi°
[
i
] );

881 *
pBuf
 = 0;

884  
	`fûlAndSíd
–&(
öMsg
->
TønsSeq
), &(öMsg->
§cAddr
), 
Sim∂e_Desc_r•
, 
Àn
 );

885 
	}
}

905 
afSètus_t
 
	$ZDP_EPR•
–
uöt16
 
MsgTy≥
, 
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

906 
byã
 
Sètus
, 
uöt16
 
nwkAddr
, byã 
Cou¡
,

907 
uöt8
 *
pEPLi°
,

908 
byã
 
SecurôyE«bÀ
 )

910 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

911 
byã
 
Àn
 = 1 + 2 + 1;

912 
byã
 
txO±i⁄s
;

914 ()
SecurôyE«bÀ
;

916 i‡–
MsgTy≥
 =
M©ch_Desc_r•
 )

917 
txO±i⁄s
 = 
AF_MSG_ACK_REQUEST
;

919 
txO±i⁄s
 = 0;

921 *
pBuf
++ = 
Sètus
;

922 *
pBuf
++ = 
	`LO_UINT16
–
nwkAddr
 );

923 *
pBuf
++ = 
	`HI_UINT16
–
nwkAddr
 );

925 *
pBuf
++ = 
Cou¡
;

927 i‡–
Cou¡
 )

929 
Àn
 +
Cou¡
;

930 
	`oßl_mem˝y
–
pBuf
, 
pEPLi°
, 
Cou¡
 );

933 
	`FûlAndSídTxO±i⁄s
–&
TønsSeq
, 
d°Addr
, 
MsgTy≥
, 
Àn
, 
txO±i⁄s
 );

934 
	}
}

949 
ZSètus_t
 
	$ZDP_U£rDescR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

950 
uöt16
 
nwkAddrOfI¡îe°
, 
U£rDes¸ùt‹F‹m©_t
 *
u£rDesc
,

951 
byã
 
SecurôyE«bÀ
 )

953 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

954 
byã
 
Àn
 = 1 + 2 + 1;

956 ()
SecurôyE«bÀ
;

958 
Àn
 +
u£rDesc
->len;

960 *
pBuf
++ = 
ZSUCCESS
;

962 *
pBuf
++ = 
	`LO_UINT16
–
nwkAddrOfI¡îe°
 );

963 *
pBuf
++ = 
	`HI_UINT16
–
nwkAddrOfI¡îe°
 );

965 *
pBuf
++ = 
u£rDesc
->
Àn
;

966 
	`oßl_mem˝y
–
pBuf
, 
u£rDesc
->
desc
, u£rDesc->
Àn
 );

968  (
ZSètus_t
)
	`fûlAndSíd
–&
TønsSeq
, 
d°Addr
, 
U£r_Desc_r•
, 
Àn
 );

969 
	}
}

985 
ZSètus_t
 
	$ZDP_SîvîDiscR•
–
byã
 
å™sID
, 
zAddrTy≥_t
 *
d°Addr
, byã 
°©us
,

986 
uöt16
 
aoi
, uöt16 
£rvîMask
, 
byã
 
SecurôyE«bÀ
 )

988 c⁄° 
byã
 
Àn
 = 1 + 2;

989 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

990 
ZSètus_t
 
°©
;

993 ()
aoi
;

994 ()
SecurôyE«bÀ
;

996 *
pBuf
++ = 
°©us
;

998 *
pBuf
++ = 
	`LO_UINT16
–
£rvîMask
 );

999 *
pBuf
++ = 
	`HI_UINT16
–
£rvîMask
 );

1001 
ZDP_TxO±i⁄s
 = 
AF_MSG_ACK_REQUEST
;

1002 
°©
 = 
	`fûlAndSíd
–&
å™sID
, 
d°Addr
, 
Sîvî_Discovîy_r•
, 
Àn
 );

1003 
ZDP_TxO±i⁄s
 = 
AF_TX_OPTIONS_NONE
;

1005  ( 
°©
 );

1006 
	}
}

1025 
afSètus_t
 
	$ZDP_GíîicR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

1026 
byã
 
°©us
, 
uöt16
 
aoi
, uöt16 
r•ID
, byã 
SecurôyE«bÀ
 )

1028 
uöt8
 
Àn
;

1030 ()
SecurôyE«bÀ
;

1032 
ZDP_TmpBuf
[0] = 
°©us
;

1033 
ZDP_TmpBuf
[1] = 
	`LO_UINT16
–
aoi
 );

1034 
ZDP_TmpBuf
[2] = 
	`HI_UINT16
–
aoi
 );

1037 
ZDP_TmpBuf
[3] = 0;

1038 
Àn
 = 4;

1040  
	`fûlAndSíd
–&
TønsSeq
, 
d°Addr
, 
r•ID
, 
Àn
 );

1041 
	}
}

1071 
afSètus_t
 
	$ZDP_EndDevi˚BödReq
–
zAddrTy≥_t
 *
d°Addr
,

1072 
uöt16
 
LoˇlCo‹dö©‹
,

1073 
byã
 
ídPoöt
,

1074 
uöt16
 
ProfûeID
,

1075 
byã
 
NumInClu°îs
, 
cId_t
 *
InClu°îLi°
,

1076 
byã
 
NumOutClu°îs
, 
cId_t
 *
OutClu°îLi°
,

1077 
byã
 
SecurôyE«bÀ
 )

1079 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

1080 
uöt8
 
i
, 
Àn
;

1081 
uöt8
 *
õìAddr
;

1083 ()
SecurôyE«bÀ
;

1086 
Àn
 = 2 + 
Z_EXTADDR_LEN
 + 1 + 2 + 1 + 1;

1087 
Àn
 +(
NumInClu°îs
 + 
NumOutClu°îs
Ë*  ( 
uöt16
 );

1089 i‡–
Àn
 >
ZDP_BUF_SZ
-1 )

1091  
afSètus_MEM_FAIL
;

1094 i‡–
LoˇlCo‹dö©‹
 !
	`NLME_GëSh‹tAddr
() )

1096  
afSètus_INVALID_PARAMETER
;

1099 *
pBuf
++ = 
	`LO_UINT16
–
LoˇlCo‹dö©‹
 );

1100 *
pBuf
++ = 
	`HI_UINT16
–
LoˇlCo‹dö©‹
 );

1102 
õìAddr
 = 
	`NLME_GëExtAddr
();

1103 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
õìAddr
 );

1105 *
pBuf
++ = 
ídPoöt
;

1107 *
pBuf
++ = 
	`LO_UINT16
–
ProfûeID
 );

1108 *
pBuf
++ = 
	`HI_UINT16
–
ProfûeID
 );

1110 *
pBuf
++ = 
NumInClu°îs
;

1111  
i
 = 0; i < 
NumInClu°îs
; ++i )

1113 *
pBuf
++ = 
	`LO_UINT16
(
InClu°îLi°
[
i
]);

1114 *
pBuf
++ = 
	`HI_UINT16
(
InClu°îLi°
[
i
]);

1117 *
pBuf
++ = 
NumOutClu°îs
;

1118  
i
 = 0; i < 
NumOutClu°îs
; ++i )

1120 *
pBuf
++ = 
	`LO_UINT16
(
OutClu°îLi°
[
i
]);

1121 *
pBuf
++ = 
	`HI_UINT16
(
OutClu°îLi°
[
i
]);

1124  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
End_Devi˚_Böd_ªq
, 
Àn
 );

1125 
	}
}

1145 
afSètus_t
 
	$ZDP_BödUnbödReq
–
uöt16
 
BödOrUnböd
, 
zAddrTy≥_t
 *
d°Addr
,

1146 
uöt8
 *
Sour˚Addr
, 
byã
 
SrcEndPoöt
,

1147 
cId_t
 
Clu°îID
,

1148 
zAddrTy≥_t
 *
de°ö©i⁄Addr
, 
byã
 
D°EndPoöt
,

1149 
byã
 
SecurôyE«bÀ
 )

1151 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

1152 
byã
 
Àn
;

1154 ()
SecurôyE«bÀ
;

1157 
Àn
 = 
Z_EXTADDR_LEN
 + 1 + –
cId_t
 ) + –
uöt8
 );

1158 i‡–
de°ö©i⁄Addr
->
addrMode
 =
Addr64Bô
 )

1159 
Àn
 +
Z_EXTADDR_LEN
 + 1;

1160 i‡–
de°ö©i⁄Addr
->
addrMode
 =
AddrGroup
 )

1161 
Àn
 + ( 
uöt16
 );

1163 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
Sour˚Addr
 );

1164 *
pBuf
++ = 
SrcEndPoöt
;

1166 *
pBuf
++ = 
	`LO_UINT16
–
Clu°îID
 );

1168 *
pBuf
++ = 
	`HI_UINT16
–
Clu°îID
 );

1169 *
pBuf
++ = 
de°ö©i⁄Addr
->
addrMode
;

1170 i‡–
de°ö©i⁄Addr
->
addrMode
 =
Addr64Bô
 )

1172 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
de°ö©i⁄Addr
->
addr
.
extAddr
 );

1173 *
pBuf
 = 
D°EndPoöt
;

1175 i‡–
de°ö©i⁄Addr
->
addrMode
 =
AddrGroup
 )

1177 *
pBuf
++ = 
	`LO_UINT16
–
de°ö©i⁄Addr
->
addr
.
sh‹tAddr
 );

1178 *
pBuf
++ = 
	`HI_UINT16
–
de°ö©i⁄Addr
->
addr
.
sh‹tAddr
 );

1181 
	`FûlAndSídTxO±i⁄s
–&
ZDP_TønsID
, 
d°Addr
, 
BödOrUnböd
, 
Àn
, 
AF_MSG_ACK_REQUEST
 );

1182 
	}
}

1202 
afSètus_t
 
	$ZDP_MgmtNwkDiscReq
–
zAddrTy≥_t
 *
d°Addr
,

1203 
uöt32
 
SˇnCh™√ls
,

1204 
byã
 
SˇnDuøti⁄
,

1205 
byã
 
SèπIndex
,

1206 
byã
 
SecurôyE«bÀ
 )

1208 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

1209 
byã
 
Àn
 = –
uöt32
 )+1+1;

1211 ()
SecurôyE«bÀ
;

1213 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
SˇnCh™√ls
 );

1215 *
pBuf
++ = 
SˇnDuøti⁄
;

1216 *
pBuf
 = 
SèπIndex
;

1218  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_NWK_Disc_ªq
, 
Àn
 );

1219 
	}
}

1233 
afSètus_t
 
	$ZDP_MgmtDúe˘JoöReq
–
zAddrTy≥_t
 *
d°Addr
,

1234 
uöt8
 *
devi˚Addr
,

1235 
byã
 
ˇpInfo
,

1236 
byã
 
SecurôyE«bÀ
 )

1238 ()
SecurôyE«bÀ
;

1240 
	`oßl_˝yExtAddr
–
ZDP_TmpBuf
, 
devi˚Addr
 );

1241 
ZDP_TmpBuf
[
Z_EXTADDR_LEN
] = 
ˇpInfo
;

1243  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_Dúe˘_Joö_ªq
, (
Z_EXTADDR_LEN
 + 1) );

1244 
	}
}

1257 
afSètus_t
 
	$ZDP_MgmtPîmôJoöReq
–
zAddrTy≥_t
 *
d°Addr
, 
byã
 
duøti⁄
,

1258 
byã
 
TcSignifiˇn˚
, byã 
SecurôyE«bÀ
 )

1260 ()
SecurôyE«bÀ
;

1263 
ZDP_TmpBuf
[
ZDP_MGMT_PERMIT_JOIN_REQ_DURATION
] = 
duøti⁄
;

1264 
ZDP_TmpBuf
[
ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG
] = 
TcSignifiˇn˚
;

1267  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_Pîmô_Joö_ªq
,

1268 
ZDP_MGMT_PERMIT_JOIN_REQ_SIZE
 );

1269 
	}
}

1285 
afSètus_t
 
	$ZDP_MgmtLóveReq
–
zAddrTy≥_t
 *
d°Addr
, 
uöt8
 *
IEEEAddr
, uöt8 
RemoveChûdªn
,

1286 
uöt8
 
Rejoö
, uöt8 
SecurôyE«bÀ
 )

1289 ()
SecurôyE«bÀ
;

1291 
	`oßl_˝yExtAddr
–
ZDP_TmpBuf
, 
IEEEAddr
 );

1292 
ZDP_TmpBuf
[
Z_EXTADDR_LEN
] = 0;

1294 i‡–
RemoveChûdªn
 =
TRUE
 )

1296 
ZDP_TmpBuf
[
Z_EXTADDR_LEN
] |
ZDP_MGMT_LEAVE_REQ_RC
;

1298 i‡–
Rejoö
 =
TRUE
 )

1300 
ZDP_TmpBuf
[
Z_EXTADDR_LEN
] |
ZDP_MGMT_LEAVE_REQ_REJOIN
;

1303  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_Lóve_ªq
, (
Z_EXTADDR_LEN
 + 1) );

1304 
	}
}

1322 
afSètus_t
 
	$ZDP_MgmtNwkUpd©eReq
–
zAddrTy≥_t
 *
d°Addr
,

1323 
uöt32
 
Ch™√lMask
,

1324 
uöt8
 
SˇnDuøti⁄
,

1325 
uöt8
 
SˇnCou¡
,

1326 
uöt8
 
NwkUpd©eId
,

1327 
uöt16
 
NwkM™agîAddr
 )

1329 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

1330 
byã
 
Àn
 = –
uöt32
 ) + 1;

1332 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
Ch™√lMask
 );

1334 *
pBuf
++ = 
SˇnDuøti⁄
;

1336 i‡–
SˇnDuøti⁄
 <= 0x05 )

1339 
Àn
 +–
uöt8
 );

1341 *
pBuf
++ = 
SˇnCou¡
;

1343 i‡––
SˇnDuøti⁄
 == 0xFE ) || ( ScanDuration == 0xFF ) )

1346 
Àn
 +–
uöt8
 );

1348 *
pBuf
++ = 
NwkUpd©eId
;

1350 i‡–
SˇnDuøti⁄
 == 0xFF )

1352 
Àn
 +–
uöt16
 );

1354 *
pBuf
++ = 
	`LO_UINT16
–
NwkM™agîAddr
 );

1355 *
pBuf
++ = 
	`HI_UINT16
–
NwkM™agîAddr
 );

1359  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_NWK_Upd©e_ªq
, 
Àn
 );

1360 
	}
}

1385 
afSètus_t
 
	$ZDP_MgmtNwkDiscR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

1386 
byã
 
Sètus
,

1387 
byã
 
Nëw‹kCou¡
,

1388 
byã
 
SèπIndex
,

1389 
byã
 
Nëw‹kLi°Cou¡
,

1390 
√tw‹kDesc_t
 *
Nëw‹kLi°
,

1391 
byã
 
SecurôyE«bÀ
 )

1393 
uöt8
 *
buf
;

1394 
uöt8
 *
pBuf
;

1395 
byã
 
Àn
 = 1+1+1+1;

1396 
byã
 
idx
;

1398 ()
SecurôyE«bÀ
;

1400 
Àn
 +(
Nëw‹kLi°Cou¡
 * ( 
ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE
 - 2 ));

1402 
buf
 = 
	`oßl_mem_Æloc
–
Àn
+1 );

1403 i‡–
buf
 =
NULL
 )

1405  
afSètus_MEM_FAIL
;

1408 
pBuf
 = 
buf
+1;

1410 *
pBuf
++ = 
Sètus
;

1411 *
pBuf
++ = 
Nëw‹kCou¡
;

1412 *
pBuf
++ = 
SèπIndex
;

1413 *
pBuf
++ = 
Nëw‹kLi°Cou¡
;

1415  
idx
 = 0; idx < 
Nëw‹kLi°Cou¡
; idx++ )

1417 
	`oßl_˝yExtAddr
–
pBuf
, 
Nëw‹kLi°
->
exãndedPANID
);

1418 
pBuf
 +
Z_EXTADDR_LEN
;

1420 *
pBuf
++ = 
Nëw‹kLi°
->
logiˇlCh™√l
;

1421 *
pBuf
 = 
Nëw‹kLi°
->
°ackProfûe
;

1422 *
pBuf
++ |(
byã
)(
Nëw‹kLi°
->
vîsi⁄
 << 4);

1423 *
pBuf
 = 
BEACON_ORDER_NO_BEACONS
;

1424 *
pBuf
++ |(
uöt8
)(
BEACON_ORDER_NO_BEACONS
 << 4);

1426 i‡–
Nëw‹kLi°
->
cho£nRouãr
 !
INVALID_NODE_ADDR
 )

1428 *
pBuf
++ = 
TRUE
;

1432 *
pBuf
++ = 
FALSE
;

1435 
Nëw‹kLi°
 = Nëw‹kLi°->
√xtDesc
;

1438 
	`FûlAndSídBuf„r
–&
TønsSeq
, 
d°Addr
, 
Mgmt_NWK_Disc_r•
, 
Àn
, 
buf
 );

1439 
	}
}

1459 
ZSètus_t
 
	$ZDP_MgmtLqiR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

1460 
byã
 
Sètus
,

1461 
byã
 
Neighb‹LqiE¡rõs
,

1462 
byã
 
SèπIndex
,

1463 
byã
 
Neighb‹LqiCou¡
,

1464 
ZDP_MgmtLqiIãm_t
* 
Neighb‹Li°
,

1465 
byã
 
SecurôyE«bÀ
 )

1467 
ZDP_MgmtLqiIãm_t
* 
li°
 = 
Neighb‹Li°
;

1468 
uöt8
 *
buf
, *
pBuf
;

1469 
byã
 
Àn
, 
x
;

1471 ()
SecurôyE«bÀ
;

1473 i‡–
ZSuc˚ss
 !
Sètus
 )

1475 
ZDP_TmpBuf
[0] = 
Sètus
;

1476  
	`fûlAndSíd
–&
TønsSeq
, 
d°Addr
, 
Mgmt_Lqi_r•
, 1 );

1481 
Àn
 = (1 + 1 + 1 + 1Ë+ (
Neighb‹LqiCou¡
 * 
ZDP_MGMTLQI_EXTENDED_SIZE
);

1483 
buf
 = 
	`oßl_mem_Æloc
–
Àn
+1 );

1484 i‡–
buf
 =
NULL
 )

1486  
afSètus_MEM_FAIL
;

1489 
pBuf
 = 
buf
+1;

1491 *
pBuf
++ = 
Sètus
;

1492 *
pBuf
++ = 
Neighb‹LqiE¡rõs
;

1493 *
pBuf
++ = 
SèπIndex
;

1494 *
pBuf
++ = 
Neighb‹LqiCou¡
;

1496  
x
 = 0; x < 
Neighb‹LqiCou¡
; x++ )

1498 
	`oßl_˝yExtAddr
–
pBuf
, 
li°
->
extP™ID
);

1499 
pBuf
 +
Z_EXTADDR_LEN
;

1502 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
li°
->
extAddr
 );

1505 *
pBuf
++ = 
	`LO_UINT16
–
li°
->
nwkAddr
 );

1506 *
pBuf
++ = 
	`HI_UINT16
–
li°
->
nwkAddr
 );

1509 *
pBuf
 = 
li°
->
devTy≥
;

1512 *
pBuf
 |(
uöt8
)(
li°
->
rxOnIdÀ
 << 2);

1515 *
pBuf
++ |(
uöt8
)(
li°
->
ªœti⁄
 << 4);

1518 *
pBuf
++ = (
uöt8
)(
li°
->
≥rmô
);

1521 *
pBuf
++ = 
li°
->
dïth
;

1524 *
pBuf
++ = 
li°
->
lqi
;

1526 
li°
++;

1529 
	`FûlAndSídBuf„r
–&
TønsSeq
, 
d°Addr
, 
Mgmt_Lqi_r•
, 
Àn
, 
buf
 );

1530 
	}
}

1549 
ZSètus_t
 
	$ZDP_MgmtRtgR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

1550 
byã
 
Sètus
,

1551 
byã
 
RoutögTabÀE¡rõs
,

1552 
byã
 
SèπIndex
,

1553 
byã
 
RoutögLi°Cou¡
,

1554 
πgIãm_t
 *
RoutögTabÀLi°
,

1555 
byã
 
SecurôyE«bÀ
 )

1557 
uöt8
 *
buf
;

1558 
uöt8
 *
pBuf
;

1560 
byã
 
Àn
 = 1 + 1 + 1 + 1;

1561 
byã
 
x
;

1563 ()
SecurôyE«bÀ
;

1566 
Àn
 +(
RoutögLi°Cou¡
 * 
ZDP_ROUTINGENTRY_SIZE
);

1568 
buf
 = 
	`oßl_mem_Æloc
–()(
Àn
+1) );

1569 i‡–
buf
 =
NULL
 )

1571  
afSètus_MEM_FAIL
;

1574 
pBuf
 = 
buf
+1;

1576 *
pBuf
++ = 
Sètus
;

1577 *
pBuf
++ = 
RoutögTabÀE¡rõs
;

1578 *
pBuf
++ = 
SèπIndex
;

1579 *
pBuf
++ = 
RoutögLi°Cou¡
;

1581  
x
 = 0; x < 
RoutögLi°Cou¡
; x++ )

1583 *
pBuf
++ = 
	`LO_UINT16
–
RoutögTabÀLi°
->
d°Addªss
 );

1584 *
pBuf
++ = 
	`HI_UINT16
–
RoutögTabÀLi°
->
d°Addªss
 );

1585 *
pBuf
++ = 
RoutögTabÀLi°
->
°©us
;

1586 *
pBuf
++ = 
	`LO_UINT16
–
RoutögTabÀLi°
->
√xtH›Addªss
 );

1587 *
pBuf
++ = 
	`HI_UINT16
–
RoutögTabÀLi°
->
√xtH›Addªss
 );

1588 
RoutögTabÀLi°
++;

1591 
	`FûlAndSídBuf„r
–&
TønsSeq
, 
d°Addr
, 
Mgmt_Rtg_r•
, 
Àn
, 
buf
 );

1592 
	}
}

1611 
ZSètus_t
 
	$ZDP_MgmtBödR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

1612 
byã
 
Sètus
,

1613 
byã
 
BödögTabÀE¡rõs
,

1614 
byã
 
SèπIndex
,

1615 
byã
 
BödögTabÀLi°Cou¡
,

1616 
≠sBödögIãm_t
 *
BödögTabÀLi°
,

1617 
byã
 
SecurôyE«bÀ
 )

1619 
uöt8
 *
buf
;

1620 
uöt8
 *
pBuf
;

1621 
uöt8
 
maxLí
;

1622 
uöt8
 
Àn
;

1623 
uöt8
 
x
;

1624 
byã
 
extZdpBödE¡rySize
 = 
ZDP_BINDINGENTRY_SIZE
 + 1 + 1;

1625 
byã
 
sh‹tZdpBödE¡rySize
 = 
ZDP_BINDINGENTRY_SIZE
 + 1 + 1 + 2 - 8 - 1;

1627 ()
SecurôyE«bÀ
;

1630 
maxLí
 = 1 + 1 + 1 + 1;

1631 
maxLí
 +(
BödögTabÀLi°Cou¡
 * 
extZdpBödE¡rySize
 );

1632 
buf
 = 
	`oßl_mem_Æloc
–
maxLí
 + 1 );

1634 i‡–
buf
 =
NULL
 )

1636  
afSètus_MEM_FAIL
;

1639 
pBuf
 = 
buf
+1;

1641 *
pBuf
++ = 
Sètus
;

1642 *
pBuf
++ = 
BödögTabÀE¡rõs
;

1643 *
pBuf
++ = 
SèπIndex
;

1644 *
pBuf
++ = 
BödögTabÀLi°Cou¡
;

1651 
Àn
 = 1 + 1 + 1 + 1;

1652  
x
 = 0; x < 
BödögTabÀLi°Cou¡
; x++ )

1654 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
BödögTabÀLi°
->
§cAddr
 );

1655 *
pBuf
++ = 
BödögTabÀLi°
->
§cEP
;

1658 *
pBuf
++ = 
	`LO_UINT16
–
BödögTabÀLi°
->
˛u°îID
 );

1659 *
pBuf
++ = 
	`HI_UINT16
–
BödögTabÀLi°
->
˛u°îID
 );

1661 *
pBuf
++ = 
BödögTabÀLi°
->
d°Addr
.
addrMode
;

1662 i‡–
BödögTabÀLi°
->
d°Addr
.
addrMode
 =
Addr64Bô
 )

1664 
Àn
 +
extZdpBödE¡rySize
;

1665 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
BödögTabÀLi°
->
d°Addr
.
addr
.
extAddr
 );

1666 *
pBuf
++ = 
BödögTabÀLi°
->
d°EP
;

1670 
Àn
 +
sh‹tZdpBödE¡rySize
;

1671 *
pBuf
++ = 
	`LO_UINT16
–
BödögTabÀLi°
->
d°Addr
.
addr
.
sh‹tAddr
 );

1672 *
pBuf
++ = 
	`HI_UINT16
–
BödögTabÀLi°
->
d°Addr
.
addr
.
sh‹tAddr
 );

1674 
BödögTabÀLi°
++;

1677 
	`FûlAndSídBuf„r
–&
TønsSeq
, 
d°Addr
, 
Mgmt_Böd_r•
, 
Àn
, 
buf
 );

1678 
	}
}

1699 
afSètus_t
 
	$ZDP_MgmtNwkUpd©eNŸify
–
uöt8
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

1700 
uöt8
 
°©us
, 
uöt32
 
sˇ¬edCh™√ls
,

1701 
uöt16
 
tŸÆTønsmissi⁄s
, uöt16 
å™smissi⁄Faûuªs
,

1702 
uöt8
 
li°Cou¡
, uöt8 *
íîgyVÆues
, uöt8 
txO±i⁄s
,

1703 
uöt8
 
£curôyE«bÀ
 )

1705 
uöt8
 *
buf
;

1706 
uöt8
 *
pBuf
;

1707 
uöt8
 
Àn
;

1709 ()
£curôyE«bÀ
;

1712 
Àn
 = 1 + 4 + 2 + 2 + 1 + 
li°Cou¡
;

1714 
buf
 = 
	`oßl_mem_Æloc
–
Àn
+1 );

1715 i‡–
buf
 =
NULL
 )

1717  
afSètus_MEM_FAIL
;

1720 
pBuf
 = 
buf
+1;

1722 *
pBuf
++ = 
°©us
;

1724 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
sˇ¬edCh™√ls
 );

1726 *
pBuf
++ = 
	`LO_UINT16
–
tŸÆTønsmissi⁄s
 );

1727 *
pBuf
++ = 
	`HI_UINT16
–
tŸÆTønsmissi⁄s
 );

1729 *
pBuf
++ = 
	`LO_UINT16
–
å™smissi⁄Faûuªs
 );

1730 *
pBuf
++ = 
	`HI_UINT16
–
å™smissi⁄Faûuªs
 );

1732 *
pBuf
++ = 
li°Cou¡
;

1734 i‡–
li°Cou¡
 > 0 )

1735 
	`oßl_mem˝y
–
pBuf
, 
íîgyVÆues
, 
li°Cou¡
 );

1737 
	`FûlAndSídBuf„rTxO±i⁄s
–&
TønsSeq
, 
d°Addr
, 
Mgmt_NWK_Upd©e_nŸify
, 
Àn
, 
buf
, 
txO±i⁄s
 );

1738 
	}
}

1758 
ZSètus_t
 
	$ZDO_Regi°îF‹ZDOMsg
–
uöt8
 
èskID
, 
uöt16
 
˛u°îID
 )

1760 
ZDO_MsgCB_t
 *
pLi°
;

1761 
ZDO_MsgCB_t
 *
pLa°
;

1762 
ZDO_MsgCB_t
 *
pNew
;

1765 
pLi°
 = 
pLa°
 = 
zdoMsgCBs
;

1766  
pLi°
 )

1768 i‡–
pLi°
->
èskID
 =èskID &&ÖLi°->
˛u°îID
 == clusterID )

1769  ( 
ZSuc˚ss
 );

1770 
pLa°
 = 
pLi°
;

1771 
pLi°
 = (
ZDO_MsgCB_t
 *ÌLi°->
√xt
;

1775 
pNew
 = (
ZDO_MsgCB_t
 *)
	`oßl_mem_Æloc
(  ( ZDO_MsgCB_t ) );

1776 i‡–
pNew
 )

1778 
pNew
->
èskID
 =ÅaskID;

1779 
pNew
->
˛u°îID
 = clusterID;

1780 
pNew
->
√xt
 = 
NULL
;

1781 i‡–
zdoMsgCBs
 )

1783 
pLa°
->
√xt
 = 
pNew
;

1786 
zdoMsgCBs
 = 
pNew
;

1787  ( 
ZSuc˚ss
 );

1790  ( 
ZMemEº‹
 );

1791 
	}
}

1804 
ZSètus_t
 
	$ZDO_RemoveRegi°îedCB
–
uöt8
 
èskID
, 
uöt16
 
˛u°îID
 )

1806 
ZDO_MsgCB_t
 *
pLi°
;

1807 
ZDO_MsgCB_t
 *
pLa°
 = 
NULL
;

1809 
pLi°
 = 
zdoMsgCBs
;

1810  
pLi°
 )

1812 i‡–
pLi°
->
èskID
 =èskID &&ÖLi°->
˛u°îID
 == clusterID )

1814 i‡–
pLa°
 )

1817 
pLa°
->
√xt
 = 
pLi°
->next;

1819 i‡–
pLi°
->
√xt
 )

1822 
zdoMsgCBs
 = 
pLi°
->
√xt
;

1827 
zdoMsgCBs
 = (
ZDO_MsgCB_t
 *)
NULL
;

1829 
	`oßl_mem_‰ì
–
pLi°
 );

1830  ( 
ZSuc˚ss
 );

1832 
pLa°
 = 
pLi°
;

1833 
pLi°
 =ÖLi°->
√xt
;

1836  ( 
ZFaûuª
 );

1837 
	}
}

1849 
uöt8
 
	$ZDO_SídMsgCBs
–
zdoIncomögMsg_t
 *
öMsg
 )

1851 
uöt8
 
ªt
 = 
FALSE
;

1852 
ZDO_MsgCB_t
 *
pLi°
 = 
zdoMsgCBs
;

1853  
pLi°
 )

1855 i‡–
pLi°
->
˛u°îID
 =
öMsg
->clusterID )

1857 
zdoIncomögMsg_t
 *
msgPå
;

1860 
msgPå
 = (
zdoIncomögMsg_t
 *)
	`oßl_msg_Æloˇã
––zdoIncomögMsg_àË+ 
öMsg
->
asduLí
 );

1861 i‡–
msgPå
 )

1864 
	`oßl_mem˝y
–
msgPå
, 
öMsg
, –
zdoIncomögMsg_t
 ));

1866 i‡–
öMsg
->
asduLí
 )

1868 
msgPå
->
asdu
 = (
byã
*)(((byã*)msgPåË+ –
zdoIncomögMsg_t
 ));

1869 
	`oßl_mem˝y
–
msgPå
->
asdu
, 
öMsg
->asdu, inMsg->
asduLí
 );

1872 
msgPå
->
hdr
.
evít
 = 
ZDO_CB_MSG
;

1873 
	`oßl_msg_£nd
–
pLi°
->
èskID
, (
uöt8
 *)
msgPå
 );

1874 
ªt
 = 
TRUE
;

1877 
pLi°
 = (
ZDO_MsgCB_t
 *ÌLi°->
√xt
;

1879  ( 
ªt
 );

1880 
	}
}

1896 
	$ZDP_IncomögD©a
–
afIncomögMSGPackë_t
 *
pD©a
 )

1898 
uöt8
 
x
 = 0;

1899 
uöt8
 
h™dÀd
;

1900 
zdoIncomögMsg_t
 
öMsg
;

1902 
öMsg
.
§cAddr
.
addrMode
 = 
Addr16Bô
;

1903 
öMsg
.
§cAddr
.
addr
.
sh‹tAddr
 = 
pD©a
->srcAddr.addr.shortAddr;

1904 
öMsg
.
wasBrﬂdˇ°
 = 
pD©a
->wasBroadcast;

1905 
öMsg
.
˛u°îID
 = 
pD©a
->
˛u°îId
;

1906 
öMsg
.
SecurôyU£
 = 
pD©a
->SecurityUse;

1908 
öMsg
.
asduLí
 = 
pD©a
->
cmd
.
D©aLígth
-1;

1909 
öMsg
.
asdu
 = 
pD©a
->
cmd
.
D©a
+1;

1910 
öMsg
.
TønsSeq
 = 
pD©a
->
cmd
.
D©a
[0];

1911 
öMsg
.
macDe°Addr
 = 
pD©a
->macDestAddr;

1913 
h™dÀd
 = 
	`ZDO_SídMsgCBs
–&
öMsg
 );

1915 #i‡(
deföed
 
MT_ZDO_CB_FUNC
)

1916 #i‡!
deföed
 
MT_TASK


1917 i‡(
zgZdoDúe˘CB
)

1920 
	`MT_ZdoDúe˘CB
–
pD©a
, &
öMsg
 );

1924  
zdpMsgProcs
[
x
].
˛u°îID
 != 0xFFFF )

1926 i‡–
zdpMsgProcs
[
x
].
˛u°îID
 =
öMsg
.clusterID )

1928 
zdpMsgProcs
[
x
].
	`pFn
–&
öMsg
 );

1931 
x
++;

1935 i‡–!
h™dÀd
 )

1936 
	`ZDAµ_InMsgCB
–&
öMsg
 );

1937 
	}
}

	@Components/stack/zdo/ZDProfile.h

40 #i‚de‡
ZDPROFILE_H


41 
	#ZDPROFILE_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"NLMEDE.h
"

53 
	~"AF.h
"

54 
	~"ZDC⁄fig.h
"

60 
	#ZDO_EP
 0

61 
	#ZDO_PROFILE_ID
 0

	)

64 
	#ZDP_ADDR_REQTYPE_SINGLE
 0

	)

65 
	#ZDP_ADDR_REQTYPE_EXTENDED
 1

	)

68 
	#ZDP_SUCCESS
 0x00

69 
	#ZDP_INVALID_REQTYPE
 0x80

70 
	#ZDP_DEVICE_NOT_FOUND
 0x81

71 
	#ZDP_INVALID_EP
 0x82

72 
	#ZDP_NOT_ACTIVE
 0x83

73 
	#ZDP_NOT_SUPPORTED
 0x84

74 
	#ZDP_TIMEOUT
 0x85

75 
	#ZDP_NO_MATCH
 0x86

76 
	#ZDP_NO_ENTRY
 0x88

77 
	#ZDP_NO_DESCRIPTOR
 0x89

78 
	#ZDP_INSUFFICIENT_SPACE
 0x8a

79 
	#ZDP_NOT_PERMITTED
 0x8b

80 
	#ZDP_TABLE_FULL
 0x8c

81 
	#ZDP_NOT_AUTHORIZED
 0x8d

82 
	#ZDP_BINDING_TABLE_FULL
 0x8e

83 

	)

84 
	#ZDP_NETWORK_DISCRIPTOR_SIZE
 8

	)

85 
	#ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE
 14

	)

86 
	#ZDP_RTG_DISCRIPTOR_SIZE
 5

	)

87 
	#ZDP_BIND_DISCRIPTOR_SIZE
 19

	)

90 
	#ZDP_MGMT_PERMIT_JOIN_REQ_DURATION
 0

	)

91 
	#ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG
 1

	)

92 
	#ZDP_MGMT_PERMIT_JOIN_REQ_SIZE
 2

	)

95 
	#ZDP_MGMT_LEAVE_REQ_REJOIN
 1 << 7

	)

96 
	#ZDP_MGMT_LEAVE_REQ_RC
 1 << 6

97 

	)

99 
	#ZDP_MGMT_DT_COORD
 0x0

	)

100 
	#ZDP_MGMT_DT_ROUTER
 0x1

	)

101 
	#ZDP_MGMT_DT_ENDDEV
 0x2

	)

104 
	#ZDP_MGMT_REL_PARENT
 0x0

	)

105 
	#ZDP_MGMT_REL_CHILD
 0x1

	)

106 
	#ZDP_MGMT_REL_SIBLING
 0x2

	)

107 
	#ZDP_MGMT_REL_UNKNOWN
 0x3

	)

110 
	#ZDP_MGMT_BOOL_UNKNOWN
 0x02

	)

117 
	#ZDO_RESPONSE_BIT_V1_0
 ((
uöt8
)0x80)

	)

118 
	#ZDO_RESPONSE_BIT
 ((
uöt16
)0x8000)

	)

120 
	#NWK_addr_ªq
 ((
uöt16
)0x0000)

	)

121 
	#IEEE_addr_ªq
 ((
uöt16
)0x0001)

	)

122 
	#Node_Desc_ªq
 ((
uöt16
)0x0002)

	)

123 
	#Powî_Desc_ªq
 ((
uöt16
)0x0003)

	)

124 
	#Sim∂e_Desc_ªq
 ((
uöt16
)0x0004)

	)

125 
	#A˘ive_EP_ªq
 ((
uöt16
)0x0005)

	)

126 
	#M©ch_Desc_ªq
 ((
uöt16
)0x0006)

	)

127 
	#NWK_addr_r•
 (
NWK_addr_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

128 
	#IEEE_addr_r•
 (
IEEE_addr_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

129 
	#Node_Desc_r•
 (
Node_Desc_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

130 
	#Powî_Desc_r•
 (
Powî_Desc_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

131 
	#Sim∂e_Desc_r•
 (
Sim∂e_Desc_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

132 
	#A˘ive_EP_r•
 (
A˘ive_EP_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

133 
	#M©ch_Desc_r•
 (
M©ch_Desc_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

135 
	#Com∂ex_Desc_ªq
 ((
uöt16
)0x0010)

	)

136 
	#U£r_Desc_ªq
 ((
uöt16
)0x0011)

	)

137 
	#Discovîy_Cache_ªq
 ((
uöt16
)0x0012)

	)

138 
	#Devi˚_™n˚
 ((
uöt16
)0x0013)

	)

139 
	#U£r_Desc_£t
 ((
uöt16
)0x0014)

	)

140 
	#Sîvî_Discovîy_ªq
 ((
uöt16
)0x0015)

	)

141 
	#Com∂ex_Desc_r•
 (
Com∂ex_Desc_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

142 
	#U£r_Desc_r•
 (
U£r_Desc_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

143 
	#Discovîy_Cache_r•
 (
Discovîy_Cache_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

144 
	#U£r_Desc_c⁄f
 (
U£r_Desc_£t
 | 
ZDO_RESPONSE_BIT
)

	)

145 
	#Sîvî_Discovîy_r•
 (
Sîvî_Discovîy_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

147 
	#End_Devi˚_Böd_ªq
 ((
uöt16
)0x0020)

	)

148 
	#Böd_ªq
 ((
uöt16
)0x0021)

	)

149 
	#Unböd_ªq
 ((
uöt16
)0x0022)

	)

150 
	#Böd_r•
 (
Böd_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

151 
	#End_Devi˚_Böd_r•
 (
End_Devi˚_Böd_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

152 
	#Unböd_r•
 (
Unböd_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

154 
	#Mgmt_NWK_Disc_ªq
 ((
uöt16
)0x0030)

	)

155 
	#Mgmt_Lqi_ªq
 ((
uöt16
)0x0031)

	)

156 
	#Mgmt_Rtg_ªq
 ((
uöt16
)0x0032)

	)

157 
	#Mgmt_Böd_ªq
 ((
uöt16
)0x0033)

	)

158 
	#Mgmt_Lóve_ªq
 ((
uöt16
)0x0034)

	)

159 
	#Mgmt_Dúe˘_Joö_ªq
 ((
uöt16
)0x0035)

	)

160 
	#Mgmt_Pîmô_Joö_ªq
 ((
uöt16
)0x0036)

	)

161 
	#Mgmt_NWK_Upd©e_ªq
 ((
uöt16
)0x0038)

	)

162 
	#Mgmt_NWK_Disc_r•
 (
Mgmt_NWK_Disc_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

163 
	#Mgmt_Lqi_r•
 (
Mgmt_Lqi_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

164 
	#Mgmt_Rtg_r•
 (
Mgmt_Rtg_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

165 
	#Mgmt_Böd_r•
 (
Mgmt_Böd_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

166 
	#Mgmt_Lóve_r•
 (
Mgmt_Lóve_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

167 
	#Mgmt_Dúe˘_Joö_r•
 (
Mgmt_Dúe˘_Joö_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

168 
	#Mgmt_Pîmô_Joö_r•
 (
Mgmt_Pîmô_Joö_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

169 
	#Mgmt_NWK_Upd©e_nŸify
 (
Mgmt_NWK_Upd©e_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

175 
	#ZDP_BINDINGENTRY_SIZE
 19

	)

179 
oßl_evít_hdr_t
 
hdr
;

180 
zAddrTy≥_t
 
§cAddr
;

181 
uöt8
 
wasBrﬂdˇ°
;

182 
cId_t
 
˛u°îID
;

183 
uöt8
 
SecurôyU£
;

184 
uöt8
 
TønsSeq
;

185 
uöt8
 
asduLí
;

186 
uöt16
 
macDe°Addr
;

187 
uöt8
 *
asdu
;

188 } 
	tzdoIncomögMsg_t
;

193 
uöt8
 
exãndedPANID
[
Z_EXTADDR_LEN
];

194 
uöt16
 
PANId
;

195 
uöt8
 
logiˇlCh™√l
;

196 
uöt8
 
°ackProfûe
;

197 
uöt8
 
vîsi⁄
;

198 
uöt8
 
bóc⁄Ordî
;

199 
uöt8
 
su≥rFømeOrdî
;

200 
uöt8
 
≥rmôJoöög
;

201 } 
	tmgmtNwkDiscIãm_t
;

206 
uöt16
 
nwkAddr
;

207 
uöt16
 
PANId
;

208 
uöt8
 
extPANId
[
Z_EXTADDR_LEN
];

209 
uöt8
 
txQuÆôy
;

210 
uöt8
 
rxLqi
;

211 } 
	t√ighb‹LqiIãm_t
;

212 
	#ZDP_NEIGHBORLQI_SIZE
 12

	)

217 
uöt16
 
∑nID
;

218 
uöt8
 
extP™ID
[
Z_EXTADDR_LEN
];

219 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

220 
uöt16
 
nwkAddr
;

221 
uöt8
 
devTy≥
;

222 
uöt8
 
rxOnIdÀ
;

223 
uöt8
 
ªœti⁄
;

224 
uöt8
 
≥rmô
;

225 
uöt8
 
dïth
;

226 
uöt8
 
lqi
;

227 } 
	tZDP_MgmtLqiIãm_t
;

229 
	#ZDP_MGMTLQI_SIZE
 15

	)

230 
	#ZDP_MGMTLQI_EXTENDED_SIZE
 22

231 

	)

236 
uöt16
 
d°Addªss
;

237 
uöt16
 
√xtH›Addªss
;

238 
uöt8
 
expúyTime
;

239 
uöt8
 
°©us
;

240 
uöt8
 
›ti⁄s
;

241 } 
	tπgIãm_t
;

243 
	#ZDP_ROUTINGENTRY_SIZE
 5

	)

247 
uöt8
 
TønsSeq
;

248 
byã
 
SecurôyU£
;

249 
uöt16
 
§cAddr
;

250 
uöt16
 
loˇlCo‹dö©‹
;

251 
uöt8
 
õìAddr
[
Z_EXTADDR_LEN
];

252 
uöt8
 
ídpoöt
;

253 
uöt16
 
¥ofûeID
;

254 
uöt8
 
numInClu°îs
;

255 
uöt16
 *
öClu°îs
;

256 
uöt8
 
numOutClu°îs
;

257 
uöt16
 *
outClu°îs
;

258 } 
	tZDEndDevi˚Böd_t
;

264 
byã
 
ZDP_TønsID
;

265 
byã
 
ZDP_TxO±i⁄s
;

274 
afSètus_t
 
ZDP_SídD©a
–
uöt8
 *
å™sSeq
, 
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
cmd
, 
byã
 
Àn
,

275 
uöt8
 *
buf
, 
byã
 
SecurôyE«bÀ
 );

286 
	#ZDP_NodeDescReq
–
d°Addr
, 
NWKAddrOfI¡îe°
, 
SecurôyE«bÀ
 ) \

287 
	`ZDP_NWKAddrOfI¡îe°Req
–
d°Addr
, \

288 
NWKAddrOfI¡îe°
, 
Node_Desc_ªq
, 
SecurôyE«bÀ
 )

	)

299 
	#ZDP_PowîDescReq
–
d°Addr
, 
NWKAddrOfI¡îe°
, 
SecurôyE«bÀ
 ) \

300 
	`ZDP_NWKAddrOfI¡îe°Req
–
d°Addr
, \

301 
NWKAddrOfI¡îe°
, 
Powî_Desc_ªq
, 
SecurôyE«bÀ
 )

	)

312 
	#ZDP_A˘iveEPReq
–
d°Addr
, 
NWKAddrOfI¡îe°
, 
SecurôyE«bÀ
 ) \

313 
	`ZDP_NWKAddrOfI¡îe°Req
–
d°Addr
, \

314 
NWKAddrOfI¡îe°
, 
A˘ive_EP_ªq
, 
SecurôyE«bÀ
 )

	)

325 
	#ZDP_Com∂exDescReq
–
d°Addr
, 
NWKAddrOfI¡îe°
, 
SecurôyE«bÀ
 ) \

326 
	`ZDP_NWKAddrOfI¡îe°Req
–
d°Addr
, \

327 
NWKAddrOfI¡îe°
, 
Com∂ex_Desc_ªq
, 
SecurôyE«bÀ
 )

	)

338 
	#ZDP_U£rDescReq
–
d°Addr
, 
NWKAddrOfI¡îe°
, 
SecurôyE«bÀ
 ) \

339 
	`ZDP_NWKAddrOfI¡îe°Req
–
d°Addr
, \

340 
NWKAddrOfI¡îe°
, 
U£r_Desc_ªq
, 
SecurôyE«bÀ
 )

	)

355 
	#ZDP_BödReq
–
d°Addr
, 
Sour˚Addr
, 
SrcEP
, \

356 
Clu°îID
, 
De°ö©i⁄Addr
, 
D°EP
, 
SecurôyE«bÀ
 ) \

357 
	`ZDP_BödUnbödReq
–
Böd_ªq
, 
d°Addr
, \

358 
Sour˚Addr
, 
SrcEP
, 
Clu°îID
, \

359 
De°ö©i⁄Addr
, 
D°EP
, 
SecurôyE«bÀ
 )

	)

374 
	#ZDP_UnbödReq
–
d°Addr
, 
Sour˚Addr
, 
SrcEP
, \

375 
Clu°îID
, 
De°ö©i⁄Addr
, 
D°EP
, 
SecurôyE«bÀ
 ) \

376 
	`ZDP_BödUnbödReq
–
Unböd_ªq
, 
d°Addr
, \

377 
Sour˚Addr
, 
SrcEP
, 
Clu°îID
, \

378 
De°ö©i⁄Addr
, 
D°EP
, 
SecurôyE«bÀ
 )

	)

388 
	#ZDP_MgmtLqiReq
–
d°Addr
, 
SèπIndex
, 
SecurôyE«bÀ
 ) \

389 
	`ZDP_SídD©a
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_Lqi_ªq
, 1, &
SèπIndex
, 
SecurôyE«bÀ
 )

	)

399 
	#ZDP_MgmtRtgReq
–
d°Addr
, 
SèπIndex
, 
SecurôyE«bÀ
 ) \

400 
	`ZDP_SídD©a
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_Rtg_ªq
, 1, &
SèπIndex
, 
SecurôyE«bÀ
 )

	)

410 
	#ZDP_MgmtBödReq
–
d°Addr
, 
SèπIndex
, 
SecurôyE«bÀ
 ) \

411 
	`ZDP_SídD©a
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_Böd_ªq
, 1, &
SèπIndex
, 
SecurôyE«bÀ
 )

	)

413 #ifde‡
REMOVE_BY_LAF


417 
	#ZDP_NWKAddrR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
IEEEAddrRemŸeDev
, 
ReqTy≥
, 
nwkAddr
, 
NumAssocDev
, \

418 
SèπIndex
, 
NWKAddrAssocDevLi°
, 
SecurôyE«bÀ
 ) \

419 
	`ZDP_AddrR•
–
NWK_addr_r•
, 
TønsSeq
, 
d°Addr
, 
Sètus
, \

420 
IEEEAddrRemŸeDev
, 
ReqTy≥
, 
nwkAddr
, 
NumAssocDev
, 
SèπIndex
, \

421 
NWKAddrAssocDevLi°
, 
SecurôyE«bÀ
 )

	)

426 
	#ZDP_IEEEAddrR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
IEEEAddrRemŸeDev
, 
ReqTy≥
, 
nwkAddr
, 
NumAssocDev
, \

427 
SèπIndex
, 
NWKAddrAssocDevLi°
, 
SecurôyE«bÀ
 ) \

428 
	`ZDP_AddrR•
–
IEEE_addr_r•
, 
TønsSeq
, 
d°Addr
, 
Sètus
, \

429 
IEEEAddrRemŸeDev
, 
ReqTy≥
, 
nwkAddr
, 
NumAssocDev
, 
SèπIndex
, \

430 
NWKAddrAssocDevLi°
, 
SecurôyE«bÀ
 )

	)

435 
	#ZDP_A˘iveEPR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
nwkAddr
, 
Cou¡
, \

436 
pEPLi°
, 
SecurôyE«bÀ
 ) \

437 
	`ZDP_EPR•
–
A˘ive_EP_r•
, 
TønsSeq
, 
d°Addr
, 
Sètus
, \

438 
nwkAddr
, 
Cou¡
, 
pEPLi°
, 
SecurôyE«bÀ
 )

	)

443 
	#ZDP_M©chDescR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
nwkAddr
, 
Cou¡
, \

444 
pEPLi°
, 
SecurôyE«bÀ
 ) \

445 
	`ZDP_EPR•
–
M©ch_Desc_r•
, 
TønsSeq
, 
d°Addr
, 
Sètus
, \

446 
nwkAddr
, 
Cou¡
, 
pEPLi°
, 
SecurôyE«bÀ
 )

	)

451 
	#ZDP_Com∂exDescR•
–
d°Addr
, 
SecurôyE«bÀ
 ) \

452 
	`ZDP_GíîicR•
–
d°Addr
, 
Com∂ex_Desc_r•
, 
SecurôyE«bÀ
 )

	)

457 
	#ZDP_U£rDescC⁄f
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
SecurôyE«bÀ
 ) \

458 
	`ZDP_SídD©a
–&
TønsSeq
, 
d°Addr
, 
U£r_Desc_c⁄f
, 1, &
Sètus
, 
SecurôyE«bÀ
 )

	)

463 
	#ZDP_EndDevi˚BödR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
SecurôyE«bÀ
 ) \

464 
	`ZDP_SídD©a
–&
TønsSeq
, 
d°Addr
, 
End_Devi˚_Böd_r•
, 1, &
Sètus
, 
SecurôyE«bÀ
 )

	)

469 
	#ZDP_BödR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
SecurôyE«bÀ
 ) \

470 
	`ZDP_SídD©a
–&
TønsSeq
, 
d°Addr
, 
Böd_r•
, 1, &
Sètus
, 
SecurôyE«bÀ
 )

	)

475 
	#ZDP_UnbödR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
SecurôyE«bÀ
 ) \

476 
	`ZDP_SídD©a
–&
TønsSeq
, 
d°Addr
, 
Unböd_r•
, 1, &
Sètus
, 
SecurôyE«bÀ
 )

	)

481 
	#ZDP_MgmtLóveR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
SecurôyE«bÀ
 ) \

482 
	`ZDP_SídD©a
–&
TønsSeq
, 
d°Addr
, 
Mgmt_Lóve_r•
, 1, &
Sètus
, 
SecurôyE«bÀ
 )

	)

487 
	#ZDP_MgmtPîmôJoöR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
SecurôyE«bÀ
 ) \

488 
	`ZDP_SídD©a
–&
TønsSeq
, 
d°Addr
, 
Mgmt_Pîmô_Joö_r•
, 1, &
Sètus
, 
SecurôyE«bÀ
 )

	)

493 
	#ZDP_MgmtDúe˘JoöR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
SecurôyE«bÀ
 ) \

494 
	`ZDP_SídD©a
–&
TønsSeq
, 
d°Addr
, 
Mgmt_Dúe˘_Joö_r•
, 1, &
Sètus
, 
SecurôyE«bÀ
 )

	)

503 
afSètus_t
 
ZDP_NWKAddrOfI¡îe°Req
–
zAddrTy≥_t
 *
d°Addr
,

504 
uöt16
 
nwkAddr
, 
byã
 
cmd
, byã 
SecurôyE«bÀ
 );

515 
afSètus_t
 
ZDP_NwkAddrReq
–
uöt8
 *
IEEEAddªss
, 
byã
 
ReqTy≥
,

516 
byã
 
SèπIndex
, byã 
SecurôyE«bÀ
 );

528 
afSètus_t
 
ZDP_IEEEAddrReq
–
uöt16
 
sh‹tAddr
, 
byã
 
ReqTy≥
,

529 
byã
 
SèπIndex
, byã 
SecurôyE«bÀ
 );

545 
afSètus_t
 
ZDP_M©chDescReq
–
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
nwkAddr
,

546 
uöt16
 
ProfûeID
,

547 
byã
 
NumInClu°îs
, 
uöt16
 *
InClu°îLi°
,

548 
byã
 
NumOutClu°îs
, 
uöt16
 *
OutClu°îLi°
,

549 
byã
 
SecurôyE«bÀ
 );

561 
afSètus_t
 
ZDP_Sim∂eDescReq
–
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
nwkAddr
,

562 
byã
 
ï
, byã 
SecurôyE«bÀ
 );

575 
afSètus_t
 
ZDP_U£rDescSë
–
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
nwkAddr
,

576 
U£rDes¸ùt‹F‹m©_t
 *
U£rDes¸ùt‹
,

577 
byã
 
SecurôyE«bÀ
 );

582 
afSètus_t
 
ZDP_SîvîDiscReq
–
uöt16
 
£rvîMask
, 
byã
 
SecurôyE«bÀ
 );

593 
afSètus_t
 
ZDP_Devi˚A¬˚
–
uöt16
 
nwkAddr
, 
uöt8
 *
IEEEAddr
,

594 
byã
 
ˇ∑bûôõs
, byã 
SecurôyE«bÀ
 );

611 
afSètus_t
 
ZDP_EndDevi˚BödReq
–
zAddrTy≥_t
 *
d°Addr
,

612 
uöt16
 
LoˇlCo‹dö©‹
,

613 
byã
 
ï
,

614 
uöt16
 
ProfûeID
,

615 
byã
 
NumInClu°îs
, 
uöt16
 *
InClu°îLi°
,

616 
byã
 
NumOutClu°îs
, 
uöt16
 *
OutClu°îLi°
,

617 
byã
 
SecurôyE«bÀ
 );

622 
afSètus_t
 
ZDP_BödUnbödReq
–
uöt16
 
BödOrUnböd
, 
zAddrTy≥_t
 *
d°Addr
,

623 
uöt8
 *
Sour˚Addr
, 
byã
 
SrcEP
,

624 
cId_t
 
Clu°îID
,

625 
zAddrTy≥_t
 *
De°ö©i⁄Addr
, 
byã
 
D°EP
,

626 
byã
 
SecurôyE«bÀ
 );

637 
afSètus_t
 
ZDP_MgmtNwkDiscReq
–
zAddrTy≥_t
 *
d°Addr
,

638 
uöt32
 
SˇnCh™√ls
,

639 
byã
 
SˇnDuøti⁄
,

640 
byã
 
SèπIndex
,

641 
byã
 
SecurôyE«bÀ
 );

652 
afSètus_t
 
ZDP_MgmtDúe˘JoöReq
–
zAddrTy≥_t
 *
d°Addr
,

653 
uöt8
 *
devi˚Addr
,

654 
byã
 
ˇpInfo
,

655 
byã
 
SecurôyE«bÀ
 );

667 
afSètus_t
 
ZDP_MgmtLóveReq
–
zAddrTy≥_t
 *
d°Addr
,

668 
uöt8
 *
IEEEAddr
,

669 
uöt8
 
RemoveChûdªn
,

670 
uöt8
 
Rejoö
,

671 
uöt8
 
SecurôyE«bÀ
 );

681 
afSètus_t
 
ZDP_MgmtPîmôJoöReq
–
zAddrTy≥_t
 *
d°Addr
,

682 
byã
 
duøti⁄
,

683 
byã
 
TcSignifiˇn˚
,

684 
byã
 
SecurôyE«bÀ
 );

697 
afSètus_t
 
ZDP_MgmtNwkUpd©eReq
–
zAddrTy≥_t
 *
d°Addr
,

698 
uöt32
 
Ch™√lMask
,

699 
uöt8
 
SˇnDuøti⁄
,

700 
uöt8
 
SˇnCou¡
,

701 
uöt8
 
NwkUpd©eId
,

702 
uöt16
 
NwkM™agîAddr
 );

723 
afSètus_t
 
ZDP_AddrR•
–
byã
 
cId
, byã 
£q
, 
zAddrTy≥_t
 *
d°
, byã 
°©
,

724 
uöt8
 *
õì
, 
byã
 
ªqTy≥
, 
uöt16
 
nwkAddr
, byã 
devC¡
, byã 
°πIdx
,

725 
uöt16
 *
devAddr
, 
byã
 
£cO±
 );

730 
afSètus_t
 
ZDP_NodeDescMsg
–
zdoIncomögMsg_t
 *
öMsg
,

731 
uöt16
 
nwkAddr
, 
NodeDes¸ùt‹F‹m©_t
 *
pNodeDesc
 );

736 
afSètus_t
 
ZDP_PowîDescMsg
–
zdoIncomögMsg_t
 *
öMsg
,

737 
uöt16
 
nwkAddr
, 
NodePowîDes¸ùt‹F‹m©_t
 *
pPowîDesc
 );

742 
afSètus_t
 
ZDP_Sim∂eDescMsg
–
zdoIncomögMsg_t
 *
öMsg
,

743 
byã
 
Sètus
, 
Sim∂eDes¸ùti⁄F‹m©_t
 *
pSim∂eDesc
 );

748 
afSètus_t
 
ZDP_EPR•
–
uöt16
 
MsgTy≥
, 
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
, byã 
Sètus
,

749 
uöt16
 
nwkAddr
, 
byã
 
Cou¡
, 
uöt8
 *
pEPLi°
,

750 
byã
 
SecurôyE«bÀ
 );

756 
afSètus_t
 
ZDP_GíîicR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

757 
byã
 
°©us
, 
uöt16
 
aoi
, uöt16 
r•ID
, byã 
SecurôyE«bÀ
 );

762 
afSètus_t
 
ZDP_MgmtNwkDiscR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

763 
byã
 
Sètus
,

764 
byã
 
Nëw‹kCou¡
,

765 
byã
 
SèπIndex
,

766 
byã
 
Nëw‹kCou¡Li°
,

767 
√tw‹kDesc_t
 *
Nëw‹kLi°
,

768 
byã
 
SecurôyE«bÀ
 );

773 
ZSètus_t
 
ZDP_MgmtLqiR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

774 
byã
 
Sètus
,

775 
byã
 
Neighb‹LqiE¡rõs
,

776 
byã
 
SèπIndex
,

777 
byã
 
Neighb‹LqiCou¡
,

778 
ZDP_MgmtLqiIãm_t
* 
Neighb‹Li°
,

779 
byã
 
SecurôyE«bÀ
 );

784 
ZSètus_t
 
ZDP_MgmtRtgR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

785 
byã
 
Sètus
,

786 
byã
 
RoutögTabÀE¡rõs
,

787 
byã
 
SèπIndex
,

788 
byã
 
RoutögLi°Cou¡
,

789 
πgIãm_t
 *
RoutögTabÀLi°
,

790 
byã
 
SecurôyE«bÀ
 );

795 
ZSètus_t
 
ZDP_MgmtBödR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

796 
byã
 
Sètus
,

797 
byã
 
BödögTabÀE¡rõs
,

798 
byã
 
SèπIndex
,

799 
byã
 
BödögTabÀLi°Cou¡
,

800 
≠sBödögIãm_t
 *
BödögTabÀLi°
,

801 
byã
 
SecurôyE«bÀ
 );

805 
afSètus_t
 
ZDP_MgmtNwkUpd©eNŸify
–
uöt8
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

806 
uöt8
 
°©us
, 
uöt32
 
sˇ¬edCh™√ls
,

807 
uöt16
 
tŸÆTønsmissi⁄s
, uöt16 
å™smissi⁄Faûuªs
,

808 
uöt8
 
li°Cou¡
, uöt8 *
íîgyVÆues
, uöt8 
txO±i⁄s
,

809 
uöt8
 
£curôyE«bÀ
 );

814 
ZSètus_t
 
ZDP_U£rDescR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

815 
uöt16
 
nwkAddrOfI¡îe°
, 
U£rDes¸ùt‹F‹m©_t
 *
u£rDesc
,

816 
byã
 
SecurôyE«bÀ
 );

821 
ZSètus_t
 
ZDP_SîvîDiscR•
–
byã
 
å™sID
, 
zAddrTy≥_t
 *
d°Addr
, byã 
°©us
,

822 
uöt16
 
aoi
, uöt16 
£rvîMask
, 
byã
 
SecurôyE«bÀ
 );

827 
ZDP_IncomögD©a
–
afIncomögMSGPackë_t
 *
pD©a
 );

829 
ZSètus_t
 
ZDO_Regi°îF‹ZDOMsg
–
uöt8
 
èskID
, 
uöt16
 
˛u°îID
 );

830 
ZSètus_t
 
ZDO_RemoveRegi°îedCB
–
uöt8
 
èskID
, 
uöt16
 
˛u°îID
 );

836 #ifde‡
__˝lu•lus


	@Components/stack/zdo/ZDSecMgr.c

40 #ifde‡
__˝lu•lus


48 
	~"ZComdef.h
"

49 
	~"OSAL.h
"

50 
	~"OSAL_NV.h
"

51 
	~"ZGlobÆs.h
"

52 
	~"s•.h
"

53 
	~"nwk_globÆs.h
"

54 
	~"nwk.h
"

55 
	~"NLMEDE.h
"

56 
	~"AddrMgr.h
"

57 
	~"AssocLi°.h
"

58 
	~"APSMEDE.h
"

59 
	~"ZDC⁄fig.h
"

60 
	~"ZDSecMgr.h
"

66 #i‡!
deföed
 ( 
ZDSECMGR_DEVICE_MAX
 )

67 
	#ZDSECMGR_DEVICE_MAX
 3

	)

73 
	#ZDSECMGR_PRECONFIG_MAX
 0

	)

76 
	#ZDSECMGR_MASTERKEY_MAX
 
ZDSECMGR_DEVICE_MAX


	)

79 
	#ZDSECMGR_ENTRY_MAX
 
ZDSECMGR_DEVICE_MAX


	)

82 
	#ZDSECMGR_CTRL_MAX
 
ZDSECMGR_DEVICE_MAX


	)

85 #i‡!
deföed
 ( 
ZDSECMGR_STORED_DEVICES
 )

86 
	#ZDSECMGR_STORED_DEVICES
 3

	)

90 #i‡!
deföed
 ( 
ZDSECMGR_TC_DEVICE_MAX
 )

91 
	#ZDSECMGR_TC_DEVICE_MAX
 1

	)

94 #i‡–
ZDSECMGR_TC_DEVICE_MAX
 < 1 ) || ( ZDSECMGR_TC_DEVICE_MAX > 255 )

98 
	#ZDSECMGR_CTRL_NONE
 0

	)

99 
	#ZDSECMGR_CTRL_INIT
 1

	)

100 
	#ZDSECMGR_CTRL_TK_MASTER
 2

	)

101 
	#ZDSECMGR_CTRL_SKKE_INIT
 3

	)

102 
	#ZDSECMGR_CTRL_SKKE_WAIT
 4

	)

103 
	#ZDSECMGR_CTRL_SKKE_DONE
 5

	)

104 
	#ZDSECMGR_CTRL_SKKE_FAIL
 6

	)

105 
	#ZDSECMGR_CTRL_TK_NWK
 7

	)

107 
	#ZDSECMGR_CTRL_BASE_CNTR
 1

	)

108 
	#ZDSECMGR_CTRL_SKKE_INIT_CNTR
 1

	)

109 
	#ZDSECMGR_CTRL_TK_NWK_CNTR
 1

	)

112 
	#ZDSECMGR_SKA_SLOT_MAX
 1

	)

115 
	#ZDSecMgrMa°îKeyGë
 
APSME_Ma°îKeyGë


	)

116 
	#ZDSecMgrLökKeySë
 
APSME_LökKeySë


	)

117 
	#ZDSecMgrLökKeyNVIdGë
 
APSME_LökKeyNVIdGë


	)

118 
	#ZDSecMgrKeyFwdToChûd
 
APSME_KeyFwdToChûd


	)

119 
	#ZDSecMgrIsLökKeyVÆid
 
APSME_IsLökKeyVÆid


	)

126 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

127 
uöt8
 
key
[
SEC_KEY_LEN
];

128 } 
	tZDSecMgrPªC⁄figD©a_t
;

132 
uöt16
 
ami
;

133 
uöt8
 
key
[
SEC_KEY_LEN
];

134 } 
	tZDSecMgrMa°îKeyD©a_t
;

138 
uöt16
 
ami
;

139 
uöt16
 
keyNvId
;

140 
ZDSecMgr_Authítiˇti⁄_O±i⁄
 
authítiˇãO±i⁄
;

141 } 
	tZDSecMgrE¡ry_t
;

145 
ZDSecMgrE¡ry_t
* 
íåy
;

146 
uöt16
 
∑ª¡Addr
;

147 
uöt8
 
£cuª
;

148 
uöt8
 
°©e
;

149 
uöt8
 
˙å
;

150 } 
	tZDSecMgrCål_t
;

154 
uöt16
 
nwkAddr
;

155 
uöt8
* 
extAddr
;

156 
uöt16
 
∑ª¡Addr
;

157 
uöt8
 
£cuª
;

158 
uöt8
 
devSètus
;

159 
ZDSecMgrCål_t
* 
˘æ
;

160 } 
	tZDSecMgrDevi˚_t
;

168 
uöt8
 
ZDSecMgrSt‹edDevi˚Li°
[
ZDSECMGR_STORED_DEVICES
][
Z_EXTADDR_LEN
] =

176 
uöt8
 
ZDSecMgrTCExtAddr
[
Z_EXTADDR_LEN
]=

180 
CONST
 
uöt8
 
ZDSecMgrTCMa°îKey
[
SEC_KEY_LEN
] =

184 
uöt8
 
ZDSecMgrTCAuthítiˇãd
 = 
FALSE
;

187 #i‡–
ZDSECMGR_PRECONFIG_MAX
 != 0 )

188 c⁄° 
ZDSecMgrPªC⁄figD©a_t
 
ZDSecMgrPªC⁄figD©a
[
ZDSECMGR_PRECONFIG_MAX
] =

226 
ZDSecMgrE¡ry_t
* 
ZDSecMgrE¡rõs
 = 
NULL
;

227 
ZDSecMgrCål_t
* 
ZDSecMgrCålD©a
 = 
NULL
;

228 
ZDSecMgrAddrMgrUpd©e
–
uöt16
 
ami
, uöt16 
nwkAddr
 );

229 
ZDSecMgrAddrMgrCB
–
uöt8
 
upd©e
, 
AddrMgrE¡ry_t
* 
√wE¡ry
, AddrMgrE¡ry_t* 
ﬁdE¡ry
 );

231 
uöt8
 
ZDSecMgrPîmôJoöögE«bÀd
;

232 
uöt8
 
ZDSecMgrPîmôJoöögTimed
;

234 
APSME_TCLökKey_t
 
Tru°CíãrLökKey
;

236 
APSME_ApsLökKeyFrmC¡r_t
 
ApsLökKeyFrmC¡r
[
ZDSECMGR_ENTRY_MAX
];

237 
APSME_TCLökKeyFrmC¡r_t
 
TCLökKeyFrmC¡r
[
ZDSECMGR_TC_DEVICE_MAX
];

291 
ZDSecMgrMa°îKeyInô
( );

296 
ZSètus_t
 
ZDSecMgrAddrSt‹e
–
uöt16
 
nwkAddr
, 
uöt8
* 
extAddr
, uöt16* 
ami
 );

297 
ZSètus_t
 
ZDSecMgrExtAddrSt‹e
–
uöt16
 
nwkAddr
, 
uöt8
* 
extAddr
, uöt16* 
ami
 );

298 
ZSètus_t
 
ZDSecMgrExtAddrLookup
–
uöt8
* 
extAddr
, 
uöt16
* 
ami
 );

303 
uöt8
 
ZDSecMgrTCExtAddrCheck
–uöt8* 
extAddr
 );

304 
ZDSecMgrTCD©aLﬂd
–
uöt8
* 
extAddr
 );

309 
ZSètus_t
 
ZDSecMgrMa°îKeyLookup
–
uöt16
 
ami
, uöt16* 
pKeyNvId
 );

310 
ZSètus_t
 
ZDSecMgrMa°îKeySt‹e
–
uöt16
 
ami
, 
uöt8
* 
key
 );

315 
ZDSecMgrE¡ryInô
(
uöt8
 
°©e
);

316 
ZSètus_t
 
ZDSecMgrE¡ryLookup
–
uöt16
 
nwkAddr
, 
ZDSecMgrE¡ry_t
** 
íåy
 );

317 
ZSètus_t
 
ZDSecMgrE¡ryLookupAMI
–
uöt16
 
ami
, 
ZDSecMgrE¡ry_t
** 
íåy
 );

318 
ZSètus_t
 
ZDSecMgrE¡ryLookupExt
–
uöt8
* 
extAddr
, 
ZDSecMgrE¡ry_t
** 
íåy
 );

319 
ZSètus_t
 
ZDSecMgrE¡ryLookupExtGëIndex
–
uöt8
* 
extAddr
, 
ZDSecMgrE¡ry_t
** 
íåy
, 
uöt16
* 
íåyIndex
 );

320 
ZSètus_t
 
ZDSecMgrE¡ryLookupAMIGëIndex
–
uöt16
 
ami
, uöt16* 
íåyIndex
 );

321 
ZDSecMgrE¡ryFªe
–
ZDSecMgrE¡ry_t
* 
íåy
 );

322 
ZSètus_t
 
ZDSecMgrE¡ryNew
–
ZDSecMgrE¡ry_t
** 
íåy
 );

323 
ZSètus_t
 
ZDSecMgrAuthítiˇti⁄Së
–
uöt8
* 
extAddr
, 
ZDSecMgr_Authítiˇti⁄_O±i⁄
 
›ti⁄
 );

324 
ZDSecMgrApsLökKeyInô
();

325 #i‡
deföed
 ( 
NV_RESTORE
 )

326 
ZDSecMgrWrôeNV
();

327 
ZDSecMgrRe°‹eFromNV
();

328 
ZDSecMgrUpd©eNV
–
uöt16
 
ödex
 );

334 
ZDSecMgrCålInô
( );

335 
ZDSecMgrCålRñó£
–
ZDSecMgrCål_t
* 
˘æ
 );

336 
ZDSecMgrCålLookup
–
ZDSecMgrE¡ry_t
* 
íåy
, 
ZDSecMgrCål_t
** 
˘æ
 );

337 
ZDSecMgrCålSë
–
ZDSecMgrDevi˚_t
* 
devi˚
,

338 
ZDSecMgrE¡ry_t
* 
íåy
,

339 
ZDSecMgrCål_t
* 
˘æ
 );

340 
ZSètus_t
 
ZDSecMgrCålAdd
–
ZDSecMgrDevi˚_t
* 
devi˚
, 
ZDSecMgrE¡ry_t
* 
íåy
 );

341 
ZDSecMgrCålTîm
–
ZDSecMgrE¡ry_t
* 
íåy
 );

342 
ZSètus_t
 
ZDSecMgrCålRe£t
–
ZDSecMgrDevi˚_t
* 
devi˚
,

343 
ZDSecMgrE¡ry_t
* 
íåy
 );

348 
ZSètus_t
 
ZDSecMgrMa°îKeyLﬂd
–
uöt8
* 
extAddr
, uöt8* 
key
 );

349 
ZSètus_t
 
ZDSecMgrAµKeyGë
–
uöt16
 
öôNwkAddr
,

350 
uöt8
* 
öôExtAddr
,

351 
uöt16
 
∑πNwkAddr
,

352 
uöt8
* 
∑πExtAddr
,

353 
uöt8
** 
key
,

354 
uöt8
* 
keyTy≥
 );

355 
ZDSecMgrAµKeyReq
–
ZDO_Reque°KeyInd_t
* 
öd
 );

356 
ZSètus_t
 
ZDSecMgrE°ablishKey
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

357 
ZSètus_t
 
ZDSecMgrSídMa°îKey
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

358 
ZSètus_t
 
ZDSecMgrSídNwkKey
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

359 
ZDSecMgrNwkKeyInô
(
uöt8
 
£tDeÁu…
);

364 
ZDSecMgrDevi˚E¡ryRemove
–
ZDSecMgrE¡ry_t
* 
íåy
 );

365 
ZSètus_t
 
ZDSecMgrDevi˚E¡ryAdd
–
ZDSecMgrDevi˚_t
* 
devi˚
, 
uöt16
 
ami
 );

370 
ZDSecMgrDevi˚CålH™dÀr
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

371 
ZDSecMgrDevi˚CålSëup
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

372 
ZDSecMgrDevi˚CålUpd©e
–
uöt8
* 
extAddr
, uöt8 
°©e
 );

377 
ZDSecMgrDevi˚Remove
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

378 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©eSKKE
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

379 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©eRM
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

380 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©eCM
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

381 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©e
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

382 
ZSètus_t
 
ZDSecMgrDevi˚Joö
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

383 
ZSètus_t
 
ZDSecMgrDevi˚JoöDúe˘
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

384 
ZSètus_t
 
ZDSecMgrDevi˚JoöFwd
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

385 
ZSètus_t
 
ZDSecMgrDevi˚New
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

390 
ZDSecMgrAssocDevi˚Auth
–
assocüãd_devi˚s_t
* 
assoc
 );

395 
ZDSecMgrAuthInôüã
–
uöt8
* 
ª•⁄dî
 );

396 
ZDSecMgrAuthNwkKey
( );

401 
APSME_TCLökKeyInô
–
uöt8
 
£tDeÁu…
 );

402 
uöt8
 
APSME_IsDeÁu…TCLK
–uöt8 *
extAddr
 );

413 
ZDSecMgrMa°îKeyInô
( )

415 
uöt16
 
ödex
;

416 
ZDSecMgrMa°îKeyD©a_t
 
ma°îKeyD©a
;

418 
ma°îKeyD©a
.
ami
 = 
INVALID_NODE_ADDR
;

420 
oßl_mem£t
–&
ma°îKeyD©a
.
key
, 0x00, 
SEC_KEY_LEN
 );

422  
ödex
 = 0; index < 
ZDSECMGR_MASTERKEY_MAX
; index++ )

424 i‡–
oßl_nv_ôem_öô
–(
ZCD_NV_MASTER_KEY_DATA_START
 + 
ödex
),

425 (
ZDSecMgrMa°îKeyD©a_t
), &
ma°îKeyD©a
Ë=
SUCCESS
)

428 
oßl_nv_wrôe
–(
ZCD_NV_MASTER_KEY_DATA_START
 + 
ödex
), 0,

429 (
ZDSecMgrMa°îKeyD©a_t
), &
ma°îKeyD©a
 );

445 
ZSètus_t
 
ZDSecMgrAddrSt‹e
–
uöt16
 
nwkAddr
, 
uöt8
* 
extAddr
, uöt16* 
ami
 )

447 
ZSètus_t
 
°©us
;

448 
AddrMgrE¡ry_t
 
íåy
;

452 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

453 
íåy
.
nwkAddr
 =ÇwkAddr;

454 
AddrMgrExtAddrSë
–
íåy
.
extAddr
,ÉxtAddr );

456 i‡–
AddrMgrE¡ryUpd©e
–&
íåy
 ) =
TRUE
 )

459 *
ami
 = 
íåy
.
ödex
;

460 
°©us
 = 
ZSuc˚ss
;

465 *
ami
 = 
íåy
.
ödex
;

466 
°©us
 = 
ZNwkUnknownDevi˚
;

469  
°©us
;

482 
ZSètus_t
 
ZDSecMgrExtAddrSt‹e
–
uöt16
 
nwkAddr
, 
uöt8
* 
extAddr
, uöt16* 
ami
 )

484 
ZSètus_t
 
°©us
;

485 
AddrMgrE¡ry_t
 
íåy
;

489 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

490 
íåy
.
nwkAddr
 =ÇwkAddr;

491 
AddrMgrExtAddrSë
–
íåy
.
extAddr
,ÉxtAddr );

493 i‡–
AddrMgrE¡ryUpd©e
–&
íåy
 ) =
TRUE
 )

496 *
ami
 = 
íåy
.
ödex
;

497 
°©us
 = 
ZSuc˚ss
;

502 *
ami
 = 
íåy
.
ödex
;

503 
°©us
 = 
ZNwkUnknownDevi˚
;

506  
°©us
;

519 
ZSètus_t
 
ZDSecMgrExtAddrLookup
–
uöt8
* 
extAddr
, 
uöt16
* 
ami
 )

521 
ZSètus_t
 
°©us
;

522 
AddrMgrE¡ry_t
 
íåy
;

526 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

527 
AddrMgrExtAddrSë
–
íåy
.
extAddr
,ÉxtAddr );

529 i‡–
AddrMgrE¡ryLookupExt
–&
íåy
 ) =
TRUE
 )

532 *
ami
 = 
íåy
.
ödex
;

533 
°©us
 = 
ZSuc˚ss
;

538 *
ami
 = 
íåy
.
ödex
;

539 
°©us
 = 
ZNwkUnknownDevi˚
;

542  
°©us
;

554 
ZSètus_t
 
ZDSecMgrAddrCÀ¨
–
uöt8
* 
extAddr
 )

556 
ZSètus_t
 
°©us
;

557 
uöt16
 
íåyAmi
;

560 
°©us
 = 
ZDSecMgrExtAddrLookup
–
extAddr
, &
íåyAmi
 );

562 i‡–
°©us
 =
ZSuc˚ss
 )

564 
AddrMgrE¡ry_t
 
addrE¡ry
;

567 
addrE¡ry
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

568 
addrE¡ry
.
ödex
 = 
íåyAmi
;

570 i‡–
AddrMgrE¡ryRñó£
–&
addrE¡ry
 ) !
TRUE
 )

573 
°©us
 = 
ZFaûuª
;

577  
°©us
;

590 
ZSètus_t
 
ZDSecMgrMa°îKeyLookup
–
uöt16
 
ami
, uöt16* 
pKeyNvId
 )

592 
uöt16
 
ödex
;

593 
ZDSecMgrMa°îKeyD©a_t
 
ma°îKeyD©a
;

596  
ödex
 = 0; index < 
ZDSECMGR_MASTERKEY_MAX
 ; index++ )

599 
oßl_nv_ªad
–(
ZCD_NV_MASTER_KEY_DATA_START
 + 
ödex
), 0,

600 (
ZDSecMgrMa°îKeyD©a_t
), &
ma°îKeyD©a
 );

602 i‡–
ma°îKeyD©a
.
ami
 ==ámi )

605 *
pKeyNvId
 = 
ZCD_NV_MASTER_KEY_DATA_START
 + 
ödex
;

608 
oßl_mem£t
(&
ma°îKeyD©a
, 0x00, (
ZDSecMgrMa°îKeyD©a_t
));

610  
ZSuc˚ss
;

614 *
pKeyNvId
 = 
SEC_NO_KEY_NV_ID
;

617 
oßl_mem£t
(&
ma°îKeyD©a
, 0x00, (
ZDSecMgrMa°îKeyD©a_t
));

619  
ZNwkUnknownDevi˚
;

632 
ZSètus_t
 
ZDSecMgrMa°îKeySt‹e
–
uöt16
 
ami
, 
uöt8
* 
key
 )

634 
uöt16
 
ödex
;

635 
ZDSecMgrMa°îKeyD©a_t
 
ma°îKeyD©a
;

638  
ödex
 = 0; index < 
ZDSECMGR_MASTERKEY_MAX
 ; index++ )

641 
oßl_nv_ªad
–(
ZCD_NV_MASTER_KEY_DATA_START
 + 
ödex
), 0,

642 (
ZDSecMgrMa°îKeyD©a_t
), &
ma°îKeyD©a
 );

644 i‡–
ma°îKeyD©a
.
ami
 =
INVALID_NODE_ADDR
 )

647 
ma°îKeyD©a
.
ami
 =ámi;

649 i‡–
key
 !
NULL
 )

651 
oßl_mem˝y
–
ma°îKeyD©a
.
key
, key, 
SEC_KEY_LEN
 );

655 
oßl_mem£t
–
ma°îKeyD©a
.
key
, 0, 
SEC_KEY_LEN
 );

659 
oßl_nv_wrôe
–(
ZCD_NV_MASTER_KEY_DATA_START
 + 
ödex
), 0,

660 (
ZDSecMgrMa°îKeyD©a_t
), &
ma°îKeyD©a
 );

663 
oßl_mem£t
–&
ma°îKeyD©a
, 0x00, (
ZDSecMgrMa°îKeyD©a_t
) );

666  
ZSuc˚ss
;

671 
oßl_mem£t
–&
ma°îKeyD©a
, 0x00, (
ZDSecMgrMa°îKeyD©a_t
) );

673  
ZNwkUnknownDevi˚
;

685 
ZDSecMgrE¡ryInô
(
uöt8
 
°©e
)

687 i‡(
ZDSecMgrE¡rõs
 =
NULL
)

689 
uöt16
 
ödex
;

691 i‡((
ZDSecMgrE¡rõs
 = 
oßl_mem_Æloc
((
ZDSecMgrE¡ry_t
Ë* 
ZDSECMGR_ENTRY_MAX
)Ë=
NULL
)

696 
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
; index++)

698 
ZDSecMgrE¡rõs
[
ödex
].
ami
 = 
INVALID_NODE_ADDR
;

700 
ZDSecMgrE¡rõs
[
ödex
].
keyNvId
 = 
SEC_NO_KEY_NV_ID
;

704 #i‡
deföed
 
NV_RESTORE


705 i‡(
°©e
 =
ZDO_INITDEV_RESTORED_NETWORK_STATE
)

707 
ZDSecMgrRe°‹eFromNV
();

710 ()
°©e
;

724 
ZSètus_t
 
ZDSecMgrE¡ryLookup
–
uöt16
 
nwkAddr
, 
ZDSecMgrE¡ry_t
** 
íåy
 )

726 
uöt16
 
ödex
;

727 
AddrMgrE¡ry_t
 
addrMgrE¡ry
;

730 *
íåy
 = 
NULL
;

733 i‡–
ZDSecMgrE¡rõs
 !
NULL
 )

735 
addrMgrE¡ry
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

736 
addrMgrE¡ry
.
nwkAddr
 =ÇwkAddr;

738 i‡–
AddrMgrE¡ryLookupNwk
–&
addrMgrE¡ry
 ) =
TRUE
 )

740  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
 ; index++ )

742 i‡–
addrMgrE¡ry
.
ödex
 =
ZDSecMgrE¡rõs
[ödex].
ami
 )

745 *
íåy
 = &
ZDSecMgrE¡rõs
[
ödex
];

748  
ZSuc˚ss
;

754  
ZNwkUnknownDevi˚
;

767 
ZSètus_t
 
ZDSecMgrE¡ryLookupAMI
–
uöt16
 
ami
, 
ZDSecMgrE¡ry_t
** 
íåy
 )

769 
uöt16
 
ödex
;

772 *
íåy
 = 
NULL
;

775 i‡–
ZDSecMgrE¡rõs
 !
NULL
 )

777  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
 ; index++ )

779 i‡–
ZDSecMgrE¡rõs
[
ödex
].
ami
 ==ámi )

782 *
íåy
 = &
ZDSecMgrE¡rõs
[
ödex
];

785  
ZSuc˚ss
;

790  
ZNwkUnknownDevi˚
;

803 
ZSètus_t
 
ZDSecMgrE¡ryLookupExt
–
uöt8
* 
extAddr
, 
ZDSecMgrE¡ry_t
** 
íåy
 )

805 
ZSètus_t
 
°©us
;

806 
uöt16
 
ami
;

809 *
íåy
 = 
NULL
;

810 
°©us
 = 
ZNwkUnknownDevi˚
;

813 i‡–
ZDSecMgrExtAddrLookup
–
extAddr
, &
ami
 ) =
ZSuc˚ss
 )

815 
°©us
 = 
ZDSecMgrE¡ryLookupAMI
–
ami
, 
íåy
 );

818  
°©us
;

831 
ZSètus_t
 
ZDSecMgrE¡ryLookupExtGëIndex
–
uöt8
* 
extAddr
, 
ZDSecMgrE¡ry_t
** 
íåy
, 
uöt16
* 
íåyIndex
 )

833 
uöt16
 
ami
;

834 
uöt16
 
ödex
;

837 i‡–
ZDSecMgrExtAddrLookup
–
extAddr
, &
ami
 ) =
ZSuc˚ss
 )

840 i‡–
ZDSecMgrE¡rõs
 !
NULL
 )

842  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
 ; index++ )

844 i‡–
ZDSecMgrE¡rõs
[
ödex
].
ami
 ==ámi )

847 *
íåy
 = &
ZDSecMgrE¡rõs
[
ödex
];

848 *
íåyIndex
 = 
ödex
;

851  
ZSuc˚ss
;

857  
ZNwkUnknownDevi˚
;

870 
ZSètus_t
 
ZDSecMgrE¡ryLookupAMIGëIndex
–
uöt16
 
ami
, uöt16* 
íåyIndex
 )

872 
uöt16
 
ödex
;

875 i‡–
ZDSecMgrE¡rõs
 !
NULL
 )

877  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
 ; index++ )

879 i‡–
ZDSecMgrE¡rõs
[
ödex
].
ami
 ==ámi )

882 *
íåyIndex
 = 
ödex
;

885  
ZSuc˚ss
;

890  
ZNwkUnknownDevi˚
;

902 
ZDSecMgrE¡ryFªe
–
ZDSecMgrE¡ry_t
* 
íåy
 )

904 
APSME_LökKeyD©a_t
 *
pApsLökKey
 = 
NULL
;

906 #i‡
deföed
 ( 
NV_RESTORE
 )

907 
ZSètus_t
 
°©us
;

908 
uöt16
 
íåyIndex
;

910 
°©us
 = 
ZDSecMgrE¡ryLookupAMIGëIndex
–
íåy
->
ami
, &
íåyIndex
 );

913 
pApsLökKey
 = (
APSME_LökKeyD©a_t
 *)
oßl_mem_Æloc
((APSME_LinkKeyData_t));

915 i‡(
pApsLökKey
 !
NULL
)

917 
oßl_mem£t
–
pApsLökKey
, 0x00, (
APSME_LökKeyD©a_t
) );

920 
oßl_nv_wrôe
–
íåy
->
keyNvId
, 0,

921 (
APSME_LökKeyD©a_t
), 
pApsLökKey
);

924 
íåy
->
keyNvId
 = 
SEC_NO_KEY_NV_ID
;

926 
oßl_mem_‰ì
(
pApsLökKey
);

930 
íåy
->
ami
 = 
INVALID_NODE_ADDR
;

933 
íåy
->
authítiˇãO±i⁄
 = 
ZDSecMgr_NŸ_Authítiˇãd
;

935 #i‡
deföed
 ( 
NV_RESTORE
 )

936 i‡–
°©us
 =
ZSuc˚ss
 )

938 
ZDSecMgrUpd©eNV
(
íåyIndex
);

952 
ZSètus_t
 
ZDSecMgrE¡ryNew
–
ZDSecMgrE¡ry_t
** 
íåy
 )

954 
uöt16
 
ödex
;

957 *
íåy
 = 
NULL
;

960 i‡–
ZDSecMgrE¡rõs
 !
NULL
 )

963  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
 ; index++ )

965 i‡–
ZDSecMgrE¡rõs
[
ödex
].
ami
 =
INVALID_NODE_ADDR
 )

968 *
íåy
 = &
ZDSecMgrE¡rõs
[
ödex
];

971 
ZDSecMgrE¡rõs
[
ödex
].
authítiˇãO±i⁄
 = 
ZDSecMgr_NŸ_Authítiˇãd
;

974  
ZSuc˚ss
;

979  
ZNwkUnknownDevi˚
;

991 
ZDSecMgrCålInô
( )

993 
uöt16
 
size
;

994 
uöt16
 
ödex
;

997 
size
 = ()–(
ZDSecMgrCål_t
Ë* 
ZDSECMGR_CTRL_MAX
 );

999 
ZDSecMgrCålD©a
 = 
oßl_mem_Æloc
–
size
 );

1002 i‡–
ZDSecMgrCålD©a
 !
NULL
 )

1004  
ödex
 = 0; index < 
ZDSECMGR_CTRL_MAX
; index++ )

1006 
ZDSecMgrCålD©a
[
ödex
].
°©e
 = 
ZDSECMGR_CTRL_NONE
;

1020 
ZDSecMgrCålRñó£
–
ZDSecMgrCål_t
* 
˘æ
 )

1023 
˘æ
->
°©e
 = 
ZDSECMGR_CTRL_NONE
;

1036 
ZDSecMgrCålLookup
–
ZDSecMgrE¡ry_t
* 
íåy
, 
ZDSecMgrCål_t
** 
˘æ
 )

1038 
uöt16
 
ödex
;

1041 *
˘æ
 = 
NULL
;

1044 i‡–
ZDSecMgrCålD©a
 !
NULL
 )

1046  
ödex
 = 0; index < 
ZDSECMGR_CTRL_MAX
; index++ )

1049 i‡–
ZDSecMgrCålD©a
[
ödex
].
°©e
 !
ZDSECMGR_CTRL_NONE
 )

1052 i‡–
ZDSecMgrCålD©a
[
ödex
].
íåy
 ==Éntry )

1055 *
˘æ
 = &
ZDSecMgrCålD©a
[
ödex
];

1076 
ZDSecMgrCålSë
–
ZDSecMgrDevi˚_t
* 
devi˚
,

1077 
ZDSecMgrE¡ry_t
* 
íåy
,

1078 
ZDSecMgrCål_t
* 
˘æ
 )

1081 
˘æ
->
∑ª¡Addr
 = 
devi˚
->parentAddr;

1082 
˘æ
->
£cuª
 = 
devi˚
->secure;

1083 
˘æ
->
íåy
 =Éntry;

1084 
˘æ
->
°©e
 = 
ZDSECMGR_CTRL_INIT
;

1085 
˘æ
->
˙å
 = 0;

1088 
devi˚
->
˘æ
 = ctrl;

1101 
ZSètus_t
 
ZDSecMgrCålAdd
–
ZDSecMgrDevi˚_t
* 
devi˚
, 
ZDSecMgrE¡ry_t
* 
íåy
 )

1103 
uöt16
 
ödex
;

1106 i‡–
ZDSecMgrCålD©a
 !
NULL
 )

1109  
ödex
 = 0; index < 
ZDSECMGR_CTRL_MAX
; index++ )

1111 i‡–
ZDSecMgrCålD©a
[
ödex
].
°©e
 =
ZDSECMGR_CTRL_NONE
 )

1114 
ZDSecMgrCålSë
–
devi˚
, 
íåy
, &
ZDSecMgrCålD©a
[
ödex
] );

1117  
ZSuc˚ss
;

1122  
ZNwkUnknownDevi˚
;

1134 
ZDSecMgrCålTîm
–
ZDSecMgrE¡ry_t
* 
íåy
 )

1136 
ZDSecMgrCål_t
* 
˘æ
;

1139 
ZDSecMgrCålLookup
 ( 
íåy
, &
˘æ
 );

1141 i‡–
˘æ
 !
NULL
 )

1143 
ZDSecMgrCålRñó£
 ( 
˘æ
 );

1157 
ZSètus_t
 
ZDSecMgrCålRe£t
–
ZDSecMgrDevi˚_t
* 
devi˚
, 
ZDSecMgrE¡ry_t
* 
íåy
 )

1159 
ZSètus_t
 
°©us
;

1160 
ZDSecMgrCål_t
* 
˘æ
;

1163 
°©us
 = 
ZNwkUnknownDevi˚
;

1166 
ZDSecMgrCålLookup
–
íåy
, &
˘æ
 );

1168 i‡–
˘æ
 !
NULL
 )

1170 
ZDSecMgrCålSë
–
devi˚
, 
íåy
, 
˘æ
 );

1172 
°©us
 = 
ZSuc˚ss
;

1176 
°©us
 = 
ZDSecMgrCålAdd
–
devi˚
, 
íåy
 );

1179  
°©us
;

1193 
ZSètus_t
 
ZDSecMgrMa°îKeyLﬂd
–
uöt8
* 
extAddr
, uöt8* 
key
 )

1195 
ZSètus_t
 
°©us
;

1196 
uöt16
 
ami
;

1197 
uöt16
 
keyNvId
;

1200 
°©us
 = 
ZDSecMgrExtAddrLookup
–
extAddr
, &
ami
 );

1202 i‡–
°©us
 =
ZSuc˚ss
 )

1205 i‡–
ZDSecMgrMa°îKeyLookup
–
ami
, &
keyNvId
 ) =
ZSuc˚ss
 )

1208 
oßl_nv_wrôe
–
keyNvId
, 
oßl_off£tof
(
ZDSecMgrMa°îKeyD©a_t
, 
key
),

1209 
SEC_KEY_LEN
, 
key
 );

1214 
°©us
 = 
ZDSecMgrMa°îKeySt‹e
–
ami
, 
key
 );

1218  
°©us
;

1235 
uöt8
 
ZDSecMgrAµKeyTy≥
 = 
KEY_TYPE_APP_LINK
;

1240 
ZSètus_t
 
ZDSecMgrAµKeyGë
–
uöt16
 
öôNwkAddr
,

1241 
uöt8
* 
öôExtAddr
,

1242 
uöt16
 
∑πNwkAddr
,

1243 
uöt8
* 
∑πExtAddr
,

1244 
uöt8
** 
key
,

1245 
uöt8
* 
keyTy≥
 )

1248 ()
öôNwkAddr
;

1249 ()
öôExtAddr
;

1250 ()
∑πNwkAddr
;

1251 ()
∑πExtAddr
;

1258 
SSP_GëTrueR™d
–
SEC_KEY_LEN
, *
key
 );

1260 *
keyTy≥
 = 
ZDSecMgrAµKeyTy≥
;

1262  
ZSuc˚ss
;

1274 
ZDSecMgrAµKeyReq
–
ZDO_Reque°KeyInd_t
* 
öd
 )

1276 
APSME_Tøn•‹tKeyReq_t
 
ªq
;

1277 
uöt8
 
öôExtAddr
[
Z_EXTADDR_LEN
];

1278 
uöt16
 
∑πNwkAddr
;

1279 
uöt8
 
key
[
SEC_KEY_LEN
];

1283 i‡––
APSME_LookupNwkAddr
–
öd
->
∑πExtAddr
, &
∑πNwkAddr
 ) =
TRUE
 ) &&

1284 –
APSME_LookupExtAddr
–
öd
->
§cAddr
, 
öôExtAddr
 ) =
TRUE
 ) )

1287 
ªq
.
key
 = key;

1290 i‡–
ZDSecMgrAµKeyGë
–
öd
->
§cAddr
,

1291 
öôExtAddr
,

1292 
∑πNwkAddr
,

1293 
öd
->
∑πExtAddr
,

1294 &
ªq
.
key
,

1295 &
ªq
.
keyTy≥
 ) =
ZSuc˚ss
 )

1298 
ªq
.
nwkSecuª
 = 
TRUE
;

1299 
ªq
.
≠sSecuª
 = 
TRUE
;

1300 
ªq
.
tu¬ñ
 = 
NULL
;

1303 
ªq
.
d°Addr
 = 
öd
->
§cAddr
;

1304 
ªq
.
extAddr
 = 
öd
->
∑πExtAddr
;

1305 
ªq
.
öôüt‹
 = 
TRUE
;

1306 
APSME_Tøn•‹tKeyReq
–&
ªq
 );

1309 
ªq
.
d°Addr
 = 
∑πNwkAddr
;

1310 
ªq
.
extAddr
 = 
öôExtAddr
;

1311 
ªq
.
öôüt‹
 = 
FALSE
;

1313 
APSME_Tøn•‹tKeyReq
–&
ªq
 );

1316 
oßl_mem£t
–
key
, 0x00, 
SEC_KEY_LEN
);

1331 
ZSètus_t
 
ZDSecMgrE°ablishKey
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1333 
ZSètus_t
 
°©us
;

1334 
APSME_E°ablishKeyReq_t
 
ªq
;

1337 
ªq
.
ª•ExtAddr
 = 
devi˚
->
extAddr
;

1338 
ªq
.
mëhod
 = 
APSME_SKKE_METHOD
;

1340 i‡–
devi˚
->
∑ª¡Addr
 =
NLME_GëSh‹tAddr
() )

1342 
ªq
.
d°Addr
 = 
devi˚
->
nwkAddr
;

1344 
ªq
.
≠sSecuª
 = 
FALSE
;

1345 
ªq
.
nwkSecuª
 = 
FALSE
;

1349 
ªq
.
d°Addr
 = 
devi˚
->
∑ª¡Addr
;

1351 
ªq
.
≠sSecuª
 = 
TRUE
;

1352 
ªq
.
nwkSecuª
 = 
TRUE
;

1355 
°©us
 = 
APSME_E°ablishKeyReq
–&
ªq
 );

1357  
°©us
;

1369 
ZSètus_t
 
ZDSecMgrSídMa°îKey
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1371 
ZSètus_t
 
°©us
;

1372 
APSME_Tøn•‹tKeyReq_t
 
ªq
;

1373 
uöt16
 
keyNvId
;

1374 
uöt8
 
ma°îKey
[
SEC_KEY_LEN
];

1377 
ªq
.
keyTy≥
 = 
KEY_TYPE_TC_MASTER
;

1378 
ªq
.
extAddr
 = 
devi˚
->extAddr;

1379 
ªq
.
tu¬ñ
 = 
NULL
;

1381 i‡–
ZDSecMgrMa°îKeyLookup
–
devi˚
->
˘æ
->
íåy
->
ami
, &
keyNvId
 ) =
ZSuc˚ss
 )

1383 
oßl_nv_ªad
–
keyNvId
, 
oßl_off£tof
(
ZDSecMgrMa°îKeyD©a_t
, 
key
),

1384 
SEC_KEY_LEN
, 
ma°îKey
 );

1389 
oßl_mem£t
–
ma°îKey
, 0x00, 
SEC_KEY_LEN
);

1392 
ªq
.
key
 = 
ma°îKey
;

1395 i‡–
devi˚
->
∑ª¡Addr
 !
NLME_GëSh‹tAddr
() )

1398 
ªq
.
d°Addr
 = 
devi˚
->
∑ª¡Addr
;

1399 
ªq
.
nwkSecuª
 = 
TRUE
;

1400 
ªq
.
≠sSecuª
 = 
TRUE
;

1405 
ªq
.
d°Addr
 = 
devi˚
->
nwkAddr
;

1406 
ªq
.
nwkSecuª
 = 
FALSE
;

1407 
ªq
.
≠sSecuª
 = 
FALSE
;

1410 
°©us
 = 
APSME_Tøn•‹tKeyReq
–&
ªq
 );

1413 
oßl_mem£t
–
ma°îKey
, 0x00, 
SEC_KEY_LEN
);

1415  
°©us
;

1427 
ZSètus_t
 
ZDSecMgrSídNwkKey
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1429 
ZSètus_t
 
°©us
;

1430 
APSME_Tøn•‹tKeyReq_t
 
ªq
;

1431 
APSDE_FømeTu¬ñ_t
 
tu¬ñ
;

1432 
nwkKeyDesc
 
tmpKey
;

1434 
ªq
.
d°Addr
 = 
devi˚
->
nwkAddr
;

1435 
ªq
.
extAddr
 = 
devi˚
->extAddr;

1437 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

1439 
ªq
.
keyTy≥
 = 
KEY_TYPE_NWK_HIGH
;

1443 
ªq
.
keyTy≥
 = 
KEY_TYPE_NWK
;

1447 if–
NLME_RódNwkKeyInfo
–0, (
tmpKey
), &tmpKey,

1448 
ZCD_NV_NWK_ACTIVE_KEY_INFO
 ) !
SUCCESS
 )

1451 
oßl_mem£t
(&
tmpKey
, 0x00, (tmpKey));

1454 i‡–(
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
)

1455 || (
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_SE_STANDARD
) )

1458 
ªq
.
keySeqNum
 = 
tmpKey
.keySeqNum;

1459 
ªq
.
key
 = 
tmpKey
.key;

1464 
ªq
.
≠sSecuª
 = 
TRUE
;

1467 i‡–
devi˚
->
∑ª¡Addr
 =
NLME_GëSh‹tAddr
() )

1469 
ªq
.
nwkSecuª
 = 
FALSE
;

1470 
ªq
.
tu¬ñ
 = 
NULL
;

1474 
ªq
.
nwkSecuª
 = 
TRUE
;

1475 
ªq
.
tu¬ñ
 = &tunnel;

1476 
ªq
.
tu¬ñ
->
äa
 = 
devi˚
->
∑ª¡Addr
;

1477 
ªq
.
tu¬ñ
->
dó
 = 
devi˚
->
extAddr
;

1484 
ªq
.
nwkSecuª
 = 
TRUE
;

1485 
ªq
.
≠sSecuª
 = 
FALSE
;

1486 
ªq
.
tu¬ñ
 = 
NULL
;

1488 i‡–
devi˚
->
∑ª¡Addr
 !
NLME_GëSh‹tAddr
() )

1490 
ªq
.
d°Addr
 = 
devi˚
->
∑ª¡Addr
;

1495 i‡–
devi˚
->
£cuª
 =
FALSE
 )

1497 
ªq
.
keySeqNum
 = 
tmpKey
.keySeqNum;

1498 
ªq
.
key
 = 
tmpKey
.key;

1501 i‡–
devi˚
->
∑ª¡Addr
 =
NLME_GëSh‹tAddr
() )

1503 
ªq
.
nwkSecuª
 = 
FALSE
;

1508 
ªq
.
key
 = 
NULL
;

1509 
ªq
.
keySeqNum
 = 0;

1513 
°©us
 = 
APSME_Tøn•‹tKeyReq
–&
ªq
 );

1516 
oßl_mem£t
–&
tmpKey
, 0x00, (
nwkKeyDesc
) );

1518  
°©us
;

1530 
ZDSecMgrDevi˚E¡ryRemove
–
ZDSecMgrE¡ry_t
* 
íåy
 )

1533 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

1535 
ZDSecMgrCålTîm
–
íåy
 );

1539 
ZDSecMgrE¡ryFªe
–
íåy
 );

1552 
ZSètus_t
 
ZDSecMgrDevi˚RemoveByExtAddr
–
uöt8
 *
pAddr
 )

1554 
ZDSecMgrE¡ry_t
 *
pE¡ry
;

1555 
uöt8
 
ªtVÆue
;

1557 
ªtVÆue
 = (
uöt8
)
ZDSecMgrE¡ryLookupExt
–
pAddr
, &
pE¡ry
 );

1559 if–
ªtVÆue
 =
ZSuc˚ss
 )

1561 
ZDSecMgrDevi˚E¡ryRemove
–
pE¡ry
 );

1564  
ªtVÆue
;

1577 
ZDSecMgrAddrMgrUpd©e
–
uöt16
 
ami
, uöt16 
nwkAddr
 )

1579 
AddrMgrE¡ry_t
 
íåy
;

1582 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

1583 
íåy
.
ödex
 = 
ami
;

1585 
AddrMgrE¡ryGë
–&
íåy
 );

1588 i‡–
íåy
.
nwkAddr
 !=ÇwkAddr )

1591 
íåy
.
nwkAddr
 =ÇwkAddr;

1593 
AddrMgrE¡ryUpd©e
–&
íåy
 );

1597 
ZSètus_t
 
ZDSecMgrDevi˚E¡ryAdd
–
ZDSecMgrDevi˚_t
* 
devi˚
, 
uöt16
 
ami
 )

1599 
ZSètus_t
 
°©us
;

1600 
ZDSecMgrE¡ry_t
* 
íåy
;

1603 
°©us
 = 
ZNwkUnknownDevi˚
;

1605 
devi˚
->
˘æ
 = 
NULL
;

1608 i‡–
ZDSecMgrE¡ryLookup
–
devi˚
->
nwkAddr
, &
íåy
 ) =
ZSuc˚ss
 )

1611 i‡–
íåy
->
ami
 !=ámi )

1614 
ZDSecMgrDevi˚E¡ryRemove
–
íåy
 );

1616 i‡–
ZDSecMgrE¡ryLookupAMI
–
ami
, &
íåy
 ) =
ZSuc˚ss
 )

1619 
ZDSecMgrAddrMgrUpd©e
–
ami
, 
devi˚
->
nwkAddr
 );

1623 i‡–
ZDSecMgrE¡ryLookupAMI
–
ami
, &
íåy
 ) =
ZSuc˚ss
 )

1626 
ZDSecMgrAddrMgrUpd©e
–
ami
, 
devi˚
->
nwkAddr
 );

1630 i‡–
íåy
 =
NULL
 )

1633 i‡–
ZDSecMgrE¡ryNew
–&
íåy
 ) =
ZSuc˚ss
 )

1638 
íåy
->
ami
 =ámi;

1641 
ZDSecMgrAddrMgrUpd©e
–
ami
, 
devi˚
->
nwkAddr
 );

1644 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

1646 
°©us
 = 
ZDSecMgrCålAdd
–
devi˚
, 
íåy
 );

1650 
°©us
 = 
ZSuc˚ss
;

1659 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

1661 
°©us
 = 
ZDSecMgrCålRe£t
–
devi˚
, 
íåy
 );

1665 
°©us
 = 
ZSuc˚ss
;

1669  
°©us
;

1681 
ZDSecMgrDevi˚CålH™dÀr
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1683 
uöt8
 
°©e
;

1684 
uöt8
 
˙å
;

1686 
°©e
 = 
devi˚
->
˘æ
->state;

1687 
˙å
 = 
ZDSECMGR_CTRL_BASE_CNTR
;

1689  
°©e
 )

1691 
ZDSECMGR_CTRL_TK_MASTER
:

1692 i‡–
ZDSecMgrSídMa°îKey
–
devi˚
 ) =
ZSuc˚ss
 )

1694 
°©e
 = 
ZDSECMGR_CTRL_SKKE_INIT
;

1695 
˙å
 = 
ZDSECMGR_CTRL_SKKE_INIT_CNTR
;

1699 
ZDSECMGR_CTRL_SKKE_INIT
:

1700 i‡–
ZDSecMgrE°ablishKey
–
devi˚
 ) =
ZSuc˚ss
 )

1702 
°©e
 = 
ZDSECMGR_CTRL_SKKE_WAIT
;

1706 
ZDSECMGR_CTRL_SKKE_WAIT
:

1710 
ZDSECMGR_CTRL_TK_NWK
:

1711 i‡–
ZDSecMgrSídNwkKey
–
devi˚
 ) =
ZSuc˚ss
 )

1713 
°©e
 = 
ZDSECMGR_CTRL_NONE
;

1718 
°©e
 = 
ZDSECMGR_CTRL_NONE
;

1722 i‡–
°©e
 !
ZDSECMGR_CTRL_NONE
 )

1724 
devi˚
->
˘æ
->
°©e
 = state;

1725 
devi˚
->
˘æ
->
˙å
 = cntr;

1727 
oßl_°¨t_timîEx
(
ZDAµTaskID
, 
ZDO_SECMGR_EVENT
, 100 );

1731 
ZDSecMgrCålRñó£
–
devi˚
->
˘æ
 );

1744 
ZDSecMgrDevi˚CålSëup
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1746 i‡–
devi˚
->
˘æ
 !
NULL
 )

1748 i‡–
devi˚
->
£cuª
 =
FALSE
 )

1751 
devi˚
->
˘æ
->
°©e
 = 
ZDSECMGR_CTRL_TK_MASTER
;

1756 
devi˚
->
˘æ
->
°©e
 = 
ZDSECMGR_CTRL_SKKE_INIT
;

1759 
ZDSecMgrDevi˚CålH™dÀr
–
devi˚
 );

1773 
ZDSecMgrDevi˚CålUpd©e
–
uöt8
* 
extAddr
, uöt8 
°©e
 )

1775 
ZDSecMgrE¡ry_t
* 
íåy
;

1776 
ZDSecMgrCål_t
* 
˘æ
;

1779 ()
ZDSecMgrE¡ryLookupExt
–
extAddr
, &
íåy
 );

1781 i‡–
íåy
 !
NULL
 )

1784 
ZDSecMgrCålLookup
–
íåy
, &
˘æ
 );

1787 i‡–
˘æ
 !
NULL
 )

1790 i‡–
˘æ
->
°©e
 =
ZDSECMGR_CTRL_SKKE_WAIT
 )

1792 i‡–
°©e
 =
ZDSECMGR_CTRL_SKKE_DONE
 )

1795 
˘æ
->
°©e
 = 
ZDSECMGR_CTRL_TK_NWK
;

1796 
˘æ
->
˙å
 = 
ZDSECMGR_CTRL_TK_NWK_CNTR
;

1798 i‡–
°©e
 =
ZDSECMGR_CTRL_SKKE_FAIL
 )

1801 
˘æ
->
°©e
 = 
ZDSECMGR_CTRL_SKKE_FAIL
;

1802 
˘æ
->
˙å
 = 
ZDSECMGR_CTRL_BASE_CNTR
;

1810 
APSME_SKA_TimîExpúed
–
uöt8
 
öôüt‹
, uöt8* 
∑πExtAddr
 );

1811 
APSME_SKA_TimîExpúed
–
uöt8
 
öôüt‹
, uöt8* 
∑πExtAddr
 )

1813 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

1815 i‡–
öôüt‹
 =
TRUE
 )

1817 
ZDSecMgrDevi˚CålUpd©e
–
∑πExtAddr
, 
ZDSECMGR_CTRL_SKKE_FAIL
 );

1831 
ZDSecMgrDevi˚Remove
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1833 
APSME_RemoveDevi˚Req_t
 
ªmDevReq
;

1834 
NLME_LóveReq_t
 
ÀaveReq
;

1835 
assocüãd_devi˚s_t
* 
assoc
;

1838 i‡–
devi˚
->
∑ª¡Addr
 =
NLME_GëSh‹tAddr
() )

1841 
ÀaveReq
.
extAddr
 = 
devi˚
->extAddr;

1842 
ÀaveReq
.
ªmoveChûdªn
 = 
FALSE
;

1843 
ÀaveReq
.
ªjoö
 = 
FALSE
;

1846 
assoc
 = 
AssocGëWôhExt
–
devi˚
->
extAddr
 );

1848 i‡––
assoc
 !
NULL
 ) &&

1849 –
assoc
->
nodeRñ©i⁄
 >
CHILD_RFD
 ) &&

1850 –
assoc
->
nodeRñ©i⁄
 <
CHILD_FFD_RX_IDLE
 ) )

1853 i‡–
assoc
->
devSètus
 & 
DEV_SEC_AUTH_STATUS
 )

1855 
ÀaveReq
.
sûít
 = 
FALSE
;

1859 
ÀaveReq
.
sûít
 = 
TRUE
;

1862 
NLME_LóveReq
–&
ÀaveReq
 );

1868 
ªmDevReq
.
∑ª¡Addr
 = 
devi˚
->parentAddr;

1869 
ªmDevReq
.
chûdExtAddr
 = 
devi˚
->
extAddr
;

1871 
APSME_RemoveDevi˚Req
–&
ªmDevReq
 );

1884 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©eSKKE
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1886 
ZSètus_t
 
°©us
;

1887 
uöt16
 
ami
;

1888 
uöt16
 
keyNvId
;

1891 
°©us
 = 
ZDSecMgrExtAddrLookup
–
devi˚
->
extAddr
, &
ami
 );

1893 i‡–
°©us
 =
ZSuc˚ss
 )

1896 
°©us
 = 
ZDSecMgrMa°îKeyLookup
–
ami
, &
keyNvId
 );

1898 i‡–
°©us
 =
ZSuc˚ss
 )

1900 
°©us
 = 
ZDSecMgrDevi˚E¡ryAdd
–
devi˚
, 
ami
 );

1904  
°©us
;

1916 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©eRM
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1918 
ZSètus_t
 
°©us
;

1920 
°©us
 = 
ZSuc˚ss
;

1922 ()
devi˚
;

1927 i‡–
zgSecuªPîmôJoö
 =
FALSE
 )

1929 
°©us
 = 
ZNwkUnknownDevi˚
;

1944 
uöt8
 
ödex
;

1945 
uöt8
* 
ª°ri˘ed
;

1948  
ödex
 = 0; index < 
ZDSECMGR_STORED_DEVICES
; index++ )

1950 
ª°ri˘ed
 = 
ZDSecMgrSt‹edDevi˚Li°
[
ödex
];

1952 i‡–
AddrMgrExtAddrEquÆ
–
ª°ri˘ed
, 
devi˚
->
extAddr
 ) =
TRUE
 )

1955 
°©us
 = 
ZNwkUnknownDevi˚
;

1958 
ödex
 = 
ZDSECMGR_STORED_DEVICES
;

1964  
°©us
;

1977 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©eCM
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1979 
ZSètus_t
 
°©us
;

1980 
uöt16
 
ami
;

1981 
uöt8
 
key
[
SEC_KEY_LEN
];

1991 
°©us
 = 
ZSuc˚ss
;

1994 
oßl_mem˝y
–
key
, 
ZDSecMgrTCMa°îKey
, 
SEC_KEY_LEN
);

1997 
°©us
 = 
ZDSecMgrAddrSt‹e
–
devi˚
->
nwkAddr
, devi˚->
extAddr
, &
ami
 );

2000 
ZDSecMgrMa°îKeyLﬂd
–
devi˚
->
extAddr
, 
key
 );

2003 i‡–
°©us
 =
ZSuc˚ss
 )

2006 
°©us
 = 
ZDSecMgrDevi˚E¡ryAdd
–
devi˚
, 
ami
 );

2010 
oßl_mem£t
–
key
, 0x00, 
SEC_KEY_LEN
 );

2012  
°©us
;

2024 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©e
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

2026 
ZSètus_t
 
°©us
;

2029 i‡–
ZDSecMgrPîmôJoöögE«bÀd
 =
TRUE
 )

2034 i‡–
zgPªC⁄figKeys
 =
TRUE
 )

2036 
devi˚
->
£cuª
 = 
TRUE
;

2040 
devi˚
->
£cuª
 = 
FALSE
;

2043 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2045 
°©us
 = 
ZDSecMgrDevi˚VÆid©eCM
–
devi˚
 );

2049 
°©us
 = 
ZDSecMgrDevi˚VÆid©eRM
–
devi˚
 );

2054 
°©us
 = 
ZNwkUnknownDevi˚
;

2057  
°©us
;

2069 
ZSètus_t
 
ZDSecMgrDevi˚Joö
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

2071 
ZSètus_t
 
°©us
;

2072 
uöt16
 
ami
;

2075 
°©us
 = 
ZDSecMgrDevi˚VÆid©e
–
devi˚
 );

2077 i‡–
°©us
 =
ZSuc˚ss
 )

2079 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2081 
ZDSecMgrDevi˚CålSëup
–
devi˚
 );

2086 
ZDSecMgrAddrSt‹e
–
devi˚
->
nwkAddr
, devi˚->
extAddr
, &
ami
 );

2088 
°©us
 = 
ZDSecMgrSídNwkKey
–
devi˚
 );

2094 
ZDSecMgrDevi˚Remove
–
devi˚
 );

2097  
°©us
;

2109 
ZSètus_t
 
ZDSecMgrDevi˚JoöDúe˘
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

2111 
ZSètus_t
 
°©us
;

2113 
°©us
 = 
ZDSecMgrDevi˚Joö
–
devi˚
 );

2115 i‡–
°©us
 =
ZSuc˚ss
 )

2118 
ZDSecMgrAssocDevi˚Auth
–
AssocGëWôhSh‹t
–
devi˚
->
nwkAddr
 ) );

2121  
°©us
;

2133 
ZSètus_t
 
ZDSecMgrDevi˚JoöFwd
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

2135 
ZSètus_t
 
°©us
;

2136 
APSME_Upd©eDevi˚Req_t
 
ªq
;

2140 
°©us
 = 
ZSuc˚ss
;

2143 
ªq
.
d°Addr
 = 
APSME_TRUSTCENTER_NWKADDR
;

2144 
ªq
.
devAddr
 = 
devi˚
->
nwkAddr
;

2145 
ªq
.
devExtAddr
 = 
devi˚
->
extAddr
;

2148 i‡–(
devi˚
->
devSètus
 & 
DEV_HIGH_SEC_STATUS
) )

2150 i‡–
devi˚
->
devSètus
 & 
DEV_REJOIN_STATUS
 )

2152 i‡–
devi˚
->
£cuª
 =
TRUE
 )

2154 
ªq
.
°©us
 = 
APSME_UD_HIGH_SECURED_REJOIN
;

2158 
ªq
.
°©us
 = 
APSME_UD_HIGH_UNSECURED_REJOIN
;

2163 
ªq
.
°©us
 = 
APSME_UD_HIGH_UNSECURED_JOIN
;

2168 i‡–
devi˚
->
devSètus
 & 
DEV_REJOIN_STATUS
 )

2170 i‡–
devi˚
->
£cuª
 =
TRUE
 )

2172 
ªq
.
°©us
 = 
APSME_UD_STANDARD_SECURED_REJOIN
;

2176 
ªq
.
°©us
 = 
APSME_UD_STANDARD_UNSECURED_REJOIN
;

2181 
ªq
.
°©us
 = 
APSME_UD_STANDARD_UNSECURED_JOIN
;

2185 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2187 
ªq
.
≠sSecuª
 = 
TRUE
;

2191 
ªq
.
≠sSecuª
 = 
FALSE
;

2195 
°©us
 = 
APSME_Upd©eDevi˚Req
–&
ªq
 );

2197  
°©us
;

2209 
ZSètus_t
 
ZDSecMgrDevi˚New
–
ZDSecMgrDevi˚_t
* 
joöî
 )

2211 
ZSètus_t
 
°©us
;

2213 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

2216 
°©us
 = 
ZDSecMgrDevi˚JoöDúe˘
–
joöî
 );

2220 
°©us
 = 
ZDSecMgrDevi˚JoöFwd
–
joöî
 );

2223  
°©us
;

2235 
ZDSecMgrAssocDevi˚Auth
–
assocüãd_devi˚s_t
* 
assoc
 )

2237 i‡–
assoc
 !
NULL
 )

2239 
assoc
->
devSètus
 |
DEV_SEC_AUTH_STATUS
;

2252 
ZDSecMgrAuthInôüã
–
uöt8
* 
ª•⁄dî
 )

2254 
APSME_AuthítiˇãReq_t
 
ªq
;

2258 i‡–
APSME_LookupNwkAddr
–
ª•⁄dî
, &
ªq
.
nwkAddr
 ) )

2261 
ªq
.
extAddr
 = 
ª•⁄dî
;

2262 
ªq
.
a˘i⁄
 = 
APSME_EA_INITIATE
;

2263 
ªq
.
chÆÀnge
 = 
NULL
;

2266 
APSME_AuthítiˇãReq
–&
ªq
 );

2279 
ZDSecMgrAuthNwkKey
()

2281 i‡–
devSèã
 =
DEV_END_DEVICE_UNAUTH
 )

2283 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2285 
uöt8
 
∑ª¡
[
Z_EXTADDR_LEN
];

2288 
NLME_GëCo‹dExtAddr
–
∑ª¡
 );

2291 
ZDSecMgrAuthInôüã
–
∑ª¡
 );

2296 
oßl_£t_evít
 ( 
ZDAµTaskID
, 
ZDO_DEVICE_AUTH
 );

2313 #i‡–
ADDRMGR_CALLBACK_ENABLED
 == 1 )

2314 
ZDSecMgrAddrMgrCB
–
uöt8
 
upd©e
, 
AddrMgrE¡ry_t
* 
√wE¡ry
, AddrMgrE¡ry_t* 
ﬁdE¡ry
 );

2315 
ZDSecMgrAddrMgrCB
–
uöt8
 
upd©e
,

2316 
AddrMgrE¡ry_t
* 
√wE¡ry
,

2317 
AddrMgrE¡ry_t
* 
ﬁdE¡ry
 )

2319 ()
upd©e
;

2320 ()
√wE¡ry
;

2321 ()
ﬁdE¡ry
;

2325 
ZDSecMgrInô
(
uöt8
 
°©e
)

2327 i‡–(
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
)

2328 || (
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_SE_STANDARD
) )

2331 
ZDSecMgrE¡ryInô
(
°©e
);

2333 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

2335 
ZDSecMgrCålInô
();

2339 #i‡–
ADDRMGR_CALLBACK_ENABLED
 == 1 )

2340 
AddrMgrRegi°î
–
ADDRMGR_REG_SECURITY
, 
ZDSecMgrAddrMgrCB
 );

2344 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2347 
APSME_SKA_SlŸInô
–
ZDSECMGR_SKA_SLOT_MAX
 );

2350 i‡–
ZG_SECURE_ENABLED
 )

2352 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

2355 
ZDSecMgrPîmôJoöögE«bÀd
 = 
TRUE
;

2356 
ZDSecMgrPîmôJoöögTimed
 = 
FALSE
;

2361 
ZDSecMgrC⁄fig
();

2373 
ZDSecMgrC⁄fig
( )

2375 i‡–
ZG_SECURE_ENABLED
 )

2377 
SSP_Inô
();

2379 i‡–(
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
)

2380 || (
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_SE_STANDARD
) )

2382 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

2385 
APSME_SecurôyCM_CD
();

2387 i‡–
ZSTACK_ROUTER_BUILD
 )

2390 
APSME_SecurôyCM_RD
();

2395 
APSME_SecurôyCM_ED
();

2400 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

2403 
APSME_SecurôyRM_CD
();

2405 i‡–
ZSTACK_ROUTER_BUILD
 )

2408 
APSME_SecurôyRM_RD
();

2413 
APSME_SecurôyRM_ED
();

2420 
APSME_SecurôyNM
();

2435 
uöt8
 
ZDSecMgrPîmôJoöög
–uöt8 
duøti⁄
 )

2437 
uöt8
 
ac˚±
;

2439 
ZDSecMgrPîmôJoöögTimed
 = 
FALSE
;

2441 i‡–
duøti⁄
 > 0 )

2443 
ZDSecMgrPîmôJoöögE«bÀd
 = 
TRUE
;

2445 i‡–
duøti⁄
 != 0xFF )

2447 
ZDSecMgrPîmôJoöögTimed
 = 
TRUE
;

2452 
ZDSecMgrPîmôJoöögE«bÀd
 = 
FALSE
;

2455 
ac˚±
 = 
TRUE
;

2457  
ac˚±
;

2469 
ZDSecMgrPîmôJoöögTimeout
( )

2471 i‡–
ZDSecMgrPîmôJoöögTimed
 =
TRUE
 )

2473 
ZDSecMgrPîmôJoöögE«bÀd
 = 
FALSE
;

2474 
ZDSecMgrPîmôJoöögTimed
 = 
FALSE
;

2488 
uöt8
 
ZDSecMgrNewDevi˚Evít
( )

2490 
uöt8
 
found
;

2491 
ZDSecMgrDevi˚_t
 
devi˚
;

2492 
AddrMgrE¡ry_t
 
addrE¡ry
;

2493 
assocüãd_devi˚s_t
* 
assoc
;

2494 
ZSètus_t
 
°©us
;

2497 
found
 = 
FALSE
;

2500 
assoc
 = 
AssocM©chDevi˚Sètus
–
DEV_SEC_INIT_STATUS
 );

2502 i‡–
assoc
 !
NULL
 )

2505 
found
 = 
TRUE
;

2508 i‡–
zgPªC⁄figKeys
 =
TRUE
 )

2511 
ZDSecMgrAssocDevi˚Auth
–
assoc
 );

2515 
addrE¡ry
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

2516 
addrE¡ry
.
ödex
 = 
assoc
->
addrIdx
;

2517 
AddrMgrE¡ryGë
–&
addrE¡ry
 );

2519 
devi˚
.
nwkAddr
 = 
assoc
->
sh‹tAddr
;

2520 
devi˚
.
extAddr
 = 
addrE¡ry
.extAddr;

2521 
devi˚
.
∑ª¡Addr
 = 
NLME_GëSh‹tAddr
();

2522 
devi˚
.
£cuª
 = 
FALSE
;

2523 
devi˚
.
devSètus
 = 
assoc
->devStatus;

2526 
°©us
 = 
ZDSecMgrDevi˚New
–&
devi˚
 );

2528 i‡–
°©us
 =
ZSuc˚ss
 )

2530 
assoc
->
devSètus
 &~
DEV_SEC_INIT_STATUS
;

2532 i‡–
°©us
 =
ZNwkUnknownDevi˚
 )

2534 
AssocRemove
–
addrE¡ry
.
extAddr
 );

2538  
found
;

2550 
ZDSecMgrEvít
( )

2552 
uöt8
 
a˘i⁄
;

2553 
uöt8
 
ª°¨t
;

2554 
uöt16
 
ödex
;

2555 
AddrMgrE¡ry_t
 
íåy
;

2556 
ZDSecMgrDevi˚_t
 
devi˚
;

2559 i‡–
ZDSecMgrCålD©a
 !
NULL
 )

2561 
a˘i⁄
 = 
FALSE
;

2562 
ª°¨t
 = 
FALSE
;

2565  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
; index++ )

2567 i‡–
ZDSecMgrCålD©a
[
ödex
].
°©e
 !
ZDSECMGR_CTRL_NONE
 )

2569 i‡–
ZDSecMgrCålD©a
[
ödex
].
˙å
 != 0 )

2571 
ZDSecMgrCålD©a
[
ödex
].
˙å
--;

2574 i‡––
a˘i⁄
 =
FALSE
 ) && ( 
ZDSecMgrCålD©a
[
ödex
].
˙å
 == 0 ) )

2576 
a˘i⁄
 = 
TRUE
;

2579 
devi˚
.
∑ª¡Addr
 = 
ZDSecMgrCålD©a
[
ödex
].parentAddr;

2580 
devi˚
.
£cuª
 = 
ZDSecMgrCålD©a
[
ödex
].secure;

2581 
devi˚
.
˘æ
 = &
ZDSecMgrCålD©a
[
ödex
];

2584 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

2585 
íåy
.
ödex
 = 
ZDSecMgrCålD©a
[ödex].íåy->
ami
;

2588 
AddrMgrE¡ryGë
–&
íåy
 );

2591 
devi˚
.
nwkAddr
 = 
íåy
.nwkAddr;

2592 
devi˚
.
extAddr
 = 
íåy
.extAddr;

2595 
ZDSecMgrDevi˚CålH™dÀr
–&
devi˚
 );

2599 
ª°¨t
 = 
TRUE
;

2605 i‡–
ª°¨t
 =
TRUE
 )

2607 
oßl_°¨t_timîEx
(
ZDAµTaskID
, 
ZDO_SECMGR_EVENT
, 100 );

2621 
ZDSecMgrE°ablishKeyCfm
–
ZDO_E°ablishKeyCfm_t
* 
cfm
 )

2624 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

2627 
ZDSecMgrDevi˚CålUpd©e
–
cfm
->
∑πExtAddr
, 
ZDSECMGR_CTRL_SKKE_DONE
 );

2654 
uöt8
 
ZDSecMgrTCExtAddrCheck
–uöt8* 
extAddr
 )

2656 
uöt8
 
m©ch
;

2657 
uöt8
 
lookup
[
Z_EXTADDR_LEN
];

2659 
m©ch
 = 
FALSE
;

2661 i‡–
AddrMgrExtAddrLookup
–
APSME_TRUSTCENTER_NWKADDR
, 
lookup
 ) )

2663 
m©ch
 = 
AddrMgrExtAddrEquÆ
–
lookup
, 
extAddr
 );

2666  
m©ch
;

2680 
ZDSecMgrTCD©aLﬂd
–
uöt8
* 
extAddr
 )

2682 
uöt16
 
ami
;

2683 
uöt16
 
keyNvId
;

2684 
uöt8
 
ma°îKey
[
SEC_KEY_LEN
];

2685 
AddrMgrE¡ry_t
 
íåy
;

2688 
íåy
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

2689 
íåy
.
nwkAddr
 = 
zgTru°CíãrAddr
;

2692 i‡–
AddrMgrE¡ryLookupNwk
–&
íåy
 ) !
TRUE
 )

2694 i‡–
ZDSecMgrAddrSt‹e
–
zgTru°CíãrAddr
, 
extAddr
, &
ami
 ) =
ZSuc˚ss
 )

2697 i‡–
zgPªC⁄figKeys
 =
TRUE
 )

2699 i‡–
ZDSecMgrMa°îKeyLookup
–
ami
, &
keyNvId
 ) !
ZSuc˚ss
 )

2702 
oßl_mem˝y
–
ma°îKey
, 
ZDSecMgrTCMa°îKey
, 
SEC_KEY_LEN
);

2704 
ZDSecMgrMa°îKeySt‹e
–
ami
, 
ma°îKey
 );

2707 
oßl_mem£t
–
ma°îKey
, 0x00, 
SEC_KEY_LEN
 );

2723 
ZDSecMgrE°ablishKeyInd
–
ZDO_E°ablishKeyInd_t
* 
öd
 )

2725 
ZDSecMgrDevi˚_t
 
devi˚
;

2726 
APSME_E°ablishKeyR•_t
 
r•
;

2730 
ZDSecMgrTCD©aLﬂd
–
öd
->
öôExtAddr
 );

2732 i‡–
ZDSecMgrTCExtAddrCheck
–
öd
->
öôExtAddr
 ) )

2741 
devi˚
.
nwkAddr
 = 
APSME_TRUSTCENTER_NWKADDR
;

2742 
devi˚
.
∑ª¡Addr
 = 
öd
->
§cAddr
;

2747 
devi˚
.
nwkAddr
 = 
öd
->
§cAddr
;

2748 
devi˚
.
∑ª¡Addr
 = 
INVALID_NODE_ADDR
;

2751 
devi˚
.
extAddr
 = 
öd
->
öôExtAddr
;

2753 
devi˚
.
£cuª
 = 
öd
->
nwkSecuª
;

2756 i‡–
ZDSecMgrDevi˚VÆid©eSKKE
–&
devi˚
 ) =
ZSuc˚ss
 )

2758 
r•
.
ac˚±
 = 
TRUE
;

2762 
r•
.
ac˚±
 = 
FALSE
;

2765 
r•
.
d°Addr
 = 
öd
->
§cAddr
;

2766 
r•
.
öôExtAddr
 = &
öd
->initExtAddr[0];

2768 
r•
.
≠sSecuª
 = 
öd
->apsSecure;

2769 
r•
.
nwkSecuª
 = 
öd
->nwkSecure;

2771 
APSME_E°ablishKeyR•
–&
r•
 );

2776 
ZDSecMgrE°ablishKeyInd
–
ZDO_E°ablishKeyInd_t
* 
öd
 )

2778 
ZDSecMgrDevi˚_t
 
devi˚
;

2779 
APSME_E°ablishKeyR•_t
 
r•
;

2782 
devi˚
.
extAddr
 = 
öd
->
öôExtAddr
;

2783 
devi˚
.
£cuª
 = 
öd
->secure;

2785 i‡–
öd
->
£cuª
 =
FALSE
 )

2788 
devi˚
.
nwkAddr
 = 
APSME_TRUSTCENTER_NWKADDR
;

2789 
devi˚
.
∑ª¡Addr
 = 
öd
->
§cAddr
;

2794 
devi˚
.
nwkAddr
 = 
öd
->
§cAddr
;

2795 
devi˚
.
∑ª¡Addr
 = 
INVALID_NODE_ADDR
;

2798 
r•
.
d°Addr
 = 
öd
->
§cAddr
;

2799 
r•
.
öôExtAddr
 = &
öd
->initExtAddr[0];

2800 
r•
.
£cuª
 = 
öd
->secure;

2803 i‡–
ZDSecMgrDevi˚VÆid©eSKKE
–&
devi˚
 ) =
ZSuc˚ss
 )

2805 
r•
.
ac˚±
 = 
TRUE
;

2809 
r•
.
ac˚±
 = 
FALSE
;

2812 
APSME_E°ablishKeyR•
–&
r•
 );

2825 
ZDSecMgrTøn•‹tKeyInd
–
ZDO_Tøn•‹tKeyInd_t
* 
öd
 )

2827 
uöt8
 
ödex
;

2828 
uöt8
 
zgPªC⁄figKey
[
SEC_KEY_LEN
];

2831 
ZDSecMgrTCD©aLﬂd
–
öd
->
§cExtAddr
 );

2833 i‡–
öd
->
keyTy≥
 =
KEY_TYPE_TC_MASTER
 )

2835 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2838 i‡–
zgPªC⁄figKeys
 !
TRUE
 )

2841 
ZDSecMgrMa°îKeyLﬂd
–
öd
->
§cExtAddr
, ind->
key
 );

2849 i‡––
öd
->
keyTy≥
 =
KEY_TYPE_NWK
 ) ||

2850 –
öd
->
keyTy≥
 == 6 ) ||

2851 –
öd
->
keyTy≥
 =
KEY_TYPE_NWK_HIGH
 ) )

2854  
ödex
 = 0;

2855 –(
ödex
 < 
SEC_KEY_LEN
Ë&& (
öd
->
key
[index] == 0) );

2856 
ödex
++ );

2858 i‡–
ödex
 =
SEC_KEY_LEN
 )

2861 i‡–!
_NIB
.
nwkKeyLﬂded
 )

2863 
ZDSecMgrRódKeyFromNv
(
ZCD_NV_PRECFGKEY
, 
zgPªC⁄figKey
);

2864 
SSP_Upd©eNwkKey
–
zgPªC⁄figKey
, 0 );

2865 
SSP_SwôchNwkKey
( 0 );

2868 
oßl_mem£t
(
zgPªC⁄figKey
, 0x00, 
SEC_KEY_LEN
);

2873 
SSP_Upd©eNwkKey
–
öd
->
key
, ind->
keySeqNum
 );

2874 i‡–!
_NIB
.
nwkKeyLﬂded
 )

2876 
SSP_SwôchNwkKey
–
öd
->
keySeqNum
 );

2881 
ZDSecMgrAuthNwkKey
();

2883 i‡–
öd
->
keyTy≥
 =
KEY_TYPE_TC_LINK
 )

2885 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2890 i‡–
öd
->
keyTy≥
 =
KEY_TYPE_APP_MASTER
 )

2892 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2894 
uöt16
 
ami
;

2895 
AddrMgrE¡ry_t
 
íåy
;

2896 
ZDSecMgrE¡ry_t
* 
íåyZD
;

2898 
ZDSecMgrExtAddrLookup
–
öd
->
§cExtAddr
, &
ami
 );

2900 i‡–
öd
->
öôüt‹
 =
TRUE
 )

2903 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

2904 
íåy
.
ödex
 = 
ami
;

2905 
AddrMgrE¡ryGë
–&
íåy
 );

2907 i‡–
íåy
.
nwkAddr
 !
INVALID_NODE_ADDR
 )

2909 
APSME_E°ablishKeyReq_t
 
ªq
;

2910 
ZDSecMgrMa°îKeyLﬂd
–
öd
->
§cExtAddr
, ind->
key
 );

2912 
ZDSecMgrE¡ryLookupAMI
–
ami
, &
íåyZD
 );

2914 i‡–
íåyZD
 =
NULL
 )

2917 i‡–
ZDSecMgrE¡ryNew
–&
íåyZD
 ) =
ZSuc˚ss
 )

2920 
íåyZD
->
ami
 =ámi;

2924 
ªq
.
ª•ExtAddr
 = 
öd
->
§cExtAddr
;

2925 
ªq
.
mëhod
 = 
APSME_SKKE_METHOD
;

2926 
ªq
.
d°Addr
 = 
íåy
.
nwkAddr
;

2927 
ªq
.
≠sSecuª
 = 
FALSE
;

2928 
ªq
.
nwkSecuª
 = 
TRUE
;

2929 
APSME_E°ablishKeyReq
–&
ªq
 );

2934 i‡–
ami
 =
INVALID_NODE_ADDR
 )

2937 
ZDSecMgrAddrSt‹e
–
INVALID_NODE_ADDR
, 
öd
->
§cExtAddr
, &
ami
 );

2940 
ZDSecMgrMa°îKeyLﬂd
–
öd
->
§cExtAddr
, ind->
key
 );

2944 i‡–
öd
->
keyTy≥
 =
KEY_TYPE_APP_LINK
 )

2946 i‡––
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 ) ||

2947 –
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_SE_STANDARD
 ) )

2949 
uöt16
 
ami
;

2950 
ZDSecMgrE¡ry_t
* 
íåy
;

2953 i‡–
ZDSecMgrExtAddrLookup
–
öd
->
§cExtAddr
, &
ami
 ) !
ZSuc˚ss
 )

2956 
ZDSecMgrAddrSt‹e
–
INVALID_NODE_ADDR
, 
öd
->
§cExtAddr
, &
ami
 );

2957 
ZDP_NwkAddrReq
–
öd
->
§cExtAddr
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0 );

2960 
ZDSecMgrE¡ryLookupAMI
–
ami
, &
íåy
 );

2962 i‡–
íåy
 =
NULL
 )

2965 i‡–
ZDSecMgrE¡ryNew
–&
íåy
 ) =
ZSuc˚ss
 )

2968 
íåy
->
ami
 =ámi;

2972 
ZDSecMgrLökKeySë
–
öd
->
§cExtAddr
, ind->
key
 );

2974 #i‡
deföed
 
NV_RESTORE


2975 
ZDSecMgrWrôeNV
();

2990 
ZDSecMgrUpd©eDevi˚Ind
–
ZDO_Upd©eDevi˚Ind_t
* 
öd
 )

2992 
ZDSecMgrDevi˚_t
 
devi˚
;

2994 
devi˚
.
nwkAddr
 = 
öd
->
devAddr
;

2995 
devi˚
.
extAddr
 = 
öd
->
devExtAddr
;

2996 
devi˚
.
∑ª¡Addr
 = 
öd
->
§cAddr
;

3011 
ZDSecMgrDevi˚Joö
–&
devi˚
 );

3024 
ZDSecMgrRemoveDevi˚Ind
–
ZDO_RemoveDevi˚Ind_t
* 
öd
 )

3026 
ZDSecMgrDevi˚_t
 
devi˚
;

3029 i‡–
öd
->
§cAddr
 =
APSME_TRUSTCENTER_NWKADDR
 )

3032 i‡–
APSME_LookupNwkAddr
–
öd
->
chûdExtAddr
, &
devi˚
.
nwkAddr
 ) =
TRUE
 )

3034 
devi˚
.
∑ª¡Addr
 = 
NLME_GëSh‹tAddr
();

3035 
devi˚
.
extAddr
 = 
öd
->
chûdExtAddr
;

3038 
ZDSecMgrDevi˚Remove
–&
devi˚
 );

3052 
ZDSecMgrReque°KeyInd
–
ZDO_Reque°KeyInd_t
* 
öd
 )

3054 i‡–
öd
->
keyTy≥
 =
KEY_TYPE_NWK
 )

3057 i‡–
öd
->
keyTy≥
 =
KEY_TYPE_APP_MASTER
 )

3059 
ZDSecMgrAµKeyReq
–
öd
 );

3061 i‡–
öd
->
keyTy≥
 =
KEY_TYPE_TC_LINK
 )

3076 
ZDSecMgrSwôchKeyInd
–
ZDO_SwôchKeyInd_t
* 
öd
 )

3078 
SSP_SwôchNwkKey
–
öd
->
keySeqNum
 );

3081 
ZDAµ_NVUpd©e
();

3093 
ZDSecMgrAuthítiˇãInd
–
ZDO_AuthítiˇãInd_t
* 
öd
 )

3095 
APSME_AuthítiˇãReq_t
 
ªq
;

3096 
AddrMgrE¡ry_t
 
íåy
;

3105 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

3106 
íåy
.
nwkAddr
 = 
öd
->
≠s
.
öôNwkAddr
;

3107 
AddrMgrExtAddrSë
–
íåy
.
extAddr
, 
öd
->
≠s
.
öôExtAddr
 );

3109 i‡–
AddrMgrE¡ryUpd©e
–&
íåy
 ) =
TRUE
 )

3112 
ªq
.
nwkAddr
 = 
öd
->
≠s
.
öôNwkAddr
;

3113 
ªq
.
extAddr
 = 
öd
->
≠s
.
öôExtAddr
;

3114 
ªq
.
a˘i⁄
 = 
APSME_EA_ACCEPT
;

3115 
ªq
.
chÆÀnge
 = 
öd
->
≠s
.challenge;

3118 
APSME_AuthítiˇãReq
–&
ªq
 );

3131 
ZDSecMgrAuthítiˇãCfm
–
ZDO_AuthítiˇãCfm_t
* 
cfm
 )

3133 i‡–
cfm
->
≠s
.
°©us
 =
ZSuc˚ss
 )

3135 i‡––
cfm
->
≠s
.
öôüt‹
 =
TRUE
 ) && ( 
devSèã
 =
DEV_END_DEVICE_UNAUTH
 ) )

3138 
oßl_£t_evít
 ( 
ZDAµTaskID
, 
ZDO_DEVICE_AUTH
 );

3143 #i‡–
ZG_BUILD_COORDINATOR_TYPE
 )

3154 
ZSètus_t
 
ZDSecMgrUpd©eNwkKey
–
uöt8
* 
key
, uöt8 
keySeqNum
, 
uöt16
 
d°Addr
 )

3156 
ZSètus_t
 
°©us
;

3157 
APSME_Tøn•‹tKeyReq_t
 
ªq
;

3160 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

3162 
ªq
.
keyTy≥
 = 
KEY_TYPE_NWK_HIGH
;

3166 
ªq
.
keyTy≥
 = 
KEY_TYPE_NWK
;

3169 
ªq
.
d°Addr
 = dstAddr;

3170 
ªq
.
keySeqNum
 = keySeqNum;

3171 
ªq
.
key
 = key;

3172 
ªq
.
extAddr
 = 
NULL
;

3173 
ªq
.
nwkSecuª
 = 
TRUE
;

3174 
ªq
.
≠sSecuª
 = 
TRUE
;

3175 
ªq
.
tu¬ñ
 = 
NULL
;

3177 i‡(–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 ) ||

3178 –
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_SE_STANDARD
 ))

3180 
ZDSecMgrE¡ry_t
* 
íåy
;

3181 
uöt16
 
ödex
;

3182 
AddrMgrE¡ry_t
 
addrE¡ry
;

3184 
addrE¡ry
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

3186 
°©us
 = 
ZFaûuª
;

3189 i‡–
ZDSecMgrE¡rõs
 !
NULL
 )

3192  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
 ; index++ )

3194 i‡–
ZDSecMgrE¡rõs
[
ödex
].
ami
 !
INVALID_NODE_ADDR
 )

3197 
íåy
 = &
ZDSecMgrE¡rõs
[
ödex
];

3200 
addrE¡ry
.
ödex
 = 
íåy
->
ami
;

3201 i‡–
AddrMgrE¡ryGë
–&
addrE¡ry
 ) =
TRUE
 )

3203 
ªq
.
d°Addr
 = 
addrE¡ry
.
nwkAddr
;

3204 
ªq
.
extAddr
 = 
addrE¡ry
.extAddr;

3205 
°©us
 = 
APSME_Tøn•‹tKeyReq
–&
ªq
 );

3213 
°©us
 = 
APSME_Tøn•‹tKeyReq
–&
ªq
 );

3216 
SSP_Upd©eNwkKey
–
key
, 
keySeqNum
 );

3219 
ZDAµ_NVUpd©e
();

3221  
°©us
;

3225 #i‡–
ZG_BUILD_COORDINATOR_TYPE
 )

3235 
ZSètus_t
 
ZDSecMgrSwôchNwkKey
–
uöt8
 
keySeqNum
, 
uöt16
 
d°Addr
 )

3237 
ZSètus_t
 
°©us
;

3238 
APSME_SwôchKeyReq_t
 
ªq
;

3241 
ªq
.
d°Addr
 = dstAddr;

3242 
ªq
.
keySeqNum
 = keySeqNum;

3244 i‡(–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 ) ||

3245 –
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_SE_STANDARD
 ))

3247 
ZDSecMgrE¡ry_t
* 
íåy
;

3248 
uöt16
 
ödex
;

3249 
AddrMgrE¡ry_t
 
addrE¡ry
;

3251 
addrE¡ry
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

3253 
°©us
 = 
ZFaûuª
;

3256 i‡–
ZDSecMgrE¡rõs
 !
NULL
 )

3259  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
 ; index++ )

3261 i‡–
ZDSecMgrE¡rõs
[
ödex
].
ami
 !
INVALID_NODE_ADDR
 )

3264 
íåy
 = &
ZDSecMgrE¡rõs
[
ödex
];

3267 
addrE¡ry
.
ödex
 = 
íåy
->
ami
;

3269 i‡–
AddrMgrE¡ryGë
–&
addrE¡ry
 ) =
TRUE
 )

3271 
ªq
.
d°Addr
 = 
addrE¡ry
.
nwkAddr
;

3272 
°©us
 = 
APSME_SwôchKeyReq
–&
ªq
 );

3280 
°©us
 = 
APSME_SwôchKeyReq
–&
ªq
 );

3283 
SSP_SwôchNwkKey
–
keySeqNum
 );

3286 
ZDAµ_NVUpd©e
();

3288  
°©us
;

3301 
ZSètus_t
 
ZDSecMgrReque°AµKey
–
uöt8
 *
∑πExtAddr
 )

3303 
ZSètus_t
 
°©us
;

3304 
APSME_Reque°KeyReq_t
 
ªq
;

3306 
ªq
.
d°Addr
 = 0;

3307 
ªq
.
keyTy≥
 = 
KEY_TYPE_APP_MASTER
;

3309 
ªq
.
∑πExtAddr
 =ÖartExtAddr;

3310 
°©us
 = 
APSME_Reque°KeyReq
–&
ªq
 );

3312  
°©us
;

3315 #i‡–
ZG_BUILD_JOINING_TYPE
 )

3325 
ZSètus_t
 
ZDSecMgrSëupP¨äî
–
uöt16
 
∑πNwkAddr
, 
uöt8
* 
∑πExtAddr
 )

3327 
AddrMgrE¡ry_t
 
íåy
;

3328 
ZSètus_t
 
°©us
;

3330 
°©us
 = 
ZFaûuª
;

3333 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

3334 
íåy
.
nwkAddr
 = 
∑πNwkAddr
;

3335 
AddrMgrExtAddrSë
–
íåy
.
extAddr
, 
∑πExtAddr
 );

3337 i‡–
AddrMgrE¡ryUpd©e
–&
íåy
 ) =
TRUE
 )

3339 
°©us
 = 
ZSuc˚ss
;

3342 i‡–
∑πNwkAddr
 =
INVALID_NODE_ADDR
 )

3344 
°©us
 = 
ZDP_NwkAddrReq
–
∑πExtAddr
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0 );

3346 i‡–!
AddrMgrExtAddrVÆid
–
∑πExtAddr
 ) )

3348 
°©us
 = 
ZDP_IEEEAddrReq
–
∑πNwkAddr
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0 );

3352  
°©us
;

3356 #i‡–
ZG_BUILD_COORDINATOR_TYPE
 )

3367 
ZSètus_t
 
ZDSecMgrAµKeyTy≥Së
–
uöt8
 
keyTy≥
 )

3369 i‡–
keyTy≥
 =
KEY_TYPE_APP_LINK
 )

3371 
ZDSecMgrAµKeyTy≥
 = 
KEY_TYPE_APP_LINK
;

3375 
ZDSecMgrAµKeyTy≥
 = 
KEY_TYPE_APP_MASTER
;

3378  
ZSuc˚ss
;

3395 
ZSètus_t
 
ZDSecMgrMa°îKeyGë
–
uöt8
* 
extAddr
, 
uöt16
* 
pKeyNvId
 )

3397 
ZSètus_t
 
°©us
;

3398 
uöt16
 
ami
;

3401 
°©us
 = 
ZDSecMgrExtAddrLookup
–
extAddr
, &
ami
 );

3403 i‡–
°©us
 =
ZSuc˚ss
 )

3405 
ZDSecMgrMa°îKeyLookup
–
ami
, 
pKeyNvId
 );

3409 *
pKeyNvId
 = 
SEC_NO_KEY_NV_ID
;

3412  
°©us
;

3425 
ZSètus_t
 
ZDSecMgrLökKeySë
–
uöt8
* 
extAddr
, uöt8* 
key
 )

3427 
ZSètus_t
 
°©us
;

3428 
ZDSecMgrE¡ry_t
* 
íåy
;

3429 
APSME_LökKeyD©a_t
 *
pApsLökKey
 = 
NULL
;

3430 
uöt16
 
Index
;

3433 
°©us
 = 
ZDSecMgrE¡ryLookupExtGëIndex
–
extAddr
, &
íåy
, &
Index
 );

3435 i‡–
°©us
 =
ZSuc˚ss
 )

3438 
íåy
->
keyNvId
 = 
ZCD_NV_APS_LINK_KEY_DATA_START
 + 
Index
;

3440 
pApsLökKey
 = (
APSME_LökKeyD©a_t
 *)
oßl_mem_Æloc
((APSME_LinkKeyData_t));

3442 i‡(
pApsLökKey
 !
NULL
)

3445 
oßl_nv_ªad
–
íåy
->
keyNvId
, 0,

3446 (
APSME_LökKeyD©a_t
), 
pApsLökKey
 );

3449 
oßl_mem˝y
–
pApsLökKey
->
key
, key, 
SEC_KEY_LEN
 );

3450 
pApsLökKey
->
rxFrmC¡r
 = 0;

3451 
pApsLökKey
->
txFrmC¡r
 = 0;

3453 
oßl_nv_wrôe
–
íåy
->
keyNvId
, 0,

3454 (
APSME_LökKeyD©a_t
), 
pApsLökKey
 );

3457 
oßl_mem£t
(
pApsLökKey
, 0x00, (
APSME_LökKeyD©a_t
));

3459 
oßl_mem_‰ì
(
pApsLökKey
);

3462 
ApsLökKeyFrmC¡r
[
íåy
->
keyNvId
 - 
ZCD_NV_APS_LINK_KEY_DATA_START
].
txFrmC¡r
 = 0;

3463 
ApsLökKeyFrmC¡r
[
íåy
->
keyNvId
 - 
ZCD_NV_APS_LINK_KEY_DATA_START
].
rxFrmC¡r
 = 0;

3467  
°©us
;

3480 
ZSètus_t
 
ZDSecMgrAuthítiˇti⁄Së
–
uöt8
* 
extAddr
, 
ZDSecMgr_Authítiˇti⁄_O±i⁄
 
›ti⁄
 )

3482 
ZSètus_t
 
°©us
;

3483 
ZDSecMgrE¡ry_t
* 
íåy
;

3487 
°©us
 = 
ZDSecMgrE¡ryLookupExt
–
extAddr
, &
íåy
 );

3489 i‡–
°©us
 =
ZSuc˚ss
 )

3491 
íåy
->
authítiˇãO±i⁄
 = 
›ti⁄
;

3494  
°©us
;

3509 
uöt8
 
ZDSecMgrAuthítiˇti⁄Check
–
uöt16
 
sh‹tAddr
 )

3511 #i‡
deföed
 (
TC_LINKKEY_JOIN
)

3513 
ZDSecMgrE¡ry_t
* 
íåy
;

3514 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

3517 i‡–
NLME_GëSh‹tAddr
(Ë!
zgTru°CíãrAddr
 )

3519  
TRUE
;

3522 i‡–
AddrMgrExtAddrLookup
–
sh‹tAddr
, 
extAddr
 ) )

3525 i‡–
ZDSecMgrE¡ryLookupExt
–
extAddr
, &
íåy
 ) =
ZSuc˚ss
 )

3527 i‡–
íåy
->
authítiˇãO±i⁄
 !
ZDSecMgr_NŸ_Authítiˇãd
 )

3529  
TRUE
;

3533  
FALSE
;

3537  
FALSE
;

3540 ()
sh‹tAddr
;

3543  
TRUE
;

3558 
ZSètus_t
 
ZDSecMgrLökKeyNVIdGë
(
uöt8
* 
extAddr
, 
uöt16
 *
pKeyNvId
)

3560 
ZSètus_t
 
°©us
;

3561 
ZDSecMgrE¡ry_t
* 
íåy
;

3564 
°©us
 = 
ZDSecMgrE¡ryLookupExt
–
extAddr
, &
íåy
 );

3566 i‡–
°©us
 =
ZSuc˚ss
 )

3569 *
pKeyNvId
 = 
íåy
->
keyNvId
;

3573 *
pKeyNvId
 = 
SEC_NO_KEY_NV_ID
;

3576  
°©us
;

3589 
uöt8
 
ZDSecMgrIsLökKeyVÆid
(uöt8* 
extAddr
)

3591 
APSME_LökKeyD©a_t
 *
pKeyD©a
;

3592 
uöt16
 
≠sLökKeyNvId
;

3593 
uöt8
 
nuŒKey
[
SEC_KEY_LEN
];

3594 
uöt8
 
°©us
 = 
FALSE
;

3597 
oßl_mem£t
(
nuŒKey
, 0x00, 
SEC_KEY_LEN
);

3600 
APSME_LökKeyNVIdGë
–
extAddr
, &
≠sLökKeyNvId
 );

3602 i‡(
≠sLökKeyNvId
 !
SEC_NO_KEY_NV_ID
 )

3604 
pKeyD©a
 = (
APSME_LökKeyD©a_t
 *)
oßl_mem_Æloc
((APSME_LinkKeyData_t));

3606 i‡(
pKeyD©a
 !
NULL
)

3609 i‡–
oßl_nv_ªad
–
≠sLökKeyNvId
, 0,

3610 (
APSME_LökKeyD©a_t
), 
pKeyD©a
Ë=
ZSUCCESS
)

3613 i‡(!
oßl_memcmp
(
pKeyD©a
, 
nuŒKey
, 
SEC_KEY_LEN
))

3615 
°©us
 = 
TRUE
;

3620 
oßl_mem£t
(
pKeyD©a
, 0x00, (
APSME_LökKeyD©a_t
));

3622 
oßl_mem_‰ì
(
pKeyD©a
);

3626  
°©us
;

3638 
uöt8
 
ZDSecMgrKeyFwdToChûd
–
APSME_Tøn•‹tKeyInd_t
* 
öd
 )

3641 i‡–
öd
->
§cAddr
 =
APSME_TRUSTCENTER_NWKADDR
 )

3644 i‡––
öd
->
keyTy≥
 =
KEY_TYPE_NWK
 ) ||

3645 –
öd
->
keyTy≥
 == 6 ) ||

3646 –
öd
->
keyTy≥
 =
KEY_TYPE_NWK_HIGH
 ) )

3649 
ZDSecMgrAssocDevi˚Auth
–
AssocGëWôhExt
–
öd
->
d°ExtAddr
 ) );

3652  
TRUE
;

3655  
FALSE
;

3671 
ZSètus_t
 
ZDSecMgrAddLökKey
–
uöt16
 
sh‹tAddr
, 
uöt8
 *
extAddr
, uöt8 *
key
)

3673 
uöt16
 
ami
;

3674 
ZDSecMgrE¡ry_t
* 
íåy
;

3677 if–
ZDSecMgrAddrSt‹e
–
sh‹tAddr
, 
extAddr
, &
ami
 ) !
ZSuc˚ss
 )

3680  
ZFaûuª
;

3684 
ZDSecMgrE¡ryLookupAMI
–
ami
, &
íåy
 );

3687 i‡–
íåy
 =
NULL
 )

3689 i‡–
ZDSecMgrE¡ryNew
–&
íåy
 ) =
ZSuc˚ss
 )

3691 
íåy
->
ami
 =ámi;

3696  
ZBuf„rFuŒ
;

3700 
APSME_LökKeySë
–
extAddr
, 
key
 );

3702 #i‡
deföed
 (
TC_LINKKEY_JOIN
)

3704 
ZDSecMgrAuthítiˇti⁄Së
–
extAddr
, 
ZDSecMgr_Authítiˇãd_CBCK
 );

3707 #i‡
deföed
 
NV_RESTORE


3708 
ZDSecMgrWrôeNV
();

3711  
ZSuc˚ss
;

3714 #i‡
deföed
 ( 
NV_RESTORE
 )

3724 
uöt8
 
ZDSecMgrInôNV
()

3727 
uöt8
 
π∫
 = 
oßl_nv_ôem_öô
(
ZCD_NV_APS_LINK_KEY_TABLE
,

3728 ((
nvDevi˚Li°Hdr_t
Ë+ ((
ZDSecMgrE¡ry_t
Ë* 
ZDSECMGR_ENTRY_MAX
)), 
NULL
);

3731 i‡(
π∫
 !
SUCCESS
)

3733 
nvDevi˚Li°Hdr_t
 
hdr
;

3734 
hdr
.
numRecs
 = 0;

3735 
oßl_nv_wrôe
(
ZCD_NV_APS_LINK_KEY_TABLE
, 0, (
nvDevi˚Li°Hdr_t
), &
hdr
);

3738  
π∫
;

3742 #i‡
deföed
 ( 
NV_RESTORE
 )

3752 
ZDSecMgrWrôeNV
( )

3754 
uöt16
 
i
;

3755 
nvDevi˚Li°Hdr_t
 
hdr
;

3757 
hdr
.
numRecs
 = 0;

3759 i‡(
ZDSecMgrE¡rõs
 !
NULL
)

3761  
i
 = 0; i < 
ZDSECMGR_ENTRY_MAX
; i++ )

3764 
oßl_nv_wrôe
–
ZCD_NV_APS_LINK_KEY_TABLE
,

3765 (
uöt16
)(((
nvDevi˚Li°Hdr_t
)Ë+ (
i
 * (
ZDSecMgrE¡ry_t
))),

3766 (
ZDSecMgrE¡ry_t
), &
ZDSecMgrE¡rõs
[
i
] );

3768 i‡–
ZDSecMgrE¡rõs
[
i
].
ami
 !
INVALID_NODE_ADDR
 )

3770 
hdr
.
numRecs
++;

3776 
oßl_nv_wrôe
–
ZCD_NV_APS_LINK_KEY_TABLE
, 0, –
nvDevi˚Li°Hdr_t
 ), &
hdr
 );

3780 #i‡
deföed
 ( 
NV_RESTORE
 )

3792 
ZDSecMgrRe°‹eFromNV
( )

3794 
nvDevi˚Li°Hdr_t
 
hdr
;

3795 
APSME_LökKeyD©a_t
 *
pApsLökKey
 = 
NULL
;

3797 i‡((
oßl_nv_ªad
(
ZCD_NV_APS_LINK_KEY_TABLE
, 0, (
nvDevi˚Li°Hdr_t
), &
hdr
Ë=
ZSUCCESS
) &&

3798 ((
hdr
.
numRecs
 > 0Ë&& (hdr.numRec†<
ZDSECMGR_ENTRY_MAX
)))

3800 
uöt8
 
x
;

3802 
pApsLökKey
 = (
APSME_LökKeyD©a_t
 *)
oßl_mem_Æloc
((APSME_LinkKeyData_t));

3804 
x
 = 0; x < 
ZDSECMGR_ENTRY_MAX
; x++)

3806 i‡–
oßl_nv_ªad
–
ZCD_NV_APS_LINK_KEY_TABLE
,

3807 (
uöt16
)((
nvDevi˚Li°Hdr_t
Ë+ (
x
 * (
ZDSecMgrE¡ry_t
))),

3808 (
ZDSecMgrE¡ry_t
), &
ZDSecMgrE¡rõs
[
x
] ) =
SUCCESS
 )

3811 i‡–
ZDSecMgrE¡rõs
[
x
].
ami
 !
INVALID_NODE_ADDR
 )

3813 i‡(
pApsLökKey
 !
NULL
)

3816 
oßl_nv_ªad
–
ZDSecMgrE¡rõs
[
x
].
keyNvId
, 0,

3817 (
APSME_LökKeyD©a_t
), 
pApsLökKey
 );

3820 
pApsLökKey
->
txFrmC¡r
 +–
MAX_APS_FRAMECOUNTER_CHANGES
 + 1 );

3823 
ApsLökKeyFrmC¡r
[
ZDSecMgrE¡rõs
[
x
].
keyNvId
 - 
ZCD_NV_APS_LINK_KEY_DATA_START
].
txFrmC¡r
 =

3824 
pApsLökKey
->
txFrmC¡r
;

3826 
ApsLökKeyFrmC¡r
[
ZDSecMgrE¡rõs
[
x
].
keyNvId
 - 
ZCD_NV_APS_LINK_KEY_DATA_START
].
rxFrmC¡r
 =

3827 
pApsLökKey
->
rxFrmC¡r
;

3829 
oßl_nv_wrôe
–
ZDSecMgrE¡rõs
[
x
].
keyNvId
, 0,

3830 (
APSME_LökKeyD©a_t
), 
pApsLökKey
 );

3833 
oßl_mem£t
(
pApsLökKey
, 0x00, (
APSME_LökKeyD©a_t
));

3839 i‡(
pApsLökKey
 !
NULL
)

3841 
oßl_mem_‰ì
(
pApsLökKey
);

3856 
ZDSecMgrSëDeÁu…NV
( )

3858 
uöt16
 
i
;

3859 
nvDevi˚Li°Hdr_t
 
hdr
;

3860 
ZDSecMgrE¡ry_t
 
£cMgrE¡ry
;

3861 
APSME_LökKeyD©a_t
 *
pApsLökKey
 = 
NULL
;

3864 
hdr
.
numRecs
 = 0;

3867 
oßl_nv_wrôe
(
ZCD_NV_APS_LINK_KEY_TABLE
, 0, (
nvDevi˚Li°Hdr_t
), &
hdr
);

3869 
oßl_mem£t
–&
£cMgrE¡ry
, 0x00, (
ZDSecMgrE¡ry_t
) );

3871  
i
 = 0; i < 
ZDSECMGR_ENTRY_MAX
; i++ )

3874 
oßl_nv_wrôe
–
ZCD_NV_APS_LINK_KEY_TABLE
,

3875 (
uöt16
)(((
nvDevi˚Li°Hdr_t
)Ë+ (
i
 * (
ZDSecMgrE¡ry_t
))),

3876 (
ZDSecMgrE¡ry_t
), &
£cMgrE¡ry
 );

3879 
pApsLökKey
 = (
APSME_LökKeyD©a_t
 *)
oßl_mem_Æloc
((APSME_LinkKeyData_t));

3881 i‡(
pApsLökKey
 !
NULL
)

3883 
oßl_mem£t
–
pApsLökKey
, 0x00, (
APSME_LökKeyD©a_t
) );

3885  
i
 = 0; i < 
ZDSECMGR_ENTRY_MAX
; i++ )

3888 
oßl_nv_wrôe
–(
ZCD_NV_APS_LINK_KEY_DATA_START
 + 
i
), 0,

3889 (
APSME_LökKeyD©a_t
), 
pApsLökKey
);

3892 
oßl_mem_‰ì
(
pApsLökKey
);

3896 #i‡
deföed
 ( 
NV_RESTORE
 )

3906 
ZDSecMgrUpd©eNV
–
uöt16
 
ödex
 )

3908 
nvDevi˚Li°Hdr_t
 
hdr
;

3910 i‡(
ZDSecMgrE¡rõs
 !
NULL
)

3913 
oßl_nv_wrôe
–
ZCD_NV_APS_LINK_KEY_TABLE
,

3914 (
uöt16
)(((
nvDevi˚Li°Hdr_t
)Ë+ (
ödex
 * (
ZDSecMgrE¡ry_t
))),

3915 (
ZDSecMgrE¡ry_t
), &
ZDSecMgrE¡rõs
[
ödex
] );

3918 i‡(
oßl_nv_ªad
(
ZCD_NV_APS_LINK_KEY_TABLE
, 0, (
nvDevi˚Li°Hdr_t
), &
hdr
Ë=
ZSUCCESS
)

3920 i‡–
ZDSecMgrE¡rõs
[
ödex
].
ami
 =
INVALID_NODE_ADDR
 )

3922 i‡(
hdr
.
numRecs
 > 0)

3924 
hdr
.
numRecs
--;

3929 
hdr
.
numRecs
++;

3933 
oßl_nv_wrôe
–
ZCD_NV_APS_LINK_KEY_TABLE
, 0, –
nvDevi˚Li°Hdr_t
 ), &
hdr
 );

3949 
ZSètus_t
 
ZDSecMgrAPSRemove
–
uöt16
 
nwkAddr
, 
uöt8
 *
extAddr
, uöt16 
∑ª¡Addr
 )

3951 
ZDSecMgrDevi˚_t
 
devi˚
;

3953 i‡––
nwkAddr
 =
INVALID_NODE_ADDR
 ) ||

3954 –
extAddr
 =
NULL
 ) ||

3955 –
∑ª¡Addr
 =
INVALID_NODE_ADDR
 ) )

3957  ( 
ZFaûuª
 );

3960 
devi˚
.
nwkAddr
 =ÇwkAddr;

3961 
devi˚
.
extAddr
 =ÉxtAddr;

3962 
devi˚
.
∑ª¡Addr
 =ÖarentAddr;

3965 
ZDSecMgrDevi˚Remove
–&
devi˚
 );

3967  ( 
ZSuc˚ss
 );

3983 
APSME_TCLökKeyInô
(
uöt8
 
£tDeÁu…
)

3985 
uöt8
 
i
;

3986 
APSME_TCLökKey_t
 
tcLökKey
;

3987 
uöt8
 
π∫
;

3990  
i
 = 0; i < 
ZDSECMGR_TC_DEVICE_MAX
; i++ )

3993 
oßl_mem£t
–&
tcLökKey
, 0x00, (
APSME_TCLökKey_t
) );

3996 if((
i
 =0Ë&& ( 
zgU£DeÁu…TCLK
 =
TRUE
 ))

3998 
oßl_mem£t
–
tcLökKey
.
extAddr
, 0xFF, 
Z_EXTADDR_LEN
 );

3999 
oßl_mem˝y
–
tcLökKey
.
key
, 
deÁu…TCLökKey
, 
SEC_KEY_LEN
);

4004 
π∫
 = 
oßl_nv_ôem_öô
–(
ZCD_NV_TCLK_TABLE_START
 + 
i
),

4005 (
APSME_TCLökKey_t
), &
tcLökKey
);

4007 i‡(
π∫
 =
SUCCESS
)

4010 
oßl_nv_ªad
––
ZCD_NV_TCLK_TABLE_START
 + 
i
), 0,

4011 (
APSME_TCLökKey_t
), &
tcLökKey
 );

4013 #i‡
deföed
 ( 
NV_RESTORE
 )

4014 i‡(
£tDeÁu…
 =
TRUE
)

4017 
tcLökKey
.
txFrmC¡r
 = 0;

4022 
tcLökKey
.
txFrmC¡r
 +–
MAX_TCLK_FRAMECOUNTER_CHANGES
 + 1 );

4027 
tcLökKey
.
txFrmC¡r
 = 0;

4028 
tcLökKey
.
rxFrmC¡r
 = 0;

4031 
oßl_nv_wrôe
––
ZCD_NV_TCLK_TABLE_START
 + 
i
), 0,

4032 (
APSME_TCLökKey_t
), &
tcLökKey
 );

4035 
TCLökKeyFrmC¡r
[
i
].
txFrmC¡r
 = 
tcLökKey
.txFrmCntr;

4036 
TCLökKeyFrmC¡r
[
i
].
rxFrmC¡r
 = 
tcLökKey
.rxFrmCntr;

4041 
oßl_mem£t
–&
tcLökKey
, 0x00, (
APSME_TCLökKey_t
) );

4055 
ZSètus_t
 
APSME_TCLökKeySync
–
uöt16
 
§cAddr
, 
SSP_Info_t
* 
si
 )

4057 
uöt8
 
i
;

4058 
ZSètus_t
 
°©us
 = 
ZSecNoKey
;

4059 
APSME_TCLökKey_t
 
tcLökKey
;

4060 
uöt32
 *
t˛kRxFrmC¡r
;

4063 i‡–
AddrMgrExtAddrVÆid
–
si
->
extAddr
 ) =
FALSE
 )

4065 
APSME_LookupExtAddr
–
§cAddr
, 
si
->
extAddr
 );

4070  
i
 = 0; i < 
ZDSECMGR_TC_DEVICE_MAX
; i++ )

4073 
oßl_nv_ªad
–(
ZCD_NV_TCLK_TABLE_START
 + 
i
), 0,

4074 (
APSME_TCLökKey_t
), &
tcLökKey
 );

4076 if–
AddrMgrExtAddrEquÆ
(
si
->
extAddr
, 
tcLökKey
.extAddr) ||

4077 
APSME_IsDeÁu…TCLK
(
tcLökKey
.
extAddr
))

4079 
t˛kRxFrmC¡r
 = &
TCLökKeyFrmC¡r
[
i
].
rxFrmC¡r
;

4082 i‡–
si
->
‰mC¡r
 >*
t˛kRxFrmC¡r
 )

4085 
si
->
keyNvId
 = (
ZCD_NV_TCLK_TABLE_START
 + 
i
);

4088 *
t˛kRxFrmC¡r
 = 
si
->
‰mC¡r
 + 1;

4090 
°©us
 = 
ZSuc˚ss
;

4094 
°©us
 = 
ZSecOldFrmCou¡
;

4102 
oßl_mem£t
–&
tcLökKey
, 0x00, (
APSME_TCLökKey_t
) );

4104  
°©us
;

4117 
ZSètus_t
 
APSME_TCLökKeyLﬂd
–
uöt16
 
d°Addr
, 
SSP_Info_t
* 
si
 )

4119 
uöt8
 
i
;

4120 
ZSètus_t
 
°©us
 = 
ZSecNoKey
;

4121 
APSME_TCLökKey_t
 
tcLökKey
;

4122 
AddrMgrE¡ry_t
 
addrE¡ry
;

4123 
uöt32
 *
t˛kTxFrmC¡r
;

4124 
uöt8
 
extAddrFound
;

4125 
uöt8
 
deÁu…TCLKIdx
 = 
ZDSECMGR_TC_DEVICE_MAX
;

4128 
addrE¡ry
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

4129 
addrE¡ry
.
nwkAddr
 = 
d°Addr
;

4131 
APSME_LookupExtAddr
–
d°Addr
, 
si
->
extAddr
 );

4133 
extAddrFound
 = 
AddrMgrExtAddrVÆid
–
si
->
extAddr
 );

4137  
i
 = 0; i < 
ZDSECMGR_TC_DEVICE_MAX
; i++ )

4140 
oßl_nv_ªad
–(
ZCD_NV_TCLK_TABLE_START
 + 
i
), 0,

4141 (
APSME_TCLökKey_t
), &
tcLökKey
 );

4143 if–
extAddrFound
 && 
AddrMgrExtAddrEquÆ
(
si
->
extAddr
, 
tcLökKey
.extAddr) )

4145 
°©us
 = 
ZSuc˚ss
;

4150 i‡–
APSME_IsDeÁu…TCLK
(
tcLökKey
.
extAddr
) )

4152 i‡–!
extAddrFound
 )

4154 
°©us
 = 
ZSuc˚ss
;

4160 
deÁu…TCLKIdx
 = 
i
;

4164 i‡–(
°©us
 !
ZSuc˚ss
Ë&& (
deÁu…TCLKIdx
 < 
ZDSECMGR_TC_DEVICE_MAX
) )

4167 
i
 = 
deÁu…TCLKIdx
;

4168 
°©us
 = 
ZSuc˚ss
;

4171 i‡–
°©us
 =
ZSuc˚ss
 )

4173 
t˛kTxFrmC¡r
 = &
TCLökKeyFrmC¡r
[
i
].
txFrmC¡r
;

4176 
si
->
keyNvId
 = (
ZCD_NV_TCLK_TABLE_START
 + 
i
);

4179 
si
->
keyID
 = 
SEC_KEYID_LINK
;

4180 
si
->
‰mC¡r
 = *
t˛kTxFrmC¡r
;

4183 (*
t˛kTxFrmC¡r
)++;

4185 #i‡
deföed
 ( 
NV_RESTORE
 )

4187 i‡–!(*
t˛kTxFrmC¡r
 % 
MAX_TCLK_FRAMECOUNTER_CHANGES
) )

4190 
TCLökKeyFrmC¡r
[
i
].
≥ndögFœg
 = 
TRUE
;

4193 
oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_TCLK_FRAMECOUNTER_CHANGE
 );

4199 i‡–(
°©us
 !
ZSuc˚ss
Ë&& (
AddrMgrE¡ryLookupNwk
(&
addrE¡ry
Ë=
TRUE
) )

4201 
AddrMgrE¡ryRñó£
–&
addrE¡ry
 );

4205 
oßl_mem£t
–&
tcLökKey
, 0x00, (
APSME_TCLökKey_t
) );

4207  
°©us
;

4221 
uöt8
 
APSME_IsDeÁu…TCLK
–uöt8 *
extAddr
 )

4223 
uöt8
 
i
 = 0;

4225 if–
extAddr
 =
NULL
 )

4227  
FALSE
;

4230  
i
++ < 
Z_EXTADDR_LEN
 )

4232 if–*
extAddr
++ != 0xFF )

4234  
FALSE
;

4238  
TRUE
;

4253 
ZDSecMgrNwkKeyInô
(
uöt8
 
£tDeÁu…
)

4255 
uöt8
 
°©us
;

4256 
nwkKeyDesc
 
nwkKey
;

4260 
nwkA˘iveKeyIãms
 
keyIãms
;

4262 
oßl_mem£t
–&
keyIãms
, 0, –
nwkA˘iveKeyIãms
 ) );

4264 
°©us
 = 
oßl_nv_ôem_öô
–
ZCD_NV_NWKKEY
, (
nwkA˘iveKeyIãms
), (*)&
keyIãms
 );

4266 #i‡
deföed
 ( 
NV_RESTORE
 )

4268 i‡((
°©us
 =
SUCCESS
Ë&& (
£tDeÁu…
 =
TRUE
))

4271 
oßl_nv_wrôe
–
ZCD_NV_NWKKEY
, 0, (
nwkA˘iveKeyIãms
), &
keyIãms
 );

4274 ()
£tDeÁu…
;

4277 i‡(
°©us
 =
SUCCESS
)

4279 
oßl_nv_wrôe
–
ZCD_NV_NWKKEY
, 0, (
nwkA˘iveKeyIãms
), &
keyIãms
 );

4285 
oßl_mem£t
–&
nwkKey
, 0x00, (nwkKey) );

4287 
°©us
 = 
oßl_nv_ôem_öô
–
ZCD_NV_NWK_ACTIVE_KEY_INFO
, (
nwkKey
), &nwkKey);

4289 #i‡
deföed
 ( 
NV_RESTORE
 )

4291 i‡((
°©us
 =
SUCCESS
Ë&& (
£tDeÁu…
 =
TRUE
))

4294 
oßl_nv_wrôe
–
ZCD_NV_NWK_ACTIVE_KEY_INFO
, 0, (
nwkKey
), &nwkKey );

4298 i‡(
°©us
 =
SUCCESS
)

4300 
oßl_nv_wrôe
–
ZCD_NV_NWK_ACTIVE_KEY_INFO
, 0, (
nwkKey
), &nwkKey );

4304 
°©us
 = 
oßl_nv_ôem_öô
–
ZCD_NV_NWK_ALTERN_KEY_INFO
, (
nwkKey
), &nwkKey );

4306 #i‡
deföed
 ( 
NV_RESTORE
 )

4308 i‡((
°©us
 =
SUCCESS
Ë&& (
£tDeÁu…
 =
TRUE
))

4311 
oßl_nv_wrôe
–
ZCD_NV_NWK_ALTERN_KEY_INFO
, 0, (
nwkKey
), &nwkKey );

4315 i‡(
°©us
 =
SUCCESS
)

4317 
oßl_nv_wrôe
–
ZCD_NV_NWK_ALTERN_KEY_INFO
, 0, (
nwkKey
), &nwkKey );

4342 
ZSètus_t
 
ZDSecMgrRódKeyFromNv
(
uöt16
 
keyNvId
, *
keyöfo
)

4344 i‡((
keyNvId
 =
ZCD_NV_NWK_ACTIVE_KEY_INFO
) ||

4345 (
keyNvId
 =
ZCD_NV_NWK_ALTERN_KEY_INFO
))

4348  (
oßl_nv_ªad
(
keyNvId
,

4349 
oßl_off£tof
(
nwkKeyDesc
, 
key
),

4350 
SEC_KEY_LEN
,

4351 
keyöfo
));

4353 i‡((
keyNvId
 >
ZCD_NV_TCLK_TABLE_START
) &&

4354 (
keyNvId
 < (
ZCD_NV_TCLK_TABLE_START
 + 
ZDSECMGR_TC_DEVICE_MAX
)))

4358  (
oßl_nv_ªad
(
keyNvId
,

4359 
oßl_off£tof
(
APSME_TCLökKey_t
, 
key
),

4360 
SEC_KEY_LEN
,

4361 
keyöfo
));

4363 i‡((
keyNvId
 >
ZCD_NV_APS_LINK_KEY_DATA_START
) &&

4364 (
keyNvId
 < (
ZCD_NV_APS_LINK_KEY_DATA_START
 + 
ZDSECMGR_ENTRY_MAX
)))

4368  (
oßl_nv_ªad
(
keyNvId
,

4369 
oßl_off£tof
(
APSME_LökKeyD©a_t
, 
key
),

4370 
SEC_KEY_LEN
,

4371 
keyöfo
));

4373 i‡((
keyNvId
 >
ZCD_NV_MASTER_KEY_DATA_START
) &&

4374 (
keyNvId
 < (
ZCD_NV_MASTER_KEY_DATA_START
 + 
ZDSECMGR_MASTERKEY_MAX
)))

4378  (
oßl_nv_ªad
(
keyNvId
,

4379 
oßl_off£tof
(
ZDSecMgrMa°îKeyD©a_t
, 
key
),

4380 
SEC_KEY_LEN
,

4381 
keyöfo
));

4383 i‡(
keyNvId
 =
ZCD_NV_PRECFGKEY
)

4386  (
oßl_nv_ªad
(
keyNvId
,

4388 
SEC_KEY_LEN
,

4389 
keyöfo
));

4392  
NV_OPER_FAILED
;

4404 
ZDSecMgrApsLökKeyInô
()

4406 
APSME_LökKeyD©a_t
 
pApsLökKey
;

4407 
uöt8
 
i
;

4408 
uöt8
 
°©us
;

4411 
oßl_mem£t
–&
pApsLökKey
, 0x00, (
APSME_LökKeyD©a_t
) );

4413  
i
 = 0; i < 
ZDSECMGR_ENTRY_MAX
; i++ )

4415 
°©us
 = 
oßl_nv_ôem_öô
–(
ZCD_NV_APS_LINK_KEY_DATA_START
 + 
i
),

4416 (
APSME_LökKeyD©a_t
), &
pApsLökKey
 );

4418 #i‡
deföed
 ( 
NV_RESTORE
 )

4419 ()
°©us
;

4422 i‡(
°©us
 =
SUCCESS
)

4424 
oßl_nv_wrôe
–(
ZCD_NV_APS_LINK_KEY_DATA_START
 + 
i
), 0,

4425 (
APSME_LökKeyD©a_t
), &
pApsLökKey
 );

4441 
ZDSecMgrInôNVKeyTabÀs
(
uöt8
 
£tDeÁu…
)

4443 
ZDSecMgrNwkKeyInô
(
£tDeÁu…
);

4444 
ZDSecMgrMa°îKeyInô
();

4445 
ZDSecMgrApsLökKeyInô
();

4446 
APSME_TCLökKeyInô
(
£tDeÁu…
);

4459 
ZDSecMgrSaveApsLökKey
()

4461 
APSME_LökKeyD©a_t
 *
pKeyD©a
 = 
NULL
;

4462 
i
;

4464 
pKeyD©a
 = (
APSME_LökKeyD©a_t
 *)
oßl_mem_Æloc
((APSME_LinkKeyData_t));

4466 i‡(
pKeyD©a
 !
NULL
)

4469 
i
 = 0; i < 
ZDSECMGR_ENTRY_MAX
; i++)

4471 i‡(
ApsLökKeyFrmC¡r
[
i
].
≥ndögFœg
 =
TRUE
)

4474 i‡(
oßl_nv_ªad
(
ZCD_NV_APS_LINK_KEY_DATA_START
 + 
i
, 0,

4475 (
APSME_LökKeyD©a_t
), 
pKeyD©a
Ë=
SUCCESS
)

4477 
pKeyD©a
->
txFrmC¡r
 = 
ApsLökKeyFrmC¡r
[
i
].txFrmCntr;

4478 
pKeyD©a
->
rxFrmC¡r
 = 
ApsLökKeyFrmC¡r
[
i
].rxFrmCntr;

4481 
oßl_nv_wrôe
(
ZCD_NV_APS_LINK_KEY_DATA_START
 + 
i
, 0,

4482 (
APSME_LökKeyD©a_t
), 
pKeyD©a
);

4485 
ApsLökKeyFrmC¡r
[
i
].
≥ndögFœg
 = 
FALSE
;

4491 
oßl_mem£t
–
pKeyD©a
, 0x00, (
APSME_LökKeyD©a_t
) );

4493 
oßl_mem_‰ì
(
pKeyD©a
);

4507 
ZDSecMgrSaveTCLökKey
()

4509 
APSME_TCLökKey_t
 *
pKeyD©a
 = 
NULL
;

4510 
uöt16
 
i
;

4512 
pKeyD©a
 = (
APSME_TCLökKey_t
 *)
oßl_mem_Æloc
((APSME_TCLinkKey_t));

4514 i‡(
pKeyD©a
 !
NULL
)

4516  
i
 = 0; i < 
ZDSECMGR_TC_DEVICE_MAX
; i++ )

4518 i‡(
TCLökKeyFrmC¡r
[
i
].
≥ndögFœg
 =
TRUE
)

4520 i‡(
oßl_nv_ªad
(
ZCD_NV_TCLK_TABLE_START
 + 
i
, 0,

4521 (
APSME_TCLökKey_t
), 
pKeyD©a
Ë=
SUCCESS
)

4523 
pKeyD©a
->
txFrmC¡r
 = 
TCLökKeyFrmC¡r
[
i
].txFrmCntr;

4524 
pKeyD©a
->
rxFrmC¡r
 = 
TCLökKeyFrmC¡r
[
i
].rxFrmCntr;

4527 
oßl_nv_wrôe
(
ZCD_NV_TCLK_TABLE_START
 + 
i
, 0,

4528 (
APSME_TCLökKey_t
), 
pKeyD©a
);

4531 
TCLökKeyFrmC¡r
[
i
].
≥ndögFœg
 = 
FALSE
;

4536 
oßl_mem£t
–
pKeyD©a
, 0x00, (
APSME_TCLökKey_t
) );

4538 
oßl_mem_‰ì
(
pKeyD©a
);

4542 #i‡
deföed
 ( 
ZBA_FALLBACK_NWKKEY
 )

4552 
ZDSecMgrFÆlbackNwkKey
( )

4554 i‡–!
_NIB
.
nwkKeyLﬂded
 )

4556 
uöt8
 
ÁŒbackKey
[
SEC_KEY_LEN
];

4558 
ZDSecMgrRódKeyFromNv
–
ZCD_NV_PRECFGKEY
, 
ÁŒbackKey
 );

4559 
SSP_Upd©eNwkKey
–
ÁŒbackKey
, 0);

4560 
SSP_SwôchNwkKey
( 0 );

4563 
oßl_mem£t
–
ÁŒbackKey
, 0x00, 
SEC_KEY_LEN
 );

4566 
ZDSecMgrAuthNwkKey
();

4571 #i‡
deföed
 ( 
NV_RESTORE
 )

4583 
ZDSecMgrCÀ¨NVKeyVÆues
()

4585 
nwkA˘iveKeyIãms
 
keyIãms
;

4586 
nwkKeyDesc
 
nwkKey
;

4588 
oßl_mem£t
(&
keyIãms
, 0x00, (
nwkA˘iveKeyIãms
));

4590 
oßl_nv_wrôe
(
ZCD_NV_NWKKEY
, 0, (
nwkA˘iveKeyIãms
), &
keyIãms
);

4593 
oßl_mem£t
–&
nwkKey
, 0x00, (
nwkKeyDesc
) );

4595 
oßl_nv_wrôe
(
ZCD_NV_NWK_ACTIVE_KEY_INFO
, 0, (
nwkKeyDesc
), &
nwkKey
);

4597 
oßl_nv_wrôe
(
ZCD_NV_NWK_ALTERN_KEY_INFO
, 0, (
nwkKeyDesc
), &
nwkKey
);

	@Components/stack/zdo/ZDSecMgr.h

40 #i‚de‡
ZDSECMGR_H


41 
	#ZDSECMGR_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"ZDAµ.h
"

61 
ZDSecMgr_NŸ_Authítiˇãd
 = 0,

62 
ZDSecMgr_Authítiˇãd_CBCK
,

63 
ZDSecMgr_Authítiˇãd_EA


64 }
	tZDSecMgr_Authítiˇti⁄_O±i⁄
;

78 
ZDSecMgrInô
(
uöt8
 
°©e
);

89 
ZDSecMgrC⁄fig
( );

102 
uöt8
 
ZDSecMgrPîmôJoöög
–uöt8 
duøti⁄
 );

113 
ZDSecMgrPîmôJoöögTimeout
( );

125 
uöt8
 
ZDSecMgrNewDevi˚Evít
( );

136 
ZDSecMgrEvít
( );

147 
ZDSecMgrE°ablishKeyCfm
–
ZDO_E°ablishKeyCfm_t
* 
cfm
 );

158 
ZDSecMgrE°ablishKeyInd
–
ZDO_E°ablishKeyInd_t
* 
öd
 );

169 
ZDSecMgrTøn•‹tKeyInd
–
ZDO_Tøn•‹tKeyInd_t
* 
öd
 );

180 
ZDSecMgrUpd©eDevi˚Ind
–
ZDO_Upd©eDevi˚Ind_t
* 
öd
 );

191 
ZDSecMgrRemoveDevi˚Ind
–
ZDO_RemoveDevi˚Ind_t
* 
öd
 );

202 
ZDSecMgrReque°KeyInd
–
ZDO_Reque°KeyInd_t
* 
öd
 );

213 
ZDSecMgrSwôchKeyInd
–
ZDO_SwôchKeyInd_t
* 
öd
 );

224 
ZDSecMgrAuthítiˇãInd
–
ZDO_AuthítiˇãInd_t
* 
öd
 );

235 
ZDSecMgrAuthítiˇãCfm
–
ZDO_AuthítiˇãCfm_t
* 
cfm
 );

247 
ZSètus_t
 
ZDSecMgrUpd©eNwkKey
–
uöt8
* 
key
, uöt8 
keySeqNum
, 
uöt16
 
d°Addr
 );

258 
ZSètus_t
 
ZDSecMgrSwôchNwkKey
–
uöt8
 
keySeqNum
, 
uöt16
 
d°Addr
 );

269 
ZSètus_t
 
ZDSecMgrReque°AµKey
–
uöt8
 *
∑πExtAddr
 );

281 
ZSètus_t
 
ZDSecMgrSëupP¨äî
–
uöt16
 
∑πNwkAddr
, 
uöt8
* 
∑πExtAddr
 );

293 
ZSètus_t
 
ZDSecMgrAµKeyTy≥Së
–
uöt8
 
keyTy≥
 );

306 
ZSètus_t
 
ZDSecMgrAddLökKey
–
uöt16
 
sh‹tAddr
, 
uöt8
 *
extAddr
, uöt8 *
key
);

317 
ZSètus_t
 
ZDSecMgrDevi˚RemoveByExtAddr
–
uöt8
 *
pAddr
 );

328 
ZSètus_t
 
ZDSecMgrAddrCÀ¨
–
uöt8
* 
extAddr
 );

339 
uöt8
 
ZDSecMgrInôNV
( );

350 
ZDSecMgrSëDeÁu…NV
( );

363 
ZSètus_t
 
ZDSecMgrAPSRemove
–
uöt16
 
nwkAddr
, 
uöt8
 *
extAddr
, uöt16 
∑ª¡Addr
 );

376 
uöt8
 
ZDSecMgrAuthítiˇti⁄Check
–
uöt16
 
sh‹tAddr
 );

388 
ZSètus_t
 
APSME_TCLökKeySync
–
uöt16
 
§cAddr
, 
SSP_Info_t
* 
si
 );

400 
ZSètus_t
 
APSME_TCLökKeyLﬂd
–
uöt16
 
d°Addr
, 
SSP_Info_t
* 
si
 );

421 
ZSètus_t
 
ZDSecMgrRódKeyFromNv
(
uöt16
 
keyNvId
, *
keyöfo
);

432 
ZDSecMgrInôNVKeyTabÀs
(
uöt8
 
£tDeÁu…
);

444 
ZDSecMgrSaveApsLökKey
();

456 
ZDSecMgrSaveTCLökKey
();

469 
ZDSecMgrCÀ¨NVKeyVÆues
();

480 
ZDSecMgrFÆlbackNwkKey
( );

485 #ifde‡
__˝lu•lus


	@Components/zmac/ZMAC.h

40 #i‚de‡
ZMAC_H


41 
	#ZMAC_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"ZComDef.h
"

53 
	~"zmac_öã∫Æ.h
"

60 #i‚de‡
ZMAC_MAX_BEACON_PAYLOAD_LEN


61 
	#ZMAC_MAX_BEACON_PAYLOAD_LEN
 (7 + 
Z_EXTADDR_LEN
)

	)

68 #i‡
deföed
–
MAC_API_H
 )

69 
	#ZMAC_CHAN_MASK
 ( \

70 
MAC_CHAN_11_MASK
 | \

71 
MAC_CHAN_12_MASK
 | \

72 
MAC_CHAN_13_MASK
 | \

73 
MAC_CHAN_14_MASK
 | \

74 
MAC_CHAN_15_MASK
 | \

75 
MAC_CHAN_16_MASK
 | \

76 
MAC_CHAN_17_MASK
 | \

77 
MAC_CHAN_18_MASK
 | \

78 
MAC_CHAN_19_MASK
 | \

79 
MAC_CHAN_20_MASK
 | \

80 
MAC_CHAN_21_MASK
 | \

81 
MAC_CHAN_22_MASK
 | \

82 
MAC_CHAN_23_MASK
 | \

83 
MAC_CHAN_24_MASK
 | \

84 
MAC_CHAN_25_MASK
 | \

85 
MAC_CHAN_26_MASK
 | \

86 
MAC_CHAN_27_MASK
 | \

87 
MAC_CHAN_28_MASK
 )

	)

89 
	#ZMAC_CHAN_MASK
 0x07FFF800

	)

93 #i‡!
deföed
–
LQI_CORR_MIN
 )

94 
	#LQI_CORR_MIN
 50

	)

96 #i‡!
deföed
–
LQI_CORR_MAX
 )

97 
	#LQI_CORR_MAX
 110

	)

107 
uöt8
 
Evít
;

108 
uöt8
 
Sètus
;

109 } 
	tZMacEvítHdr_t
;

114 
uöt8
 
KeySour˚
[
ZMAC_KEY_SOURCE_MAX_LEN
];

115 
uöt8
 
SecurôyLevñ
;

116 
uöt8
 
KeyIdMode
;

117 
uöt8
 
KeyIndex
;

118 }
	tZMacSec_t
;

123 
zAddrTy≥_t
 
Co‹dAddªss
;

124 
uöt16
 
Co‹dPANId
;

125 
uöt16
 
Su≥r‰ameS≥c
;

126 
uöt8
 
LogiˇlCh™√l
;

127 
uöt8
 
Ch™√lPage
;

128 
uöt8
 
GTSPîmô
;

129 
uöt8
 
LökQuÆôy
;

130 
uöt32
 
TimeSèmp
;

131 
uöt8
 
SecurôyFaûuª
;

132 
ZMacSec_t
 
Sec
;

133 } 
	tZMacP™Desc_t
;

138 
ZMacEvítHdr_t
 
hdr
;

139 
zAddrTy≥_t
 
SrcAddªss
;

140 
zAddrTy≥_t
 
D°Addªss
;

141 
uöt16
 
PANId
;

142 
uöt8
 
Rós⁄
;

143 
ZMacSec_t
 
Sec
;

144 } 
	tZMacCommSètusInd_t
;

150 
uöt8
 
LogiˇlCh™√l
;

151 
uöt8
 
Ch™√lPage
;

152 
uöt8
 
TøckBóc⁄
;

154 }
	tZMacSyncReq_t
;

161 
zAddrTy≥_t
 
D°Addr
;

162 
uöt16
 
D°PANId
;

163 
uöt8
 
SrcAddrMode
;

164 
uöt8
 
H™dÀ
;

165 
uöt8
 
TxO±i⁄s
;

166 
uöt8
 
Ch™√l
;

167 
uöt8
 
Powî
;

168 
ZMacSec_t
 
Sec
;

169 
uöt8
 
msduLígth
;

170 
uöt8
 *
msdu
;

171 } 
	tZMacD©aReq_t
;

176 
ZMacEvítHdr_t
 
hdr
;

177 
uöt8
 
msduH™dÀ
;

178 
ZMacD©aReq_t
 *
pD©aReq
;

179 
uöt32
 
Time°amp
;

180 
uöt16
 
Time°amp2
;

181 
uöt8
 
ªåõs
;

182 
uöt8
 
mpduLökQuÆôy
;

183 
uöt8
 
c‹ªœti⁄
;

184 
öt8
 
rssi
;

185 } 
	tZMacD©aCnf_t
;

193 
uöt8
 
LogiˇlCh™√l
;

194 
uöt8
 
Ch™√lPage
;

195 
zAddrTy≥_t
 
Co‹dAddªss
;

196 
uöt16
 
Co‹dPANId
;

197 
uöt8
 
C≠abûôyFœgs
;

198 
ZMacSec_t
 
Sec
;

199 } 
	tZMacAssocüãReq_t
;

204 
ZL⁄gAddr_t
 
Devi˚Addªss
;

205 
uöt16
 
AssocSh‹tAddªss
;

206 
uöt8
 
Sètus
;

207 
ZMacSec_t
 
Sec
;

208 } 
	tZMacAssocüãR•_t
;

213 
ZMacEvítHdr_t
 
hdr
;

214 
ZL⁄gAddr_t
 
Devi˚Addªss
;

215 
uöt8
 
C≠abûôyFœgs
;

216 
ZMacSec_t
 
Sec
;

217 } 
	tZMacAssocüãInd_t
;

222 
ZMacEvítHdr_t
 
hdr
;

223 
uöt16
 
AssocSh‹tAddªss
;

224 
ZMacSec_t
 
Sec
;

225 } 
	tZMacAssocüãCnf_t
;

230 
zAddrTy≥_t
 
Devi˚Addªss
;

231 
uöt16
 
Devi˚P™Id
;

232 
uöt8
 
DißssocüãRós⁄
;

233 
uöt8
 
TxIndúe˘
;

234 
ZMacSec_t
 
Sec
;

235 } 
	tZMacDißssocüãReq_t
;

240 
ZMacEvítHdr_t
 
hdr
;

241 } 
	tZMacRxE«bÀCnf_t
;

247 
uöt32
 
SˇnCh™√ls
;

248 
uöt8
 
SˇnTy≥
;

249 
uöt8
 
SˇnDuøti⁄
;

250 
uöt8
 
Ch™√lPage
;

251 
uöt8
 
MaxResu…s
;

252 
ZMacSec_t
 
Sec
;

255 
uöt8
 *
pE√rgyDëe˘
;

256 
ZMacP™Desc_t
 *
pP™Des¸ùt‹
;

257 }
Resu…
;

258 } 
	tZMacSˇnReq_t
;

263 
ZMacEvítHdr_t
 
hdr
;

264 
uöt8
 
SˇnTy≥
;

265 
uöt8
 
Ch™√lPage
;

266 
uöt32
 
Unsˇ¬edCh™√ls
;

267 
uöt8
 
Resu…Li°Size
;

270 
uöt8
 *
pE√rgyDëe˘
;

271 
ZMacP™Desc_t
 *
pP™Des¸ùt‹
;

272 }
Resu…
;

273 } 
	tZMacSˇnCnf_t
;

280 
uöt32
 
SèπTime
;

281 
uöt16
 
PANID
;

282 
uöt8
 
LogiˇlCh™√l
;

283 
uöt8
 
Ch™√lPage
;

284 
uöt8
 
Bóc⁄Ordî
;

285 
uöt8
 
Su≥r‰ameOrdî
;

286 
uöt8
 
PANCo‹dö©‹
;

287 
uöt8
 
B©ãryLi„Ext
;

288 
uöt8
 
Co‹dRólignmít
;

289 
ZMacSec_t
 
RólignSec
;

290 
ZMacSec_t
 
Bóc⁄Sec
;

291 } 
	tZMacSèπReq_t
;

296 
ZMacEvítHdr_t
 
hdr
;

297 } 
	tZMacSèπCnf_t
;

303 
zAddrTy≥_t
 
Co‹dAddªss
;

304 
uöt16
 
Co‹dP™Id
;

305 
ZMacSec_t
 
Sec
;

306 } 
	tZMacPﬁlReq_t
;

311 
ZMacEvítHdr_t
 
hdr
;

312 } 
	tZMacPﬁlCnf_t
;

317 
ZMacEvítHdr_t
 
hdr
;

318 
uöt16
 
§cSh‹tAddr
;

319 
uöt16
 
§cP™Id
;

320 } 
	tZMacPﬁlInd_t
;

326 
ZL⁄gAddr_t
 
OΩh™Addªss
;

327 
uöt16
 
Sh‹tAddªss
;

328 
uöt8
 
AssocüãdMembî
;

329 
ZMacSec_t
 
Sec
;

330 } 
	tZMacOΩh™R•_t
;

335 
ZMacEvítHdr_t
 
hdr
;

336 
ZL⁄gAddr_t
 
OΩh™Addªss
;

337 
ZMacSec_t
 
Sec
;

338 } 
	tZMacOΩh™Ind_t
;

340 #i‡
deföed
 (
MT_MAC_FUNC
Ë|| deföed (
MT_MAC_CB_FUNC
)

345 
ZMacEvítHdr_t
 
hdr
;

346 
uöt16
 
PANId
;

347 
uöt8
 
LogiˇlCh™√l
;

348 
uöt8
 
Ch™√lPage
;

349 
ZMacSec_t
 
Sec
;

350 } 
	tZMacSyncLossInd_t
;

355 
ZMacEvítHdr_t
 
hdr
;

356 
ZMacSec_t
 
Sec
;

357 
zAddrTy≥_t
 
SrcAddr
;

358 
zAddrTy≥_t
 
D°Addr
;

359 
uöt32
 
Time°amp
;

360 
uöt16
 
Time°amp2
;

361 
uöt16
 
SrcPANId
;

362 
uöt16
 
D°PANId
;

363 
uöt8
 
mpduLökQuÆôy
;

364 
uöt8
 
C‹ªœti⁄
;

365 
uöt8
 
Rssi
;

366 
uöt8
 
D¢
;

367 
uöt8
 
msduLígth
;

368 
uöt8
 *
msdu
;

369 } 
	tZMacD©aInd_t
;

374 
ZMacEvítHdr_t
 
hdr
;

375 
ZL⁄gAddr_t
 
Devi˚Addªss
;

376 
uöt8
 
DißssocüãRós⁄
;

377 
ZMacSec_t
 
Sec
;

378 } 
	tZMacDißssocüãInd_t
;

383 
ZMacEvítHdr_t
 
hdr
;

384 
zAddrTy≥_t
 
Devi˚Addªss
;

385 
uöt16
 
∑nID
;

386 } 
	tZMacDißssocüãCnf_t
;

391 
ZMacEvítHdr_t
 
hdr
;

392 
uöt8
 
BSN
;

393 
ZMacP™Desc_t
 *
pP™Desc
;

394 
uöt8
 
PídAddrS≥c
;

395 
uöt8
 *
AddrLi°
;

396 
uöt8
 
sduLígth
;

397 
uöt8
 *
sdu
;

398 } 
	tZMacBóc⁄NŸifyInd_t
;

403 
ZMacEvítHdr_t
 
hdr
;

404 
uöt8
 
msduH™dÀ
;

405 } 
	tZMacPurgeCnf_t
;

410 
TX_PWR_MINUS_22
 = -22,

411 
TX_PWR_MINUS_21
,

412 
TX_PWR_MINUS_20
,

413 
TX_PWR_MINUS_19
,

414 
TX_PWR_MINUS_18
,

415 
TX_PWR_MINUS_17
,

416 
TX_PWR_MINUS_16
,

417 
TX_PWR_MINUS_15
,

418 
TX_PWR_MINUS_14
,

419 
TX_PWR_MINUS_13
,

420 
TX_PWR_MINUS_12
,

421 
TX_PWR_MINUS_11
,

422 
TX_PWR_MINUS_10
,

423 
TX_PWR_MINUS_9
,

424 
TX_PWR_MINUS_8
,

425 
TX_PWR_MINUS_7
,

426 
TX_PWR_MINUS_6
,

427 
TX_PWR_MINUS_5
,

428 
TX_PWR_MINUS_4
,

429 
TX_PWR_MINUS_3
,

430 
TX_PWR_MINUS_2
,

431 
TX_PWR_MINUS_1
,

432 
TX_PWR_ZERO
,

433 
TX_PWR_PLUS_1
,

434 
TX_PWR_PLUS_2
,

435 
TX_PWR_PLUS_3
,

436 
TX_PWR_PLUS_4
,

437 
TX_PWR_PLUS_5
,

438 
TX_PWR_PLUS_6
,

439 
TX_PWR_PLUS_7
,

440 
TX_PWR_PLUS_8
,

441 
TX_PWR_PLUS_9
,

442 
TX_PWR_PLUS_10
,

443 
TX_PWR_PLUS_11
,

444 
TX_PWR_PLUS_12
,

445 
TX_PWR_PLUS_13
,

446 
TX_PWR_PLUS_14
,

447 
TX_PWR_PLUS_15
,

448 
TX_PWR_PLUS_16
,

449 
TX_PWR_PLUS_17
,

450 
TX_PWR_PLUS_18
,

451 
TX_PWR_PLUS_19


452 } 
	tZMacTønsmôPowî_t
;

456 
byã
 
¥ŸocﬁID
;

457 
byã
 
°ackProfûe
;

458 
byã
 
¥ŸocﬁVîsi⁄
;

459 
byã
 
ª£rved
;

460 
byã
 
rouãrC≠acôy
;

461 
byã
 
devi˚Dïth
;

462 
byã
 
devi˚C≠acôy
;

463 
byã
 
exãndedPANID
[
Z_EXTADDR_LEN
];

464 
byã
 
txOff£t
[3];

465 
byã
 
upd©eId
;

466 } 
	tbóc⁄Paylﬂd_t
;

468 
uöt8
 (*
	t≠∂ySecCB_t
)–
	tuöt8
 
	tÀn
, uöt8 *
	tmsdu
 );

472 
LQI_ADJ_OFF
 = 0,

473 
LQI_ADJ_MODE1
,

474 
LQI_ADJ_MODE2
,

475 
LQI_ADJ_GET
 = 0xFF

476 } 
	tZMacLqiAdju°_t
;

481 
	#NWK_CMD_ID_LEN
 –
byã
 )

	)

490 
ZMacSètus_t
 
ZMacInô
( );

495 
ZMacSètus_t
 
ZMacD©aReq
–
ZMacD©aReq_t
 *
∑øm
 );

500 
uöt8
 
ZMacD©aReqSec
–
ZMacD©aReq_t
 *
pD©a
, 
≠∂ySecCB_t
 
£cCB
 );

505 
ZMacSètus_t
 
ZMacAssocüãReq
–
ZMacAssocüãReq_t
 *
∑øm
 );

510 
ZMacSètus_t
 
ZMacAssocüãR•
–
ZMacAssocüãR•_t
 *
∑øm
 );

515 
ZMacSètus_t
 
ZMacDißssocüãReq
–
ZMacDißssocüãReq_t
 *
∑øm
 );

521 
byã
 
ZMacUpd©e
( );

526 
ZMacSètus_t
 
ZMacGëReq
–
ZMacAâribuãs_t
 
©å
, 
byã
 *
vÆue
 );

532 
ZMacSètus_t
 
ZMacOΩh™R•
–
ZMacOΩh™R•_t
 *
∑øm
 );

537 
ZMacSètus_t
 
ZMacPﬁlReq
–
ZMacPﬁlReq_t
 *
∑øm
 );

542 
ZMacSètus_t
 
ZMacRe£t
–
byã
 
SëDeÁu…PIB
 );

547 
ZMacSètus_t
 
ZMacSˇnReq
–
ZMacSˇnReq_t
 *
∑øm
 );

552 
ZMacSètus_t
 
ZMacSëReq
–
ZMacAâribuãs_t
 
©å
, 
byã
 *
vÆue
 );

554 #ifde‡
MAC_SECURITY


558 
ZMacSètus_t
 
ZMacSecurôyGëReq
–
ZMacAâribuãs_t
 
©å
, 
byã
 *
vÆue
 );

563 
ZMacSètus_t
 
ZMacSecurôySëReq
–
ZMacAâribuãs_t
 
©å
, 
byã
 *
vÆue
 );

570 
ZMacSètus_t
 
ZMacSèπReq
–
ZMacSèπReq_t
 *
∑øm
 );

576 
ZMacSètus_t
 
ZMacSyncReq
–
ZMacSyncReq_t
 *
∑øm
 );

582 
ZMacSètus_t
 
ZMacCÀ™Req
( );

587 
ZMacSètus_t
 
ZMacPurgeReq
–
byã
 
msduH™dÀ
 );

592 
ZMacSètus_t
 
ZMacSrcM©chE«bÀ
 (
uöt8
 
addrTy≥
, uöt8 
numE¡rõs
);

597 
ZMacSètus_t
 
ZMacSrcM©chAddE¡ry
 (
zAddrTy≥_t
 *
addr
, 
uöt16
 
∑nID
);

602 
ZMacSètus_t
 
ZMacSrcM©chDñëeE¡ry
 (
zAddrTy≥_t
 *
addr
, 
uöt16
 
∑nID
);

607 
ZMacSètus_t
 
ZMacSrcM©chAckAŒPídög
 (
uöt8
 
›ti⁄
);

612 
ZMacSètus_t
 
ZMacSrcM©chCheckAŒPídög
 ();

617 
ZMacPwrOnReq
 ( );

622 
uöt8
 
ZMac_PwrMode
();

627 
ZMacSètus_t
 
ZMacSëTønsmôPowî
–
ZMacTønsmôPowî_t
 
Àvñ
 );

632 
ZMacSídNoD©a
–
uöt16
 
D°Addr
, uöt16 
D°PANId
 );

638 
uöt8
 (*
pZMac_AµCÆlback
)–uöt8 *
msgPå
 );

643 
uöt8
 
ZMacSèãIdÀ
( );

648 
ZMacLqiAdju°_t
 
ZMacLqiAdju°Mode
–ZMacLqiAdju°_à
mode
 );

653 #ifde‡
__˝lu•lus


	@Components/zmac/f8w/zmac.c

45 
	~"ZComDef.h
"

46 
	~"OSAL.h
"

47 
	~"ZMAC.h
"

48 
	~"mac_maö.h
"

49 
	~"s•.h
"

51 #i‡!
deföed
 
NONWK


52 
	~"ZGlobÆs.h
"

66 
uöt32
 
	g_SˇnCh™√ls
;

68 
uöt8
 
aExãndedAddªss
[];

86 
MAC_SëR™domSìdCB
(
macRNGF˙_t
 
pCBF˙
);

92 *
	gZMac_SˇnBuf
 = 
NULL
;

116 
uöt8
 
	$ZMacInô
( )

118 
uöt8
 
°©
;

120 #i‡
	`deföed
–
ZCL_KEY_ESTABLISH
 )

122 
	`MAC_SëR™domSìdCB
–
SSP_St‹eR™domSìdNV
);

125 
	`MAC_Inô
();

126 
	`MAC_InôDevi˚
();

128 #i‡!
deföed
 
NONWK


129 i‡–
ZG_BUILD_RTR_TYPE
 )

131 
	`MAC_InôCo‹d
();

136 
°©
 = 
	`ZMacRe£t
–
TRUE
 );

139 
	`oßl_öt_dißbÀ
–
INTS_ALL
 );

141  ( 
°©
 );

142 
	}
}

153 
uöt8
 
	$ZMacRe£t
–
boﬁ
 
SëDeÁu…PIB
 )

155 
byã
 
°©
;

156 
byã
 
vÆue
;

158 
°©
 = 
	`MAC_MlmeRe£tReq
–
SëDeÁu…PIB
 );

161 
vÆue
 = 
FALSE
;

162 
	`MAC_MlmeSëReq
–
MAC_ASSOCIATED_PAN_COORD
, &
vÆue
 );

163 
	`MAC_MlmeSëReq
–
MAC_EXTENDED_ADDRESS
, &
aExãndedAddªss
 );

165 i‡(
ZMac_SˇnBuf
)

167 
	`oßl_mem_‰ì
(
ZMac_SˇnBuf
);

168 
ZMac_SˇnBuf
 = 
NULL
;

171  ( 
°©
 );

172 
	}
}

185 
uöt8
 
	$ZMacGëReq
–
uöt8
 
©å
, uöt8 *
vÆue
 )

187 i‡–
©å
 =
ZMacExtAddr
 )

189 
	`oßl_˝yExtAddr
–
vÆue
, &
aExãndedAddªss
 );

190  
ZMacSuc˚ss
;

193  (
ZMacSètus_t
Ë
	`MAC_MlmeGëReq
–
©å
, 
vÆue
 );

194 
	}
}

207 
uöt8
 
	$ZMacSëReq
–
uöt8
 
©å
, 
byã
 *
vÆue
 )

209 i‡–
©å
 =
ZMacExtAddr
 )

211 
	`oßl_˝yExtAddr
–
aExãndedAddªss
, 
vÆue
 );

214  (
ZMacSètus_t
Ë
	`MAC_MlmeSëReq
–
©å
, 
vÆue
 );

215 
	}
}

217 #ifde‡
MAC_SECURITY


228 
uöt8
 
	$ZMacSecurôyGëReq
–
uöt8
 
©å
, uöt8 *
vÆue
 )

230  (
ZMacSètus_t
Ë
	`MAC_MlmeGëSecurôyReq
–
©å
, 
vÆue
 );

231 
	}
}

244 
uöt8
 
	$ZMacSecurôySëReq
–
uöt8
 
©å
, 
byã
 *
vÆue
 )

246  (
ZMacSètus_t
Ë
	`MAC_MlmeSëSecurôyReq
–
©å
, 
vÆue
 );

247 
	}
}

259 
uöt8
 
	$ZMacAssocüãReq
–
ZMacAssocüãReq_t
 *
pD©a
 )

262 
pD©a
->
Sec
.
SecurôyLevñ
 = 
Ál£
;

264 
	`MAC_MlmeAssocüãReq
 ( (
macMlmeAssocüãReq_t
 *)
pD©a
);

265  ( 
ZMacSuc˚ss
 );

266 
	}
}

277 
uöt8
 
	$ZMacAssocüãR•
–
ZMacAssocüãR•_t
 *
pD©a
 )

280 
pD©a
->
Sec
.
SecurôyLevñ
 = 
Ál£
;

282  ( 
	`MAC_MlmeAssocüãR•
–(
macMlmeAssocüãR•_t
 *Ë
pD©a
 ) );

283 
	}
}

294 
uöt8
 
	$ZMacDißssocüãReq
–
ZMacDißssocüãReq_t
 *
pD©a
 )

297 
pD©a
->
Sec
.
SecurôyLevñ
 = 
Ál£
;

299 
	`MAC_MlmeDißssocüãReq
–(
macMlmeDißssocüãReq_t
 *)
pD©a
);

300  ( 
ZMacSuc˚ss
 );

301 
	}
}

312 
uöt8
 
	$ZMacOΩh™R•
–
ZMacOΩh™R•_t
 *
pD©a
 )

315 
pD©a
->
Sec
.
SecurôyLevñ
 = 
Ál£
;

317 
	`MAC_MlmeOΩh™R•
–(
macMlmeOΩh™R•_t
 *)
pD©a
);

318  ( 
ZMacSuc˚ss
 );

319 
	}
}

330 
uöt8
 
	$ZMacSˇnReq
–
ZMacSˇnReq_t
 *
pD©a
 )

332 
_SˇnCh™√ls
 = 
pD©a
->
SˇnCh™√ls
;

335 i‡(
ZMac_SˇnBuf
 !
NULL
)

337  
MAC_SCAN_IN_PROGRESS
;

340 i‡(
pD©a
->
SˇnTy≥
 !
ZMAC_ORPHAN_SCAN
)

343 i‡(
pD©a
->
SˇnTy≥
 =
ZMAC_ED_SCAN
)

345 i‡((
ZMac_SˇnBuf
 = 
	`oßl_mem_Æloc
(
ZMAC_ED_SCAN_MAXCHANNELS
)Ë=
NULL
)

347  
MAC_NO_RESOURCES
;

349 
	`oßl_mem£t
(
ZMac_SˇnBuf
, 0, 
ZMAC_ED_SCAN_MAXCHANNELS
);

350 
pD©a
->
Resu…
.
pE√rgyDëe˘
 = ((
uöt8
*)
ZMac_SˇnBuf
Ë+ 
MAC_CHAN_11
;

352 i‡(
pD©a
->
MaxResu…s
 > 0)

354 i‡((
ZMac_SˇnBuf
 = 
pD©a
->
Resu…
.
pP™Des¸ùt‹
 =

355 
	`oßl_mem_Æloc
––
ZMacP™Desc_t
 ) * 
pD©a
->
MaxResu…s
 )Ë=
NULL
)

357  
MAC_NO_RESOURCES
;

363 
pD©a
->
Ch™√lPage
 = 0x00;

365 
	`MAC_MlmeSˇnReq
 ((
macMlmeSˇnReq_t
 *)
pD©a
);

367  
ZMacSuc˚ss
;

368 
	}
}

381 
uöt8
 
	$ZMacSèπReq
–
ZMacSèπReq_t
 *
pD©a
 )

383 
uöt8
 
°©
;

386 
°©
 = 
åue
;

387 
	`MAC_MlmeSëReq
–
MAC_RX_ON_WHEN_IDLE
, &
°©
 );

390 
pD©a
->
RólignSec
.
SecurôyLevñ
 = 
Ál£
;

391 
pD©a
->
Bóc⁄Sec
.
SecurôyLevñ
 = 
Ál£
;

394 
	`MAC_MlmeSèπReq
((
macMlmeSèπReq_t
 *Ë
pD©a
);

399  
ZMacSuc˚ss
;

400 
	}
}

413 
uöt8
 
	$ZMacSyncReq
–
ZMacSyncReq_t
 *
pD©a
 )

415 
	`MAC_MlmeSyncReq
–(
macMlmeSyncReq_t
 *)
pD©a
);

416  
ZMacSuc˚ss
;

417 
	}
}

430 
uöt8
 
	$ZMacPﬁlReq
–
ZMacPﬁlReq_t
 *
pD©a
 )

433 
pD©a
->
Sec
.
SecurôyLevñ
 = 
Ál£
;

435 
	`MAC_MlmePﬁlReq
 ((
macMlmePﬁlReq_t
 *)
pD©a
);

436  ( 
ZMacSuc˚ss
 );

437 
	}
}

450 
uöt8
 
	$ZMacD©aReqSec
–
ZMacD©aReq_t
 *
pD©a
, 
≠∂ySecCB_t
 
£cCB
 )

452 
macM˝sD©aReq_t
 *
pBuf
;

455 
pBuf
 = 
	`MAC_M˝sD©aAŒoc
–
pD©a
->
msduLígth
,ÖD©a->
Sec
.
SecurôyLevñ
,ÖD©a->Sec.
KeyIdMode
 );

457 i‡–
pBuf
 )

460 
	`oßl_mem˝y
–&
pBuf
->
mac
, 
pD©a
,  (
macD©aReq_t
) );

463 
	`oßl_mem˝y
–
pBuf
->
msdu
.
p
, 
pD©a
->msdu,ÖD©a->
msduLígth
 );

466 
	`oßl_mem˝y
–&
pBuf
->
£c
, &
pD©a
->
Sec
,  (
macSec_t
));

469 i‡–
£cCB
 && 
pBuf
->
msdu
.
Àn
 &&ÖBuf->msdu.
p
 )

471 i‡–
	`£cCB
–
pBuf
->
msdu
.
Àn
,ÖBuf->msdu.
p
 ) !
ZSuc˚ss
 )

475 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
pBuf
 );

477  ( 
MAC_NO_RESOURCES
 );

482 
	`MAC_M˝sD©aReq
–
pBuf
 );

484  ( 
ZMacSuc˚ss
 );

487  ( 
MAC_NO_RESOURCES
 );

488 
	}
}

499 
uöt8
 
	$ZMacD©aReq
–
ZMacD©aReq_t
 *
pD©a
 )

501  
	`ZMacD©aReqSec
–
pD©a
, 
NULL
 );

502 
	}
}

513 
uöt8
 
	$ZMacPurgeReq
–
byã
 
H™dÀ
 )

515 
	`MAC_M˝sPurgeReq
–
H™dÀ
 );

516  
ZMacSuc˚ss
;

517 
	}
}

530 
ZMacSètus_t
 
	$ZMacSrcM©chE«bÀ
 (
uöt8
 
addrTy≥
, uöt8 
numE¡rõs
)

532  (
	`MAC_SrcM©chE«bÀ
(
addrTy≥
, 
numE¡rõs
));

533 
	}
}

548 
ZMacSètus_t
 
	$ZMacSrcM©chAddE¡ry
 (
zAddrTy≥_t
 *
addr
, 
uöt16
 
∑nID
)

550  (
	`MAC_SrcM©chAddE¡ry
 ((
sAddr_t
*)
addr
, 
∑nID
));

551 
	}
}

566 
ZMacSètus_t
 
	$ZMacSrcM©chDñëeE¡ry
 (
zAddrTy≥_t
 *
addr
, 
uöt16
 
∑nID
)

568  (
	`MAC_SrcM©chDñëeE¡ry
 ((
sAddr_t
*)
addr
, 
∑nID
));

569 
	}
}

585 
ZMacSètus_t
 
	$ZMacSrcM©chAckAŒPídög
 (
uöt8
 
›ti⁄
)

587 
	`MAC_SrcM©chAckAŒPídög
 (
›ti⁄
);

589  
ZMacSuc˚ss
;

590 
	}
}

601 
ZMacSètus_t
 
	$ZMacSrcM©chCheckAŒPídög
 ()

603  (
	`MAC_SrcM©chCheckAŒPídög
 ());

604 
	}
}

619 
	$ZMacPwrOnReq
 ( )

621 
	`MAC_PwrOnReq
();

622 
	}
}

639 
uöt8
 
	$ZMac_PwrMode
()

641  (
	`MAC_PwrMode
());

642 
	}
}

653 
uöt8
 
	$ZMacSëTønsmôPowî
–
ZMacTønsmôPowî_t
 
Àvñ
 )

655  
	`MAC_MlmeSëReq
–
ZMacPhyTønsmôPowîSig√d
, &
Àvñ
 );

656 
	}
}

668 
	$ZMacSídNoD©a
 ( 
uöt16
 
D°Addr
, uöt16 
D°PANId
 )

670 
macM˝sD©aReq_t
 *
pBuf
;

673 
pBuf
 = 
	`MAC_M˝sD©aAŒoc
(0, 
MAC_SEC_LEVEL_NONE
, 
MAC_KEY_ID_MODE_NONE
);

675 i‡(
pBuf
)

678 
pBuf
->
mac
.
§cAddrMode
 = 
SADDR_MODE_SHORT
;

681 
pBuf
->
mac
.
d°Addr
.
addr
.
sh‹tAddr
 = 
D°Addr
;

682 
pBuf
->
mac
.
d°Addr
.
addrMode
 = 
SADDR_MODE_SHORT
;

683 
pBuf
->
mac
.
d°P™Id
 = 
D°PANId
;

686 
pBuf
->
mac
.
msduH™dÀ
 = 0;

687 
pBuf
->
mac
.
txO±i⁄s
 = 
ZMAC_TXOPTION_ACK
 | 
ZMAC_TXOPTION_NO_RETRANS
 | 
ZMAC_TXOPTION_NO_CNF
;

690 
pBuf
->
£c
.
£curôyLevñ
 = 
Ál£
;

693 
	`MAC_M˝sD©aReq
(
pBuf
);

696 
	}
}

707 
uöt8
 
	$ZMacSèãIdÀ
( )

709  
	`macSèãIdÀ
();

710 
	}
}

	@Components/zmac/f8w/zmac_cb.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"ZMAC.h
"

47 
	~"MT_MAC.h
"

48 
	~"hÆ_mcu.h
"

50 #i‡!
deföed
 
NONWK


51 
	~"nwk.h
"

52 
	~"nwk_bufs.h
"

53 
	~"ZGlobÆs.h
"

56 #i‡
deföed
–
MACSIM
 )

57 
	~"mac_sim.h
"

60 
	~"mac_£curôy.h
"

62 
	~"mac_maö.h
"

63 *
ZMac_SˇnBuf
;

69 #i‡!
deföed
 
NONWK


71 c⁄° 
uöt8
 
CODE
 
	gzmacCBSizeTabÀ
 [] = {

73 (
ZMacAssocüãInd_t
),

74 (
ZMacAssocüãCnf_t
),

77 (
macMlmeBóc⁄NŸifyInd_t
),

78 (
ZMacOΩh™Ind_t
),

79 (
ZMacSˇnCnf_t
),

80 (
ZMacSèπCnf_t
),

82 (
ZMacPﬁlCnf_t
),

83 (
ZMacCommSètusInd_t
),

84 (
ZMacD©aCnf_t
),

85 (
macM˝sD©aInd_t
),

88 (
ZMacPﬁlInd_t
)

97 
ZMacLqiAdju°_t
 
	glqiAdjMode
 = 
LQI_ADJ_OFF
;

99 #i‡!
deföed
 
NONWK


101 
ZMacLqiAdju°
–
uöt8
 
c‹r
, uöt8* 
lqi
 );

121 
	$uöt8
 (*
pZMac_AµCÆlback
)–
uöt8
 *
msgPå
 ) = (*)
NULL
;

137 
	$MAC_CbackEvít
(
macCbackEvít_t
 *
pD©a
)

138 #i‚de‡
MT_MAC_CB_FUNC


140 #i‡!
deföed
 
NONWK


141 
uöt8
 
evít
 = 
pD©a
->
hdr
.event;

142 
uöt16
 
tmp
 = 
zmacCBSizeTabÀ
[
evít
];

143 
macCbackEvít_t
 *
msgPå
;

148 i‡(
tmp
 == 0)

154 i‡–
evít
 =
MAC_MCPS_DATA_IND
 )

156 
	`MAC_MlmeGëReq
–
MAC_SHORT_ADDRESS
, &
tmp
 );

157 i‡((
tmp
 =
INVALID_NODE_ADDR
Ë|| (tm∞=
NWK_BROADCAST_SHORTADDR_DEVALL
) ||

158 (
pD©a
->
d©aInd
.
msdu
.
Àn
 == 0))

160 
	`mac_msg_dóŒoˇã
–(
uöt8
 **)&
pD©a
 );

163 
msgPå
 = 
pD©a
;

167 i‡(
evít
 =
MAC_MLME_BEACON_NOTIFY_IND
 )

169 
tmp
 +(
macP™Desc_t
Ë+ 
pD©a
->
bóc⁄NŸifyInd
.
sduLígth
;

171 i‡(
evít
 =
MAC_MLME_SCAN_CNF
)

173 i‡(
pD©a
->
sˇnCnf
.
sˇnTy≥
 =
ZMAC_ED_SCAN
)

175 
tmp
 +
ZMAC_ED_SCAN_MAXCHANNELS
;

179 
tmp
 +–
ZMacP™Desc_t
 ) * 
pD©a
->
sˇnCnf
.
ªsu…Li°Size
;

183 i‡–!(
msgPå
 = (
macCbackEvít_t
 *)
	`oßl_msg_Æloˇã
(
tmp
)) )

186 i‡((
evít
 =
MAC_MCPS_DATA_CNF
Ë&& (
pD©a
->
d©aCnf
.
pD©aReq
 !
NULL
))

188 
hÆI¡Sèã_t
 
ötSèã
;

192 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

194 
	`mac_msg_dóŒoˇã
–(
uöt8
**)&(
pD©a
->
d©aCnf
.
pD©aReq
) );

195 i‡–!(
msgPå
 = (
macCbackEvít_t
 *)
	`oßl_msg_Æloˇã
(
tmp
)) )

198 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

201 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

209 
	`oßl_mem˝y
(
msgPå
, 
pD©a
, 
zmacCBSizeTabÀ
[
evít
]);

212 i‡–
evít
 =
MAC_MLME_BEACON_NOTIFY_IND
 )

214 
macMlmeBóc⁄NŸifyInd_t
 *
pBóc⁄
 = (macMlmeBóc⁄NŸifyInd_t*)
msgPå
;

216 
	`oßl_mem˝y
(
pBóc⁄
+1,ÖBóc⁄->
pP™Desc
, (
macP™Desc_t
));

217 
pBóc⁄
->
pP™Desc
 = (
macP™Desc_t
 *)(pBeacon+1);

218 
	`oßl_mem˝y
(
pBóc⁄
->
pP™Desc
+1,ÖBóc⁄->
pSdu
,ÖBóc⁄->
sduLígth
);

219 
pBóc⁄
->
pSdu
 = (
uöt8
 *)’Bóc⁄->
pP™Desc
+1);

221 i‡(
evít
 =
MAC_MLME_SCAN_CNF
)

223 
macMlmeSˇnCnf_t
 *
pSˇn
 = (macMlmeSˇnCnf_t*)
msgPå
;

225 i‡(
ZMac_SˇnBuf
 !
NULL
)

227 *
pTmp
 = 
ZMac_SˇnBuf
;

228 
ZMac_SˇnBuf
 = 
NULL
;

230 i‡(
pSˇn
->
sˇnTy≥
 =
ZMAC_ED_SCAN
)

232 
pSˇn
->
ªsu…
.
pE√rgyDëe˘
 = (
uöt8
*) (pScan + 1);

233 
	`oßl_mem˝y
(
pSˇn
->
ªsu…
.
pE√rgyDëe˘
, 
pTmp
, 
ZMAC_ED_SCAN_MAXCHANNELS
);

237 
pSˇn
->
ªsu…
.
pP™Des¸ùt‹
 = (
macP™Desc_t
*) (pScan + 1);

238 
	`oßl_mem˝y
(
pSˇn
 + 1, 
pTmp
, –
ZMacP™Desc_t
 ) *ÖSˇn->
ªsu…Li°Size
);

241 
	`oßl_mem_‰ì
(
pTmp
);

245 i‡––
pZMac_AµCÆlback
 =
NULL
 ) || ( 
	`pZMac_AµCÆlback
–(
uöt8
 *)
msgPå
 ) =
FALSE
 ) )

248 i‡–
evít
 =
MAC_MCPS_DATA_IND
 )

250 
uöt8
 
fcFømeTy≥
 = (
pD©a
->
d©aInd
.
msdu
.
p
[0] & 0x03);

251 
uöt8
 
fcPrŸoVî
 = ((
pD©a
->
d©aInd
.
msdu
.
p
[0] >> 2) & 0x0F);

252 
uöt8
 
fcRe£rve
 = (
pD©a
->
d©aInd
.
msdu
.
p
[1] & 0xE0);

253 i‡–(
fcFømeTy≥
 > 0x01Ë|| (
fcPrŸoVî
 !
_NIB
.
nwkPrŸocﬁVîsi⁄
Ë|| (
fcRe£rve
 != 0)

254 || (
pD©a
->
d©aInd
.
mac
.
§cAddr
.
addrMode
 !
SADDR_MODE_SHORT
) )

257 
	`mac_msg_dóŒoˇã
–(
uöt8
 **)&
pD©a
 );

262 
macD©aInd_t
 *
pInd
 = &
msgPå
->
d©aInd
.
mac
;

264 
	`ZMacLqiAdju°
–
pInd
->
c‹ªœti⁄
, &pInd->
mpduLökQuÆôy
 );

267 i‡–(
pD©a
->
d©aInd
.
mac
.
d°Addr
.
addr
.
sh‹tAddr
 == 0xFFFF)

268 && (
pD©a
->
d©aInd
.
msdu
.
p
[6] > 1) )

271 i‡–
	`nwk_brﬂdˇ°Síd
–(
uöt8
 *)
msgPå
 ) !
SUCCESS
 )

274 
	`mac_msg_dóŒoˇã
–(
uöt8
 **)&
pD©a
 );

280 i‡((
evít
 =
MAC_MCPS_DATA_CNF
Ë&& (
pD©a
->
hdr
.
°©us
 !
MAC_NO_RESOURCES
))

282 
macM˝sD©aCnf_t
 *
pCnf
 = &
msgPå
->
d©aCnf
;

284 i‡(
pCnf
->
pD©aReq
->
öã∫Æ
.
txO±i⁄s
 & 
MAC_TXOPTION_ACK
)

287 
	`ZMacLqiAdju°
–
pCnf
->
c‹ªœti⁄
, &pCnf->
mpduLökQuÆôy
 );

292 
	`oßl_msg_£nd
–
NWK_TaskID
, (
uöt8
 *)
msgPå
 );

295 i‡((
evít
 =
MAC_MCPS_DATA_CNF
Ë&& (
pD©a
->
d©aCnf
.
pD©aReq
 !
NULL
))

301 
	`mac_msg_dóŒoˇã
–(
uöt8
**)&(
pD©a
->
d©aCnf
.
pD©aReq
) );

304 
	}
}

308 
	gpD©a
->
	ghdr
.
	gevít
)

310 
	gMAC_MLME_ASSOCIATE_IND
:

311 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_ASSOCIATE_IND
 )

312 
nwk_MTCÆlbackSubNwkAssocüãInd
 ( (
ZMacAssocüãInd_t
 *)
pD©a
 );

315 
	gMAC_MLME_ASSOCIATE_CNF
:

316 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_ASSOCIATE_CNF
 )

317 
nwk_MTCÆlbackSubNwkAssocüãCnf
 ( (
ZMacAssocüãCnf_t
 *)
pD©a
 );

320 
	gMAC_MLME_DISASSOCIATE_IND
:

321 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_DISASSOCIATE_IND
 )

322 
nwk_MTCÆlbackSubNwkDißssocüãInd
 ( (
ZMacDißssocüãInd_t
 *)
pD©a
 );

325 
	gMAC_MLME_DISASSOCIATE_CNF
:

326 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_DISASSOCIATE_CNF
 )

327 
nwk_MTCÆlbackSubNwkDißssocüãCnf
 ( (
ZMacDißssocüãCnf_t
 *)
pD©a
 );

330 
	gMAC_MLME_BEACON_NOTIFY_IND
:

331 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_BEACON_NOTIFY_IND
 )

332 
nwk_MTCÆlbackSubNwkBóc⁄NŸifyInd
–(
ZMacBóc⁄NŸifyInd_t
 *)
pD©a
 );

335 
	gMAC_MLME_ORPHAN_IND
:

336 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_ORPHAN_IND
 )

337 
nwk_MTCÆlbackSubNwkOΩh™Ind
–(
ZMacOΩh™Ind_t
 *Ë
pD©a
 );

340 
	gMAC_MLME_SCAN_CNF
:

341 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_SCAN_CNF
 )

343 
pD©a
->
sˇnCnf
.
ªsu…
.
pE√rgyDëe˘
 = 
ZMac_SˇnBuf
;

344 
nwk_MTCÆlbackSubNwkSˇnCnf
 ( (
ZMacSˇnCnf_t
 *Ë
pD©a
 );

347 i‡(
	gZMac_SˇnBuf
 !
NULL
)

349 *
pTmp
 = 
ZMac_SˇnBuf
;

350 
	gZMac_SˇnBuf
 = 
NULL
;

351 
oßl_mem_‰ì
(
pTmp
);

355 
	gMAC_MLME_START_CNF
:

356 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_START_CNF
 )

357 
nwk_MTCÆlbackSubNwkSèπCnf
 ( 
pD©a
->
hdr
.
°©us
 );

360 
	gMAC_MLME_SYNC_LOSS_IND
:

361 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_SYNC_LOSS_IND
 )

362 
nwk_MTCÆlbackSubNwkSyncLossInd
–(
ZMacSyncLossInd_t
 *Ë
pD©a
 );

365 
	gMAC_MLME_POLL_CNF
:

366 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_POLL_CNF
 )

367 
nwk_MTCÆlbackSubNwkPﬁlCnf
–
pD©a
->
hdr
.
°©us
 );

370 
	gMAC_MLME_COMM_STATUS_IND
:

371 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_COMM_STATUS_IND
 )

372 
nwk_MTCÆlbackSubCommSètusInd
 ( (
ZMacCommSètusInd_t
 *Ë
pD©a
 );

375 
	gMAC_MCPS_DATA_CNF
:

376 i‡(
pD©a
->
d©aCnf
.
pD©aReq
 !
NULL
)

377 
mac_msg_dóŒoˇã
((
uöt8
**)&
pD©a
->
d©aCnf
.
pD©aReq
);

379 i‡–
	g_macCÆlbackSub
 & 
	gCB_ID_NWK_DATA_CNF
 )

380 
nwk_MTCÆlbackSubNwkD©aCnf
–(
ZMacD©aCnf_t
 *Ë
pD©a
 );

383 
	gMAC_MCPS_DATA_IND
:

389 
ZMacD©aInd_t
 *
pD©aInd
 = (ZMacD©aInd_à*Ë
pD©a
;

390 
uöt8
 
	gevít
, 
	g°©us
, 
	gÀn
, *
	gmsdu
;

393 
	gevít
 = 
pD©a
->
hdr
.
evít
;

394 
	g°©us
 = 
pD©a
->
hdr
.
°©us
;

395 
	gÀn
 = 
pD©a
->
d©aInd
.
msdu
.
Àn
;

396 
	gmsdu
 = 
pD©a
->
d©aInd
.
msdu
.
p
;

399 
oßl_mem˝y
(&
pD©aInd
->
Sec
, &
pD©a
->
d©aInd
.
£c
, (
ZMacSec_t
));

402 
oßl_mem˝y
(&
pD©aInd
->
SrcAddr
, &
pD©a
->
d©aInd
.
mac
.
§cAddr
, (
zAddrTy≥_t
));

403 
oßl_mem˝y
(&
pD©aInd
->
D°Addr
, &
pD©a
->
d©aInd
.
mac
.
d°Addr
, (
zAddrTy≥_t
));

404 
	gpD©aInd
->
	gTime°amp
 = 
pD©a
->
d©aInd
.
mac
.
time°amp
;

405 
	gpD©aInd
->
	gTime°amp2
 = 
pD©a
->
d©aInd
.
mac
.
time°amp2
;

406 
	gpD©aInd
->
	gSrcPANId
 = 
pD©a
->
d©aInd
.
mac
.
§cP™Id
;

407 
	gpD©aInd
->
	gD°PANId
 = 
pD©a
->
d©aInd
.
mac
.
d°P™Id
;

408 
	gpD©aInd
->
	gmpduLökQuÆôy
 = 
pD©a
->
d©aInd
.
mac
.
mpduLökQuÆôy
;

409 
	gpD©aInd
->
	gC‹ªœti⁄
 = 
pD©a
->
d©aInd
.
mac
.
c‹ªœti⁄
;

410 
	gpD©aInd
->
	gRssi
 = 
pD©a
->
d©aInd
.
mac
.
rssi
;

411 
	gpD©aInd
->
	gD¢
 = 
pD©a
->
d©aInd
.
mac
.
d¢
;

414 
	gpD©aInd
->
	ghdr
.
	gSètus
 = 
°©us
;

415 
	gpD©aInd
->
	ghdr
.
	gEvít
 = 
evít
;

416 
	gpD©aInd
->
	gmsduLígth
 = 
Àn
;

418 i‡(
	gÀn
)

419 
	gpD©aInd
->
	gmsdu
 = 
msdu
;

421 
	gpD©aInd
->
	gmsdu
 = 
NULL
;

423 i‡–
	g_macCÆlbackSub
 & 
	gCB_ID_NWK_DATA_IND
 )

424 
nwk_MTCÆlbackSubNwkD©aInd
 ( 
pD©aInd
 );

428 
mac_msg_dóŒoˇã
–(
uöt8
 **)&
pD©a
 );

431 
	gMAC_MCPS_PURGE_CNF
:

432 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_PURGE_CNF
 )

433 
nwk_MTCÆlbackSubNwkPurgeCnf
–(
ZMacPurgeCnf_t
 *Ë
pD©a
);

451 
uöt8
 
	$MAC_CbackCheckPídög
()

453 #i‡!
	`deföed
 (
NONWK
)

454 i‡–
ZSTACK_ROUTER_BUILD
 )

456  (
	`nwkDB_Rëu∫Indúe˘HﬁdögC¡
());

465 
	}
}

478 
ZMacLqiAdju°_t
 
	$ZMacLqiAdju°Mode
–
ZMacLqiAdju°_t
 
mode
 )

480 i‡–
mode
 !
LQI_ADJ_GET
 )

482 
lqiAdjMode
 = 
mode
;

484  ( 
lqiAdjMode
 );

485 
	}
}

487 #i‡!
deföed
 
NONWK


513 
	$ZMacLqiAdju°
–
uöt8
 
c‹r
, uöt8 *
lqi
 )

515 i‡–
lqiAdjMode
 !
LQI_ADJ_OFF
 )

517 
uöt16
 
adjLqi
 = *
lqi
;

520 i‡–
c‹r
 < 
LQI_CORR_MIN
 )

522 
c‹r
 = 
LQI_CORR_MIN
;

524 i‡–
c‹r
 > 
LQI_CORR_MAX
 )

526 
c‹r
 = 
LQI_CORR_MAX
;

529 i‡–
lqiAdjMode
 =
LQI_ADJ_MODE1
 )

535 
adjLqi
 = (adjLqò* (
c‹r
 - 
LQI_CORR_MIN
)Ë/ (
LQI_CORR_MAX
 - LQI_CORR_MIN);

537 i‡–
lqiAdjMode
 =
LQI_ADJ_MODE2
 )

543 *
lqi
 = (
adjLqi
 > 255Ë? 255 : (
uöt8
)adjLqi;

545 
	}
}

	@Components/zmac/f8w/zmac_internal.h

40 #i‚de‡
ZMAC_INTERNAL_H


41 
	#ZMAC_INTERNAL_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"mac_≠i.h
"

59 
	#ZMAC_F8W


	)

62 
	#OUTPUT_POWER_0DBM
 0x00

	)

63 
	#OUTPUT_POWER_N1DBM
 0x21

	)

64 
	#OUTPUT_POWER_N3DBM
 0x23

	)

65 
	#OUTPUT_POWER_N5DBM
 0x25

	)

66 
	#OUTPUT_POWER_N7DBM
 0x27

	)

67 
	#OUTPUT_POWER_N10DBM
 0x2A

	)

68 
	#OUTPUT_POWER_N15DBM
 0x2F

	)

69 
	#OUTPUT_POWER_N25DBM
 0x39

	)

74 
ZMacAckWaôDuøti⁄
 = 
MAC_ACK_WAIT_DURATION
,

75 
ZMacAssocüti⁄Pîmô
 = 
MAC_ASSOCIATION_PERMIT
,

76 
ZMacAutoReque°
 = 
MAC_AUTO_REQUEST
,

77 
ZMacB©tLi„Ext
 = 
MAC_BATT_LIFE_EXT
,

78 
ZMacB©tLe·ExtPîiods
 = 
MAC_BATT_LIFE_EXT_PERIODS
,

80 
ZMacBóc⁄MSDU
 = 
MAC_BEACON_PAYLOAD
,

81 
ZMacBóc⁄MSDULígth
 = 
MAC_BEACON_PAYLOAD_LENGTH
,

82 
ZMacBóc⁄Ordî
 = 
MAC_BEACON_ORDER
,

83 
ZMacBóc⁄TxTime
 = 
MAC_BEACON_TX_TIME
,

84 
ZMacBSN
 = 
MAC_BSN
,

86 
ZMacCo‹dExãndedAddªss
 = 
MAC_COORD_EXTENDED_ADDRESS
,

87 
ZMacCo‹dSh‹tAddªss
 = 
MAC_COORD_SHORT_ADDRESS
,

88 
ZMacDSN
 = 
MAC_DSN
,

89 
ZMacGTSPîmô
 = 
MAC_GTS_PERMIT
,

90 
ZMacMaxCSMABackoffs
 = 
MAC_MAX_CSMA_BACKOFFS
,

92 
ZMacMöBE
 = 
MAC_MIN_BE
,

93 
ZMacP™Id
 = 
MAC_PAN_ID
,

94 
ZMacPromiscuousMode
 = 
MAC_PROMISCUOUS_MODE
,

95 
ZMacRxOnIdÀ
 = 
MAC_RX_ON_WHEN_IDLE
,

96 
ZMacSh‹tAddªss
 = 
MAC_SHORT_ADDRESS
,

98 
ZMacSu≥r‰ameOrdî
 = 
MAC_SUPERFRAME_ORDER
,

99 
ZMacTønß˘i⁄Pîsi°í˚Time
 = 
MAC_TRANSACTION_PERSISTENCE_TIME
,

100 
ZMacAssocüãdP™Co‹d
 = 
MAC_ASSOCIATED_PAN_COORD
,

101 
ZMacMaxBE
 = 
MAC_MAX_BE
,

102 
ZMacMaxFømeTŸÆWaôTime
 = 
MAC_MAX_FRAME_TOTAL_WAIT_TIME
,

104 
ZMacMaxFømeRërõs
 = 
MAC_MAX_FRAME_RETRIES
,

105 
ZMacRe•⁄£WaôTime
 = 
MAC_RESPONSE_WAIT_TIME
,

106 
ZMacSyncSymbﬁOff£t
 = 
MAC_SYNC_SYMBOL_OFFSET
,

107 
ZMacTime°ampSuµ‹ãd
 = 
MAC_TIMESTAMP_SUPPORTED
,

108 
ZMacSecurôyE«bÀd
 = 
MAC_SECURITY_ENABLED
,

111 
ZMacPhyTønsmôPowî
 = 
MAC_PHY_TRANSMIT_POWER
,

112 
ZMacCh™√l
 = 
MAC_LOGICAL_CHANNEL
,

113 
ZMacExtAddr
 = 
MAC_EXTENDED_ADDRESS
,

114 
ZMacA…BE
 = 
MAC_ALT_BE
,

115 
ZMacDevi˚Bóc⁄Ordî
 = 
MAC_DEVICE_BEACON_ORDER
,

116 
ZMacPhyTønsmôPowîSig√d
 = 
MAC_PHY_TRANSMIT_POWER_SIGNED
,

118 #ifde‡
MAC_SECURITY


119 
ZMacKeyTabÀ
 = 
MAC_KEY_TABLE
,

120 
ZMacKeyTabÀE¡rõs
 = 
MAC_KEY_TABLE_ENTRIES
,

121 
ZMacDevi˚TabÀ
 = 
MAC_DEVICE_TABLE
,

122 
ZMacDevi˚TabÀE¡rõs
 = 
MAC_DEVICE_TABLE_ENTRIES
,

123 
ZMacSecurôyLevñTabÀ
 = 
MAC_SECURITY_LEVEL_TABLE
,

125 
ZMacSecurôyLevñTabÀE¡rõs
 = 
MAC_SECURITY_LEVEL_TABLE_ENTRIES
,

126 
ZMacFømeCou¡î
 = 
MAC_FRAME_COUNTER
,

127 
ZMacAutoReque°SecurôyLevñ
 = 
MAC_AUTO_REQUEST_SECURITY_LEVEL
,

128 
ZMacAutoReque°KeyIdMode
 = 
MAC_AUTO_REQUEST_KEY_ID_MODE
,

129 
ZMacAutoReque°KeySour˚
 = 
MAC_AUTO_REQUEST_KEY_SOURCE
,

131 
ZMacAutoReque°KeyIndex
 = 
MAC_AUTO_REQUEST_KEY_INDEX
,

132 
ZMacDeÁu…KeySour˚
 = 
MAC_DEFAULT_KEY_SOURCE
,

133 
ZMacP™Co‹dExãndedAddªss
 = 
MAC_PAN_COORD_EXTENDED_ADDRESS
,

134 
ZMacP™Co‹dSh‹tAddªss
 = 
MAC_PAN_COORD_SHORT_ADDRESS
,

138 
ZMacACLDeÁu…SecurôyM©îülLígth
 = 0,

139 
ZMacTxGTSId
 = 1,

140 
ZMacUµîLayîTy≥
 = 2,

141 
ZMacRxGTSId
 = 3,

142 
ZMacSnoozePîmô
 = 4

145 
uöt8
 
	tZMacAâribuãs_t
;

148 
uöt8
 
	tZMacSètus_t
;

151 
	#ZMAC_ED_SCAN
 
MAC_SCAN_ED


	)

152 
	#ZMAC_ACTIVE_SCAN
 
MAC_SCAN_ACTIVE


	)

153 
	#ZMAC_PASSIVE_SCAN
 
MAC_SCAN_PASSIVE


	)

154 
	#ZMAC_ORPHAN_SCAN
 
MAC_SCAN_ORPHAN


	)

157 
	#ZMAC_SUCCESSFUL_ASSOCIATION
 0x00

	)

158 
	#ZMAC_PAN_AT_CAPACITY
 0x01

	)

159 
	#ZMAC_PAN_ACCESS_DENIED
 0x02

	)

162 
	#ZMAC_COORD_INITIATE
 
MAC_DISASSOC_COORD


	)

163 
	#ZMAC_DEVICE_INITIATE
 
MAC_DISASSOC_DEVICE


	)

165 
	#ZMAC_SECURITY_USE
 0x01

	)

166 
	#ZMAC_ACL_ENTRY
 0x02

	)

167 
	#ZMAC_SECURITY_FAILURE
 0x04

	)

170 
	#ZMAC_TXOPTION_ACK
 
MAC_TXOPTION_ACK


	)

171 
	#ZMAC_TXOPTION_GTS
 
MAC_TXOPTION_GTS


	)

172 
	#ZMAC_TXOPTION_INDIRECT
 
MAC_TXOPTION_INDIRECT


	)

173 
	#ZMAC_TXOPTION_SECURITY_ENABLE
 
MAC_TXOPTION_SECURITY


	)

174 
	#ZMAC_TXOPTION_NO_RETRANS
 
MAC_TXOPTION_NO_RETRANS


	)

175 
	#ZMAC_TXOPTION_NO_CNF
 
MAC_TXOPTION_NO_CNF


	)

177 
	#ZMAC_ASSOC_CAPINFO_FFD_TYPE
 
MAC_CAPABLE_FFD


	)

178 
	#ZMAC_ASSOC_CAPINFO_RX_ON_IDLE
 
MAC_CAPABLE_RX_ON_IDLE


	)

179 
	#ZMAC_ASSOC_CAPINFO_SECURITY
 
MAC_CAPABLE_SECURITY


	)

182 
	#MIN_LQI_COST_1
 12

183 
	#MIN_LQI_COST_2
 9

184 
	#MIN_LQI_COST_3
 6

185 
	#MIN_LQI_COST_4
 4

186 
	#MIN_LQI_COST_5
 2

187 
	#MIN_LQI_COST_6
 1

188 
	#MIN_LQI_COST_7
 0

189 

	)

191 
	#ZMAC_ED_SCAN_MAXCHANNELS
 27

	)

193 
	#ZMAC_SUCCESS
 
MAC_SUCCESS


	)

194 
	#ZMAC_TRANSACTION_OVERFLOW
 
MAC_TRANSACTION_OVERFLOW


	)

195 
	#ZMAC_TRANSACTION_EXPIRED
 
MAC_TRANSACTION_EXPIRED


	)

196 
	#ZMAC_CHANNEL_ACCESS_FAILURE
 
MAC_CHANNEL_ACCESS_FAILURE


	)

197 
	#ZMAC_NO_RESOURCES
 
MAC_NO_RESOURCES


	)

199 
	#ZMAC_KEY_SOURCE_MAX_LEN
 
MAC_KEY_SOURCE_MAX_LEN


	)

205 #ifde‡
__˝lu•lus


	@Projects/zstack/HomeAutomation/SampleLight/Source/OSAL_SampleLight.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"z˛_ßm∂ñight.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
z˛_evít_lo›
,

88 
z˛Sam∂eLight_evít_lo›


91 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

92 
uöt16
 *
	gèsksEvíts
;

107 
	$oßlInôTasks
( )

109 
uöt8
 
èskID
 = 0;

111 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

112 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

114 
	`macTaskInô
–
èskID
++ );

115 
	`nwk_öô
–
èskID
++ );

116 
	`HÆ_Inô
–
èskID
++ );

117 #i‡
	`deföed
–
MT_TASK
 )

118 
	`MT_TaskInô
–
èskID
++ );

120 
	`APS_Inô
–
èskID
++ );

121 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

122 
	`APSF_Inô
–
èskID
++ );

124 
	`ZDAµ_Inô
–
èskID
++ );

125 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

126 
	`ZDNwkMgr_Inô
–
èskID
++ );

128 
	`z˛_Inô
–
èskID
++ );

129 
	`z˛Sam∂eLight_Inô
–
èskID
 );

130 
	}
}

	@Projects/zstack/HomeAutomation/SampleLight/Source/zcl_samplelight.c

50 
	~"ZComDef.h
"

51 
	~"OSAL.h
"

52 
	~"AF.h
"

53 
	~"ZDAµ.h
"

55 
	~"z˛.h
"

56 
	~"z˛_gíîÆ.h
"

57 
	~"z˛_ha.h
"

59 
	~"z˛_ßm∂ñight.h
"

61 
	~"⁄bﬂrd.h
"

64 
	~"hÆ_lcd.h
"

65 
	~"hÆ_Àd.h
"

66 
	~"hÆ_key.h
"

83 
byã
 
	gz˛Sam∂eLight_TaskID
;

94 
	#ZCLSAMPLELIGHT_BINDINGLIST
 2

	)

95 
cId_t
 
	gbödögInClu°îs
[
ZCLSAMPLELIGHT_BINDINGLIST
] =

97 
ZCL_CLUSTER_ID_GEN_ON_OFF
,

98 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL


102 
ídPoötDesc_t
 
	gßm∂eLight_Te°Ep
 =

105 &
z˛Sam∂eLight_TaskID
,

106 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)
NULL
,

107 (
afNëw‹kL©ícyReq_t
)0

113 
z˛Sam∂eLight_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 );

114 
z˛Sam∂eLight_BasicRe£tCB
( );

115 
z˛Sam∂eLight_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

116 
z˛Sam∂eLight_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

117 
z˛Sam∂eLight_OnOffCB
–
uöt8
 
cmd
 );

118 
z˛Sam∂eLight_Pro˚ssIdítifyTimeCh™ge
( );

121 
z˛Sam∂eLight_Pro˚ssIncomögMsg
–
z˛IncomögMsg_t
 *
msg
 );

122 #ifde‡
ZCL_READ


123 
uöt8
 
z˛Sam∂eLight_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

125 #ifde‡
ZCL_WRITE


126 
uöt8
 
z˛Sam∂eLight_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

128 
uöt8
 
z˛Sam∂eLight_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

129 #ifde‡
ZCL_DISCOVER


130 
uöt8
 
z˛Sam∂eLight_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

136 
z˛GíîÆ_AµCÆlbacks_t
 
	gz˛Sam∂eLight_CmdCÆlbacks
 =

138 
z˛Sam∂eLight_BasicRe£tCB
,

139 
z˛Sam∂eLight_IdítifyCB
,

140 
z˛Sam∂eLight_IdítifyQuîyR•CB
,

141 
z˛Sam∂eLight_OnOffCB
,

142 
NULL
,

143 
NULL
,

144 
NULL
,

145 
NULL
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

163 
	$z˛Sam∂eLight_Inô
–
byã
 
èsk_id
 )

165 
z˛Sam∂eLight_TaskID
 = 
èsk_id
;

173 
	`z˛HA_Inô
–&
z˛Sam∂eLight_Sim∂eDesc
 );

176 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
SAMPLELIGHT_ENDPOINT
, &
z˛Sam∂eLight_CmdCÆlbacks
 );

179 
	`z˛_ªgi°îAârLi°
–
SAMPLELIGHT_ENDPOINT
, 
SAMPLELIGHT_MAX_ATTRIBUTES
, 
z˛Sam∂eLight_Aârs
 );

182 
	`z˛_ªgi°îF‹Msg
–
z˛Sam∂eLight_TaskID
 );

185 
	`Regi°îF‹Keys
–
z˛Sam∂eLight_TaskID
 );

188 
	`afRegi°î
–&
ßm∂eLight_Te°Ep
 );

189 
	}
}

200 
uöt16
 
	$z˛Sam∂eLight_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

202 
afIncomögMSGPackë_t
 *
MSGpkt
;

204 ()
èsk_id
;

206 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

208  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
z˛Sam∂eLight_TaskID
 )) )

210  
MSGpkt
->
hdr
.
evít
 )

212 
ZCL_INCOMING_MSG
:

214 
	`z˛Sam∂eLight_Pro˚ssIncomögMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

217 
KEY_CHANGE
:

218 
	`z˛Sam∂eLight_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

226 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

230  (
evíts
 ^ 
SYS_EVENT_MSG
);

233 i‡–
evíts
 & 
SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT
 )

235 i‡–
z˛Sam∂eLight_IdítifyTime
 > 0 )

236 
z˛Sam∂eLight_IdítifyTime
--;

237 
	`z˛Sam∂eLight_Pro˚ssIdítifyTimeCh™ge
();

239  ( 
evíts
 ^ 
SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT
 );

244 
	}
}

260 
	$z˛Sam∂eLight_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 )

262 
zAddrTy≥_t
 
d°Addr
;

264 ()
shi·
;

266 i‡–
keys
 & 
HAL_KEY_SW_2
 )

270 
d°Addr
.
addrMode
 = 
afAddr16Bô
;

271 
d°Addr
.
addr
.
sh‹tAddr
 = 0;

272 
	`ZDP_EndDevi˚BödReq
–&
d°Addr
, 
	`NLME_GëSh‹tAddr
(),

273 
SAMPLELIGHT_ENDPOINT
,

274 
ZCL_HA_PROFILE_ID
,

275 
ZCLSAMPLELIGHT_BINDINGLIST
, 
bödögInClu°îs
,

276 0, 
NULL
,

277 
TRUE
 );

280 i‡–
keys
 & 
HAL_KEY_SW_3
 )

284 i‡–
keys
 & 
HAL_KEY_SW_4
 )

287 
	}
}

298 
	$z˛Sam∂eLight_Pro˚ssIdítifyTimeCh™ge
( )

300 i‡–
z˛Sam∂eLight_IdítifyTime
 > 0 )

302 
	`oßl_°¨t_timîEx
–
z˛Sam∂eLight_TaskID
, 
SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT
, 1000 );

303 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

307 i‡–
z˛Sam∂eLight_OnOff
 )

308 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

310 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

311 
	`oßl_°›_timîEx
–
z˛Sam∂eLight_TaskID
, 
SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT
 );

313 
	}
}

325 
	$z˛Sam∂eLight_BasicRe£tCB
( )

328 
	}
}

341 
	$z˛Sam∂eLight_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

343 
z˛Sam∂eLight_IdítifyTime
 = 
pCmd
->
idítifyTime
;

344 
	`z˛Sam∂eLight_Pro˚ssIdítifyTimeCh™ge
();

345 
	}
}

358 
	$z˛Sam∂eLight_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

361 ()
pR•
;

362 
	}
}

374 
	$z˛Sam∂eLight_OnOffCB
–
uöt8
 
cmd
 )

377 i‡–
cmd
 =
COMMAND_ON
 )

378 
z˛Sam∂eLight_OnOff
 = 
LIGHT_ON
;

381 i‡–
cmd
 =
COMMAND_OFF
 )

382 
z˛Sam∂eLight_OnOff
 = 
LIGHT_OFF
;

387 i‡–
z˛Sam∂eLight_OnOff
 =
LIGHT_OFF
 )

388 
z˛Sam∂eLight_OnOff
 = 
LIGHT_ON
;

390 
z˛Sam∂eLight_OnOff
 = 
LIGHT_OFF
;

394 i‡–
z˛Sam∂eLight_OnOff
 =
LIGHT_ON
 )

395 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

397 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

398 
	}
}

416 
	$z˛Sam∂eLight_Pro˚ssIncomögMsg
–
z˛IncomögMsg_t
 *
pInMsg
)

418  
pInMsg
->
z˛Hdr
.
comm™dID
 )

420 #ifde‡
ZCL_READ


421 
ZCL_CMD_READ_RSP
:

422 
	`z˛Sam∂eLight_Pro˚ssInRódR•Cmd
–
pInMsg
 );

425 #ifde‡
ZCL_WRITE


426 
ZCL_CMD_WRITE_RSP
:

427 
	`z˛Sam∂eLight_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

430 #ifde‡
ZCL_REPORT


432 
ZCL_CMD_CONFIG_REPORT
:

436 
ZCL_CMD_CONFIG_REPORT_RSP
:

440 
ZCL_CMD_READ_REPORT_CFG
:

444 
ZCL_CMD_READ_REPORT_CFG_RSP
:

448 
ZCL_CMD_REPORT
:

452 
ZCL_CMD_DEFAULT_RSP
:

453 
	`z˛Sam∂eLight_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

455 #ifde‡
ZCL_DISCOVER


456 
ZCL_CMD_DISCOVER_RSP
:

457 
	`z˛Sam∂eLight_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

464 i‡–
pInMsg
->
©åCmd
 )

465 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

466 
	}
}

468 #ifde‡
ZCL_READ


478 
uöt8
 
	$z˛Sam∂eLight_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

480 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

481 
uöt8
 
i
;

483 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

484 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

491  
TRUE
;

492 
	}
}

495 #ifde‡
ZCL_WRITE


505 
uöt8
 
	$z˛Sam∂eLight_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

507 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

508 
uöt8
 
i
;

510 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

511 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

517  
TRUE
;

518 
	}
}

530 
uöt8
 
	$z˛Sam∂eLight_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

535 ()
pInMsg
;

537  
TRUE
;

538 
	}
}

540 #ifde‡
ZCL_DISCOVER


550 
uöt8
 
	$z˛Sam∂eLight_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

552 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

553 
uöt8
 
i
;

555 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

556  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

561  
TRUE
;

562 
	}
}

	@Projects/zstack/HomeAutomation/SampleLight/Source/zcl_samplelight.h

41 #i‚de‡
ZCL_SAMPLELIGHT_H


42 
	#ZCL_SAMPLELIGHT_H


	)

44 #ifde‡
__˝lu•lus


52 
	~"z˛.h
"

57 
	#SAMPLELIGHT_ENDPOINT
 13

	)

59 
	#SAMPLELIGHT_MAX_ATTRIBUTES
 12

	)

61 
	#LIGHT_OFF
 0x00

	)

62 
	#LIGHT_ON
 0x01

	)

65 
	#SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

77 
Sim∂eDes¸ùti⁄F‹m©_t
 
z˛Sam∂eLight_Sim∂eDesc
;

79 
CONST
 
z˛AârRec_t
 
z˛Sam∂eLight_Aârs
[];

81 
uöt8
 
z˛Sam∂eLight_OnOff
;

83 
uöt16
 
z˛Sam∂eLight_IdítifyTime
;

92 
z˛Sam∂eLight_Inô
–
byã
 
èsk_id
 );

97 
UINT16
 
z˛Sam∂eLight_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 );

103 #ifde‡
__˝lu•lus


	@Projects/zstack/HomeAutomation/SampleLight/Source/zcl_samplelight_data.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"AF.h
"

47 
	~"ZDC⁄fig.h
"

49 
	~"z˛.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_ha.h
"

53 
	~"z˛_ßm∂ñight.h
"

59 
	#SAMPLELIGHT_DEVICE_VERSION
 0

	)

60 
	#SAMPLELIGHT_FLAGS
 0

	)

62 
	#SAMPLELIGHT_HWVERSION
 1

	)

63 
	#SAMPLELIGHT_ZCLVERSION
 1

	)

78 c⁄° 
uöt8
 
	gz˛Sam∂eLight_HWRevisi⁄
 = 
SAMPLELIGHT_HWVERSION
;

79 c⁄° 
uöt8
 
	gz˛Sam∂eLight_ZCLVîsi⁄
 = 
SAMPLELIGHT_ZCLVERSION
;

80 c⁄° 
uöt8
 
	gz˛Sam∂eLight_M™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

81 c⁄° 
uöt8
 
	gz˛Sam∂eLight_ModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

82 c⁄° 
uöt8
 
	gz˛Sam∂eLight_D©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

83 c⁄° 
uöt8
 
	gz˛Sam∂eLight_PowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

85 
uöt8
 
	gz˛Sam∂eLight_Loˇti⁄Des¸ùti⁄
[17] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

86 
uöt8
 
	gz˛Sam∂eLight_PhysiˇlEnvú⁄mít
 = 0;

87 
uöt8
 
	gz˛Sam∂eLight_Devi˚E«bÀ
 = 
DEVICE_ENABLED
;

90 
uöt16
 
	gz˛Sam∂eLight_IdítifyTime
 = 0;

93 
uöt8
 
	gz˛Sam∂eLight_OnOff
 = 
LIGHT_OFF
;

98 
CONST
 
z˛AârRec_t
 
	gz˛Sam∂eLight_Aârs
[
SAMPLELIGHT_MAX_ATTRIBUTES
] =

102 
ZCL_CLUSTER_ID_GEN_BASIC
,

104 
ATTRID_BASIC_HW_VERSION
,

105 
ZCL_DATATYPE_UINT8
,

106 
ACCESS_CONTROL_READ
,

107 (*)&
z˛Sam∂eLight_HWRevisi⁄


111 
ZCL_CLUSTER_ID_GEN_BASIC
,

113 
ATTRID_BASIC_ZCL_VERSION
,

114 
ZCL_DATATYPE_UINT8
,

115 
ACCESS_CONTROL_READ
,

116 (*)&
z˛Sam∂eLight_ZCLVîsi⁄


120 
ZCL_CLUSTER_ID_GEN_BASIC
,

122 
ATTRID_BASIC_MANUFACTURER_NAME
,

123 
ZCL_DATATYPE_CHAR_STR
,

124 
ACCESS_CONTROL_READ
,

125 (*)
z˛Sam∂eLight_M™uÁ˘uªrName


129 
ZCL_CLUSTER_ID_GEN_BASIC
,

131 
ATTRID_BASIC_MODEL_ID
,

132 
ZCL_DATATYPE_CHAR_STR
,

133 
ACCESS_CONTROL_READ
,

134 (*)
z˛Sam∂eLight_ModñId


138 
ZCL_CLUSTER_ID_GEN_BASIC
,

140 
ATTRID_BASIC_DATE_CODE
,

141 
ZCL_DATATYPE_CHAR_STR
,

142 
ACCESS_CONTROL_READ
,

143 (*)
z˛Sam∂eLight_D©eCode


147 
ZCL_CLUSTER_ID_GEN_BASIC
,

149 
ATTRID_BASIC_POWER_SOURCE
,

150 
ZCL_DATATYPE_UINT8
,

151 
ACCESS_CONTROL_READ
,

152 (*)&
z˛Sam∂eLight_PowîSour˚


156 
ZCL_CLUSTER_ID_GEN_BASIC
,

158 
ATTRID_BASIC_LOCATION_DESC
,

159 
ZCL_DATATYPE_CHAR_STR
,

160 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

161 (*)
z˛Sam∂eLight_Loˇti⁄Des¸ùti⁄


165 
ZCL_CLUSTER_ID_GEN_BASIC
,

167 
ATTRID_BASIC_PHYSICAL_ENV
,

168 
ZCL_DATATYPE_UINT8
,

169 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

170 (*)&
z˛Sam∂eLight_PhysiˇlEnvú⁄mít


174 
ZCL_CLUSTER_ID_GEN_BASIC
,

176 
ATTRID_BASIC_DEVICE_ENABLED
,

177 
ZCL_DATATYPE_BOOLEAN
,

178 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

179 (*)&
z˛Sam∂eLight_Devi˚E«bÀ


185 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

187 
ATTRID_IDENTIFY_TIME
,

188 
ZCL_DATATYPE_UINT16
,

189 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

190 (*)&
z˛Sam∂eLight_IdítifyTime


196 
ZCL_CLUSTER_ID_GEN_ON_OFF
,

198 
ATTRID_ON_OFF
,

199 
ZCL_DATATYPE_UINT8
,

200 
ACCESS_CONTROL_READ
,

201 (*)&
z˛Sam∂eLight_OnOff


211 
	#ZCLSAMPLELIGHT_MAX_INCLUSTERS
 5

	)

212 c⁄° 
cId_t
 
	gz˛Sam∂eLight_InClu°îLi°
[
ZCLSAMPLELIGHT_MAX_INCLUSTERS
] =

214 
ZCL_CLUSTER_ID_GEN_BASIC
,

215 
ZCL_CLUSTER_ID_GEN_SCENES
,

216 
ZCL_CLUSTER_ID_GEN_GROUPS
,

217 
ZCL_CLUSTER_ID_GEN_ON_OFF
,

218 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL


221 
	#ZCLSAMPLELIGHT_MAX_OUTCLUSTERS
 1

	)

222 c⁄° 
cId_t
 
	gz˛Sam∂eLight_OutClu°îLi°
[
ZCLSAMPLELIGHT_MAX_OUTCLUSTERS
] =

224 
ZCL_CLUSTER_ID_GEN_BASIC


227 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gz˛Sam∂eLight_Sim∂eDesc
 =

229 
SAMPLELIGHT_ENDPOINT
,

230 
ZCL_HA_PROFILE_ID
,

231 
ZCL_HA_DEVICEID_DIMMABLE_LIGHT
,

232 
SAMPLELIGHT_DEVICE_VERSION
,

233 
SAMPLELIGHT_FLAGS
,

234 
ZCLSAMPLELIGHT_MAX_INCLUSTERS
,

235 (
cId_t
 *)
z˛Sam∂eLight_InClu°îLi°
,

236 
ZCLSAMPLELIGHT_MAX_OUTCLUSTERS
,

237 (
cId_t
 *)
z˛Sam∂eLight_OutClu°îLi°


	@Projects/zstack/HomeAutomation/SampleSwitch/Source/OSAL_SampleSw.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"z˛_ßm∂esw.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
z˛_evít_lo›
,

88 
z˛Sam∂eSw_evít_lo›


91 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

92 
uöt16
 *
	gèsksEvíts
;

107 
	$oßlInôTasks
( )

109 
uöt8
 
èskID
 = 0;

111 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

112 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

114 
	`macTaskInô
–
èskID
++ );

115 
	`nwk_öô
–
èskID
++ );

116 
	`HÆ_Inô
–
èskID
++ );

117 #i‡
	`deföed
–
MT_TASK
 )

118 
	`MT_TaskInô
–
èskID
++ );

120 
	`APS_Inô
–
èskID
++ );

121 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

122 
	`APSF_Inô
–
èskID
++ );

124 
	`ZDAµ_Inô
–
èskID
++ );

125 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

126 
	`ZDNwkMgr_Inô
–
èskID
++ );

128 
	`z˛_Inô
–
èskID
++ );

129 
	`z˛Sam∂eSw_Inô
–
èskID
 );

130 
	}
}

	@Projects/zstack/HomeAutomation/SampleSwitch/Source/zcl_samplesw.c

49 
	~"ZComDef.h
"

50 
	~"OSAL.h
"

51 
	~"AF.h
"

52 
	~"ZDAµ.h
"

53 
	~"ZDObje˘.h
"

54 
	~"ZDProfûe.h
"

56 
	~"z˛.h
"

57 
	~"z˛_gíîÆ.h
"

58 
	~"z˛_ha.h
"

59 
	~"z˛_ßm∂esw.h
"

61 
	~"⁄bﬂrd.h
"

64 
	~"hÆ_lcd.h
"

65 
	~"hÆ_Àd.h
"

66 
	~"hÆ_key.h
"

83 
byã
 
	gz˛Sam∂eSw_TaskID
;

92 
afAddrTy≥_t
 
	gz˛Sam∂eSw_D°Addr
;

94 
	#ZCLSAMPLESW_BINDINGLIST
 1

	)

95 
cId_t
 
	gbödögOutClu°îs
[
ZCLSAMPLESW_BINDINGLIST
] =

97 
ZCL_CLUSTER_ID_GEN_ON_OFF


101 
ídPoötDesc_t
 
	gßm∂eSw_Te°Ep
 =

104 &
z˛Sam∂eSw_TaskID
,

105 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)
NULL
,

106 (
afNëw‹kL©ícyReq_t
)0

113 
z˛Sam∂eSw_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

114 
z˛Sam∂eSw_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 );

115 
z˛Sam∂eSw_BasicRe£tCB
( );

116 
z˛Sam∂eSw_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

117 
z˛Sam∂eSw_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

118 
z˛Sam∂eSw_Pro˚ssIdítifyTimeCh™ge
( );

121 
z˛Sam∂eSw_Pro˚ssIncomögMsg
–
z˛IncomögMsg_t
 *
msg
 );

122 #ifde‡
ZCL_READ


123 
uöt8
 
z˛Sam∂eSw_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

125 #ifde‡
ZCL_WRITE


126 
uöt8
 
z˛Sam∂eSw_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

128 
uöt8
 
z˛Sam∂eSw_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

129 #ifde‡
ZCL_DISCOVER


130 
uöt8
 
z˛Sam∂eSw_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

136 
z˛GíîÆ_AµCÆlbacks_t
 
	gz˛Sam∂eSw_CmdCÆlbacks
 =

138 
z˛Sam∂eSw_BasicRe£tCB
,

139 
z˛Sam∂eSw_IdítifyCB
,

140 
z˛Sam∂eSw_IdítifyQuîyR•CB
,

141 
NULL
,

142 
NULL
,

143 
NULL
,

144 
NULL
,

145 
NULL
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

164 
	$z˛Sam∂eSw_Inô
–
byã
 
èsk_id
 )

166 
z˛Sam∂eSw_TaskID
 = 
èsk_id
;

169 
z˛Sam∂eSw_D°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrNŸPª£¡
;

170 
z˛Sam∂eSw_D°Addr
.
ídPoöt
 = 0;

171 
z˛Sam∂eSw_D°Addr
.
addr
.
sh‹tAddr
 = 0;

174 
	`z˛HA_Inô
–&
z˛Sam∂eSw_Sim∂eDesc
 );

177 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
SAMPLESW_ENDPOINT
, &
z˛Sam∂eSw_CmdCÆlbacks
 );

180 
	`z˛_ªgi°îAârLi°
–
SAMPLESW_ENDPOINT
, 
SAMPLESW_MAX_ATTRIBUTES
, 
z˛Sam∂eSw_Aârs
 );

183 
	`z˛_ªgi°îF‹Msg
–
z˛Sam∂eSw_TaskID
 );

186 
	`Regi°îF‹Keys
–
z˛Sam∂eSw_TaskID
 );

189 
	`afRegi°î
–&
ßm∂eSw_Te°Ep
 );

191 
	`ZDO_Regi°îF‹ZDOMsg
–
z˛Sam∂eSw_TaskID
, 
End_Devi˚_Böd_r•
 );

192 
	`ZDO_Regi°îF‹ZDOMsg
–
z˛Sam∂eSw_TaskID
, 
M©ch_Desc_r•
 );

193 
	}
}

204 
uöt16
 
	$z˛Sam∂eSw_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

206 
afIncomögMSGPackë_t
 *
MSGpkt
;

207 ()
èsk_id
;

209 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

211  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
z˛Sam∂eSw_TaskID
 )) )

213  
MSGpkt
->
hdr
.
evít
 )

215 
ZCL_INCOMING_MSG
:

217 
	`z˛Sam∂eSw_Pro˚ssIncomögMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

220 
ZDO_CB_MSG
:

221 
	`z˛Sam∂eSw_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

224 
KEY_CHANGE
:

225 
	`z˛Sam∂eSw_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

233 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

237  (
evíts
 ^ 
SYS_EVENT_MSG
);

240 i‡–
evíts
 & 
SAMPLESW_IDENTIFY_TIMEOUT_EVT
 )

242 
z˛Sam∂eSw_IdítifyTime
 = 10;

243 
	`z˛Sam∂eSw_Pro˚ssIdítifyTimeCh™ge
();

245  ( 
evíts
 ^ 
SAMPLESW_IDENTIFY_TIMEOUT_EVT
 );

250 
	}
}

262 
	$z˛Sam∂eSw_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

264  
öMsg
->
˛u°îID
 )

266 
End_Devi˚_Böd_r•
:

267 i‡–
	`ZDO_P¨£BödR•
–
öMsg
 ) =
ZSuc˚ss
 )

270 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

272 #i‡
	`deföed
(
BLINK_LEDS
)

276 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_FLASH
 );

281 
M©ch_Desc_r•
:

283 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

284 i‡–
pR•
 )

286 i‡–
pR•
->
°©us
 =
ZSuc˚ss
 &&ÖR•->
˙t
 )

288 
z˛Sam∂eSw_D°Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

289 
z˛Sam∂eSw_D°Addr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

291 
z˛Sam∂eSw_D°Addr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

294 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

296 
	`oßl_mem_‰ì
–
pR•
 );

301 
	}
}

317 
	$z˛Sam∂eSw_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 )

319 
zAddrTy≥_t
 
d°Addr
;

320 ()
shi·
;

322 i‡–
keys
 & 
HAL_KEY_SW_1
 )

325 #ifde‡
ZCL_ON_OFF


326 
	`z˛GíîÆ_SídOnOff_CmdToggÀ
–
SAMPLESW_ENDPOINT
, &
z˛Sam∂eSw_D°Addr
, 
Ál£
, 0 );

330 i‡–
keys
 & 
HAL_KEY_SW_2
 )

332 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

336 
d°Addr
.
addrMode
 = 
afAddr16Bô
;

337 
d°Addr
.
addr
.
sh‹tAddr
 = 0;

338 
	`ZDP_EndDevi˚BödReq
–&
d°Addr
, 
	`NLME_GëSh‹tAddr
(),

339 
SAMPLESW_ENDPOINT
,

340 
ZCL_HA_PROFILE_ID
,

341 0, 
NULL
,

342 
ZCLSAMPLESW_BINDINGLIST
, 
bödögOutClu°îs
,

343 
TRUE
 );

346 i‡–
keys
 & 
HAL_KEY_SW_3
 )

350 i‡–
keys
 & 
HAL_KEY_SW_4
 )

352 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

355 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

356 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

357 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
,

358 
ZCL_HA_PROFILE_ID
,

359 
ZCLSAMPLESW_BINDINGLIST
, 
bödögOutClu°îs
,

360 0, 
NULL
,

361 
FALSE
 );

363 
	}
}

374 
	$z˛Sam∂eSw_Pro˚ssIdítifyTimeCh™ge
( )

376 i‡–
z˛Sam∂eSw_IdítifyTime
 > 0 )

378 
	`oßl_°¨t_timîEx
–
z˛Sam∂eSw_TaskID
, 
SAMPLESW_IDENTIFY_TIMEOUT_EVT
, 1000 );

379 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

383 i‡–
z˛Sam∂eSw_OnOff
 )

384 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

386 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

387 
	`oßl_°›_timîEx
–
z˛Sam∂eSw_TaskID
, 
SAMPLESW_IDENTIFY_TIMEOUT_EVT
 );

389 
	}
}

401 
	$z˛Sam∂eSw_BasicRe£tCB
( )

403 
	}
}

416 
	$z˛Sam∂eSw_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

418 
z˛Sam∂eSw_IdítifyTime
 = 
pCmd
->
idítifyTime
;

419 
	`z˛Sam∂eSw_Pro˚ssIdítifyTimeCh™ge
();

420 
	}
}

433 
	$z˛Sam∂eSw_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

436 ()
pR•
;

437 
	}
}

454 
	$z˛Sam∂eSw_Pro˚ssIncomögMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

456  
pInMsg
->
z˛Hdr
.
comm™dID
 )

458 #ifde‡
ZCL_READ


459 
ZCL_CMD_READ_RSP
:

460 
	`z˛Sam∂eSw_Pro˚ssInRódR•Cmd
–
pInMsg
 );

463 #ifde‡
ZCL_WRITE


464 
ZCL_CMD_WRITE_RSP
:

465 
	`z˛Sam∂eSw_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

468 #ifde‡
ZCL_REPORT


470 
ZCL_CMD_CONFIG_REPORT
:

474 
ZCL_CMD_CONFIG_REPORT_RSP
:

478 
ZCL_CMD_READ_REPORT_CFG
:

482 
ZCL_CMD_READ_REPORT_CFG_RSP
:

486 
ZCL_CMD_REPORT
:

490 
ZCL_CMD_DEFAULT_RSP
:

491 
	`z˛Sam∂eSw_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

493 #ifde‡
ZCL_DISCOVER


494 
ZCL_CMD_DISCOVER_RSP
:

495 
	`z˛Sam∂eSw_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

502 i‡–
pInMsg
->
©åCmd
 )

503 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

504 
	}
}

506 #ifde‡
ZCL_READ


516 
uöt8
 
	$z˛Sam∂eSw_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

518 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

519 
uöt8
 
i
;

521 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

522 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

529  
TRUE
;

530 
	}
}

533 #ifde‡
ZCL_WRITE


543 
uöt8
 
	$z˛Sam∂eSw_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

545 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

546 
uöt8
 
i
;

548 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

549 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

555  
TRUE
;

556 
	}
}

568 
uöt8
 
	$z˛Sam∂eSw_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

572 ()
pInMsg
;

573  
TRUE
;

574 
	}
}

576 #ifde‡
ZCL_DISCOVER


586 
uöt8
 
	$z˛Sam∂eSw_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

588 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

589 
uöt8
 
i
;

591 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

592  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

597  
TRUE
;

598 
	}
}

	@Projects/zstack/HomeAutomation/SampleSwitch/Source/zcl_samplesw.h

42 #i‚de‡
ZCL_SAMPLESW_H


43 
	#ZCL_SAMPLESW_H


	)

45 #ifde‡
__˝lu•lus


53 
	~"z˛.h
"

58 
	#SAMPLESW_ENDPOINT
 12

	)

60 
	#SAMPLESW_MAX_ATTRIBUTES
 11

	)

62 
	#LIGHT_OFF
 0x00

	)

63 
	#LIGHT_ON
 0x01

	)

66 
	#SAMPLESW_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

78 
Sim∂eDes¸ùti⁄F‹m©_t
 
z˛Sam∂eSw_Sim∂eDesc
;

80 
CONST
 
z˛AârRec_t
 
z˛Sam∂eSw_Aârs
[];

82 
uöt8
 
z˛Sam∂eSw_OnOff
;

84 
uöt16
 
z˛Sam∂eSw_IdítifyTime
;

93 
z˛Sam∂eSw_Inô
–
byã
 
èsk_id
 );

98 
UINT16
 
z˛Sam∂eSw_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 );

104 #ifde‡
__˝lu•lus


	@Projects/zstack/HomeAutomation/SampleSwitch/Source/zcl_samplesw_data.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"AF.h
"

47 
	~"ZDC⁄fig.h
"

49 
	~"z˛.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_ha.h
"

53 
	~"z˛_ßm∂esw.h
"

59 
	#SAMPLESW_DEVICE_VERSION
 0

	)

60 
	#SAMPLESW_FLAGS
 0

	)

62 
	#SAMPLESW_HWVERSION
 0

	)

63 
	#SAMPLESW_ZCLVERSION
 0

	)

78 c⁄° 
uöt8
 
	gz˛Sam∂eSw_HWRevisi⁄
 = 
SAMPLESW_HWVERSION
;

79 c⁄° 
uöt8
 
	gz˛Sam∂eSw_ZCLVîsi⁄
 = 
SAMPLESW_ZCLVERSION
;

80 c⁄° 
uöt8
 
	gz˛Sam∂eSw_M™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

81 c⁄° 
uöt8
 
	gz˛Sam∂eSw_ModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

82 c⁄° 
uöt8
 
	gz˛Sam∂eSw_D©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

83 c⁄° 
uöt8
 
	gz˛Sam∂eSw_PowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

85 
uöt8
 
	gz˛Sam∂eSw_Loˇti⁄Des¸ùti⁄
[17] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

86 
uöt8
 
	gz˛Sam∂eSw_PhysiˇlEnvú⁄mít
 = 0;

87 
uöt8
 
	gz˛Sam∂eSw_Devi˚E«bÀ
 = 
DEVICE_ENABLED
;

90 
uöt16
 
	gz˛Sam∂eSw_IdítifyTime
 = 0;

93 
uöt8
 
	gz˛Sam∂eSw_OnOff
 = 
LIGHT_OFF
;

98 
CONST
 
z˛AârRec_t
 
	gz˛Sam∂eSw_Aârs
[
SAMPLESW_MAX_ATTRIBUTES
] =

102 
ZCL_CLUSTER_ID_GEN_BASIC
,

104 
ATTRID_BASIC_HW_VERSION
,

105 
ZCL_DATATYPE_UINT8
,

106 
ACCESS_CONTROL_READ
,

107 (*)&
z˛Sam∂eSw_HWRevisi⁄


111 
ZCL_CLUSTER_ID_GEN_BASIC
,

113 
ATTRID_BASIC_ZCL_VERSION
,

114 
ZCL_DATATYPE_UINT8
,

115 
ACCESS_CONTROL_READ
,

116 (*)&
z˛Sam∂eSw_ZCLVîsi⁄


120 
ZCL_CLUSTER_ID_GEN_BASIC
,

122 
ATTRID_BASIC_MANUFACTURER_NAME
,

123 
ZCL_DATATYPE_CHAR_STR
,

124 
ACCESS_CONTROL_READ
,

125 (*)
z˛Sam∂eSw_M™uÁ˘uªrName


129 
ZCL_CLUSTER_ID_GEN_BASIC
,

131 
ATTRID_BASIC_MODEL_ID
,

132 
ZCL_DATATYPE_CHAR_STR
,

133 
ACCESS_CONTROL_READ
,

134 (*)
z˛Sam∂eSw_ModñId


138 
ZCL_CLUSTER_ID_GEN_BASIC
,

140 
ATTRID_BASIC_DATE_CODE
,

141 
ZCL_DATATYPE_CHAR_STR
,

142 
ACCESS_CONTROL_READ
,

143 (*)
z˛Sam∂eSw_D©eCode


147 
ZCL_CLUSTER_ID_GEN_BASIC
,

149 
ATTRID_BASIC_POWER_SOURCE
,

150 
ZCL_DATATYPE_UINT8
,

151 
ACCESS_CONTROL_READ
,

152 (*)&
z˛Sam∂eSw_PowîSour˚


156 
ZCL_CLUSTER_ID_GEN_BASIC
,

158 
ATTRID_BASIC_LOCATION_DESC
,

159 
ZCL_DATATYPE_CHAR_STR
,

160 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

161 (*)
z˛Sam∂eSw_Loˇti⁄Des¸ùti⁄


165 
ZCL_CLUSTER_ID_GEN_BASIC
,

167 
ATTRID_BASIC_PHYSICAL_ENV
,

168 
ZCL_DATATYPE_UINT8
,

169 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

170 (*)&
z˛Sam∂eSw_PhysiˇlEnvú⁄mít


174 
ZCL_CLUSTER_ID_GEN_BASIC
,

176 
ATTRID_BASIC_DEVICE_ENABLED
,

177 
ZCL_DATATYPE_UINT8
,

178 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

179 (*)&
z˛Sam∂eSw_Devi˚E«bÀ


185 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

187 
ATTRID_IDENTIFY_TIME
,

188 
ZCL_DATATYPE_UINT16
,

189 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

190 (*)&
z˛Sam∂eSw_IdítifyTime


196 
ZCL_CLUSTER_ID_GEN_ON_OFF
,

198 
ATTRID_ON_OFF
,

199 
ZCL_DATATYPE_UINT8
,

200 
ACCESS_CONTROL_READ
,

201 (*)&
z˛Sam∂eSw_OnOff


211 
	#ZCLSAMPLESW_MAX_INCLUSTERS
 1

	)

212 c⁄° 
cId_t
 
	gz˛Sam∂eSw_InClu°îLi°
[
ZCLSAMPLESW_MAX_INCLUSTERS
] =

214 
ZCL_CLUSTER_ID_GEN_BASIC


217 
	#ZCLSAMPLESW_MAX_OUTCLUSTERS
 1

	)

218 c⁄° 
cId_t
 
	gz˛Sam∂eSw_OutClu°îLi°
[
ZCLSAMPLESW_MAX_OUTCLUSTERS
] =

220 
ZCL_CLUSTER_ID_GEN_ON_OFF


223 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gz˛Sam∂eSw_Sim∂eDesc
 =

225 
SAMPLESW_ENDPOINT
,

226 
ZCL_HA_PROFILE_ID
,

227 
ZCL_HA_DEVICEID_ON_OFF_SWITCH
,

228 
SAMPLESW_DEVICE_VERSION
,

229 
SAMPLESW_FLAGS
,

230 
ZCLSAMPLESW_MAX_INCLUSTERS
,

231 (
cId_t
 *)
z˛Sam∂eSw_InClu°îLi°
,

232 
ZCLSAMPLESW_MAX_OUTCLUSTERS
,

233 (
cId_t
 *)
z˛Sam∂eSw_OutClu°îLi°


	@Projects/zstack/HomeAutomation/SampleSwitchOta/Source/OSAL_SampleSwOta.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"z˛_ßm∂eswŸa.h
"

67 
	~"z˛_Ÿa.h
"

74 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

75 
macEvítLo›
,

76 
nwk_evít_lo›
,

77 
HÆ_Pro˚ssEvít
,

78 #i‡
deföed
–
MT_TASK
 )

79 
MT_Pro˚ssEvít
,

81 
APS_evít_lo›
,

82 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

83 
APSF_Pro˚ssEvít
,

85 
ZDAµ_evít_lo›
,

86 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

87 
ZDNwkMgr_evít_lo›
,

89 
z˛_evít_lo›
,

90 
z˛Sam∂eSwOè_evít_lo›
,

91 
z˛OTA_evít_lo›


94 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

95 
uöt16
 *
	gèsksEvíts
;

110 
	$oßlInôTasks
( )

112 
uöt8
 
èskID
 = 0;

114 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

115 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

117 
	`macTaskInô
–
èskID
++ );

118 
	`nwk_öô
–
èskID
++ );

119 
	`HÆ_Inô
–
èskID
++ );

120 #i‡
	`deföed
–
MT_TASK
 )

121 
	`MT_TaskInô
–
èskID
++ );

123 
	`APS_Inô
–
èskID
++ );

124 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

125 
	`APSF_Inô
–
èskID
++ );

127 
	`ZDAµ_Inô
–
èskID
++ );

128 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

129 
	`ZDNwkMgr_Inô
–
èskID
++ );

131 
	`z˛_Inô
–
èskID
++ );

132 
	`z˛Sam∂eSwOè_Inô
–
èskID
++ );

133 
	`z˛OTA_Inô
 ( 
èskID
 );

134 
	}
}

	@Projects/zstack/HomeAutomation/SampleSwitchOta/Source/zcl_sampleswota.c

49 
	~"ZComDef.h
"

50 
	~"OSAL.h
"

51 
	~"AF.h
"

52 
	~"ZDAµ.h
"

53 
	~"ZDObje˘.h
"

54 
	~"ZDProfûe.h
"

56 
	~"z˛.h
"

57 
	~"z˛_gíîÆ.h
"

58 
	~"z˛_ha.h
"

59 
	~"z˛_ßm∂eswŸa.h
"

61 
	~"⁄bﬂrd.h
"

64 
	~"hÆ_lcd.h
"

65 
	~"hÆ_Àd.h
"

66 
	~"hÆ_key.h
"

68 
	~"z˛_Ÿa.h
"

69 
	~"hÆ_Ÿa.h
"

74 
	#APP_DISC_ENDPOINT
 0x08

	)

84 
uöt16
 
	maddr
;

85 
uöt8
 
	mídpoöt
;

86 } 
	tz˛Sam∂eSwOè_Sîvî_t
;

91 #¥agm®
loˇti⁄
="PREAMBLE"

92 c⁄° 
CODE
 
¥ómbÀ_t
 
	gOTA_PªambÀ
 =

95 
OTA_MANUFACTURER_ID
,

96 
OTA_TYPE_ID
,

99 #¥agm®
ªquúed
=
OTA_PªambÀ


101 #¥agm®
loˇti⁄
="CRC"

102 c⁄° 
CODE
 
ŸaCrc_t
 
	gOTA_CRC
 =

107 #¥agm®
ªquúed
=
OTA_CRC


109 
byã
 
	gz˛Sam∂eSwOè_TaskID
;

111 
ídPoötDesc_t
 
	g≠pDiscovîyEp
 =

113 
APP_DISC_ENDPOINT
,

114 &
z˛Sam∂eSwOè_TaskID
,

115 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
z˛Sam∂eSwOè_Sim∂eDesc
,

116 (
afNëw‹kL©ícyReq_t
) 0

119 
z˛Sam∂eSwOè_Sîvî_t
 
	gz˛Sam∂eSwOèSîvîLi°
[
SAMPLESWOTA_OTA_MAX_SERVERS
];

128 
afAddrTy≥_t
 
	gz˛Sam∂eSwOè_D°Addr
;

130 
	#ZCLSAMPLESWOTA_BINDINGLIST
 1

	)

131 
cId_t
 
	gbödögOutClu°îs
[
ZCLSAMPLESWOTA_BINDINGLIST
] =

133 
ZCL_CLUSTER_ID_GEN_ON_OFF


137 
ídPoötDesc_t
 
	gßm∂eSw_Te°Ep
 =

140 &
z˛Sam∂eSwOè_TaskID
,

141 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)
NULL
,

142 (
afNëw‹kL©ícyReq_t
)0

145 
uöt8
 
	gz˛Sam∂eSwOè_TønsID
;

150 
z˛Sam∂eSwOè_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

151 
z˛Sam∂eSwOè_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 );

152 
z˛Sam∂eSwOè_BasicRe£tCB
( );

153 
z˛Sam∂eSwOè_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

154 
z˛Sam∂eSwOè_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

155 
z˛Sam∂eSwOè_Pro˚ssIdítifyTimeCh™ge
( );

157 
z˛Sam∂eSwOè_Pro˚ssOTAMsgs
–
z˛OTA_CÆlbackMsg_t
* 
pMsg
 );

160 
z˛Sam∂eSwOè_Pro˚ssIncomögMsg
–
z˛IncomögMsg_t
 *
msg
 );

161 #ifde‡
ZCL_READ


162 
uöt8
 
z˛Sam∂eSwOè_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

164 #ifde‡
ZCL_WRITE


165 
uöt8
 
z˛Sam∂eSwOè_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

167 
uöt8
 
z˛Sam∂eSwOè_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

168 #ifde‡
ZCL_DISCOVER


169 
uöt8
 
z˛Sam∂eSwOè_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

175 
z˛GíîÆ_AµCÆlbacks_t
 
	gz˛Sam∂eSwOè_CmdCÆlbacks
 =

177 
z˛Sam∂eSwOè_BasicRe£tCB
,

178 
z˛Sam∂eSwOè_IdítifyCB
,

179 
z˛Sam∂eSwOè_IdítifyQuîyR•CB
,

180 
NULL
,

181 
NULL
,

182 
NULL
,

183 
NULL
,

184 
NULL
,

185 
NULL
,

186 
NULL
,

187 
NULL
,

188 
NULL
,

189 
NULL
,

190 
NULL
,

203 
	$z˛Sam∂eSwOè_Inô
–
byã
 
èsk_id
 )

205 
OTA_ImageHódî_t
 
hódî
;

206 
¥ómbÀ_t
 
¥ómbÀ
;

207 
z˛Sam∂eSwOè_TaskID
 = 
èsk_id
;

208 
lcdBuf
[20];

210 #i‡
HAL_OTA_XNV_IS_SPI


211 
	`XNV_SPI_INIT
();

215 
z˛Sam∂eSwOè_D°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrNŸPª£¡
;

216 
z˛Sam∂eSwOè_D°Addr
.
ídPoöt
 = 0;

217 
z˛Sam∂eSwOè_D°Addr
.
addr
.
sh‹tAddr
 = 0;

220 
	`HÆOTARód
(0, (
uöt8
 *)&
hódî
, (
OTA_ImageHódî_t
), 
HAL_OTA_DL
);

222 i‡(
hódî
.
magicNumbî
 =
OTA_HDR_MAGIC_NUMBER
)

224 
z˛OTA_Dow∆ﬂdedFûeVîsi⁄
 = 
hódî
.
fûeId
.
vîsi⁄
;

225 
z˛OTA_Dow∆ﬂdedZigBìSèckVîsi⁄
 = 
hódî
.
°ackVîsi⁄
;

229 
	`HÆOTARód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OTA_RC
);

231 
z˛OTA_M™uÁ˘uªrId
 = 
¥ómbÀ
.
m™uÁ˘uªrId
;

232 
z˛OTA_ImageTy≥
 = 
¥ómbÀ
.
imageTy≥
;

233 
z˛OTA_CuºítFûeVîsi⁄
 = 
¥ómbÀ
.
imageVîsi⁄
;

236 
	`z˛HA_Inô
–&
z˛Sam∂eSwOè_Sim∂eDesc
 );

239 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
SAMPLESWOTA_ENDPOINT
, &
z˛Sam∂eSwOè_CmdCÆlbacks
 );

242 
	`z˛_ªgi°îAârLi°
–
SAMPLESWOTA_ENDPOINT
, 
SAMPLESWOTA_MAX_ATTRIBUTES
, 
z˛Sam∂eSwOè_Aârs
 );

245 
	`z˛_ªgi°îF‹Msg
–
z˛Sam∂eSwOè_TaskID
 );

248 
	`Regi°îF‹Keys
–
z˛Sam∂eSwOè_TaskID
 );

251 
	`z˛OTA_Regi°î
(
z˛Sam∂eSwOè_TaskID
);

254 
	`afRegi°î
–&
ßm∂eSw_Te°Ep
 );

257 
	`afRegi°î
–&
≠pDiscovîyEp
 );

260 
	`oßl_mem£t
(
lcdBuf
, ' ', (lcdBuf));

261 
lcdBuf
[19] = '\0';

262 
	`oßl_mem˝y
(
lcdBuf
, "Ver: 0x", 7);

263 
	`_…ﬂ
(
z˛OTA_CuºítFûeVîsi⁄
, (
uöt8
*)&
lcdBuf
[7], 16);

264 
	`HÆLcdWrôeSåög
(
lcdBuf
, 
HAL_LCD_LINE_3
);

266 
	`ZDO_Regi°îF‹ZDOMsg
–
z˛Sam∂eSwOè_TaskID
, 
End_Devi˚_Böd_r•
 );

267 
	`ZDO_Regi°îF‹ZDOMsg
–
z˛Sam∂eSwOè_TaskID
, 
M©ch_Desc_r•
 );

268 
	}
}

279 
uöt16
 
	$z˛Sam∂eSwOè_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

281 
afIncomögMSGPackë_t
 *
MSGpkt
;

282 ()
èsk_id
;

284 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

286  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
z˛Sam∂eSwOè_TaskID
 )) )

288  
MSGpkt
->
hdr
.
evít
 )

290 
ZCL_OTA_CALLBACK_IND
:

291 
	`z˛Sam∂eSwOè_Pro˚ssOTAMsgs
–(
z˛OTA_CÆlbackMsg_t
*)
MSGpkt
 );

294 
ZCL_INCOMING_MSG
:

296 
	`z˛Sam∂eSwOè_Pro˚ssIncomögMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

299 
ZDO_CB_MSG
:

300 
	`z˛Sam∂eSwOè_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

303 
KEY_CHANGE
:

304 
	`z˛Sam∂eSwOè_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

312 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

316  (
evíts
 ^ 
SYS_EVENT_MSG
);

319 i‡–
evíts
 & 
SAMPLESWOTA_IDENTIFY_TIMEOUT_EVT
 )

321 
z˛Sam∂eSwOè_IdítifyTime
 = 10;

322 
	`z˛Sam∂eSwOè_Pro˚ssIdítifyTimeCh™ge
();

324  ( 
evíts
 ^ 
SAMPLESWOTA_IDENTIFY_TIMEOUT_EVT
 );

329 
	}
}

341 
	$z˛Sam∂eSwOè_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

343  
öMsg
->
˛u°îID
 )

345 
End_Devi˚_Böd_r•
:

346 i‡–
	`ZDO_P¨£BödR•
–
öMsg
 ) =
ZSuc˚ss
 )

349 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

351 #i‡
	`deföed
(
BLINK_LEDS
)

355 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_FLASH
 );

360 
M©ch_Desc_r•
:

362 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

363 i‡–
pR•
 )

365 i‡–
pR•
->
°©us
 =
ZSuc˚ss
 &&ÖR•->
˙t
 )

367 
z˛Sam∂eSwOè_D°Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

368 
z˛Sam∂eSwOè_D°Addr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

370 
z˛Sam∂eSwOè_D°Addr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

373 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

375 
	`oßl_mem_‰ì
–
pR•
 );

380 
	}
}

396 
	$z˛Sam∂eSwOè_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 )

398 
zAddrTy≥_t
 
d°Addr
;

399 ()
shi·
;

401 i‡–
keys
 & 
HAL_KEY_SW_1
 )

404 #ifde‡
ZCL_ON_OFF


405 
	`z˛GíîÆ_SídOnOff_CmdToggÀ
–
SAMPLESWOTA_ENDPOINT
, &
z˛Sam∂eSwOè_D°Addr
, 
Ál£
, 0 );

409 i‡–
keys
 & 
HAL_KEY_SW_2
 )

411 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

415 
d°Addr
.
addrMode
 = 
afAddr16Bô
;

416 
d°Addr
.
addr
.
sh‹tAddr
 = 0;

417 
	`ZDP_EndDevi˚BödReq
–&
d°Addr
, 
	`NLME_GëSh‹tAddr
(),

418 
SAMPLESWOTA_ENDPOINT
,

419 
ZCL_HA_PROFILE_ID
,

420 0, 
NULL
,

421 
ZCLSAMPLESWOTA_BINDINGLIST
, 
bödögOutClu°îs
,

422 
TRUE
 );

425 i‡–
keys
 & 
HAL_KEY_SW_3
 )

429 i‡–
keys
 & 
HAL_KEY_SW_4
 )

431 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

434 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

435 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

436 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
,

437 
ZCL_HA_PROFILE_ID
,

438 
ZCLSAMPLESWOTA_BINDINGLIST
, 
bödögOutClu°îs
,

439 0, 
NULL
,

440 
FALSE
 );

442 
	}
}

453 
	$z˛Sam∂eSwOè_Pro˚ssIdítifyTimeCh™ge
( )

455 i‡–
z˛Sam∂eSwOè_IdítifyTime
 > 0 )

457 
	`oßl_°¨t_timîEx
–
z˛Sam∂eSwOè_TaskID
, 
SAMPLESWOTA_IDENTIFY_TIMEOUT_EVT
, 1000 );

458 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

462 i‡–
z˛Sam∂eSwOè_OnOff
 )

463 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

465 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

466 
	`oßl_°›_timîEx
–
z˛Sam∂eSwOè_TaskID
, 
SAMPLESWOTA_IDENTIFY_TIMEOUT_EVT
 );

468 
	}
}

480 
	$z˛Sam∂eSwOè_BasicRe£tCB
( )

482 
	}
}

495 
	$z˛Sam∂eSwOè_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

497 
z˛Sam∂eSwOè_IdítifyTime
 = 
pCmd
->
idítifyTime
;

498 
	`z˛Sam∂eSwOè_Pro˚ssIdítifyTimeCh™ge
();

499 
	}
}

512 
	$z˛Sam∂eSwOè_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

515 ()
pR•
;

516 
	}
}

533 
	$z˛Sam∂eSwOè_Pro˚ssIncomögMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

535  
pInMsg
->
z˛Hdr
.
comm™dID
 )

537 #ifde‡
ZCL_READ


538 
ZCL_CMD_READ_RSP
:

539 
	`z˛Sam∂eSwOè_Pro˚ssInRódR•Cmd
–
pInMsg
 );

542 #ifde‡
ZCL_WRITE


543 
ZCL_CMD_WRITE_RSP
:

544 
	`z˛Sam∂eSwOè_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

547 #ifde‡
ZCL_REPORT


549 
ZCL_CMD_CONFIG_REPORT
:

553 
ZCL_CMD_CONFIG_REPORT_RSP
:

557 
ZCL_CMD_READ_REPORT_CFG
:

561 
ZCL_CMD_READ_REPORT_CFG_RSP
:

565 
ZCL_CMD_REPORT
:

569 
ZCL_CMD_DEFAULT_RSP
:

570 
	`z˛Sam∂eSwOè_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

572 #ifde‡
ZCL_DISCOVER


573 
ZCL_CMD_DISCOVER_RSP
:

574 
	`z˛Sam∂eSwOè_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

581 i‡–
pInMsg
->
©åCmd
 )

582 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

583 
	}
}

585 #ifde‡
ZCL_READ


595 
uöt8
 
	$z˛Sam∂eSwOè_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

597 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

598 
uöt8
 
i
;

600 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

601 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

608  
TRUE
;

609 
	}
}

612 #ifde‡
ZCL_WRITE


622 
uöt8
 
	$z˛Sam∂eSwOè_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

624 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

625 
uöt8
 
i
;

627 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

628 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

634  
TRUE
;

635 
	}
}

647 
uöt8
 
	$z˛Sam∂eSwOè_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

651 ()
pInMsg
;

652  
TRUE
;

653 
	}
}

655 #ifde‡
ZCL_DISCOVER


665 
uöt8
 
	$z˛Sam∂eSwOè_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

667 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

668 
uöt8
 
i
;

670 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

671  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

676  
TRUE
;

677 
	}
}

689 
	$z˛Sam∂eSwOè_Pro˚ssOTAMsgs
–
z˛OTA_CÆlbackMsg_t
* 
pMsg
 )

691 
uöt8
 
RxOnIdÀ
;

693 
pMsg
->
Ÿa_evít
)

695 
ZCL_OTA_START_CALLBACK
:

696 i‡(
pMsg
->
hdr
.
°©us
 =
ZSuc˚ss
)

699 
RxOnIdÀ
 = 
TRUE
;

700 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
RxOnIdÀ
 );

701 
	`NLME_SëPﬁlR©e
( 2000 );

705 
ZCL_OTA_DL_COMPLETE_CALLBACK
:

706 i‡(
pMsg
->
hdr
.
°©us
 =
ZSuc˚ss
)

710 
	`HÆOTAInvRC
();

711 
	`Sy°emRe£t
();

716 
RxOnIdÀ
 = 
FALSE
;

717 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
RxOnIdÀ
 );

718 
	`NLME_SëPﬁlR©e
(
DEVICE_POLL_RATE
);

725 
	}
}

	@Projects/zstack/HomeAutomation/SampleSwitchOta/Source/zcl_sampleswota.h

42 #i‚de‡
ZCL_SAMPLESWOTA_H


43 
	#ZCL_SAMPLESWOTA_H


	)

45 #ifde‡
__˝lu•lus


53 
	~"z˛.h
"

58 
	#SAMPLESWOTA_ENDPOINT
 12

	)

60 
	#SAMPLESWOTA_MAX_ATTRIBUTES
 11

	)

62 
	#LIGHT_OFF
 0x00

	)

63 
	#LIGHT_ON
 0x01

	)

66 
	#SAMPLESWOTA_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

68 
	#SAMPLESWOTA_OTA_MAX_SERVERS
 6

	)

70 
	#SAMPLESWOTA_OTA_IDLE_STATE
 0

	)

71 
	#SAMPLESWOTA_OTA_CBKE_STATE
 1

	)

72 
	#SAMPLESWOTA_OTA_DL_STATE
 2

	)

77 
	#DEVICE_POLL_RATE
 8000

78 

	)

85 
Sim∂eDes¸ùti⁄F‹m©_t
 
z˛Sam∂eSwOè_Sim∂eDesc
;

87 
CONST
 
z˛AârRec_t
 
z˛Sam∂eSwOè_Aârs
[];

89 
uöt8
 
z˛Sam∂eSwOè_OnOff
;

91 
uöt16
 
z˛Sam∂eSwOè_IdítifyTime
;

100 
z˛Sam∂eSwOè_Inô
–
byã
 
èsk_id
 );

105 
UINT16
 
z˛Sam∂eSwOè_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 );

111 #ifde‡
__˝lu•lus


	@Projects/zstack/HomeAutomation/SampleSwitchOta/Source/zcl_sampleswota_data.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"AF.h
"

47 
	~"ZDC⁄fig.h
"

49 
	~"z˛.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_ha.h
"

53 
	~"z˛_ßm∂eswŸa.h
"

59 
	#SAMPLESWOTA_DEVICE_VERSION
 0

	)

60 
	#SAMPLESWOTA_FLAGS
 0

	)

62 
	#SAMPLESWOTA_HWVERSION
 0

	)

63 
	#SAMPLESWOTA_ZCLVERSION
 0

	)

78 c⁄° 
uöt8
 
	gz˛Sam∂eSwOè_HWRevisi⁄
 = 
SAMPLESWOTA_HWVERSION
;

79 c⁄° 
uöt8
 
	gz˛Sam∂eSwOè_ZCLVîsi⁄
 = 
SAMPLESWOTA_ZCLVERSION
;

80 c⁄° 
uöt8
 
	gz˛Sam∂eSwOè_M™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

81 c⁄° 
uöt8
 
	gz˛Sam∂eSwOè_ModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

82 c⁄° 
uöt8
 
	gz˛Sam∂eSwOè_D©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

83 c⁄° 
uöt8
 
	gz˛Sam∂eSwOè_PowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

85 
uöt8
 
	gz˛Sam∂eSwOè_Loˇti⁄Des¸ùti⁄
[17] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

86 
uöt8
 
	gz˛Sam∂eSwOè_PhysiˇlEnvú⁄mít
 = 0;

87 
uöt8
 
	gz˛Sam∂eSwOè_Devi˚E«bÀ
 = 
DEVICE_ENABLED
;

90 
uöt16
 
	gz˛Sam∂eSwOè_IdítifyTime
 = 0;

93 
uöt8
 
	gz˛Sam∂eSwOè_OnOff
 = 
LIGHT_OFF
;

98 
CONST
 
z˛AârRec_t
 
	gz˛Sam∂eSwOè_Aârs
[
SAMPLESWOTA_MAX_ATTRIBUTES
] =

102 
ZCL_CLUSTER_ID_GEN_BASIC
,

104 
ATTRID_BASIC_HW_VERSION
,

105 
ZCL_DATATYPE_UINT8
,

106 
ACCESS_CONTROL_READ
,

107 (*)&
z˛Sam∂eSwOè_HWRevisi⁄


111 
ZCL_CLUSTER_ID_GEN_BASIC
,

113 
ATTRID_BASIC_ZCL_VERSION
,

114 
ZCL_DATATYPE_UINT8
,

115 
ACCESS_CONTROL_READ
,

116 (*)&
z˛Sam∂eSwOè_ZCLVîsi⁄


120 
ZCL_CLUSTER_ID_GEN_BASIC
,

122 
ATTRID_BASIC_MANUFACTURER_NAME
,

123 
ZCL_DATATYPE_CHAR_STR
,

124 
ACCESS_CONTROL_READ
,

125 (*)
z˛Sam∂eSwOè_M™uÁ˘uªrName


129 
ZCL_CLUSTER_ID_GEN_BASIC
,

131 
ATTRID_BASIC_MODEL_ID
,

132 
ZCL_DATATYPE_CHAR_STR
,

133 
ACCESS_CONTROL_READ
,

134 (*)
z˛Sam∂eSwOè_ModñId


138 
ZCL_CLUSTER_ID_GEN_BASIC
,

140 
ATTRID_BASIC_DATE_CODE
,

141 
ZCL_DATATYPE_CHAR_STR
,

142 
ACCESS_CONTROL_READ
,

143 (*)
z˛Sam∂eSwOè_D©eCode


147 
ZCL_CLUSTER_ID_GEN_BASIC
,

149 
ATTRID_BASIC_POWER_SOURCE
,

150 
ZCL_DATATYPE_UINT8
,

151 
ACCESS_CONTROL_READ
,

152 (*)&
z˛Sam∂eSwOè_PowîSour˚


156 
ZCL_CLUSTER_ID_GEN_BASIC
,

158 
ATTRID_BASIC_LOCATION_DESC
,

159 
ZCL_DATATYPE_CHAR_STR
,

160 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

161 (*)
z˛Sam∂eSwOè_Loˇti⁄Des¸ùti⁄


165 
ZCL_CLUSTER_ID_GEN_BASIC
,

167 
ATTRID_BASIC_PHYSICAL_ENV
,

168 
ZCL_DATATYPE_UINT8
,

169 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

170 (*)&
z˛Sam∂eSwOè_PhysiˇlEnvú⁄mít


174 
ZCL_CLUSTER_ID_GEN_BASIC
,

176 
ATTRID_BASIC_DEVICE_ENABLED
,

177 
ZCL_DATATYPE_UINT8
,

178 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

179 (*)&
z˛Sam∂eSwOè_Devi˚E«bÀ


185 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

187 
ATTRID_IDENTIFY_TIME
,

188 
ZCL_DATATYPE_UINT16
,

189 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

190 (*)&
z˛Sam∂eSwOè_IdítifyTime


196 
ZCL_CLUSTER_ID_GEN_ON_OFF
,

198 
ATTRID_ON_OFF
,

199 
ZCL_DATATYPE_UINT8
,

200 
ACCESS_CONTROL_READ
,

201 (*)&
z˛Sam∂eSwOè_OnOff


211 
	#ZCLSAMPLESWOTA_MAX_INCLUSTERS
 1

	)

212 c⁄° 
cId_t
 
	gz˛Sam∂eSwOè_InClu°îLi°
[
ZCLSAMPLESWOTA_MAX_INCLUSTERS
] =

214 
ZCL_CLUSTER_ID_GEN_BASIC


217 
	#ZCLSAMPLESWOTA_MAX_OUTCLUSTERS
 1

	)

218 c⁄° 
cId_t
 
	gz˛Sam∂eSwOè_OutClu°îLi°
[
ZCLSAMPLESWOTA_MAX_OUTCLUSTERS
] =

220 
ZCL_CLUSTER_ID_GEN_ON_OFF


223 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gz˛Sam∂eSwOè_Sim∂eDesc
 =

225 
SAMPLESWOTA_ENDPOINT
,

226 
ZCL_HA_PROFILE_ID
,

227 
ZCL_HA_DEVICEID_ON_OFF_SWITCH
,

228 
SAMPLESWOTA_DEVICE_VERSION
,

229 
SAMPLESWOTA_FLAGS
,

230 
ZCLSAMPLESWOTA_MAX_INCLUSTERS
,

231 (
cId_t
 *)
z˛Sam∂eSwOè_InClu°îLi°
,

232 
ZCLSAMPLESWOTA_MAX_OUTCLUSTERS
,

233 (
cId_t
 *)
z˛Sam∂eSwOè_OutClu°îLi°


	@Projects/zstack/HomeAutomation/Source/zcl_ha.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

46 
	~"z˛.h
"

47 
	~"z˛_gíîÆ.h
"

48 
	~"z˛_˛osuªs.h
"

49 
	~"z˛_HVAC.h
"

50 
	~"z˛_ss.h
"

51 
	~"z˛_ms.h
"

52 
	~"z˛_lightög.h
"

53 
	~"z˛_ha.h
"

98 
	$z˛HA_Inô
–
Sim∂eDes¸ùti⁄F‹m©_t
 *
sim∂eDesc
 )

100 
ídPoötDesc_t
 *
ïDesc
;

104 
ïDesc
 = 
	`oßl_mem_Æloc
– ( 
ídPoötDesc_t
 ) );

105 i‡–
ïDesc
 )

108 
ïDesc
->
ídPoöt
 = 
sim∂eDesc
->
EndPoöt
;

109 
ïDesc
->
èsk_id
 = &
z˛_TaskID
;

110 
ïDesc
->
sim∂eDesc
 = simpleDesc;

111 
ïDesc
->
œãncyReq
 = 
noL©ícyReqs
;

114 
	`afRegi°î
–
ïDesc
 );

116 
	}
}

	@Projects/zstack/HomeAutomation/Source/zcl_ha.h

41 #i‚de‡
ZCL_HA_H


42 
	#ZCL_HA_H


	)

44 #ifde‡
__˝lu•lus


57 
	#ZCL_HA_PROFILE_ID
 0x0104

	)

60 
	#ZCL_HA_DEVICEID_ON_OFF_SWITCH
 0x0000

	)

61 
	#ZCL_HA_DEVICEID_LEVEL_CONTROL_SWITCH
 0x0001

	)

62 
	#ZCL_HA_DEVICEID_ON_OFF_OUTPUT
 0x0002

	)

63 
	#ZCL_HA_DEVICEID_LEVEL_CONTROLLABLE_OUTPUT
 0x0003

	)

64 
	#ZCL_HA_DEVICEID_SCENE_SELECTOR
 0x0004

	)

65 
	#ZCL_HA_DEVICEID_CONFIGURATIOPN_TOOL
 0x0005

	)

66 
	#ZCL_HA_DEVICEID_REMOTE_CONTROL
 0x0006

	)

67 
	#ZCL_HA_DEVICEID_COMBINED_INETRFACE
 0x0007

	)

68 
	#ZCL_HA_DEVICEID_RANGE_EXTENDER
 0x0008

	)

69 
	#ZCL_HA_DEVICEID_MAINS_POWER_OUTLET
 0x0009

	)

71 
	#ZCL_HA_DEVICEID_TEST_DEVICE
 0x00FF

	)

74 
	#ZCL_HA_DEVICEID_ON_OFF_LIGHT
 0x0100

	)

75 
	#ZCL_HA_DEVICEID_DIMMABLE_LIGHT
 0x0101

	)

76 
	#ZCL_HA_DEVICEID_COLORED_DIMMABLE_LIGHT
 0x0102

	)

77 
	#ZCL_HA_DEVICEID_ON_OFF_LIGHT_SWITCH
 0x0103

	)

78 
	#ZCL_HA_DEVICEID_DIMMER_SWITCH
 0x0104

	)

79 
	#ZCL_HA_DEVICEID_COLOR_DIMMER_SWITCH
 0x0105

	)

80 
	#ZCL_HA_DEVICEID_LIGHT_SENSOR
 0x0106

	)

81 
	#ZCL_HA_DEVICEID_OCCUPANCY_SENSOR
 0x0107

	)

84 
	#ZCL_HA_DEVICEID_SHADE
 0x0200

	)

85 
	#ZCL_HA_DEVICEID_SHADE_CONTROLLER
 0x0201

	)

88 
	#ZCL_HA_DEVICEID_HEATING_COOLING_UNIT
 0x0300

	)

89 
	#ZCL_HA_DEVICEID_THERMOSTAT
 0x0301

	)

90 
	#ZCL_HA_DEVICEID_TEMPERATURE_SENSOR
 0x0302

	)

91 
	#ZCL_HA_DEVICEID_PUMP
 0x0303

	)

92 
	#ZCL_HA_DEVICEID_PUMP_CONTROLLER
 0x0304

	)

93 
	#ZCL_HA_DEVICEID_PRESSURE_SENSOR
 0x0305

	)

94 
	#ZCL_HA_DEVICEID_FLOW_SENSOR
 0x0306

	)

97 
	#ZCL_HA_DEVICEID_IAS_CONTROL_INDICATING_EQUIPMENT
 0x0400

	)

98 
	#ZCL_HA_DEVICEID_IAS_ANCILLARY_CONTROL_EQUIPMENT
 0x0401

	)

99 
	#ZCL_HA_DEVICEID_IAS_ZONE
 0x0402

	)

100 
	#ZCL_HA_DEVICEID_IAS_WARNING_DEVICE
 0x0403

	)

117 
z˛HA_Inô
–
Sim∂eDes¸ùti⁄F‹m©_t
 *
sim∂eDesc
 );

122 #ifde‡
__˝lu•lus


	@Projects/zstack/OTA/Dongle/Source/OSAL_OTA_Dongle.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

66 
	~"z˛_key_e°ablish.h
"

69 
	~"z˛_Ÿa.h
"

70 
	~"OTA_D⁄gÀ.h
"

77 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

78 
macEvítLo›
,

79 
nwk_evít_lo›
,

80 
HÆ_Pro˚ssEvít
,

81 #i‡
deföed
–
MT_TASK
 )

82 
MT_Pro˚ssEvít
,

84 
APS_evít_lo›
,

85 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

86 
APSF_Pro˚ssEvít
,

88 
ZDAµ_evít_lo›
,

89 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

90 
ZDNwkMgr_evít_lo›
,

92 
z˛_evít_lo›
,

93 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

94 
z˛KeyE°ablish_evít_lo›
,

96 
z˛OTA_evít_lo›
,

97 
OTA_D⁄gÀ_evít_lo›


100 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

101 
uöt16
 *
	gèsksEvíts
;

116 
	$oßlInôTasks
( )

118 
uöt8
 
èskID
 = 0;

120 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

121 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

123 
	`macTaskInô
–
èskID
++ );

124 
	`nwk_öô
–
èskID
++ );

125 
	`HÆ_Inô
–
èskID
++ );

126 #i‡
	`deföed
–
MT_TASK
 )

127 
	`MT_TaskInô
–
èskID
++ );

129 
	`APS_Inô
–
èskID
++ );

130 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

131 
	`APSF_Inô
–
èskID
++ );

133 
	`ZDAµ_Inô
–
èskID
++ );

134 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

135 
	`ZDNwkMgr_Inô
–
èskID
++ );

137 
	`z˛_Inô
–
èskID
++ );

138 #i‡
	`deföed
 ( 
ZCL_KEY_ESTABLISH
 )

139 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

141 
	`z˛OTA_Inô
–
èskID
++ );

142 
	`OTA_D⁄gÀ_Inô
–
èskID
 );

143 
	}
}

	@Projects/zstack/OTA/Dongle/Source/OTA_Dongle.c

50 
	~"ZComDef.h
"

51 
	~"OSAL.h
"

52 
	~"AF.h
"

53 
	~"ZDAµ.h
"

54 
	~"ZDProfûe.h
"

55 
	~"ZDObje˘.h
"

56 
	~"AddrMgr.h
"

58 
	~"z˛.h
"

59 
	~"z˛_gíîÆ.h
"

60 
	~"z˛_Ÿa.h
"

62 
	~"OTA_D⁄gÀ.h
"

63 
	~"Ÿa_comm⁄.h
"

65 
	~"⁄bﬂrd.h
"

68 
	~"hÆ_lcd.h
"

69 
	~"hÆ_Àd.h
"

70 
	~"hÆ_key.h
"

72 
	~"MT.h
"

73 
	~"MT_APP.h
"

74 
	~"MT_NWK.h
"

90 
uöt8
 
	gOTA_D⁄gÀ_TaskID
;

91 
uöt8
 
	gOTA_D⁄gÀ_SeqNo
;

92 
devSèãs_t
 
	gOTA_D⁄gÀ_devSèã
;

102 
	#OTA_DONGLE_BINDINGLIST
 2

	)

105 
ídPoötDesc_t
 
	gŸa_SysAµEp
 =

107 
OTA_SYSAPP_ENDPOINT
,

108 &
OTA_D⁄gÀ_TaskID
,

109 (
Sim∂eDes¸ùti⁄F‹m©_t
 *Ë&
OTA_D⁄gÀ_Sim∂eDesc
,

110 (
afNëw‹kL©ícyReq_t
)0

113 
ídPoötDesc_t
 
	gŸa_D⁄gÀEp
 =

115 
OTA_DONGLE_ENDPOINT
,

116 &
z˛_TaskID
,

117 (
Sim∂eDes¸ùti⁄F‹m©_t
*Ë&
OTA_D⁄gÀ_Sim∂eDesc
,

118 (
afNëw‹kL©ícyReq_t
)0

124 
OTA_D⁄gÀ_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 );

125 
OTA_D⁄gÀ_BasicRe£tCB
( );

126 
OTA_D⁄gÀ_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

127 
OTA_D⁄gÀ_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

128 
OTA_D⁄gÀ_Pro˚ssIdítifyTimeCh™ge
( );

130 
OTA_Pro˚ssZDOMsgs
(
zdoIncomögMsg_t
 * 
pMsg
);

132 
OTA_ProcSysAµMsg
(
mtSysAµMsg_t
 *
pMsg
);

133 
OTA_Pro˚ssSysAµ_ImageNŸifyReq
(
uöt8
 *
pD©a
);

134 
OTA_Pro˚ssSysAµ_RódAârReq
(
uöt8
 *
pD©a
);

135 
OTA_Pro˚ssSysAµ_DiscovîyReq
(
uöt8
 *
pD©a
);

136 
OTA_Pro˚ssSysAµ_JoöReq
(
uöt8
 *
pD©a
);

138 
OTA_Síd_Devi˚Ind
(
uöt16
 
sh‹tAddr
);

139 
OTA_Síd_JoöInd
();

140 
OTA_Síd_RódAârInd
(
uöt16
 
˛u°î
, uöt16 
sh‹tAddr
, 
z˛RódR•Sètus_t
 *
pAâr
);

141 
OTA_Síd_EndpoötInd
(
uöt16
 
addr
, 
uöt8
 
ídpoöt
);

142 
OTA_Síd_D⁄gÀInd
();

145 
OTA_D⁄gÀ_Pro˚ssIncomögMsg
–
z˛IncomögMsg_t
 *
msg
 );

146 #ifde‡
ZCL_READ


147 
uöt8
 
OTA_D⁄gÀ_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

149 #ifde‡
ZCL_WRITE


150 
uöt8
 
OTA_D⁄gÀ_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

152 
uöt8
 
OTA_D⁄gÀ_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

153 #ifde‡
ZCL_DISCOVER


154 
uöt8
 
OTA_D⁄gÀ_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

160 
z˛GíîÆ_AµCÆlbacks_t
 
	gOTA_D⁄gÀ_CmdCÆlbacks
 =

162 
OTA_D⁄gÀ_BasicRe£tCB
,

163 
OTA_D⁄gÀ_IdítifyCB
,

164 
OTA_D⁄gÀ_IdítifyQuîyR•CB
,

165 
NULL
,

166 
NULL
,

167 
NULL
,

168 
NULL
,

169 
NULL
,

170 
NULL
,

171 
NULL
,

172 
NULL
,

173 
NULL
,

174 
NULL
,

175 
NULL
,

187 
	$OTA_D⁄gÀ_Inô
–
byã
 
èsk_id
 )

189 
OTA_D⁄gÀ_TaskID
 = 
èsk_id
;

190 
uöt8
 
RxOnIdÀ
 = 
TRUE
;

192 
OTA_D⁄gÀ_SeqNo
 = 0;

194 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
RxOnIdÀ
 );

197 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
OTA_DONGLE_ENDPOINT
, &
OTA_D⁄gÀ_CmdCÆlbacks
 );

200 
	`z˛_ªgi°îAârLi°
–
OTA_DONGLE_ENDPOINT
, 
OTA_DONGLE_MAX_ATTRIBUTES
, 
OTA_D⁄gÀ_Aârs
 );

203 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
OTA_DONGLE_ENDPOINT
, 
OTA_DONGLE_MAX_OPTIONS
, 
OTA_D⁄gÀ_O±i⁄s
 );

206 
	`z˛_ªgi°îF‹Msg
–
OTA_D⁄gÀ_TaskID
 );

209 
	`Regi°îF‹Keys
–
OTA_D⁄gÀ_TaskID
 );

212 
	`afRegi°î
–&
Ÿa_D⁄gÀEp
 );

213 
	`afRegi°î
–&
Ÿa_SysAµEp
 );

216 
	`ZDO_Regi°îF‹ZDOMsg
(
èsk_id
, 
M©ch_Desc_r•
);

217 
	`ZDO_Regi°îF‹ZDOMsg
(
èsk_id
, 
Devi˚_™n˚
);

220 
	`oßl_°¨t_timîEx
–
OTA_D⁄gÀ_TaskID
, 
OTA_DONGLE_DONGLE_NOTIFY_EVT
, 4000 );

221 
	}
}

232 
uöt16
 
	$OTA_D⁄gÀ_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

234 
afIncomögMSGPackë_t
 *
MSGpkt
;

236 ()
èsk_id
;

238 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

240  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
OTA_D⁄gÀ_TaskID
 )) )

242  
MSGpkt
->
hdr
.
evít
 )

244 
ZDO_CB_MSG
:

245 
	`OTA_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

248 
MT_SYS_APP_MSG
:

249 
MT_SYS_APP_RSP_MSG
:

250 
	`OTA_ProcSysAµMsg
((
mtSysAµMsg_t
 *)
MSGpkt
);

253 
ZCL_INCOMING_MSG
:

255 
	`OTA_D⁄gÀ_Pro˚ssIncomögMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

258 
KEY_CHANGE
:

259 
	`OTA_D⁄gÀ_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

262 
ZDO_STATE_CHANGE
:

263 
OTA_D⁄gÀ_devSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

265 i‡((
OTA_D⁄gÀ_devSèã
 =
DEV_END_DEVICE
Ë|| (OTA_D⁄gÀ_devSèã =
DEV_ROUTER
Ë|| (OTA_D⁄gÀ_devSèã =
DEV_ZB_COORD
))

266 
	`OTA_Síd_JoöInd
();

274 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

278  (
evíts
 ^ 
SYS_EVENT_MSG
);

281 i‡–
evíts
 & 
OTA_DONGLE_DONGLE_NOTIFY_EVT
 )

283 
	`OTA_Síd_D⁄gÀInd
();

284 
	`oßl_°¨t_timîEx
–
OTA_D⁄gÀ_TaskID
, 
OTA_DONGLE_DONGLE_NOTIFY_EVT
, 4000 );

285  ( 
evíts
 ^ 
OTA_DONGLE_DONGLE_NOTIFY_EVT
 );

288 i‡–
evíts
 & 
OTA_DONGLE_IDENTIFY_TIMEOUT_EVT
 )

290 i‡–
OTA_D⁄gÀ_IdítifyTime
 > 0 )

292 
OTA_D⁄gÀ_IdítifyTime
--;

295 
	`OTA_D⁄gÀ_Pro˚ssIdítifyTimeCh™ge
();

297  ( 
evíts
 ^ 
OTA_DONGLE_IDENTIFY_TIMEOUT_EVT
 );

302 
	}
}

313 
	$OTA_Pro˚ssSysAµ_ImageNŸifyReq
(
uöt8
 *
pD©a
)

315 
z˛OTA_ImageNŸifyP¨ams_t
 
imgNŸifyP¨ams
;

316 
afAddrTy≥_t
 
d°Addr
;

319 
d°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

320 
d°Addr
.
ídPoöt
 = 
pD©a
[2];

321 
d°Addr
.
addrMode
 = 
afAddr16Bô
;

322 
d°Addr
.
∑nId
 = 
_NIB
.
nwkP™Id
;

325 
imgNŸifyP¨ams
.
∑ylﬂdTy≥
 = 
pD©a
[3];

326 
imgNŸifyP¨ams
.
quîyJôãr
 = 
pD©a
[4];

327 
imgNŸifyP¨ams
.
fûeId
.
m™uÁ˘uªr
 = 
	`BUILD_UINT16
(
pD©a
[5],ÖData[6]);

328 
imgNŸifyP¨ams
.
fûeId
.
ty≥
 = 
	`BUILD_UINT16
(
pD©a
[7],ÖData[8]);

329 
imgNŸifyP¨ams
.
fûeId
.
vîsi⁄
 = 
	`BUILD_UINT32
(
pD©a
[9],ÖData[10],ÖData[11],ÖData[12]);

332 
	`z˛OTA_SídImageNŸify
(&
d°Addr
, &
imgNŸifyP¨ams
);

333 
	}
}

344 
	$OTA_Pro˚ssSysAµ_RódAârReq
(
uöt8
 *
pD©a
)

346 
uöt8
 
ªadCmd
[(
z˛RódCmd_t
Ë+ (
uöt16
Ë* 
OTA_APP_MAX_ATTRIBUTES
];

347 
z˛RódCmd_t
 *
pRódCmd
 = (z˛RódCmd_t*Ë
ªadCmd
;

348 
afAddrTy≥_t
 
d°Addr
;

349 
uöt16
 
˛u°î
;

350 
öt8
 
i
;

353 
d°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

354 
d°Addr
.
ídPoöt
 = 
pD©a
[2];

355 
d°Addr
.
addrMode
 = 
afAddr16Bô
;

356 
d°Addr
.
∑nId
 = 
_NIB
.
nwkP™Id
;

359 
˛u°î
 = 
	`BUILD_UINT16
(
pD©a
[3],ÖData[4]);

360 
pRódCmd
->
numAâr
 = 
pD©a
[5];

362 i‡(
pRódCmd
->
numAâr
 > 
OTA_APP_MAX_ATTRIBUTES
)

363 
pRódCmd
->
numAâr
 = 
OTA_APP_MAX_ATTRIBUTES
;

365 
pD©a
 += 6;

366 
i
=0; i<
pRódCmd
->
numAâr
; i++)

368 
pRódCmd
->
©åID
[
i
] = 
	`BUILD_UINT16
(
pD©a
[i*2],ÖData[i*2+1]);

372 
	`z˛_SídRód
(
OTA_DONGLE_ENDPOINT
, &
d°Addr
, 
˛u°î
, 
pRódCmd
,

373 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
TRUE
, 
OTA_D⁄gÀ_SeqNo
++);

374 
	}
}

385 
	$OTA_Pro˚ssSysAµ_DiscovîyReq
(
uöt8
 *
pD©a
)

388 
cId_t
 
ŸaClu°î
 = 
ZCL_CLUSTER_ID_OTA
;

389 
zAddrTy≥_t
 
d°Addr
;

392 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

393 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

394 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
, 
ZCL_OTA_SAMPLE_PROFILE_ID
,

395 0, 
NULL
, 1, &
ŸaClu°î
, 
FALSE
 );

396 
	}
}

407 
	$OTA_Pro˚ssSysAµ_JoöReq
(
uöt8
 *
pD©a
)

410 
zgC⁄figPANID
 = 
	`BUILD_UINT16
(
pD©a
[0],ÖData[1]);

411 
zgDeÁu…Ch™√lLi°
 = 0x00000800;

412 
zgDeÁu…Ch™√lLi°
 <<(
pD©a
[2] - 11);

413 
zgDeÁu…SèπögSˇnDuøti⁄
 = 0;

416 
_nwkCÆlbackSub
 = 0;

419 
	`ZDOInôDevi˚
(0);

420 
	}
}

431 
	$OTA_Síd_Devi˚Ind
(
uöt16
 
sh‹tAddr
)

433 
uöt8
 
buf„r
[
OTA_APP_DEVICE_IND_LEN
];

434 
uöt8
 *
pBuf
 = 
buf„r
;

435 
uöt16
 
∑n
 = 
_NIB
.
nwkP™Id
;

437 *
pBuf
++ = 
OTA_SYSAPP_ENDPOINT
;

438 *
pBuf
++ = 
OTA_APP_DEVICE_IND
;

440 *
pBuf
++ = 
	`LO_UINT16
(
∑n
);

441 *
pBuf
++ = 
	`HI_UINT16
(
∑n
);

443 *
pBuf
++ = 
	`LO_UINT16
(
sh‹tAddr
);

444 *
pBuf
++ = 
	`HI_UINT16
(
sh‹tAddr
);

447 
	`MT_BuûdAndSídZToﬁRe•⁄£
(
MT_RPC_SYS_APP
, 
MT_APP_MSG
, 
OTA_APP_DEVICE_IND_LEN
, 
buf„r
);

448 
	}
}

459 
	$OTA_Síd_RódAârInd
(
uöt16
 
˛u°î
, uöt16 
sh‹tAddr
, 
z˛RódR•Sètus_t
 *
pAâr
)

461 
uöt8
 
buf„r
[
OTA_APP_READ_ATTRIBUTE_IND_LEN
];

462 
uöt8
 *
pBuf
 = 
buf„r
;

463 
uöt8
 
Àn
;

465 *
pBuf
++ = 
OTA_SYSAPP_ENDPOINT
;

466 *
pBuf
++ = 
OTA_APP_READ_ATTRIBUTE_IND
;

468 *
pBuf
++ = 
	`LO_UINT16
(
_NIB
.
nwkP™Id
);

469 *
pBuf
++ = 
	`HI_UINT16
(
_NIB
.
nwkP™Id
);

471 *
pBuf
++ = 
	`LO_UINT16
(
˛u°î
);

472 *
pBuf
++ = 
	`HI_UINT16
(
˛u°î
);

474 *
pBuf
++ = 
	`LO_UINT16
(
sh‹tAddr
);

475 *
pBuf
++ = 
	`HI_UINT16
(
sh‹tAddr
);

477 *
pBuf
++ = 
	`LO_UINT16
(
pAâr
->
©åID
);

478 *
pBuf
++ = 
	`HI_UINT16
(
pAâr
->
©åID
);

479 *
pBuf
++ = 
pAâr
->
°©us
;

480 *
pBuf
++ = 
pAâr
->
d©aTy≥
;

482 
Àn
 = 
	`z˛GëD©aTy≥Lígth
(
pAâr
->
d©aTy≥
);

485 i‡(
Àn
 <= 8)

487 *
pBuf
++ = 
Àn
;

489 i‡(
Àn
)

491 
uöt8
 *
pSå
;

493  
pAâr
->
d©aTy≥
 )

495 
ZCL_DATATYPE_UINT8
:

496 *
pBuf
 = *((
uöt8
 *)
pAâr
->
d©a
);

499 
ZCL_DATATYPE_UINT16
:

500 *
pBuf
++ = 
	`LO_UINT16
–*((
uöt16
*)
pAâr
->
d©a
) );

501 *
pBuf
++ = 
	`HI_UINT16
–*((
uöt16
*)
pAâr
->
d©a
) );

504 
ZCL_DATATYPE_UINT32
:

505 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, *((
uöt32
*)
pAâr
->
d©a
) );

508 
ZCL_DATATYPE_IEEE_ADDR
:

509 
pSå
 = (
uöt8
*)
pAâr
->
d©a
;

510 
	`oßl_mem˝y
–
pBuf
, 
pSå
, 8 );

519 *
pBuf
 = 0;

522 
	`MT_BuûdAndSídZToﬁRe•⁄£
(
MT_RPC_SYS_APP
, 
MT_APP_MSG
, 
OTA_APP_READ_ATTRIBUTE_IND_LEN
, 
buf„r
);

523 
	}
}

534 
	$OTA_Síd_JoöInd
()

536 
uöt8
 
buf„r
[
OTA_APP_JOIN_IND_LEN
];

537 
uöt8
 *
pBuf
 = 
buf„r
;

538 
uöt16
 
∑n
 = 
_NIB
.
nwkP™Id
;

540 *
pBuf
++ = 
OTA_SYSAPP_ENDPOINT
;

541 *
pBuf
++ = 
OTA_APP_JOIN_IND
;

543 *
pBuf
++ = 
	`LO_UINT16
(
∑n
);

544 *
pBuf
 = 
	`HI_UINT16
(
∑n
);

547 
	`MT_BuûdAndSídZToﬁRe•⁄£
(
MT_RPC_SYS_APP
, 
MT_APP_MSG
, 
OTA_APP_JOIN_IND_LEN
, 
buf„r
);

548 
	}
}

559 
	$OTA_Síd_EndpoötInd
(
uöt16
 
addr
, 
uöt8
 
ídpoöt
)

561 
uöt8
 
buf„r
[
OTA_APP_ENDPOINT_IND_LEN
];

562 
uöt8
 *
pBuf
 = 
buf„r
;

564 *
pBuf
++ = 
OTA_SYSAPP_ENDPOINT
;

565 *
pBuf
++ = 
OTA_APP_ENDPOINT_IND
;

567 *
pBuf
++ = 
	`LO_UINT16
(
_NIB
.
nwkP™Id
);

568 *
pBuf
++ = 
	`HI_UINT16
(
_NIB
.
nwkP™Id
);

570 *
pBuf
++ = 
	`LO_UINT16
(
addr
);

571 *
pBuf
++ = 
	`HI_UINT16
(
addr
);

573 *
pBuf
 = 
ídpoöt
;

576 
	`MT_BuûdAndSídZToﬁRe•⁄£
(
MT_RPC_SYS_APP
, 
MT_APP_MSG
, 
OTA_APP_ENDPOINT_IND_LEN
, 
buf„r
);

577 
	}
}

588 
	$OTA_Síd_D⁄gÀInd
()

590 
uöt8
 
buf„r
[128];

591 
uöt8
 *
pBuf
 = 
buf„r
;

593 *
pBuf
++ = 
OTA_SYSAPP_ENDPOINT
;

594 *
pBuf
++ = 
OTA_APP_DONGLE_IND
;

596 *
pBuf
++ = 
zgDevi˚LogiˇlTy≥
;

598 *
pBuf
++ = 
	`LO_UINT16
(
_NIB
.
nwkP™Id
);

599 *
pBuf
++ = 
	`HI_UINT16
(
_NIB
.
nwkP™Id
);

601 *
pBuf
++ = 
	`LO_UINT16
(
_NIB
.
nwkDevAddªss
);

602 *
pBuf
++ = 
	`HI_UINT16
(
_NIB
.
nwkDevAddªss
);

604 *
pBuf
++ = 
ZCL_OTA_ENDPOINT
;

606 *
pBuf
++ = 
_NIB
.
nwkLogiˇlCh™√l
;

608 *
pBuf
 = 
OTA_D⁄gÀ_devSèã
;

611 
	`MT_BuûdAndSídZToﬁRe•⁄£
(
MT_RPC_SYS_APP
, 
MT_APP_MSG
, 
pBuf
 - 
buf„r
, buffer);

612 
	}
}

623 
	$OTA_ProcSysAµMsg
(
mtSysAµMsg_t
 *
pMsg
)

625 
uöt8
 
cmd
;

627 i‡(
pMsg
 =
NULL
)

630 
cmd
 = *
pMsg
->
≠pD©a
++;

632 
cmd
)

634 
OTA_APP_READ_ATTRIBUTE_REQ
:

635 
	`OTA_Pro˚ssSysAµ_RódAârReq
(
pMsg
->
≠pD©a
);

637 
OTA_APP_IMAGE_NOTIFY_REQ
:

638 
	`OTA_Pro˚ssSysAµ_ImageNŸifyReq
(
pMsg
->
≠pD©a
);

640 
OTA_APP_DISCOVERY_REQ
:

641 
	`OTA_Pro˚ssSysAµ_DiscovîyReq
(
pMsg
->
≠pD©a
);

643 
OTA_APP_JOIN_REQ
:

644 
	`OTA_Pro˚ssSysAµ_JoöReq
(
pMsg
->
≠pD©a
);

646 
OTA_APP_LEAVE_REQ
:

648 
	`Sy°emRe£t
();

652 
	}
}

663 
	$OTA_Pro˚ssZDOMsgs
(
zdoIncomögMsg_t
 * 
pMsg
)

665 i‡(
pMsg
)

667 i‡(
pMsg
->
˛u°îID
 =
M©ch_Desc_r•
)

669 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
pMsg
 );

671 i‡(
pR•
)

674 i‡(
pR•
->
˙t
)

675 
	`OTA_Síd_EndpoötInd
(
pR•
->
nwkAddr
,ÖR•->
ïLi°
[0]);

677 
	`oßl_mem_‰ì
(
pR•
);

680 i‡(
pMsg
->
˛u°îID
 =
Devi˚_™n˚
)

682 
cId_t
 
ŸaClu°î
 = 
ZCL_CLUSTER_ID_OTA
;

683 
zAddrTy≥_t
 
d°Addr
;

685 
ZDO_Devi˚A¬˚_t
 
devA¬˚
;

686 
	`ZDO_P¨£Devi˚A¬˚
(
pMsg
, &
devA¬˚
);

687 
	`OTA_Síd_Devi˚Ind
(
devA¬˚
.
nwkAddr
);

690 
d°Addr
.
addrMode
 = 
Addr16Bô
;

691 
d°Addr
.
addr
.
sh‹tAddr
 = 
devA¬˚
.
nwkAddr
;

692 
	`ZDP_M©chDescReq
–&
d°Addr
, 
devA¬˚
.
nwkAddr
, 
ZCL_OTA_SAMPLE_PROFILE_ID
,

693 0, 
NULL
, 1, &
ŸaClu°î
, 
FALSE
 );

696 
	}
}

712 
	$OTA_D⁄gÀ_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 )

714 ()
shi·
;

716 i‡–
keys
 & 
HAL_KEY_SW_1
 )

718 
	`ZDOInôDevi˚
(0);

721 i‡–
keys
 & 
HAL_KEY_SW_2
 )

725 i‡–
keys
 & 
HAL_KEY_SW_3
 )

729 i‡–
keys
 & 
HAL_KEY_SW_4
 )

732 
	}
}

743 
	$OTA_D⁄gÀ_Pro˚ssIdítifyTimeCh™ge
( )

745 i‡–
OTA_D⁄gÀ_IdítifyTime
 > 0 )

747 
	`oßl_°¨t_timîEx
–
OTA_D⁄gÀ_TaskID
, 
OTA_DONGLE_IDENTIFY_TIMEOUT_EVT
, 1000 );

748 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

752 
	`oßl_°›_timîEx
–
OTA_D⁄gÀ_TaskID
, 
OTA_DONGLE_IDENTIFY_TIMEOUT_EVT
 );

754 
	}
}

766 
	$OTA_D⁄gÀ_BasicRe£tCB
( )

769 
	}
}

782 
	$OTA_D⁄gÀ_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

784 
OTA_D⁄gÀ_IdítifyTime
 = 
pCmd
->
idítifyTime
;

785 
	`OTA_D⁄gÀ_Pro˚ssIdítifyTimeCh™ge
();

786 
	}
}

799 
	$OTA_D⁄gÀ_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

802 ()
pR•
;

803 
	}
}

820 
	$OTA_D⁄gÀ_Pro˚ssIncomögMsg
–
z˛IncomögMsg_t
 *
pInMsg
)

822  
pInMsg
->
z˛Hdr
.
comm™dID
 )

824 #ifde‡
ZCL_READ


825 
ZCL_CMD_READ_RSP
:

826 
	`OTA_D⁄gÀ_Pro˚ssInRódR•Cmd
–
pInMsg
 );

829 #ifde‡
ZCL_WRITE


830 
ZCL_CMD_WRITE_RSP
:

831 
	`OTA_D⁄gÀ_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

834 
ZCL_CMD_DEFAULT_RSP
:

835 
	`OTA_D⁄gÀ_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

837 #ifde‡
ZCL_DISCOVER


838 
ZCL_CMD_DISCOVER_RSP
:

839 
	`OTA_D⁄gÀ_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

846 i‡–
pInMsg
->
©åCmd
 )

847 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

848 
	}
}

850 #ifde‡
ZCL_READ


860 
uöt8
 
	$OTA_D⁄gÀ_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

862 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

863 
uöt8
 
i
;

865 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

866 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

868 
	`OTA_Síd_RódAârInd
(
pInMsg
->
˛u°îId
,ÖInMsg->
§cAddr
.
addr
.
sh‹tAddr
, &
ªadR•Cmd
->
©åLi°
[
i
]);

871  
TRUE
;

872 
	}
}

875 #ifde‡
ZCL_WRITE


885 
uöt8
 
	$OTA_D⁄gÀ_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

887 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

888 
uöt8
 
i
;

890 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

891 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

897  
TRUE
;

898 
	}
}

910 
uöt8
 
	$OTA_D⁄gÀ_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

915 ()
pInMsg
;

917  
TRUE
;

918 
	}
}

920 #ifde‡
ZCL_DISCOVER


930 
uöt8
 
	$OTA_D⁄gÀ_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

932 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

933 
uöt8
 
i
;

935 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

936  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

941  
TRUE
;

942 
	}
}

	@Projects/zstack/OTA/Dongle/Source/OTA_Dongle.h

41 #i‚de‡
OTA_DONGLE_H


42 
	#OTA_DONGLE_H


	)

44 #ifde‡
__˝lu•lus


52 
	~"z˛.h
"

57 
	#OTA_DONGLE_ENDPOINT
 13

	)

58 
	#OTA_DONGLE_MAX_ATTRIBUTES
 12

	)

59 
	#OTA_DONGLE_MAX_OPTIONS
 1

	)

60 
	#OTA_SAMPLE_PROFILE_ID
 
ZCL_OTA_SAMPLE_PROFILE_ID


	)

61 
	#OTA_SAMPLE_DEVICEID
 0

	)

64 
	#OTA_DONGLE_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

65 
	#OTA_DONGLE_DONGLE_NOTIFY_EVT
 0x0002

	)

77 
Sim∂eDes¸ùti⁄F‹m©_t
 
OTA_D⁄gÀ_Sim∂eDesc
;

78 
CONST
 
z˛AârRec_t
 
OTA_D⁄gÀ_Aârs
[];

79 
z˛O±i⁄Rec_t
 
OTA_D⁄gÀ_O±i⁄s
[];

80 
uöt16
 
OTA_D⁄gÀ_IdítifyTime
;

89 
OTA_D⁄gÀ_Inô
–
byã
 
èsk_id
 );

94 
UINT16
 
OTA_D⁄gÀ_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 );

100 #ifde‡
__˝lu•lus


	@Projects/zstack/OTA/Dongle/Source/OTA_Dongle_data.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"AF.h
"

47 
	~"ZDC⁄fig.h
"

49 
	~"z˛.h
"

50 
	~"z˛_Ÿa.h
"

51 
	~"z˛_gíîÆ.h
"

53 
	~"OTA_D⁄gÀ.h
"

59 
	#OTA_DONGLE_DEVICE_VERSION
 0

	)

60 
	#OTA_DONGLE_FLAGS
 0

	)

62 
	#OTA_DONGLE_HWVERSION
 1

	)

63 
	#OTA_DONGLE_ZCLVERSION
 1

	)

78 c⁄° 
uöt8
 
	gOTA_D⁄gÀ_HWRevisi⁄
 = 
OTA_DONGLE_HWVERSION
;

79 c⁄° 
uöt8
 
	gOTA_D⁄gÀ_ZCLVîsi⁄
 = 
OTA_DONGLE_ZCLVERSION
;

80 c⁄° 
uöt8
 
	gOTA_D⁄gÀ_M™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

81 c⁄° 
uöt8
 
	gOTA_D⁄gÀ_ModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

82 c⁄° 
uöt8
 
	gOTA_D⁄gÀ_D©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

83 c⁄° 
uöt8
 
	gOTA_D⁄gÀ_PowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

85 
uöt8
 
	gOTA_D⁄gÀ_Loˇti⁄Des¸ùti⁄
[17] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

86 
uöt8
 
	gOTA_D⁄gÀ_PhysiˇlEnvú⁄mít
 = 0;

87 
uöt8
 
	gOTA_D⁄gÀ_Devi˚E«bÀ
 = 
DEVICE_ENABLED
;

90 
uöt16
 
	gOTA_D⁄gÀ_IdítifyTime
 = 0;

95 
CONST
 
z˛AârRec_t
 
	gOTA_D⁄gÀ_Aârs
[
OTA_DONGLE_MAX_ATTRIBUTES
] =

99 
ZCL_CLUSTER_ID_GEN_BASIC
,

101 
ATTRID_BASIC_HW_VERSION
,

102 
ZCL_DATATYPE_UINT8
,

103 
ACCESS_CONTROL_READ
,

104 (*)&
OTA_D⁄gÀ_HWRevisi⁄


108 
ZCL_CLUSTER_ID_GEN_BASIC
,

110 
ATTRID_BASIC_ZCL_VERSION
,

111 
ZCL_DATATYPE_UINT8
,

112 
ACCESS_CONTROL_READ
,

113 (*)&
OTA_D⁄gÀ_ZCLVîsi⁄


117 
ZCL_CLUSTER_ID_GEN_BASIC
,

119 
ATTRID_BASIC_MANUFACTURER_NAME
,

120 
ZCL_DATATYPE_CHAR_STR
,

121 
ACCESS_CONTROL_READ
,

122 (*)
OTA_D⁄gÀ_M™uÁ˘uªrName


126 
ZCL_CLUSTER_ID_GEN_BASIC
,

128 
ATTRID_BASIC_MODEL_ID
,

129 
ZCL_DATATYPE_CHAR_STR
,

130 
ACCESS_CONTROL_READ
,

131 (*)
OTA_D⁄gÀ_ModñId


135 
ZCL_CLUSTER_ID_GEN_BASIC
,

137 
ATTRID_BASIC_DATE_CODE
,

138 
ZCL_DATATYPE_CHAR_STR
,

139 
ACCESS_CONTROL_READ
,

140 (*)
OTA_D⁄gÀ_D©eCode


144 
ZCL_CLUSTER_ID_GEN_BASIC
,

146 
ATTRID_BASIC_POWER_SOURCE
,

147 
ZCL_DATATYPE_UINT8
,

148 
ACCESS_CONTROL_READ
,

149 (*)&
OTA_D⁄gÀ_PowîSour˚


153 
ZCL_CLUSTER_ID_GEN_BASIC
,

155 
ATTRID_BASIC_LOCATION_DESC
,

156 
ZCL_DATATYPE_CHAR_STR
,

157 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

158 (*)
OTA_D⁄gÀ_Loˇti⁄Des¸ùti⁄


162 
ZCL_CLUSTER_ID_GEN_BASIC
,

164 
ATTRID_BASIC_PHYSICAL_ENV
,

165 
ZCL_DATATYPE_UINT8
,

166 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

167 (*)&
OTA_D⁄gÀ_PhysiˇlEnvú⁄mít


171 
ZCL_CLUSTER_ID_GEN_BASIC
,

173 
ATTRID_BASIC_DEVICE_ENABLED
,

174 
ZCL_DATATYPE_BOOLEAN
,

175 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

176 (*)&
OTA_D⁄gÀ_Devi˚E«bÀ


182 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

184 
ATTRID_IDENTIFY_TIME
,

185 
ZCL_DATATYPE_UINT16
,

186 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

187 (*)&
OTA_D⁄gÀ_IdítifyTime


196 
z˛O±i⁄Rec_t
 
	gOTA_D⁄gÀ_O±i⁄s
[
OTA_DONGLE_MAX_OPTIONS
] =

199 
ZCL_CLUSTER_ID_OTA
,

200 #i‚de‡
OTA_HA


201 –
AF_EN_SECURITY
 ),

211 
	#OTA_DONGLE_MAX_INCLUSTERS
 3

	)

212 c⁄° 
cId_t
 
	gOTA_D⁄gÀ_InClu°îLi°
[
OTA_DONGLE_MAX_INCLUSTERS
] =

214 
ZCL_CLUSTER_ID_GEN_BASIC
,

215 
ZCL_CLUSTER_ID_GEN_SCENES
,

216 
ZCL_CLUSTER_ID_GEN_GROUPS
,

219 
	#OTA_DONGLE_MAX_OUTCLUSTERS
 1

	)

220 c⁄° 
cId_t
 
	gOTA_D⁄gÀ_OutClu°îLi°
[
OTA_DONGLE_MAX_OUTCLUSTERS
] =

222 
ZCL_CLUSTER_ID_GEN_BASIC


225 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gOTA_D⁄gÀ_Sim∂eDesc
 =

227 
OTA_DONGLE_ENDPOINT
,

228 
OTA_SAMPLE_PROFILE_ID
,

229 
OTA_SAMPLE_DEVICEID
,

230 
OTA_DONGLE_DEVICE_VERSION
,

231 
OTA_DONGLE_FLAGS
,

232 
OTA_DONGLE_MAX_INCLUSTERS
,

233 (
cId_t
 *)
OTA_D⁄gÀ_InClu°îLi°
,

234 
OTA_DONGLE_MAX_OUTCLUSTERS
,

235 (
cId_t
 *)
OTA_D⁄gÀ_OutClu°îLi°


	@Projects/zstack/OTA/Source/ota_common.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"Ÿa_comm⁄.h
"

47 #ifde‡
_WIN32


48 
	~<°rög.h
>

49 
	#oßl_mem˝y
 
mem˝y


	)

50 
	#oßl_°æí
 
°æí


	)

52 
	~"oßl.h
"

58 
	#UINT16_BREAK_HEX
(
a
, 
b
Ë((◊Ë>> (12-(4*(b)))Ë& 0xF)

	)

59 
	#UINT32_BREAK_HEX
(
a
, 
b
Ë((◊Ë>> (28-(4*(b)))Ë& 0xF)

	)

68 
	gHEX_ch¨
[] = "0123456789ABCDEF";

73 
uöt8
 
ch¨2uöt
(
c
);

84 
uöt8
 
	$ch¨2uöt
(
c
)

86 i‡(
c
 >= '0' && c <= '9')

88  
c
 - '0';

90 i‡(
c
 >= 'a' && c <= 'f')

92  0xA + 
c
 - 'a';

94 i‡(
c
 >= 'A' && c <= 'F')

96  0xA + 
c
 - 'A';

100 
	}
}

112 
uöt8
 *
	$OTA_P¨£Hódî
(
OTA_ImageHódî_t
 *
pHdr
, 
uöt8
 *
pBuf
)

114 
uöt8
 
i
;

117 
pHdr
->
magicNumbî
 = 
	`BUILD_UINT32
(
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3]);

118 
pBuf
 += 4;

121 
pHdr
->
hódîVîsi⁄
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

122 
pBuf
 += 2;

125 
pHdr
->
hódîLígth
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

126 
pBuf
 += 2;

129 
pHdr
->
fõldC⁄åﬁ
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

130 
pBuf
 += 2;

133 
pHdr
->
fûeId
.
m™uÁ˘uªr
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

134 
pBuf
 += 2;

137 
pHdr
->
fûeId
.
ty≥
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

138 
pBuf
 += 2;

141 
pHdr
->
fûeId
.
vîsi⁄
 = 
	`BUILD_UINT32
(
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3]);

142 
pBuf
 += 4;

145 
pHdr
->
°ackVîsi⁄
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

146 
pBuf
 += 2;

149 
i
=0; i<
OTA_HEADER_STR_LEN
; i++)

151 
pHdr
->
hódîSåög
[
i
] = *
pBuf
++;

155 
pHdr
->
imageSize
 = 
	`BUILD_UINT32
(
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3]);

156 
pBuf
 += 4;

159 i‡(
pHdr
->
fõldC⁄åﬁ
 & 
OTA_FC_SCV_PRESENT
)

161 
pHdr
->
£cCªdítülVî
 = *
pBuf
++;

165 i‡(
pHdr
->
fõldC⁄åﬁ
 & 
OTA_FC_DSF_PRESENT
)

167 
i
=0; i<
Z_EXTADDR_LEN
; i++)

169 
pHdr
->
de°IEEE
[
i
] = *
pBuf
++;

174 i‡(
pHdr
->
fõldC⁄åﬁ
 & 
OTA_FC_HWV_PRESENT
)

176 
pHdr
->
möHwVî
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

177 
pBuf
 += 2;

178 
pHdr
->
maxHwVî
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

179 
pBuf
 += 2;

182  
pBuf
;

183 
	}
}

195 
uöt8
 *
	$OTA_WrôeHódî
(
OTA_ImageHódî_t
 *
pHdr
, 
uöt8
 *
pBuf
)

197 
uöt8
 
i
;

202 *
pBuf
++ = 
	`BREAK_UINT32
(
pHdr
->
magicNumbî
, 0);

203 *
pBuf
++ = 
	`BREAK_UINT32
(
pHdr
->
magicNumbî
, 1);

204 *
pBuf
++ = 
	`BREAK_UINT32
(
pHdr
->
magicNumbî
, 2);

205 *
pBuf
++ = 
	`BREAK_UINT32
(
pHdr
->
magicNumbî
, 3);

208 *
pBuf
++ = 
	`LO_UINT16
(
pHdr
->
hódîVîsi⁄
);

209 *
pBuf
++ = 
	`HI_UINT16
(
pHdr
->
hódîVîsi⁄
);

212 *
pBuf
++ = 
	`LO_UINT16
(
pHdr
->
hódîLígth
);

213 *
pBuf
++ = 
	`HI_UINT16
(
pHdr
->
hódîLígth
);

216 *
pBuf
++ = 
	`LO_UINT16
(
pHdr
->
fõldC⁄åﬁ
);

217 *
pBuf
++ = 
	`HI_UINT16
(
pHdr
->
fõldC⁄åﬁ
);

220 *
pBuf
++ = 
	`LO_UINT16
(
pHdr
->
fûeId
.
m™uÁ˘uªr
);

221 *
pBuf
++ = 
	`HI_UINT16
(
pHdr
->
fûeId
.
m™uÁ˘uªr
);

224 *
pBuf
++ = 
	`LO_UINT16
(
pHdr
->
fûeId
.
ty≥
);

225 *
pBuf
++ = 
	`HI_UINT16
(
pHdr
->
fûeId
.
ty≥
);

230 *
pBuf
++ = 
	`BREAK_UINT32
(
pHdr
->
fûeId
.
vîsi⁄
, 0);

231 *
pBuf
++ = 
	`BREAK_UINT32
(
pHdr
->
fûeId
.
vîsi⁄
, 1);

232 *
pBuf
++ = 
	`BREAK_UINT32
(
pHdr
->
fûeId
.
vîsi⁄
, 2);

233 *
pBuf
++ = 
	`BREAK_UINT32
(
pHdr
->
fûeId
.
vîsi⁄
, 3);

236 *
pBuf
++ = 
	`LO_UINT16
(
pHdr
->
°ackVîsi⁄
);

237 *
pBuf
++ = 
	`HI_UINT16
(
pHdr
->
°ackVîsi⁄
);

240 
i
=0; i<
OTA_HEADER_STR_LEN
; i++)

242 *
pBuf
++ = 
pHdr
->
hódîSåög
[
i
];

248 *
pBuf
++ = 
	`BREAK_UINT32
(
pHdr
->
imageSize
, 0);

249 *
pBuf
++ = 
	`BREAK_UINT32
(
pHdr
->
imageSize
, 1);

250 *
pBuf
++ = 
	`BREAK_UINT32
(
pHdr
->
imageSize
, 2);

251 *
pBuf
++ = 
	`BREAK_UINT32
(
pHdr
->
imageSize
, 3);

254 i‡(
pHdr
->
fõldC⁄åﬁ
 & 
OTA_FC_SCV_PRESENT
)

256 *
pBuf
++ = 
pHdr
->
£cCªdítülVî
;

260 i‡(
pHdr
->
fõldC⁄åﬁ
 & 
OTA_FC_DSF_PRESENT
)

262 
i
=0; i<
Z_EXTADDR_LEN
; i++)

264 *
pBuf
++ = 
pHdr
->
de°IEEE
[
i
];

269 i‡(
pHdr
->
fõldC⁄åﬁ
 & 
OTA_FC_HWV_PRESENT
)

271 *
pBuf
++ = 
	`LO_UINT16
(
pHdr
->
möHwVî
);

272 *
pBuf
++ = 
	`HI_UINT16
(
pHdr
->
möHwVî
);

274 *
pBuf
++ = 
	`LO_UINT16
(
pHdr
->
maxHwVî
);

275 *
pBuf
++ = 
	`HI_UINT16
(
pHdr
->
maxHwVî
);

278  
pBuf
;

279 
	}
}

292 
	$OTA_GëFûeName
(*
pName
, 
z˛OTA_FûeID_t
 *
pFûeId
, *
ãxt
)

294 
öt8
 
i
, 
Àn
;

297 i‡(
pFûeId
->
m™uÁ˘uªr
 == 0xFFFF)

299 *
pName
++ = '*';

303 
i
=0; i<4; i++)

305 *
pName
++ = 
HEX_ch¨
[
	`UINT16_BREAK_HEX
(
pFûeId
->
m™uÁ˘uªr
, 
i
)];

309 *
pName
++ = '-';

312 i‡(
pFûeId
->
ty≥
 == 0xFFFF)

314 *
pName
++ = '*';

318 
i
=0; i<4; i++)

320 *
pName
++ = 
HEX_ch¨
[
	`UINT16_BREAK_HEX
(
pFûeId
->
ty≥
, 
i
)];

324 *
pName
++ = '-';

327 i‡(
pFûeId
->
vîsi⁄
 == 0xFFFFFFFF)

329 *
pName
++ = '*';

333 
i
=0; i<8; i++)

335 *
pName
++ = 
HEX_ch¨
[
	`UINT32_BREAK_HEX
(
pFûeId
->
vîsi⁄
, 
i
)];

339 i‡(
ãxt
)

341 
Àn
 = (
uöt8
Ë
	`oßl_°æí
(
ãxt
);

343 i‡(
Àn
)

345 *
pName
++ = '-';

346 
	`oßl_mem˝y
 (
pName
, 
ãxt
, 
Àn
);

347 
pName
 +
Àn
;

351 
	`oßl_mem˝y
 (
pName
, ".zigbee", 8);

352 
	}
}

365 
	$OTA_S∂ôFûeName
(*
pName
, 
z˛OTA_FûeID_t
 *
pFûeId
)

375 i‡(
pName
 && 
pFûeId
)

377 
uöt8
 
Àn
 = (uöt8Ë
	`oßl_°æí
(
pName
);

379 i‡(
Àn
 >= 19)

381 
uöt8
 
i
;

383 
pFûeId
->
m™uÁ˘uªr
 = 0;

384 
i
=0; i<4; i++)

386 
pFûeId
->
m™uÁ˘uªr
 |((
uöt16
Ë
	`ch¨2uöt
(*
pName
++)Ë<< (12 - (4*
i
));

389 
pName
++;

390 
pFûeId
->
ty≥
 = 0;

391 
i
=0; i<4; i++)

393 
pFûeId
->
ty≥
 |((
uöt16
Ë
	`ch¨2uöt
(*
pName
++)Ë<< (12 - (4*
i
));

396 
pName
++;

397 
pFûeId
->
vîsi⁄
 = 0;

398 
i
=0; i<8; i++)

400 
pFûeId
->
vîsi⁄
 |((
uöt32
Ë
	`ch¨2uöt
(*
pName
++)Ë<< (28 - (4*
i
));

404 
	}
}

416 
uöt8
 *
	$OTA_FûeIdToSåóm
(
z˛OTA_FûeID_t
 *
pFûeId
, 
uöt8
 *
pSåóm
)

418 i‡(
pSåóm
)

420 *
pSåóm
++ = 
	`LO_UINT16
(
pFûeId
->
m™uÁ˘uªr
);

421 *
pSåóm
++ = 
	`HI_UINT16
(
pFûeId
->
m™uÁ˘uªr
);

423 *
pSåóm
++ = 
	`LO_UINT16
(
pFûeId
->
ty≥
);

424 *
pSåóm
++ = 
	`HI_UINT16
(
pFûeId
->
ty≥
);

428 *
pSåóm
++ = 
	`BREAK_UINT32
(
pFûeId
->
vîsi⁄
, 0);

429 *
pSåóm
++ = 
	`BREAK_UINT32
(
pFûeId
->
vîsi⁄
, 1);

430 *
pSåóm
++ = 
	`BREAK_UINT32
(
pFûeId
->
vîsi⁄
, 2);

431 *
pSåóm
++ = 
	`BREAK_UINT32
(
pFûeId
->
vîsi⁄
, 3);

434  
pSåóm
;

435 
	}
}

447 
uöt8
 *
	$OTA_SåómToFûeId
(
z˛OTA_FûeID_t
 *
pFûeId
, 
uöt8
 *
pSåóm
)

449 i‡(
pSåóm
)

451 
pFûeId
->
m™uÁ˘uªr
 = 
	`BUILD_UINT16
(
pSåóm
[0],ÖStream[1]);

452 
pSåóm
 += 2;

453 
pFûeId
->
ty≥
 = 
	`BUILD_UINT16
(
pSåóm
[0],ÖStream[1]);

454 
pSåóm
 += 2;

455 
pFûeId
->
vîsi⁄
 = 
	`BUILD_UINT32
(
pSåóm
[0],ÖStream[1],ÖStream[2],ÖStream[3]);

456 
pSåóm
 += 4;

459  
pSåóm
;

460 
	}
}

472 
uöt8
 *
	$OTA_AfAddrToSåóm
(
afAddrTy≥_t
 *
pAddr
, 
uöt8
 *
pSåóm
)

474 i‡(
pAddr
 && 
pSåóm
)

476 *
pSåóm
++ = 
pAddr
->
addrMode
;

478 i‡(
pAddr
->
addrMode
 =
afAddr16Bô
)

480 *
pSåóm
++ = 
	`LO_UINT16
(
pAddr
->
addr
.
sh‹tAddr
);

481 *
pSåóm
++ = 
	`HI_UINT16
(
pAddr
->
addr
.
sh‹tAddr
);

483 i‡(
pAddr
->
addrMode
 =
afAddr64Bô
)

485 
	`oßl_mem˝y
(
pSåóm
, 
pAddr
->
addr
.
extAddr
, 
Z_EXTADDR_LEN
);

486 
pSåóm
 +
Z_EXTADDR_LEN
;

489 *
pSåóm
++ = 
pAddr
->
ídPoöt
;

491 *
pSåóm
++ = 
	`LO_UINT16
(
pAddr
->
∑nId
);

492 *
pSåóm
++ = 
	`HI_UINT16
(
pAddr
->
∑nId
);

495  
pSåóm
;

496 
	}
}

508 
uöt8
 *
	$OTA_SåómToAfAddr
(
afAddrTy≥_t
 *
pAddr
, 
uöt8
 *
pSåóm
)

510 i‡(
pAddr
 && 
pSåóm
)

512 
pAddr
->
addrMode
 = (
afAddrMode_t
Ë*
pSåóm
++;

514 i‡(
pAddr
->
addrMode
 =
afAddr16Bô
)

516 
pAddr
->
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
(
pSåóm
[0],ÖStream[1]);

517 
pSåóm
+= 2;

519 i‡(
pAddr
->
addrMode
 =
afAddr64Bô
)

521 
	`oßl_mem˝y
(
pAddr
->
addr
.
extAddr
, 
pSåóm
, 
Z_EXTADDR_LEN
);

522 
pSåóm
 +
Z_EXTADDR_LEN
;

525 
pAddr
->
ídPoöt
 = *
pSåóm
++;

526 
pAddr
->
∑nId
 = 
	`BUILD_UINT16
(
pSåóm
[0],ÖStream[1]);

527 
pSåóm
+= 2;

530  
pSåóm
;

531 
	}
}

	@Projects/zstack/OTA/Source/ota_common.h

41 #i‚de‡
OTA_COMMON_H


42 
	#OTA_COMMON_H


	)

44 #i‡!
deföed
 
HAL_OTA_BOOT_CODE


45 
	~"af.h
"

49 
	#OTA_SYSAPP_ENDPOINT
 20

	)

51 
	#OTA_APP_MAX_ATTRIBUTES
 7

	)

54 
	#MT_APP_ENDPOINT_POS
 0

	)

55 
	#MT_APP_COMMAND_POS
 1

	)

56 
	#MT_APP_DATA_POS
 2

	)

59 
	#OTA_APP_READ_ATTRIBUTE_REQ
 0

	)

60 
	#OTA_APP_IMAGE_NOTIFY_REQ
 1

	)

61 
	#OTA_APP_DISCOVERY_REQ
 2

	)

62 
	#OTA_APP_JOIN_REQ
 3

	)

63 
	#OTA_APP_LEAVE_REQ
 4

	)

65 
	#OTA_APP_READ_ATTRIBUTE_IND
 0x80

	)

66 
	#OTA_APP_IMAGE_NOTIFY_RSP
 0x81

	)

67 
	#OTA_APP_DEVICE_IND
 0x82

	)

68 
	#OTA_APP_JOIN_IND
 0x83

	)

69 
	#OTA_APP_ENDPOINT_IND
 0x85

	)

70 
	#OTA_APP_DONGLE_IND
 0x8A

	)

73 
	#OTA_APP_READ_ATTRIBUTE_REQ_LEN
 (8 + 
OTA_APP_MAX_ATTRIBUTES
*2)

	)

74 
	#OTA_APP_IMAGE_NOTIFY_REQ_LEN
 15

	)

75 
	#OTA_APP_DISCOVERY_REQ_LEN
 2

	)

76 
	#OTA_APP_JOIN_REQ_LEN
 5

	)

77 
	#OTA_APP_LEAVE_REQ_LEN
 2

	)

79 
	#OTA_APP_READ_ATTRIBUTE_IND_LEN
 21

	)

80 
	#OTA_APP_IMAGE_NOTIFY_RSP_LEN
 16

	)

81 
	#OTA_APP_DEVICE_IND_LEN
 6

	)

82 
	#OTA_APP_JOIN_IND_LEN
 4

	)

83 
	#OTA_APP_ENDPOINT_IND_LEN
 7

	)

85 
	#OTA_INVALID_ID
 0xFF

	)

88 
	#OTA_HDR_MAGIC_NUMBER
 0x0BEEF11E

	)

89 
	#OTA_HDR_BLOCK_SIZE
 128

	)

90 
	#OTA_HDR_STACK_VERSION
 2

	)

91 
	#OTA_HDR_HEADER_VERSION
 0x0100

	)

92 
	#OTA_HDR_FIELD_CTRL
 0

	)

94 
	#OTA_HEADER_LEN_MIN
 56

	)

95 
	#OTA_HEADER_LEN_MAX
 69

	)

96 
	#OTA_HEADER_LEN_MIN_ECDSA
 166

	)

97 
	#OTA_HEADER_STR_LEN
 32

	)

99 
	#OTA_HEADER_IMAGE_SIZE_POS
 52

	)

101 
	#OTA_HEADER_FILE_ID_POS
 10

	)

103 
	#OTA_FC_SCV_PRESENT
 (0x1 << 0)

	)

104 
	#OTA_FC_DSF_PRESENT
 (0x1 << 1)

	)

105 
	#OTA_FC_HWV_PRESENT
 (0x1 << 2)

	)

107 
	#OTA_SUB_ELEMENT_HDR_LEN
 6

	)

109 
	#OTA_UPGRADE_IMAGE_TAG_ID
 0

	)

110 
	#OTA_ECDSA_SIGNATURE_TAG_ID
 1

	)

111 
	#OTA_EDCSA_CERTIFICATE_TAG_ID
 2

	)

114 
	#MT_OTA_HW_VER_PRESENT_OPTION
 0x01

	)

115 
	#MT_OTA_QUERY_SPECIFIC_OPTION
 0x02

	)

118 
	#MT_OTA_DL_COMPLETE
 0

	)

122 
uöt16
 
	mm™uÁ˘uªr
;

123 
uöt16
 
	mty≥
;

124 
uöt32
 
	mvîsi⁄
;

125 } 
	tz˛OTA_FûeID_t
;

129 
uöt16
 
	mèg
;

130 
uöt32
 
	mÀngth
;

131 } 
	tOTA_SubEÀmítHdr_t
;

135 
uöt32
 
	mmagicNumbî
;

136 
uöt16
 
	mhódîVîsi⁄
;

137 
uöt16
 
	mhódîLígth
;

138 
uöt16
 
	mfõldC⁄åﬁ
;

139 
z˛OTA_FûeID_t
 
	mfûeId
;

140 
uöt16
 
	m°ackVîsi⁄
;

141 
uöt8
 
	mhódîSåög
[
OTA_HEADER_STR_LEN
];

142 
uöt32
 
	mimageSize
;

143 
uöt8
 
	m£cCªdítülVî
;

144 
uöt8
 
	mde°IEEE
[8];

145 
uöt16
 
	mmöHwVî
;

146 
uöt16
 
	mmaxHwVî
;

147 } 
	tOTA_ImageHódî_t
;

150 #ifde‡
__˝lu•lus


155 
uöt8
 *
OTA_WrôeHódî
(
OTA_ImageHódî_t
 *
pHdr
, uöt8 *
pBuf
);

156 
uöt8
 *
OTA_P¨£Hódî
(
OTA_ImageHódî_t
 *
pHdr
, uöt8 *
pBuf
);

158 
OTA_GëFûeName
(*
pName
, 
z˛OTA_FûeID_t
 *
pFûeId
, *
ãxt
);

159 
OTA_S∂ôFûeName
(*
pName
, 
z˛OTA_FûeID_t
 *
pFûeId
);

161 
uöt8
 *
OTA_SåómToFûeId
(
z˛OTA_FûeID_t
 *
pFûeId
, uöt8 *
pSåóm
);

162 
uöt8
 *
OTA_FûeIdToSåóm
(
z˛OTA_FûeID_t
 *
pFûeId
, uöt8 *
pSåóm
);

164 #i‡!
deföed
 
HAL_OTA_BOOT_CODE


165 
uöt8
 *
OTA_AfAddrToSåóm
(
afAddrTy≥_t
 *
pAddr
, uöt8 *
pSåóm
);

166 
uöt8
 *
OTA_SåómToAfAddr
(
afAddrTy≥_t
 *
pAddr
, uöt8 *
pSåóm
);

169 #ifde‡
__˝lu•lus


	@Projects/zstack/OTA/Source/ota_signature.c

41 
	~"hÆ_ty≥s.h
"

42 
	~"Ÿa_comm⁄.h
"

43 
	~"Ÿa_sig«tuª.h
"

44 
	~"ecˇpi.h
"

46 #ifde‡
_WIN32


47 
	~<°dio.h
>

48 
	~<°rög.h
>

49 
	~<°dlib.h
>

50 
	#oßl_mem£t
 
mem£t


	)

51 
	#oßl_mem˝y
 
mem˝y


	)

52 
	#oßl_°æí
 
°æí


	)

53 
	~"´s.h
"

54 
	#s•_HW_KeyInô
(
a
)

	)

56 
	~"oßl.h
"

57 
	~"hÆ_´s.h
"

58 
	~"s•_hash.h
"

59 
	~"ZGlobÆs.h
"

60 
	~"z˛.h
"

61 
	~"OSAL_Nv.h
"

64 
OTA_AesHashBlock
(
uöt8
 *
pHash
, uöt8 *
pD©a
);

65 
OTA_X‹Block
(
uöt8
 *
pHash
, uöt8 *
pD©a
);

66 
OTA_VÆid©eHashFunc
(
uöt8
 *
dige°
, 
uöt32
 
Àn
, uöt8 *
d©a
);

78 
	$OTA_AesHashBlock
(
uöt8
 *
pHash
, uöt8 *
pD©a
)

80 
uöt8
 
key
[
OTA_MMO_HASH_SIZE
];

82 
	`oßl_mem˝y
(
key
, 
pHash
, 
OTA_MMO_HASH_SIZE
);

83 
	`oßl_mem˝y
(
pHash
, 
pD©a
, 
OTA_MMO_HASH_SIZE
);

84 
	`s•_HW_KeyInô
(
key
);

85 
	`s•AesEn¸y±HW
(
key
, 
pHash
);

86 
	`OTA_X‹Block
(
pHash
, 
pD©a
);

87 
	}
}

100 
	$OTA_X‹Block
(
uöt8
 *
pHash
, uöt8 *
pD©a
)

102 
uöt8
 
i
;

104 
i
=0; i < 
OTA_MMO_HASH_SIZE
; i++)

106 
pHash
[
i
] ^
pD©a
[i];

108 
	}
}

125 
	$OTA_CÆcuœãMmoR3
(
OTA_MmoCål_t
 *
pCål
, 
uöt8
 *
pD©a
, uöt8 
Àn
, uöt8 
œ°Block
)

127 i‡(
œ°Block
)

129 
uöt32
 
m
 = (
pCål
->
Àngth
 + 
Àn
) << 3;

130 
uöt8
 
ídög
[
OTA_MMO_HASH_SIZE
];

132 
	`oßl_mem£t
(
ídög
, 0, 
OTA_MMO_HASH_SIZE
);

134 i‡–
Àn
 >
OTA_MMO_HASH_SIZE
 )

136 
Àn
 = 
OTA_MMO_HASH_SIZE
 - 1;

138 i‡(
Àn
)

140 
	`oßl_mem˝y
(
ídög
, 
pD©a
, 
Àn
);

142 
ídög
[
Àn
] = 0x80;

145 i‡(
m
 < 0x00010000)

147 if(
Àn
 > 13)

149 
	`OTA_AesHashBlock
(
pCål
->
hash
, 
ídög
);

150 
	`oßl_mem£t
(
ídög
, 0, 
OTA_MMO_HASH_SIZE
);

153 
ídög
[14] = (
uöt8
)((
m
 >> 8) &0xFF);

154 
ídög
[15] = (
uöt8
)(
m
 & 0xFF);

156 
	`OTA_AesHashBlock
(
pCål
->
hash
, 
ídög
);

160 i‡(
Àn
 > 9)

162 
	`OTA_AesHashBlock
(
pCål
->
hash
, 
ídög
);

163 
	`oßl_mem£t
(
ídög
, 0, 
OTA_MMO_HASH_SIZE
);

166 
ídög
[10] = (
uöt8
)((
m
 >> 24) & 0xFF);

167 
ídög
[11] = (
uöt8
)((
m
 >> 16) & 0xFF);

168 
ídög
[12] = (
uöt8
)((
m
 >> 8) & 0xFF);

169 
ídög
[13] = (
uöt8
)(
m
 & 0xFF);

171 
	`OTA_AesHashBlock
(
pCål
->
hash
, 
ídög
);

176 
	`OTA_AesHashBlock
(
pCål
->
hash
, 
pD©a
);

177 
pCål
->
Àngth
 +
OTA_MMO_HASH_SIZE
;

179 
	}
}

181 #i‡
deföed
 (
ZCL_KEY_ESTABLISH
)

193 
	$OTA_VÆid©eHashFunc
(
uöt8
 *
dige°
, 
uöt32
 
Àn
, uöt8 *
d©a
)

195 
Àn
 *= 8;

197 
	`s•MMOHash
–
NULL
, 0, 
d©a
, (
uöt16
)
Àn
, 
dige°
 );

199  
MCE_SUCCESS
;

200 
	}
}

215 
uöt8
 
	$OTA_VÆid©eSig«tuª
(
uöt8
 *
pHash
, uöt8* 
pCît
, uöt8 *
pSig
, uöt8 *
pIEEE
)

217 #i‡
	`deföed
 (
ZCL_KEY_ESTABLISH
)

218 
uöt8
 
publicKey
[
SECT163K1_COMPRESSED_PUBLIC_KEY_SIZE
];

219 
uöt8
 
ªt
;

220 
uöt8
 *
ˇPublicKey
;

222 i‡((
ˇPublicKey
 = 
	`oßl_mem_Æloc
(
ZCL_KE_CA_PUBLIC_KEY_LEN
)Ë=
NULL
)

224  
ZCL_STATUS_SOFTWARE_FAILURE
;

226 
	`oßl_nv_ªad
(
ZCD_NV_CA_PUBLIC_KEY
, 0, 
ZCL_KE_CA_PUBLIC_KEY_LEN
, 
ˇPublicKey
);

228 
ªt
 = 
	`ZSE_ECQVRec⁄°ru˘PublicKey
(
pCît
, 
ˇPublicKey
, 
publicKey
,

229 
OTA_VÆid©eHashFunc
, 
NULL
, 0);

230 
	`oßl_mem_‰ì
(
ˇPublicKey
);

232 i‡–
ªt
 =
MCE_SUCCESS
 )

234 
ªt
 = 
	`ZSE_ECDSAVîify
(
publicKey
, 
pHash
, 
pSig
,

235 
pSig
 + 
SECT163K1_POINT_ORDER_SIZE
,

236 
NULL
, 0 );

238 i‡–
ªt
 =
MCE_SUCCESS
 )

240  
ZSuc˚ss
;

244  
ZFaûuª
;

246  
ZSuc˚ss
;

248 
	}
}

	@Projects/zstack/OTA/Source/ota_signature.h

41 #i‚de‡
OTA_SIGNATURE_H


42 
	#OTA_SIGNATURE_H


	)

44 
	~"hÆ_ty≥s.h
"

46 
	#OTA_MMO_ROUNDS
 1

	)

47 
	#OTA_MMO_BLOCKSIZE
 32

	)

48 
	#OTA_MMO_HASH_SIZE
 16

	)

50 
	#OTA_MMO_IN_PROCESS
 0

	)

51 
	#OTA_MMO_ERROR
 1

	)

52 
	#OTA_MMO_COMPLETE
 2

	)

54 
	#OTA_SIGNATURE_LEN
 42

	)

55 
	#OTA_SIGNATURE_ELEM_LEN
 (
OTA_SIGNATURE_LEN
 + 
Z_EXTADDR_LEN
)

	)

56 
	#OTA_CERTIFICATE_LEN
 48

	)

60 
uöt8
 
	mhash
[
OTA_MMO_HASH_SIZE
];

61 
uöt32
 
	mÀngth
;

62 } 
	tOTA_MmoCål_t
;

65 #ifde‡
__˝lu•lus


71 
OTA_CÆcuœãMmoR3
(
OTA_MmoCål_t
 *
pCål
, 
uöt8
 *
pD©a
, uöt8 
Àn
, uöt8 
œ°Block
);

72 
uöt8
 
OTA_VÆid©eSig«tuª
(uöt8 *
pHash
, uöt8* 
pCît
, uöt8 *
pSig
, uöt8 *
pIEEE
);

73 
s•MMOHash2
 (
uöt8
 *
Pb
, uöt8 
¥efix
, uöt8 *
Mb
, 
uöt16
 
bôÀn
, uöt8 *
C°©e
);

75 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/ESP/OSAL_ESP.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL_Tasks.h
"

48 #i‡
deföed
 ( 
MT_TASK
 )

49 
	~"MT_TASK.h
"

52 
	~"ZDAµ.h
"

53 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

57 
	~"≠s_‰ag.h
"

60 #i‡
deföed
 ( 
INTER_PAN
 )

61 
	~"°ub_≠s.h
"

64 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

65 
	~"z˛_key_e°ablish.h
"

68 
	~"e•.h
"

75 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

76 
macEvítLo›
,

77 
nwk_evít_lo›
,

78 
HÆ_Pro˚ssEvít
,

79 #i‡
deföed
–
MT_TASK
 )

80 
MT_Pro˚ssEvít
,

82 
APS_evít_lo›
,

83 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

84 
APSF_Pro˚ssEvít
,

86 
ZDAµ_evít_lo›
,

87 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

88 
ZDNwkMgr_evít_lo›
,

90 #i‡
deföed
–
INTER_PAN
 )

91 
StubAPS_Pro˚ssEvít
,

93 
z˛_evít_lo›
,

94 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

95 
z˛KeyE°ablish_evít_lo›
,

97 
e•_evít_lo›


100 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

101 
uöt16
 *
	gèsksEvíts
;

116 
	$oßlInôTasks
( )

118 
uöt8
 
èskID
 = 0;

120 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

121 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

123 
	`macTaskInô
–
èskID
++ );

124 
	`nwk_öô
–
èskID
++ );

125 
	`HÆ_Inô
–
èskID
++ );

126 #i‡
	`deföed
–
MT_TASK
 )

127 
	`MT_TaskInô
–
èskID
++ );

129 
	`APS_Inô
–
èskID
++ );

130 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

131 
	`APSF_Inô
–
èskID
++ );

133 
	`ZDAµ_Inô
–
èskID
++ );

134 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

135 
	`ZDNwkMgr_Inô
–
èskID
++ );

137 #i‡
	`deföed
–
INTER_PAN
 )

138 
	`StubAPS_Inô
–
èskID
++ );

140 
	`z˛_Inô
–
èskID
++ );

141 #i‡
	`deföed
 ( 
ZCL_KEY_ESTABLISH
 )

142 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

144 
	`e•_Inô
–
èskID
 );

145 
	}
}

	@Projects/zstack/SE/SampleApp/Source/ESP/esp.c

65 
	~"OSAL.h
"

66 
	~"OSAL_Clock.h
"

67 
	~"OSAL_Nv.h
"

68 
	~"MT.h
"

69 
	~"MT_APP.h
"

70 
	~"ZDObje˘.h
"

71 
	~"AddrMgr.h
"

73 
	~"£.h
"

74 
	~"e•.h
"

75 
	~"z˛_gíîÆ.h
"

76 
	~"z˛_£.h
"

77 
	~"z˛_key_e°ablish.h
"

79 #i‡
deföed
–
INTER_PAN
 )

80 
	~"°ub_≠s.h
"

83 
	~"⁄bﬂrd.h
"

86 
	~"hÆ_lcd.h
"

87 
	~"hÆ_Àd.h
"

88 
	~"hÆ_key.h
"

96 
	#z˛_M™d©‹yRï‹èbÀAâribuã
–
a
 ) (á =
NULL
 )

	)

102 
	#ESP_MIN_REPORTING_INTERVAL
 5

	)

104 #i‡
deföed
 ( 
SE_UK_EXT
 ) && deföed ( 
SE_MIRROR
 )

107 
	#ESP_MIRROR_EP_BASE
 24

	)

111 
	#ESP_MAX_MIRRORS
 16

	)

112 
	#ESP_MIRROR_FULL_MASK
 0xFFFF

	)

114 
	#ESP_MIRROR_NOTIFY_ATTR_COUNT
 6

	)

115 
	#ESP_MIRROR_USER_ATTRIBUTES_POSITION
 
ESP_MIRROR_NOTIFY_ATTR_COUNT


	)

116 
	#ESP_MIRROR_MAX_USER_ATTRIBUTES
 8

	)

117 
	#ESP_MIRROR_MAX_ATTRIBUTES
 (
ESP_MIRROR_NOTIFY_ATTR_COUNT
 + 
ESP_MIRROR_MAX_USER_ATTRIBUTES
)

	)

118 
	#ESP_MIRROR_INVALID_ENDPOINT
 0xFF

	)

137 
uöt8
 
	ge•TaskID
;

138 
afAddrTy≥_t
 
	gùdAddr
;

139 
afAddrTy≥_t
 
	gp˘Addr
;

140 
afAddrTy≥_t
 
	glﬂdC⁄åﬁAddr
;

141 
zAddrTy≥_t
 
	gsim∂eDescReqAddr
;

142 
z˛CCLﬂdC⁄åﬁEvít_t
 
	glﬂdC⁄åﬁCmd
;

143 
uöt16
 
	ge•Fa°PﬁlModeDuøti⁄
;

145 #i‡
deföed
 ( 
INTER_PAN
 )

147 
ídPoötDesc_t
 
	ge•Ep
 =

149 
ESP_ENDPOINT
,

150 &
e•TaskID
,

151 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
e•Sim∂eDesc
,

152 (
afNëw‹kL©ícyReq_t
)0

156 #i‡
deföed
 ( 
SE_UK_EXT
 ) && deföed ( 
SE_MIRROR
 )

159 
uöt16
 
	m§cAddr
;

160 
uöt8
 
	m§cEndpoöt
;

161 
z˛AârRec_t
 *
	mpAâr
;

162 
uöt8
 
	mnŸifiˇti⁄C⁄åﬁ
;

163 
z˛CCReqMúr‹Rï‹tAârR•_t
 
	mnŸifiˇti⁄Së
;

164 } 
	te•Múr‹Info_t
;

168 
uöt16
 
	mmúr‹Mask
;

169 
e•Múr‹Info_t
 
	mmúr‹Info
[
ESP_MAX_MIRRORS
];

170 } 
	te•Múr‹C⁄åﬁ_t
;

172 
	#MIRROR_DEVICE_VERSION
 0

	)

173 
	#MIRROR_FLAGS
 0

	)

175 
	#MIRROR_MAX_INCLUSTERS
 2

	)

176 
CONST
 
cId_t
 
	gmúr‹InClu°îLi°
[
MIRROR_MAX_INCLUSTERS
] =

178 
ZCL_CLUSTER_ID_GEN_BASIC
,

179 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING


182 
	#MIRROR_MAX_OUTCLUSTERS
 2

	)

183 
CONST
 
cId_t
 
	gmúr‹OutClu°îLi°
[
MIRROR_MAX_OUTCLUSTERS
] =

185 
ZCL_CLUSTER_ID_GEN_BASIC
,

186 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING


193 
e•_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

194 
e•_Pro˚ssAµMsg
–
uöt8
 *
msg
 );

196 
e•_Pro˚ssIdítifyTimeCh™ge
( );

203 
uöt8
 
e•_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 );

206 
e•_BasicRe£tCB
( );

207 
e•_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

208 
e•_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

209 
e•_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 );

210 #ifde‡
SE_UK_EXT


211 
e•_GëEvítLogCB
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
§cAddr
,

212 
z˛GëEvítLog_t
 *
pEvítLog
, 
uöt8
 
£qNum
 );

213 
e•_PublishEvítLogCB
–
afAddrTy≥_t
 *
§cAddr
, 
z˛PublishEvítLog_t
 *
pEvítLog
 );

217 
e•_GëProfûeCmdCB
–
z˛CCGëProfûeCmd_t
 *
pCmd
,

218 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

219 
e•_GëProfûeR•CB
–
z˛CCGëProfûeR•_t
 *
pCmd
,

220 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

221 
e•_ReqMúr‹CmdCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

222 
e•_ReqMúr‹R•CB
–
z˛CCReqMúr‹R•_t
 *
pCmd
,

223 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

224 
e•_Múr‹RemCmdCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

225 
e•_Múr‹RemR•CB
–
z˛CCMúr‹RemR•_t
 *
pCmd
,

226 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

227 
e•_ReqFa°PﬁlModeCmdCB
–
z˛CCReqFa°PﬁlModeCmd_t
 *
pCmd
,

228 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

229 
e•_ReqFa°PﬁlModeR•CB
–
z˛CCReqFa°PﬁlModeR•_t
 *
pR•
,

230 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

231 
e•_GëCuºítPri˚CB
–
z˛CCGëCuºítPri˚_t
 *
pCmd
,

232 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

233 
e•_GëScheduÀdPri˚CB
–
z˛CCGëScheduÀdPri˚_t
 *
pCmd
,

234 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

235 
e•_Pri˚AcknowÀdgemítCB
–
z˛CCPri˚AcknowÀdgemít_t
 *
pCmd
,

236 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

237 
e•_GëBlockPîiodCB
–
z˛CCGëBlockPîiod_t
 *
pCmd
,

238 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

239 
e•_PublishPri˚CB
–
z˛CCPublishPri˚_t
 *
pCmd
,

240 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

241 
e•_PublishBlockPîiodCB
–
z˛CCPublishBlockPîiod_t
 *
pCmd
,

242 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

243 
e•_Di•œyMesßgeCB
–
z˛CCDi•œyMesßge_t
 *
pCmd
,

244 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

245 
e•_C™˚lMesßgeCB
–
z˛CCC™˚lMesßge_t
 *
pCmd
,

246 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

247 
e•_GëLa°MesßgeCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

248 
e•_MesßgeC⁄fúm©i⁄CB
–
z˛CCMesßgeC⁄fúm©i⁄_t
 *
pCmd
,

249 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

250 
e•_LﬂdC⁄åﬁEvítCB
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

251 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
°©us
, uöt8 
£qNum
);

252 
e•_C™˚lLﬂdC⁄åﬁEvítCB
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

253 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

254 
e•_C™˚lAŒLﬂdC⁄åﬁEvítsCB
–
z˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 *
pCmd
,

255 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

256 
e•_Rï‹tEvítSètusCB
–
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

257 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

258 
e•_GëScheduÀdEvítCB
–
z˛CCGëScheduÀdEvít_t
 *
pCmd
,

259 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

260 
e•_SñAvaûEmîgícyCªdôCmdCB
–
z˛CCSñAvaûEmîgícyCªdô_t
 *
pCmd
,

261 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

262 
e•_Ch™geSuµlyCmdCB
–
z˛CCCh™geSuµly_t
 *
pCmd
,

263 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

264 
e•_SuµlySètusR•CB
–
z˛CCSuµlySètusRe•⁄£_t
 *
pCmd
,

265 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

266 #i‡
deföed
 ( 
SE_UK_EXT
 )

267 
e•_GëS«pshŸR•CB
–
z˛CCReqGëS«pshŸR•_t
 *
pCmd
,

268 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

269 
e•_PublishT¨iffInf‹m©i⁄CB
–
z˛CCPublishT¨iffInf‹m©i⁄_t
 *
pCmd
,

270 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

271 
e•_PublishPri˚M©rixCB
–
z˛CCPublishPri˚M©rix_t
 *
pCmd
,

272 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

273 
e•_PublishBlockThªshﬁdsCB
–
z˛CCPublishBlockThªshﬁds_t
 *
pCmd
,

274 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

275 
e•_PublishC⁄vîsi⁄Fa˘‹CB
–
z˛CCPublishC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

276 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

277 
e•_PublishCÆ‹ificVÆueCB
–
z˛CCPublishCÆ‹ificVÆue_t
 *
pCmd
,

278 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

279 
e•_PublishCO2VÆueCB
–
z˛CCPublishCO2VÆue_t
 *
pCmd
,

280 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

281 
e•_PublishCPPEvítCB
–
z˛CCPublishCPPEvít_t
 *
pCmd
,

282 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

283 
e•_PublishBûlögPîiodCB
–
z˛CCPublishBûlögPîiod_t
 *
pCmd
,

284 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

285 
e•_PublishC⁄sﬁid©edBûlCB
–
z˛CCPublishC⁄sﬁid©edBûl_t
 *
pCmd
,

286 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

287 
e•_PublishCªdôPaymítInfoCB
–
z˛CCPublishCªdôPaymítInfo_t
 *
pCmd
,

288 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

289 
e•_GëT¨iffInf‹m©i⁄CB
–
z˛CCGëT¨iffInf‹m©i⁄_t
 *
pCmd
,

290 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

291 
e•_GëPri˚M©rixCB
–
uöt32
 
issuîT¨iffId
,

292 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

293 
e•_GëBlockThªshﬁdsCB
–
uöt32
 
issuîT¨iffId
,

294 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

295 
e•_GëC⁄vîsi⁄Fa˘‹CB
–
z˛CCGëC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

296 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

297 
e•_GëCÆ‹ificVÆueCB
–
z˛CCGëCÆ‹ificVÆue_t
 *
pCmd
,

298 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

299 
e•_GëCO2VÆueCB
–
z˛CCGëCO2VÆue_t
 *
pCmd
,

300 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

301 
e•_GëBûlögPîiodCB
–
z˛CCGëBûlögPîiod_t
 *
pCmd
,

302 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

303 
e•_GëC⁄sﬁid©edBûlCB
–
z˛CCGëC⁄sﬁid©edBûl_t
 *
pCmd
,

304 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

305 
e•_CPPEvítRe•⁄£CB
–
z˛CCCPPEvítRe•⁄£_t
 *
pCmd
,

306 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

307 
e•_Ch™geDebtCB
–
z˛CCCh™geDebt_t
 *
pCmd
,

308 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

309 
e•_EmîgícyCªdôSëupCB
–
z˛CCEmîgícyCªdôSëup_t
 *
pCmd
,

310 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

311 
e•_C⁄sumîT›upCB
–
z˛CCC⁄sumîT›up_t
 *
pCmd
,

312 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

313 
e•_CªdôAdju°mítCB
–
z˛CCCªdôAdju°mít_t
 *
pCmd
,

314 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

315 
e•_Ch™gePaymítModeCB
–
z˛CCCh™gePaymítMode_t
 *
pCmd
,

316 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

317 
e•_GëPª∑yS«pshŸCB
–
z˛CCGëPª∑yS«pshŸ_t
 *
pCmd
,

318 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

319 
e•_GëT›upLogCB
–
uöt8
 
numEvíts
,

320 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

321 
e•_SëLowCªdôW¨nögLevñCB
–
uöt8
 
numEvíts
,

322 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

323 
e•_GëDebtRïaymítLogCB
–
z˛CCGëDebtRïaymítLog_t
 *
pCmd
,

324 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

325 
e•_GëPª∑yS«pshŸRe•⁄£CB
–
z˛CCGëPª∑yS«pshŸRe•⁄£_t
 *
pCmd
,

326 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

327 
e•_Ch™gePaymítModeRe•⁄£CB
–
z˛CCCh™gePaymítModeRe•⁄£_t
 *
pCmd
,

328 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

329 
e•_C⁄sumîT›upRe•⁄£CB
–
z˛CCC⁄sumîT›upRe•⁄£_t
 *
pCmd
,

330 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

331 
e•_GëComm™dsCB
–
uöt8
 
¥ïayNŸifiˇti⁄Fœgs
,

332 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

333 
e•_PublishT›upLogCB
–
z˛CCPublishT›upLog_t
 *
pCmd
,

334 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

335 
e•_PublishDebtLogCB
–
z˛CCPublishDebtLog_t
 *
pCmd
,

336 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

343 
e•_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
msg
 );

344 #i‡
deföed
 ( 
ZCL_READ
 )

345 
uöt8
 
e•_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

347 #i‡
deföed
 ( 
ZCL_WRITE
 )

348 
uöt8
 
e•_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

350 #i‡
deföed
 ( 
ZCL_REPORT
 )

351 
uöt8
 
e•_Pro˚ssInC⁄figRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

352 
uöt8
 
e•_Pro˚ssInC⁄figRï‹tR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

353 
uöt8
 
e•_Pro˚ssInRódRï‹tCfgCmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

354 
uöt8
 
e•_Pro˚ssInRódRï‹tCfgR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

355 
uöt8
 
e•_Pro˚ssInRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

357 
uöt8
 
e•_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

358 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

359 
uöt8
 
e•_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

363 
e•_Pro˚ssZDOMsg
–
zdoIncomögMsg_t
 *
öMsg
 );

365 #i‡
deföed
 ( 
SE_UK_EXT
 ) && deföed ( 
SE_MIRROR
 )

366 
e•_Múr‹Inô
( );

367 
uöt8
 
e•_GëMúr‹Endpoöt
–
afAddrTy≥_t
 *
§cAddr
 );

368 
uöt8
 
e•_AŒocMúr‹
–
afAddrTy≥_t
 *
§cAddr
 );

369 
e•_FªeMúr‹
–
uöt8
 
ídPoöt
 );

370 
uöt8
 
e•_IsMúr‹Endpoöt
–uöt8 
ídpoöt
 );

371 
e•_Múr‹Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 );

372 
e•Múr‹Info_t
 *
e•_GëMúr‹Info
–
uöt8
 
ídpoöt
 );

373 
uöt8
 
e•_Múr‹Upd©eAâribuã
–uöt8 
ídpoöt
, 
uöt16
 
˛u°î
,

374 
z˛Rï‹t_t
 *
pRï‹t
 );

375 
e•_Múr‹InôAâribuãSë
–
uöt8
 
ídpoöt
 );

377 
e•Múr‹C⁄åﬁ_t
 
	ge•_Múr‹C⁄åﬁ
;

383 
z˛GíîÆ_AµCÆlbacks_t
 
	ge•_GíCmdCÆlbacks
 =

385 
e•_BasicRe£tCB
,

386 
e•_IdítifyCB
,

387 
e•_IdítifyQuîyR•CB
,

388 
NULL
,

389 
NULL
,

390 
NULL
,

391 
NULL
,

392 
NULL
,

393 
NULL
,

394 
NULL
,

395 
NULL
,

396 
NULL
,

397 
e•_AœrmCB
,

398 #ifde‡
SE_UK_EXT


399 
e•_GëEvítLogCB
,

400 
e•_PublishEvítLogCB
,

402 
NULL
,

403 
NULL


409 
z˛SE_AµCÆlbacks_t
 
	ge•_SECmdCÆlbacks
 =

411 
e•_PublishPri˚CB
,

412 
e•_PublishBlockPîiodCB
,

413 #i‡
deföed
 ( 
SE_UK_EXT
 )

414 
e•_PublishT¨iffInf‹m©i⁄CB
,

415 
e•_PublishPri˚M©rixCB
,

416 
e•_PublishBlockThªshﬁdsCB
,

417 
e•_PublishC⁄vîsi⁄Fa˘‹CB
,

418 
e•_PublishCÆ‹ificVÆueCB
,

419 
e•_PublishCO2VÆueCB
,

420 
e•_PublishCPPEvítCB
,

421 
e•_PublishBûlögPîiodCB
,

422 
e•_PublishC⁄sﬁid©edBûlCB
,

423 
e•_PublishCªdôPaymítInfoCB
,

425 
e•_GëCuºítPri˚CB
,

426 
e•_GëScheduÀdPri˚CB
,

427 
e•_Pri˚AcknowÀdgemítCB
,

428 
e•_GëBlockPîiodCB
,

429 #i‡
deföed
 ( 
SE_UK_EXT
 )

430 
e•_GëT¨iffInf‹m©i⁄CB
,

431 
e•_GëPri˚M©rixCB
,

432 
e•_GëBlockThªshﬁdsCB
,

433 
e•_GëC⁄vîsi⁄Fa˘‹CB
,

434 
e•_GëCÆ‹ificVÆueCB
,

435 
e•_GëCO2VÆueCB
,

436 
e•_GëBûlögPîiodCB
,

437 
e•_GëC⁄sﬁid©edBûlCB
,

438 
e•_CPPEvítRe•⁄£CB
,

440 
e•_LﬂdC⁄åﬁEvítCB
,

441 
e•_C™˚lLﬂdC⁄åﬁEvítCB
,

442 
e•_C™˚lAŒLﬂdC⁄åﬁEvítsCB
,

443 
e•_Rï‹tEvítSètusCB
,

444 
e•_GëScheduÀdEvítCB
,

445 
e•_GëProfûeR•CB
,

446 
e•_ReqMúr‹CmdCB
,

447 
e•_Múr‹RemCmdCB
,

448 
e•_ReqFa°PﬁlModeR•CB
,

449 #i‡
deföed
 ( 
SE_UK_EXT
 )

450 
e•_GëS«pshŸR•CB
,

452 
e•_GëProfûeCmdCB
,

453 
e•_ReqMúr‹R•CB
,

454 
e•_Múr‹RemR•CB
,

455 
e•_ReqFa°PﬁlModeCmdCB
,

456 #i‡
deföed
 ( 
SE_UK_EXT
 )

457 
NULL
,

458 
NULL
,

459 
NULL
,

461 
e•_Di•œyMesßgeCB
,

462 
e•_C™˚lMesßgeCB
,

463 
e•_GëLa°MesßgeCB
,

464 
e•_MesßgeC⁄fúm©i⁄CB
,

465 
NULL
,

466 
NULL
,

467 
NULL
,

468 
NULL
,

469 
NULL
,

470 #i‡
deföed
 ( 
SE_UK_EXT
 )

471 
NULL
,

472 
NULL
,

474 
NULL
,

475 
NULL
,

476 #i‡
deföed
 ( 
SE_UK_EXT
 )

477 
NULL
,

479 
e•_SuµlySètusR•CB
,

480 #i‡
deföed
 ( 
SE_UK_EXT
 )

481 
e•_GëPª∑yS«pshŸRe•⁄£CB
,

482 
e•_Ch™gePaymítModeRe•⁄£CB
,

483 
e•_C⁄sumîT›upRe•⁄£CB
,

484 
e•_GëComm™dsCB
,

485 
e•_PublishT›upLogCB
,

486 
e•_PublishDebtLogCB
,

488 
e•_SñAvaûEmîgícyCªdôCmdCB
,

489 
e•_Ch™geSuµlyCmdCB
,

490 #i‡
deföed
 ( 
SE_UK_EXT
 )

491 
e•_Ch™geDebtCB
,

492 
e•_EmîgícyCªdôSëupCB
,

493 
e•_C⁄sumîT›upCB
,

494 
e•_CªdôAdju°mítCB
,

495 
e•_Ch™gePaymítModeCB
,

496 
e•_GëPª∑yS«pshŸCB
,

497 
e•_GëT›upLogCB
,

498 
e•_SëLowCªdôW¨nögLevñCB
,

499 
e•_GëDebtRïaymítLogCB
,

500 
NULL
,

501 
NULL
,

502 
NULL
,

503 
NULL
,

504 
NULL
,

505 
NULL
,

506 
NULL
,

507 
NULL
,

508 
NULL
,

509 
NULL
,

510 
NULL
,

511 
NULL
,

512 
NULL
,

513 
NULL
,

514 
NULL
,

515 
NULL
,

516 
NULL
,

517 
NULL
,

518 
NULL
,

519 
NULL
,

532 
	$e•_Inô
–
uöt8
 
èsk_id
 )

534 
e•TaskID
 = 
èsk_id
;

537 
	`z˛SE_Inô
–&
e•Sim∂eDesc
 );

540 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
ESP_ENDPOINT
, &
e•_GíCmdCÆlbacks
 );

543 
	`z˛SE_Regi°îCmdCÆlbacks
–
ESP_ENDPOINT
, &
e•_SECmdCÆlbacks
 );

546 
	`z˛_ªgi°îAârLi°
–
ESP_ENDPOINT
, 
ESP_MAX_ATTRIBUTES
, 
e•Aârs
 );

549 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
ESP_ENDPOINT
, 
ESP_MAX_OPTIONS
, 
e•O±i⁄s
 );

552 
	`z˛_ªgi°îVÆid©eAârD©a
–
e•_VÆid©eAârD©aCB
 );

555 
	`z˛_ªgi°îF‹Msg
–
e•TaskID
 );

558 
	`ZDO_Regi°îF‹ZDOMsg
–
e•TaskID
, 
Devi˚_™n˚
 );

559 
	`ZDO_Regi°îF‹ZDOMsg
–
e•TaskID
, 
Sim∂e_Desc_r•
 );

562 
	`Regi°îF‹Keys
–
e•TaskID
 );

564 #i‡
	`deföed
 ( 
INTER_PAN
 )

566 
	`StubAPS_Regi°îAµ
–&
e•Ep
 );

570 
	`oßl_°¨t_timîEx
–
e•TaskID
, 
ESP_UPDATE_TIME_EVT
, 
ESP_UPDATE_TIME_PERIOD
 );

573 
p˘Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

574 
p˘Addr
.
ídPoöt
 = 
ESP_ENDPOINT
;

577 
lﬂdC⁄åﬁAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

578 
lﬂdC⁄åﬁAddr
.
ídPoöt
 = 
ESP_ENDPOINT
;

581 
lﬂdC⁄åﬁCmd
.
issuîEvít
 = 0x12345678;

582 
lﬂdC⁄åﬁCmd
.
devi˚GroupCœss
 = 0x000000;

583 
lﬂdC⁄åﬁCmd
.
°¨tTime
 = 0x00000000;

584 
lﬂdC⁄åﬁCmd
.
duøti⁄InMöuãs
 = 0x0001;

585 
lﬂdC⁄åﬁCmd
.
¸ôiˇlôyLevñ
 = 0x01;

586 
lﬂdC⁄åﬁCmd
.
coﬁögTem≥øtuªSëPoöt
 = 0x076C;

587 
lﬂdC⁄åﬁCmd
.
evítC⁄åﬁ
 = 0x00;

590 
e•Fa°PﬁlModeDuøti⁄
 = 0;

593 
uöt8
 
˛ónupChûdTabÀ
 = 
TRUE
;

594 
	`zgSëIãm
–
ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP
, (
˛ónupChûdTabÀ
), &cleanupChildTable );

596 #i‡
	`deföed
 ( 
SE_UK_EXT
 ) && deföed ( 
SE_MIRROR
 )

597 
	`e•_Múr‹Inô
();

600 
	}
}

612 
uöt16
 
	$e•_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

614 
afIncomögMSGPackë_t
 *
MSGpkt
;

616 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

618  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
e•TaskID
 )) )

620  
MSGpkt
->
hdr
.
evít
 )

622 
MT_SYS_APP_MSG
:

624 
	`e•_Pro˚ssAµMsg
–((
mtSysAµMsg_t
 *)
MSGpkt
)->
≠pD©a
 );

627 
ZCL_INCOMING_MSG
:

629 
	`e•_Pro˚ssZCLMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

632 
KEY_CHANGE
:

633 
	`e•_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

636 
ZDO_CB_MSG
:

638 
	`e•_Pro˚ssZDOMsg
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

646 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

651  (
evíts
 ^ 
SYS_EVENT_MSG
);

655 i‡–
evíts
 & 
ESP_IDENTIFY_TIMEOUT_EVT
 )

657 i‡–
e•IdítifyTime
 > 0 )

659 
e•IdítifyTime
--;

661 
	`e•_Pro˚ssIdítifyTimeCh™ge
();

663  ( 
evíts
 ^ 
ESP_IDENTIFY_TIMEOUT_EVT
 );

667 i‡–
evíts
 & 
ESP_UPDATE_TIME_EVT
 )

669 
e•Time
 = 
	`oßl_gëClock
();

670 
	`oßl_°¨t_timîEx
–
e•TaskID
, 
ESP_UPDATE_TIME_EVT
, 
ESP_UPDATE_TIME_PERIOD
 );

672  ( 
evíts
 ^ 
ESP_UPDATE_TIME_EVT
 );

677 i‡–
evíts
 & 
SIMPLE_DESC_QUERY_EVT
 )

679 
	`ZDP_Sim∂eDescReq
–&
sim∂eDescReqAddr
, sim∂eDescReqAddr.
addr
.
sh‹tAddr
,

680 
ESP_ENDPOINT
, 0);

682  ( 
evíts
 ^ 
SIMPLE_DESC_QUERY_EVT
 );

686 i‡–
evíts
 & 
ESP_FAST_POLL_MODE_EVT
 )

688 i‡(
e•Fa°PﬁlModeDuøti⁄
)

690 
e•Fa°PﬁlModeDuøti⁄
--;

692 
	`oßl_°¨t_timîEx
–
e•TaskID
, 
ESP_FAST_POLL_MODE_EVT
, 
ESP_FAST_POLL_TIMER_PERIOD
 );

695  ( 
evíts
 ^ 
ESP_FAST_POLL_MODE_EVT
 );

700 
	}
}

711 
	$e•_Pro˚ssAµMsg
–
uöt8
 *
msg
 )

714 
	}
}

725 
	$e•_Pro˚ssIdítifyTimeCh™ge
( )

727 i‡–
e•IdítifyTime
 > 0 )

729 
	`oßl_°¨t_timîEx
–
e•TaskID
, 
ESP_IDENTIFY_TIMEOUT_EVT
, 1000 );

730 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

734 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

735 
	`oßl_°›_timîEx
–
e•TaskID
, 
ESP_IDENTIFY_TIMEOUT_EVT
 );

737 
	}
}

754 
	$e•_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

757 i‡–
shi·
 )

759 i‡–
keys
 & 
HAL_KEY_SW_1
 )

762 i‡–
keys
 & 
HAL_KEY_SW_2
 )

765 i‡–
keys
 & 
HAL_KEY_SW_3
 )

768 i‡–
keys
 & 
HAL_KEY_SW_4
 )

774 i‡–
keys
 & 
HAL_KEY_SW_1
 )

777 
lﬂdC⁄åﬁCmd
.
devi˚GroupCœss
 = 
HVAC_DEVICE_CLASS
;

778 
	`z˛SE_LﬂdC⁄åﬁ_Síd_LﬂdC⁄åﬁEvít
–
ESP_ENDPOINT
, &
p˘Addr
, &
lﬂdC⁄åﬁCmd
, 
TRUE
, 0 );

781 i‡–
keys
 & 
HAL_KEY_SW_2
 )

784 
lﬂdC⁄åﬁCmd
.
devi˚GroupCœss
 = 
ONOFF_LOAD_DEVICE_CLASS
;

785 
	`z˛SE_LﬂdC⁄åﬁ_Síd_LﬂdC⁄åﬁEvít
–
ESP_ENDPOINT
, &
lﬂdC⁄åﬁAddr
, &
lﬂdC⁄åﬁCmd
, 
TRUE
, 0 );

788 i‡–
keys
 & 
HAL_KEY_SW_3
 )

790 
z˛CCDi•œyMesßge_t
 
di•œyCmd
;

793 #i‡ !
deföed
 
IPD_MSG_SZ


794 
	#IPD_MSG_SZ
 0

	)

796 #i‡ (
IPD_MSG_SZ
 == 0)

797 
uöt8
 
msgBuf
[]="TI IPD Test Msg!";

798 c⁄° 
uöt8
 
msgLí
 = (
msgBuf
);

800 
uöt8
 *
msgBuf
 = 
	`oßl_mem_Æloc
(
IPD_MSG_SZ
);

801 c⁄° 
uöt8
 
msgLí
 = 
IPD_MSG_SZ
;

802 
uöt8
 
idx
;

804 i‡(!
msgBuf
) ;

806 
idx
 = 0; idx < 
msgLí
; idx ++)

808 
msgBuf
[
idx
] = 'a' + idx % 26;

812 
di•œyCmd
.
msgSåög
.
°rLí
 = 
msgLí
;

813 
di•œyCmd
.
msgSåög
.
pSå
 = 
msgBuf
;

815 
	`z˛SE_Mesßge_Síd_Di•œyMesßge
–
ESP_ENDPOINT
, &
ùdAddr
, &
di•œyCmd
, 
TRUE
, 0 );

817 #i‡ (
IPD_MSG_SZ
 != 0)

818 
	`oßl_mem_‰ì
(
msgBuf
);

822 i‡–
keys
 & 
HAL_KEY_SW_4
 )

827 
	}
}

841 
uöt8
 
	$e•_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 )

843 
uöt8
 
vÆid
 = 
TRUE
;

845  
pAârInfo
->
d©aTy≥
 )

847 
ZCL_DATATYPE_BOOLEAN
:

848 i‡––*(
pAârInfo
->
©åD©a
) != 0 ) && ( *(pAttrInfo->attrData) != 1 ) )

850 
vÆid
 = 
FALSE
;

858  ( 
vÆid
 );

859 
	}
}

871 
	$e•_BasicRe£tCB
( )

874 
	}
}

886 
	$e•_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

888 
e•IdítifyTime
 = 
pCmd
->
idítifyTime
;

889 
	`e•_Pro˚ssIdítifyTimeCh™ge
();

890 
	}
}

902 
	$e•_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

905 
	}
}

918 
	$e•_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 )

921 
	}
}

923 #ifde‡
SE_UK_EXT


938 
	$e•_GëEvítLogCB
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
§cAddr
,

939 
z˛GëEvítLog_t
 *
pEvítLog
, 
uöt8
 
£qNum
 )

948 
	}
}

962 
	$e•_PublishEvítLogCB
–
afAddrTy≥_t
 *
§cAddr
, 
z˛PublishEvítLog_t
 *
pEvítLog
 )

965 
	}
}

981 
	$e•_GëProfûeCmdCB
–
z˛CCGëProfûeCmd_t
 *
pCmd
,

982 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

984 #i‡
	`deföed
 ( 
ZCL_SIMPLE_METERING
 )

992 
uöt32
 
ídTime
;

993 
uöt8
 
°©us
 = 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_Suc˚ss
;

994 
uöt8
 
¥ofûeI¡îvÆPîiod
 = 
PROFILE_INTERVAL_PERIOD_60MIN
;

995 
uöt8
 
numbîOfPîiodDñivîed
 = 5;

996 
uöt24
 
öãrvÆs
[] = {0xa00001, 0xa00002, 0xa00003, 0xa00004, 0xa00005};

1010 
ídTime
 = 
pCmd
->endTime;

1014 
	`z˛SE_Sim∂eMëîög_Síd_GëProfûeR•
–
ESP_ENDPOINT
, 
§cAddr
, 
ídTime
,

1015 
°©us
,

1016 
¥ofûeI¡îvÆPîiod
,

1017 
numbîOfPîiodDñivîed
, 
öãrvÆs
,

1018 
FALSE
, 
£qNum
 );

1020 
	}
}

1035 
	$e•_GëProfûeR•CB
–
z˛CCGëProfûeR•_t
 *
pCmd
,

1036 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1039 
	}
}

1053 
	$e•_ReqMúr‹CmdCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1055 #i‡
	`deföed
 ( 
ZCL_SIMPLE_METERING
 )

1056 #i‡
	`deföed
 ( 
SE_UK_EXT
 ) && deföed ( 
SE_MIRROR
 )

1057 
uöt8
 
ídpoöt
;

1060 
ídpoöt
 = 
	`e•_GëMúr‹Endpoöt
–
§cAddr
 );

1062 i‡–
ídpoöt
 =
ESP_MIRROR_INVALID_ENDPOINT
 )

1065 
ídpoöt
 = 
	`e•_AŒocMúr‹
(
§cAddr
);

1067 i‡(
ídpoöt
 !
ESP_MIRROR_INVALID_ENDPOINT
)

1070 
e•Múr‹Info_t
 *
pInfo
 = 
	`e•_GëMúr‹Info
(
ídpoöt
);

1072 i‡–
pInfo
 !
NULL
 )

1075 
Sim∂eDes¸ùti⁄F‹m©_t
 *
pMúr‹Sim∂eDesc
 = 
	`oßl_mem_Æloc
( ( SimpleDescriptionFormat_t ) );

1077 i‡–
pMúr‹Sim∂eDesc
 !
NULL
 )

1079 
z˛AârRec_t
 *
pAâr
 = 
pInfo
->pAttr;

1081 
pMúr‹Sim∂eDesc
->
EndPoöt
 = 
ídpoöt
;

1082 
pMúr‹Sim∂eDesc
->
AµProfId
 = 
ZCL_SE_PROFILE_ID
;

1083 
pMúr‹Sim∂eDesc
->
AµDevi˚Id
 = 
ZCL_SE_DEVICEID_METER
;

1084 
pMúr‹Sim∂eDesc
->
AµDevVî
 = 
MIRROR_DEVICE_VERSION
;

1085 
pMúr‹Sim∂eDesc
->
Re£rved
 = 
MIRROR_FLAGS
;

1086 
pMúr‹Sim∂eDesc
->
AµNumInClu°îs
 = 
MIRROR_MAX_INCLUSTERS
;

1087 
pMúr‹Sim∂eDesc
->
pAµInClu°îLi°
 = (
cId_t
 *Ë
múr‹InClu°îLi°
;

1088 
pMúr‹Sim∂eDesc
->
AµNumOutClu°îs
 = 
MIRROR_MAX_OUTCLUSTERS
;

1089 
pMúr‹Sim∂eDesc
->
pAµOutClu°îLi°
 = (
cId_t
 *Ë
múr‹OutClu°îLi°
;

1091 
	`z˛SE_Inô
–
pMúr‹Sim∂eDesc
 );

1094 
	`z˛_ªgi°îAârLi°
–
ídpoöt
, 
ESP_MIRROR_MAX_ATTRIBUTES
, (
CONST
 
z˛AârRec_t
 *Ë
pAâr
 );

1098 
	`e•_FªeMúr‹
–
ídpoöt
 );

1099 
ídpoöt
 = 
ESP_MIRROR_INVALID_ENDPOINT
;

1105 i‡–
ídpoöt
 !
ESP_MIRROR_INVALID_ENDPOINT
 )

1108 
	`z˛SE_Sim∂eMëîög_Síd_ReqMúr‹R•
–
ESP_ENDPOINT
, 
§cAddr
, 
ídpoöt
, 
TRUE
, 
£qNum
 );

1113 
	`z˛SE_Sim∂eMëîög_Síd_ReqMúr‹R•
(
ESP_ENDPOINT
, 
§cAddr
, 0xFFFF, 
TRUE
, 
£qNum
);

1117 
	}
}

1131 
	$e•_ReqMúr‹R•CB
–
z˛CCReqMúr‹R•_t
 *
pCmd
,

1132 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1135 
	}
}

1149 
	$e•_Múr‹RemCmdCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1151 #i‡
	`deföed
 ( 
ZCL_SIMPLE_METERING
 )

1152 #i‡
	`deföed
 ( 
SE_UK_EXT
 ) && deföed ( 
SE_MIRROR
 )

1154 
uöt8
 
ídpoöt
 = 
	`e•_GëMúr‹Endpoöt
–
§cAddr
 );

1156 i‡–
ídpoöt
 !
ESP_MIRROR_INVALID_ENDPOINT
 )

1159 
e•PhysiˇlEnvú⁄mít
 |
PHY_MIRROR_CAPACITY_ENV
;

1161 
ídPoötDesc_t
 *
ïDesc
 = 
	`afFödEndPoötDesc
–
ídpoöt
 );

1164 i‡–
ïDesc
->
sim∂eDesc
 !
NULL
 )

1166 
	`oßl_mem_‰ì
–
ïDesc
->
sim∂eDesc
 );

1170 
	`afDñëe
–
ídpoöt
 );

1173 
	`e•_FªeMúr‹
–
ídpoöt
 );

1176 
	`z˛SE_Sim∂eMëîög_Síd_RemMúr‹R•
–
ESP_ENDPOINT
, 
§cAddr
, 
ídpoöt
, 
TRUE
, 
£qNum
 );

1182 
	`z˛SE_Sim∂eMëîög_Síd_RemMúr‹R•
–
ESP_ENDPOINT
, 
§cAddr
, 0xFFFF, 
TRUE
, 
£qNum
 );

1186 
	}
}

1201 
	$e•_Múr‹RemR•CB
–
z˛CCMúr‹RemR•_t
 *
pCmd
,

1202 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1205 
	}
}

1220 
	$e•_ReqFa°PﬁlModeCmdCB
–
z˛CCReqFa°PﬁlModeCmd_t
 *
pCmd
, 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1222 #i‡
	`deföed
 ( 
ZCL_SIMPLE_METERING
 )

1223 i‡–
pCmd
 !
NULL
 )

1225 
z˛CCReqFa°PﬁlModeR•_t
 
Á°PﬁlR•
;

1226 
UTCTime
 
utcSecs
;

1228 i‡(
pCmd
->
Á°PﬁlUpd©ePîiod
 < 
e•Fa°PﬁlUpd©ePîiod
)

1232 
Á°PﬁlR•
.
≠∂õdUpd©ePîiod
 = 
e•Fa°PﬁlUpd©ePîiod
;

1236 
Á°PﬁlR•
.
≠∂õdUpd©ePîiod
 = 
pCmd
->
Á°PﬁlUpd©ePîiod
;

1239 i‡((
e•Fa°PﬁlModeDuøti⁄
 =0Ë&& (
pCmd
->
duøti⁄
 > 0))

1241 i‡(
pCmd
->
duøti⁄
 > 
MAX_DURATION_IN_MINUTES_FAST_POLL_MODE
)

1245 
e•Fa°PﬁlModeDuøti⁄
 = 
MAX_DURATION_IN_MINUTES_FAST_POLL_MODE
;

1249 
e•Fa°PﬁlModeDuøti⁄
 = 
pCmd
->
duøti⁄
;

1253 
e•Fa°PﬁlModeDuøti⁄
 *= 60;

1256 
	`oßl_°¨t_timîEx
–
e•TaskID
, 
ESP_FAST_POLL_MODE_EVT
, 
ESP_FAST_POLL_TIMER_PERIOD
 );

1260 
utcSecs
 = 
	`oßl_gëClock
();

1261 
Á°PﬁlR•
.
Á°PﬁlModeEndTime
 = 
utcSecs
 + 
e•Fa°PﬁlModeDuøti⁄
;

1263 
	`z˛SE_Sim∂eMëîög_Síd_ReqFa°PﬁlModeR•
–
ESP_ENDPOINT
, 
§cAddr
,

1264 &
Á°PﬁlR•
,

1265 
TRUE
, 
£qNum
 );

1267 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

1268 
	`HÆLcdWrôeSåög
("Fa° Pﬁlög", 
HAL_LCD_LINE_1
);

1269 
	`HÆLcdWrôeSåögVÆue
("Cu∏0x", 
utcSecs
, 16, 
HAL_LCD_LINE_2
 );

1270 
	`HÆLcdWrôeSåögVÆue
("End 0x", 
Á°PﬁlR•
.
Á°PﬁlModeEndTime
, 16, 
HAL_LCD_LINE_3
 );

1274 
	}
}

1289 
	$e•_ReqFa°PﬁlModeR•CB
–
z˛CCReqFa°PﬁlModeR•_t
 *
pR•
,

1290 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1293 
	}
}

1308 
	$e•_GëCuºítPri˚CB
–
z˛CCGëCuºítPri˚_t
 *
pCmd
,

1309 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1311 #i‡
	`deföed
 ( 
ZCL_PRICING
 )

1314 
z˛CCPublishPri˚_t
 
cmd
;

1315 
uöt8
 
øãLabñLí
 = 4;

1317 
	`oßl_mem£t
–&
cmd
, 0, –
z˛CCPublishPri˚_t
 ) );

1320 
cmd
.
¥ovidîId
 = 0xbabeface;

1321 
cmd
.
øãLabñ
.
pSå
 = (
uöt8
 *)
	`oßl_mem_Æloc
(
øãLabñLí
);

1322 i‡(
cmd
.
øãLabñ
.
pSå
 !
NULL
)

1324 
cmd
.
øãLabñ
.
°rLí
 = 
øãLabñLí
;

1325 
	`oßl_mem˝y
(
cmd
.
øãLabñ
.
pSå
, "BASE", 
øãLabñLí
);

1327 
cmd
.
issuîEvítId
 = 0x00000000;

1328 
cmd
.
cuºítTime
 = 
	`oßl_gëClock
();

1329 
cmd
.
unôOfMósuª
 = 0x00;

1330 
cmd
.
cuºícy
 = 0x0348;

1331 
cmd
.
¥i˚TøûögDigô
 = 0x11;

1332 
cmd
.
numbîOfPri˚Tõrs
 = 0x21;

1333 
cmd
.
°¨tTime
 = 0x00000000;

1334 
cmd
.
duøti⁄InMöuãs
 = 0x003C;

1335 
cmd
.
¥i˚
 = 0x00000018;

1336 
cmd
.
¥i˚R©io
 = 
SE_OPTIONAL_FIELD_UINT8
;

1337 
cmd
.
gíî©i⁄Pri˚
 = 
SE_OPTIONAL_FIELD_UINT32
;

1338 
cmd
.
gíî©i⁄Pri˚R©io
 = 
SE_OPTIONAL_FIELD_UINT8
;

1339 
cmd
.
Æã∫©eCo°Dñivîed
 = 
SE_OPTIONAL_FIELD_UINT32
;

1340 
cmd
.
Æã∫©eCo°Unô
 = 
SE_OPTIONAL_FIELD_UINT8
;

1341 
cmd
.
Æã∫©eCo°TøûögDigô
 = 
SE_OPTIONAL_FIELD_UINT8
;

1342 
cmd
.
numbîOfBlockThªshﬁds
 = 
SE_OPTIONAL_FIELD_UINT8
;

1343 
cmd
.
¥i˚C⁄åﬁ
 = 
SE_PROFILE_PRICEACK_REQUIRED_MASK
;

1347 
	`oßl_mem˝y
–&
ùdAddr
, 
§cAddr
,  ( 
afAddrTy≥_t
 ) );

1349 
	`z˛SE_Pricög_Síd_PublishPri˚
–
ESP_ENDPOINT
, 
§cAddr
, &
cmd
, 
FALSE
, 
£qNum
 );

1351 i‡(
cmd
.
øãLabñ
.
pSå
 !
NULL
)

1353 
	`oßl_mem_‰ì
(
cmd
.
øãLabñ
.
pSå
);

1356 
	}
}

1371 
	$e•_GëScheduÀdPri˚CB
–
z˛CCGëScheduÀdPri˚_t
 *
pCmd
,

1372 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1378 #i‡
	`deföed
 ( 
ZCL_PRICING
 )

1379 
z˛CCPublishPri˚_t
 
cmd
;

1381 
	`oßl_mem£t
–&
cmd
, 0, –
z˛CCPublishPri˚_t
 ) );

1383 
cmd
.
¥ovidîId
 = 0xbabeface;

1384 
cmd
.
numbîOfPri˚Tõrs
 = 0xfe;

1386 
	`z˛SE_Pricög_Síd_PublishPri˚
–
ESP_ENDPOINT
, 
§cAddr
, &
cmd
, 
FALSE
, 
£qNum
 );

1389 
	}
}

1403 
	$e•_Pri˚AcknowÀdgemítCB
–
z˛CCPri˚AcknowÀdgemít_t
 *
pCmd
,

1404 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1407 
	}
}

1421 
	$e•_GëBlockPîiodCB
–
z˛CCGëBlockPîiod_t
 *
pCmd
,

1422 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1425 
	}
}

1439 
	$e•_PublishPri˚CB
–
z˛CCPublishPri˚_t
 *
pCmd
,

1440 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1443 
	}
}

1457 
	$e•_PublishBlockPîiodCB
–
z˛CCPublishBlockPîiod_t
 *
pCmd
,

1458 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1461 
	}
}

1476 
	$e•_Di•œyMesßgeCB
–
z˛CCDi•œyMesßge_t
 *
pCmd
,

1477 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1490 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

1491 
	`HÆLcdWrôeSåög
–(*)
pCmd
->
msgSåög
.
pSå
, 
HAL_LCD_LINE_1
 );

1493 
	}
}

1508 
	$e•_C™˚lMesßgeCB
–
z˛CCC™˚lMesßge_t
 *
pCmd
,

1509 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1512 
	}
}

1527 
	$e•_GëLa°MesßgeCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1532 #i‡
	`deföed
 ( 
ZCL_MESSAGE
 )

1533 
z˛CCDi•œyMesßge_t
 
cmd
;

1534 
uöt8
 
msg
[10] = { 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29 };

1537 
cmd
.
mesßgeId
 = 0xaabbccdd;

1538 
cmd
.
mesßgeCål
.
å™smissi⁄Mode
 = 0;

1539 
cmd
.
mesßgeCål
.
imp‹èn˚
 = 1;

1540 
cmd
.
mesßgeCål
.
c⁄fúm©i⁄Requúed
 = 1;

1541 
cmd
.
duøti⁄InMöuãs
 = 60;

1543 
cmd
.
msgSåög
.
°rLí
 = 10;

1544 
cmd
.
msgSåög
.
pSå
 = 
msg
;

1546 
	`z˛SE_Mesßge_Síd_Di•œyMesßge
–
ESP_ENDPOINT
, 
§cAddr
, &
cmd
,

1547 
FALSE
, 
£qNum
 );

1549 
	}
}

1564 
	$e•_MesßgeC⁄fúm©i⁄CB
–
z˛CCMesßgeC⁄fúm©i⁄_t
 *
pCmd
,

1565 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
)

1568 
	}
}

1570 #i‡
deföed
 (
ZCL_LOAD_CONTROL
)

1588 
	$e•_SídRï‹tEvítSètus
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
,

1589 
uöt32
 
evítID
, uöt32 
°¨tTime
,

1590 
uöt8
 
evítSètus
, uöt8 
¸ôiˇlôyLevñ
,

1591 
uöt8
 
evítC⁄åﬁ
 )

1593 
z˛CCRï‹tEvítSètus_t
 *
pR•
;

1595 
pR•
 = (
z˛CCRï‹tEvítSètus_t
 *)
	`oßl_mem_Æloc
( ( zclCCReportEventStatus_t ) );

1597 i‡–
pR•
 !
NULL
)

1600 
pR•
->
issuîEvítID
 = 
evítID
;

1601 
pR•
->
evítSèπTime
 = 
°¨tTime
;

1602 
pR•
->
¸ôiˇlôyLevñAµlõd
 = 
¸ôiˇlôyLevñ
;

1603 
pR•
->
evítC⁄åﬁ
 =ÉventControl;

1604 
pR•
->
evítSètus
 =ÉventStatus;

1605 
pR•
->
sig«tuªTy≥
 = 
SE_PROFILE_SIGNATURE_TYPE_ECDSA
;

1609 
	`oßl_mem˝y
–
pR•
->
sig«tuª
, 
e•Sig«tuª
, 16 );

1612 
pR•
->
coﬁögTem≥øtuªSëPoötAµlõd
 = 
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
;

1613 
pR•
->
hótögTem≥øtuªSëPoötAµlõd
 = 
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
;

1614 
pR•
->
avîageLﬂdAdju°mít
 = 
SE_OPTIONAL_FIELD_INT8
;

1615 
pR•
->
dutyCy˛eAµlõd
 = 
SE_OPTIONAL_FIELD_UINT8
;

1621 
	`z˛SE_LﬂdC⁄åﬁ_Síd_Rï‹tEvítSètus
–
ESP_ENDPOINT
, 
§cAddr
,

1622 
pR•
, 
FALSE
, 
£qNum
 );

1623 
	`oßl_mem_‰ì
–
pR•
 );

1625 
	}
}

1642 
	$e•_LﬂdC⁄åﬁEvítCB
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

1643 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
°©us
,

1644 
uöt8
 
£qNum
)

1646 #i‡
	`deföed
 ( 
ZCL_LOAD_CONTROL
 )

1650 
uöt8
 
evítSètus
;

1652 i‡–
°©us
 =
ZCL_STATUS_INVALID_FIELD
 )

1656 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_REJECTED
;

1660 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_RECEIVED
;

1664 
	`e•_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvít
,

1665 
pCmd
->
°¨tTime
, 
evítSètus
,

1666 
pCmd
->
¸ôiˇlôyLevñ
,ÖCmd->
evítC⁄åﬁ
);

1668 i‡–
°©us
 !
ZCL_STATUS_INVALID_FIELD
 )

1673 
	}
}

1688 
	$e•_C™˚lLﬂdC⁄åﬁEvítCB
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

1689 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1691 #i‡
	`deföed
 ( 
ZCL_LOAD_CONTROL
 )

1713 
	`e•_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvítID
,

1714 
SE_OPTIONAL_FIELD_UINT32
,

1715 
EVENT_STATUS_LOAD_CONTROL_EVENT_RECEIVED
,

1716 
SE_OPTIONAL_FIELD_UINT8
,

1717 
SE_OPTIONAL_FIELD_UINT8
 );

1721 
	}
}

1736 
	$e•_C™˚lAŒLﬂdC⁄åﬁEvítsCB
–
z˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 *
pCmd
,

1737 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1743 
	}
}

1758 
	$e•_Rï‹tEvítSètusCB
–
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

1759 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
)

1762 
	}
}

1776 
	$e•_GëScheduÀdEvítCB
–
z˛CCGëScheduÀdEvít_t
 *
pCmd
,

1777 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1780 
	}
}

1794 
	$e•_SñAvaûEmîgícyCªdôCmdCB
–
z˛CCSñAvaûEmîgícyCªdô_t
 *
pCmd
,

1795 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1797 #i‡
	`deföed
 ( 
ZCL_PREPAYMENT
 )

1798 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

1799 
	`HÆLcdWrôeSåög
("Emîgícy Cªdô", 
HAL_LCD_LINE_1
);

1801 i‡((
pCmd
->
sôeId
.
°rLí
 > 0) &&

1802 (
pCmd
->
sôeId
.
°rLí
 <
HAL_LCD_MAX_CHARS
) &&

1803 (
pCmd
->
sôeId
.
pSå
 !
NULL
))

1805 
	`HÆLcdWrôeSåög
((*)
pCmd
->
sôeId
.
pSå
, 
HAL_LCD_LINE_2
);

1808 i‡((
pCmd
->
mëîSîülNumbî
.
°rLí
 > 0) &&

1809 (
pCmd
->
mëîSîülNumbî
.
°rLí
 <
HAL_LCD_MAX_CHARS
) &&

1810 (
pCmd
->
mëîSîülNumbî
.
pSå
 !
NULL
))

1812 
	`HÆLcdWrôeSåög
((*)
pCmd
->
mëîSîülNumbî
.
pSå
, 
HAL_LCD_LINE_3
);

1816 
	}
}

1830 
	$e•_Ch™geSuµlyCmdCB
–
z˛CCCh™geSuµly_t
 *
pCmd
,

1831 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1833 #i‡
	`deföed
 ( 
ZCL_PREPAYMENT
 )

1834 #i‡!
	`deföed
 ( 
SE_UK_EXT
 )

1835 
z˛CCSuµlySètusRe•⁄£_t
 
SuµlySètus_cmd
;

1837 
	`oßl_mem£t
–&
SuµlySètus_cmd
, 0, –
z˛CCSuµlySètusRe•⁄£_t
 ) );

1839 
SuµlySètus_cmd
.
¥ovidîId
 = 
pCmd
->providerId;

1840 
SuµlySètus_cmd
.
im∂emíèti⁄D©eTime
 = 
	`oßl_gëClock
();

1841 
SuµlySètus_cmd
.
suµlySètus
 = 
pCmd
->
¥›o£dSuµlySètus
;

1843 
	`z˛SE_Pª∑ymít_Síd_SuµlySètusRe•⁄£
–
ESP_ENDPOINT
, 
§cAddr
, &
SuµlySètus_cmd
,

1844 
FALSE
, 
£qNum
 );

1847 
	}
}

1861 
	$e•_SuµlySètusR•CB
–
z˛CCSuµlySètusRe•⁄£_t
 *
pCmd
,

1862 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1865 
	}
}

1867 #i‡
deföed
 ( 
SE_UK_EXT
 )

1881 
	$e•_GëS«pshŸR•CB
–
z˛CCReqGëS«pshŸR•_t
 *
pCmd
,

1882 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1885 
	}
}

1899 
	$e•_PublishT¨iffInf‹m©i⁄CB
–
z˛CCPublishT¨iffInf‹m©i⁄_t
 *
pCmd
,

1900 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1903 
	}
}

1917 
	$e•_PublishPri˚M©rixCB
–
z˛CCPublishPri˚M©rix_t
 *
pCmd
,

1918 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1921 
	}
}

1935 
	$e•_PublishBlockThªshﬁdsCB
–
z˛CCPublishBlockThªshﬁds_t
 *
pCmd
,

1936 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1939 
	}
}

1953 
	$e•_PublishC⁄vîsi⁄Fa˘‹CB
–
z˛CCPublishC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

1954 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1957 
	}
}

1971 
	$e•_PublishCÆ‹ificVÆueCB
–
z˛CCPublishCÆ‹ificVÆue_t
 *
pCmd
,

1972 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1975 
	}
}

1989 
	$e•_PublishCO2VÆueCB
–
z˛CCPublishCO2VÆue_t
 *
pCmd
,

1990 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1993 
	}
}

2007 
	$e•_PublishCPPEvítCB
–
z˛CCPublishCPPEvít_t
 *
pCmd
,

2008 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2011 
	}
}

2025 
	$e•_PublishBûlögPîiodCB
–
z˛CCPublishBûlögPîiod_t
 *
pCmd
,

2026 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2029 
	}
}

2043 
	$e•_PublishC⁄sﬁid©edBûlCB
–
z˛CCPublishC⁄sﬁid©edBûl_t
 *
pCmd
,

2044 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2047 
	}
}

2061 
	$e•_PublishCªdôPaymítInfoCB
–
z˛CCPublishCªdôPaymítInfo_t
 *
pCmd
,

2062 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2065 
	}
}

2079 
	$e•_GëT¨iffInf‹m©i⁄CB
–
z˛CCGëT¨iffInf‹m©i⁄_t
 *
pCmd
,

2080 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2083 
	}
}

2097 
	$e•_GëPri˚M©rixCB
–
uöt32
 
issuîT¨iffId
,

2098 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2101 
	}
}

2115 
	$e•_GëBlockThªshﬁdsCB
–
uöt32
 
issuîT¨iffId
,

2116 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2119 
	}
}

2133 
	$e•_GëC⁄vîsi⁄Fa˘‹CB
–
z˛CCGëC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

2134 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2137 
	}
}

2151 
	$e•_GëCÆ‹ificVÆueCB
–
z˛CCGëCÆ‹ificVÆue_t
 *
pCmd
,

2152 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2155 
	}
}

2169 
	$e•_GëCO2VÆueCB
–
z˛CCGëCO2VÆue_t
 *
pCmd
,

2170 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2173 
	}
}

2187 
	$e•_GëBûlögPîiodCB
–
z˛CCGëBûlögPîiod_t
 *
pCmd
,

2188 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2191 
	}
}

2205 
	$e•_GëC⁄sﬁid©edBûlCB
–
z˛CCGëC⁄sﬁid©edBûl_t
 *
pCmd
,

2206 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2209 
	}
}

2223 
	$e•_CPPEvítRe•⁄£CB
–
z˛CCCPPEvítRe•⁄£_t
 *
pCmd
,

2224 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2227 
	}
}

2241 
	$e•_Ch™geDebtCB
–
z˛CCCh™geDebt_t
 *
pCmd
,

2242 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2245 
	}
}

2259 
	$e•_EmîgícyCªdôSëupCB
–
z˛CCEmîgícyCªdôSëup_t
 *
pCmd
,

2260 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2263 
	}
}

2277 
	$e•_C⁄sumîT›upCB
–
z˛CCC⁄sumîT›up_t
 *
pCmd
,

2278 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2281 
	}
}

2295 
	$e•_CªdôAdju°mítCB
–
z˛CCCªdôAdju°mít_t
 *
pCmd
,

2296 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2299 
	}
}

2313 
	$e•_Ch™gePaymítModeCB
–
z˛CCCh™gePaymítMode_t
 *
pCmd
,

2314 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2317 
	}
}

2331 
	$e•_GëPª∑yS«pshŸCB
–
z˛CCGëPª∑yS«pshŸ_t
 *
pCmd
,

2332 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2335 
	}
}

2349 
	$e•_GëT›upLogCB
–
uöt8
 
numEvíts
,

2350 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2353 
	}
}

2367 
	$e•_SëLowCªdôW¨nögLevñCB
–
uöt8
 
numEvíts
,

2368 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2371 
	}
}

2385 
	$e•_GëDebtRïaymítLogCB
–
z˛CCGëDebtRïaymítLog_t
 *
pCmd
,

2386 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2389 
	}
}

2403 
	$e•_GëPª∑yS«pshŸRe•⁄£CB
–
z˛CCGëPª∑yS«pshŸRe•⁄£_t
 *
pCmd
,

2404 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2407 
	}
}

2421 
	$e•_Ch™gePaymítModeRe•⁄£CB
–
z˛CCCh™gePaymítModeRe•⁄£_t
 *
pCmd
,

2422 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2425 
	}
}

2439 
	$e•_C⁄sumîT›upRe•⁄£CB
–
z˛CCC⁄sumîT›upRe•⁄£_t
 *
pCmd
,

2440 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2443 
	}
}

2457 
	$e•_GëComm™dsCB
–
uöt8
 
¥ïayNŸifiˇti⁄Fœgs
,

2458 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2461 
	}
}

2475 
	$e•_PublishT›upLogCB
–
z˛CCPublishT›upLog_t
 *
pCmd
,

2476 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2479 
	}
}

2493 
	$e•_PublishDebtLogCB
–
z˛CCPublishDebtLog_t
 *
pCmd
,

2494 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

2497 
	}
}

2515 
	$e•_Pro˚ssZDOMsg
–
zdoIncomögMsg_t
 *
öMsg
 )

2517 
ZDO_Devi˚A¬˚_t
 
devA¬˚
;

2519  
öMsg
->
˛u°îID
 )

2521 
Devi˚_™n˚
:

2523 
	`ZDO_P¨£Devi˚A¬˚
–
öMsg
, &
devA¬˚
 );

2524 
sim∂eDescReqAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

2525 
sim∂eDescReqAddr
.
addr
.
sh‹tAddr
 = 
devA¬˚
.
nwkAddr
;

2528 
	`oßl_£t_evít
–
e•TaskID
, 
SIMPLE_DESC_QUERY_EVT
 );

2532 
Sim∂e_Desc_r•
:

2534 
ZDO_Sim∂eDescR•_t
 *
pSim∂eDescR•
;

2535 
pSim∂eDescR•
 = (
ZDO_Sim∂eDescR•_t
 *)
	`oßl_mem_Æloc
( ( ZDO_SimpleDescRsp_t ) );

2537 if(
pSim∂eDescR•
)

2539 
pSim∂eDescR•
->
sim∂eDesc
.
pAµInClu°îLi°
 = 
NULL
;

2540 
pSim∂eDescR•
->
sim∂eDesc
.
pAµOutClu°îLi°
 = 
NULL
;

2542 
	`ZDO_P¨£Sim∂eDescR•
–
öMsg
, 
pSim∂eDescR•
 );

2543 if–
pSim∂eDescR•
->
sim∂eDesc
.
AµDevi˚Id
 =
ZCL_SE_DEVICEID_PCT
 )

2545 
p˘Addr
.
addr
.
sh‹tAddr
 = 
pSim∂eDescR•
->
nwkAddr
;

2547 i‡–
pSim∂eDescR•
->
sim∂eDesc
.
AµDevi˚Id
 =
ZCL_SE_DEVICEID_LOAD_CTRL_EXTENSION
 )

2549 
lﬂdC⁄åﬁAddr
.
addr
.
sh‹tAddr
 = 
pSim∂eDescR•
->
nwkAddr
;

2553 i‡(
pSim∂eDescR•
->
sim∂eDesc
.
pAµInClu°îLi°
)

2555 
	`oßl_mem_‰ì
(
pSim∂eDescR•
->
sim∂eDesc
.
pAµInClu°îLi°
);

2559 i‡(
pSim∂eDescR•
->
sim∂eDesc
.
pAµOutClu°îLi°
)

2561 
	`oßl_mem_‰ì
(
pSim∂eDescR•
->
sim∂eDesc
.
pAµOutClu°îLi°
);

2564 
	`oßl_mem_‰ì
–
pSim∂eDescR•
 );

2569 
	}
}

2587 
	$e•_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

2590 #i‡
	`deföed
 ( 
SE_UK_EXT
 ) && deföed ( 
SE_MIRROR
 )

2591 i‡–
	`e•_IsMúr‹Endpoöt
–
pInMsg
->
ídPoöt
 ) )

2593 
	`e•_Múr‹Pro˚ssZCLMsg
–
pInMsg
 );

2598  
pInMsg
->
z˛Hdr
.
comm™dID
 )

2600 #i‡
	`deföed
 ( 
ZCL_READ
 )

2601 
ZCL_CMD_READ_RSP
:

2602 
	`e•_Pro˚ssInRódR•Cmd
–
pInMsg
 );

2605 #i‡
	`deföed
 ( 
ZCL_WRITE
 )

2606 
ZCL_CMD_WRITE_RSP
:

2607 
	`e•_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

2610 #i‡
	`deföed
 ( 
ZCL_REPORT
 )

2611 
ZCL_CMD_CONFIG_REPORT
:

2612 
	`e•_Pro˚ssInC⁄figRï‹tCmd
–
pInMsg
 );

2615 
ZCL_CMD_CONFIG_REPORT_RSP
:

2616 
	`e•_Pro˚ssInC⁄figRï‹tR•Cmd
–
pInMsg
 );

2619 
ZCL_CMD_READ_REPORT_CFG
:

2620 
	`e•_Pro˚ssInRódRï‹tCfgCmd
–
pInMsg
 );

2623 
ZCL_CMD_READ_REPORT_CFG_RSP
:

2624 
	`e•_Pro˚ssInRódRï‹tCfgR•Cmd
–
pInMsg
 );

2627 
ZCL_CMD_REPORT
:

2628 
	`e•_Pro˚ssInRï‹tCmd
–
pInMsg
 );

2631 
ZCL_CMD_DEFAULT_RSP
:

2632 
	`e•_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

2634 #i‡
	`deföed
 ( 
ZCL_DISCOVER
 )

2635 
ZCL_CMD_DISCOVER_RSP
:

2636 
	`e•_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

2644 i‡–
pInMsg
->
©åCmd
 !
NULL
 )

2647 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

2648 
pInMsg
->
©åCmd
 = 
NULL
;

2650 
	}
}

2652 #i‡
deföed
 ( 
ZCL_READ
 )

2662 
uöt8
 
	$e•_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

2664 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

2665 
uöt8
 
i
;

2667 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

2668 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

2675  
TRUE
;

2676 
	}
}

2679 #i‡
deföed
 ( 
ZCL_WRITE
 )

2689 
uöt8
 
	$e•_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

2691 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

2692 
uöt8
 
i
;

2694 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

2695 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

2701  
TRUE
;

2702 
	}
}

2705 #i‡
deföed
 ( 
ZCL_REPORT
 )

2716 
uöt8
 
	$e•_Pro˚ssInC⁄figRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

2718 
z˛CfgRï‹tCmd_t
 *
cfgRï‹tCmd
;

2719 
z˛CfgRï‹tRec_t
 *
ªp‹tRec
;

2720 
z˛CfgRï‹tR•Cmd_t
 *
cfgRï‹tR•Cmd
;

2721 
z˛AârRec_t
 
©åRec
;

2722 
uöt8
 
°©us
;

2723 
uöt8
 
i
, 
j
 = 0;

2725 
cfgRï‹tCmd
 = (
z˛CfgRï‹tCmd_t
 *)
pInMsg
->
©åCmd
;

2728 
cfgRï‹tR•Cmd
 = (
z˛CfgRï‹tR•Cmd_t
 *)
	`oßl_mem_Æloc
(  ( zclCfgReportRspCmd_t ) +

2729  ( 
z˛CfgRï‹tSètus_t
Ë* 
cfgRï‹tCmd
->
numAâr
 );

2730 i‡–
cfgRï‹tR•Cmd
 =
NULL
 )

2732  
FALSE
;

2736  
i
 = 0; i < 
cfgRï‹tCmd
->
numAâr
; i++ )

2738 
ªp‹tRec
 = &(
cfgRï‹tCmd
->
©åLi°
[
i
]);

2740 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2742 i‡–
	`z˛FödAârRec
–
ESP_ENDPOINT
, 
pInMsg
->
˛u°îId
, 
ªp‹tRec
->
©åID
, &
©åRec
 ) )

2744 i‡–
ªp‹tRec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

2746 i‡–
ªp‹tRec
->
d©aTy≥
 =
©åRec
.
©å
.dataType )

2749 i‡–
	`z˛_M™d©‹yRï‹èbÀAâribuã
–&
©åRec
 ) =
TRUE
 )

2751 i‡–
ªp‹tRec
->
möRï‹tI¡
 < 
ESP_MIN_REPORTING_INTERVAL
 ||

2752 –
ªp‹tRec
->
maxRï‹tI¡
 != 0 &&

2753 
ªp‹tRec
->
maxRï‹tI¡
 <Ñï‹tRec->
möRï‹tI¡
 ) )

2756 
°©us
 = 
ZCL_STATUS_INVALID_VALUE
;

2762 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

2768 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

2774 
°©us
 = 
ZCL_STATUS_INVALID_DATA_TYPE
;

2780 i‡–
	`z˛_M™d©‹yRï‹èbÀAâribuã
–&
©åRec
 ) =
TRUE
 )

2784 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

2789 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

2796 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

2800 i‡–
°©us
 !
ZCL_STATUS_SUCCESS
 )

2802 
cfgRï‹tR•Cmd
->
©åLi°
[
j
].
°©us
 = status;

2803 
cfgRï‹tR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
ªp‹tRec
->attrID;

2807 i‡–
j
 == 0 )

2812 
cfgRï‹tR•Cmd
->
©åLi°
[0].
°©us
 = 
ZCL_STATUS_SUCCESS
;

2813 
cfgRï‹tR•Cmd
->
numAâr
 = 1;

2817 
cfgRï‹tR•Cmd
->
numAâr
 = 
j
;

2821 
	`z˛_SídC⁄figRï‹tR•Cmd
–
ESP_ENDPOINT
, &(
pInMsg
->
§cAddr
),

2822 
pInMsg
->
˛u°îId
, 
cfgRï‹tR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

2823 
TRUE
, 
pInMsg
->
z˛Hdr
.
å™sSeqNum
 );

2824 
	`oßl_mem_‰ì
–
cfgRï‹tR•Cmd
 );

2826  
TRUE
 ;

2827 
	}
}

2838 
uöt8
 
	$e•_Pro˚ssInC⁄figRï‹tR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

2840 
z˛CfgRï‹tR•Cmd_t
 *
cfgRï‹tR•Cmd
;

2841 
z˛AârRec_t
 
©åRec
;

2842 
uöt8
 
i
;

2844 
cfgRï‹tR•Cmd
 = (
z˛CfgRï‹tR•Cmd_t
 *)
pInMsg
->
©åCmd
;

2845 
i
 = 0; i < 
cfgRï‹tR•Cmd
->
numAâr
; i++)

2847 i‡–
	`z˛FödAârRec
–
ESP_ENDPOINT
, 
pInMsg
->
˛u°îId
,

2848 
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
©åID
, &
©åRec
 ) )

2855  
TRUE
;

2856 
	}
}

2867 
uöt8
 
	$e•_Pro˚ssInRódRï‹tCfgCmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

2869 
z˛RódRï‹tCfgCmd_t
 *
ªadRï‹tCfgCmd
;

2870 
z˛RódRï‹tCfgR•Cmd_t
 *
ªadRï‹tCfgR•Cmd
;

2871 
z˛Rï‹tCfgR•Rec_t
 *
ªp‹tR•Rec
;

2872 
z˛AârRec_t
 
©åRec
;

2873 
uöt8
 
ªp‹tCh™geLí
;

2874 
uöt8
 *
d©aPå
;

2875 
uöt8
 
hdrLí
;

2876 
uöt8
 
d©aLí
 = 0;

2877 
uöt8
 
°©us
;

2878 
uöt8
 
i
;

2880 
ªadRï‹tCfgCmd
 = (
z˛RódRï‹tCfgCmd_t
 *)
pInMsg
->
©åCmd
;

2883  
i
 = 0; i < 
ªadRï‹tCfgCmd
->
numAâr
; i++ )

2887 i‡–
	`z˛FödAârRec
–
ESP_ENDPOINT
, 
pInMsg
->
˛u°îId
,

2888 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
©åID
, &
©åRec
 ) )

2890 i‡–
	`z˛A«logD©aTy≥
–
©åRec
.
©å
.
d©aTy≥
 ) )

2892 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
©åRec
.
©å
.
d©aTy≥
 );

2895 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

2897 
ªp‹tCh™geLí
++;

2899 
d©aLí
 +
ªp‹tCh™geLí
;

2904 
hdrLí
 = –
z˛RódRï‹tCfgR•Cmd_t
 ) + ( 
ªadRï‹tCfgCmd
->
numAâr
 * –
z˛Rï‹tCfgR•Rec_t
 ) );

2907 
ªadRï‹tCfgR•Cmd
 = (
z˛RódRï‹tCfgR•Cmd_t
 *)
	`oßl_mem_Æloc
–
hdrLí
 + 
d©aLí
 );

2908 i‡–
ªadRï‹tCfgR•Cmd
 =
NULL
 )

2910  
FALSE
;

2913 
d©aPå
 = (
uöt8
 *)–(uöt8 *)
ªadRï‹tCfgR•Cmd
 + 
hdrLí
 );

2914 
ªadRï‹tCfgR•Cmd
->
numAâr
 = 
ªadRï‹tCfgCmd
->numAttr;

2915 
i
 = 0; i < 
ªadRï‹tCfgCmd
->
numAâr
; i++)

2917 
ªp‹tR•Rec
 = &(
ªadRï‹tCfgR•Cmd
->
©åLi°
[
i
]);

2919 i‡–
	`z˛FödAârRec
–
ESP_ENDPOINT
, 
pInMsg
->
˛u°îId
,

2920 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
©åID
, &
©åRec
 ) )

2922 i‡–
	`z˛_M™d©‹yRï‹èbÀAâribuã
–&
©åRec
 ) =
TRUE
 )

2926 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

2927 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 && 
	`z˛A«logD©aTy≥
–
©åRec
.
©å
.
d©aTy≥
 ) )

2929 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
©åRec
.
©å
.
d©aTy≥
 );

2931 
ªp‹tR•Rec
->
ªp‹èbÀCh™ge
 = 
d©aPå
;

2934 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

2936 
ªp‹tCh™geLí
++;

2938 
d©aPå
 +
ªp‹tCh™geLí
;

2944 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

2950 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

2953 
ªp‹tR•Rec
->
°©us
 = status;

2954 
ªp‹tR•Rec
->
©åID
 = 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].attrID;

2958 
	`z˛_SídRódRï‹tCfgR•Cmd
–
ESP_ENDPOINT
, &(
pInMsg
->
§cAddr
),

2959 
pInMsg
->
˛u°îId
, 
ªadRï‹tCfgR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

2960 
TRUE
, 
pInMsg
->
z˛Hdr
.
å™sSeqNum
 );

2961 
	`oßl_mem_‰ì
–
ªadRï‹tCfgR•Cmd
 );

2963  
TRUE
;

2964 
	}
}

2975 
uöt8
 
	$e•_Pro˚ssInRódRï‹tCfgR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

2977 
z˛RódRï‹tCfgR•Cmd_t
 *
ªadRï‹tCfgR•Cmd
;

2978 
z˛Rï‹tCfgR•Rec_t
 *
ªp‹tR•Rec
;

2979 
uöt8
 
i
;

2981 
ªadRï‹tCfgR•Cmd
 = (
z˛RódRï‹tCfgR•Cmd_t
 *)
pInMsg
->
©åCmd
;

2982  
i
 = 0; i < 
ªadRï‹tCfgR•Cmd
->
numAâr
; i++ )

2984 
ªp‹tR•Rec
 = &(
ªadRï‹tCfgR•Cmd
->
©åLi°
[
i
]);

2989 i‡–
ªp‹tR•Rec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

2991 i‡–
ªp‹tR•Rec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

3002  
TRUE
;

3003 
	}
}

3014 
uöt8
 
	$e•_Pro˚ssInRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

3016 
z˛Rï‹tCmd_t
 *
ªp‹tCmd
;

3017 
z˛Rï‹t_t
 *
ªp‹tRec
;

3018 
uöt8
 
i
;

3019 
uöt8
 *
mëîD©a
;

3020 
lcdBuf
[13];

3022 
ªp‹tCmd
 = (
z˛Rï‹tCmd_t
 *)
pInMsg
->
©åCmd
;

3023 
i
 = 0; i < 
ªp‹tCmd
->
numAâr
; i++)

3026 
ªp‹tRec
 = &(
ªp‹tCmd
->
©åLi°
[
i
]);

3028 i‡–
ªp‹tRec
->
©åID
 =
ATTRID_SE_CURRENT_SUMMATION_DELIVERED
 )

3031 
mëîD©a
 = 
ªp‹tRec
->
©åD©a
;

3034 
i
=0; i<6; i++)

3036 if(
mëîD©a
[5-
i
] == 0)

3038 
lcdBuf
[
i
*2] = '0';

3039 
lcdBuf
[
i
*2+1] = '0';

3041 if(
mëîD©a
[5-
i
] <= 0x0A)

3043 
lcdBuf
[
i
*2] = '0';

3044 
	`_…ﬂ
(
mëîD©a
[5-
i
],(
uöt8
*)&
lcdBuf
[i*2+1],16);

3048 
	`_…ﬂ
(
mëîD©a
[5-
i
],(
uöt8
*)&
lcdBuf
[i*2],16);

3053 
	`HÆLcdWrôeSåög
("Zigbì Co‹dÉ•", 
HAL_LCD_LINE_1
);

3054 
	`HÆLcdWrôeSåög
("Cuº Summ Dlvd", 
HAL_LCD_LINE_2
);

3055 
	`HÆLcdWrôeSåög
(
lcdBuf
, 
HAL_LCD_LINE_3
);

3058  
TRUE
;

3059 
	}
}

3071 
uöt8
 
	$e•_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

3077  
TRUE
;

3078 
	}
}

3080 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

3090 
uöt8
 
	$e•_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

3092 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

3093 
uöt8
 
i
;

3095 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

3097  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

3102  
TRUE
;

3103 
	}
}

3106 #i‡
deföed
 ( 
SE_UK_EXT
 ) && deföed ( 
SE_MIRROR
 )

3116 
	$e•_Múr‹Inô
( )

3118 
	`oßl_mem£t
–&
e•_Múr‹C⁄åﬁ
, 0, (Ésp_MirrorControl ) );

3121 
e•PhysiˇlEnvú⁄mít
 |
PHY_MIRROR_CAPACITY_ENV
;

3122 
	}
}

3135 
uöt8
 
	$e•_GëMúr‹Endpoöt
–
afAddrTy≥_t
 *
§cAddr
 )

3137 
uöt8
 
i
;

3139  
i
 = 0; i < 
ESP_MAX_MIRRORS
; i++ )

3141 i‡––
e•_Múr‹C⁄åﬁ
.
múr‹Mask
 & (1 << 
i
) ) &&

3142 –
e•_Múr‹C⁄åﬁ
.
múr‹Info
[
i
].
§cAddr
 =§cAddr->
addr
.
sh‹tAddr
 ) &&

3143 –
e•_Múr‹C⁄åﬁ
.
múr‹Info
[
i
].
§cEndpoöt
 =
§cAddr
->
ídPoöt
 ) )

3145  ( 
i
 + 
ESP_MIRROR_EP_BASE
 );

3149  
ESP_MIRROR_INVALID_ENDPOINT
;

3150 
	}
}

3162 
e•Múr‹Info_t
 *
	$e•_GëMúr‹Info
–
uöt8
 
ídpoöt
 )

3164 i‡–
	`e•_IsMúr‹Endpoöt
–
ídpoöt
 ) )

3167 
uöt8
 
ödex
 = 
ídpoöt
 - 
ESP_MIRROR_EP_BASE
;

3170  &
e•_Múr‹C⁄åﬁ
.
múr‹Info
[
ödex
];

3173  
NULL
;

3174 
	}
}

3185 
	$e•_Múr‹InôAâribuãSë
–
uöt8
 
ídpoöt
 )

3187 
e•Múr‹Info_t
 *
pInfo
 = 
	`e•_GëMúr‹Info
–
ídpoöt
 );

3189 i‡–
pInfo
 !
NULL
 )

3191 
z˛AârRec_t
 *
pAâribuãs
 = 
pInfo
->
pAâr
;

3193 i‡–
pAâribuãs
 !
NULL
 )

3198 
pAâribuãs
[0].
˛u°îID
 = 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
;

3199 
pAâribuãs
[0].
©å
.
©åId
 = 
ATTRID_SE_NOTIFICATION_CONTROL_FLAGS
;

3200 
pAâribuãs
[0].
©å
.
d©aTy≥
 = 
ZCL_DATATYPE_BITMAP8
;

3201 
pAâribuãs
[0].
©å
.
ac˚ssC⁄åﬁ
 = 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
;

3202 
pAâribuãs
[0].
©å
.
d©aPå
 = &
pInfo
->
nŸifiˇti⁄C⁄åﬁ
;

3204 
pAâribuãs
[1].
˛u°îID
 = 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
;

3205 
pAâribuãs
[1].
©å
.
©åId
 = 
ATTRID_SE_NOTIFICATION_FLAGS
;

3206 
pAâribuãs
[1].
©å
.
d©aTy≥
 = 
ZCL_DATATYPE_BITMAP8
;

3207 
pAâribuãs
[1].
©å
.
ac˚ssC⁄åﬁ
 = 
ACCESS_CONTROL_READ
;

3208 
pAâribuãs
[1].
©å
.
d©aPå
 = &
pInfo
->
nŸifiˇti⁄Së
.
NŸifiˇti⁄Fœgs
;

3210 
pAâribuãs
[2].
˛u°îID
 = 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
;

3211 
pAâribuãs
[2].
©å
.
©åId
 = 
ATTRID_SE_PRICE_NOTIFICATION_FLAGS
;

3212 
pAâribuãs
[2].
©å
.
d©aTy≥
 = 
ZCL_DATATYPE_BITMAP16
;

3213 
pAâribuãs
[2].
©å
.
ac˚ssC⁄åﬁ
 = 
ACCESS_CONTROL_READ
;

3214 
pAâribuãs
[2].
©å
.
d©aPå
 = &
pInfo
->
nŸifiˇti⁄Së
.
Pri˚NŸifiˇti⁄Fœgs
;

3216 
pAâribuãs
[3].
˛u°îID
 = 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
;

3217 
pAâribuãs
[3].
©å
.
©åId
 = 
ATTRID_SE_CALENDAR_NOTIFICATION_FLAGS
;

3218 
pAâribuãs
[3].
©å
.
d©aTy≥
 = 
ZCL_DATATYPE_BITMAP8
;

3219 
pAâribuãs
[3].
©å
.
ac˚ssC⁄åﬁ
 = 
ACCESS_CONTROL_READ
;

3220 
pAâribuãs
[3].
©å
.
d©aPå
 = &
pInfo
->
nŸifiˇti⁄Së
.
CÆíd¨NŸifiˇti⁄Fœgs
;

3222 
pAâribuãs
[4].
˛u°îID
 = 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
;

3223 
pAâribuãs
[4].
©å
.
©åId
 = 
ATTRID_SE_PRE_PAY_NOTIFICATION_FLAGS
;

3224 
pAâribuãs
[4].
©å
.
d©aTy≥
 = 
ZCL_DATATYPE_BITMAP16
;

3225 
pAâribuãs
[4].
©å
.
ac˚ssC⁄åﬁ
 = 
ACCESS_CONTROL_READ
;

3226 
pAâribuãs
[4].
©å
.
d©aPå
 = &
pInfo
->
nŸifiˇti⁄Së
.
PªPayNŸifiˇti⁄Fœgs
;

3228 
pAâribuãs
[5].
˛u°îID
 = 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
;

3229 
pAâribuãs
[5].
©å
.
©åId
 = 
ATTRID_SE_DEVICE_MANAGEMENT_FLAGS
;

3230 
pAâribuãs
[5].
©å
.
d©aTy≥
 = 
ZCL_DATATYPE_BITMAP8
;

3231 
pAâribuãs
[5].
©å
.
ac˚ssC⁄åﬁ
 = 
ACCESS_CONTROL_READ
;

3232 
pAâribuãs
[5].
©å
.
d©aPå
 = &
pInfo
->
nŸifiˇti⁄Së
.
Devi˚MgmtNŸifiˇti⁄Fœgs
;

3235 
	}
}

3247 
uöt8
 
	$e•_AŒocMúr‹
–
afAddrTy≥_t
 *
§cAddr
 )

3249 
uöt8
 
i
;

3250 
z˛AârRec_t
 *
pAâr
;

3251 
uöt8
 
ídpoöt
;

3254 i‡–
e•_Múr‹C⁄åﬁ
.
múr‹Mask
 !
ESP_MIRROR_FULL_MASK
 )

3257 
pAâr
 = 
	`oßl_mem_Æloc
––
z˛AârRec_t
 ) * 
ESP_MIRROR_MAX_ATTRIBUTES
 );

3259 i‡–
pAâr
 !
NULL
 )

3262 
	`oßl_mem£t
–
pAâr
, 0, –
z˛AârRec_t
 ) * 
ESP_MIRROR_MAX_ATTRIBUTES
 );

3265  
i
 = 0; i < 
ESP_MIRROR_MAX_ATTRIBUTES
; i++ )

3267 
pAâr
[
i
].
˛u°îID
 = 0xFFFF;

3271  
i
 = 0; i < 
ESP_MAX_MIRRORS
; i++ )

3273 i‡–
e•_Múr‹C⁄åﬁ
.
múr‹Mask
 & (1 << 
i
) )

3278 
ídpoöt
 = 
i
 + 
ESP_MIRROR_EP_BASE
;

3281 
	`oßl_mem£t
–&
e•_Múr‹C⁄åﬁ
.
múr‹Info
[
i
], 0, –
e•Múr‹Info_t
 ) );

3284 
e•_Múr‹C⁄åﬁ
.
múr‹Mask
 |1 << 
i
;

3285 
e•_Múr‹C⁄åﬁ
.
múr‹Info
[
i
].
§cAddr
 = srcAddr->
addr
.
sh‹tAddr
;

3286 
e•_Múr‹C⁄åﬁ
.
múr‹Info
[
i
].
§cEndpoöt
 = 
§cAddr
->
ídPoöt
;

3287 
e•_Múr‹C⁄åﬁ
.
múr‹Info
[
i
].
pAâr
 =ÖAttr;

3290 
	`e•_Múr‹InôAâribuãSë
–
ídpoöt
 );

3294 i‡–
e•_Múr‹C⁄åﬁ
.
múr‹Mask
 =
ESP_MIRROR_FULL_MASK
 )

3296 
e•PhysiˇlEnvú⁄mít
 &~
PHY_MIRROR_CAPACITY_ENV
;

3299  
ídpoöt
;

3303 
	`oßl_mem_‰ì
–
pAâr
 );

3307  
ESP_MIRROR_INVALID_ENDPOINT
;

3308 
	}
}

3319 
	$e•_FªeMúr‹
–
uöt8
 
ídPoöt
 )

3321 i‡–
	`e•_IsMúr‹Endpoöt
–
ídPoöt
 ) )

3324 
uöt8
 
ödex
 = 
ídPoöt
 - 
ESP_MIRROR_EP_BASE
;

3325 
uöt8
 
i
;

3328 
e•_Múr‹C⁄åﬁ
.
múr‹Mask
 &~(1 << 
ödex
);

3330 i‡–
e•_Múr‹C⁄åﬁ
.
múr‹Info
[
ödex
].
pAâr
 )

3333  
i
 = 
ESP_MIRROR_USER_ATTRIBUTES_POSITION
; i < 
ESP_MIRROR_MAX_ATTRIBUTES
; i++ )

3335 i‡–
e•_Múr‹C⁄åﬁ
.
múr‹Info
[
ödex
].
pAâr
[
i
].
©å
.
d©aPå
 )

3337 
	`oßl_mem_‰ì
–
e•_Múr‹C⁄åﬁ
.
múr‹Info
[
ödex
].
pAâr
[
i
].
©å
.
d©aPå
 );

3338 
e•_Múr‹C⁄åﬁ
.
múr‹Info
[
ödex
].
pAâr
[
i
].
©å
.
d©aPå
 = 
NULL
;

3343 
	`oßl_mem_‰ì
–
e•_Múr‹C⁄åﬁ
.
múr‹Info
[
ödex
].
pAâr
 );

3344 
e•_Múr‹C⁄åﬁ
.
múr‹Info
[
ödex
].
pAâr
 = 
NULL
;

3347 
	}
}

3359 
uöt8
 
	$e•_IsMúr‹Endpoöt
–
uöt8
 
ídpoöt
 )

3361 i‡–(
ídpoöt
 >
ESP_MIRROR_EP_BASE
 ) &&

3362 (
ídpoöt
 <
ESP_MIRROR_EP_BASE
 + 
ESP_MAX_MIRRORS
 ) )

3364  
TRUE
;

3367  
FALSE
;

3368 
	}
}

3382 
uöt8
 
	$e•_Múr‹Upd©eAâribuã
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°î
, 
z˛Rï‹t_t
 *
pRï‹t
 )

3384 
e•Múr‹Info_t
 *
pInfo
 = 
	`e•_GëMúr‹Info
–
ídpoöt
 );

3386 i‡–
pInfo
 !
NULL
 )

3388 
z˛AârRec_t
 *
pAâribuãs
 = 
pInfo
->
pAâr
;

3389 
uöt8
 
i
;

3391 i‡–
pAâribuãs
 !
NULL
 )

3394  
i
 = 
ESP_MIRROR_USER_ATTRIBUTES_POSITION
; i < 
ESP_MIRROR_MAX_ATTRIBUTES
; i++ )

3396 i‡–
pAâribuãs
[
i
].
˛u°îID
 =
˛u°î
 )

3398 i‡–
pAâribuãs
[
i
].
©å
.
©åId
 =
pRï‹t
->
©åID
 )

3400 i‡–
pAâribuãs
[
i
].
©å
.
d©aPå
 )

3403 
	`z˛SîülizeD©a
–
pRï‹t
->
d©aTy≥
,ÖRï‹t->
©åD©a
, 
pAâribuãs
[
i
].
©å
.
d©aPå
 );

3404  
TRUE
;

3411  
i
 = 
ESP_MIRROR_USER_ATTRIBUTES_POSITION
; i < 
ESP_MIRROR_MAX_ATTRIBUTES
; i++ )

3413 i‡–
pAâribuãs
[
i
].
©å
.
d©aPå
 =
NULL
 )

3415 
uöt8
 
d©aLígth
 = 
	`z˛GëD©aTy≥Lígth
–
pRï‹t
->
d©aTy≥
 );

3417 i‡–
d©aLígth
 > 0 )

3419 
pAâribuãs
[
i
].
˛u°îID
 = 
˛u°î
;

3420 
pAâribuãs
[
i
].
©å
.
©åId
 = 
pRï‹t
->
©åID
;

3421 
pAâribuãs
[
i
].
©å
.
d©aTy≥
 = 
pRï‹t
->dataType;

3422 
pAâribuãs
[
i
].
©å
.
ac˚ssC⁄åﬁ
 = 
ACCESS_CONTROL_READ
;

3423 
pAâribuãs
[
i
].
©å
.
d©aPå
 = 
	`oßl_mem_Æloc
–
d©aLígth
 );

3425 i‡–
pAâribuãs
[
i
].
©å
.
d©aPå
 !
NULL
 )

3427 
	`z˛SîülizeD©a
–
pRï‹t
->
d©aTy≥
,ÖRï‹t->
©åD©a
, 
pAâribuãs
[
i
].
©å
.
d©aPå
 );

3428  
TRUE
;

3436  
FALSE
;

3437 
	}
}

3448 
	$e•_Múr‹Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

3450 
uöt8
 
i
;

3452 i‡–
pInMsg
->
z˛Hdr
.
comm™dID
 =
ZCL_CMD_REPORT
 )

3454 
z˛Rï‹tCmd_t
 *
ªp‹tCmd
 = (z˛Rï‹tCmd_à*)
pInMsg
->
©åCmd
;

3456 i‡–
ªp‹tCmd
 !
NULL
)

3458 
i
 = 0; i < 
ªp‹tCmd
->
numAâr
; i++)

3461 
	`e•_Múr‹Upd©eAâribuã
–
pInMsg
->
ídPoöt
,ÖInMsg->
˛u°îId
, &
ªp‹tCmd
->
©åLi°
[
i
] );

3466 
e•Múr‹Info_t
 *
pInfo
 = 
	`e•_GëMúr‹Info
–
pInMsg
->
§cAddr
.
ídPoöt
 );

3468 i‡–
pInfo
 !
NULL
 )

3470 i‡–
pInfo
->
nŸifiˇti⁄C⁄åﬁ
 & 
SE_NOTIFICATION_REPORT_ATTR_RSP_BIT
 )

3473 
	`z˛SE_Sim∂eMëîög_Síd_Múr‹Rï‹tAârR•
–
pInMsg
->
ídPoöt
, &pInMsg->
§cAddr
,

3474 &
pInfo
->
nŸifiˇti⁄Së
, 
TRUE
,

3475 
pInMsg
->
z˛Hdr
.
å™sSeqNum
);

3479 
	}
}

	@Projects/zstack/SE/SampleApp/Source/ESP/esp.h

40 #i‚de‡
ESP_H


41 
	#ESP_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#ESP_ENDPOINT
 0x09

	)

58 
	#ESP_MAX_ATTRIBUTES
 89

	)

60 
	#ESP_MAX_OPTIONS
 7

	)

62 
	#ESP_UPDATE_TIME_PERIOD
 1000

63 
	#ESP_FAST_POLL_TIMER_PERIOD
 1000

64 

	)

65 
	#HVAC_DEVICE_CLASS
 0x000001

66 
	#ONOFF_LOAD_DEVICE_CLASS
 0x000080

67 

	)

69 
	#ESP_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

70 
	#ESP_UPDATE_TIME_EVT
 0x0002

	)

71 
	#SIMPLE_DESC_QUERY_EVT
 0x0004

	)

72 
	#ESP_FAST_POLL_MODE_EVT
 0x0008

	)

87 
Sim∂eDes¸ùti⁄F‹m©_t
 
e•Sim∂eDesc
;

88 
CONST
 
z˛AârRec_t
 
e•Aârs
[];

89 
z˛O±i⁄Rec_t
 
e•O±i⁄s
[];

90 
uöt8
 
e•Devi˚E«bÀd
;

91 
uöt16
 
e•Tønsôi⁄Time
;

92 
uöt16
 
e•IdítifyTime
;

93 
uöt32
 
e•Time
;

94 
uöt8
 
e•Sig«tuª
[];

95 
uöt8
 
e•Fa°PﬁlUpd©ePîiod
;

97 
uöt8
 
e•PhysiˇlEnvú⁄mít
;

106 
e•_Inô
–
uöt8
 
èsk_id
 );

110 
uöt16
 
e•_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

116 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/ESP/esp_data.c

44 
	~"ZComDef.h
"

45 
	~"OSAL_Clock.h
"

46 
	~"ZDC⁄fig.h
"

48 
	~"£.h
"

49 
	~"e•.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_£.h
"

52 
	~"z˛_key_e°ablish.h
"

57 
	#ESP_DEVICE_VERSION
 0

	)

58 
	#ESP_FLAGS
 0

	)

60 
	#ESP_HWVERSION
 1

	)

61 
	#ESP_ZCLVERSION
 1

	)

75 c⁄° 
uöt8
 
	ge•ZCLVîsi⁄
 = 
ESP_ZCLVERSION
;

76 c⁄° 
uöt8
 
	ge•HWVîsi⁄
 = 
ESP_HWVERSION
;

77 c⁄° 
uöt8
 
	ge•M™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

78 c⁄° 
uöt8
 
	ge•ModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

79 c⁄° 
uöt8
 
	ge•D©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

80 c⁄° 
uöt8
 
	ge•PowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

82 
uöt8
 
	ge•Loˇti⁄Des¸ùti⁄
[] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

83 
uöt8
 
	ge•PhysiˇlEnvú⁄mít
 = 
PHY_UNSPECIFIED_ENV
;

84 
uöt8
 
	ge•Devi˚E«bÀd
 = 
DEVICE_ENABLED
;

87 
uöt16
 
	ge•IdítifyTime
 = 0;

88 
uöt32
 
	ge•Time
 = 0;

89 
uöt8
 
	ge•TimeSètus
 = 0x01;

90 
uöt32
 
	ge•La°SëTime
;

91 
uöt32
 
	ge•VÆidU¡ûTime
;

94 
uöt8
 
	ge•CuºítSumm©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

95 
uöt8
 
	ge•CuºítSumm©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

96 
uöt8
 
	ge•CuºítMaxDem™dDñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

97 
uöt8
 
	ge•CuºítMaxDem™dRe˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

98 
uöt8
 
	ge•CuºítTõr1Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

99 
uöt8
 
	ge•CuºítTõr1Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

100 
uöt8
 
	ge•CuºítTõr2Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

101 
uöt8
 
	ge•CuºítTõr2Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

102 
uöt8
 
	ge•CuºítTõr3Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

103 
uöt8
 
	ge•CuºítTõr3Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

104 
uöt8
 
	ge•CuºítTõr4Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

105 
uöt8
 
	ge•CuºítTõr4Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

106 
uöt8
 
	ge•CuºítTõr5Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

107 
uöt8
 
	ge•CuºítTõr5Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

108 
uöt8
 
	ge•CuºítTõr6Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

109 
uöt8
 
	ge•CuºítTõr6Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

110 
uöt8
 
	ge•DFTSumm©i⁄
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

111 
uöt16
 
	ge•DaûyFªezeTime
 = 0x01;

112 
öt8
 
	ge•PowîFa˘‹
 = 0x01;

113 
UTCTime
 
	ge•S«pshŸTime
 = 0x00;

114 
UTCTime
 
	ge•MaxDem™dDñivîdTime
 = 0x00;

115 
UTCTime
 
	ge•MaxDem™dRe˚ivedTime
 = 0x00;

116 
uöt8
 
	ge•DeÁu…Upd©ePîiod
 = 0x1E;

117 
uöt8
 
	ge•Fa°PﬁlUpd©ePîiod
 = 0x05;

120 
uöt8
 
	ge•Sètus
 = 0x12;

123 
uöt8
 
	ge•UnôOfMósuª
 = 0x00;

124 
uöt24
 
	ge•Mu…ùlõr
 = 0x01;

125 
uöt24
 
	ge•Divis‹
 = 0x01;

126 
uöt8
 
	ge•Summ©i⁄F‹m©ög
 = 0x01;

127 
uöt8
 
	ge•Dem™dF‹m©tög
 = 0x01;

128 
uöt8
 
	ge•Hi°‹iˇlC⁄sum±i⁄F‹m©tög
 = 0x01;

131 
öt24
 
	ge•In°™ã√ousDem™d
 = 0x01;

132 
uöt24
 
	ge•CuºítdayC⁄sum±i⁄Dñivîed
 = 0x01;

133 
uöt24
 
	ge•CuºítdayC⁄sum±i⁄Re˚ived
 = 0x01;

134 
uöt24
 
	ge•PªviousdayC⁄sum±i⁄Dñivîed
 = 0x01;

135 
uöt24
 
	ge•PªviousdayC⁄sumçi⁄Re˚ived
 = 0x01;

136 
UTCTime
 
	ge•CurP¨tProfûeI¡SèπTimeDñivîed
 = 0x1000;

137 
UTCTime
 
	ge•CurP¨tProfûeI¡SèπTimeRe˚ived
 = 0x2000;

138 
uöt24
 
	ge•CurP¨tProfûeI¡VÆueDñivîed
 = 0x0001;

139 
uöt24
 
	ge•CurP¨tProfûeI¡VÆueRe˚ived
 = 0x0002;

140 
uöt8
 
	ge•MaxNumbîOfPîiodsDñivîed
 = 0x01;

143 
uöt8
 
	ge•UtûôyDeföedGroup
 = 0x00;

144 
uöt8
 
	ge•SèπR™domizeMöuãs
 = 0x00;

145 
uöt8
 
	ge•St›R™domizeMöuãs
 = 0x00;

146 
uöt8
 
	ge•Sig«tuª
[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,

150 
uöt16
 
	ge•KeyE°ablishmítSuôe
 = 
CERTIFICATE_BASED_KEY_ESTABLISHMENT
;

153 
uöt8
 
	ge•PaymítC⁄åﬁ
 = 0x00;

154 
öt32
 
	ge•CªdôRemaöög
;

155 
öt32
 
	ge•EmîCªdôRemaöög
;

156 
uöt8
 
	ge•CªdôSètus
 = 0x00;

159 
UTCTime
 
	ge•T›UpD©eTime1
;

160 
uöt8
 
	ge•T›UpAmou¡1
[6] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

161 
uöt8
 
	ge•OrigDev1
;

162 
UTCTime
 
	ge•T›UpD©eTime2
;

163 
uöt8
 
	ge•T›UpAmou¡2
[6] = { 0x22, 0x33, 0x44, 0x55, 0x66, 0x77 };

164 
uöt8
 
	ge•OrigDev2
;

165 
UTCTime
 
	ge•T›UpD©eTime3
;

166 
uöt8
 
	ge•T›UpAmou¡3
[6] = { 0x33, 0x44, 0x55, 0x66, 0x77, 0x88 };

167 
uöt8
 
	ge•OrigDev3
;

168 
UTCTime
 
	ge•T›UpD©eTime4
;

169 
uöt8
 
	ge•T›UpAmou¡4
[6] = { 0x44, 0x55, 0x66, 0x77, 0x88, 0x99 };

170 
uöt8
 
	ge•OrigDev4
;

171 
UTCTime
 
	ge•T›UpD©eTime5
;

172 
uöt8
 
	ge•T›UpAmou¡5
[6] = { 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA };

173 
uöt8
 
	ge•OrigDev5
;

176 
uöt8
 
	ge•FuñDebtRem
[6] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

177 
uöt32
 
	ge•FuñDebtRecR©e
;

178 
uöt8
 
	ge•FuñDebtRecPîiod
;

179 
uöt8
 
	ge•N⁄FuñDebtRem
[6] = { 0x22, 0x33, 0x44, 0x55, 0x66, 0x77 };

180 
uöt32
 
	ge•N⁄FuñDebtRecR©e
;

181 
uöt8
 
	ge•N⁄FuñDebtRecPîiod
;

184 
uöt32
 
	ge•Pr›Ch™geProvidîId
;

185 
UTCTime
 
	ge•Pr›Ch™geIm∂emTime
;

186 
uöt8
 
	ge•Pr›Ch™geSuµlySètus
;

187 
uöt16
 
	ge•DñayedSuµI¡VÆueRem
;

188 
uöt8
 
	ge•DñayedSuµI¡VÆueTy≥
;

193 
CONST
 
z˛AârRec_t
 
	ge•Aârs
[
ESP_MAX_ATTRIBUTES
] =

198 
ZCL_CLUSTER_ID_GEN_BASIC
,

200 
ATTRID_BASIC_ZCL_VERSION
,

201 
ZCL_DATATYPE_UINT8
,

202 
ACCESS_CONTROL_READ
,

203 (*)&
e•ZCLVîsi⁄


207 
ZCL_CLUSTER_ID_GEN_BASIC
,

209 
ATTRID_BASIC_HW_VERSION
,

210 
ZCL_DATATYPE_UINT8
,

211 
ACCESS_CONTROL_READ
,

212 (*)&
e•HWVîsi⁄


216 
ZCL_CLUSTER_ID_GEN_BASIC
,

218 
ATTRID_BASIC_MANUFACTURER_NAME
,

219 
ZCL_DATATYPE_CHAR_STR
,

220 
ACCESS_CONTROL_READ
,

221 (*)
e•M™uÁ˘uªrName


225 
ZCL_CLUSTER_ID_GEN_BASIC
,

227 
ATTRID_BASIC_MODEL_ID
,

228 
ZCL_DATATYPE_CHAR_STR
,

229 
ACCESS_CONTROL_READ
,

230 (*)
e•ModñId


234 
ZCL_CLUSTER_ID_GEN_BASIC
,

236 
ATTRID_BASIC_DATE_CODE
,

237 
ZCL_DATATYPE_CHAR_STR
,

238 
ACCESS_CONTROL_READ
,

239 (*)
e•D©eCode


243 
ZCL_CLUSTER_ID_GEN_BASIC
,

245 
ATTRID_BASIC_POWER_SOURCE
,

246 
ZCL_DATATYPE_ENUM8
,

247 
ACCESS_CONTROL_READ
,

248 (*)&
e•PowîSour˚


252 
ZCL_CLUSTER_ID_GEN_BASIC
,

254 
ATTRID_BASIC_LOCATION_DESC
,

255 
ZCL_DATATYPE_CHAR_STR
,

256 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

257 (*)
e•Loˇti⁄Des¸ùti⁄


261 
ZCL_CLUSTER_ID_GEN_BASIC
,

263 
ATTRID_BASIC_PHYSICAL_ENV
,

264 
ZCL_DATATYPE_ENUM8
,

265 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

266 (*)&
e•PhysiˇlEnvú⁄mít


270 
ZCL_CLUSTER_ID_GEN_BASIC
,

272 
ATTRID_BASIC_DEVICE_ENABLED
,

273 
ZCL_DATATYPE_BOOLEAN
,

274 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

275 (*)&
e•Devi˚E«bÀd


281 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

283 
ATTRID_IDENTIFY_TIME
,

284 
ZCL_DATATYPE_UINT16
,

285 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

286 (*)&
e•IdítifyTime


292 
ZCL_CLUSTER_ID_GEN_TIME
,

294 
ATTRID_TIME_TIME
,

295 
ZCL_DATATYPE_UTC
,

296 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

297 (*)&
e•Time


301 
ZCL_CLUSTER_ID_GEN_TIME
,

303 
ATTRID_TIME_STATUS
,

304 
ZCL_DATATYPE_BITMAP8
,

305 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

306 (*)&
e•TimeSètus


310 
ZCL_CLUSTER_ID_GEN_TIME
,

312 
ATTRID_TIME_LAST_SET_TIME
,

313 
ZCL_DATATYPE_UTC
,

314 
ACCESS_CONTROL_READ
,

315 (*)&
e•La°SëTime


319 
ZCL_CLUSTER_ID_GEN_TIME
,

321 
ATTRID_TIME_VALID_UNTIL_TIME
,

322 
ZCL_DATATYPE_UTC
,

323 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

324 (*)&
e•VÆidU¡ûTime


330 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

332 
ATTRID_SE_CURRENT_SUMMATION_DELIVERED
,

333 
ZCL_DATATYPE_UINT48
,

334 
ACCESS_CONTROL_READ
,

335 (*)
e•CuºítSumm©i⁄Dñivîed


339 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

341 
ATTRID_SE_CURRENT_SUMMATION_RECEIVED
,

342 
ZCL_DATATYPE_UINT48
,

343 
ACCESS_CONTROL_READ
,

344 (*)
e•CuºítSumm©i⁄Re˚ived


348 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

350 
ATTRID_SE_CURRENT_MAX_DEMAND_DELIVERED
,

351 
ZCL_DATATYPE_UINT48
,

352 
ACCESS_CONTROL_READ
,

353 (*)
e•CuºítMaxDem™dDñivîed


357 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

359 
ATTRID_SE_CURRENT_MAX_DEMAND_RECEIVED
,

360 
ZCL_DATATYPE_UINT48
,

361 
ACCESS_CONTROL_READ
,

362 (*)
e•CuºítMaxDem™dRe˚ived


366 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

368 
ATTRID_SE_CURRENT_TIER1_SUMMATION_DELIVERED
,

369 
ZCL_DATATYPE_UINT48
,

370 
ACCESS_CONTROL_READ
,

371 (*)
e•CuºítTõr1Summ©i⁄Dñivîed


375 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

377 
ATTRID_SE_CURRENT_TIER1_SUMMATION_RECEIVED
,

378 
ZCL_DATATYPE_UINT48
,

379 
ACCESS_CONTROL_READ
,

380 (*)
e•CuºítTõr1Summ©i⁄Re˚ived


384 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

386 
ATTRID_SE_CURRENT_TIER2_SUMMATION_DELIVERED
,

387 
ZCL_DATATYPE_UINT48
,

388 
ACCESS_CONTROL_READ
,

389 (*)
e•CuºítTõr2Summ©i⁄Dñivîed


393 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

395 
ATTRID_SE_CURRENT_TIER2_SUMMATION_RECEIVED
,

396 
ZCL_DATATYPE_UINT48
,

397 
ACCESS_CONTROL_READ
,

398 (*)
e•CuºítTõr2Summ©i⁄Re˚ived


402 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

404 
ATTRID_SE_CURRENT_TIER3_SUMMATION_DELIVERED
,

405 
ZCL_DATATYPE_UINT48
,

406 
ACCESS_CONTROL_READ
,

407 (*)
e•CuºítTõr3Summ©i⁄Dñivîed


411 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

413 
ATTRID_SE_CURRENT_TIER3_SUMMATION_RECEIVED
,

414 
ZCL_DATATYPE_UINT48
,

415 
ACCESS_CONTROL_READ
,

416 (*)
e•CuºítTõr3Summ©i⁄Re˚ived


420 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

422 
ATTRID_SE_CURRENT_TIER4_SUMMATION_DELIVERED
,

423 
ZCL_DATATYPE_UINT48
,

424 
ACCESS_CONTROL_READ
,

425 (*)
e•CuºítTõr4Summ©i⁄Dñivîed


429 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

431 
ATTRID_SE_CURRENT_TIER4_SUMMATION_RECEIVED
,

432 
ZCL_DATATYPE_UINT48
,

433 
ACCESS_CONTROL_READ
,

434 (*)
e•CuºítTõr4Summ©i⁄Re˚ived


438 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

440 
ATTRID_SE_CURRENT_TIER5_SUMMATION_DELIVERED
,

441 
ZCL_DATATYPE_UINT48
,

442 
ACCESS_CONTROL_READ
,

443 (*)
e•CuºítTõr5Summ©i⁄Dñivîed


447 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

449 
ATTRID_SE_CURRENT_TIER5_SUMMATION_RECEIVED
,

450 
ZCL_DATATYPE_UINT48
,

451 
ACCESS_CONTROL_READ
,

452 (*)
e•CuºítTõr5Summ©i⁄Re˚ived


456 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

458 
ATTRID_SE_CURRENT_TIER6_SUMMATION_DELIVERED
,

459 
ZCL_DATATYPE_UINT48
,

460 
ACCESS_CONTROL_READ
,

461 (*)
e•CuºítTõr6Summ©i⁄Dñivîed


465 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

467 
ATTRID_SE_CURRENT_TIER6_SUMMATION_RECEIVED
,

468 
ZCL_DATATYPE_UINT48
,

469 
ACCESS_CONTROL_READ
,

470 (*)
e•CuºítTõr6Summ©i⁄Re˚ived


474 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

476 
ATTRID_SE_DFT_SUMMATION
,

477 
ZCL_DATATYPE_UINT48
,

478 
ACCESS_CONTROL_READ
,

479 (*)
e•DFTSumm©i⁄


483 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

485 
ATTRID_SE_DAILY_FREEZE_TIME
,

486 
ZCL_DATATYPE_UINT16
,

487 
ACCESS_CONTROL_READ
,

488 (*)&
e•DaûyFªezeTime


492 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

494 
ATTRID_SE_POWER_FACTOR
,

495 
ZCL_DATATYPE_INT8
,

496 
ACCESS_CONTROL_READ
,

497 (*)&
e•PowîFa˘‹


501 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

503 
ATTRID_SE_READING_SNAPSHOT_TIME
,

504 
ZCL_DATATYPE_UTC
,

505 
ACCESS_CONTROL_READ
,

506 (*)&
e•S«pshŸTime


510 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

512 
ATTRID_SE_CURRENT_MAX_DEMAND_DELIVERD_TIME
,

513 
ZCL_DATATYPE_UTC
,

514 
ACCESS_CONTROL_READ
,

515 (*)&
e•MaxDem™dDñivîdTime


519 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

521 
ATTRID_SE_CURRENT_MAX_DEMAND_RECEIVED_TIME
,

522 
ZCL_DATATYPE_UTC
,

523 
ACCESS_CONTROL_READ
,

524 (*)&
e•MaxDem™dRe˚ivedTime


528 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

530 
ATTRID_SE_DEFAULT_UPDATE_PERIOD
,

531 
ZCL_DATATYPE_UINT8
,

532 
ACCESS_CONTROL_READ
,

533 (*)&
e•DeÁu…Upd©ePîiod


537 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

539 
ATTRID_SE_FAST_POLL_UPDATE_PERIOD
,

540 
ZCL_DATATYPE_UINT8
,

541 
ACCESS_CONTROL_READ
,

542 (*)&
e•Fa°PﬁlUpd©ePîiod


546 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

548 
ATTRID_SE_STATUS
,

549 
ZCL_DATATYPE_BITMAP8
,

550 
ACCESS_CONTROL_READ
,

551 (*)&
e•Sètus


556 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

558 
ATTRID_SE_UNIT_OF_MEASURE
,

559 
ZCL_DATATYPE_ENUM8
,

560 
ACCESS_CONTROL_READ
,

561 (*)&
e•UnôOfMósuª


565 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

567 
ATTRID_SE_MULTIPLIER
,

568 
ZCL_DATATYPE_UINT24
,

569 
ACCESS_CONTROL_READ
,

570 (*)&
e•Mu…ùlõr


574 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

576 
ATTRID_SE_DIVISOR
,

577 
ZCL_DATATYPE_UINT24
,

578 
ACCESS_CONTROL_READ
,

579 (*)&
e•Divis‹


583 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

585 
ATTRID_SE_SUMMATION_FORMATTING
,

586 
ZCL_DATATYPE_BITMAP8
,

587 
ACCESS_CONTROL_READ
,

588 (*)&
e•Summ©i⁄F‹m©ög


592 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

594 
ATTRID_SE_DEMAND_FORMATTING
,

595 
ZCL_DATATYPE_BITMAP8
,

596 
ACCESS_CONTROL_READ
,

597 (*)&
e•Dem™dF‹m©tög


601 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

603 
ATTRID_SE_HISTORICAL_CONSUMPTION_FORMATTING
,

604 
ZCL_DATATYPE_BITMAP8
,

605 
ACCESS_CONTROL_READ
,

606 (*)&
e•Hi°‹iˇlC⁄sum±i⁄F‹m©tög


610 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

612 
ATTRID_SE_INSTANTANEOUS_DEMAND
,

613 
ZCL_DATATYPE_INT24
,

614 
ACCESS_CONTROL_READ
,

615 (*)&
e•In°™ã√ousDem™d


619 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

621 
ATTRID_SE_CURRENTDAY_CONSUMPTION_DELIVERED
,

622 
ZCL_DATATYPE_UINT24
,

623 
ACCESS_CONTROL_READ
,

624 (*)&
e•CuºítdayC⁄sum±i⁄Dñivîed


628 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

630 
ATTRID_SE_CURRENTDAY_CONSUMPTION_RECEIVED
,

631 
ZCL_DATATYPE_UINT24
,

632 
ACCESS_CONTROL_READ
,

633 (*)&
e•CuºítdayC⁄sum±i⁄Re˚ived


637 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

639 
ATTRID_SE_PREVIOUSDAY_CONSUMPTION_DELIVERED
,

640 
ZCL_DATATYPE_UINT24
,

641 
ACCESS_CONTROL_READ
,

642 (*)&
e•PªviousdayC⁄sum±i⁄Dñivîed


646 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

648 
ATTRID_SE_PREVIOUSDAY_CONSUMPTION_RECEIVED
,

649 
ZCL_DATATYPE_UINT24
,

650 
ACCESS_CONTROL_READ
,

651 (*)&
e•PªviousdayC⁄sumçi⁄Re˚ived


655 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

657 
ATTRID_SE_CUR_PART_PROFILE_INT_START_TIME_DELIVERED
,

658 
ZCL_DATATYPE_UTC
,

659 
ACCESS_CONTROL_READ
,

660 (*)&
e•CurP¨tProfûeI¡SèπTimeDñivîed


664 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

666 
ATTRID_SE_CUR_PART_PROFILE_INT_START_TIME_RECEIVED
,

667 
ZCL_DATATYPE_UTC
,

668 
ACCESS_CONTROL_READ
,

669 (*)&
e•CurP¨tProfûeI¡SèπTimeRe˚ived


673 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

675 
ATTRID_SE_CUR_PART_PROFILE_INT_VALUE_DELIVERED
,

676 
ZCL_DATATYPE_UINT24
,

677 
ACCESS_CONTROL_READ
,

678 (*)&
e•CurP¨tProfûeI¡VÆueDñivîed


682 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

684 
ATTRID_SE_CUR_PART_PROFILE_INT_VALUE_RECEIVED
,

685 
ZCL_DATATYPE_UINT24
,

686 
ACCESS_CONTROL_READ
,

687 (*)&
e•CurP¨tProfûeI¡VÆueRe˚ived


692 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

694 
ATTRID_SE_MAX_NUMBER_OF_PERIODS_DELIVERED
,

695 
ZCL_DATATYPE_UINT8
,

696 
ACCESS_CONTROL_READ
,

697 (*)&
e•MaxNumbîOfPîiodsDñivîed


701 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

703 
ATTRID_SE_UTILITY_DEFINED_GROUP
,

704 
ZCL_DATATYPE_UINT8
,

705 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

706 (*)&
e•UtûôyDeföedGroup


710 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

712 
ATTRID_SE_START_RANDOMIZE_MINUTES
,

713 
ZCL_DATATYPE_UINT8
,

714 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

715 (*)&
e•SèπR™domizeMöuãs


719 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

721 
ATTRID_SE_STOP_RANDOMIZE_MINUTES
,

722 
ZCL_DATATYPE_UINT8
,

723 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

724 (*)&
e•St›R™domizeMöuãs


728 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

730 
ATTRID_KEY_ESTABLISH_SUITE
,

731 
ZCL_DATATYPE_BITMAP16
,

732 
ACCESS_CONTROL_READ
,

733 (*)&
e•KeyE°ablishmítSuôe


737 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

739 
ATTRID_SE_PAYMENT_CONTROL
,

740 
ZCL_DATATYPE_BITMAP8
,

741 
ACCESS_CONTROL_READ
,

742 (*)&
e•PaymítC⁄åﬁ


746 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

748 
ATTRID_SE_CREDIT_REMAINING
,

749 
ZCL_DATATYPE_INT32
,

750 
ACCESS_CONTROL_READ
,

751 (*)&
e•CªdôRemaöög


755 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

757 
ATTRID_SE_EMERGENCY_CREDIT_REMAINING
,

758 
ZCL_DATATYPE_INT32
,

759 
ACCESS_CONTROL_READ
,

760 (*)&
e•EmîCªdôRemaöög


764 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

766 
ATTRID_SE_CREDIT_STATUS
,

767 
ZCL_DATATYPE_BITMAP8
,

768 
ACCESS_CONTROL_READ
,

769 (*)&
e•CªdôSètus


773 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

775 
ATTRID_SE_TOPUP_DATE_TIME_1
,

776 
ZCL_DATATYPE_UTC
,

777 
ACCESS_CONTROL_READ
,

778 (*)&
e•T›UpD©eTime1


782 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

784 
ATTRID_SE_TOPUP_AMOUNT_1
,

785 
ZCL_DATATYPE_UINT48
,

786 
ACCESS_CONTROL_READ
,

787 (*)&
e•T›UpAmou¡1


791 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

793 
ATTRID_SE_ORIGINATING_DEVICE_1
,

794 
ZCL_DATATYPE_ENUM8
,

795 
ACCESS_CONTROL_READ
,

796 (*)&
e•OrigDev1


800 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

802 
ATTRID_SE_TOPUP_DATE_TIME_2
,

803 
ZCL_DATATYPE_UTC
,

804 
ACCESS_CONTROL_READ
,

805 (*)&
e•T›UpD©eTime2


809 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

811 
ATTRID_SE_TOPUP_AMOUNT_2
,

812 
ZCL_DATATYPE_UINT48
,

813 
ACCESS_CONTROL_READ
,

814 (*)&
e•T›UpAmou¡2


818 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

820 
ATTRID_SE_ORIGINATING_DEVICE_2
,

821 
ZCL_DATATYPE_ENUM8
,

822 
ACCESS_CONTROL_READ
,

823 (*)&
e•OrigDev2


827 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

829 
ATTRID_SE_TOPUP_DATE_TIME_3
,

830 
ZCL_DATATYPE_UTC
,

831 
ACCESS_CONTROL_READ
,

832 (*)&
e•T›UpD©eTime3


836 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

838 
ATTRID_SE_TOPUP_AMOUNT_3
,

839 
ZCL_DATATYPE_UINT48
,

840 
ACCESS_CONTROL_READ
,

841 (*)&
e•T›UpAmou¡3


845 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

847 
ATTRID_SE_ORIGINATING_DEVICE_3
,

848 
ZCL_DATATYPE_ENUM8
,

849 
ACCESS_CONTROL_READ
,

850 (*)&
e•OrigDev3


854 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

856 
ATTRID_SE_TOPUP_DATE_TIME_4
,

857 
ZCL_DATATYPE_UTC
,

858 
ACCESS_CONTROL_READ
,

859 (*)&
e•T›UpD©eTime4


863 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

865 
ATTRID_SE_TOPUP_AMOUNT_4
,

866 
ZCL_DATATYPE_UINT48
,

867 
ACCESS_CONTROL_READ
,

868 (*)&
e•T›UpAmou¡4


872 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

874 
ATTRID_SE_ORIGINATING_DEVICE_4
,

875 
ZCL_DATATYPE_ENUM8
,

876 
ACCESS_CONTROL_READ
,

877 (*)&
e•OrigDev4


881 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

883 
ATTRID_SE_TOPUP_DATE_TIME_5
,

884 
ZCL_DATATYPE_UTC
,

885 
ACCESS_CONTROL_READ
,

886 (*)&
e•T›UpD©eTime5


890 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

892 
ATTRID_SE_TOPUP_AMOUNT_5
,

893 
ZCL_DATATYPE_UINT48
,

894 
ACCESS_CONTROL_READ
,

895 (*)&
e•T›UpAmou¡5


899 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

901 
ATTRID_SE_ORIGINATING_DEVICE_5
,

902 
ZCL_DATATYPE_ENUM8
,

903 
ACCESS_CONTROL_READ
,

904 (*)&
e•OrigDev5


908 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

910 
ATTRID_SE_FUEL_DEBT_REMAINING
,

911 
ZCL_DATATYPE_UINT48
,

912 
ACCESS_CONTROL_READ
,

913 (*)&
e•FuñDebtRem


917 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

919 
ATTRID_SE_FUEL_DEBT_RECOVERY_RATE
,

920 
ZCL_DATATYPE_UINT32
,

921 
ACCESS_CONTROL_READ
,

922 (*)&
e•FuñDebtRecR©e


926 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

928 
ATTRID_SE_FUEL_DEBT_RECOVERY_PERIOD
,

929 
ZCL_DATATYPE_ENUM8
,

930 
ACCESS_CONTROL_READ
,

931 (*)&
e•FuñDebtRecPîiod


935 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

937 
ATTRID_SE_NON_FUEL_DEBT_REMAINING
,

938 
ZCL_DATATYPE_UINT48
,

939 
ACCESS_CONTROL_READ
,

940 (*)&
e•N⁄FuñDebtRem


944 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

946 
ATTRID_SE_NON_FUEL_DEBT_RECOVERY_RATE
,

947 
ZCL_DATATYPE_UINT32
,

948 
ACCESS_CONTROL_READ
,

949 (*)&
e•N⁄FuñDebtRecR©e


953 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

955 
ATTRID_SE_NON_FUEL_DEBT_RECOVERY_PERIOD
,

956 
ZCL_DATATYPE_ENUM8
,

957 
ACCESS_CONTROL_READ
,

958 (*)&
e•N⁄FuñDebtRecPîiod


961 #i‚de‡
SE_UK_EXT


963 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

965 
ATTRID_SE_PROPOSED_CHANGE_PROVIDER_ID
,

966 
ZCL_DATATYPE_UINT32
,

967 
ACCESS_CONTROL_READ
,

968 (*)&
e•Pr›Ch™geProvidîId


972 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

974 
ATTRID_SE_PROPOSED_CHANGE_IMPLEMENTATION_TIME
,

975 
ZCL_DATATYPE_UTC
,

976 
ACCESS_CONTROL_READ
,

977 (*)&
e•Pr›Ch™geIm∂emTime


981 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

983 
ATTRID_SE_PROPOSED_CHANGE_SUPPLY_STATUS
,

984 
ZCL_DATATYPE_ENUM8
,

985 
ACCESS_CONTROL_READ
,

986 (*)&
e•Pr›Ch™geSuµlySètus


990 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

992 
ATTRID_SE_DELAYED_SUPPLY_INTERRUPT_VALUE_REMAINING
,

993 
ZCL_DATATYPE_UINT16
,

994 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

995 (*)&
e•DñayedSuµI¡VÆueRem


999 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

1001 
ATTRID_SE_DELAYED_SUPPLY_INTERRUPT_VALUE_TYPE
,

1002 
ZCL_DATATYPE_ENUM8
,

1003 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

1004 (*)&
e•DñayedSuµI¡VÆueTy≥


1013 
z˛O±i⁄Rec_t
 
	ge•O±i⁄s
[
ESP_MAX_OPTIONS
] =

1017 
ZCL_CLUSTER_ID_GEN_TIME
,

1018 –
AF_EN_SECURITY
 ),

1023 
ZCL_CLUSTER_ID_SE_PRICING
,

1024 –
AF_EN_SECURITY
 ),

1027 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

1028 –
AF_EN_SECURITY
 ),

1031 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

1032 –
AF_EN_SECURITY
 ),

1035 
ZCL_CLUSTER_ID_SE_MESSAGE
,

1036 –
AF_EN_SECURITY
 ),

1039 
ZCL_CLUSTER_ID_SE_SE_TUNNELING
,

1040 –
AF_EN_SECURITY
 ),

1043 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

1044 –
AF_EN_SECURITY
 ),

1053 
	#ESP_MAX_INCLUSTERS
 8

	)

1054 c⁄° 
cId_t
 
	ge•InClu°îLi°
[
ESP_MAX_INCLUSTERS
] =

1056 
ZCL_CLUSTER_ID_GEN_BASIC
,

1057 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

1058 
ZCL_CLUSTER_ID_GEN_TIME
,

1059 
ZCL_CLUSTER_ID_SE_PRICING
,

1060 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

1061 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

1062 
ZCL_CLUSTER_ID_SE_MESSAGE
,

1063 
ZCL_CLUSTER_ID_SE_PREPAYMENT


1066 
	#ESP_MAX_OUTCLUSTERS
 8

	)

1067 c⁄° 
cId_t
 
	ge•OutClu°îLi°
[
ESP_MAX_OUTCLUSTERS
] =

1069 
ZCL_CLUSTER_ID_GEN_BASIC
,

1070 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

1071 
ZCL_CLUSTER_ID_GEN_TIME
,

1072 
ZCL_CLUSTER_ID_SE_PRICING
,

1073 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

1074 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

1075 
ZCL_CLUSTER_ID_SE_MESSAGE
,

1076 
ZCL_CLUSTER_ID_SE_PREPAYMENT


1079 
Sim∂eDes¸ùti⁄F‹m©_t
 
	ge•Sim∂eDesc
 =

1081 
ESP_ENDPOINT
,

1082 
ZCL_SE_PROFILE_ID
,

1083 
ZCL_SE_DEVICEID_ESP
,

1084 
ESP_DEVICE_VERSION
,

1085 
ESP_FLAGS
,

1086 
ESP_MAX_INCLUSTERS
,

1087 (
cId_t
 *)
e•InClu°îLi°
,

1088 
ESP_MAX_OUTCLUSTERS
,

1089 (
cId_t
 *)
e•OutClu°îLi°


	@Projects/zstack/SE/SampleApp/Source/IPD/OSAL_ipd.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL_Tasks.h
"

48 #i‡
deföed
 ( 
MT_TASK
 )

49 
	~"MT_TASK.h
"

52 
	~"ZDAµ.h
"

53 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

57 
	~"≠s_‰ag.h
"

60 #i‡
deföed
 ( 
INTER_PAN
 )

61 
	~"°ub_≠s.h
"

64 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

65 
	~"z˛_key_e°ablish.h
"

68 
	~"ùd.h
"

75 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

76 
macEvítLo›
,

77 
nwk_evít_lo›
,

78 
HÆ_Pro˚ssEvít
,

79 #i‡
deföed
–
MT_TASK
 )

80 
MT_Pro˚ssEvít
,

82 
APS_evít_lo›
,

83 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

84 
APSF_Pro˚ssEvít
,

86 
ZDAµ_evít_lo›
,

87 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

88 
ZDNwkMgr_evít_lo›
,

90 #i‡
deföed
–
INTER_PAN
 )

91 
StubAPS_Pro˚ssEvít
,

93 
z˛_evít_lo›
,

94 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

95 
z˛KeyE°ablish_evít_lo›
,

97 
ùd_evít_lo›


100 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

101 
uöt16
 *
	gèsksEvíts
;

116 
	$oßlInôTasks
( )

118 
uöt8
 
èskID
 = 0;

120 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

121 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

123 
	`macTaskInô
–
èskID
++ );

124 
	`nwk_öô
–
èskID
++ );

125 
	`HÆ_Inô
–
èskID
++ );

126 #i‡
	`deföed
–
MT_TASK
 )

127 
	`MT_TaskInô
–
èskID
++ );

129 
	`APS_Inô
–
èskID
++ );

130 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

131 
	`APSF_Inô
–
èskID
++ );

133 
	`ZDAµ_Inô
–
èskID
++ );

134 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

135 
	`ZDNwkMgr_Inô
–
èskID
++ );

137 #i‡
	`deföed
–
INTER_PAN
 )

138 
	`StubAPS_Inô
–
èskID
++ );

140 
	`z˛_Inô
–
èskID
++ );

141 #i‡
	`deföed
 ( 
ZCL_KEY_ESTABLISH
 )

142 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

144 
	`ùd_Inô
–
èskID
 );

145 
	}
}

	@Projects/zstack/SE/SampleApp/Source/IPD/ipd.c

65 
	~"OSAL.h
"

66 
	~"OSAL_Clock.h
"

67 
	~"ZDAµ.h
"

68 
	~"ZDObje˘.h
"

69 
	~"AddrMgr.h
"

71 
	~"£.h
"

72 
	~"ùd.h
"

73 
	~"z˛_gíîÆ.h
"

74 
	~"z˛_£.h
"

75 
	~"z˛_key_e°ablish.h
"

77 #i‡
deföed
–
INTER_PAN
 )

78 
	~"°ub_≠s.h
"

81 
	~"⁄bﬂrd.h
"

84 
	~"hÆ_lcd.h
"

85 
	~"hÆ_Àd.h
"

86 
	~"hÆ_key.h
"

93 
	#z˛_M™d©‹yRï‹èbÀAâribuã
–
a
 ) (á =
NULL
 )

	)

99 
	#ùdNwkSèã
 
devSèã


	)

102 
	#IPD_FAST_POLL_UPDATE_PERIOD
 2

103 
	#IPD_FAST_POLL_DURATION
 5

104 

	)

121 
uöt8
 
	gùdTaskID
;

122 
uöt8
 
	gùdTønsID
;

123 
afAddrTy≥_t
 
	gESPAddr
;

124 #i‡
SECURE


125 
uöt8
 
	glökKeySètus
;

127 
uöt8
 
	g›ti⁄
;

129 #i‡
deföed
 (
INTER_PAN
)

130 
uöt8
 
	grxOnIdÀ
;

133 
ídPoötDesc_t
 
	gùdEp
 =

135 
IPD_ENDPOINT
,

136 &
ùdTaskID
,

137 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
ùdSim∂eDesc
,

138 (
afNëw‹kL©ícyReq_t
)0

145 
ùd_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

147 #i‡
SECURE


148 
uöt8
 
ùd_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 );

151 
ùd_Pro˚ssIdítifyTimeCh™ge
( );

158 
uöt8
 
ùd_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 );

161 
ùd_BasicRe£tCB
( );

162 
ùd_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

163 
ùd_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

164 
ùd_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 );

165 #ifde‡
SE_UK_EXT


166 
ùd_GëEvítLogCB
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
§cAddr
,

167 
z˛GëEvítLog_t
 *
pEvítLog
, 
uöt8
 
£qNum
 );

168 
ùd_PublishEvítLogCB
–
afAddrTy≥_t
 *
§cAddr
,

169 
z˛PublishEvítLog_t
 *
pEvítLog
 );

173 
ùd_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
pMsg
 );

176 
ùd_GëCuºítPri˚CB
–
z˛CCGëCuºítPri˚_t
 *
pCmd
,

177 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

178 
ùd_GëScheduÀdPri˚CB
–
z˛CCGëScheduÀdPri˚_t
 *
pCmd
,

179 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

180 
ùd_Pri˚AcknowÀdgemítCB
–
z˛CCPri˚AcknowÀdgemít_t
 *
pCmd
,

181 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

182 
ùd_GëBlockPîiodCB
–
z˛CCGëBlockPîiod_t
 *
pCmd
,

183 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

184 
ùd_PublishPri˚CB
–
z˛CCPublishPri˚_t
 *
pCmd
,

185 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

186 
ùd_PublishBlockPîiodCB
–
z˛CCPublishBlockPîiod_t
 *
pCmd
,

187 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

188 
ùd_Di•œyMesßgeCB
–
z˛CCDi•œyMesßge_t
 *
pCmd
,

189 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

190 
ùd_C™˚lMesßgeCB
–
z˛CCC™˚lMesßge_t
 *
pCmd
,

191 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

192 
ùd_GëLa°MesßgeCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

193 
ùd_MesßgeC⁄fúm©i⁄CB
–
z˛CCMesßgeC⁄fúm©i⁄_t
 *
pCmd
,

194 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

195 
ùd_ReqFa°PﬁlModeCmdCB
–
z˛CCReqFa°PﬁlModeCmd_t
 *
pCmd
,

196 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

197 
ùd_ReqFa°PﬁlModeR•CB
–
z˛CCReqFa°PﬁlModeR•_t
 *
pR•
,

198 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

199 
ùd_SñAvaûEmîgícyCªdôCmdCB
–
z˛CCSñAvaûEmîgícyCªdô_t
 *
pCmd
,

200 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

201 
ùd_Ch™geSuµlyCmdCB
–
z˛CCCh™geSuµly_t
 *
pCmd
,

202 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

203 
ùd_SuµlySètusR•CB
–
z˛CCSuµlySètusRe•⁄£_t
 *
pCmd
,

204 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

205 #i‡
deföed
 ( 
SE_UK_EXT
 )

206 
ùd_PublishT¨iffInf‹m©i⁄CB
–
z˛CCPublishT¨iffInf‹m©i⁄_t
 *
pCmd
,

207 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

208 
ùd_PublishPri˚M©rixCB
–
z˛CCPublishPri˚M©rix_t
 *
pCmd
,

209 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

210 
ùd_PublishBlockThªshﬁdsCB
–
z˛CCPublishBlockThªshﬁds_t
 *
pCmd
,

211 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

212 
ùd_PublishC⁄vîsi⁄Fa˘‹CB
–
z˛CCPublishC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

213 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

214 
ùd_PublishCÆ‹ificVÆueCB
–
z˛CCPublishCÆ‹ificVÆue_t
 *
pCmd
,

215 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

216 
ùd_PublishCO2VÆueCB
–
z˛CCPublishCO2VÆue_t
 *
pCmd
,

217 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

218 
ùd_PublishCPPEvítCB
–
z˛CCPublishCPPEvít_t
 *
pCmd
,

219 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

220 
ùd_PublishBûlögPîiodCB
–
z˛CCPublishBûlögPîiod_t
 *
pCmd
,

221 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

222 
ùd_PublishC⁄sﬁid©edBûlCB
–
z˛CCPublishC⁄sﬁid©edBûl_t
 *
pCmd
,

223 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

224 
ùd_PublishCªdôPaymítInfoCB
–
z˛CCPublishCªdôPaymítInfo_t
 *
pCmd
,

225 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

226 
ùd_GëPª∑yS«pshŸRe•⁄£CB
–
z˛CCGëPª∑yS«pshŸRe•⁄£_t
 *
pCmd
,

227 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

228 
ùd_Ch™gePaymítModeRe•⁄£CB
–
z˛CCCh™gePaymítModeRe•⁄£_t
 *
pCmd
,

229 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

230 
ùd_C⁄sumîT›upRe•⁄£CB
–
z˛CCC⁄sumîT›upRe•⁄£_t
 *
pCmd
,

231 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

232 
ùd_GëComm™dsCB
–
uöt8
 
¥ïayNŸifiˇti⁄Fœgs
,

233 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

234 
ùd_PublishT›upLogCB
–
z˛CCPublishT›upLog_t
 *
pCmd
,

235 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

236 
ùd_PublishDebtLogCB
–
z˛CCPublishDebtLog_t
 *
pCmd
,

237 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

244 
ùd_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
msg
 );

245 #i‡
deföed
 ( 
ZCL_READ
 )

246 
uöt8
 
ùd_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

248 #i‡
deföed
 ( 
ZCL_WRITE
 )

249 
uöt8
 
ùd_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

251 
uöt8
 
ùd_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

252 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

253 
uöt8
 
ùd_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

259 
z˛GíîÆ_AµCÆlbacks_t
 
	gùd_GíCmdCÆlbacks
 =

261 
ùd_BasicRe£tCB
,

262 
ùd_IdítifyCB
,

263 
ùd_IdítifyQuîyR•CB
,

264 
NULL
,

265 
NULL
,

266 
NULL
,

267 
NULL
,

268 
NULL
,

269 
NULL
,

270 
NULL
,

271 
NULL
,

272 
NULL
,

273 
ùd_AœrmCB
,

274 #ifde‡
SE_UK_EXT


275 
ùd_GëEvítLogCB
,

276 
ùd_PublishEvítLogCB
,

278 
NULL
,

279 
NULL


285 
z˛SE_AµCÆlbacks_t
 
	gùd_SECmdCÆlbacks
 =

287 
ùd_PublishPri˚CB
,

288 
ùd_PublishBlockPîiodCB
,

289 #i‡
deföed
 ( 
SE_UK_EXT
 )

290 
ùd_PublishT¨iffInf‹m©i⁄CB
,

291 
ùd_PublishPri˚M©rixCB
,

292 
ùd_PublishBlockThªshﬁdsCB
,

293 
ùd_PublishC⁄vîsi⁄Fa˘‹CB
,

294 
ùd_PublishCÆ‹ificVÆueCB
,

295 
ùd_PublishCO2VÆueCB
,

296 
ùd_PublishCPPEvítCB
,

297 
ùd_PublishBûlögPîiodCB
,

298 
ùd_PublishC⁄sﬁid©edBûlCB
,

299 
ùd_PublishCªdôPaymítInfoCB
,

301 
ùd_GëCuºítPri˚CB
,

302 
ùd_GëScheduÀdPri˚CB
,

303 
ùd_Pri˚AcknowÀdgemítCB
,

304 
ùd_GëBlockPîiodCB
,

305 #i‡
deföed
 ( 
SE_UK_EXT
 )

306 
NULL
,

307 
NULL
,

308 
NULL
,

309 
NULL
,

310 
NULL
,

311 
NULL
,

312 
NULL
,

313 
NULL
,

314 
NULL
,

316 
NULL
,

317 
NULL
,

318 
NULL
,

319 
NULL
,

320 
NULL
,

321 
NULL
,

322 
NULL
,

323 
NULL
,

324 
ùd_ReqFa°PﬁlModeR•CB
,

325 #i‡
deföed
 ( 
SE_UK_EXT
 )

326 
NULL
,

328 
NULL
,

329 
NULL
,

330 
NULL
,

331 
ùd_ReqFa°PﬁlModeCmdCB
,

332 #i‡
deföed
 ( 
SE_UK_EXT
 )

333 
NULL
,

334 
NULL
,

335 
NULL
,

337 
ùd_Di•œyMesßgeCB
,

338 
ùd_C™˚lMesßgeCB
,

339 
ùd_GëLa°MesßgeCB
,

340 
ùd_MesßgeC⁄fúm©i⁄CB
,

341 
NULL
,

342 
NULL
,

343 
NULL
,

344 
NULL
,

345 
NULL
,

346 #i‡
deföed
 ( 
SE_UK_EXT
 )

347 
NULL
,

348 
NULL
,

350 
NULL
,

351 
NULL
,

352 #i‡
deföed
 ( 
SE_UK_EXT
 )

353 
NULL
,

355 
ùd_SuµlySètusR•CB
,

356 #i‡
deföed
 ( 
SE_UK_EXT
 )

357 
ùd_GëPª∑yS«pshŸRe•⁄£CB
,

358 
ùd_Ch™gePaymítModeRe•⁄£CB
,

359 
ùd_C⁄sumîT›upRe•⁄£CB
,

360 
ùd_GëComm™dsCB
,

361 
ùd_PublishT›upLogCB
,

362 
ùd_PublishDebtLogCB
,

364 
ùd_SñAvaûEmîgícyCªdôCmdCB
,

365 
ùd_Ch™geSuµlyCmdCB
,

366 #i‡
deföed
 ( 
SE_UK_EXT
 )

367 
NULL
,

368 
NULL
,

369 
NULL
,

370 
NULL
,

371 
NULL
,

372 
NULL
,

373 
NULL
,

374 
NULL
,

375 
NULL
,

376 
NULL
,

377 
NULL
,

378 
NULL
,

379 
NULL
,

380 
NULL
,

381 
NULL
,

382 
NULL
,

383 
NULL
,

384 
NULL
,

385 
NULL
,

386 
NULL
,

387 
NULL
,

388 
NULL
,

389 
NULL
,

390 
NULL
,

391 
NULL
,

392 
NULL
,

393 
NULL
,

394 
NULL
,

395 
NULL
,

408 
	$ùd_Inô
–
uöt8
 
èsk_id
 )

410 
ùdTaskID
 = 
èsk_id
;

411 
ùdTønsID
 = 0;

418 
ESPAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

419 
ESPAddr
.
ídPoöt
 = 
IPD_ENDPOINT
;

420 
ESPAddr
.
addr
.
sh‹tAddr
 = 0;

423 
	`z˛SE_Inô
–&
ùdSim∂eDesc
 );

426 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
IPD_ENDPOINT
, &
ùd_GíCmdCÆlbacks
 );

429 
	`z˛SE_Regi°îCmdCÆlbacks
–
IPD_ENDPOINT
, &
ùd_SECmdCÆlbacks
 );

432 
	`z˛_ªgi°îAârLi°
–
IPD_ENDPOINT
, 
IPD_MAX_ATTRIBUTES
, 
ùdAârs
 );

435 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
IPD_ENDPOINT
, 
IPD_MAX_OPTIONS
, 
ùdO±i⁄s
 );

438 
	`z˛_ªgi°îVÆid©eAârD©a
–
ùd_VÆid©eAârD©aCB
 );

441 
	`z˛_ªgi°îF‹Msg
–
ùdTaskID
 );

444 
	`Regi°îF‹Keys
–
ùdTaskID
 );

447 
	`ZDO_Regi°îF‹ZDOMsg
(
èsk_id
, 
M©ch_Desc_r•
);

449 #i‡
	`deföed
 ( 
INTER_PAN
 )

451 
	`StubAPS_Regi°îAµ
–&
ùdEp
 );

455 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_UPDATE_TIME_EVT
, 
IPD_UPDATE_TIME_PERIOD
 );

456 
	}
}

468 
uöt16
 
	$ùd_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

470 
afIncomögMSGPackë_t
 *
MSGpkt
;

472 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

474  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
ùdTaskID
 )) )

476  
MSGpkt
->
hdr
.
evít
 )

478 
ZDO_CB_MSG
:

479 
	`ùd_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

482 
ZCL_INCOMING_MSG
:

484 
	`ùd_Pro˚ssZCLMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

487 
KEY_CHANGE
:

488 
	`ùd_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

491 
ZDO_STATE_CHANGE
:

492 i‡(
DEV_END_DEVICE
 =(
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
))

494 #i‡
SECURE


497 
lökKeySètus
 = 
	`ùd_KeyE°ablish_Rëu∫LökKey
(
ESPAddr
.
addr
.
sh‹tAddr
);

499 i‡(
lökKeySètus
 !
ZSuc˚ss
)

501 
cId_t
 
cbkeClu°î
 = 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
;

502 
zAddrTy≥_t
 
d°Addr
;

505 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

506 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

507 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
, 
ZCL_SE_PROFILE_ID
,

508 1, &
cbkeClu°î
, 0, 
NULL
, 
FALSE
 );

512 #i‡!
	`deföed
 ( 
ZCL_PREPAYMENT
 ) && !deföed ( 
FAST_POLL_TEST
 )

514 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_GET_PRICING_INFO_EVT
, 
IPD_GET_PRICING_INFO_PERIOD
 );

520 #i‡!
	`deföed
 ( 
ZCL_PREPAYMENT
 ) && !deföed ( 
FAST_POLL_TEST
 )

521 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_GET_PRICING_INFO_EVT
, 
IPD_GET_PRICING_INFO_PERIOD
 );

526 
	`NLME_SëPﬁlR©e
 ( 
SE_DEVICE_POLL_RATE
 );

530 #i‡
	`deföed
–
ZCL_KEY_ESTABLISH
 )

531 
ZCL_KEY_ESTABLISH_IND
:

532 i‡((
MSGpkt
->
hdr
.
°©us
Ë=
TîmKeySètus_Suc˚ss
)

534 
ESPAddr
.
ídPoöt
 = 
IPD_ENDPOINT
;

536 #i‡!
	`deföed
 ( 
ZCL_PREPAYMENT
 ) && !deföed ( 
FAST_POLL_TEST
 )

537 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_GET_PRICING_INFO_EVT
, 
IPD_GET_PRICING_INFO_PERIOD
 );

549 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

554  (
evíts
 ^ 
SYS_EVENT_MSG
);

558 i‡–
evíts
 & 
IPD_KEY_ESTABLISHMENT_REQUEST_EVT
 )

560 
	`z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
ùdTaskID
, &
ESPAddr
, 
ùdTønsID
);

562  ( 
evíts
 ^ 
IPD_KEY_ESTABLISHMENT_REQUEST_EVT
 );

566 i‡–
evíts
 & 
IPD_GET_PRICING_INFO_EVT
 )

568 #i‡
	`deföed
–
INTER_PAN
 )

569 
uöt8
 
x
 = 
TRUE
;

570 
	`ZMacGëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

571 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
x
 );

573 
	`z˛SE_Pricög_Síd_GëCuºítPri˚
–
IPD_ENDPOINT
, &
ESPAddr
, 
›ti⁄
, 
TRUE
, 0 );

575 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_GET_PRICING_INFO_EVT
, 
IPD_GET_PRICING_INFO_PERIOD
 );

577  ( 
evíts
 ^ 
IPD_GET_PRICING_INFO_EVT
 );

581 i‡–
evíts
 & 
IPD_IDENTIFY_TIMEOUT_EVT
 )

583 i‡–
ùdIdítifyTime
 > 0 )

585 
ùdIdítifyTime
--;

587 
	`ùd_Pro˚ssIdítifyTimeCh™ge
();

589  ( 
evíts
 ^ 
IPD_IDENTIFY_TIMEOUT_EVT
 );

593 i‡–
evíts
 & 
IPD_UPDATE_TIME_EVT
 )

595 
ùdTime
 = 
	`oßl_gëClock
();

596 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_UPDATE_TIME_EVT
, 
IPD_UPDATE_TIME_PERIOD
 );

598  ( 
evíts
 ^ 
IPD_UPDATE_TIME_EVT
 );

603 
	}
}

614 
	$ùd_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
pMsg
 )

617 i‡((
pMsg
->
˛u°îID
 =
M©ch_Desc_r•
) &&

618 (
pMsg
->
§cAddr
.
addr
.
sh‹tAddr
 =
zgTru°CíãrAddr
))

620 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
pMsg
 );

622 i‡(
pR•
)

624 i‡(
pR•
->
˙t
)

627 
ESPAddr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

628 
ESPAddr
.
addr
.
sh‹tAddr
 = 
pMsg
->
§cAddr
.addr.shortAddr;

631 
	`oßl_£t_evít
–
ùdTaskID
, 
IPD_KEY_ESTABLISHMENT_REQUEST_EVT
);

633 
	`oßl_mem_‰ì
(
pR•
);

636 
	}
}

647 
	$ùd_Pro˚ssIdítifyTimeCh™ge
( )

649 i‡–
ùdIdítifyTime
 > 0 )

651 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_IDENTIFY_TIMEOUT_EVT
, 1000 );

652 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

656 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

657 
	`oßl_°›_timîEx
–
ùdTaskID
, 
IPD_IDENTIFY_TIMEOUT_EVT
 );

659 
	}
}

661 #i‡
SECURE


671 
uöt8
 
	$ùd_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 )

673 
uöt8
 
°©us
 = 
ZFaûuª
;

674 
AddrMgrE¡ry_t
 
íåy
;

678 
íåy
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

679 
íåy
.
nwkAddr
 = 
sh‹tAddr
;

681 i‡–
	`AddrMgrE¡ryLookupNwk
–&
íåy
 ) )

684 i‡–
	`APSME_IsLökKeyVÆid
–
íåy
.
extAddr
 ) =
TRUE
 )

686 
°©us
 = 
ZSuc˚ss
;

692 
°©us
 = 
ZInvÆidP¨amëî
;

695  
°©us
;

696 
	}
}

713 
	$ùd_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

716 i‡–
shi·
 )

718 i‡–
keys
 & 
HAL_KEY_SW_1
 )

721 i‡–
keys
 & 
HAL_KEY_SW_2
 )

724 i‡–
keys
 & 
HAL_KEY_SW_3
 )

727 i‡–
keys
 & 
HAL_KEY_SW_4
 )

733 i‡–
keys
 & 
HAL_KEY_SW_1
 )

735 
	`ZDOInôDevi˚
(0);

738 i‡–
keys
 & 
HAL_KEY_SW_2
 )

740 #i‡
	`deföed
–
INTER_PAN
 )

742 
uöt8
 
x
 = 
TRUE
;

743 
	`ZMacGëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

744 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
x
 );

745 
afAddrTy≥_t
 
d°Addr
;

746 
uöt8
 
›ti⁄
 = 1;

755 
d°Addr
.
addrMode
 = 
afAddrBrﬂdˇ°
;

756 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR_DEVALL
;

757 
d°Addr
.
ídPoöt
 = 
STUBAPS_INTER_PAN_EP
;

758 
d°Addr
.
∑nId
 = 0xFFFF;

760 
	`z˛SE_Pricög_Síd_GëCuºítPri˚
–
IPD_ENDPOINT
, &
d°Addr
, 
›ti⁄
, 
TRUE
, 0 );

764 i‡–
keys
 & 
HAL_KEY_SW_3
 )

766 #i‡
	`deföed
 ( 
ZCL_PREPAYMENT
 )

767 
z˛CCSñAvaûEmîgícyCªdô_t
 
cmd
;

768 
uöt8
 
sôeIdLí
 = 4;

769 
uöt8
 
mëîSîülNumLí
 = 6;

771 
	`oßl_mem£t
–&
cmd
, 0, –
z˛CCSñAvaûEmîgícyCªdô_t
 ) );

773 
cmd
.
comm™dD©eTime
 = 
	`oßl_gëClock
();

774 
cmd
.
‹igö©ögDevi˚
 = 
SE_ORIG_DEV_INPREMISES_DISPLAY_DEV
;

776 
cmd
.
sôeId
.
pSå
 = (
uöt8
 *)
	`oßl_mem_Æloc
(
sôeIdLí
);

777 i‡(
cmd
.
sôeId
.
pSå
 !
NULL
)

779 
cmd
.
sôeId
.
°rLí
 = 
sôeIdLí
;

780 
	`oßl_mem˝y
(
cmd
.
sôeId
.
pSå
, "TEST", 
sôeIdLí
);

783 
cmd
.
mëîSîülNumbî
.
pSå
 = (
uöt8
 *)
	`oßl_mem_Æloc
(
mëîSîülNumLí
);

784 i‡(
cmd
.
mëîSîülNumbî
.
pSå
 !
NULL
)

786 
cmd
.
mëîSîülNumbî
.
°rLí
 = 
mëîSîülNumLí
;

787 
	`oßl_mem˝y
(
cmd
.
mëîSîülNumbî
.
pSå
, "123456", 
mëîSîülNumLí
);

790 
	`z˛SE_Pª∑ymít_Síd_SñAvaûEmîgícyCªdô
(
IPD_ENDPOINT
,

791 &
ESPAddr
,

792 &
cmd
, 
FALSE
, 1 );

793 i‡(
cmd
.
sôeId
.
pSå
 !
NULL
)

795 
	`oßl_mem_‰ì
(
cmd
.
sôeId
.
pSå
);

798 i‡(
cmd
.
mëîSîülNumbî
.
pSå
 !
NULL
)

800 
	`oßl_mem_‰ì
(
cmd
.
mëîSîülNumbî
.
pSå
);

805 #i‡ 
	`deföed
 ( 
FAST_POLL_TEST
 )

806 
z˛CCReqFa°PﬁlModeCmd_t
 
Á°PﬁlCmd
;

808 
Á°PﬁlCmd
.
Á°PﬁlUpd©ePîiod
 = 
IPD_FAST_POLL_UPDATE_PERIOD
;

809 
Á°PﬁlCmd
.
duøti⁄
 = 
IPD_FAST_POLL_DURATION
;

812 
	`z˛SE_Sim∂eMëîög_Síd_ReqFa°PﬁlModeCmd
–
IPD_ENDPOINT
, &
ESPAddr
,

813 &
Á°PﬁlCmd
,

814 
TRUE
, 1);

820 i‡–
keys
 & 
HAL_KEY_SW_4
 )

822 #i‡
	`deföed
 ( 
ZCL_PREPAYMENT
 )

823 #i‡!
	`deföed
 ( 
SE_UK_EXT
 )

824 
z˛CCCh™geSuµly_t
 
ch™geCmd
;

825 
uöt8
 
sôeIdLí
 = 4;

826 
uöt8
 
mëîSîülNumLí
 = 6;

828 
ch™geCmd
.
¥ovidîId
 = 0xbabeface;

829 
ch™geCmd
.
ªque°D©eTime
 = 
	`oßl_gëClock
();

831 
ch™geCmd
.
sôeId
.
pSå
 = (
uöt8
 *)
	`oßl_mem_Æloc
(
sôeIdLí
);

832 i‡(
ch™geCmd
.
sôeId
.
pSå
 !
NULL
)

834 
ch™geCmd
.
sôeId
.
°rLí
 = 
sôeIdLí
;

835 
	`oßl_mem˝y
(
ch™geCmd
.
sôeId
.
pSå
, "TEST", 
sôeIdLí
);

838 
ch™geCmd
.
mëîSîülNumbî
.
pSå
 = (
uöt8
 *)
	`oßl_mem_Æloc
(
mëîSîülNumLí
);

839 i‡(
ch™geCmd
.
mëîSîülNumbî
.
pSå
 !
NULL
)

841 
ch™geCmd
.
mëîSîülNumbî
.
°rLí
 = 
mëîSîülNumLí
;

842 
	`oßl_mem˝y
(
ch™geCmd
.
mëîSîülNumbî
.
pSå
, "123456", 
mëîSîülNumLí
);

845 
ch™geCmd
.
im∂emíèti⁄D©eTime
 = 0x00000000;

846 
ch™geCmd
.
¥›o£dSuµlySètus
 = 
SE_SUPPLY_ON
;

847 
ch™geCmd
.
‹igIdSuµlyC⁄åﬁBôs
 = ((
SE_ORIG_DEV_INPREMISES_DISPLAY_DEV
 << 4Ë| 
SE_SUPPLY_CTRL_ACK_REQUIRED
);

849 
	`z˛SE_Pª∑ymít_Síd_Ch™geSuµly
–
IPD_ENDPOINT
, &
ESPAddr
,

850 &
ch™geCmd
, 
TRUE
, 1);

852 i‡(
ch™geCmd
.
sôeId
.
pSå
 !
NULL
)

854 
	`oßl_mem_‰ì
(
ch™geCmd
.
sôeId
.
pSå
);

857 i‡(
ch™geCmd
.
mëîSîülNumbî
.
pSå
 !
NULL
)

859 
	`oßl_mem_‰ì
(
ch™geCmd
.
mëîSîülNumbî
.
pSå
);

865 
	}
}

878 
uöt8
 
	$ùd_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 )

880 
uöt8
 
vÆid
 = 
TRUE
;

882  
pAârInfo
->
d©aTy≥
 )

884 
ZCL_DATATYPE_BOOLEAN
:

885 i‡––*(
pAârInfo
->
©åD©a
) != 0 ) && ( *(pAttrInfo->attrData) != 1 ) )

886 
vÆid
 = 
FALSE
;

893  ( 
vÆid
 );

894 
	}
}

906 
	$ùd_BasicRe£tCB
( )

909 
	}
}

921 
	$ùd_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

923 
ùdIdítifyTime
 = 
pCmd
->
idítifyTime
;

924 
	`ùd_Pro˚ssIdítifyTimeCh™ge
();

925 
	}
}

937 
	$ùd_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

940 
	}
}

953 
	$ùd_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 )

956 
	}
}

958 #ifde‡
SE_UK_EXT


973 
	$ùd_GëEvítLogCB
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
§cAddr
,

974 
z˛GëEvítLog_t
 *
pEvítLog
, 
uöt8
 
£qNum
 )

983 
	}
}

997 
	$ùd_PublishEvítLogCB
–
afAddrTy≥_t
 *
§cAddr
, 
z˛PublishEvítLog_t
 *
pEvítLog
 )

1000 
	}
}

1016 
	$ùd_GëCuºítPri˚CB
–
z˛CCGëCuºítPri˚_t
 *
pCmd
,

1017 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1019 #i‡
	`deföed
 ( 
ZCL_PRICING
 )

1022 
z˛CCPublishPri˚_t
 
cmd
;

1024 
	`oßl_mem£t
–&
cmd
, 0, –
z˛CCPublishPri˚_t
 ) );

1026 
cmd
.
¥ovidîId
 = 0xbabeface;

1027 
cmd
.
numbîOfPri˚Tõrs
 = 0xfe;

1029 
	`z˛SE_Pricög_Síd_PublishPri˚
–
IPD_ENDPOINT
, 
§cAddr
, &
cmd
, 
FALSE
, 
£qNum
 );

1031 
	}
}

1046 
	$ùd_GëScheduÀdPri˚CB
–
z˛CCGëScheduÀdPri˚_t
 *
pCmd
,

1047 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1053 #i‡
	`deföed
 ( 
ZCL_PRICING
 )

1054 
z˛CCPublishPri˚_t
 
cmd
;

1056 
	`oßl_mem£t
–&
cmd
, 0, –
z˛CCPublishPri˚_t
 ) );

1058 
cmd
.
¥ovidîId
 = 0xbabeface;

1059 
cmd
.
numbîOfPri˚Tõrs
 = 0xfe;

1061 
	`z˛SE_Pricög_Síd_PublishPri˚
–
IPD_ENDPOINT
, 
§cAddr
, &
cmd
, 
FALSE
, 
£qNum
 );

1064 
	}
}

1078 
	$ùd_Pri˚AcknowÀdgemítCB
–
z˛CCPri˚AcknowÀdgemít_t
 *
pCmd
,

1079 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1082 
	}
}

1096 
	$ùd_GëBlockPîiodCB
–
z˛CCGëBlockPîiod_t
 *
pCmd
,

1097 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1100 
	}
}

1114 
	$ùd_PublishPri˚CB
–
z˛CCPublishPri˚_t
 *
pCmd
,

1115 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1117 #i‡
	`deföed
 ( 
ZCL_PRICING
 )

1118 i‡–
pCmd
 )

1121 
	`HÆLcdWrôeSåög
("Providî ID", 
HAL_LCD_LINE_1
);

1122 
	`HÆLcdWrôeVÆue
–
pCmd
->
¥ovidîId
, 10, 
HAL_LCD_LINE_2
 );

1126 i‡((
pCmd
->
¥i˚C⁄åﬁ
 !
SE_OPTIONAL_FIELD_UINT8
) &&

1127 (
pCmd
->
¥i˚C⁄åﬁ
 & 
SE_PROFILE_PRICEACK_REQUIRED_MASK
))

1129 
z˛CCPri˚AcknowÀdgemít_t
 
cmd
;

1131 
cmd
.
¥ovidîId
 = 
pCmd
->providerId;

1132 
cmd
.
issuîEvítId
 = 
pCmd
->issuerEventId;

1133 
cmd
.
¥i˚AckTime
 = 
	`oßl_gëClock
();

1134 
cmd
.
c⁄åﬁ
 = 
pCmd
->
¥i˚C⁄åﬁ
;

1136 
	`z˛SE_Pricög_Síd_Pri˚AcknowÀdgemít
–
IPD_ENDPOINT
, 
§cAddr
,

1137 &
cmd
, 
TRUE
, 
£qNum
 );

1140 #i‡
	`deföed
 ( 
INTER_PAN
 )

1141 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

1145 
	}
}

1159 
	$ùd_PublishBlockPîiodCB
–
z˛CCPublishBlockPîiod_t
 *
pCmd
,

1160 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1163 
	}
}

1178 
	$ùd_Di•œyMesßgeCB
–
z˛CCDi•œyMesßge_t
 *
pCmd
,

1179 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1192 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

1194 i‡(
pCmd
->
msgSåög
.
°rLí
 <
HAL_LCD_MAX_CHARS
+1)

1196 
	`HÆLcdWrôeSåög
((*)
pCmd
->
msgSåög
.
pSå
, 
HAL_LCD_LINE_3
);

1201 c⁄° 
uöt8
 
À·
 = 
HAL_LCD_MAX_CHARS
 - 4 - 4;

1202 
uöt8
 
buf
[
HAL_LCD_MAX_CHARS
];

1204 ()
	`oßl_mem˝y
(
buf
, 
pCmd
->
msgSåög
.
pSå
, 
À·
);

1205 ()
	`oßl_mem˝y
(
buf
+
À·
, "...+\0", 5);

1206 
	`HÆLcdWrôeSåögVÆue
((*)
buf
, 
pCmd
->
msgSåög
.
°rLí
-
À·
, 10, 
HAL_LCD_LINE_3
);

1209 
	}
}

1224 
	$ùd_C™˚lMesßgeCB
–
z˛CCC™˚lMesßge_t
 *
pCmd
,

1225 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1228 
	}
}

1243 
	$ùd_GëLa°MesßgeCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1248 #i‡
	`deföed
 ( 
ZCL_MESSAGE
 )

1249 
z˛CCDi•œyMesßge_t
 
cmd
;

1250 
uöt8
 
msg
[10] = { 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29 };

1253 
cmd
.
mesßgeId
 = 0xaabbccdd;

1254 
cmd
.
mesßgeCål
.
å™smissi⁄Mode
 = 0;

1255 
cmd
.
mesßgeCål
.
imp‹èn˚
 = 1;

1256 
cmd
.
mesßgeCål
.
c⁄fúm©i⁄Requúed
 = 1;

1257 
cmd
.
duøti⁄InMöuãs
 = 60;

1259 
cmd
.
msgSåög
.
°rLí
 = 10;

1260 
cmd
.
msgSåög
.
pSå
 = 
msg
;

1262 
	`z˛SE_Mesßge_Síd_Di•œyMesßge
–
IPD_ENDPOINT
, 
§cAddr
, &
cmd
,

1263 
FALSE
, 
£qNum
 );

1265 
	}
}

1280 
	$ùd_MesßgeC⁄fúm©i⁄CB
–
z˛CCMesßgeC⁄fúm©i⁄_t
 *
pCmd
,

1281 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1284 
	}
}

1298 
	$ùd_ReqFa°PﬁlModeCmdCB
–
z˛CCReqFa°PﬁlModeCmd_t
 *
pCmd
,

1299 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1302 
	}
}

1317 
	$ùd_ReqFa°PﬁlModeR•CB
–
z˛CCReqFa°PﬁlModeR•_t
 *
pR•
,

1318 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1320 #i‡
	`deföed
 ( 
ZCL_SIMPLE_METERING
 )

1321 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

1323 
	`HÆLcdWrôeSåög
("Fa° Pﬁlög", 
HAL_LCD_LINE_1
 );

1324 
	`HÆLcdWrôeSåögVÆue
("Aµ: ", 
pR•
->
≠∂õdUpd©ePîiod
, 10, 
HAL_LCD_LINE_2
 );

1325 
	`HÆLcdWrôeSåögVÆue
("End 0x", 
pR•
->
Á°PﬁlModeEndTime
, 16, 
HAL_LCD_LINE_3
 );

1329 
	}
}

1344 
	$ùd_SñAvaûEmîgícyCªdôCmdCB
–
z˛CCSñAvaûEmîgícyCªdô_t
 *
pCmd
,

1345 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1348 
	}
}

1362 
	$ùd_Ch™geSuµlyCmdCB
–
z˛CCCh™geSuµly_t
 *
pCmd
,

1363 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1366 
	}
}

1380 
	$ùd_SuµlySètusR•CB
–
z˛CCSuµlySètusRe•⁄£_t
 *
pCmd
,

1381 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1383 #i‡
	`deföed
 ( 
ZCL_PREPAYMENT
 )

1384 #i‡! 
	`deföed
 ( 
SE_UK_EXT
 )

1385 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

1386 i‡–
pCmd
 )

1389 
	`HÆLcdWrôeSåög
("SuµlySètusR•", 
HAL_LCD_LINE_1
 );

1390 
	`HÆLcdWrôeVÆue
–
pCmd
->
¥ovidîId
, 10, 
HAL_LCD_LINE_2
 );

1391 
	`HÆLcdWrôeSåögVÆue
("Sètu†0x", 
pCmd
->
suµlySètus
, 16, 
HAL_LCD_LINE_3
 );

1396 
	}
}

1398 #i‡
deföed
 ( 
SE_UK_EXT
 )

1411 
	$ùd_PublishT¨iffInf‹m©i⁄CB
–
z˛CCPublishT¨iffInf‹m©i⁄_t
 *
pCmd
,

1412 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1415 
	}
}

1429 
	$ùd_PublishPri˚M©rixCB
–
z˛CCPublishPri˚M©rix_t
 *
pCmd
,

1430 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1433 
	}
}

1447 
	$ùd_PublishBlockThªshﬁdsCB
–
z˛CCPublishBlockThªshﬁds_t
 *
pCmd
,

1448 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1451 
	}
}

1465 
	$ùd_PublishC⁄vîsi⁄Fa˘‹CB
–
z˛CCPublishC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

1466 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1469 
	}
}

1483 
	$ùd_PublishCÆ‹ificVÆueCB
–
z˛CCPublishCÆ‹ificVÆue_t
 *
pCmd
,

1484 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1487 
	}
}

1501 
	$ùd_PublishCO2VÆueCB
–
z˛CCPublishCO2VÆue_t
 *
pCmd
,

1502 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1505 
	}
}

1519 
	$ùd_PublishCPPEvítCB
–
z˛CCPublishCPPEvít_t
 *
pCmd
,

1520 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1523 
	}
}

1537 
	$ùd_PublishBûlögPîiodCB
–
z˛CCPublishBûlögPîiod_t
 *
pCmd
,

1538 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1541 
	}
}

1555 
	$ùd_PublishC⁄sﬁid©edBûlCB
–
z˛CCPublishC⁄sﬁid©edBûl_t
 *
pCmd
,

1556 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1559 
	}
}

1573 
	$ùd_PublishCªdôPaymítInfoCB
–
z˛CCPublishCªdôPaymítInfo_t
 *
pCmd
,

1574 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1577 
	}
}

1591 
	$ùd_GëPª∑yS«pshŸRe•⁄£CB
–
z˛CCGëPª∑yS«pshŸRe•⁄£_t
 *
pCmd
,

1592 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1595 
	}
}

1609 
	$ùd_Ch™gePaymítModeRe•⁄£CB
–
z˛CCCh™gePaymítModeRe•⁄£_t
 *
pCmd
,

1610 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1613 
	}
}

1627 
	$ùd_C⁄sumîT›upRe•⁄£CB
–
z˛CCC⁄sumîT›upRe•⁄£_t
 *
pCmd
,

1628 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1631 
	}
}

1645 
	$ùd_GëComm™dsCB
–
uöt8
 
¥ïayNŸifiˇti⁄Fœgs
,

1646 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1649 
	}
}

1663 
	$ùd_PublishT›upLogCB
–
z˛CCPublishT›upLog_t
 *
pCmd
,

1664 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1667 
	}
}

1681 
	$ùd_PublishDebtLogCB
–
z˛CCPublishDebtLog_t
 *
pCmd
,

1682 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1685 
	}
}

1703 
	$ùd_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

1705  
pInMsg
->
z˛Hdr
.
comm™dID
 )

1707 #i‡
	`deföed
 ( 
ZCL_READ
 )

1708 
ZCL_CMD_READ_RSP
:

1709 
	`ùd_Pro˚ssInRódR•Cmd
–
pInMsg
 );

1712 #i‡
	`deföed
 ( 
ZCL_WRITE
 )

1713 
ZCL_CMD_WRITE_RSP
:

1714 
	`ùd_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

1717 
ZCL_CMD_DEFAULT_RSP
:

1718 
	`ùd_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

1720 #i‡
	`deföed
 ( 
ZCL_DISCOVER
 )

1721 
ZCL_CMD_DISCOVER_RSP
:

1722 
	`ùd_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

1729 i‡–
pInMsg
->
©åCmd
 !
NULL
 )

1732 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

1733 
pInMsg
->
©åCmd
 = 
NULL
;

1735 
	}
}

1737 #i‡
deföed
 ( 
ZCL_READ
 )

1747 
uöt8
 
	$ùd_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1749 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

1750 
uöt8
 
i
;

1752 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1753 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

1760  
TRUE
;

1761 
	}
}

1764 #i‡
deföed
 ( 
ZCL_WRITE
 )

1774 
uöt8
 
	$ùd_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1776 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

1777 
uöt8
 
i
;

1779 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1780 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

1786  
TRUE
;

1787 
	}
}

1799 
uöt8
 
	$ùd_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1805  
TRUE
;

1806 
	}
}

1808 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

1818 
uöt8
 
	$ùd_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1820 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

1821 
uöt8
 
i
;

1823 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1824  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

1829  
TRUE
;

1830 
	}
}

	@Projects/zstack/SE/SampleApp/Source/IPD/ipd.h

40 #i‚de‡
IPD_H


41 
	#IPD_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#IPD_ENDPOINT
 0x09

	)

58 
	#IPD_MAX_ATTRIBUTES
 13

	)

60 
	#IPD_MAX_OPTIONS
 5

	)

62 
	#IPD_UPDATE_TIME_PERIOD
 1000

63 
	#IPD_GET_PRICING_INFO_PERIOD
 5000

64 
	#SE_DEVICE_POLL_RATE
 8000

65 

	)

67 
	#IPD_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

68 
	#IPD_UPDATE_TIME_EVT
 0x0002

	)

69 
	#IPD_KEY_ESTABLISHMENT_REQUEST_EVT
 0x0004

	)

70 
	#IPD_GET_PRICING_INFO_EVT
 0x0008

	)

85 
Sim∂eDes¸ùti⁄F‹m©_t
 
ùdSim∂eDesc
;

86 
CONST
 
z˛AârRec_t
 
ùdAârs
[];

87 
z˛O±i⁄Rec_t
 
ùdO±i⁄s
[];

88 
uöt8
 
ùdDevi˚E«bÀd
;

89 
uöt16
 
ùdTønsôi⁄Time
;

90 
uöt16
 
ùdIdítifyTime
;

91 
uöt32
 
ùdTime
;

99 
ùd_Inô
–
uöt8
 
èsk_id
 );

104 
uöt16
 
ùd_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

110 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/IPD/ipd_data.c

45 
	~"OSAL.h
"

46 
	~"ZDC⁄fig.h
"

48 
	~"£.h
"

49 
	~"ùd.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_key_e°ablish.h
"

56 
	#IPD_DEVICE_VERSION
 0

	)

57 
	#IPD_FLAGS
 0

	)

59 
	#IPD_HWVERSION
 1

	)

60 
	#IPD_ZCLVERSION
 1

	)

74 c⁄° 
uöt8
 
	gùdZCLVîsi⁄
 = 
IPD_ZCLVERSION
;

75 c⁄° 
uöt8
 
	gùdHWVîsi⁄
 = 
IPD_HWVERSION
;

76 c⁄° 
uöt8
 
	gùdM™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

77 c⁄° 
uöt8
 
	gùdModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

78 c⁄° 
uöt8
 
	gùdD©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

79 c⁄° 
uöt8
 
	gùdPowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

81 
uöt8
 
	gùdLoˇti⁄Des¸ùti⁄
[] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

82 
uöt8
 
	gùdPhysiˇlEnvú⁄mít
 = 
PHY_UNSPECIFIED_ENV
;

83 
uöt8
 
	gùdDevi˚E«bÀd
 = 
DEVICE_ENABLED
;

86 
uöt16
 
	gùdIdítifyTime
 = 0;

87 
uöt32
 
	gùdTime
 = 0;

88 
uöt8
 
	gùdTimeSètus
 = 0x01;

91 
uöt16
 
	gùdKeyE°ablishmítSuôe
 = 
CERTIFICATE_BASED_KEY_ESTABLISHMENT
;

96 
CONST
 
z˛AârRec_t
 
	gùdAârs
[
IPD_MAX_ATTRIBUTES
] =

101 
ZCL_CLUSTER_ID_GEN_BASIC
,

103 
ATTRID_BASIC_ZCL_VERSION
,

104 
ZCL_DATATYPE_UINT8
,

105 
ACCESS_CONTROL_READ
,

106 (*)&
ùdZCLVîsi⁄


110 
ZCL_CLUSTER_ID_GEN_BASIC
,

112 
ATTRID_BASIC_HW_VERSION
,

113 
ZCL_DATATYPE_UINT8
,

114 
ACCESS_CONTROL_READ
,

115 (*)&
ùdHWVîsi⁄


119 
ZCL_CLUSTER_ID_GEN_BASIC
,

121 
ATTRID_BASIC_MANUFACTURER_NAME
,

122 
ZCL_DATATYPE_CHAR_STR
,

123 
ACCESS_CONTROL_READ
,

124 (*)
ùdM™uÁ˘uªrName


128 
ZCL_CLUSTER_ID_GEN_BASIC
,

130 
ATTRID_BASIC_MODEL_ID
,

131 
ZCL_DATATYPE_CHAR_STR
,

132 
ACCESS_CONTROL_READ
,

133 (*)
ùdModñId


137 
ZCL_CLUSTER_ID_GEN_BASIC
,

139 
ATTRID_BASIC_DATE_CODE
,

140 
ZCL_DATATYPE_CHAR_STR
,

141 
ACCESS_CONTROL_READ
,

142 (*)
ùdD©eCode


146 
ZCL_CLUSTER_ID_GEN_BASIC
,

148 
ATTRID_BASIC_POWER_SOURCE
,

149 
ZCL_DATATYPE_ENUM8
,

150 
ACCESS_CONTROL_READ
,

151 (*)&
ùdPowîSour˚


155 
ZCL_CLUSTER_ID_GEN_BASIC
,

157 
ATTRID_BASIC_LOCATION_DESC
,

158 
ZCL_DATATYPE_CHAR_STR
,

159 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

160 (*)
ùdLoˇti⁄Des¸ùti⁄


164 
ZCL_CLUSTER_ID_GEN_BASIC
,

166 
ATTRID_BASIC_PHYSICAL_ENV
,

167 
ZCL_DATATYPE_ENUM8
,

168 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

169 (*)&
ùdPhysiˇlEnvú⁄mít


173 
ZCL_CLUSTER_ID_GEN_BASIC
,

175 
ATTRID_BASIC_DEVICE_ENABLED
,

176 
ZCL_DATATYPE_BOOLEAN
,

177 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

178 (*)&
ùdDevi˚E«bÀd


184 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

186 
ATTRID_IDENTIFY_TIME
,

187 
ZCL_DATATYPE_UINT16
,

188 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

189 (*)&
ùdIdítifyTime


197 
ZCL_CLUSTER_ID_GEN_TIME
,

199 
ATTRID_TIME_TIME
,

200 
ZCL_DATATYPE_UTC
,

201 
ACCESS_CONTROL_READ
,

202 (*)&
ùdTime


208 
ZCL_CLUSTER_ID_GEN_TIME
,

210 
ATTRID_TIME_STATUS
,

211 
ZCL_DATATYPE_BITMAP8
,

212 
ACCESS_CONTROL_READ
,

213 (*)&
ùdTimeSètus


217 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

219 
ATTRID_KEY_ESTABLISH_SUITE
,

220 
ZCL_DATATYPE_BITMAP16
,

221 
ACCESS_CONTROL_READ
,

222 (*)&
ùdKeyE°ablishmítSuôe


230 
z˛O±i⁄Rec_t
 
	gùdO±i⁄s
[
IPD_MAX_OPTIONS
] =

234 
ZCL_CLUSTER_ID_GEN_TIME
,

235 –
AF_EN_SECURITY
 ),

240 
ZCL_CLUSTER_ID_SE_PRICING
,

241 –
AF_EN_SECURITY
 ),

244 
ZCL_CLUSTER_ID_SE_MESSAGE
,

245 –
AF_EN_SECURITY
 ),

248 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

249 –
AF_EN_SECURITY
 ),

252 
ZCL_CLUSTER_ID_SE_PREPAYMENT
,

253 –
AF_EN_SECURITY
 ),

262 
	#IPD_MAX_INCLUSTERS
 6

	)

263 c⁄° 
cId_t
 
	gùdInClu°îLi°
[
IPD_MAX_INCLUSTERS
] =

265 
ZCL_CLUSTER_ID_GEN_BASIC
,

266 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

267 
ZCL_CLUSTER_ID_GEN_TIME
,

268 
ZCL_CLUSTER_ID_SE_PRICING
,

269 
ZCL_CLUSTER_ID_SE_MESSAGE
,

270 
ZCL_CLUSTER_ID_SE_PREPAYMENT


273 
	#IPD_MAX_OUTCLUSTERS
 6

	)

274 c⁄° 
cId_t
 
	gùdOutClu°îLi°
[
IPD_MAX_OUTCLUSTERS
] =

276 
ZCL_CLUSTER_ID_GEN_BASIC
,

277 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

278 
ZCL_CLUSTER_ID_GEN_TIME
,

279 
ZCL_CLUSTER_ID_SE_PRICING
,

280 
ZCL_CLUSTER_ID_SE_MESSAGE
,

281 
ZCL_CLUSTER_ID_SE_PREPAYMENT


284 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gùdSim∂eDesc
 =

286 
IPD_ENDPOINT
,

287 
ZCL_SE_PROFILE_ID
,

288 #i‡
deföed
 ( 
ZCL_PREPAYMENT
 )

289 
ZCL_SE_DEVICEID_PREPAY_TERMINAL
,

291 
ZCL_SE_DEVICEID_IN_PREMISE_DISPLAY
,

293 
IPD_DEVICE_VERSION
,

294 
IPD_FLAGS
,

295 
IPD_MAX_INCLUSTERS
,

296 (
cId_t
 *)
ùdInClu°îLi°
,

297 
IPD_MAX_OUTCLUSTERS
,

298 (
cId_t
 *)
ùdOutClu°îLi°


	@Projects/zstack/SE/SampleApp/Source/IPD_OTA/OSAL_ipd.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL_Tasks.h
"

48 #i‡
deföed
 ( 
MT_TASK
 )

49 
	~"MT_TASK.h
"

52 
	~"ZDAµ.h
"

53 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

57 
	~"≠s_‰ag.h
"

60 #i‡
deföed
 ( 
INTER_PAN
 )

61 
	~"°ub_≠s.h
"

64 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

65 
	~"z˛_key_e°ablish.h
"

68 
	~"z˛_Ÿa.h
"

70 
	~"ùd.h
"

77 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

78 
macEvítLo›
,

79 
nwk_evít_lo›
,

80 
HÆ_Pro˚ssEvít
,

81 #i‡
deföed
–
MT_TASK
 )

82 
MT_Pro˚ssEvít
,

84 
APS_evít_lo›
,

85 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

86 
APSF_Pro˚ssEvít
,

88 
ZDAµ_evít_lo›
,

89 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

90 
ZDNwkMgr_evít_lo›
,

92 #i‡
deföed
–
INTER_PAN
 )

93 
StubAPS_Pro˚ssEvít
,

95 
z˛_evít_lo›
,

96 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

97 
z˛KeyE°ablish_evít_lo›
,

99 
z˛OTA_evít_lo›
,

100 
ùd_evít_lo›


103 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

104 
uöt16
 *
	gèsksEvíts
;

119 
	$oßlInôTasks
( )

121 
uöt8
 
èskID
 = 0;

123 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

124 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

126 
	`macTaskInô
–
èskID
++ );

127 
	`nwk_öô
–
èskID
++ );

128 
	`HÆ_Inô
–
èskID
++ );

129 #i‡
	`deföed
–
MT_TASK
 )

130 
	`MT_TaskInô
–
èskID
++ );

132 
	`APS_Inô
–
èskID
++ );

133 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

134 
	`APSF_Inô
–
èskID
++ );

136 
	`ZDAµ_Inô
–
èskID
++ );

137 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

138 
	`ZDNwkMgr_Inô
–
èskID
++ );

140 #i‡
	`deföed
–
INTER_PAN
 )

141 
	`StubAPS_Inô
–
èskID
++ );

143 
	`z˛_Inô
–
èskID
++ );

144 #i‡
	`deföed
 ( 
ZCL_KEY_ESTABLISH
 )

145 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

147 
	`z˛OTA_Inô
–
èskID
++ );

148 
	`ùd_Inô
–
èskID
 );

149 
	}
}

	@Projects/zstack/SE/SampleApp/Source/IPD_OTA/ipd.c

65 
	~"OSAL.h
"

66 
	~"OSAL_Clock.h
"

67 
	~"ZDAµ.h
"

68 
	~"ZDProfûe.h
"

69 
	~"ZDObje˘.h
"

70 
	~"AddrMgr.h
"

72 
	~"£.h
"

73 
	~"ùd.h
"

74 
	~"z˛_gíîÆ.h
"

75 
	~"z˛_£.h
"

76 
	~"z˛_key_e°ablish.h
"

78 #i‡
deföed
–
INTER_PAN
 )

79 
	~"°ub_≠s.h
"

82 
	~"⁄bﬂrd.h
"

85 
	~"hÆ_lcd.h
"

86 
	~"hÆ_Àd.h
"

87 
	~"hÆ_key.h
"

89 
	~"z˛_Ÿa.h
"

90 
	~"hÆ_Ÿa.h
"

97 
	#z˛_M™d©‹yRï‹èbÀAâribuã
–
a
 ) (á =
NULL
 )

	)

103 
	#ùdNwkSèã
 
devSèã


	)

110 
uöt16
 
	maddr
;

111 
uöt8
 
	mídpoöt
;

112 } 
	tùd_Sîvî_t
;

119 #¥agm®
loˇti⁄
="CRC"

120 c⁄° 
CODE
 
ŸaCrc_t
 
	gOTA_CRC
 =

125 #¥agm®
ªquúed
=
OTA_CRC


127 #¥agm®
loˇti⁄
="PREAMBLE"

128 c⁄° 
CODE
 
¥ómbÀ_t
 
	gOTA_PªambÀ
 =

131 
OTA_MANUFACTURER_ID
,

132 
OTA_TYPE_ID
,

135 #¥agm®
ªquúed
=
OTA_PªambÀ


145 
uöt8
 
	gùdOèSèã
;

146 
ùd_Sîvî_t
 
	gùdSîvîLi°
[
IPD_OTA_MAX_SERVERS
];

148 
uöt8
 
	gùdTaskID
;

149 
uöt8
 
	gùdTønsID
;

150 
afAddrTy≥_t
 
	gESPAddr
;

151 #i‡
SECURE


152 
uöt8
 
	glökKeySètus
;

154 
uöt8
 
	g›ti⁄
;

156 #i‡
deföed
 (
INTER_PAN
)

157 
uöt8
 
	grxOnIdÀ
;

160 
ídPoötDesc_t
 
	gùdEp
 =

162 
IPD_ENDPOINT
,

163 &
ùdTaskID
,

164 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
ùdSim∂eDesc
,

165 (
afNëw‹kL©ícyReq_t
)0

172 
ùd_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

174 #i‡
SECURE


175 
uöt8
 
ùd_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 );

178 
ùd_Pro˚ssIdítifyTimeCh™ge
( );

185 
uöt8
 
ùd_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 );

188 
ùd_BasicRe£tCB
( );

189 
ùd_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

190 
ùd_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

191 
ùd_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 );

192 #ifde‡
SE_UK_EXT


193 
ùd_GëEvítLogCB
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
§cAddr
,

194 
z˛GëEvítLog_t
 *
pEvítLog
, 
uöt8
 
£qNum
 );

195 
ùd_PublishEvítLogCB
–
afAddrTy≥_t
 *
§cAddr
,

196 
z˛PublishEvítLog_t
 *
pEvítLog
 );

199 
ùd_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
pMsg
 );

200 
ùd_AddSîvî
–
uöt16
 
addr
, 
uöt8
 
ídpoöt
 );

201 
ùd_P›Sîvî
–
uöt16
 *
addr
, 
uöt8
 *
ídpoöt
 );

202 
ùd_Pro˚ssOTAMsgs
–
z˛OTA_CÆlbackMsg_t
* 
pMsg
 );

205 
ùd_GëCuºítPri˚CB
–
z˛CCGëCuºítPri˚_t
 *
pCmd
,

206 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

207 
ùd_GëScheduÀdPri˚CB
–
z˛CCGëScheduÀdPri˚_t
 *
pCmd
,

208 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

209 
ùd_PublishPri˚CB
–
z˛CCPublishPri˚_t
 *
pCmd
,

210 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

211 
ùd_Di•œyMesßgeCB
–
z˛CCDi•œyMesßge_t
 *
pCmd
,

212 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

213 
ùd_C™˚lMesßgeCB
–
z˛CCC™˚lMesßge_t
 *
pCmd
,

214 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

215 
ùd_GëLa°MesßgeCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

216 
ùd_MesßgeC⁄fúm©i⁄CB
–
z˛CCMesßgeC⁄fúm©i⁄_t
 *
pCmd
,

217 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

218 #i‡
deföed
 ( 
SE_UK_EXT
 )

219 
ùd_PublishT¨iffInf‹m©i⁄CB
–
z˛CCPublishT¨iffInf‹m©i⁄_t
 *
pCmd
,

220 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

221 
ùd_PublishPri˚M©rixCB
–
z˛CCPublishPri˚M©rix_t
 *
pCmd
,

222 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

223 
ùd_PublishBlockThªshﬁdsCB
–
z˛CCPublishBlockThªshﬁds_t
 *
pCmd
,

224 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

225 
ùd_PublishC⁄vîsi⁄Fa˘‹CB
–
z˛CCPublishC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

226 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

227 
ùd_PublishCÆ‹ificVÆueCB
–
z˛CCPublishCÆ‹ificVÆue_t
 *
pCmd
,

228 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

229 
ùd_PublishCO2VÆueCB
–
z˛CCPublishCO2VÆue_t
 *
pCmd
,

230 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

231 
ùd_PublishCPPEvítCB
–
z˛CCPublishCPPEvít_t
 *
pCmd
,

232 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

233 
ùd_PublishBûlögPîiodCB
–
z˛CCPublishBûlögPîiod_t
 *
pCmd
,

234 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

235 
ùd_PublishC⁄sﬁid©edBûlCB
–
z˛CCPublishC⁄sﬁid©edBûl_t
 *
pCmd
,

236 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

237 
ùd_PublishCªdôPaymítInfoCB
–
z˛CCPublishCªdôPaymítInfo_t
 *
pCmd
,

238 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

239 
ùd_GëPª∑yS«pshŸRe•⁄£CB
–
z˛CCGëPª∑yS«pshŸRe•⁄£_t
 *
pCmd
,

240 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

241 
ùd_Ch™gePaymítModeRe•⁄£CB
–
z˛CCCh™gePaymítModeRe•⁄£_t
 *
pCmd
,

242 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

243 
ùd_C⁄sumîT›upRe•⁄£CB
–
z˛CCC⁄sumîT›upRe•⁄£_t
 *
pCmd
,

244 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

245 
ùd_GëComm™dsCB
–
uöt8
 
¥ïayNŸifiˇti⁄Fœgs
,

246 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

247 
ùd_PublishT›upLogCB
–
z˛CCPublishT›upLog_t
 *
pCmd
,

248 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

249 
ùd_PublishDebtLogCB
–
z˛CCPublishDebtLog_t
 *
pCmd
,

250 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

257 
ùd_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
msg
 );

258 #i‡
deföed
 ( 
ZCL_READ
 )

259 
uöt8
 
ùd_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

261 #i‡
deföed
 ( 
ZCL_WRITE
 )

262 
uöt8
 
ùd_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

264 
uöt8
 
ùd_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

265 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

266 
uöt8
 
ùd_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

272 
z˛GíîÆ_AµCÆlbacks_t
 
	gùd_GíCmdCÆlbacks
 =

274 
ùd_BasicRe£tCB
,

275 
ùd_IdítifyCB
,

276 
ùd_IdítifyQuîyR•CB
,

277 
NULL
,

278 
NULL
,

279 
NULL
,

280 
NULL
,

281 
NULL
,

282 
NULL
,

283 
NULL
,

284 
NULL
,

285 
NULL
,

286 
ùd_AœrmCB
,

287 #ifde‡
SE_UK_EXT


288 
ùd_GëEvítLogCB
,

289 
ùd_PublishEvítLogCB
,

291 
NULL
,

292 
NULL


298 
z˛SE_AµCÆlbacks_t
 
	gùd_SECmdCÆlbacks
 =

300 
ùd_PublishPri˚CB
,

301 
NULL
,

302 #i‡
deföed
 ( 
SE_UK_EXT
 )

303 
ùd_PublishT¨iffInf‹m©i⁄CB
,

304 
ùd_PublishPri˚M©rixCB
,

305 
ùd_PublishBlockThªshﬁdsCB
,

306 
ùd_PublishC⁄vîsi⁄Fa˘‹CB
,

307 
ùd_PublishCÆ‹ificVÆueCB
,

308 
ùd_PublishCO2VÆueCB
,

309 
ùd_PublishCPPEvítCB
,

310 
ùd_PublishBûlögPîiodCB
,

311 
ùd_PublishC⁄sﬁid©edBûlCB
,

312 
ùd_PublishCªdôPaymítInfoCB
,

314 
ùd_GëCuºítPri˚CB
,

315 
ùd_GëScheduÀdPri˚CB
,

316 
NULL
,

317 
NULL
,

318 #i‡
deföed
 ( 
SE_UK_EXT
 )

319 
NULL
,

320 
NULL
,

321 
NULL
,

322 
NULL
,

323 
NULL
,

324 
NULL
,

325 
NULL
,

326 
NULL
,

327 
NULL
,

329 
NULL
,

330 
NULL
,

331 
NULL
,

332 
NULL
,

333 
NULL
,

334 
NULL
,

335 
NULL
,

336 
NULL
,

337 
NULL
,

338 #i‡
deföed
 ( 
SE_UK_EXT
 )

339 
NULL
,

341 
NULL
,

342 
NULL
,

343 
NULL
,

344 
NULL
,

345 #i‡
deföed
 ( 
SE_UK_EXT
 )

346 
NULL
,

347 
NULL
,

348 
NULL
,

350 
ùd_Di•œyMesßgeCB
,

351 
ùd_C™˚lMesßgeCB
,

352 
ùd_GëLa°MesßgeCB
,

353 
ùd_MesßgeC⁄fúm©i⁄CB
,

354 
NULL
,

355 
NULL
,

356 
NULL
,

357 
NULL
,

358 
NULL
,

359 #i‡
deföed
 ( 
SE_UK_EXT
 )

360 
NULL
,

361 
NULL
,

363 
NULL
,

364 
NULL
,

365 #i‡
deföed
 ( 
SE_UK_EXT
 )

366 
NULL
,

368 
NULL
,

369 #i‡
deföed
 ( 
SE_UK_EXT
 )

370 
ùd_GëPª∑yS«pshŸRe•⁄£CB
,

371 
ùd_Ch™gePaymítModeRe•⁄£CB
,

372 
ùd_C⁄sumîT›upRe•⁄£CB
,

373 
ùd_GëComm™dsCB
,

374 
ùd_PublishT›upLogCB
,

375 
ùd_PublishDebtLogCB
,

377 
NULL
,

378 
NULL
,

379 #i‡
deföed
 ( 
SE_UK_EXT
 )

380 
NULL
,

381 
NULL
,

382 
NULL
,

383 
NULL
,

384 
NULL
,

385 
NULL
,

386 
NULL
,

387 
NULL
,

388 
NULL
,

389 
NULL
,

390 
NULL
,

391 
NULL
,

392 
NULL
,

393 
NULL
,

394 
NULL
,

395 
NULL
,

396 
NULL
,

397 
NULL
,

398 
NULL
,

399 
NULL
,

400 
NULL
,

401 
NULL
,

402 
NULL
,

403 
NULL
,

404 
NULL
,

405 
NULL
,

406 
NULL
,

407 
NULL
,

408 
NULL
,

421 
	$ùd_Inô
–
uöt8
 
èsk_id
 )

423 
OTA_ImageHódî_t
 
hódî
;

424 
¥ómbÀ_t
 
¥ómbÀ
;

426 
ùdTaskID
 = 
èsk_id
;

427 
ùdTønsID
 = 0;

428 
lcdBuf
[20];

430 #i‡
HAL_OTA_XNV_IS_SPI


431 
	`XNV_SPI_INIT
();

439 
ESPAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

440 
ESPAddr
.
ídPoöt
 = 
IPD_ENDPOINT
;

441 
ESPAddr
.
addr
.
sh‹tAddr
 = 0;

444 
	`HÆOTARód
(0, (
uöt8
 *)&
hódî
, (
OTA_ImageHódî_t
), 
HAL_OTA_DL
);

446 i‡(
hódî
.
magicNumbî
 =
OTA_HDR_MAGIC_NUMBER
)

448 
z˛OTA_Dow∆ﬂdedFûeVîsi⁄
 = 
hódî
.
fûeId
.
vîsi⁄
;

449 
z˛OTA_Dow∆ﬂdedZigBìSèckVîsi⁄
 = 
hódî
.
°ackVîsi⁄
;

453 
	`HÆOTARód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OTA_RC
);

455 
z˛OTA_M™uÁ˘uªrId
 = 
¥ómbÀ
.
m™uÁ˘uªrId
;

456 
z˛OTA_ImageTy≥
 = 
¥ómbÀ
.
imageTy≥
;

457 
z˛OTA_CuºítFûeVîsi⁄
 = 
¥ómbÀ
.
imageVîsi⁄
;

460 
	`z˛SE_Inô
–&
ùdSim∂eDesc
 );

463 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
IPD_ENDPOINT
, &
ùd_GíCmdCÆlbacks
 );

466 
	`z˛SE_Regi°îCmdCÆlbacks
–
IPD_ENDPOINT
, &
ùd_SECmdCÆlbacks
 );

469 
	`z˛_ªgi°îAârLi°
–
IPD_ENDPOINT
, 
IPD_MAX_ATTRIBUTES
, 
ùdAârs
 );

472 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
IPD_ENDPOINT
, 
IPD_MAX_OPTIONS
, 
ùdO±i⁄s
 );

475 
	`z˛_ªgi°îVÆid©eAârD©a
–
ùd_VÆid©eAârD©aCB
 );

478 
	`z˛_ªgi°îF‹Msg
–
ùdTaskID
 );

481 
	`Regi°îF‹Keys
–
ùdTaskID
 );

484 
	`ZDO_Regi°îF‹ZDOMsg
(
èsk_id
, 
M©ch_Desc_r•
);

486 #i‡
	`deföed
 ( 
INTER_PAN
 )

488 
	`StubAPS_Regi°îAµ
–&
ùdEp
 );

492 
	`z˛OTA_Regi°î
(
ùdTaskID
);

495 
	`oßl_mem£t
(
lcdBuf
, ' ', (lcdBuf));

496 
lcdBuf
[19] = '\0';

497 
	`oßl_mem˝y
(
lcdBuf
, "Ver: 0x", 7);

498 
	`_…ﬂ
(
z˛OTA_CuºítFûeVîsi⁄
, (
uöt8
*)&
lcdBuf
[7], 16);

499 
	`HÆLcdWrôeSåög
(
lcdBuf
, 
HAL_LCD_LINE_3
);

502 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_UPDATE_TIME_EVT
, 
IPD_UPDATE_TIME_PERIOD
 );

503 
	}
}

515 
uöt16
 
	$ùd_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

517 
afIncomögMSGPackë_t
 *
MSGpkt
;

519 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

521  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
ùdTaskID
 )) )

523  
MSGpkt
->
hdr
.
evít
 )

525 
ZCL_OTA_CALLBACK_IND
:

526 
	`ùd_Pro˚ssOTAMsgs
–(
z˛OTA_CÆlbackMsg_t
*)
MSGpkt
 );

529 
ZDO_CB_MSG
:

530 
	`ùd_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

533 
ZCL_INCOMING_MSG
:

535 
	`ùd_Pro˚ssZCLMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

538 
KEY_CHANGE
:

539 
	`ùd_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

542 
ZDO_STATE_CHANGE
:

543 i‡((
DEV_END_DEVICE
 =(
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
)))

545 #i‡
SECURE


548 
lökKeySètus
 = 
	`ùd_KeyE°ablish_Rëu∫LökKey
(
ESPAddr
.
addr
.
sh‹tAddr
);

550 i‡(
lökKeySètus
 !
ZSuc˚ss
)

552 
cId_t
 
cbkeClu°î
 = 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
;

553 
zAddrTy≥_t
 
d°Addr
;

555 
ùdOèSèã
 = 
IPD_OTA_CBKE_STATE
;

558 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

559 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

560 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
, 
ZCL_SE_PROFILE_ID
,

561 1, &
cbkeClu°î
, 0, 
NULL
, 
FALSE
 );

566 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_GET_PRICING_INFO_EVT
, 
IPD_GET_PRICING_INFO_PERIOD
 );

571 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_GET_PRICING_INFO_EVT
, 
IPD_GET_PRICING_INFO_PERIOD
 );

575 
	`NLME_SëPﬁlR©e
 ( 
SE_DEVICE_POLL_RATE
 );

579 #i‡
	`deföed
–
ZCL_KEY_ESTABLISH
 )

580 
ZCL_KEY_ESTABLISH_IND
:

581 i‡((
MSGpkt
->
hdr
.
°©us
Ë=
TîmKeySètus_Suc˚ss
)

584 
cId_t
 
ŸaClu°î
 = 
ZCL_CLUSTER_ID_OTA
;

585 
zAddrTy≥_t
 
d°Addr
;

588 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

589 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

590 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
, 
ZCL_SE_PROFILE_ID
,

591 1, &
ŸaClu°î
, 0, 
NULL
, 
FALSE
 );

593 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_GET_PRICING_INFO_EVT
, 
IPD_GET_PRICING_INFO_PERIOD
 );

594 
ùdOèSèã
 = 
IPD_OTA_IDLE_STATE
;

605 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

610  (
evíts
 ^ 
SYS_EVENT_MSG
);

614 i‡–
evíts
 & 
IPD_KEY_ESTABLISHMENT_REQUEST_EVT
 )

616 #i‡
ZCL_KEY_ESTABLISH


617 
	`z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
ùdTaskID
, &
ESPAddr
, 
ùdTønsID
);

619  ( 
evíts
 ^ 
IPD_KEY_ESTABLISHMENT_REQUEST_EVT
 );

623 i‡–
evíts
 & 
IPD_GET_PRICING_INFO_EVT
 )

625 
	`z˛SE_Pricög_Síd_GëCuºítPri˚
–
IPD_ENDPOINT
, &
ESPAddr
, 
›ti⁄
, 
TRUE
, 0 );

627 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_GET_PRICING_INFO_EVT
, 
IPD_GET_PRICING_INFO_PERIOD
 );

629  ( 
evíts
 ^ 
IPD_GET_PRICING_INFO_EVT
 );

633 i‡–
evíts
 & 
IPD_IDENTIFY_TIMEOUT_EVT
 )

635 i‡–
ùdIdítifyTime
 > 0 )

637 
ùdIdítifyTime
--;

639 
	`ùd_Pro˚ssIdítifyTimeCh™ge
();

641  ( 
evíts
 ^ 
IPD_IDENTIFY_TIMEOUT_EVT
 );

645 i‡–
evíts
 & 
IPD_UPDATE_TIME_EVT
 )

647 
ùdTime
 = 
	`oßl_gëClock
();

648 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_UPDATE_TIME_EVT
, 
IPD_UPDATE_TIME_PERIOD
 );

650  ( 
evíts
 ^ 
IPD_UPDATE_TIME_EVT
 );

655 
	}
}

666 
	$ùd_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
pMsg
 )

669 i‡((
pMsg
->
˛u°îID
 =
M©ch_Desc_r•
) &&

670 (
pMsg
->
§cAddr
.
addr
.
sh‹tAddr
 =
zgTru°CíãrAddr
))

672 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
pMsg
 );

674 i‡(
pR•
)

676 
ùdOèSèã
)

678 
IPD_OTA_CBKE_STATE
:

679 i‡(
pR•
->
˙t
)

682 
ESPAddr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

683 
ESPAddr
.
addr
.
sh‹tAddr
 = 
pMsg
->
§cAddr
.addr.shortAddr;

686 
	`oßl_£t_evít
–
ùdTaskID
, 
IPD_KEY_ESTABLISHMENT_REQUEST_EVT
);

690 
IPD_OTA_IDLE_STATE
:

693 
ùdOèSèã
 = 
IPD_OTA_DL_STATE
;

697 
	`ZDP_IEEEAddrReq
(
pMsg
->
§cAddr
.
addr
.
sh‹tAddr
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0);

701 
	`ùd_AddSîvî
(
pR•
->
nwkAddr
,ÖR•->
ïLi°
[0]);

703 
	`z˛OTA_Reque°NextUpd©e
(
pR•
->
nwkAddr
,ÖR•->
ïLi°
[0]);

706 
IPD_OTA_DL_STATE
:

709 
	`ùd_AddSîvî
(
pR•
->
nwkAddr
,ÖR•->
ïLi°
[0]);

716 
	`oßl_mem_‰ì
(
pR•
);

719 
	}
}

730 
	$ùd_Pro˚ssOTAMsgs
–
z˛OTA_CÆlbackMsg_t
* 
pMsg
 )

732 
pMsg
->
Ÿa_evít
)

734 
ZCL_OTA_START_CALLBACK
:

735 i‡(
pMsg
->
hdr
.
°©us
 =
ZSuc˚ss
)

738 
	`oßl_°›_timîEx
(
ùdTaskID
, 
IPD_GET_PRICING_INFO_EVT
);

741 
	`NLME_SëPﬁlR©e
(
SE_OTA_POLL_RATE
);

743 
ùdOèSèã
 = 
IPD_OTA_IDLE_STATE
;

747 
uöt16
 
addr
;

748 
uöt8
 
ídpoöt
 = 0;

752 
	`ùd_P›Sîvî
(&
addr
, &
ídpoöt
);

754 i‡(
ídpoöt
 != 0)

756 
ùdOèSèã
 = 
IPD_OTA_DL_STATE
;

757 
	`z˛OTA_Reque°NextUpd©e
(
addr
, 
ídpoöt
);

761 
ùdOèSèã
 = 
IPD_OTA_IDLE_STATE
;

766 
ZCL_OTA_DL_COMPLETE_CALLBACK
:

768 i‡(
pMsg
->
hdr
.
°©us
 =
ZSuc˚ss
)

772 
	`HÆOTAInvRC
();

773 
	`Sy°emRe£t
();

778 
	`NLME_SëPﬁlR©e
(
SE_DEVICE_POLL_RATE
);

781 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_GET_PRICING_INFO_EVT
, 
IPD_GET_PRICING_INFO_PERIOD
 );

788 
	}
}

800 
	$ùd_AddSîvî
–
uöt16
 
addr
, 
uöt8
 
ídpoöt
 )

802 
öt8
 
i
;

804 
i
=0; i<
IPD_OTA_MAX_SERVERS
; i++)

806 i‡(
ùdSîvîLi°
[
i
].
ídpoöt
 == 0)

809 
ùdSîvîLi°
[
i
].
ídpoöt
 =Éndpoint;

810 
ùdSîvîLi°
[
i
].
addr
 =áddr;

814 
	}
}

827 
	$ùd_P›Sîvî
–
uöt16
 *
addr
, 
uöt8
 *
ídpoöt
 )

829 
öt8
 
i
;

831 
i
=0; i<
IPD_OTA_MAX_SERVERS
; i++)

833 i‡(
ùdSîvîLi°
[
i
].
ídpoöt
 != 0)

836 *
ídpoöt
 = 
ùdSîvîLi°
[
i
].endpoint;

837 *
addr
 = 
ùdSîvîLi°
[
i
].addr;

840 
ùdSîvîLi°
[
i
].
ídpoöt
 = 0;

844 
	}
}

854 
	$ùd_Pro˚ssIdítifyTimeCh™ge
( )

856 i‡–
ùdIdítifyTime
 > 0 )

858 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_IDENTIFY_TIMEOUT_EVT
, 1000 );

859 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

863 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

864 
	`oßl_°›_timîEx
–
ùdTaskID
, 
IPD_IDENTIFY_TIMEOUT_EVT
 );

866 
	}
}

868 #i‡
SECURE


878 
uöt8
 
	$ùd_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 )

880 
uöt8
 
°©us
 = 
ZFaûuª
;

881 
AddrMgrE¡ry_t
 
íåy
;

885 
íåy
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

886 
íåy
.
nwkAddr
 = 
sh‹tAddr
;

888 i‡–
	`AddrMgrE¡ryLookupNwk
–&
íåy
 ) )

891 i‡–
	`APSME_IsLökKeyVÆid
–
íåy
.
extAddr
 ) =
TRUE
 )

893 
°©us
 = 
ZSuc˚ss
;

899 
°©us
 = 
ZInvÆidP¨amëî
;

902  
°©us
;

903 
	}
}

920 
	$ùd_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

923 i‡–
shi·
 )

925 i‡–
keys
 & 
HAL_KEY_SW_1
 )

928 i‡–
keys
 & 
HAL_KEY_SW_2
 )

931 i‡–
keys
 & 
HAL_KEY_SW_3
 )

934 i‡–
keys
 & 
HAL_KEY_SW_4
 )

940 i‡–
keys
 & 
HAL_KEY_SW_1
 )

942 
	`ZDOInôDevi˚
(0);

945 i‡–
keys
 & 
HAL_KEY_SW_2
 )

947 #i‡
	`deföed
–
INTER_PAN
 )

949 
uöt8
 
x
 = 
TRUE
;

950 
	`ZMacGëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

951 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
x
 );

952 
afAddrTy≥_t
 
d°Addr
;

953 
uöt8
 
›ti⁄
 = 1;

962 
d°Addr
.
addrMode
 = 
afAddrBrﬂdˇ°
;

963 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR_DEVALL
;

964 
d°Addr
.
ídPoöt
 = 
STUBAPS_INTER_PAN_EP
;

965 
d°Addr
.
∑nId
 = 0xFFFF;

967 
	`z˛SE_Pricög_Síd_GëCuºítPri˚
–
IPD_ENDPOINT
, &
d°Addr
, 
›ti⁄
, 
TRUE
, 0 );

971 i‡–
keys
 & 
HAL_KEY_SW_3
 )

976 i‡–
keys
 & 
HAL_KEY_SW_4
 )

981 
	}
}

994 
uöt8
 
	$ùd_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 )

996 
uöt8
 
vÆid
 = 
TRUE
;

998  
pAârInfo
->
d©aTy≥
 )

1000 
ZCL_DATATYPE_BOOLEAN
:

1001 i‡––*(
pAârInfo
->
©åD©a
) != 0 ) && ( *(pAttrInfo->attrData) != 1 ) )

1002 
vÆid
 = 
FALSE
;

1009  ( 
vÆid
 );

1010 
	}
}

1022 
	$ùd_BasicRe£tCB
( )

1025 
	}
}

1037 
	$ùd_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

1039 
ùdIdítifyTime
 = 
pCmd
->
idítifyTime
;

1040 
	`ùd_Pro˚ssIdítifyTimeCh™ge
();

1041 
	}
}

1053 
	$ùd_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

1056 
	}
}

1069 
	$ùd_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 )

1072 
	}
}

1074 #ifde‡
SE_UK_EXT


1089 
	$ùd_GëEvítLogCB
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
§cAddr
,

1090 
z˛GëEvítLog_t
 *
pEvítLog
, 
uöt8
 
£qNum
 )

1099 
	}
}

1113 
	$ùd_PublishEvítLogCB
–
afAddrTy≥_t
 *
§cAddr
, 
z˛PublishEvítLog_t
 *
pEvítLog
 )

1116 
	}
}

1132 
	$ùd_GëCuºítPri˚CB
–
z˛CCGëCuºítPri˚_t
 *
pCmd
,

1133 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1135 #i‡
	`deföed
 ( 
ZCL_PRICING
 )

1138 
z˛CCPublishPri˚_t
 
cmd
;

1140 
	`oßl_mem£t
–&
cmd
, 0, –
z˛CCPublishPri˚_t
 ) );

1142 
cmd
.
¥ovidîId
 = 0xbabeface;

1143 
cmd
.
numbîOfPri˚Tõrs
 = 0xfe;

1145 
	`z˛SE_Pricög_Síd_PublishPri˚
–
IPD_ENDPOINT
, 
§cAddr
, &
cmd
, 
FALSE
, 
£qNum
 );

1147 
	}
}

1162 
	$ùd_GëScheduÀdPri˚CB
–
z˛CCGëScheduÀdPri˚_t
 *
pCmd
,

1163 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1169 #i‡
	`deföed
 ( 
ZCL_PRICING
 )

1170 
z˛CCPublishPri˚_t
 
cmd
;

1172 
	`oßl_mem£t
–&
cmd
, 0, –
z˛CCPublishPri˚_t
 ) );

1174 
cmd
.
¥ovidîId
 = 0xbabeface;

1175 
cmd
.
numbîOfPri˚Tõrs
 = 0xfe;

1177 
	`z˛SE_Pricög_Síd_PublishPri˚
–
IPD_ENDPOINT
, 
§cAddr
, &
cmd
, 
FALSE
, 
£qNum
 );

1180 
	}
}

1194 
	$ùd_PublishPri˚CB
–
z˛CCPublishPri˚_t
 *
pCmd
,

1195 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1197 i‡–
pCmd
 )

1200 
	`HÆLcdWrôeSåög
("Providî ID", 
HAL_LCD_LINE_1
);

1201 
	`HÆLcdWrôeVÆue
–
pCmd
->
¥ovidîId
, 10, 
HAL_LCD_LINE_2
 );

1204 #i‡
	`deföed
 ( 
INTER_PAN
 )

1205 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

1208 
	}
}

1223 
	$ùd_Di•œyMesßgeCB
–
z˛CCDi•œyMesßge_t
 *
pCmd
,

1224 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1237 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

1239 i‡(
pCmd
->
msgSåög
.
°rLí
 <
HAL_LCD_MAX_CHARS
+1)

1241 
	`HÆLcdWrôeSåög
((*)
pCmd
->
msgSåög
.
pSå
, 
HAL_LCD_LINE_3
);

1246 c⁄° 
uöt8
 
À·
 = 
HAL_LCD_MAX_CHARS
 - 4 - 4;

1247 
uöt8
 
buf
[
HAL_LCD_MAX_CHARS
];

1249 ()
	`oßl_mem˝y
(
buf
, 
pCmd
->
msgSåög
.
pSå
, 
À·
);

1250 ()
	`oßl_mem˝y
(
buf
+
À·
, "...+\0", 5);

1251 
	`HÆLcdWrôeSåögVÆue
((*)
buf
, 
pCmd
->
msgSåög
.
°rLí
-
À·
, 10, 
HAL_LCD_LINE_3
);

1254 
	}
}

1269 
	$ùd_C™˚lMesßgeCB
–
z˛CCC™˚lMesßge_t
 *
pCmd
,

1270 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1273 
	}
}

1288 
	$ùd_GëLa°MesßgeCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1293 #i‡
	`deföed
 ( 
ZCL_MESSAGE
 )

1294 
z˛CCDi•œyMesßge_t
 
cmd
;

1295 
uöt8
 
msg
[10] = { 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29 };

1298 
cmd
.
mesßgeId
 = 0xaabbccdd;

1299 
cmd
.
mesßgeCål
.
å™smissi⁄Mode
 = 0;

1300 
cmd
.
mesßgeCål
.
imp‹èn˚
 = 1;

1301 
cmd
.
mesßgeCål
.
c⁄fúm©i⁄Requúed
 = 1;

1302 
cmd
.
duøti⁄InMöuãs
 = 60;

1304 
cmd
.
msgSåög
.
°rLí
 = 10;

1305 
cmd
.
msgSåög
.
pSå
 = 
msg
;

1307 
	`z˛SE_Mesßge_Síd_Di•œyMesßge
–
IPD_ENDPOINT
, 
§cAddr
, &
cmd
,

1308 
FALSE
, 
£qNum
 );

1310 
	}
}

1325 
	$ùd_MesßgeC⁄fúm©i⁄CB
–
z˛CCMesßgeC⁄fúm©i⁄_t
 *
pCmd
,

1326 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
)

1329 
	}
}

1331 #i‡
deföed
 ( 
SE_UK_EXT
 )

1344 
	$ùd_PublishT¨iffInf‹m©i⁄CB
–
z˛CCPublishT¨iffInf‹m©i⁄_t
 *
pCmd
,

1345 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1348 
	}
}

1362 
	$ùd_PublishPri˚M©rixCB
–
z˛CCPublishPri˚M©rix_t
 *
pCmd
,

1363 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1366 
	}
}

1380 
	$ùd_PublishBlockThªshﬁdsCB
–
z˛CCPublishBlockThªshﬁds_t
 *
pCmd
,

1381 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1384 
	}
}

1398 
	$ùd_PublishC⁄vîsi⁄Fa˘‹CB
–
z˛CCPublishC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

1399 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1402 
	}
}

1416 
	$ùd_PublishCÆ‹ificVÆueCB
–
z˛CCPublishCÆ‹ificVÆue_t
 *
pCmd
,

1417 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1420 
	}
}

1434 
	$ùd_PublishCO2VÆueCB
–
z˛CCPublishCO2VÆue_t
 *
pCmd
,

1435 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1438 
	}
}

1452 
	$ùd_PublishCPPEvítCB
–
z˛CCPublishCPPEvít_t
 *
pCmd
,

1453 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1456 
	}
}

1470 
	$ùd_PublishBûlögPîiodCB
–
z˛CCPublishBûlögPîiod_t
 *
pCmd
,

1471 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1474 
	}
}

1488 
	$ùd_PublishC⁄sﬁid©edBûlCB
–
z˛CCPublishC⁄sﬁid©edBûl_t
 *
pCmd
,

1489 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1492 
	}
}

1506 
	$ùd_PublishCªdôPaymítInfoCB
–
z˛CCPublishCªdôPaymítInfo_t
 *
pCmd
,

1507 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1510 
	}
}

1524 
	$ùd_GëPª∑yS«pshŸRe•⁄£CB
–
z˛CCGëPª∑yS«pshŸRe•⁄£_t
 *
pCmd
,

1525 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1528 
	}
}

1542 
	$ùd_Ch™gePaymítModeRe•⁄£CB
–
z˛CCCh™gePaymítModeRe•⁄£_t
 *
pCmd
,

1543 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1546 
	}
}

1560 
	$ùd_C⁄sumîT›upRe•⁄£CB
–
z˛CCC⁄sumîT›upRe•⁄£_t
 *
pCmd
,

1561 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1564 
	}
}

1578 
	$ùd_GëComm™dsCB
–
uöt8
 
¥ïayNŸifiˇti⁄Fœgs
,

1579 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1582 
	}
}

1596 
	$ùd_PublishT›upLogCB
–
z˛CCPublishT›upLog_t
 *
pCmd
,

1597 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1600 
	}
}

1614 
	$ùd_PublishDebtLogCB
–
z˛CCPublishDebtLog_t
 *
pCmd
,

1615 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1618 
	}
}

1636 
	$ùd_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

1638  
pInMsg
->
z˛Hdr
.
comm™dID
 )

1640 #i‡
	`deföed
 ( 
ZCL_READ
 )

1641 
ZCL_CMD_READ_RSP
:

1642 
	`ùd_Pro˚ssInRódR•Cmd
–
pInMsg
 );

1645 #i‡
	`deföed
 ( 
ZCL_WRITE
 )

1646 
ZCL_CMD_WRITE_RSP
:

1647 
	`ùd_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

1650 
ZCL_CMD_DEFAULT_RSP
:

1651 
	`ùd_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

1653 #i‡
	`deföed
 ( 
ZCL_DISCOVER
 )

1654 
ZCL_CMD_DISCOVER_RSP
:

1655 
	`ùd_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

1662 i‡–
pInMsg
->
©åCmd
 !
NULL
 )

1665 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

1666 
pInMsg
->
©åCmd
 = 
NULL
;

1668 
	}
}

1670 #i‡
deföed
 ( 
ZCL_READ
 )

1680 
uöt8
 
	$ùd_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1682 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

1683 
uöt8
 
i
;

1685 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1686 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

1693  
TRUE
;

1694 
	}
}

1697 #i‡
deföed
 ( 
ZCL_WRITE
 )

1707 
uöt8
 
	$ùd_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1709 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

1710 
uöt8
 
i
;

1712 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1713 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

1719  
TRUE
;

1720 
	}
}

1732 
uöt8
 
	$ùd_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1734 
z˛DeÁu…R•Cmd_t
 *
deÁu…R•Cmd
 = (z˛DeÁu…R•Cmd_à*)
pInMsg
->
©åCmd
;

1738 i‡(
deÁu…R•Cmd
->
°©usCode
 =
ZCL_STATUS_ABORT
)

1740 
z˛OTA_ImageUpgødeSètus
 = 
OTA_STATUS_NORMAL
;

1743 
z˛OTA_CÆlbackMsg_t
 *
pMsg
;

1745 
pMsg
 = (
z˛OTA_CÆlbackMsg_t
*Ë
	`oßl_msg_Æloˇã
((zclOTA_CallbackMsg_t));

1747 i‡(
pMsg
)

1749 
pMsg
->
hdr
.
evít
 = 
ZCL_OTA_CALLBACK_IND
;

1750 
pMsg
->
hdr
.
°©us
 = 
ZOèAb‹t
;

1751 
pMsg
->
Ÿa_evít
 = 
ZCL_OTA_DL_COMPLETE_CALLBACK
;

1753 
	`oßl_msg_£nd
(
ùdTaskID
, (
uöt8
*Ë
pMsg
);

1757 i‡(
deÁu…R•Cmd
->
°©usCode
 =
ZCL_STATUS_NO_IMAGE_AVAILABLE
)

1762  
TRUE
;

1763 
	}
}

1765 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

1775 
uöt8
 
	$ùd_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1777 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

1778 
uöt8
 
i
;

1780 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1781  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

1786  
TRUE
;

1787 
	}
}

	@Projects/zstack/SE/SampleApp/Source/IPD_OTA/ipd.h

40 #i‚de‡
IPD_H


41 
	#IPD_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#IPD_ENDPOINT
 0x09

	)

58 
	#IPD_MAX_ATTRIBUTES
 13

	)

60 
	#IPD_MAX_OPTIONS
 3

	)

62 
	#IPD_UPDATE_TIME_PERIOD
 1000

63 
	#IPD_GET_PRICING_INFO_PERIOD
 5000

64 
	#SE_DEVICE_POLL_RATE
 8000

65 
	#SE_OTA_POLL_RATE
 100

66 

	)

68 
	#IPD_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

69 
	#IPD_UPDATE_TIME_EVT
 0x0002

	)

70 
	#IPD_KEY_ESTABLISHMENT_REQUEST_EVT
 0x0004

	)

71 
	#IPD_GET_PRICING_INFO_EVT
 0x0008

	)

73 
	#IPD_OTA_MAX_SERVERS
 6

	)

75 
	#IPD_OTA_IDLE_STATE
 0

	)

76 
	#IPD_OTA_CBKE_STATE
 1

	)

77 
	#IPD_OTA_DL_STATE
 2

	)

92 
Sim∂eDes¸ùti⁄F‹m©_t
 
ùdSim∂eDesc
;

93 
CONST
 
z˛AârRec_t
 
ùdAârs
[];

94 
z˛O±i⁄Rec_t
 
ùdO±i⁄s
[];

95 
uöt8
 
ùdDevi˚E«bÀd
;

96 
uöt16
 
ùdTønsôi⁄Time
;

97 
uöt16
 
ùdIdítifyTime
;

98 
uöt32
 
ùdTime
;

106 
ùd_Inô
–
uöt8
 
èsk_id
 );

111 
uöt16
 
ùd_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

117 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/IPD_OTA/ipd_data.c

45 
	~"OSAL.h
"

46 
	~"ZDC⁄fig.h
"

48 
	~"£.h
"

49 
	~"ùd.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_key_e°ablish.h
"

56 
	#IPD_DEVICE_VERSION
 0

	)

57 
	#IPD_FLAGS
 0

	)

59 
	#IPD_HWVERSION
 1

	)

60 
	#IPD_ZCLVERSION
 1

	)

74 c⁄° 
uöt8
 
	gùdZCLVîsi⁄
 = 
IPD_ZCLVERSION
;

75 c⁄° 
uöt8
 
	gùdHWVîsi⁄
 = 
IPD_HWVERSION
;

76 c⁄° 
uöt8
 
	gùdM™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

77 c⁄° 
uöt8
 
	gùdModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

78 c⁄° 
uöt8
 
	gùdD©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

79 c⁄° 
uöt8
 
	gùdPowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

81 
uöt8
 
	gùdLoˇti⁄Des¸ùti⁄
[] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

82 
uöt8
 
	gùdPhysiˇlEnvú⁄mít
 = 
PHY_UNSPECIFIED_ENV
;

83 
uöt8
 
	gùdDevi˚E«bÀd
 = 
DEVICE_ENABLED
;

86 
uöt16
 
	gùdIdítifyTime
 = 0;

87 
uöt32
 
	gùdTime
 = 0;

88 
uöt8
 
	gùdTimeSètus
 = 0x01;

91 
uöt16
 
	gùdKeyE°ablishmítSuôe
 = 
CERTIFICATE_BASED_KEY_ESTABLISHMENT
;

96 
CONST
 
z˛AârRec_t
 
	gùdAârs
[
IPD_MAX_ATTRIBUTES
] =

101 
ZCL_CLUSTER_ID_GEN_BASIC
,

103 
ATTRID_BASIC_ZCL_VERSION
,

104 
ZCL_DATATYPE_UINT8
,

105 
ACCESS_CONTROL_READ
,

106 (*)&
ùdZCLVîsi⁄


110 
ZCL_CLUSTER_ID_GEN_BASIC
,

112 
ATTRID_BASIC_HW_VERSION
,

113 
ZCL_DATATYPE_UINT8
,

114 
ACCESS_CONTROL_READ
,

115 (*)&
ùdHWVîsi⁄


119 
ZCL_CLUSTER_ID_GEN_BASIC
,

121 
ATTRID_BASIC_MANUFACTURER_NAME
,

122 
ZCL_DATATYPE_CHAR_STR
,

123 
ACCESS_CONTROL_READ
,

124 (*)
ùdM™uÁ˘uªrName


128 
ZCL_CLUSTER_ID_GEN_BASIC
,

130 
ATTRID_BASIC_MODEL_ID
,

131 
ZCL_DATATYPE_CHAR_STR
,

132 
ACCESS_CONTROL_READ
,

133 (*)
ùdModñId


137 
ZCL_CLUSTER_ID_GEN_BASIC
,

139 
ATTRID_BASIC_DATE_CODE
,

140 
ZCL_DATATYPE_CHAR_STR
,

141 
ACCESS_CONTROL_READ
,

142 (*)
ùdD©eCode


146 
ZCL_CLUSTER_ID_GEN_BASIC
,

148 
ATTRID_BASIC_POWER_SOURCE
,

149 
ZCL_DATATYPE_ENUM8
,

150 
ACCESS_CONTROL_READ
,

151 (*)&
ùdPowîSour˚


155 
ZCL_CLUSTER_ID_GEN_BASIC
,

157 
ATTRID_BASIC_LOCATION_DESC
,

158 
ZCL_DATATYPE_CHAR_STR
,

159 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

160 (*)
ùdLoˇti⁄Des¸ùti⁄


164 
ZCL_CLUSTER_ID_GEN_BASIC
,

166 
ATTRID_BASIC_PHYSICAL_ENV
,

167 
ZCL_DATATYPE_ENUM8
,

168 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

169 (*)&
ùdPhysiˇlEnvú⁄mít


173 
ZCL_CLUSTER_ID_GEN_BASIC
,

175 
ATTRID_BASIC_DEVICE_ENABLED
,

176 
ZCL_DATATYPE_BOOLEAN
,

177 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

178 (*)&
ùdDevi˚E«bÀd


184 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

186 
ATTRID_IDENTIFY_TIME
,

187 
ZCL_DATATYPE_UINT16
,

188 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

189 (*)&
ùdIdítifyTime


197 
ZCL_CLUSTER_ID_GEN_TIME
,

199 
ATTRID_TIME_TIME
,

200 
ZCL_DATATYPE_UTC
,

201 
ACCESS_CONTROL_READ
,

202 (*)&
ùdTime


208 
ZCL_CLUSTER_ID_GEN_TIME
,

210 
ATTRID_TIME_STATUS
,

211 
ZCL_DATATYPE_BITMAP8
,

212 
ACCESS_CONTROL_READ
,

213 (*)&
ùdTimeSètus


217 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

219 
ATTRID_KEY_ESTABLISH_SUITE
,

220 
ZCL_DATATYPE_BITMAP16
,

221 
ACCESS_CONTROL_READ
,

222 (*)&
ùdKeyE°ablishmítSuôe


230 
z˛O±i⁄Rec_t
 
	gùdO±i⁄s
[
IPD_MAX_OPTIONS
] =

234 
ZCL_CLUSTER_ID_GEN_TIME
,

235 –
AF_EN_SECURITY
 ),

240 
ZCL_CLUSTER_ID_SE_PRICING
,

241 –
AF_EN_SECURITY
 ),

244 
ZCL_CLUSTER_ID_SE_MESSAGE
,

245 –
AF_EN_SECURITY
 ),

254 
	#IPD_MAX_INCLUSTERS
 5

	)

255 c⁄° 
cId_t
 
	gùdInClu°îLi°
[
IPD_MAX_INCLUSTERS
] =

257 
ZCL_CLUSTER_ID_GEN_BASIC
,

258 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

259 
ZCL_CLUSTER_ID_GEN_TIME
,

260 
ZCL_CLUSTER_ID_SE_PRICING
,

261 
ZCL_CLUSTER_ID_SE_MESSAGE


264 
	#IPD_MAX_OUTCLUSTERS
 5

	)

265 c⁄° 
cId_t
 
	gùdOutClu°îLi°
[
IPD_MAX_OUTCLUSTERS
] =

267 
ZCL_CLUSTER_ID_GEN_BASIC
,

268 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

269 
ZCL_CLUSTER_ID_GEN_TIME
,

270 
ZCL_CLUSTER_ID_SE_PRICING
,

271 
ZCL_CLUSTER_ID_SE_MESSAGE


274 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gùdSim∂eDesc
 =

276 
IPD_ENDPOINT
,

277 
ZCL_SE_PROFILE_ID
,

278 
ZCL_SE_DEVICEID_IN_PREMISE_DISPLAY
,

279 
IPD_DEVICE_VERSION
,

280 
IPD_FLAGS
,

281 
IPD_MAX_INCLUSTERS
,

282 (
cId_t
 *)
ùdInClu°îLi°
,

283 
IPD_MAX_OUTCLUSTERS
,

284 (
cId_t
 *)
ùdOutClu°îLi°


	@Projects/zstack/SE/SampleApp/Source/LoadControl/OSAL_LoadControl.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL_Tasks.h
"

48 #i‡
deföed
 ( 
MT_TASK
 )

49 
	~"MT_TASK.h
"

52 
	~"ZDAµ.h
"

53 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

57 
	~"≠s_‰ag.h
"

60 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

61 
	~"z˛_key_e°ablish.h
"

64 
	~"lﬂdc⁄åﬁ.h
"

71 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

72 
macEvítLo›
,

73 
nwk_evít_lo›
,

74 
HÆ_Pro˚ssEvít
,

75 #i‡
deföed
–
MT_TASK
 )

76 
MT_Pro˚ssEvít
,

78 
APS_evít_lo›
,

79 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

80 
APSF_Pro˚ssEvít
,

82 
ZDAµ_evít_lo›
,

83 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

84 
ZDNwkMgr_evít_lo›
,

86 
z˛_evít_lo›
,

87 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

88 
z˛KeyE°ablish_evít_lo›
,

90 
lﬂdc⁄åﬁ_evít_lo›


93 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

94 
uöt16
 *
	gèsksEvíts
;

109 
	$oßlInôTasks
( )

111 
uöt8
 
èskID
 = 0;

113 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

114 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

116 
	`macTaskInô
–
èskID
++ );

117 
	`nwk_öô
–
èskID
++ );

118 
	`HÆ_Inô
–
èskID
++ );

119 #i‡
	`deföed
–
MT_TASK
 )

120 
	`MT_TaskInô
–
èskID
++ );

122 
	`APS_Inô
–
èskID
++ );

123 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

124 
	`APSF_Inô
–
èskID
++ );

126 
	`ZDAµ_Inô
–
èskID
++ );

127 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

128 
	`ZDNwkMgr_Inô
–
èskID
++ );

130 
	`z˛_Inô
–
èskID
++ );

131 #i‡
	`deföed
 ( 
ZCL_KEY_ESTABLISH
 )

132 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

134 
	`lﬂdc⁄åﬁ_Inô
–
èskID
 );

135 
	}
}

	@Projects/zstack/SE/SampleApp/Source/LoadControl/loadcontrol.c

63 
	~"OSAL.h
"

64 
	~"OSAL_Clock.h
"

65 
	~"ZDAµ.h
"

66 
	~"ZDObje˘.h
"

67 
	~"AddrMgr.h
"

69 
	~"£.h
"

70 
	~"lﬂdc⁄åﬁ.h
"

71 
	~"z˛_gíîÆ.h
"

72 
	~"z˛_£.h
"

73 
	~"z˛_key_e°ablish.h
"

75 
	~"⁄bﬂrd.h
"

78 
	~"hÆ_lcd.h
"

79 
	~"hÆ_Àd.h
"

80 
	~"hÆ_key.h
"

88 
	#z˛_M™d©‹yRï‹èbÀAâribuã
–
a
 ) (á =
NULL
 )

	)

94 
	#lﬂdC⁄åﬁNwkSèã
 
devSèã


	)

112 
uöt8
 
	glﬂdC⁄åﬁTaskID
;

113 
uöt8
 
	glﬂdC⁄åﬁTønsID
;

114 
afAddrTy≥_t
 
	gESPAddr
;

115 #i‡
SECURE


116 
uöt8
 
	glökKeySètus
;

118 
z˛CCRï‹tEvítSètus_t
 
	gr•
;

123 
lﬂdc⁄åﬁ_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

125 #i‡
SECURE


126 
uöt8
 
lﬂdc⁄åﬁ_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 );

129 
lﬂdc⁄åﬁ_Pro˚ssIdítifyTimeCh™ge
( );

136 
uöt8
 
lﬂdc⁄åﬁ_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 );

139 
lﬂdc⁄åﬁ_BasicRe£tCB
( );

140 
lﬂdc⁄åﬁ_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

141 
lﬂdc⁄åﬁ_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

142 
lﬂdc⁄åﬁ_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 );

143 #ifde‡
SE_UK_EXT


144 
lﬂdc⁄åﬁ_GëEvítLogCB
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
§cAddr
,

145 
z˛GëEvítLog_t
 *
pEvítLog
, 
uöt8
 
£qNum
 );

146 
lﬂdc⁄åﬁ_PublishEvítLogCB
–
afAddrTy≥_t
 *
§cAddr
,

147 
z˛PublishEvítLog_t
 *
pEvítLog
 );

151 
lﬂdc⁄åﬁ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
pMsg
 );

155 
lﬂdc⁄åﬁ_LﬂdC⁄åﬁEvítCB
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

156 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
°©us
, uöt8 
£qNum
 );

157 
lﬂdc⁄åﬁ_C™˚lLﬂdC⁄åﬁEvítCB
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

158 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

159 
lﬂdc⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvítsCB
–
z˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 *
pCmd
,

160 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

161 
lﬂdc⁄åﬁ_Rï‹tEvítSètusCB
–
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

162 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

163 
lﬂdc⁄åﬁ_GëScheduÀdEvítCB
–
z˛CCGëScheduÀdEvít_t
 *
pCmd
,

164 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

170 
lﬂdc⁄åﬁ_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
msg
 );

171 #i‡
deföed
 ( 
ZCL_READ
 )

172 
uöt8
 
lﬂdc⁄åﬁ_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

174 #i‡
deföed
 ( 
ZCL_WRITE
 )

175 
uöt8
 
lﬂdc⁄åﬁ_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

177 
uöt8
 
lﬂdc⁄åﬁ_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

178 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

179 
uöt8
 
lﬂdc⁄åﬁ_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

185 
z˛GíîÆ_AµCÆlbacks_t
 
	glﬂdc⁄åﬁ_GíCmdCÆlbacks
 =

187 
lﬂdc⁄åﬁ_BasicRe£tCB
,

188 
lﬂdc⁄åﬁ_IdítifyCB
,

189 
lﬂdc⁄åﬁ_IdítifyQuîyR•CB
,

190 
NULL
,

191 
NULL
,

192 
NULL
,

193 
NULL
,

194 
NULL
,

195 
NULL
,

196 
NULL
,

197 
NULL
,

198 
NULL
,

199 
lﬂdc⁄åﬁ_AœrmCB
,

200 #ifde‡
SE_UK_EXT


201 
lﬂdc⁄åﬁ_GëEvítLogCB
,

202 
lﬂdc⁄åﬁ_PublishEvítLogCB
,

204 
NULL
,

205 
NULL


211 
z˛SE_AµCÆlbacks_t
 
	glﬂdc⁄åﬁ_SECmdCÆlbacks
 =

213 
NULL
,

214 
NULL
,

215 #i‡
deföed
 ( 
SE_UK_EXT
 )

216 
NULL
,

217 
NULL
,

218 
NULL
,

219 
NULL
,

220 
NULL
,

221 
NULL
,

222 
NULL
,

223 
NULL
,

224 
NULL
,

225 
NULL
,

227 
NULL
,

228 
NULL
,

229 
NULL
,

230 
NULL
,

231 #i‡
deföed
 ( 
SE_UK_EXT
 )

232 
NULL
,

233 
NULL
,

234 
NULL
,

235 
NULL
,

236 
NULL
,

237 
NULL
,

238 
NULL
,

239 
NULL
,

240 
NULL
,

242 
lﬂdc⁄åﬁ_LﬂdC⁄åﬁEvítCB
,

243 
lﬂdc⁄åﬁ_C™˚lLﬂdC⁄åﬁEvítCB
,

244 
lﬂdc⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvítsCB
,

245 
lﬂdc⁄åﬁ_Rï‹tEvítSètusCB
,

246 
lﬂdc⁄åﬁ_GëScheduÀdEvítCB
,

247 
NULL
,

248 
NULL
,

249 
NULL
,

250 
NULL
,

251 #i‡
deföed
 ( 
SE_UK_EXT
 )

252 
NULL
,

254 
NULL
,

255 
NULL
,

256 
NULL
,

257 
NULL
,

258 #i‡
deföed
 ( 
SE_UK_EXT
 )

259 
NULL
,

260 
NULL
,

261 
NULL
,

263 
NULL
,

264 
NULL
,

265 
NULL
,

266 
NULL
,

267 
NULL
,

268 
NULL
,

269 
NULL
,

270 
NULL
,

271 
NULL
,

272 #i‡
deföed
 ( 
SE_UK_EXT
 )

273 
NULL
,

274 
NULL
,

276 
NULL
,

277 
NULL
,

278 #i‡
deföed
 ( 
SE_UK_EXT
 )

279 
NULL
,

281 
NULL
,

282 #i‡
deföed
 ( 
SE_UK_EXT
 )

283 
NULL
,

284 
NULL
,

285 
NULL
,

286 
NULL
,

287 
NULL
,

288 
NULL
,

290 
NULL
,

291 
NULL
,

292 #i‡
deföed
 ( 
SE_UK_EXT
 )

293 
NULL
,

294 
NULL
,

295 
NULL
,

296 
NULL
,

297 
NULL
,

298 
NULL
,

299 
NULL
,

300 
NULL
,

301 
NULL
,

302 
NULL
,

303 
NULL
,

304 
NULL
,

305 
NULL
,

306 
NULL
,

307 
NULL
,

308 
NULL
,

309 
NULL
,

310 
NULL
,

311 
NULL
,

312 
NULL
,

313 
NULL
,

314 
NULL
,

315 
NULL
,

316 
NULL
,

317 
NULL
,

318 
NULL
,

319 
NULL
,

320 
NULL
,

321 
NULL
,

334 
	$lﬂdc⁄åﬁ_Inô
–
uöt8
 
èsk_id
 )

336 
lﬂdC⁄åﬁTaskID
 = 
èsk_id
;

339 
ESPAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

340 
ESPAddr
.
ídPoöt
 = 
LOADCONTROL_ENDPOINT
;

341 
ESPAddr
.
addr
.
sh‹tAddr
 = 0;

344 
	`z˛SE_Inô
–&
lﬂdC⁄åﬁSim∂eDesc
 );

347 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
LOADCONTROL_ENDPOINT
, &
lﬂdc⁄åﬁ_GíCmdCÆlbacks
 );

350 
	`z˛SE_Regi°îCmdCÆlbacks
–
LOADCONTROL_ENDPOINT
, &
lﬂdc⁄åﬁ_SECmdCÆlbacks
 );

353 
	`z˛_ªgi°îAârLi°
–
LOADCONTROL_ENDPOINT
, 
LOADCONTROL_MAX_ATTRIBUTES
, 
lﬂdC⁄åﬁAârs
 );

356 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
LOADCONTROL_ENDPOINT
, 
LOADCONTROL_MAX_OPTIONS
, 
lﬂdC⁄åﬁO±i⁄s
 );

359 
	`z˛_ªgi°îVÆid©eAârD©a
–
lﬂdc⁄åﬁ_VÆid©eAârD©aCB
 );

362 
	`z˛_ªgi°îF‹Msg
–
lﬂdC⁄åﬁTaskID
 );

365 
	`Regi°îF‹Keys
–
lﬂdC⁄åﬁTaskID
 );

368 
	`ZDO_Regi°îF‹ZDOMsg
(
èsk_id
, 
M©ch_Desc_r•
);

371 
	`oßl_°¨t_timîEx
–
lﬂdC⁄åﬁTaskID
, 
LOADCONTROL_UPDATE_TIME_EVT
, 
LOADCONTROL_UPDATE_TIME_PERIOD
 );

372 
	}
}

384 
uöt16
 
	$lﬂdc⁄åﬁ_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

386 
afIncomögMSGPackë_t
 *
MSGpkt
;

388 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

390  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
lﬂdC⁄åﬁTaskID
 )) )

392  
MSGpkt
->
hdr
.
evít
 )

394 
ZDO_CB_MSG
:

395 
	`lﬂdc⁄åﬁ_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

398 
ZCL_INCOMING_MSG
:

400 
	`lﬂdc⁄åﬁ_Pro˚ssZCLMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

403 
KEY_CHANGE
:

404 
	`lﬂdc⁄åﬁ_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

407 
ZDO_STATE_CHANGE
:

408 i‡(
DEV_ROUTER
 =(
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
))

410 #i‡
SECURE


413 
lökKeySètus
 = 
	`lﬂdc⁄åﬁ_KeyE°ablish_Rëu∫LökKey
(
ESPAddr
.
addr
.
sh‹tAddr
);

415 i‡(
lökKeySètus
 !
ZSuc˚ss
)

417 
cId_t
 
cbkeClu°î
 = 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
;

418 
zAddrTy≥_t
 
d°Addr
;

421 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

422 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

423 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
, 
ZCL_SE_PROFILE_ID
,

424 1, &
cbkeClu°î
, 0, 
NULL
, 
FALSE
 );

431 #i‡
	`deföed
–
ZCL_KEY_ESTABLISH
 )

432 
ZCL_KEY_ESTABLISH_IND
:

433 i‡((
MSGpkt
->
hdr
.
°©us
Ë=
TîmKeySètus_Suc˚ss
)

435 
ESPAddr
.
ídPoöt
 = 
LOADCONTROL_ENDPOINT
;

446 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

450  (
evíts
 ^ 
SYS_EVENT_MSG
);

454 i‡–
evíts
 & 
LOADCONTROL_KEY_ESTABLISHMENT_REQUEST_EVT
 )

456 
	`z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
lﬂdC⁄åﬁTaskID
, &
ESPAddr
, 
lﬂdC⁄åﬁTønsID
);

458  ( 
evíts
 ^ 
LOADCONTROL_KEY_ESTABLISHMENT_REQUEST_EVT
 );

462 i‡–
evíts
 & 
LOADCONTROL_IDENTIFY_TIMEOUT_EVT
 )

464 i‡–
lﬂdC⁄åﬁIdítifyTime
 > 0 )

466 
lﬂdC⁄åﬁIdítifyTime
--;

468 
	`lﬂdc⁄åﬁ_Pro˚ssIdítifyTimeCh™ge
();

470  ( 
evíts
 ^ 
LOADCONTROL_IDENTIFY_TIMEOUT_EVT
 );

474 i‡–
evíts
 & 
LOADCONTROL_UPDATE_TIME_EVT
 )

476 
lﬂdC⁄åﬁTime
 = 
	`oßl_gëClock
();

477 
	`oßl_°¨t_timîEx
–
lﬂdC⁄åﬁTaskID
, 
LOADCONTROL_UPDATE_TIME_EVT
, 
LOADCONTROL_UPDATE_TIME_PERIOD
 );

479  ( 
evíts
 ^ 
LOADCONTROL_UPDATE_TIME_EVT
 );

483 i‡–
evíts
 & 
LOADCONTROL_LOAD_CTRL_EVT
 )

491 
r•
.
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_COMPLETED
;

492 
	`z˛SE_LﬂdC⁄åﬁ_Síd_Rï‹tEvítSètus
–
LOADCONTROL_ENDPOINT
, &
ESPAddr
,

493 &
r•
, 
FALSE
, 
lﬂdC⁄åﬁTønsID
 );

495 
	`HÆLcdWrôeSåög
("Lﬂd EvàCom∂ëe", 
HAL_LCD_LINE_3
);

497 
	`HÆLedSë
(
HAL_LED_4
, 
HAL_LED_MODE_OFF
);

499  ( 
evíts
 ^ 
LOADCONTROL_LOAD_CTRL_EVT
 );

505 
	}
}

516 
	$lﬂdc⁄åﬁ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
pMsg
 )

518 i‡(
pMsg
->
˛u°îID
 =
M©ch_Desc_r•
)

520 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
pMsg
 );

522 i‡(
pR•
)

524 i‡(
pR•
->
˙t
)

527 
ESPAddr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

528 
ESPAddr
.
addr
.
sh‹tAddr
 = 
pMsg
->
§cAddr
.addr.shortAddr;

531 
	`oßl_£t_evít
–
lﬂdC⁄åﬁTaskID
, 
LOADCONTROL_KEY_ESTABLISHMENT_REQUEST_EVT
);

533 
	`oßl_mem_‰ì
(
pR•
);

536 
	}
}

547 
	$lﬂdc⁄åﬁ_Pro˚ssIdítifyTimeCh™ge
( )

549 i‡–
lﬂdC⁄åﬁIdítifyTime
 > 0 )

551 
	`oßl_°¨t_timîEx
–
lﬂdC⁄åﬁTaskID
, 
LOADCONTROL_IDENTIFY_TIMEOUT_EVT
, 1000 );

552 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

556 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

557 
	`oßl_°›_timîEx
–
lﬂdC⁄åﬁTaskID
, 
LOADCONTROL_IDENTIFY_TIMEOUT_EVT
 );

559 
	}
}

561 #i‡
SECURE


571 
uöt8
 
	$lﬂdc⁄åﬁ_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 )

573 
uöt8
 
°©us
 = 
ZFaûuª
;

574 
AddrMgrE¡ry_t
 
íåy
;

578 
íåy
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

579 
íåy
.
nwkAddr
 = 
sh‹tAddr
;

581 i‡–
	`AddrMgrE¡ryLookupNwk
–&
íåy
 ) )

584 i‡–
	`APSME_IsLökKeyVÆid
–
íåy
.
extAddr
 ) =
TRUE
 )

586 
°©us
 = 
ZSuc˚ss
;

592 
°©us
 = 
ZInvÆidP¨amëî
;

595  
°©us
;

596 
	}
}

613 
	$lﬂdc⁄åﬁ_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

616 i‡–
shi·
 )

618 i‡–
keys
 & 
HAL_KEY_SW_1
 )

621 i‡–
keys
 & 
HAL_KEY_SW_2
 )

624 i‡–
keys
 & 
HAL_KEY_SW_3
 )

627 i‡–
keys
 & 
HAL_KEY_SW_4
 )

633 i‡–
keys
 & 
HAL_KEY_SW_1
 )

635 
	`ZDOInôDevi˚
(0);

638 i‡–
keys
 & 
HAL_KEY_SW_2
 )

643 i‡–
keys
 & 
HAL_KEY_SW_3
 )

648 i‡–
keys
 & 
HAL_KEY_SW_4
 )

653 
	}
}

666 
uöt8
 
	$lﬂdc⁄åﬁ_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 )

668 
uöt8
 
vÆid
 = 
TRUE
;

670  
pAârInfo
->
d©aTy≥
 )

672 
ZCL_DATATYPE_BOOLEAN
:

673 i‡––*(
pAârInfo
->
©åD©a
) != 0 ) && ( *(pAttrInfo->attrData) != 1 ) )

674 
vÆid
 = 
FALSE
;

681  ( 
vÆid
 );

682 
	}
}

694 
	$lﬂdc⁄åﬁ_BasicRe£tCB
( )

697 
	}
}

709 
	$lﬂdc⁄åﬁ_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

711 
lﬂdC⁄åﬁIdítifyTime
 = 
pCmd
->
idítifyTime
;

712 
	`lﬂdc⁄åﬁ_Pro˚ssIdítifyTimeCh™ge
();

713 
	}
}

725 
	$lﬂdc⁄åﬁ_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

728 
	}
}

741 
	$lﬂdc⁄åﬁ_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 )

744 
	}
}

746 #ifde‡
SE_UK_EXT


761 
	$lﬂdc⁄åﬁ_GëEvítLogCB
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
§cAddr
,

762 
z˛GëEvítLog_t
 *
pEvítLog
, 
uöt8
 
£qNum
 )

771 
	}
}

785 
	$lﬂdc⁄åﬁ_PublishEvítLogCB
–
afAddrTy≥_t
 *
§cAddr
, 
z˛PublishEvítLog_t
 *
pEvítLog
 )

788 
	}
}

791 #i‡
deföed
 (
ZCL_LOAD_CONTROL
)

809 
	$lﬂdc⁄åﬁ_SídRï‹tEvítSètus
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
,

810 
uöt32
 
evítID
, uöt32 
°¨tTime
,

811 
uöt8
 
evítSètus
, uöt8 
¸ôiˇlôyLevñ
,

812 
uöt8
 
evítC⁄åﬁ
 )

816 
r•
.
issuîEvítID
 = 
evítID
;

817 
r•
.
evítSèπTime
 = 
°¨tTime
;

818 
r•
.
¸ôiˇlôyLevñAµlõd
 = 
¸ôiˇlôyLevñ
;

819 
r•
.
evítC⁄åﬁ
 =ÉventControl;

820 
r•
.
evítSètus
 =ÉventStatus;

821 
r•
.
sig«tuªTy≥
 = 
SE_PROFILE_SIGNATURE_TYPE_ECDSA
;

825 
	`oßl_mem˝y
–
r•
.
sig«tuª
, 
lﬂdC⁄åﬁSig«tuª
, 
SE_PROFILE_SIGNATURE_LENGTH
 );

828 
r•
.
coﬁögTem≥øtuªSëPoötAµlõd
 = 
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
;

829 
r•
.
hótögTem≥øtuªSëPoötAµlõd
 = 
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
;

830 
r•
.
avîageLﬂdAdju°mít
 = 
SE_OPTIONAL_FIELD_INT8
;

831 
r•
.
dutyCy˛eAµlõd
 = 
SE_OPTIONAL_FIELD_UINT8
;

837 
	`z˛SE_LﬂdC⁄åﬁ_Síd_Rï‹tEvítSètus
–
LOADCONTROL_ENDPOINT
, 
§cAddr
,

838 &
r•
, 
FALSE
, 
£qNum
 );

839 
	}
}

856 
	$lﬂdc⁄åﬁ_LﬂdC⁄åﬁEvítCB
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

857 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
°©us
,

858 
uöt8
 
£qNum
)

860 #i‡
	`deföed
 ( 
ZCL_LOAD_CONTROL
 )

864 
uöt8
 
evítSètus
;

866 i‡–
°©us
 =
ZCL_STATUS_INVALID_FIELD
 )

870 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_REJECTED
;

874 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_RECEIVED
;

878 
	`lﬂdc⁄åﬁ_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvít
,

879 
pCmd
->
°¨tTime
, 
evítSètus
,

880 
pCmd
->
¸ôiˇlôyLevñ
,ÖCmd->
evítC⁄åﬁ
);

883 i‡–
°©us
 !
ZCL_STATUS_INVALID_FIELD
 )

886 i‡–
pCmd
->
issuîEvít
 =
LOADCONTROL_EVENT_ID
 )

888 i‡–
pCmd
->
°¨tTime
 =
START_TIME_NOW
 )

891 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_STARTED
;

892 
	`lﬂdc⁄åﬁ_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvít
,

893 
pCmd
->
°¨tTime
, 
evítSètus
,

894 
pCmd
->
¸ôiˇlôyLevñ
,ÖCmd->
evítC⁄åﬁ
);

895 i‡–
pCmd
->
devi˚GroupCœss
 =
ONOFF_LOAD_DEVICE_CLASS
 )

897 
	`HÆLcdWrôeSåög
("Lﬂd EvàSèπed", 
HAL_LCD_LINE_3
);

899 i‡–
pCmd
->
devi˚GroupCœss
 =
HVAC_DEVICE_CLASS
 )

901 
	`HÆLcdWrôeSåög
("PCT EvàSèπed", 
HAL_LCD_LINE_3
);

903 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0, 50, 500 );

905 
	`oßl_°¨t_timîEx
–
lﬂdC⁄åﬁTaskID
, 
LOADCONTROL_LOAD_CTRL_EVT
,

906 (
LOADCONTROL_LOAD_CTRL_PERIOD
 * (
pCmd
->
duøti⁄InMöuãs
)) );

911 
	}
}

926 
	$lﬂdc⁄åﬁ_C™˚lLﬂdC⁄åﬁEvítCB
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

927 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

929 #i‡
	`deföed
 ( 
ZCL_LOAD_CONTROL
 )

951 
	`lﬂdc⁄åﬁ_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvítID
,

952 
SE_OPTIONAL_FIELD_UINT32
,

953 
EVENT_STATUS_LOAD_CONTROL_EVENT_RECEIVED
,

954 
SE_OPTIONAL_FIELD_UINT8
,

955 
SE_OPTIONAL_FIELD_UINT8
 );

960 
	}
}

975 
	$lﬂdc⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvítsCB
–
z˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 *
pCmd
,

976 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

982 
	}
}

997 
	$lﬂdc⁄åﬁ_Rï‹tEvítSètusCB
–
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

998 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
)

1001 
	}
}

1015 
	$lﬂdc⁄åﬁ_GëScheduÀdEvítCB
–
z˛CCGëScheduÀdEvít_t
 *
pCmd
,

1016 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1019 
	}
}

1036 
	$lﬂdc⁄åﬁ_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

1038  
pInMsg
->
z˛Hdr
.
comm™dID
 )

1040 #i‡
	`deföed
 ( 
ZCL_READ
 )

1041 
ZCL_CMD_READ_RSP
:

1042 
	`lﬂdc⁄åﬁ_Pro˚ssInRódR•Cmd
–
pInMsg
 );

1045 #i‡
	`deföed
 ( 
ZCL_WRITE
 )

1046 
ZCL_CMD_WRITE_RSP
:

1047 
	`lﬂdc⁄åﬁ_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

1050 
ZCL_CMD_DEFAULT_RSP
:

1051 
	`lﬂdc⁄åﬁ_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

1053 #i‡
	`deföed
 ( 
ZCL_DISCOVER
 )

1054 
ZCL_CMD_DISCOVER_RSP
:

1055 
	`lﬂdc⁄åﬁ_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

1062 i‡–
pInMsg
->
©åCmd
 !
NULL
 )

1065 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

1066 
pInMsg
->
©åCmd
 = 
NULL
;

1068 
	}
}

1070 #i‡
deföed
 ( 
ZCL_READ
 )

1080 
uöt8
 
	$lﬂdc⁄åﬁ_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1082 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

1083 
uöt8
 
i
;

1085 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1086 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

1093  
TRUE
;

1094 
	}
}

1097 #i‡
deföed
 ( 
ZCL_WRITE
 )

1107 
uöt8
 
	$lﬂdc⁄åﬁ_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1109 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

1110 
uöt8
 
i
;

1112 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1113 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

1119  
TRUE
;

1120 
	}
}

1133 
uöt8
 
	$lﬂdc⁄åﬁ_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1139  
TRUE
;

1140 
	}
}

1142 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

1152 
uöt8
 
	$lﬂdc⁄åﬁ_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1154 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

1155 
uöt8
 
i
;

1157 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1158  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

1163  
TRUE
;

1164 
	}
}

	@Projects/zstack/SE/SampleApp/Source/LoadControl/loadcontrol.h

40 #i‚de‡
LOADCONTROL_H


41 
	#LOADCONTROL_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#LOADCONTROL_ENDPOINT
 0x09

	)

58 
	#LOADCONTROL_MAX_ATTRIBUTES
 16

	)

59 
	#LOADCONTROL_MAX_OPTIONS
 2

	)

61 
	#LOADCONTROL_UPDATE_TIME_PERIOD
 1000

62 
	#LOADCONTROL_LOAD_CTRL_PERIOD
 60000

63 
	#LOADCONTROL_EVENT_ID
 0x12345678

64 
	#START_TIME_NOW
 0x00000000

65 
	#HVAC_DEVICE_CLASS
 0x000001

66 
	#ONOFF_LOAD_DEVICE_CLASS
 0x000080

67 

	)

69 
	#LOADCONTROL_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

70 
	#LOADCONTROL_UPDATE_TIME_EVT
 0x0002

	)

71 
	#LOADCONTROL_KEY_ESTABLISHMENT_REQUEST_EVT
 0x0004

	)

72 
	#LOADCONTROL_LOAD_CTRL_EVT
 0x0008

	)

87 
Sim∂eDes¸ùti⁄F‹m©_t
 
lﬂdC⁄åﬁSim∂eDesc
;

88 
CONST
 
z˛AârRec_t
 
lﬂdC⁄åﬁAârs
[];

89 
z˛O±i⁄Rec_t
 
lﬂdC⁄åﬁO±i⁄s
[];

90 
uöt8
 
lﬂdC⁄åﬁDevi˚E«bÀd
;

91 
uöt16
 
lﬂdC⁄åﬁTønsôi⁄Time
;

92 
uöt16
 
lﬂdC⁄åﬁIdítifyTime
;

93 
uöt32
 
lﬂdC⁄åﬁTime
;

94 
uöt8
 
lﬂdC⁄åﬁSig«tuª
[];

102 
lﬂdc⁄åﬁ_Inô
–
uöt8
 
èsk_id
 );

107 
uöt16
 
lﬂdc⁄åﬁ_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

113 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/LoadControl/loadcontrol_data.c

45 
	~"OSAL.h
"

46 
	~"ZDC⁄fig.h
"

48 
	~"£.h
"

49 
	~"lﬂdc⁄åﬁ.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_£.h
"

52 
	~"z˛_key_e°ablish.h
"

57 
	#LOADCONTROL_DEVICE_VERSION
 0

	)

58 
	#LOADCONTROL_FLAGS
 0

	)

60 
	#LOADCONTROL_HWVERSION
 1

	)

61 
	#LOADCONTROL_ZCLVERSION
 1

	)

75 c⁄° 
uöt8
 
	glﬂdC⁄åﬁZCLVîsi⁄
 = 
LOADCONTROL_ZCLVERSION
;

76 c⁄° 
uöt8
 
	glﬂdC⁄åﬁHWVîsi⁄
 = 
LOADCONTROL_HWVERSION
;

77 c⁄° 
uöt8
 
	glﬂdC⁄åﬁM™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

78 c⁄° 
uöt8
 
	glﬂdC⁄åﬁModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

79 c⁄° 
uöt8
 
	glﬂdC⁄åﬁD©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

80 c⁄° 
uöt8
 
	glﬂdC⁄åﬁPowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

82 
uöt8
 
	glﬂdC⁄åﬁLoˇti⁄Des¸ùti⁄
[] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

83 
uöt8
 
	glﬂdC⁄åﬁPhysiˇlEnvú⁄mít
 = 
PHY_UNSPECIFIED_ENV
;

84 
uöt8
 
	glﬂdC⁄åﬁDevi˚E«bÀd
 = 
DEVICE_ENABLED
;

87 
uöt16
 
	glﬂdC⁄åﬁIdítifyTime
 = 0;

88 
uöt32
 
	glﬂdC⁄åﬁTime
 = 0;

89 
uöt8
 
	glﬂdC⁄åﬁTimeSètus
 = 0x01;

92 
uöt8
 
	glﬂdC⁄åﬁUtûôyDeföedGroup
 = 0x00;

93 
uöt8
 
	glﬂdC⁄åﬁSèπR™domizeMöuãs
 = 0x00;

94 
uöt8
 
	glﬂdC⁄åﬁSt›R™domizeMöuãs
 = 0x00;

95 
uöt8
 
	glﬂdC⁄åﬁSig«tuª
[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,

99 
uöt16
 
	glﬂdC⁄åﬁKeyE°ablishmítSuôe
 = 
CERTIFICATE_BASED_KEY_ESTABLISHMENT
;

104 
CONST
 
z˛AârRec_t
 
	glﬂdC⁄åﬁAârs
[
LOADCONTROL_MAX_ATTRIBUTES
] =

109 
ZCL_CLUSTER_ID_GEN_BASIC
,

111 
ATTRID_BASIC_ZCL_VERSION
,

112 
ZCL_DATATYPE_UINT8
,

113 
ACCESS_CONTROL_READ
,

114 (*)&
lﬂdC⁄åﬁZCLVîsi⁄


118 
ZCL_CLUSTER_ID_GEN_BASIC
,

120 
ATTRID_BASIC_HW_VERSION
,

121 
ZCL_DATATYPE_UINT8
,

122 
ACCESS_CONTROL_READ
,

123 (*)&
lﬂdC⁄åﬁHWVîsi⁄


127 
ZCL_CLUSTER_ID_GEN_BASIC
,

129 
ATTRID_BASIC_MANUFACTURER_NAME
,

130 
ZCL_DATATYPE_CHAR_STR
,

131 
ACCESS_CONTROL_READ
,

132 (*)
lﬂdC⁄åﬁM™uÁ˘uªrName


136 
ZCL_CLUSTER_ID_GEN_BASIC
,

138 
ATTRID_BASIC_MODEL_ID
,

139 
ZCL_DATATYPE_CHAR_STR
,

140 
ACCESS_CONTROL_READ
,

141 (*)
lﬂdC⁄åﬁModñId


145 
ZCL_CLUSTER_ID_GEN_BASIC
,

147 
ATTRID_BASIC_DATE_CODE
,

148 
ZCL_DATATYPE_CHAR_STR
,

149 
ACCESS_CONTROL_READ
,

150 (*)
lﬂdC⁄åﬁD©eCode


154 
ZCL_CLUSTER_ID_GEN_BASIC
,

156 
ATTRID_BASIC_POWER_SOURCE
,

157 
ZCL_DATATYPE_ENUM8
,

158 
ACCESS_CONTROL_READ
,

159 (*)&
lﬂdC⁄åﬁPowîSour˚


163 
ZCL_CLUSTER_ID_GEN_BASIC
,

165 
ATTRID_BASIC_LOCATION_DESC
,

166 
ZCL_DATATYPE_CHAR_STR
,

167 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

168 (*)
lﬂdC⁄åﬁLoˇti⁄Des¸ùti⁄


172 
ZCL_CLUSTER_ID_GEN_BASIC
,

174 
ATTRID_BASIC_PHYSICAL_ENV
,

175 
ZCL_DATATYPE_ENUM8
,

176 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

177 (*)&
lﬂdC⁄åﬁPhysiˇlEnvú⁄mít


181 
ZCL_CLUSTER_ID_GEN_BASIC
,

183 
ATTRID_BASIC_DEVICE_ENABLED
,

184 
ZCL_DATATYPE_BOOLEAN
,

185 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

186 (*)&
lﬂdC⁄åﬁDevi˚E«bÀd


192 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

194 
ATTRID_IDENTIFY_TIME
,

195 
ZCL_DATATYPE_UINT16
,

196 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

197 (*)&
lﬂdC⁄åﬁIdítifyTime


205 
ZCL_CLUSTER_ID_GEN_TIME
,

207 
ATTRID_TIME_TIME
,

208 
ZCL_DATATYPE_UTC
,

209 
ACCESS_CONTROL_READ
,

210 (*)&
lﬂdC⁄åﬁTime


216 
ZCL_CLUSTER_ID_GEN_TIME
,

218 
ATTRID_TIME_STATUS
,

219 
ZCL_DATATYPE_BITMAP8
,

220 
ACCESS_CONTROL_READ
,

221 (*)&
lﬂdC⁄åﬁTimeSètus


228 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

230 
ATTRID_SE_UTILITY_DEFINED_GROUP
,

231 
ZCL_DATATYPE_UINT8
,

232 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

233 (*)&
lﬂdC⁄åﬁUtûôyDeföedGroup


237 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

239 
ATTRID_SE_START_RANDOMIZE_MINUTES
,

240 
ZCL_DATATYPE_UINT8
,

241 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

242 (*)&
lﬂdC⁄åﬁSèπR™domizeMöuãs


246 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

248 
ATTRID_SE_STOP_RANDOMIZE_MINUTES
,

249 
ZCL_DATATYPE_UINT8
,

250 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

251 (*)&
lﬂdC⁄åﬁSt›R™domizeMöuãs


255 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

257 
ATTRID_KEY_ESTABLISH_SUITE
,

258 
ZCL_DATATYPE_BITMAP16
,

259 
ACCESS_CONTROL_READ
,

260 (*)&
lﬂdC⁄åﬁKeyE°ablishmítSuôe


268 
z˛O±i⁄Rec_t
 
	glﬂdC⁄åﬁO±i⁄s
[
LOADCONTROL_MAX_OPTIONS
] =

272 
ZCL_CLUSTER_ID_GEN_TIME
,

273 –
AF_EN_SECURITY
 ),

278 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

279 –
AF_EN_SECURITY
 ),

288 
	#LOADCONTROL_MAX_INCLUSTERS
 4

	)

289 c⁄° 
cId_t
 
	glﬂdC⁄åﬁInClu°îLi°
[
LOADCONTROL_MAX_INCLUSTERS
] =

291 
ZCL_CLUSTER_ID_GEN_BASIC
,

292 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

293 
ZCL_CLUSTER_ID_GEN_TIME
,

294 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL


297 
	#LOADCONTROL_MAX_OUTCLUSTERS
 4

	)

298 c⁄° 
cId_t
 
	glﬂdC⁄åﬁOutClu°îLi°
[
LOADCONTROL_MAX_OUTCLUSTERS
] =

300 
ZCL_CLUSTER_ID_GEN_BASIC
,

301 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

302 
ZCL_CLUSTER_ID_GEN_TIME
,

303 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL


306 
Sim∂eDes¸ùti⁄F‹m©_t
 
	glﬂdC⁄åﬁSim∂eDesc
 =

308 
LOADCONTROL_ENDPOINT
,

309 
ZCL_SE_PROFILE_ID
,

310 
ZCL_SE_DEVICEID_LOAD_CTRL_EXTENSION
,

311 
LOADCONTROL_DEVICE_VERSION
,

312 
LOADCONTROL_FLAGS
,

313 
LOADCONTROL_MAX_INCLUSTERS
,

314 (
cId_t
 *)
lﬂdC⁄åﬁInClu°îLi°
,

315 
LOADCONTROL_MAX_OUTCLUSTERS
,

316 (
cId_t
 *)
lﬂdC⁄åﬁOutClu°îLi°


	@Projects/zstack/SE/SampleApp/Source/PCT/OSAL_pct.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL_Tasks.h
"

48 #i‡
deföed
 ( 
MT_TASK
 )

49 
	~"MT_TASK.h
"

52 
	~"ZDAµ.h
"

53 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

57 
	~"≠s_‰ag.h
"

60 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

61 
	~"z˛_key_e°ablish.h
"

64 
	~"p˘.h
"

71 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

72 
macEvítLo›
,

73 
nwk_evít_lo›
,

74 
HÆ_Pro˚ssEvít
,

75 #i‡
deföed
–
MT_TASK
 )

76 
MT_Pro˚ssEvít
,

78 
APS_evít_lo›
,

79 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

80 
APSF_Pro˚ssEvít
,

82 
ZDAµ_evít_lo›
,

83 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

84 
ZDNwkMgr_evít_lo›
,

86 
z˛_evít_lo›
,

87 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

88 
z˛KeyE°ablish_evít_lo›
,

90 
p˘_evít_lo›


93 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

94 
uöt16
 *
	gèsksEvíts
;

109 
	$oßlInôTasks
( )

111 
uöt8
 
èskID
 = 0;

113 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

114 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

116 
	`macTaskInô
–
èskID
++ );

117 
	`nwk_öô
–
èskID
++ );

118 
	`HÆ_Inô
–
èskID
++ );

119 #i‡
	`deföed
–
MT_TASK
 )

120 
	`MT_TaskInô
–
èskID
++ );

122 
	`APS_Inô
–
èskID
++ );

123 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

124 
	`APSF_Inô
–
èskID
++ );

126 
	`ZDAµ_Inô
–
èskID
++ );

127 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

128 
	`ZDNwkMgr_Inô
–
èskID
++ );

130 
	`z˛_Inô
–
èskID
++ );

131 #i‡
	`deföed
 ( 
ZCL_KEY_ESTABLISH
 )

132 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

134 
	`p˘_Inô
–
èskID
 );

135 
	}
}

	@Projects/zstack/SE/SampleApp/Source/PCT/pct.c

63 
	~"OSAL.h
"

64 
	~"OSAL_Clock.h
"

65 
	~"ZDAµ.h
"

66 
	~"ZDObje˘.h
"

67 
	~"AddrMgr.h
"

69 
	~"£.h
"

70 
	~"p˘.h
"

71 
	~"z˛_gíîÆ.h
"

72 
	~"z˛_£.h
"

73 
	~"z˛_key_e°ablish.h
"

75 
	~"⁄bﬂrd.h
"

78 
	~"hÆ_lcd.h
"

79 
	~"hÆ_Àd.h
"

80 
	~"hÆ_key.h
"

88 
	#z˛_M™d©‹yRï‹èbÀAâribuã
–
a
 ) (á =
NULL
 )

	)

94 
	#p˘NwkSèã
 
devSèã


	)

112 
uöt8
 
	gp˘TaskID
;

113 
uöt8
 
	gp˘TønsID
;

114 
afAddrTy≥_t
 
	gESPAddr
;

115 #i‡
SECURE


116 
uöt8
 
	glökKeySètus
;

118 
z˛CCRï‹tEvítSètus_t
 
	gr•
;

123 
p˘_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

125 #i‡
SECURE


126 
uöt8
 
p˘_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 );

129 
p˘_Pro˚ssIdítifyTimeCh™ge
( );

136 
uöt8
 
p˘_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 );

139 
p˘_BasicRe£tCB
( );

140 
p˘_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

141 
p˘_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

142 
p˘_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 );

143 #ifde‡
SE_UK_EXT


144 
p˘_GëEvítLogCB
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
§cAddr
,

145 
z˛GëEvítLog_t
 *
pEvítLog
, 
uöt8
 
£qNum
 );

146 
p˘_PublishEvítLogCB
–
afAddrTy≥_t
 *
§cAddr
,

147 
z˛PublishEvítLog_t
 *
pEvítLog
 );

151 
p˘_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
pMsg
 );

155 
p˘_LﬂdC⁄åﬁEvítCB
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

156 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
°©us
, uöt8 
£qNum
 );

157 
p˘_C™˚lLﬂdC⁄åﬁEvítCB
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

158 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

159 
p˘_C™˚lAŒLﬂdC⁄åﬁEvítsCB
–
z˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 *
pCmd
,

160 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

161 
p˘_Rï‹tEvítSètusCB
–
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

162 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

163 
p˘_GëScheduÀdEvítCB
–
z˛CCGëScheduÀdEvít_t
 *
pCmd
,

164 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

165 #i‡
deföed
 ( 
SE_UK_EXT
 )

166 
p˘_GëPª∑yS«pshŸRe•⁄£CB
–
z˛CCGëPª∑yS«pshŸRe•⁄£_t
 *
pCmd
,

167 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

168 
p˘_Ch™gePaymítModeRe•⁄£CB
–
z˛CCCh™gePaymítModeRe•⁄£_t
 *
pCmd
,

169 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

170 
p˘_C⁄sumîT›upRe•⁄£CB
–
z˛CCC⁄sumîT›upRe•⁄£_t
 *
pCmd
,

171 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

172 
p˘_GëComm™dsCB
–
uöt8
 
¥ïayNŸifiˇti⁄Fœgs
,

173 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

174 
p˘_PublishT›upLogCB
–
z˛CCPublishT›upLog_t
 *
pCmd
,

175 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

176 
p˘_PublishDebtLogCB
–
z˛CCPublishDebtLog_t
 *
pCmd
,

177 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

184 
p˘_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
msg
 );

185 #i‡
deföed
 ( 
ZCL_READ
 )

186 
uöt8
 
p˘_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

188 #i‡
deföed
 ( 
ZCL_WRITE
 )

189 
uöt8
 
p˘_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

191 
uöt8
 
p˘_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

192 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

193 
uöt8
 
p˘_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

199 
z˛GíîÆ_AµCÆlbacks_t
 
	gp˘_GíCmdCÆlbacks
 =

201 
p˘_BasicRe£tCB
,

202 
p˘_IdítifyCB
,

203 
p˘_IdítifyQuîyR•CB
,

204 
NULL
,

205 
NULL
,

206 
NULL
,

207 
NULL
,

208 
NULL
,

209 
NULL
,

210 
NULL
,

211 
NULL
,

212 
NULL
,

213 
p˘_AœrmCB
,

214 #ifde‡
SE_UK_EXT


215 
p˘_GëEvítLogCB
,

216 
p˘_PublishEvítLogCB
,

218 
NULL
,

219 
NULL


225 
z˛SE_AµCÆlbacks_t
 
	gp˘_SECmdCÆlbacks
 =

227 
NULL
,

228 
NULL
,

229 #i‡
deföed
 ( 
SE_UK_EXT
 )

230 
NULL
,

231 
NULL
,

232 
NULL
,

233 
NULL
,

234 
NULL
,

235 
NULL
,

236 
NULL
,

237 
NULL
,

238 
NULL
,

239 
NULL
,

241 
NULL
,

242 
NULL
,

243 
NULL
,

244 
NULL
,

245 #i‡
deföed
 ( 
SE_UK_EXT
 )

246 
NULL
,

247 
NULL
,

248 
NULL
,

249 
NULL
,

250 
NULL
,

251 
NULL
,

252 
NULL
,

253 
NULL
,

254 
NULL
,

256 
p˘_LﬂdC⁄åﬁEvítCB
,

257 
p˘_C™˚lLﬂdC⁄åﬁEvítCB
,

258 
p˘_C™˚lAŒLﬂdC⁄åﬁEvítsCB
,

259 
p˘_Rï‹tEvítSètusCB
,

260 
p˘_GëScheduÀdEvítCB
,

261 
NULL
,

262 
NULL
,

263 
NULL
,

264 
NULL
,

265 #i‡
deföed
 ( 
SE_UK_EXT
 )

266 
NULL
,

268 
NULL
,

269 
NULL
,

270 
NULL
,

271 
NULL
,

272 #i‡
deföed
 ( 
SE_UK_EXT
 )

273 
NULL
,

274 
NULL
,

275 
NULL
,

277 
NULL
,

278 
NULL
,

279 
NULL
,

280 
NULL
,

281 
NULL
,

282 
NULL
,

283 
NULL
,

284 
NULL
,

285 
NULL
,

286 #i‡
deföed
 ( 
SE_UK_EXT
 )

287 
NULL
,

288 
NULL
,

290 
NULL
,

291 
NULL
,

292 #i‡
deföed
 ( 
SE_UK_EXT
 )

293 
NULL
,

295 
NULL
,

296 #i‡
deföed
 ( 
SE_UK_EXT
 )

297 
p˘_GëPª∑yS«pshŸRe•⁄£CB
,

298 
p˘_Ch™gePaymítModeRe•⁄£CB
,

299 
p˘_C⁄sumîT›upRe•⁄£CB
,

300 
p˘_GëComm™dsCB
,

301 
p˘_PublishT›upLogCB
,

302 
p˘_PublishDebtLogCB
,

304 
NULL
,

305 
NULL
,

306 #i‡
deföed
 ( 
SE_UK_EXT
 )

307 
NULL
,

308 
NULL
,

309 
NULL
,

310 
NULL
,

311 
NULL
,

312 
NULL
,

313 
NULL
,

314 
NULL
,

315 
NULL
,

316 
NULL
,

317 
NULL
,

318 
NULL
,

319 
NULL
,

320 
NULL
,

321 
NULL
,

322 
NULL
,

323 
NULL
,

324 
NULL
,

325 
NULL
,

326 
NULL
,

327 
NULL
,

328 
NULL
,

329 
NULL
,

330 
NULL
,

331 
NULL
,

332 
NULL
,

333 
NULL
,

334 
NULL
,

335 
NULL
,

348 
	$p˘_Inô
–
uöt8
 
èsk_id
 )

350 
p˘TaskID
 = 
èsk_id
;

353 
ESPAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

354 
ESPAddr
.
ídPoöt
 = 
PCT_ENDPOINT
;

355 
ESPAddr
.
addr
.
sh‹tAddr
 = 0;

358 
	`z˛SE_Inô
–&
p˘Sim∂eDesc
 );

361 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
PCT_ENDPOINT
, &
p˘_GíCmdCÆlbacks
 );

364 
	`z˛SE_Regi°îCmdCÆlbacks
–
PCT_ENDPOINT
, &
p˘_SECmdCÆlbacks
 );

367 
	`z˛_ªgi°îAârLi°
–
PCT_ENDPOINT
, 
PCT_MAX_ATTRIBUTES
, 
p˘Aârs
 );

370 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
PCT_ENDPOINT
, 
PCT_MAX_OPTIONS
, 
p˘O±i⁄s
 );

373 
	`z˛_ªgi°îVÆid©eAârD©a
–
p˘_VÆid©eAârD©aCB
 );

376 
	`z˛_ªgi°îF‹Msg
–
p˘TaskID
 );

379 
	`Regi°îF‹Keys
–
p˘TaskID
 );

382 
	`ZDO_Regi°îF‹ZDOMsg
(
èsk_id
, 
M©ch_Desc_r•
);

385 
	`oßl_°¨t_timîEx
–
p˘TaskID
, 
PCT_UPDATE_TIME_EVT
, 
PCT_UPDATE_TIME_PERIOD
 );

386 
	}
}

398 
uöt16
 
	$p˘_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

400 
afIncomögMSGPackë_t
 *
MSGpkt
;

402 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

404  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
p˘TaskID
 )) )

406  
MSGpkt
->
hdr
.
evít
 )

408 
ZDO_CB_MSG
:

409 
	`p˘_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

412 
ZCL_INCOMING_MSG
:

414 
	`p˘_Pro˚ssZCLMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

417 
KEY_CHANGE
:

418 
	`p˘_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

421 
ZDO_STATE_CHANGE
:

422 i‡(
DEV_END_DEVICE
 =(
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
))

424 #i‡
SECURE


427 
lökKeySètus
 = 
	`p˘_KeyE°ablish_Rëu∫LökKey
(
ESPAddr
.
addr
.
sh‹tAddr
);

429 i‡(
lökKeySètus
 !
ZSuc˚ss
)

431 
cId_t
 
cbkeClu°î
 = 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
;

432 
zAddrTy≥_t
 
d°Addr
;

435 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

436 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

437 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
, 
ZCL_SE_PROFILE_ID
,

438 1, &
cbkeClu°î
, 0, 
NULL
, 
FALSE
 );

443 
	`NLME_SëPﬁlR©e
 ( 
SE_DEVICE_POLL_RATE
 );

447 #i‡
	`deföed
–
ZCL_KEY_ESTABLISH
 )

448 
ZCL_KEY_ESTABLISH_IND
:

449 i‡((
MSGpkt
->
hdr
.
°©us
Ë=
TîmKeySètus_Suc˚ss
)

451 
ESPAddr
.
ídPoöt
 = 
PCT_ENDPOINT
;

462 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

467  (
evíts
 ^ 
SYS_EVENT_MSG
);

471 i‡–
evíts
 & 
PCT_KEY_ESTABLISHMENT_REQUEST_EVT
 )

473 
	`z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
p˘TaskID
, &
ESPAddr
, 
p˘TønsID
);

475  ( 
evíts
 ^ 
PCT_KEY_ESTABLISHMENT_REQUEST_EVT
 );

479 i‡–
evíts
 & 
PCT_IDENTIFY_TIMEOUT_EVT
 )

481 i‡–
p˘IdítifyTime
 > 0 )

483 
p˘IdítifyTime
--;

485 
	`p˘_Pro˚ssIdítifyTimeCh™ge
();

487  ( 
evíts
 ^ 
PCT_IDENTIFY_TIMEOUT_EVT
 );

491 i‡–
evíts
 & 
PCT_UPDATE_TIME_EVT
 )

493 
p˘Time
 = 
	`oßl_gëClock
();

494 
	`oßl_°¨t_timîEx
–
p˘TaskID
, 
PCT_UPDATE_TIME_EVT
, 
PCT_UPDATE_TIME_PERIOD
 );

496  ( 
evíts
 ^ 
PCT_UPDATE_TIME_EVT
 );

500 i‡–
evíts
 & 
PCT_LOAD_CTRL_EVT
 )

508 
r•
.
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_COMPLETED
;

509 
	`z˛SE_LﬂdC⁄åﬁ_Síd_Rï‹tEvítSètus
–
PCT_ENDPOINT
, &
ESPAddr
,

510 &
r•
, 
FALSE
, 
p˘TønsID
 );

512 
	`HÆLcdWrôeSåög
("PCT EvàCom∂ëe", 
HAL_LCD_LINE_3
);

514 
	`HÆLedSë
(
HAL_LED_4
, 
HAL_LED_MODE_OFF
);

516  ( 
evíts
 ^ 
PCT_LOAD_CTRL_EVT
 );

522 
	}
}

533 
	$p˘_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
pMsg
 )

535 i‡(
pMsg
->
˛u°îID
 =
M©ch_Desc_r•
)

537 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
pMsg
 );

539 i‡(
pR•
)

541 i‡(
pR•
->
˙t
)

544 
ESPAddr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

545 
ESPAddr
.
addr
.
sh‹tAddr
 = 
pMsg
->
§cAddr
.addr.shortAddr;

548 
	`oßl_£t_evít
–
p˘TaskID
, 
PCT_KEY_ESTABLISHMENT_REQUEST_EVT
);

550 
	`oßl_mem_‰ì
(
pR•
);

553 
	}
}

564 
	$p˘_Pro˚ssIdítifyTimeCh™ge
( )

566 i‡–
p˘IdítifyTime
 > 0 )

568 
	`oßl_°¨t_timîEx
–
p˘TaskID
, 
PCT_IDENTIFY_TIMEOUT_EVT
, 1000 );

569 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

573 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

574 
	`oßl_°›_timîEx
–
p˘TaskID
, 
PCT_IDENTIFY_TIMEOUT_EVT
 );

576 
	}
}

578 #i‡
SECURE


588 
uöt8
 
	$p˘_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 )

590 
uöt8
 
°©us
 = 
ZFaûuª
;

591 
AddrMgrE¡ry_t
 
íåy
;

595 
íåy
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

596 
íåy
.
nwkAddr
 = 
sh‹tAddr
;

598 i‡–
	`AddrMgrE¡ryLookupNwk
–&
íåy
 ) )

601 i‡–
	`APSME_IsLökKeyVÆid
–
íåy
.
extAddr
 ) =
TRUE
 )

603 
°©us
 = 
ZSuc˚ss
;

609 
°©us
 = 
ZInvÆidP¨amëî
;

612  
°©us
;

613 
	}
}

630 
	$p˘_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

633 i‡–
shi·
 )

635 i‡–
keys
 & 
HAL_KEY_SW_1
 )

638 i‡–
keys
 & 
HAL_KEY_SW_2
 )

641 i‡–
keys
 & 
HAL_KEY_SW_3
 )

644 i‡–
keys
 & 
HAL_KEY_SW_4
 )

650 i‡–
keys
 & 
HAL_KEY_SW_1
 )

652 
	`ZDOInôDevi˚
(0);

655 i‡–
keys
 & 
HAL_KEY_SW_2
 )

660 i‡–
keys
 & 
HAL_KEY_SW_3
 )

665 i‡–
keys
 & 
HAL_KEY_SW_4
 )

670 
	}
}

683 
uöt8
 
	$p˘_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 )

685 
uöt8
 
vÆid
 = 
TRUE
;

687  
pAârInfo
->
d©aTy≥
 )

689 
ZCL_DATATYPE_BOOLEAN
:

690 i‡––*(
pAârInfo
->
©åD©a
) != 0 ) && ( *(pAttrInfo->attrData) != 1 ) )

691 
vÆid
 = 
FALSE
;

698  ( 
vÆid
 );

699 
	}
}

711 
	$p˘_BasicRe£tCB
( )

714 
	}
}

726 
	$p˘_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

728 
p˘IdítifyTime
 = 
pCmd
->
idítifyTime
;

729 
	`p˘_Pro˚ssIdítifyTimeCh™ge
();

730 
	}
}

742 
	$p˘_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

745 
	}
}

758 
	$p˘_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 )

761 
	}
}

763 #ifde‡
SE_UK_EXT


778 
	$p˘_GëEvítLogCB
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
§cAddr
,

779 
z˛GëEvítLog_t
 *
pEvítLog
, 
uöt8
 
£qNum
 )

788 
	}
}

802 
	$p˘_PublishEvítLogCB
–
afAddrTy≥_t
 *
§cAddr
, 
z˛PublishEvítLog_t
 *
pEvítLog
 )

805 
	}
}

808 #i‡
deföed
 (
ZCL_LOAD_CONTROL
)

826 
	$p˘_SídRï‹tEvítSètus
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
,

827 
uöt32
 
evítID
, uöt32 
°¨tTime
,

828 
uöt8
 
evítSètus
, uöt8 
¸ôiˇlôyLevñ
,

829 
uöt8
 
evítC⁄åﬁ
 )

833 
r•
.
issuîEvítID
 = 
evítID
;

834 
r•
.
evítSèπTime
 = 
°¨tTime
;

835 
r•
.
¸ôiˇlôyLevñAµlõd
 = 
¸ôiˇlôyLevñ
;

836 
r•
.
evítC⁄åﬁ
 =ÉventControl;

837 
r•
.
evítSètus
 =ÉventStatus;

838 
r•
.
sig«tuªTy≥
 = 
SE_PROFILE_SIGNATURE_TYPE_ECDSA
;

842 
	`oßl_mem˝y
–
r•
.
sig«tuª
, 
p˘Sig«tuª
, 
SE_PROFILE_SIGNATURE_LENGTH
 );

845 
r•
.
coﬁögTem≥øtuªSëPoötAµlõd
 = 
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
;

846 
r•
.
hótögTem≥øtuªSëPoötAµlõd
 = 
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
;

847 
r•
.
avîageLﬂdAdju°mít
 = 
SE_OPTIONAL_FIELD_INT8
;

848 
r•
.
dutyCy˛eAµlõd
 = 
SE_OPTIONAL_FIELD_UINT8
;

854 
	`z˛SE_LﬂdC⁄åﬁ_Síd_Rï‹tEvítSètus
–
PCT_ENDPOINT
, 
§cAddr
,

855 &
r•
, 
FALSE
, 
£qNum
 );

856 
	}
}

873 
	$p˘_LﬂdC⁄åﬁEvítCB
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

874 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
°©us
,

875 
uöt8
 
£qNum
)

877 #i‡
	`deföed
 ( 
ZCL_LOAD_CONTROL
 )

881 
uöt8
 
evítSètus
;

883 i‡–
°©us
 =
ZCL_STATUS_INVALID_FIELD
 )

887 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_REJECTED
;

891 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_RECEIVED
;

895 
	`p˘_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvít
,

896 
pCmd
->
°¨tTime
, 
evítSètus
,

897 
pCmd
->
¸ôiˇlôyLevñ
,ÖCmd->
evítC⁄åﬁ
);

900 i‡–
°©us
 !
ZCL_STATUS_INVALID_FIELD
 )

903 i‡–
pCmd
->
issuîEvít
 =
LOADCONTROL_EVENT_ID
 )

905 i‡–
pCmd
->
°¨tTime
 =
START_TIME_NOW
 )

908 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_STARTED
;

909 
	`p˘_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvít
,

910 
pCmd
->
°¨tTime
, 
evítSètus
,

911 
pCmd
->
¸ôiˇlôyLevñ
,ÖCmd->
evítC⁄åﬁ
);

913 i‡–
pCmd
->
devi˚GroupCœss
 =
ONOFF_LOAD_DEVICE_CLASS
 )

915 
	`HÆLcdWrôeSåög
("Lﬂd EvàSèπed", 
HAL_LCD_LINE_3
);

917 i‡–
pCmd
->
devi˚GroupCœss
 =
HVAC_DEVICE_CLASS
 )

919 
	`HÆLcdWrôeSåög
("PCT EvàSèπed", 
HAL_LCD_LINE_3
);

922 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0, 50, 500 );

924 
	`oßl_°¨t_timîEx
–
p˘TaskID
, 
PCT_LOAD_CTRL_EVT
,

925 (
PCT_LOAD_CTRL_PERIOD
 * (
pCmd
->
duøti⁄InMöuãs
)) );

930 
	}
}

945 
	$p˘_C™˚lLﬂdC⁄åﬁEvítCB
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

946 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

948 #i‡
	`deföed
 ( 
ZCL_LOAD_CONTROL
 )

970 
	`p˘_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvítID
,

971 
SE_OPTIONAL_FIELD_UINT32
,

972 
EVENT_STATUS_LOAD_CONTROL_EVENT_RECEIVED
,

973 
SE_OPTIONAL_FIELD_UINT8
,

974 
SE_OPTIONAL_FIELD_UINT8
 );

978 
	}
}

993 
	$p˘_C™˚lAŒLﬂdC⁄åﬁEvítsCB
–
z˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 *
pCmd
,

994 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1000 
	}
}

1015 
	$p˘_Rï‹tEvítSètusCB
–
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

1016 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
)

1019 
	}
}

1033 
	$p˘_GëScheduÀdEvítCB
–
z˛CCGëScheduÀdEvít_t
 *
pCmd
,

1034 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1037 
	}
}

1039 #i‡
deföed
 ( 
SE_UK_EXT
 )

1052 
	$p˘_GëPª∑yS«pshŸRe•⁄£CB
–
z˛CCGëPª∑yS«pshŸRe•⁄£_t
 *
pCmd
,

1053 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1056 
	}
}

1070 
	$p˘_Ch™gePaymítModeRe•⁄£CB
–
z˛CCCh™gePaymítModeRe•⁄£_t
 *
pCmd
,

1071 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1074 
	}
}

1088 
	$p˘_C⁄sumîT›upRe•⁄£CB
–
z˛CCC⁄sumîT›upRe•⁄£_t
 *
pCmd
,

1089 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1092 
	}
}

1106 
	$p˘_GëComm™dsCB
–
uöt8
 
¥ïayNŸifiˇti⁄Fœgs
,

1107 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1110 
	}
}

1124 
	$p˘_PublishT›upLogCB
–
z˛CCPublishT›upLog_t
 *
pCmd
,

1125 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1128 
	}
}

1142 
	$p˘_PublishDebtLogCB
–
z˛CCPublishDebtLog_t
 *
pCmd
,

1143 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1146 
	}
}

1164 
	$p˘_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

1166  
pInMsg
->
z˛Hdr
.
comm™dID
 )

1168 #i‡
	`deföed
 ( 
ZCL_READ
 )

1169 
ZCL_CMD_READ_RSP
:

1170 
	`p˘_Pro˚ssInRódR•Cmd
–
pInMsg
 );

1173 #i‡
	`deföed
 ( 
ZCL_WRITE
 )

1174 
ZCL_CMD_WRITE_RSP
:

1175 
	`p˘_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

1178 
ZCL_CMD_DEFAULT_RSP
:

1179 
	`p˘_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

1181 #i‡
	`deföed
 ( 
ZCL_DISCOVER
 )

1182 
ZCL_CMD_DISCOVER_RSP
:

1183 
	`p˘_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

1190 i‡–
pInMsg
->
©åCmd
 !
NULL
 )

1193 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

1194 
pInMsg
->
©åCmd
 = 
NULL
;

1196 
	}
}

1198 #i‡
deföed
 ( 
ZCL_READ
 )

1208 
uöt8
 
	$p˘_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1210 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

1211 
uöt8
 
i
;

1213 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1214 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

1221  
TRUE
;

1222 
	}
}

1225 #i‡
deföed
 ( 
ZCL_WRITE
 )

1235 
uöt8
 
	$p˘_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1237 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

1238 
uöt8
 
i
;

1240 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1241 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

1247  
TRUE
;

1248 
	}
}

1261 
uöt8
 
	$p˘_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1267  
TRUE
;

1268 
	}
}

1270 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

1280 
uöt8
 
	$p˘_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1282 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

1283 
uöt8
 
i
;

1285 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1286  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

1291  
TRUE
;

1292 
	}
}

	@Projects/zstack/SE/SampleApp/Source/PCT/pct.h

40 #i‚de‡
PCT_H


41 
	#PCT_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#PCT_ENDPOINT
 0x09

	)

58 
	#PCT_MAX_ATTRIBUTES
 16

	)

60 
	#PCT_MAX_OPTIONS
 3

	)

62 
	#PCT_UPDATE_TIME_PERIOD
 1000

63 
	#PCT_LOAD_CTRL_PERIOD
 60000

	)

64 
	#LOADCONTROL_EVENT_ID
 0x12345678

65 
	#START_TIME_NOW
 0x00000000

66 
	#HVAC_DEVICE_CLASS
 0x000001

67 
	#ONOFF_LOAD_DEVICE_CLASS
 0x000080

68 
	#SE_DEVICE_POLL_RATE
 8000

69 

	)

71 
	#PCT_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

72 
	#PCT_UPDATE_TIME_EVT
 0x0002

	)

73 
	#PCT_KEY_ESTABLISHMENT_REQUEST_EVT
 0x0004

	)

74 
	#PCT_LOAD_CTRL_EVT
 0x0008

	)

89 
Sim∂eDes¸ùti⁄F‹m©_t
 
p˘Sim∂eDesc
;

90 
CONST
 
z˛AârRec_t
 
p˘Aârs
[];

91 
z˛O±i⁄Rec_t
 
p˘O±i⁄s
[];

92 
uöt8
 
p˘Devi˚E«bÀd
;

93 
uöt16
 
p˘Tønsôi⁄Time
;

94 
uöt16
 
p˘IdítifyTime
;

95 
uöt32
 
p˘Time
;

96 
uöt8
 
p˘Sig«tuª
[];

104 
p˘_Inô
–
uöt8
 
èsk_id
 );

109 
uöt16
 
p˘_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

115 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/PCT/pct_data.c

45 
	~"OSAL.h
"

46 
	~"ZDC⁄fig.h
"

48 
	~"£.h
"

49 
	~"p˘.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_£.h
"

52 
	~"z˛_key_e°ablish.h
"

57 
	#PCT_DEVICE_VERSION
 0

	)

58 
	#PCT_FLAGS
 0

	)

60 
	#PCT_HWVERSION
 1

	)

61 
	#PCT_ZCLVERSION
 1

	)

75 c⁄° 
uöt8
 
	gp˘ZCLVîsi⁄
 = 
PCT_ZCLVERSION
;

76 c⁄° 
uöt8
 
	gp˘HWVîsi⁄
 = 
PCT_HWVERSION
;

77 c⁄° 
uöt8
 
	gp˘M™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

78 c⁄° 
uöt8
 
	gp˘ModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

79 c⁄° 
uöt8
 
	gp˘D©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

80 c⁄° 
uöt8
 
	gp˘PowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

82 
uöt8
 
	gp˘Loˇti⁄Des¸ùti⁄
[] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

83 
uöt8
 
	gp˘PhysiˇlEnvú⁄mít
 = 
PHY_UNSPECIFIED_ENV
;

84 
uöt8
 
	gp˘Devi˚E«bÀd
 = 
DEVICE_ENABLED
;

87 
uöt16
 
	gp˘IdítifyTime
 = 0;

88 
uöt32
 
	gp˘Time
 = 0;

89 
uöt8
 
	gp˘TimeSètus
 = 0x01;

92 
uöt8
 
	gp˘UtûôyDeföedGroup
 = 0x00;

93 
uöt8
 
	gp˘SèπR™domizeMöuãs
 = 0x00;

94 
uöt8
 
	gp˘St›R™domizeMöuãs
 = 0x00;

95 
uöt8
 
	gp˘Sig«tuª
[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,

99 
uöt16
 
	gp˘KeyE°ablishmítSuôe
 = 
CERTIFICATE_BASED_KEY_ESTABLISHMENT
;

104 
CONST
 
z˛AârRec_t
 
	gp˘Aârs
[
PCT_MAX_ATTRIBUTES
] =

109 
ZCL_CLUSTER_ID_GEN_BASIC
,

111 
ATTRID_BASIC_ZCL_VERSION
,

112 
ZCL_DATATYPE_UINT8
,

113 
ACCESS_CONTROL_READ
,

114 (*)&
p˘ZCLVîsi⁄


118 
ZCL_CLUSTER_ID_GEN_BASIC
,

120 
ATTRID_BASIC_HW_VERSION
,

121 
ZCL_DATATYPE_UINT8
,

122 
ACCESS_CONTROL_READ
,

123 (*)&
p˘HWVîsi⁄


127 
ZCL_CLUSTER_ID_GEN_BASIC
,

129 
ATTRID_BASIC_MANUFACTURER_NAME
,

130 
ZCL_DATATYPE_CHAR_STR
,

131 
ACCESS_CONTROL_READ
,

132 (*)
p˘M™uÁ˘uªrName


136 
ZCL_CLUSTER_ID_GEN_BASIC
,

138 
ATTRID_BASIC_MODEL_ID
,

139 
ZCL_DATATYPE_CHAR_STR
,

140 
ACCESS_CONTROL_READ
,

141 (*)
p˘ModñId


145 
ZCL_CLUSTER_ID_GEN_BASIC
,

147 
ATTRID_BASIC_DATE_CODE
,

148 
ZCL_DATATYPE_CHAR_STR
,

149 
ACCESS_CONTROL_READ
,

150 (*)
p˘D©eCode


154 
ZCL_CLUSTER_ID_GEN_BASIC
,

156 
ATTRID_BASIC_POWER_SOURCE
,

157 
ZCL_DATATYPE_ENUM8
,

158 
ACCESS_CONTROL_READ
,

159 (*)&
p˘PowîSour˚


163 
ZCL_CLUSTER_ID_GEN_BASIC
,

165 
ATTRID_BASIC_LOCATION_DESC
,

166 
ZCL_DATATYPE_CHAR_STR
,

167 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

168 (*)
p˘Loˇti⁄Des¸ùti⁄


172 
ZCL_CLUSTER_ID_GEN_BASIC
,

174 
ATTRID_BASIC_PHYSICAL_ENV
,

175 
ZCL_DATATYPE_ENUM8
,

176 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

177 (*)&
p˘PhysiˇlEnvú⁄mít


181 
ZCL_CLUSTER_ID_GEN_BASIC
,

183 
ATTRID_BASIC_DEVICE_ENABLED
,

184 
ZCL_DATATYPE_BOOLEAN
,

185 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

186 (*)&
p˘Devi˚E«bÀd


192 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

194 
ATTRID_IDENTIFY_TIME
,

195 
ZCL_DATATYPE_UINT16
,

196 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

197 (*)&
p˘IdítifyTime


205 
ZCL_CLUSTER_ID_GEN_TIME
,

207 
ATTRID_TIME_TIME
,

208 
ZCL_DATATYPE_UTC
,

209 
ACCESS_CONTROL_READ
,

210 (*)&
p˘Time


216 
ZCL_CLUSTER_ID_GEN_TIME
,

218 
ATTRID_TIME_STATUS
,

219 
ZCL_DATATYPE_BITMAP8
,

220 
ACCESS_CONTROL_READ
,

221 (*)&
p˘TimeSètus


228 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

230 
ATTRID_SE_UTILITY_DEFINED_GROUP
,

231 
ZCL_DATATYPE_UINT8
,

232 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

233 (*)&
p˘UtûôyDeföedGroup


237 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

239 
ATTRID_SE_START_RANDOMIZE_MINUTES
,

240 
ZCL_DATATYPE_UINT8
,

241 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

242 (*)&
p˘SèπR™domizeMöuãs


246 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

248 
ATTRID_SE_STOP_RANDOMIZE_MINUTES
,

249 
ZCL_DATATYPE_UINT8
,

250 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

251 (*)&
p˘St›R™domizeMöuãs


255 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

257 
ATTRID_KEY_ESTABLISH_SUITE
,

258 
ZCL_DATATYPE_BITMAP16
,

259 
ACCESS_CONTROL_READ
,

260 (*)&
p˘KeyE°ablishmítSuôe


268 
z˛O±i⁄Rec_t
 
	gp˘O±i⁄s
[
PCT_MAX_OPTIONS
] =

272 
ZCL_CLUSTER_ID_GEN_TIME
,

273 –
AF_EN_SECURITY
 ),

278 
ZCL_CLUSTER_ID_SE_PRICING
,

279 –
AF_EN_SECURITY
 ),

282 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

283 –
AF_EN_SECURITY
 ),

292 
	#PCT_MAX_INCLUSTERS
 4

	)

293 c⁄° 
cId_t
 
	gp˘InClu°îLi°
[
PCT_MAX_INCLUSTERS
] =

295 
ZCL_CLUSTER_ID_GEN_BASIC
,

296 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

297 
ZCL_CLUSTER_ID_GEN_TIME
,

298 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL


301 
	#PCT_MAX_OUTCLUSTERS
 4

	)

302 c⁄° 
cId_t
 
	gp˘OutClu°îLi°
[
PCT_MAX_OUTCLUSTERS
] =

304 
ZCL_CLUSTER_ID_GEN_BASIC
,

305 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

306 
ZCL_CLUSTER_ID_GEN_TIME
,

307 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL


310 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gp˘Sim∂eDesc
 =

312 
PCT_ENDPOINT
,

313 
ZCL_SE_PROFILE_ID
,

314 
ZCL_SE_DEVICEID_PCT
,

315 
PCT_DEVICE_VERSION
,

316 
PCT_FLAGS
,

317 
PCT_MAX_INCLUSTERS
,

318 (
cId_t
 *)
p˘InClu°îLi°
,

319 
PCT_MAX_OUTCLUSTERS
,

320 (
cId_t
 *)
p˘OutClu°îLi°


	@Projects/zstack/SE/SampleApp/Source/RangeExt/OSAL_RangeExt.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL_Tasks.h
"

48 #i‡
deföed
 ( 
MT_TASK
 )

49 
	~"MT_TASK.h
"

52 
	~"ZDAµ.h
"

53 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

57 
	~"≠s_‰ag.h
"

60 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

61 
	~"z˛_key_e°ablish.h
"

64 
	~"øngìxt.h
"

71 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

72 
macEvítLo›
,

73 
nwk_evít_lo›
,

74 
HÆ_Pro˚ssEvít
,

75 #i‡
deföed
–
MT_TASK
 )

76 
MT_Pro˚ssEvít
,

78 
APS_evít_lo›
,

79 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

80 
APSF_Pro˚ssEvít
,

82 
ZDAµ_evít_lo›
,

83 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

84 
ZDNwkMgr_evít_lo›
,

86 
z˛_evít_lo›
,

87 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

88 
z˛KeyE°ablish_evít_lo›
,

90 
øngìxt_evít_lo›


93 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

94 
uöt16
 *
	gèsksEvíts
;

109 
	$oßlInôTasks
( )

111 
uöt8
 
èskID
 = 0;

113 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

114 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

116 
	`macTaskInô
–
èskID
++ );

117 
	`nwk_öô
–
èskID
++ );

118 
	`HÆ_Inô
–
èskID
++ );

119 #i‡
	`deföed
–
MT_TASK
 )

120 
	`MT_TaskInô
–
èskID
++ );

122 
	`APS_Inô
–
èskID
++ );

123 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

124 
	`APSF_Inô
–
èskID
++ );

126 
	`ZDAµ_Inô
–
èskID
++ );

127 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

128 
	`ZDNwkMgr_Inô
–
èskID
++ );

130 
	`z˛_Inô
–
èskID
++ );

131 #i‡
	`deföed
 ( 
ZCL_KEY_ESTABLISH
 )

132 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

134 
	`øngìxt_Inô
–
èskID
 );

135 
	}
}

	@Projects/zstack/SE/SampleApp/Source/RangeExt/rangeext.c

61 
	~"OSAL.h
"

62 
	~"OSAL_Clock.h
"

63 
	~"ZDAµ.h
"

64 
	~"ZDObje˘.h
"

65 
	~"AddrMgr.h
"

67 
	~"£.h
"

68 
	~"øngìxt.h
"

69 
	~"z˛_gíîÆ.h
"

70 
	~"z˛_key_e°ablish.h
"

72 
	~"⁄bﬂrd.h
"

75 
	~"hÆ_lcd.h
"

76 
	~"hÆ_Àd.h
"

77 
	~"hÆ_key.h
"

85 
	#z˛_M™d©‹yRï‹èbÀAâribuã
–
a
 ) (á =
NULL
 )

	)

91 
	#øngeExtNwkSèã
 
devSèã


	)

109 
uöt8
 
	gøngeExtTaskID
;

110 
uöt8
 
	gøngeExtTønsID
;

111 
afAddrTy≥_t
 
	gESPAddr
;

112 #i‡
SECURE


113 
uöt8
 
	glökKeySètus
;

119 
øngìxt_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

121 #i‡
SECURE


122 
uöt8
 
øngìxt_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 );

125 
øngìxt_Pro˚ssIdítifyTimeCh™ge
( );

132 
uöt8
 
øngìxt_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 );

135 
øngìxt_BasicRe£tCB
( );

136 
øngìxt_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

137 
øngìxt_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

138 
øngìxt_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 );

139 #ifde‡
SE_UK_EXT


140 
øngìxt_GëEvítLogCB
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
§cAddr
,

141 
z˛GëEvítLog_t
 *
pEvítLog
, 
uöt8
 
£qNum
 );

142 
øngìxt_PublishEvítLogCB
–
afAddrTy≥_t
 *
§cAddr
, 
z˛PublishEvítLog_t
 *
pEvítLog
 );

146 
øngìxt_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
pMsg
 );

152 
øngìxt_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
msg
 );

153 #i‡
deföed
 ( 
ZCL_READ
 )

154 
uöt8
 
øngìxt_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

156 #i‡
deföed
 ( 
ZCL_WRITE
 )

157 
uöt8
 
øngìxt_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

159 
uöt8
 
øngìxt_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

160 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

161 
uöt8
 
øngìxt_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

167 
z˛GíîÆ_AµCÆlbacks_t
 
	gøngìxt_GíCmdCÆlbacks
 =

169 
øngìxt_BasicRe£tCB
,

170 
øngìxt_IdítifyCB
,

171 
øngìxt_IdítifyQuîyR•CB
,

172 
NULL
,

173 
NULL
,

174 
NULL
,

175 
NULL
,

176 
NULL
,

177 
NULL
,

178 
NULL
,

179 
NULL
,

180 
NULL
,

181 
øngìxt_AœrmCB
,

182 #ifde‡
SE_UK_EXT


183 
øngìxt_GëEvítLogCB
,

184 
øngìxt_PublishEvítLogCB
,

186 
NULL
,

187 
NULL
,

199 
	$øngìxt_Inô
–
uöt8
 
èsk_id
 )

201 
øngeExtTaskID
 = 
èsk_id
;

204 
ESPAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

205 
ESPAddr
.
ídPoöt
 = 
RANGEEXT_ENDPOINT
;

206 
ESPAddr
.
addr
.
sh‹tAddr
 = 0;

209 
	`z˛SE_Inô
–&
øngeExtSim∂eDesc
 );

212 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
RANGEEXT_ENDPOINT
, &
øngìxt_GíCmdCÆlbacks
 );

215 
	`z˛_ªgi°îAârLi°
–
RANGEEXT_ENDPOINT
, 
RANGEEXT_MAX_ATTRIBUTES
, 
øngeExtAârs
 );

218 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
RANGEEXT_ENDPOINT
, 
RANGEEXT_MAX_OPTIONS
, 
øngeExtO±i⁄s
 );

221 
	`z˛_ªgi°îVÆid©eAârD©a
–
øngìxt_VÆid©eAârD©aCB
 );

224 
	`z˛_ªgi°îF‹Msg
–
øngeExtTaskID
 );

227 
	`Regi°îF‹Keys
–
øngeExtTaskID
 );

230 
	`ZDO_Regi°îF‹ZDOMsg
(
èsk_id
, 
M©ch_Desc_r•
);

231 
	}
}

243 
uöt16
 
	$øngìxt_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

245 
afIncomögMSGPackë_t
 *
MSGpkt
;

247 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

249  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
øngeExtTaskID
 )) )

251  
MSGpkt
->
hdr
.
evít
 )

253 
ZDO_CB_MSG
:

254 
	`øngìxt_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

257 
ZCL_INCOMING_MSG
:

259 
	`øngìxt_Pro˚ssZCLMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

262 
KEY_CHANGE
:

263 
	`øngìxt_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

266 
ZDO_STATE_CHANGE
:

267 i‡(
DEV_ROUTER
 =(
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
))

269 #i‡
SECURE


272 
lökKeySètus
 = 
	`øngìxt_KeyE°ablish_Rëu∫LökKey
(
ESPAddr
.
addr
.
sh‹tAddr
);

274 i‡(
lökKeySètus
 !
ZSuc˚ss
)

276 
cId_t
 
cbkeClu°î
 = 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
;

277 
zAddrTy≥_t
 
d°Addr
;

280 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

281 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

282 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
, 
ZCL_SE_PROFILE_ID
,

283 1, &
cbkeClu°î
, 0, 
NULL
, 
FALSE
 );

290 #i‡
	`deföed
–
ZCL_KEY_ESTABLISH
 )

291 
ZCL_KEY_ESTABLISH_IND
:

292 i‡((
MSGpkt
->
hdr
.
°©us
Ë=
TîmKeySètus_Suc˚ss
)

294 
ESPAddr
.
ídPoöt
 = 
RANGEEXT_ENDPOINT
;

305 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

310  (
evíts
 ^ 
SYS_EVENT_MSG
);

314 i‡–
evíts
 & 
RANGEEXT_KEY_ESTABLISHMENT_REQUEST_EVT
 )

316 
	`z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
øngeExtTaskID
, &
ESPAddr
, 
øngeExtTønsID
);

318  ( 
evíts
 ^ 
RANGEEXT_KEY_ESTABLISHMENT_REQUEST_EVT
 );

323 i‡–
evíts
 & 
RANGEEXT_IDENTIFY_TIMEOUT_EVT
 )

325 i‡–
øngeExtIdítifyTime
 > 0 )

327 
øngeExtIdítifyTime
--;

329 
	`øngìxt_Pro˚ssIdítifyTimeCh™ge
();

331  ( 
evíts
 ^ 
RANGEEXT_IDENTIFY_TIMEOUT_EVT
 );

336 
	}
}

347 
	$øngìxt_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
pMsg
 )

349 i‡(
pMsg
->
˛u°îID
 =
M©ch_Desc_r•
)

351 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
pMsg
 );

353 i‡(
pR•
)

355 i‡(
pR•
->
˙t
)

358 
ESPAddr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

359 
ESPAddr
.
addr
.
sh‹tAddr
 = 
pMsg
->
§cAddr
.addr.shortAddr;

362 
	`oßl_£t_evít
–
øngeExtTaskID
, 
RANGEEXT_KEY_ESTABLISHMENT_REQUEST_EVT
);

364 
	`oßl_mem_‰ì
(
pR•
);

367 
	}
}

378 
	$øngìxt_Pro˚ssIdítifyTimeCh™ge
( )

380 i‡–
øngeExtIdítifyTime
 > 0 )

382 
	`oßl_°¨t_timîEx
–
øngeExtTaskID
, 
RANGEEXT_IDENTIFY_TIMEOUT_EVT
, 1000 );

383 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

387 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

388 
	`oßl_°›_timîEx
–
øngeExtTaskID
, 
RANGEEXT_IDENTIFY_TIMEOUT_EVT
 );

390 
	}
}

392 #i‡
SECURE


402 
uöt8
 
	$øngìxt_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 )

404 
uöt8
 
°©us
 = 
ZFaûuª
;

405 
AddrMgrE¡ry_t
 
íåy
;

409 
íåy
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

410 
íåy
.
nwkAddr
 = 
sh‹tAddr
;

412 i‡–
	`AddrMgrE¡ryLookupNwk
–&
íåy
 ) )

415 i‡–
	`APSME_IsLökKeyVÆid
–
íåy
.
extAddr
 ) =
TRUE
 )

417 
°©us
 = 
ZSuc˚ss
;

423 
°©us
 = 
ZInvÆidP¨amëî
;

426  
°©us
;

427 
	}
}

444 
	$øngìxt_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

447 i‡–
shi·
 )

449 i‡–
keys
 & 
HAL_KEY_SW_1
 )

452 i‡–
keys
 & 
HAL_KEY_SW_2
 )

455 i‡–
keys
 & 
HAL_KEY_SW_3
 )

458 i‡–
keys
 & 
HAL_KEY_SW_4
 )

464 i‡–
keys
 & 
HAL_KEY_SW_1
 )

466 
	`ZDOInôDevi˚
(0);

469 i‡–
keys
 & 
HAL_KEY_SW_2
 )

474 i‡–
keys
 & 
HAL_KEY_SW_3
 )

479 i‡–
keys
 & 
HAL_KEY_SW_4
 )

484 
	}
}

497 
uöt8
 
	$øngìxt_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 )

499 
uöt8
 
vÆid
 = 
TRUE
;

501  
pAârInfo
->
d©aTy≥
 )

503 
ZCL_DATATYPE_BOOLEAN
:

504 i‡––*(
pAârInfo
->
©åD©a
) != 0 ) && ( *(pAttrInfo->attrData) != 1 ) )

505 
vÆid
 = 
FALSE
;

512  ( 
vÆid
 );

513 
	}
}

525 
	$øngìxt_BasicRe£tCB
( )

528 
	}
}

540 
	$øngìxt_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

542 
øngeExtIdítifyTime
 = 
pCmd
->
idítifyTime
;

543 
	`øngìxt_Pro˚ssIdítifyTimeCh™ge
();

544 
	}
}

556 
	$øngìxt_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

559 
	}
}

572 
	$øngìxt_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 )

575 
	}
}

577 #ifde‡
SE_UK_EXT


592 
	$øngìxt_GëEvítLogCB
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
§cAddr
,

593 
z˛GëEvítLog_t
 *
pEvítLog
, 
uöt8
 
£qNum
 )

602 
	}
}

616 
	$øngìxt_PublishEvítLogCB
–
afAddrTy≥_t
 *
§cAddr
, 
z˛PublishEvítLog_t
 *
pEvítLog
 )

619 
	}
}

637 
	$øngìxt_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

639  
pInMsg
->
z˛Hdr
.
comm™dID
 )

641 #i‡
	`deföed
 ( 
ZCL_READ
 )

642 
ZCL_CMD_READ_RSP
:

643 
	`øngìxt_Pro˚ssInRódR•Cmd
–
pInMsg
 );

646 #i‡
	`deföed
 ( 
ZCL_WRITE
 )

647 
ZCL_CMD_WRITE_RSP
:

648 
	`øngìxt_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

651 
ZCL_CMD_DEFAULT_RSP
:

652 
	`øngìxt_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

654 #i‡
	`deföed
 ( 
ZCL_DISCOVER
 )

655 
ZCL_CMD_DISCOVER_RSP
:

656 
	`øngìxt_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

663 i‡–
pInMsg
->
©åCmd
 !
NULL
 )

666 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

667 
pInMsg
->
©åCmd
 = 
NULL
;

669 
	}
}

671 #i‡
deföed
 ( 
ZCL_READ
 )

681 
uöt8
 
	$øngìxt_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

683 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

684 
uöt8
 
i
;

686 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

687 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

694  
TRUE
;

695 
	}
}

698 #i‡
deföed
 ( 
ZCL_WRITE
 )

708 
uöt8
 
	$øngìxt_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

710 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

711 
uöt8
 
i
;

713 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

714 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

720  
TRUE
;

721 
	}
}

733 
uöt8
 
	$øngìxt_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

739  
TRUE
;

740 
	}
}

742 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

752 
uöt8
 
	$øngìxt_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

754 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

755 
uöt8
 
i
;

757 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

758  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

763  
TRUE
;

764 
	}
}

	@Projects/zstack/SE/SampleApp/Source/RangeExt/rangeext.h

40 #i‚de‡
RANGEEXT_H


41 
	#RANGEEXT_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#RANGEEXT_ENDPOINT
 0x09

	)

58 
	#RANGEEXT_MAX_ATTRIBUTES
 13

	)

60 
	#RANGEEXT_MAX_OPTIONS
 1

	)

62 
	#RANGEEXT_UPDATE_TIME_PERIOD
 1000

63 

	)

65 
	#RANGEEXT_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

66 
	#RANGEEXT_KEY_ESTABLISHMENT_REQUEST_EVT
 0x0002

	)

82 
Sim∂eDes¸ùti⁄F‹m©_t
 
øngeExtSim∂eDesc
;

83 
CONST
 
z˛AârRec_t
 
øngeExtAârs
[];

84 
z˛O±i⁄Rec_t
 
øngeExtO±i⁄s
[];

85 
uöt8
 
øngeExtDevi˚E«bÀd
;

86 
uöt16
 
øngeExtTønsôi⁄Time
;

87 
uöt16
 
øngeExtIdítifyTime
;

88 
uöt32
 
øngeExtTime
;

97 
øngìxt_Inô
–
uöt8
 
èsk_id
 );

102 
uöt16
 
øngìxt_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

108 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/RangeExt/rangeext_data.c

45 
	~"ZDC⁄fig.h
"

47 
	~"£.h
"

48 
	~"øngìxt.h
"

49 
	~"z˛_gíîÆ.h
"

50 
	~"z˛_key_e°ablish.h
"

55 
	#RANGEEXT_DEVICE_VERSION
 0

	)

56 
	#RANGEEXT_FLAGS
 0

	)

58 
	#RANGEEXT_HWVERSION
 1

	)

59 
	#RANGEEXT_ZCLVERSION
 1

	)

73 c⁄° 
uöt8
 
	gøngeExtZCLVîsi⁄
 = 
RANGEEXT_ZCLVERSION
;

74 c⁄° 
uöt8
 
	gøngeExtHWVîsi⁄
 = 
RANGEEXT_HWVERSION
;

75 c⁄° 
uöt8
 
	gøngeExtM™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

76 c⁄° 
uöt8
 
	gøngeExtModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

77 c⁄° 
uöt8
 
	gøngeExtD©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

78 c⁄° 
uöt8
 
	gøngeExtPowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

80 
uöt8
 
	gøngeExtLoˇti⁄Des¸ùti⁄
[] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

81 
uöt8
 
	gøngeExtPhysiˇlEnvú⁄mít
 = 
PHY_UNSPECIFIED_ENV
;

82 
uöt8
 
	gøngeExtDevi˚E«bÀd
 = 
DEVICE_ENABLED
;

85 
uöt16
 
	gøngeExtIdítifyTime
 = 0;

86 
uöt32
 
	gøngeExtTime
 = 0;

87 
uöt8
 
	gøngeExtTimeSètus
 = 0x01;

90 
uöt8
 
	gz˛R™geExt_KeyE°ablishmítSuôe
 = 
CERTIFICATE_BASED_KEY_ESTABLISHMENT
;

95 
CONST
 
z˛AârRec_t
 
	gøngeExtAârs
[
RANGEEXT_MAX_ATTRIBUTES
] =

100 
ZCL_CLUSTER_ID_GEN_BASIC
,

102 
ATTRID_BASIC_ZCL_VERSION
,

103 
ZCL_DATATYPE_UINT8
,

104 
ACCESS_CONTROL_READ
,

105 (*)&
øngeExtZCLVîsi⁄


109 
ZCL_CLUSTER_ID_GEN_BASIC
,

111 
ATTRID_BASIC_HW_VERSION
,

112 
ZCL_DATATYPE_UINT8
,

113 
ACCESS_CONTROL_READ
,

114 (*)&
øngeExtHWVîsi⁄


118 
ZCL_CLUSTER_ID_GEN_BASIC
,

120 
ATTRID_BASIC_MANUFACTURER_NAME
,

121 
ZCL_DATATYPE_CHAR_STR
,

122 
ACCESS_CONTROL_READ
,

123 (*)
øngeExtM™uÁ˘uªrName


127 
ZCL_CLUSTER_ID_GEN_BASIC
,

129 
ATTRID_BASIC_MODEL_ID
,

130 
ZCL_DATATYPE_CHAR_STR
,

131 
ACCESS_CONTROL_READ
,

132 (*)
øngeExtModñId


136 
ZCL_CLUSTER_ID_GEN_BASIC
,

138 
ATTRID_BASIC_DATE_CODE
,

139 
ZCL_DATATYPE_CHAR_STR
,

140 
ACCESS_CONTROL_READ
,

141 (*)
øngeExtD©eCode


145 
ZCL_CLUSTER_ID_GEN_BASIC
,

147 
ATTRID_BASIC_POWER_SOURCE
,

148 
ZCL_DATATYPE_ENUM8
,

149 
ACCESS_CONTROL_READ
,

150 (*)&
øngeExtPowîSour˚


154 
ZCL_CLUSTER_ID_GEN_BASIC
,

156 
ATTRID_BASIC_LOCATION_DESC
,

157 
ZCL_DATATYPE_CHAR_STR
,

158 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

159 (*)
øngeExtLoˇti⁄Des¸ùti⁄


163 
ZCL_CLUSTER_ID_GEN_BASIC
,

165 
ATTRID_BASIC_PHYSICAL_ENV
,

166 
ZCL_DATATYPE_ENUM8
,

167 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

168 (*)&
øngeExtPhysiˇlEnvú⁄mít


172 
ZCL_CLUSTER_ID_GEN_BASIC
,

174 
ATTRID_BASIC_DEVICE_ENABLED
,

175 
ZCL_DATATYPE_BOOLEAN
,

176 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

177 (*)&
øngeExtDevi˚E«bÀd


183 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

185 
ATTRID_IDENTIFY_TIME
,

186 
ZCL_DATATYPE_UINT16
,

187 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

188 (*)&
øngeExtIdítifyTime


196 
ZCL_CLUSTER_ID_GEN_TIME
,

198 
ATTRID_TIME_TIME
,

199 
ZCL_DATATYPE_UTC
,

200 
ACCESS_CONTROL_READ
,

201 (*)&
øngeExtTime


207 
ZCL_CLUSTER_ID_GEN_TIME
,

209 
ATTRID_TIME_STATUS
,

210 
ZCL_DATATYPE_BITMAP8
,

211 
ACCESS_CONTROL_READ
,

212 (*)&
øngeExtTimeSètus


219 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

221 
ATTRID_KEY_ESTABLISH_SUITE
,

222 
ZCL_DATATYPE_BITMAP16
,

223 
ACCESS_CONTROL_READ
,

224 (*)&
z˛R™geExt_KeyE°ablishmítSuôe


232 
z˛O±i⁄Rec_t
 
	gøngeExtO±i⁄s
[
RANGEEXT_MAX_OPTIONS
] =

236 
ZCL_CLUSTER_ID_GEN_TIME
,

237 –
AF_EN_SECURITY
 ),

246 
	#RANGEEXT_MAX_INCLUSTERS
 3

	)

247 c⁄° 
cId_t
 
	gøngeExtInClu°îLi°
[
RANGEEXT_MAX_INCLUSTERS
] =

249 
ZCL_CLUSTER_ID_GEN_BASIC
,

250 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

251 
ZCL_CLUSTER_ID_GEN_TIME


254 
	#RANGEEXT_MAX_OUTCLUSTERS
 3

	)

255 c⁄° 
cId_t
 
	gøngeExtOutClu°îLi°
[
RANGEEXT_MAX_OUTCLUSTERS
] =

257 
ZCL_CLUSTER_ID_GEN_BASIC
,

258 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

259 
ZCL_CLUSTER_ID_GEN_TIME


262 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gøngeExtSim∂eDesc
 =

264 
RANGEEXT_ENDPOINT
,

265 
ZCL_SE_PROFILE_ID
,

266 
ZCL_SE_DEVICEID_RANGE_EXTENDER
,

267 
RANGEEXT_DEVICE_VERSION
,

268 
RANGEEXT_FLAGS
,

269 
RANGEEXT_MAX_INCLUSTERS
,

270 (
cId_t
 *)
øngeExtInClu°îLi°
,

271 
RANGEEXT_MAX_OUTCLUSTERS
,

272 (
cId_t
 *)
øngeExtOutClu°îLi°


	@Projects/zstack/SE/SampleApp/Source/SimpleMeter/OSAL_SimpleMeter.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL_Tasks.h
"

48 #i‡
deföed
 ( 
MT_TASK
 )

49 
	~"MT_TASK.h
"

52 
	~"ZDAµ.h
"

53 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

57 
	~"≠s_‰ag.h
"

60 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

61 
	~"z˛_key_e°ablish.h
"

64 
	~"sim∂emëî.h
"

71 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

72 
macEvítLo›
,

73 
nwk_evít_lo›
,

74 
HÆ_Pro˚ssEvít
,

75 #i‡
deföed
–
MT_TASK
 )

76 
MT_Pro˚ssEvít
,

78 
APS_evít_lo›
,

79 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

80 
APSF_Pro˚ssEvít
,

82 
ZDAµ_evít_lo›
,

83 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

84 
ZDNwkMgr_evít_lo›
,

86 
z˛_evít_lo›
,

87 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

88 
z˛KeyE°ablish_evít_lo›
,

90 
sim∂emëî_evít_lo›


93 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

94 
uöt16
 *
	gèsksEvíts
;

109 
	$oßlInôTasks
( )

111 
uöt8
 
èskID
 = 0;

113 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

114 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

116 
	`macTaskInô
–
èskID
++ );

117 
	`nwk_öô
–
èskID
++ );

118 
	`HÆ_Inô
–
èskID
++ );

119 #i‡
	`deföed
–
MT_TASK
 )

120 
	`MT_TaskInô
–
èskID
++ );

122 
	`APS_Inô
–
èskID
++ );

123 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

124 
	`APSF_Inô
–
èskID
++ );

126 
	`ZDAµ_Inô
–
èskID
++ );

127 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

128 
	`ZDNwkMgr_Inô
–
èskID
++ );

130 
	`z˛_Inô
–
èskID
++ );

131 #i‡
	`deföed
 ( 
ZCL_KEY_ESTABLISH
 )

132 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

134 
	`sim∂emëî_Inô
–
èskID
 );

135 
	}
}

	@Projects/zstack/SE/SampleApp/Source/SimpleMeter/simplemeter.c

63 
	~"OSAL.h
"

64 
	~"OSAL_Clock.h
"

65 
	~"OSAL_Nv.h
"

66 
	~"ZDAµ.h
"

67 
	~"ZDObje˘.h
"

68 
	~"AddrMgr.h
"

70 
	~"£.h
"

71 
	~"sim∂emëî.h
"

72 
	~"z˛_gíîÆ.h
"

73 
	~"z˛_£.h
"

74 
	~"z˛_key_e°ablish.h
"

76 
	~"⁄bﬂrd.h
"

79 
	~"hÆ_lcd.h
"

80 
	~"hÆ_Àd.h
"

81 
	~"hÆ_key.h
"

89 
	#z˛_M™d©‹yRï‹èbÀAâribuã
–
a
 ) (á =
NULL
 )

	)

95 
	#SIMPLEMETER_MIN_REPORTING_INTERVAL
 5

	)

113 
uöt8
 
	gsim∂eMëîTaskID
;

114 
uöt8
 
	gsim∂eMëîTønsID
;

115 
afAddrTy≥_t
 
	gESPAddr
;

116 
z˛Rï‹tCmd_t
 *
	gpSeRï‹tCmd
;

117 
z˛Rï‹tCmd_t
 *
	gpBasicRï‹tCmd
;

118 
uöt8
 
	gnumSeAâr
 = 5;

119 
uöt8
 
	gnumBasicAâr
 = 2;

122 
uöt8
 
sim∂eMëîCuºítSumm©i⁄Dñivîed
[];

123 c⁄° 
uöt8
 
sim∂eMëîZCLVîsi⁄
;

124 c⁄° 
uöt8
 
sim∂eMëîPowîSour˚
;

125 
uöt8
 
sim∂eMëîSètus
;

126 
uöt8
 
sim∂eMëîUnôOfMósuª
;

127 
uöt8
 
sim∂eMëîSumm©i⁄F‹m©ög
;

128 
uöt8
 
sim∂eMëîDevi˚Ty≥
;

130 #i‡
SECURE


131 
uöt8
 
	glökKeySètus
;

134 #i‡
deföed
 ( 
SE_UK_EXT
 ) && deföed ( 
SE_MIRROR
 )

135 
afAddrTy≥_t
 
	gmúr‹Addr
;

141 
sim∂emëî_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

143 #i‡
SECURE


144 
uöt8
 
sim∂emëî_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 );

147 
sim∂emëî_Pro˚ssIdítifyTimeCh™ge
( );

154 
uöt8
 
sim∂emëî_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 );

157 
sim∂emëî_BasicRe£tCB
( );

158 
sim∂emëî_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

159 
sim∂emëî_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

160 
sim∂emëî_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 );

161 #ifde‡
SE_UK_EXT


162 
sim∂emëî_GëEvítLogCB
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
§cAddr
,

163 
z˛GëEvítLog_t
 *
pEvítLog
, 
uöt8
 
£qNum
 );

164 
sim∂emëî_PublishEvítLogCB
–
afAddrTy≥_t
 *
§cAddr
,

165 
z˛PublishEvítLog_t
 *
pEvítLog
 );

169 
sim∂emëî_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
pMsg
 );

172 
sim∂emëî_GëProfûeCmdCB
–
z˛CCGëProfûeCmd_t
 *
pCmd
,

173 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

174 
sim∂emëî_GëProfûeR•CB
–
z˛CCGëProfûeR•_t
 *
pCmd
,

175 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

176 
sim∂emëî_ReqMúr‹R•CB
–
z˛CCReqMúr‹R•_t
 *
pCmd
,

177 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

178 
sim∂emëî_Múr‹RemR•CB
–
z˛CCMúr‹RemR•_t
 *
pCmd
,

179 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

180 #i‡
deföed
 ( 
SE_UK_EXT
 )

181 
sim∂emëî_GëS«pshŸCmdCB
–
z˛CCReqGëS«pshŸCmd_t
 *
pCmd
,

182 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

183 
sim∂emëî_TakeS«pshŸCmdCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

184 
sim∂emëî_Múr‹Rï‹tAârR•CB
–
z˛CCReqMúr‹Rï‹tAârR•_t
 *
pCmd
,

185 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

186 
sim∂emëî_PublishT¨iffInf‹m©i⁄CB
–
z˛CCPublishT¨iffInf‹m©i⁄_t
 *
pCmd
,

187 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

188 
sim∂emëî_PublishPri˚M©rixCB
–
z˛CCPublishPri˚M©rix_t
 *
pCmd
,

189 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

190 
sim∂emëî_PublishBlockThªshﬁdsCB
–
z˛CCPublishBlockThªshﬁds_t
 *
pCmd
,

191 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

192 
sim∂emëî_PublishC⁄vîsi⁄Fa˘‹CB
–
z˛CCPublishC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

193 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

194 
sim∂emëî_PublishCÆ‹ificVÆueCB
–
z˛CCPublishCÆ‹ificVÆue_t
 *
pCmd
,

195 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

196 
sim∂emëî_PublishCO2VÆueCB
–
z˛CCPublishCO2VÆue_t
 *
pCmd
,

197 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

198 
sim∂emëî_PublishCPPEvítCB
–
z˛CCPublishCPPEvít_t
 *
pCmd
,

199 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

200 
sim∂emëî_PublishBûlögPîiodCB
–
z˛CCPublishBûlögPîiod_t
 *
pCmd
,

201 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

202 
sim∂emëî_PublishC⁄sﬁid©edBûlCB
–
z˛CCPublishC⁄sﬁid©edBûl_t
 *
pCmd
,

203 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

204 
sim∂emëî_PublishCªdôPaymítInfoCB
–
z˛CCPublishCªdôPaymítInfo_t
 *
pCmd
,

205 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

206 
sim∂emëî_Ch™geDebtCB
–
z˛CCCh™geDebt_t
 *
pCmd
,

207 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

208 
sim∂emëî_EmîgícyCªdôSëupCB
–
z˛CCEmîgícyCªdôSëup_t
 *
pCmd
,

209 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

210 
sim∂emëî_C⁄sumîT›upCB
–
z˛CCC⁄sumîT›up_t
 *
pCmd
,

211 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

212 
sim∂emëî_CªdôAdju°mítCB
–
z˛CCCªdôAdju°mít_t
 *
pCmd
,

213 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

214 
sim∂emëî_Ch™gePaymítModeCB
–
z˛CCCh™gePaymítMode_t
 *
pCmd
,

215 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

216 
sim∂emëî_GëPª∑yS«pshŸCB
–
z˛CCGëPª∑yS«pshŸ_t
 *
pCmd
,

217 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

218 
sim∂emëî_GëT›upLogCB
–
uöt8
 
numEvíts
,

219 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

220 
sim∂emëî_SëLowCªdôW¨nögLevñCB
–
uöt8
 
numEvíts
,

221 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

222 
sim∂emëî_GëDebtRïaymítLogCB
–
z˛CCGëDebtRïaymítLog_t
 *
pCmd
,

223 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

230 
sim∂emëî_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
msg
 );

231 #i‡
deföed
 ( 
ZCL_READ
 )

232 
uöt8
 
sim∂emëî_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

234 #i‡
deföed
 ( 
ZCL_WRITE
 )

235 
uöt8
 
sim∂emëî_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

237 #i‡
deföed
 ( 
ZCL_REPORT
 )

238 
uöt8
 
sim∂emëî_Pro˚ssInC⁄figRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

239 
uöt8
 
sim∂emëî_Pro˚ssInC⁄figRï‹tR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

240 
uöt8
 
sim∂emëî_Pro˚ssInRódRï‹tCfgCmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

241 
uöt8
 
sim∂emëî_Pro˚ssInRódRï‹tCfgR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

242 
uöt8
 
sim∂emëî_Pro˚ssInRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

244 
uöt8
 
sim∂emëî_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

245 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

246 
uöt8
 
sim∂emëî_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

252 
z˛GíîÆ_AµCÆlbacks_t
 
	gsim∂emëî_GíCmdCÆlbacks
 =

254 
sim∂emëî_BasicRe£tCB
,

255 
sim∂emëî_IdítifyCB
,

256 
sim∂emëî_IdítifyQuîyR•CB
,

257 
NULL
,

258 
NULL
,

259 
NULL
,

260 
NULL
,

261 
NULL
,

262 
NULL
,

263 
NULL
,

264 
NULL
,

265 
NULL
,

266 
sim∂emëî_AœrmCB
,

267 #ifde‡
SE_UK_EXT


268 
sim∂emëî_GëEvítLogCB
,

269 
sim∂emëî_PublishEvítLogCB
,

271 
NULL
,

272 
NULL


278 
z˛SE_AµCÆlbacks_t
 
	gsim∂emëî_SECmdCÆlbacks
 =

280 
NULL
,

281 
NULL
,

282 #i‡
deföed
 ( 
SE_UK_EXT
 )

283 
sim∂emëî_PublishT¨iffInf‹m©i⁄CB
,

284 
sim∂emëî_PublishPri˚M©rixCB
,

285 
sim∂emëî_PublishBlockThªshﬁdsCB
,

286 
sim∂emëî_PublishC⁄vîsi⁄Fa˘‹CB
,

287 
sim∂emëî_PublishCÆ‹ificVÆueCB
,

288 
sim∂emëî_PublishCO2VÆueCB
,

289 
sim∂emëî_PublishCPPEvítCB
,

290 
sim∂emëî_PublishBûlögPîiodCB
,

291 
sim∂emëî_PublishC⁄sﬁid©edBûlCB
,

292 
sim∂emëî_PublishCªdôPaymítInfoCB
,

294 
NULL
,

295 
NULL
,

296 
NULL
,

297 
NULL
,

298 #i‡
deföed
 ( 
SE_UK_EXT
 )

299 
NULL
,

300 
NULL
,

301 
NULL
,

302 
NULL
,

303 
NULL
,

304 
NULL
,

305 
NULL
,

306 
NULL
,

307 
NULL
,

309 
NULL
,

310 
NULL
,

311 
NULL
,

312 
NULL
,

313 
NULL
,

314 
sim∂emëî_GëProfûeR•CB
,

315 
NULL
,

316 
NULL
,

317 
NULL
,

318 #i‡
deföed
 ( 
SE_UK_EXT
 )

319 
NULL
,

321 
sim∂emëî_GëProfûeCmdCB
,

322 
sim∂emëî_ReqMúr‹R•CB
,

323 
sim∂emëî_Múr‹RemR•CB
,

324 
NULL
,

325 #i‡
deföed
 ( 
SE_UK_EXT
 )

326 
sim∂emëî_GëS«pshŸCmdCB
,

327 
sim∂emëî_TakeS«pshŸCmdCB
,

328 
sim∂emëî_Múr‹Rï‹tAârR•CB
,

330 
NULL
,

331 
NULL
,

332 
NULL
,

333 
NULL
,

334 
NULL
,

335 
NULL
,

336 
NULL
,

337 
NULL
,

338 
NULL
,

339 #i‡
deföed
 ( 
SE_UK_EXT
 )

340 
NULL
,

341 
NULL
,

343 
NULL
,

344 
NULL
,

345 #i‡
deföed
 ( 
SE_UK_EXT
 )

346 
NULL
,

348 
NULL
,

349 #i‡
deföed
 ( 
SE_UK_EXT
 )

350 
NULL
,

351 
NULL
,

352 
NULL
,

353 
NULL
,

354 
NULL
,

355 
NULL
,

357 
NULL
,

358 
NULL
,

359 #i‡
deföed
 ( 
SE_UK_EXT
 )

360 
sim∂emëî_Ch™geDebtCB
,

361 
sim∂emëî_EmîgícyCªdôSëupCB
,

362 
sim∂emëî_C⁄sumîT›upCB
,

363 
sim∂emëî_CªdôAdju°mítCB
,

364 
sim∂emëî_Ch™gePaymítModeCB
,

365 
sim∂emëî_GëPª∑yS«pshŸCB
,

366 
sim∂emëî_GëT›upLogCB
,

367 
sim∂emëî_SëLowCªdôW¨nögLevñCB
,

368 
sim∂emëî_GëDebtRïaymítLogCB
,

369 
NULL
,

370 
NULL
,

371 
NULL
,

372 
NULL
,

373 
NULL
,

374 
NULL
,

375 
NULL
,

376 
NULL
,

377 
NULL
,

378 
NULL
,

379 
NULL
,

380 
NULL
,

381 
NULL
,

382 
NULL
,

383 
NULL
,

384 
NULL
,

385 
NULL
,

386 
NULL
,

387 
NULL
,

388 
NULL
,

401 
	$sim∂emëî_Inô
–
uöt8
 
èsk_id
 )

403 
sim∂eMëîTaskID
 = 
èsk_id
;

404 
sim∂eMëîTønsID
 = 0;

411 
ESPAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

412 
ESPAddr
.
ídPoöt
 = 
SIMPLEMETER_ENDPOINT
;

413 
ESPAddr
.
addr
.
sh‹tAddr
 = 0;

416 
	`z˛SE_Inô
–&
sim∂eMëîSim∂eDesc
 );

419 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
SIMPLEMETER_ENDPOINT
, &
sim∂emëî_GíCmdCÆlbacks
 );

422 
	`z˛SE_Regi°îCmdCÆlbacks
–
SIMPLEMETER_ENDPOINT
, &
sim∂emëî_SECmdCÆlbacks
 );

425 
	`z˛_ªgi°îAârLi°
–
SIMPLEMETER_ENDPOINT
, 
SIMPLEMETER_MAX_ATTRIBUTES
, 
sim∂eMëîAârs
 );

428 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
SIMPLEMETER_ENDPOINT
, 
SIMPLEMETER_MAX_OPTIONS
, 
sim∂eMëîO±i⁄s
 );

431 
	`z˛_ªgi°îVÆid©eAârD©a
–
sim∂emëî_VÆid©eAârD©aCB
 );

434 
	`z˛_ªgi°îF‹Msg
–
sim∂eMëîTaskID
 );

437 
	`Regi°îF‹Keys
–
sim∂eMëîTaskID
 );

440 
	`ZDO_Regi°îF‹ZDOMsg
(
èsk_id
, 
M©ch_Desc_r•
);

443 
	`oßl_°¨t_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_UPDATE_TIME_EVT
, 
SIMPLEMETER_UPDATE_TIME_PERIOD
 );

446 
pBasicRï‹tCmd
 = (
z˛Rï‹tCmd_t
 *)
	`oßl_mem_Æloc
––z˛Rï‹tCmd_àË+ ( 
numBasicAâr
 * –
z˛Rï‹t_t
 ) ) );

447 i‡–
pBasicRï‹tCmd
 !
NULL
 )

449 
pBasicRï‹tCmd
->
numAâr
 = 
numBasicAâr
;

451 
pBasicRï‹tCmd
->
©åLi°
[0].
©åID
 = 
ATTRID_BASIC_ZCL_VERSION
;

452 
pBasicRï‹tCmd
->
©åLi°
[0].
d©aTy≥
 = 
ZCL_DATATYPE_UINT8
;

453 
pBasicRï‹tCmd
->
©åLi°
[0].
©åD©a
 = (
uöt8
*Ë&
sim∂eMëîZCLVîsi⁄
;

455 
pBasicRï‹tCmd
->
©åLi°
[1].
©åID
 = 
ATTRID_BASIC_POWER_SOURCE
;

456 
pBasicRï‹tCmd
->
©åLi°
[1].
d©aTy≥
 = 
ZCL_DATATYPE_ENUM8
;

457 
pBasicRï‹tCmd
->
©åLi°
[1].
©åD©a
 = (
uöt8
*Ë&
sim∂eMëîPowîSour˚
;

460 
pSeRï‹tCmd
 = (
z˛Rï‹tCmd_t
 *)
	`oßl_mem_Æloc
––z˛Rï‹tCmd_àË+ ( 
numSeAâr
 * –
z˛Rï‹t_t
 ) ) );

461 i‡–
pSeRï‹tCmd
 !
NULL
 )

463 
pSeRï‹tCmd
->
numAâr
 = 
numSeAâr
;

466 
pSeRï‹tCmd
->
©åLi°
[0].
©åID
 = 
ATTRID_SE_CURRENT_SUMMATION_DELIVERED
;

467 
pSeRï‹tCmd
->
©åLi°
[0].
d©aTy≥
 = 
ZCL_DATATYPE_UINT48
;

468 
pSeRï‹tCmd
->
©åLi°
[0].
©åD©a
 = 
sim∂eMëîCuºítSumm©i⁄Dñivîed
;

470 
pSeRï‹tCmd
->
©åLi°
[1].
©åID
 = 
ATTRID_SE_STATUS
;

471 
pSeRï‹tCmd
->
©åLi°
[1].
d©aTy≥
 = 
ZCL_DATATYPE_BITMAP8
;

472 
pSeRï‹tCmd
->
©åLi°
[1].
©åD©a
 = &
sim∂eMëîSètus
;

474 
pSeRï‹tCmd
->
©åLi°
[2].
©åID
 = 
ATTRID_SE_UNIT_OF_MEASURE
;

475 
pSeRï‹tCmd
->
©åLi°
[2].
d©aTy≥
 = 
ZCL_DATATYPE_ENUM8
;

476 
pSeRï‹tCmd
->
©åLi°
[2].
©åD©a
 = &
sim∂eMëîUnôOfMósuª
;

478 
pSeRï‹tCmd
->
©åLi°
[3].
©åID
 = 
ATTRID_SE_SUMMATION_FORMATTING
;

479 
pSeRï‹tCmd
->
©åLi°
[3].
d©aTy≥
 = 
ZCL_DATATYPE_BITMAP8
;

480 
pSeRï‹tCmd
->
©åLi°
[3].
©åD©a
 = &
sim∂eMëîSumm©i⁄F‹m©ög
;

482 
pSeRï‹tCmd
->
©åLi°
[4].
©åID
 = 
ATTRID_SE_METERING_DEVICE_TYPE
;

483 
pSeRï‹tCmd
->
©åLi°
[4].
d©aTy≥
 = 
ZCL_DATATYPE_BITMAP8
;

484 
pSeRï‹tCmd
->
©åLi°
[4].
©åD©a
 = &
sim∂eMëîDevi˚Ty≥
;

488 
	}
}

500 
uöt16
 
	$sim∂emëî_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

502 
afIncomögMSGPackë_t
 *
MSGpkt
;

504 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

506  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
sim∂eMëîTaskID
 )) )

508  
MSGpkt
->
hdr
.
evít
 )

510 
ZDO_CB_MSG
:

511 
	`sim∂emëî_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

514 
ZCL_INCOMING_MSG
:

516 
	`sim∂emëî_Pro˚ssZCLMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

519 
KEY_CHANGE
:

520 
	`sim∂emëî_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

523 
ZDO_STATE_CHANGE
:

524 i‡((
DEV_END_DEVICE
 =(
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
)) ||

525 (
DEV_ROUTER
 =(
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
)))

527 #i‡
SECURE


530 
lökKeySètus
 = 
	`sim∂emëî_KeyE°ablish_Rëu∫LökKey
(
ESPAddr
.
addr
.
sh‹tAddr
);

532 i‡(
lökKeySètus
 !
ZSuc˚ss
)

534 
cId_t
 
cbkeClu°î
 = 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
;

535 
zAddrTy≥_t
 
d°Addr
;

538 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

539 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

540 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
, 
ZCL_SE_PROFILE_ID
,

541 1, &
cbkeClu°î
, 0, 
NULL
, 
FALSE
 );

546 
	`oßl_£t_evít
–
sim∂eMëîTaskID
, 
SIMPLEMETER_CONNECTED_EVT
 );

551 
	`oßl_£t_evít
–
sim∂eMëîTaskID
, 
SIMPLEMETER_CONNECTED_EVT
 );

555 
	`NLME_SëPﬁlR©e
 ( 
SE_DEVICE_POLL_RATE
 );

559 #i‡
	`deföed
–
ZCL_KEY_ESTABLISH
 )

560 
ZCL_KEY_ESTABLISH_IND
:

561 i‡((
MSGpkt
->
hdr
.
°©us
Ë=
TîmKeySètus_Suc˚ss
)

563 
ESPAddr
.
ídPoöt
 = 
SIMPLEMETER_ENDPOINT
;

564 
	`oßl_£t_evít
–
sim∂eMëîTaskID
, 
SIMPLEMETER_CONNECTED_EVT
 );

574 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

578  (
evíts
 ^ 
SYS_EVENT_MSG
);

582 i‡–
evíts
 & 
SIMPLEMETER_KEY_ESTABLISHMENT_REQUEST_EVT
 )

584 
	`z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
sim∂eMëîTaskID
, &
ESPAddr
, 
sim∂eMëîTønsID
);

586  ( 
evíts
 ^ 
SIMPLEMETER_KEY_ESTABLISHMENT_REQUEST_EVT
 );

590 i‡–
evíts
 & 
SIMPLEMETER_CONNECTED_EVT
 )

592 #i‡
	`deföed
 ( 
SE_UK_EXT
 ) && deföed ( 
SE_MIRROR
 )

594 
	`z˛SE_Sim∂eMëîög_Síd_ReqMúr‹Cmd
(
SIMPLEMETER_ENDPOINT
, &
ESPAddr
, 
TRUE
, 0);

598 
	`oßl_°¨t_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_REPORT_ATTRIBUTE_EVT
, 
SIMPLEMETER_REPORT_PERIOD
 );

600  ( 
evíts
 ^ 
SIMPLEMETER_CONNECTED_EVT
 );

604 i‡–
evíts
 & 
SIMPLEMETER_REPORT_ATTRIBUTE_EVT
 )

606 i‡–
pSeRï‹tCmd
 !
NULL
 )

608 
	`z˛_SídRï‹tCmd
–
SIMPLEMETER_ENDPOINT
, &
ESPAddr
,

609 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
, 
pSeRï‹tCmd
,

610 
ZCL_FRAME_SERVER_CLIENT_DIR
, 1, 0 );

612 
	`oßl_°¨t_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_REPORT_ATTRIBUTE_EVT
, 
SIMPLEMETER_REPORT_PERIOD
 );

615  ( 
evíts
 ^ 
SIMPLEMETER_REPORT_ATTRIBUTE_EVT
 );

619 i‡–
evíts
 & 
SIMPLEMETER_IDENTIFY_TIMEOUT_EVT
 )

621 i‡–
sim∂eMëîIdítifyTime
 > 0 )

623 
sim∂eMëîIdítifyTime
--;

625 
	`sim∂emëî_Pro˚ssIdítifyTimeCh™ge
();

627  ( 
evíts
 ^ 
SIMPLEMETER_IDENTIFY_TIMEOUT_EVT
 );

631 i‡–
evíts
 & 
SIMPLEMETER_UPDATE_TIME_EVT
 )

633 
sim∂eMëîTime
 = 
	`oßl_gëClock
();

634 
	`oßl_°¨t_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_UPDATE_TIME_EVT
, 
SIMPLEMETER_UPDATE_TIME_PERIOD
 );

636  ( 
evíts
 ^ 
SIMPLEMETER_UPDATE_TIME_EVT
 );

641 
	}
}

652 
	$sim∂emëî_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
pMsg
 )

654 i‡(
pMsg
->
˛u°îID
 =
M©ch_Desc_r•
)

656 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
pMsg
 );

658 i‡(
pR•
)

660 i‡(
pR•
->
˙t
)

663 
ESPAddr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

664 
ESPAddr
.
addr
.
sh‹tAddr
 = 
pMsg
->
§cAddr
.addr.shortAddr;

667 
	`oßl_£t_evít
–
sim∂eMëîTaskID
, 
SIMPLEMETER_KEY_ESTABLISHMENT_REQUEST_EVT
);

669 
	`oßl_mem_‰ì
(
pR•
);

672 
	}
}

683 
	$sim∂emëî_Pro˚ssIdítifyTimeCh™ge
( )

685 i‡–
sim∂eMëîIdítifyTime
 > 0 )

687 
	`oßl_°¨t_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_IDENTIFY_TIMEOUT_EVT
, 1000 );

688 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

692 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

693 
	`oßl_°›_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_IDENTIFY_TIMEOUT_EVT
 );

695 
	}
}

697 #i‡
SECURE


707 
uöt8
 
	$sim∂emëî_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 )

709 
uöt8
 
°©us
 = 
ZFaûuª
;

710 
AddrMgrE¡ry_t
 
íåy
;

714 
íåy
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

715 
íåy
.
nwkAddr
 = 
sh‹tAddr
;

717 i‡–
	`AddrMgrE¡ryLookupNwk
–&
íåy
 ) )

720 i‡–
	`APSME_IsLökKeyVÆid
–
íåy
.
extAddr
 ) =
TRUE
 )

722 
°©us
 = 
ZSuc˚ss
;

728 
°©us
 = 
ZInvÆidP¨amëî
;

731  
°©us
;

732 
	}
}

749 
	$sim∂emëî_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

752 i‡–
shi·
 )

754 i‡–
keys
 & 
HAL_KEY_SW_1
 )

757 i‡–
keys
 & 
HAL_KEY_SW_2
 )

760 i‡–
keys
 & 
HAL_KEY_SW_3
 )

763 i‡–
keys
 & 
HAL_KEY_SW_4
 )

769 i‡–
keys
 & 
HAL_KEY_SW_1
 )

771 
	`ZDOInôDevi˚
(0);

774 i‡–
keys
 & 
HAL_KEY_SW_2
 )

777 
	`z˛SE_Sim∂eMëîög_Síd_RemMúr‹Cmd
(
SIMPLEMETER_ENDPOINT
, &
ESPAddr
, 
TRUE
, 0);

780 i‡–
keys
 & 
HAL_KEY_SW_3
 )

785 i‡–
keys
 & 
HAL_KEY_SW_4
 )

790 
	}
}

803 
uöt8
 
	$sim∂emëî_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 )

805 
uöt8
 
vÆid
 = 
TRUE
;

807  
pAârInfo
->
d©aTy≥
 )

809 
ZCL_DATATYPE_BOOLEAN
:

810 i‡––*(
pAârInfo
->
©åD©a
) != 0 ) && ( *(pAttrInfo->attrData) != 1 ) )

811 
vÆid
 = 
FALSE
;

818  ( 
vÆid
 );

819 
	}
}

831 
	$sim∂emëî_BasicRe£tCB
( )

834 
	}
}

846 
	$sim∂emëî_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

848 
sim∂eMëîIdítifyTime
 = 
pCmd
->
idítifyTime
;

849 
	`sim∂emëî_Pro˚ssIdítifyTimeCh™ge
();

850 
	}
}

862 
	$sim∂emëî_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

865 
	}
}

880 
	$sim∂emëî_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 )

883 
	}
}

885 #ifde‡
SE_UK_EXT


900 
	$sim∂emëî_GëEvítLogCB
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
§cAddr
,

901 
z˛GëEvítLog_t
 *
pEvítLog
, 
uöt8
 
£qNum
 )

910 
	}
}

924 
	$sim∂emëî_PublishEvítLogCB
–
afAddrTy≥_t
 *
§cAddr
, 
z˛PublishEvítLog_t
 *
pEvítLog
 )

927 
	}
}

943 
	$sim∂emëî_GëProfûeCmdCB
–
z˛CCGëProfûeCmd_t
 *
pCmd
,

944 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

946 #i‡
	`deföed
 ( 
ZCL_SIMPLE_METERING
 )

954 
uöt32
 
ídTime
;

955 
uöt8
 
°©us
 = 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_Suc˚ss
;

956 
uöt8
 
¥ofûeI¡îvÆPîiod
 = 
PROFILE_INTERVAL_PERIOD_60MIN
;

957 
uöt8
 
numbîOfPîiodDñivîed
 = 5;

958 
uöt24
 
öãrvÆs
[] = {0xa00001, 0xa00002, 0xa00003, 0xa00004, 0xa00005};

972 
ídTime
 = 
pCmd
->endTime;

976 
	`z˛SE_Sim∂eMëîög_Síd_GëProfûeR•
–
SIMPLEMETER_ENDPOINT
, 
§cAddr
, 
ídTime
,

977 
°©us
,

978 
¥ofûeI¡îvÆPîiod
,

979 
numbîOfPîiodDñivîed
, 
öãrvÆs
,

980 
FALSE
, 
£qNum
 );

982 
	}
}

997 
	$sim∂emëî_GëProfûeR•CB
–
z˛CCGëProfûeR•_t
 *
pCmd
,

998 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1001 
	}
}

1016 
	$sim∂emëî_ReqMúr‹R•CB
–
z˛CCReqMúr‹R•_t
 *
pCmd
,

1017 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1019 #i‡
	`deföed
 ( 
ZCL_SIMPLE_METERING
 )

1020 #i‡
	`deföed
 ( 
SE_UK_EXT
 ) && deföed ( 
SE_MIRROR
 )

1021 i‡–
pCmd
 !
NULL
 )

1023 i‡(
pCmd
->
ídpoötId
 == 0xFFFF)

1031 
	`oßl_mem˝y
(&
múr‹Addr
, 
§cAddr
, (
afAddrTy≥_t
));

1032 
múr‹Addr
.
ídPoöt
 = 
pCmd
->
ídpoötId
;

1035 i‡(
pSeRï‹tCmd
)

1037 
	`z˛_SídRï‹tCmd
–
SIMPLEMETER_ENDPOINT
, &
múr‹Addr
,

1038 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
, 
pSeRï‹tCmd
,

1039 
ZCL_FRAME_SERVER_CLIENT_DIR
, 1, 0 );

1042 i‡(
pBasicRï‹tCmd
)

1044 
	`z˛_SídRï‹tCmd
–
SIMPLEMETER_ENDPOINT
, &
múr‹Addr
,

1045 
ZCL_CLUSTER_ID_GEN_BASIC
, 
pBasicRï‹tCmd
,

1046 
ZCL_FRAME_SERVER_CLIENT_DIR
, 1, 0 );

1052 
	}
}

1067 
	$sim∂emëî_Múr‹RemR•CB
–
z˛CCMúr‹RemR•_t
 *
pCmd
,

1068 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1070 #i‡
	`deföed
 ( 
ZCL_SIMPLE_METERING
 )

1071 
	`oßl_°›_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_REPORT_ATTRIBUTE_EVT
 );

1073 
	}
}

1075 #i‡
deföed
 ( 
SE_UK_EXT
 )

1089 
	$sim∂emëî_GëS«pshŸCmdCB
–
z˛CCReqGëS«pshŸCmd_t
 *
pCmd
,

1090 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1093 
	}
}

1107 
	$sim∂emëî_TakeS«pshŸCmdCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1110 
	}
}

1125 
	$sim∂emëî_Múr‹Rï‹tAârR•CB
–
z˛CCReqMúr‹Rï‹tAârR•_t
 *
pCmd
,

1126 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1129 
	}
}

1143 
	$sim∂emëî_PublishT¨iffInf‹m©i⁄CB
–
z˛CCPublishT¨iffInf‹m©i⁄_t
 *
pCmd
,

1144 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1147 
	}
}

1161 
	$sim∂emëî_PublishPri˚M©rixCB
–
z˛CCPublishPri˚M©rix_t
 *
pCmd
,

1162 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1165 
	}
}

1179 
	$sim∂emëî_PublishBlockThªshﬁdsCB
–
z˛CCPublishBlockThªshﬁds_t
 *
pCmd
,

1180 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1183 
	}
}

1197 
	$sim∂emëî_PublishC⁄vîsi⁄Fa˘‹CB
–
z˛CCPublishC⁄vîsi⁄Fa˘‹_t
 *
pCmd
,

1198 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1201 
	}
}

1215 
	$sim∂emëî_PublishCÆ‹ificVÆueCB
–
z˛CCPublishCÆ‹ificVÆue_t
 *
pCmd
,

1216 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1219 
	}
}

1233 
	$sim∂emëî_PublishCO2VÆueCB
–
z˛CCPublishCO2VÆue_t
 *
pCmd
,

1234 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1237 
	}
}

1251 
	$sim∂emëî_PublishCPPEvítCB
–
z˛CCPublishCPPEvít_t
 *
pCmd
,

1252 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1255 
	}
}

1269 
	$sim∂emëî_PublishBûlögPîiodCB
–
z˛CCPublishBûlögPîiod_t
 *
pCmd
,

1270 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1273 
	}
}

1287 
	$sim∂emëî_PublishC⁄sﬁid©edBûlCB
–
z˛CCPublishC⁄sﬁid©edBûl_t
 *
pCmd
,

1288 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1291 
	}
}

1305 
	$sim∂emëî_PublishCªdôPaymítInfoCB
–
z˛CCPublishCªdôPaymítInfo_t
 *
pCmd
,

1306 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1309 
	}
}

1323 
	$sim∂emëî_Ch™geDebtCB
–
z˛CCCh™geDebt_t
 *
pCmd
,

1324 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1327 
	}
}

1341 
	$sim∂emëî_EmîgícyCªdôSëupCB
–
z˛CCEmîgícyCªdôSëup_t
 *
pCmd
,

1342 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1345 
	}
}

1359 
	$sim∂emëî_C⁄sumîT›upCB
–
z˛CCC⁄sumîT›up_t
 *
pCmd
,

1360 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1363 
	}
}

1377 
	$sim∂emëî_CªdôAdju°mítCB
–
z˛CCCªdôAdju°mít_t
 *
pCmd
,

1378 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1381 
	}
}

1395 
	$sim∂emëî_Ch™gePaymítModeCB
–
z˛CCCh™gePaymítMode_t
 *
pCmd
,

1396 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1399 
	}
}

1413 
	$sim∂emëî_GëPª∑yS«pshŸCB
–
z˛CCGëPª∑yS«pshŸ_t
 *
pCmd
,

1414 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1417 
	}
}

1431 
	$sim∂emëî_GëT›upLogCB
–
uöt8
 
numEvíts
,

1432 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1435 
	}
}

1449 
	$sim∂emëî_SëLowCªdôW¨nögLevñCB
–
uöt8
 
numEvíts
,

1450 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1453 
	}
}

1467 
	$sim∂emëî_GëDebtRïaymítLogCB
–
z˛CCGëDebtRïaymítLog_t
 *
pCmd
,

1468 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1471 
	}
}

1489 
	$sim∂emëî_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

1491  
pInMsg
->
z˛Hdr
.
comm™dID
 )

1493 #i‡
	`deföed
 ( 
ZCL_READ
 )

1494 
ZCL_CMD_READ_RSP
:

1495 
	`sim∂emëî_Pro˚ssInRódR•Cmd
–
pInMsg
 );

1498 #i‡
	`deföed
 ( 
ZCL_WRITE
 )

1499 
ZCL_CMD_WRITE_RSP
:

1500 
	`sim∂emëî_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

1503 #i‡
	`deföed
 ( 
ZCL_REPORT
 )

1504 
ZCL_CMD_CONFIG_REPORT
:

1505 
	`sim∂emëî_Pro˚ssInC⁄figRï‹tCmd
–
pInMsg
 );

1508 
ZCL_CMD_CONFIG_REPORT_RSP
:

1509 
	`sim∂emëî_Pro˚ssInC⁄figRï‹tR•Cmd
–
pInMsg
 );

1512 
ZCL_CMD_READ_REPORT_CFG
:

1513 
	`sim∂emëî_Pro˚ssInRódRï‹tCfgCmd
–
pInMsg
 );

1516 
ZCL_CMD_READ_REPORT_CFG_RSP
:

1517 
	`sim∂emëî_Pro˚ssInRódRï‹tCfgR•Cmd
–
pInMsg
 );

1520 
ZCL_CMD_REPORT
:

1521 
	`sim∂emëî_Pro˚ssInRï‹tCmd
–
pInMsg
 );

1524 
ZCL_CMD_DEFAULT_RSP
:

1525 
	`sim∂emëî_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

1527 #i‡
	`deföed
 ( 
ZCL_DISCOVER
 )

1528 
ZCL_CMD_DISCOVER_RSP
:

1529 
	`sim∂emëî_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

1536 i‡–
pInMsg
->
©åCmd
 !
NULL
 )

1539 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

1540 
pInMsg
->
©åCmd
 = 
NULL
;

1542 
	}
}

1544 #i‡
deföed
 ( 
ZCL_READ
 )

1554 
uöt8
 
	$sim∂emëî_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1556 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

1557 
uöt8
 
i
;

1559 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1560 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

1567  
TRUE
;

1568 
	}
}

1571 #i‡
deföed
 ( 
ZCL_WRITE
 )

1581 
uöt8
 
	$sim∂emëî_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1583 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

1584 
uöt8
 
i
;

1586 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1587 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

1593  
TRUE
;

1594 
	}
}

1597 #i‡
deföed
 ( 
ZCL_REPORT
 )

1608 
uöt8
 
	$sim∂emëî_Pro˚ssInC⁄figRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1610 
z˛CfgRï‹tCmd_t
 *
cfgRï‹tCmd
;

1611 
z˛CfgRï‹tRec_t
 *
ªp‹tRec
;

1612 
z˛CfgRï‹tR•Cmd_t
 *
cfgRï‹tR•Cmd
;

1613 
z˛AârRec_t
 
©åRec
;

1614 
uöt8
 
°©us
;

1615 
uöt8
 
i
, 
j
 = 0;

1617 
cfgRï‹tCmd
 = (
z˛CfgRï‹tCmd_t
 *)
pInMsg
->
©åCmd
;

1620 
cfgRï‹tR•Cmd
 = (
z˛CfgRï‹tR•Cmd_t
 *)
	`oßl_mem_Æloc
(  ( zclCfgReportRspCmd_t ) + \

1621  ( 
z˛CfgRï‹tSètus_t
Ë* 
cfgRï‹tCmd
->
numAâr
 );

1622 i‡–
cfgRï‹tR•Cmd
 =
NULL
 )

1623  
FALSE
;

1626  
i
 = 0; i < 
cfgRï‹tCmd
->
numAâr
; i++ )

1628 
ªp‹tRec
 = &(
cfgRï‹tCmd
->
©åLi°
[
i
]);

1630 
°©us
 = 
ZCL_STATUS_SUCCESS
;

1632 i‡–
	`z˛FödAârRec
–
SIMPLEMETER_ENDPOINT
, 
pInMsg
->
˛u°îId
, 
ªp‹tRec
->
©åID
, &
©åRec
 ) )

1634 i‡–
ªp‹tRec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

1636 i‡–
ªp‹tRec
->
d©aTy≥
 =
©åRec
.
©å
.dataType )

1639 i‡–
	`z˛_M™d©‹yRï‹èbÀAâribuã
–&
©åRec
 ) =
TRUE
 )

1641 i‡–
ªp‹tRec
->
möRï‹tI¡
 < 
SIMPLEMETER_MIN_REPORTING_INTERVAL
 ||

1642 –
ªp‹tRec
->
maxRï‹tI¡
 != 0 &&

1643 
ªp‹tRec
->
maxRï‹tI¡
 <Ñï‹tRec->
möRï‹tI¡
 ) )

1646 
°©us
 = 
ZCL_STATUS_INVALID_VALUE
;

1652 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

1658 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

1664 
°©us
 = 
ZCL_STATUS_INVALID_DATA_TYPE
;

1670 i‡–
	`z˛_M™d©‹yRï‹èbÀAâribuã
–&
©åRec
 ) =
TRUE
 )

1674 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

1679 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

1686 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

1690 i‡–
°©us
 !
ZCL_STATUS_SUCCESS
 )

1692 
cfgRï‹tR•Cmd
->
©åLi°
[
j
].
°©us
 = status;

1693 
cfgRï‹tR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
ªp‹tRec
->attrID;

1697 i‡–
j
 == 0 )

1702 
cfgRï‹tR•Cmd
->
©åLi°
[0].
°©us
 = 
ZCL_STATUS_SUCCESS
;

1703 
cfgRï‹tR•Cmd
->
numAâr
 = 1;

1707 
cfgRï‹tR•Cmd
->
numAâr
 = 
j
;

1711 
	`z˛_SídC⁄figRï‹tR•Cmd
–
SIMPLEMETER_ENDPOINT
, &(
pInMsg
->
§cAddr
),

1712 
pInMsg
->
˛u°îId
, 
cfgRï‹tR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

1713 
TRUE
, 
pInMsg
->
z˛Hdr
.
å™sSeqNum
 );

1714 
	`oßl_mem_‰ì
–
cfgRï‹tR•Cmd
 );

1716  
TRUE
 ;

1717 
	}
}

1728 
uöt8
 
	$sim∂emëî_Pro˚ssInC⁄figRï‹tR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1730 
z˛CfgRï‹tR•Cmd_t
 *
cfgRï‹tR•Cmd
;

1731 
z˛AârRec_t
 
©åRec
;

1732 
uöt8
 
i
;

1734 
cfgRï‹tR•Cmd
 = (
z˛CfgRï‹tR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1735 
i
 = 0; i < 
cfgRï‹tR•Cmd
->
numAâr
; i++)

1737 i‡–
	`z˛FödAârRec
–
SIMPLEMETER_ENDPOINT
, 
pInMsg
->
˛u°îId
,

1738 
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
©åID
, &
©åRec
 ) )

1745  
TRUE
;

1746 
	}
}

1757 
uöt8
 
	$sim∂emëî_Pro˚ssInRódRï‹tCfgCmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1759 
z˛RódRï‹tCfgCmd_t
 *
ªadRï‹tCfgCmd
;

1760 
z˛RódRï‹tCfgR•Cmd_t
 *
ªadRï‹tCfgR•Cmd
;

1761 
z˛Rï‹tCfgR•Rec_t
 *
ªp‹tR•Rec
;

1762 
z˛AârRec_t
 
©åRec
;

1763 
uöt8
 
ªp‹tCh™geLí
;

1764 
uöt8
 *
d©aPå
;

1765 
uöt8
 
hdrLí
;

1766 
uöt8
 
d©aLí
 = 0;

1767 
uöt8
 
°©us
;

1768 
uöt8
 
i
;

1770 
ªadRï‹tCfgCmd
 = (
z˛RódRï‹tCfgCmd_t
 *)
pInMsg
->
©åCmd
;

1773  
i
 = 0; i < 
ªadRï‹tCfgCmd
->
numAâr
; i++ )

1777 i‡–
	`z˛FödAârRec
–
SIMPLEMETER_ENDPOINT
, 
pInMsg
->
˛u°îId
,

1778 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
©åID
, &
©åRec
 ) )

1780 i‡–
	`z˛A«logD©aTy≥
–
©åRec
.
©å
.
d©aTy≥
 ) )

1782 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
©åRec
.
©å
.
d©aTy≥
 );

1785 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

1786 
ªp‹tCh™geLí
++;

1787 
d©aLí
 +
ªp‹tCh™geLí
;

1792 
hdrLí
 = –
z˛RódRï‹tCfgR•Cmd_t
 ) + ( 
ªadRï‹tCfgCmd
->
numAâr
 * –
z˛Rï‹tCfgR•Rec_t
 ) );

1795 
ªadRï‹tCfgR•Cmd
 = (
z˛RódRï‹tCfgR•Cmd_t
 *)
	`oßl_mem_Æloc
–
hdrLí
 + 
d©aLí
 );

1796 i‡–
ªadRï‹tCfgR•Cmd
 =
NULL
 )

1797  
FALSE
;

1799 
d©aPå
 = (
uöt8
 *)–(uöt8 *)
ªadRï‹tCfgR•Cmd
 + 
hdrLí
 );

1800 
ªadRï‹tCfgR•Cmd
->
numAâr
 = 
ªadRï‹tCfgCmd
->numAttr;

1801 
i
 = 0; i < 
ªadRï‹tCfgCmd
->
numAâr
; i++)

1803 
ªp‹tR•Rec
 = &(
ªadRï‹tCfgR•Cmd
->
©åLi°
[
i
]);

1805 i‡–
	`z˛FödAârRec
–
SIMPLEMETER_ENDPOINT
, 
pInMsg
->
˛u°îId
,

1806 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
©åID
, &
©åRec
 ) )

1808 i‡–
	`z˛_M™d©‹yRï‹èbÀAâribuã
–&
©åRec
 ) =
TRUE
 )

1812 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

1813 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 && 
	`z˛A«logD©aTy≥
–
©åRec
.
©å
.
d©aTy≥
 ) )

1815 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
©åRec
.
©å
.
d©aTy≥
 );

1817 
ªp‹tR•Rec
->
ªp‹èbÀCh™ge
 = 
d©aPå
;

1820 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

1821 
ªp‹tCh™geLí
++;

1822 
d©aPå
 +
ªp‹tCh™geLí
;

1828 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

1834 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

1837 
ªp‹tR•Rec
->
°©us
 = status;

1838 
ªp‹tR•Rec
->
©åID
 = 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].attrID;

1842 
	`z˛_SídRódRï‹tCfgR•Cmd
–
SIMPLEMETER_ENDPOINT
, &(
pInMsg
->
§cAddr
),

1843 
pInMsg
->
˛u°îId
, 
ªadRï‹tCfgR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

1844 
TRUE
, 
pInMsg
->
z˛Hdr
.
å™sSeqNum
 );

1845 
	`oßl_mem_‰ì
–
ªadRï‹tCfgR•Cmd
 );

1847  
TRUE
;

1848 
	}
}

1859 
uöt8
 
	$sim∂emëî_Pro˚ssInRódRï‹tCfgR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1861 
z˛RódRï‹tCfgR•Cmd_t
 *
ªadRï‹tCfgR•Cmd
;

1862 
z˛Rï‹tCfgR•Rec_t
 *
ªp‹tR•Rec
;

1863 
uöt8
 
i
;

1865 
ªadRï‹tCfgR•Cmd
 = (
z˛RódRï‹tCfgR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1866  
i
 = 0; i < 
ªadRï‹tCfgR•Cmd
->
numAâr
; i++ )

1868 
ªp‹tR•Rec
 = &(
ªadRï‹tCfgR•Cmd
->
©åLi°
[
i
]);

1873 i‡–
ªp‹tR•Rec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

1875 i‡–
ªp‹tR•Rec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

1886  
TRUE
;

1887 
	}
}

1898 
uöt8
 
	$sim∂emëî_Pro˚ssInRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1900 
z˛Rï‹tCmd_t
 *
ªp‹tCmd
;

1901 
uöt8
 
i
;

1903 
ªp‹tCmd
 = (
z˛Rï‹tCmd_t
 *)
pInMsg
->
©åCmd
;

1904 
i
 = 0; i < 
ªp‹tCmd
->
numAâr
; i++)

1909  
TRUE
;

1910 
	}
}

1922 
uöt8
 
	$sim∂emëî_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1928  
TRUE
;

1929 
	}
}

1931 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

1941 
uöt8
 
	$sim∂emëî_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1943 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

1944 
uöt8
 
i
;

1946 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1947  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

1952  
TRUE
;

1953 
	}
}

	@Projects/zstack/SE/SampleApp/Source/SimpleMeter/simplemeter.h

40 #i‚de‡
SIMPLEMETER_H


41 
	#SIMPLEMETER_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#SIMPLEMETER_ENDPOINT
 0x09

	)

58 
	#SIMPLEMETER_MAX_ATTRIBUTES
 55

	)

60 
	#SIMPLEMETER_MAX_OPTIONS
 2

	)

62 
	#SIMPLEMETER_UPDATE_TIME_PERIOD
 1000

63 
	#SIMPLEMETER_REPORT_PERIOD
 5000

64 
	#SE_DEVICE_POLL_RATE
 8000

65 

	)

67 
	#SIMPLEMETER_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

68 
	#SIMPLEMETER_UPDATE_TIME_EVT
 0x0002

	)

69 
	#SIMPLEMETER_KEY_ESTABLISHMENT_REQUEST_EVT
 0x0004

	)

70 
	#SIMPLEMETER_REPORT_ATTRIBUTE_EVT
 0x0008

	)

71 
	#SIMPLEMETER_CONNECTED_EVT
 0x0010

	)

84 
Sim∂eDes¸ùti⁄F‹m©_t
 
sim∂eMëîSim∂eDesc
;

85 
CONST
 
z˛AârRec_t
 
sim∂eMëîAârs
[];

86 
z˛O±i⁄Rec_t
 
sim∂eMëîO±i⁄s
[];

87 
uöt8
 
sim∂eMëîDevi˚E«bÀd
;

88 
uöt16
 
sim∂eMëîTønsôi⁄Time
;

89 
uöt16
 
sim∂eMëîIdítifyTime
;

90 
uöt32
 
sim∂eMëîTime
;

99 
sim∂emëî_Inô
–
uöt8
 
èsk_id
 );

104 
uöt16
 
sim∂emëî_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

110 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/SimpleMeter/simplemeter_data.c

45 
	~"OSAL.h
"

46 
	~"OSAL_Clock.h
"

47 
	~"ZDC⁄fig.h
"

49 
	~"£.h
"

50 
	~"sim∂emëî.h
"

51 
	~"z˛_gíîÆ.h
"

52 
	~"z˛_£.h
"

53 
	~"z˛_key_e°ablish.h
"

58 
	#SIMPLEMETER_DEVICE_VERSION
 0

	)

59 
	#SIMPLEMETER_FLAGS
 0

	)

61 
	#SIMPLEMETER_HWVERSION
 1

	)

62 
	#SIMPLEMETER_ZCLVERSION
 1

	)

76 c⁄° 
uöt8
 
	gsim∂eMëîZCLVîsi⁄
 = 
SIMPLEMETER_ZCLVERSION
;

77 c⁄° 
uöt8
 
	gsim∂eMëîHWVîsi⁄
 = 
SIMPLEMETER_HWVERSION
;

78 c⁄° 
uöt8
 
	gsim∂eMëîM™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

79 c⁄° 
uöt8
 
	gsim∂eMëîModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

80 c⁄° 
uöt8
 
	gsim∂eMëîD©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

81 c⁄° 
uöt8
 
	gsim∂eMëîPowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

83 
uöt8
 
	gsim∂eMëîLoˇti⁄Des¸ùti⁄
[] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

84 
uöt8
 
	gsim∂eMëîPhysiˇlEnvú⁄mít
 = 
PHY_UNSPECIFIED_ENV
;

85 
uöt8
 
	gsim∂eMëîDevi˚E«bÀd
 = 
DEVICE_ENABLED
;

88 
uöt16
 
	gsim∂eMëîIdítifyTime
 = 0;

89 
uöt32
 
	gsim∂eMëîTime
 = 0;

90 
uöt8
 
	gsim∂eMëîTimeSètus
 = 0x01;

93 
uöt8
 
	gsim∂eMëîCuºítSumm©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

94 
uöt8
 
	gsim∂eMëîCuºítSumm©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

95 
uöt8
 
	gsim∂eMëîCuºítMaxDem™dDñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

96 
uöt8
 
	gsim∂eMëîCuºítMaxDem™dRe˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

97 
uöt8
 
	gsim∂eMëîCuºítTõr1Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

98 
uöt8
 
	gsim∂eMëîCuºítTõr1Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

99 
uöt8
 
	gsim∂eMëîCuºítTõr2Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

100 
uöt8
 
	gsim∂eMëîCuºítTõr2Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

101 
uöt8
 
	gsim∂eMëîCuºítTõr3Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

102 
uöt8
 
	gsim∂eMëîCuºítTõr3Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

103 
uöt8
 
	gsim∂eMëîCuºítTõr4Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

104 
uöt8
 
	gsim∂eMëîCuºítTõr4Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

105 
uöt8
 
	gsim∂eMëîCuºítTõr5Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

106 
uöt8
 
	gsim∂eMëîCuºítTõr5Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

107 
uöt8
 
	gsim∂eMëîCuºítTõr6Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

108 
uöt8
 
	gsim∂eMëîCuºítTõr6Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

109 
uöt8
 
	gsim∂eMëîDFTSumm©i⁄
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

110 
uöt16
 
	gsim∂eMëîDaûyFªezeTime
 = 0x01;

111 
öt8
 
	gsim∂eMëîPowîFa˘‹
 = 0x01;

112 
UTCTime
 
	gsim∂eMëîS«pshŸTime
 = 0x00;

113 
UTCTime
 
	gsim∂eMëîMaxDem™dDñivîdTime
 = 0x00;

114 
UTCTime
 
	gsim∂eMëîMaxDem™dRe˚ivedTime
 = 0x00;

115 
uöt8
 
	gsim∂eMëîDeÁu…Upd©ePîiod
 = 0x1E;

116 
uöt8
 
	gsim∂eMëîFa°PﬁlUpd©ePîiod
 = 0x05;

119 
uöt8
 
	gsim∂eMëîSètus
 = 0x12;

122 
uöt8
 
	gsim∂eMëîUnôOfMósuª
 = 0x01;

123 
uöt24
 
	gsim∂eMëîMu…ùlõr
 = 0x01;

124 
uöt24
 
	gsim∂eMëîDivis‹
 = 0x01;

125 
uöt8
 
	gsim∂eMëîSumm©i⁄F‹m©ög
 = 0x01;

126 
uöt8
 
	gsim∂eMëîDem™dF‹m©tög
 = 0x01;

127 
uöt8
 
	gsim∂eMëîHi°‹iˇlC⁄sum±i⁄F‹m©tög
 = 0x01;

128 
uöt8
 
	gsim∂eMëîDevi˚Ty≥
 = 0x00;

131 
öt24
 
	gsim∂eMëîIn°™ã√ousDem™d
 = 0x01;

132 
uöt24
 
	gsim∂eMëîCuºítdayC⁄sum±i⁄Dñivîed
 = 0x01;

133 
uöt24
 
	gsim∂eMëîCuºítdayC⁄sum±i⁄Re˚ived
 = 0x01;

134 
uöt24
 
	gsim∂eMëîPªviousdayC⁄sum±i⁄Dñivîed
 = 0x01;

135 
uöt24
 
	gsim∂eMëîPªviousdayC⁄sumçi⁄Re˚ived
 = 0x01;

136 
UTCTime
 
	gsim∂eMëîCurP¨tProfûeI¡SèπTimeDñivîed
 = 0x1000;

137 
UTCTime
 
	gsim∂eMëîCurP¨tProfûeI¡SèπTimeRe˚ived
 = 0x2000;

138 
uöt24
 
	gsim∂eMëîCurP¨tProfûeI¡VÆueDñivîed
 = 0x0001;

139 
uöt24
 
	gsim∂eMëîCurP¨tProfûeI¡VÆueRe˚ived
 = 0x0002;

140 
uöt8
 
	gsim∂eMëîMaxNumbîOfPîiodsDñivîed
 = 0x01;

143 
uöt16
 
	gsim∂eMëîKeyE°ablishmítSuôe
 = 
CERTIFICATE_BASED_KEY_ESTABLISHMENT
;

148 
CONST
 
z˛AârRec_t
 
	gsim∂eMëîAârs
[
SIMPLEMETER_MAX_ATTRIBUTES
] =

153 
ZCL_CLUSTER_ID_GEN_BASIC
,

155 
ATTRID_BASIC_ZCL_VERSION
,

156 
ZCL_DATATYPE_UINT8
,

157 
ACCESS_CONTROL_READ
,

158 (*)&
sim∂eMëîZCLVîsi⁄


162 
ZCL_CLUSTER_ID_GEN_BASIC
,

164 
ATTRID_BASIC_HW_VERSION
,

165 
ZCL_DATATYPE_UINT8
,

166 
ACCESS_CONTROL_READ
,

167 (*)&
sim∂eMëîHWVîsi⁄


171 
ZCL_CLUSTER_ID_GEN_BASIC
,

173 
ATTRID_BASIC_MANUFACTURER_NAME
,

174 
ZCL_DATATYPE_CHAR_STR
,

175 
ACCESS_CONTROL_READ
,

176 (*)
sim∂eMëîM™uÁ˘uªrName


180 
ZCL_CLUSTER_ID_GEN_BASIC
,

182 
ATTRID_BASIC_MODEL_ID
,

183 
ZCL_DATATYPE_CHAR_STR
,

184 
ACCESS_CONTROL_READ
,

185 (*)
sim∂eMëîModñId


189 
ZCL_CLUSTER_ID_GEN_BASIC
,

191 
ATTRID_BASIC_DATE_CODE
,

192 
ZCL_DATATYPE_CHAR_STR
,

193 
ACCESS_CONTROL_READ
,

194 (*)
sim∂eMëîD©eCode


198 
ZCL_CLUSTER_ID_GEN_BASIC
,

200 
ATTRID_BASIC_POWER_SOURCE
,

201 
ZCL_DATATYPE_ENUM8
,

202 
ACCESS_CONTROL_READ
,

203 (*)&
sim∂eMëîPowîSour˚


207 
ZCL_CLUSTER_ID_GEN_BASIC
,

209 
ATTRID_BASIC_LOCATION_DESC
,

210 
ZCL_DATATYPE_CHAR_STR
,

211 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

212 (*)
sim∂eMëîLoˇti⁄Des¸ùti⁄


216 
ZCL_CLUSTER_ID_GEN_BASIC
,

218 
ATTRID_BASIC_PHYSICAL_ENV
,

219 
ZCL_DATATYPE_ENUM8
,

220 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

221 (*)&
sim∂eMëîPhysiˇlEnvú⁄mít


225 
ZCL_CLUSTER_ID_GEN_BASIC
,

227 
ATTRID_BASIC_DEVICE_ENABLED
,

228 
ZCL_DATATYPE_BOOLEAN
,

229 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

230 (*)&
sim∂eMëîDevi˚E«bÀd


236 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

238 
ATTRID_IDENTIFY_TIME
,

239 
ZCL_DATATYPE_UINT16
,

240 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

241 (*)&
sim∂eMëîIdítifyTime


249 
ZCL_CLUSTER_ID_GEN_TIME
,

251 
ATTRID_TIME_TIME
,

252 
ZCL_DATATYPE_UTC
,

253 
ACCESS_CONTROL_READ
,

254 (*)&
sim∂eMëîTime


260 
ZCL_CLUSTER_ID_GEN_TIME
,

262 
ATTRID_TIME_STATUS
,

263 
ZCL_DATATYPE_BITMAP8
,

264 
ACCESS_CONTROL_READ
,

265 (*)&
sim∂eMëîTimeSètus


272 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

274 
ATTRID_SE_CURRENT_SUMMATION_DELIVERED
,

275 
ZCL_DATATYPE_UINT48
,

276 
ACCESS_CONTROL_READ
,

277 (*)
sim∂eMëîCuºítSumm©i⁄Dñivîed


281 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

283 
ATTRID_SE_CURRENT_SUMMATION_RECEIVED
,

284 
ZCL_DATATYPE_UINT48
,

285 
ACCESS_CONTROL_READ
,

286 (*)
sim∂eMëîCuºítSumm©i⁄Re˚ived


290 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

292 
ATTRID_SE_CURRENT_MAX_DEMAND_DELIVERED
,

293 
ZCL_DATATYPE_UINT48
,

294 
ACCESS_CONTROL_READ
,

295 (*)
sim∂eMëîCuºítMaxDem™dDñivîed


299 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

301 
ATTRID_SE_CURRENT_MAX_DEMAND_RECEIVED
,

302 
ZCL_DATATYPE_UINT48
,

303 
ACCESS_CONTROL_READ
,

304 (*)
sim∂eMëîCuºítMaxDem™dRe˚ived


308 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

310 
ATTRID_SE_CURRENT_TIER1_SUMMATION_DELIVERED
,

311 
ZCL_DATATYPE_UINT48
,

312 
ACCESS_CONTROL_READ
,

313 (*)
sim∂eMëîCuºítTõr1Summ©i⁄Dñivîed


317 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

319 
ATTRID_SE_CURRENT_TIER1_SUMMATION_RECEIVED
,

320 
ZCL_DATATYPE_UINT48
,

321 
ACCESS_CONTROL_READ
,

322 (*)
sim∂eMëîCuºítTõr1Summ©i⁄Re˚ived


326 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

328 
ATTRID_SE_CURRENT_TIER2_SUMMATION_DELIVERED
,

329 
ZCL_DATATYPE_UINT48
,

330 
ACCESS_CONTROL_READ
,

331 (*)
sim∂eMëîCuºítTõr2Summ©i⁄Dñivîed


335 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

337 
ATTRID_SE_CURRENT_TIER2_SUMMATION_RECEIVED
,

338 
ZCL_DATATYPE_UINT48
,

339 
ACCESS_CONTROL_READ
,

340 (*)
sim∂eMëîCuºítTõr2Summ©i⁄Re˚ived


344 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

346 
ATTRID_SE_CURRENT_TIER3_SUMMATION_DELIVERED
,

347 
ZCL_DATATYPE_UINT48
,

348 
ACCESS_CONTROL_READ
,

349 (*)
sim∂eMëîCuºítTõr3Summ©i⁄Dñivîed


353 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

355 
ATTRID_SE_CURRENT_TIER3_SUMMATION_RECEIVED
,

356 
ZCL_DATATYPE_UINT48
,

357 
ACCESS_CONTROL_READ
,

358 (*)
sim∂eMëîCuºítTõr3Summ©i⁄Re˚ived


362 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

364 
ATTRID_SE_CURRENT_TIER4_SUMMATION_DELIVERED
,

365 
ZCL_DATATYPE_UINT48
,

366 
ACCESS_CONTROL_READ
,

367 (*)
sim∂eMëîCuºítTõr4Summ©i⁄Dñivîed


371 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

373 
ATTRID_SE_CURRENT_TIER4_SUMMATION_RECEIVED
,

374 
ZCL_DATATYPE_UINT48
,

375 
ACCESS_CONTROL_READ
,

376 (*)
sim∂eMëîCuºítTõr4Summ©i⁄Re˚ived


380 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

382 
ATTRID_SE_CURRENT_TIER5_SUMMATION_DELIVERED
,

383 
ZCL_DATATYPE_UINT48
,

384 
ACCESS_CONTROL_READ
,

385 (*)
sim∂eMëîCuºítTõr5Summ©i⁄Dñivîed


389 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

391 
ATTRID_SE_CURRENT_TIER5_SUMMATION_RECEIVED
,

392 
ZCL_DATATYPE_UINT48
,

393 
ACCESS_CONTROL_READ
,

394 (*)
sim∂eMëîCuºítTõr5Summ©i⁄Re˚ived


398 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

400 
ATTRID_SE_CURRENT_TIER6_SUMMATION_DELIVERED
,

401 
ZCL_DATATYPE_UINT48
,

402 
ACCESS_CONTROL_READ
,

403 (*)
sim∂eMëîCuºítTõr6Summ©i⁄Dñivîed


407 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

409 
ATTRID_SE_CURRENT_TIER6_SUMMATION_RECEIVED
,

410 
ZCL_DATATYPE_UINT48
,

411 
ACCESS_CONTROL_READ
,

412 (*)
sim∂eMëîCuºítTõr6Summ©i⁄Re˚ived


416 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

418 
ATTRID_SE_DFT_SUMMATION
,

419 
ZCL_DATATYPE_UINT48
,

420 
ACCESS_CONTROL_READ
,

421 (*)
sim∂eMëîDFTSumm©i⁄


425 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

427 
ATTRID_SE_DAILY_FREEZE_TIME
,

428 
ZCL_DATATYPE_UINT16
,

429 
ACCESS_CONTROL_READ
,

430 (*)&
sim∂eMëîDaûyFªezeTime


434 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

436 
ATTRID_SE_POWER_FACTOR
,

437 
ZCL_DATATYPE_INT8
,

438 
ACCESS_CONTROL_READ
,

439 (*)&
sim∂eMëîPowîFa˘‹


443 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

445 
ATTRID_SE_READING_SNAPSHOT_TIME
,

446 
ZCL_DATATYPE_UTC
,

447 
ACCESS_CONTROL_READ
,

448 (*)&
sim∂eMëîS«pshŸTime


452 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

454 
ATTRID_SE_CURRENT_MAX_DEMAND_DELIVERD_TIME
,

455 
ZCL_DATATYPE_UTC
,

456 
ACCESS_CONTROL_READ
,

457 (*)&
sim∂eMëîMaxDem™dDñivîdTime


461 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

463 
ATTRID_SE_CURRENT_MAX_DEMAND_RECEIVED_TIME
,

464 
ZCL_DATATYPE_UTC
,

465 
ACCESS_CONTROL_READ
,

466 (*)&
sim∂eMëîMaxDem™dRe˚ivedTime


470 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

472 
ATTRID_SE_DEFAULT_UPDATE_PERIOD
,

473 
ZCL_DATATYPE_UINT8
,

474 
ACCESS_CONTROL_READ
,

475 (*)&
sim∂eMëîDeÁu…Upd©ePîiod


479 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

481 
ATTRID_SE_FAST_POLL_UPDATE_PERIOD
,

482 
ZCL_DATATYPE_UINT8
,

483 
ACCESS_CONTROL_READ
,

484 (*)&
sim∂eMëîFa°PﬁlUpd©ePîiod


488 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

490 
ATTRID_SE_STATUS
,

491 
ZCL_DATATYPE_BITMAP8
,

492 
ACCESS_CONTROL_READ
,

493 (*)&
sim∂eMëîSètus


498 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

500 
ATTRID_SE_UNIT_OF_MEASURE
,

501 
ZCL_DATATYPE_ENUM8
,

502 
ACCESS_CONTROL_READ
,

503 (*)&
sim∂eMëîUnôOfMósuª


507 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

509 
ATTRID_SE_MULTIPLIER
,

510 
ZCL_DATATYPE_UINT24
,

511 
ACCESS_CONTROL_READ
,

512 (*)&
sim∂eMëîMu…ùlõr


516 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

518 
ATTRID_SE_DIVISOR
,

519 
ZCL_DATATYPE_UINT24
,

520 
ACCESS_CONTROL_READ
,

521 (*)&
sim∂eMëîDivis‹


525 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

527 
ATTRID_SE_SUMMATION_FORMATTING
,

528 
ZCL_DATATYPE_BITMAP8
,

529 
ACCESS_CONTROL_READ
,

530 (*)&
sim∂eMëîSumm©i⁄F‹m©ög


534 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

536 
ATTRID_SE_DEMAND_FORMATTING
,

537 
ZCL_DATATYPE_BITMAP8
,

538 
ACCESS_CONTROL_READ
,

539 (*)&
sim∂eMëîDem™dF‹m©tög


543 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

545 
ATTRID_SE_HISTORICAL_CONSUMPTION_FORMATTING
,

546 
ZCL_DATATYPE_BITMAP8
,

547 
ACCESS_CONTROL_READ
,

548 (*)&
sim∂eMëîHi°‹iˇlC⁄sum±i⁄F‹m©tög


552 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

554 
ATTRID_SE_METERING_DEVICE_TYPE
,

555 
ZCL_DATATYPE_BITMAP8
,

556 
ACCESS_CONTROL_READ
,

557 (*)&
sim∂eMëîDevi˚Ty≥


561 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

563 
ATTRID_SE_INSTANTANEOUS_DEMAND
,

564 
ZCL_DATATYPE_INT24
,

565 
ACCESS_CONTROL_READ
,

566 (*)&
sim∂eMëîIn°™ã√ousDem™d


570 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

572 
ATTRID_SE_CURRENTDAY_CONSUMPTION_DELIVERED
,

573 
ZCL_DATATYPE_UINT24
,

574 
ACCESS_CONTROL_READ
,

575 (*)&
sim∂eMëîCuºítdayC⁄sum±i⁄Dñivîed


579 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

581 
ATTRID_SE_CURRENTDAY_CONSUMPTION_RECEIVED
,

582 
ZCL_DATATYPE_UINT24
,

583 
ACCESS_CONTROL_READ
,

584 (*)&
sim∂eMëîCuºítdayC⁄sum±i⁄Re˚ived


588 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

590 
ATTRID_SE_PREVIOUSDAY_CONSUMPTION_DELIVERED
,

591 
ZCL_DATATYPE_UINT24
,

592 
ACCESS_CONTROL_READ
,

593 (*)&
sim∂eMëîPªviousdayC⁄sum±i⁄Dñivîed


597 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

599 
ATTRID_SE_PREVIOUSDAY_CONSUMPTION_RECEIVED
,

600 
ZCL_DATATYPE_UINT24
,

601 
ACCESS_CONTROL_READ
,

602 (*)&
sim∂eMëîPªviousdayC⁄sumçi⁄Re˚ived


606 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

608 
ATTRID_SE_CUR_PART_PROFILE_INT_START_TIME_DELIVERED
,

609 
ZCL_DATATYPE_UTC
,

610 
ACCESS_CONTROL_READ
,

611 (*)&
sim∂eMëîCurP¨tProfûeI¡SèπTimeDñivîed


615 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

617 
ATTRID_SE_CUR_PART_PROFILE_INT_START_TIME_RECEIVED
,

618 
ZCL_DATATYPE_UTC
,

619 
ACCESS_CONTROL_READ
,

620 (*)&
sim∂eMëîCurP¨tProfûeI¡SèπTimeRe˚ived


624 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

626 
ATTRID_SE_CUR_PART_PROFILE_INT_VALUE_DELIVERED
,

627 
ZCL_DATATYPE_UINT24
,

628 
ACCESS_CONTROL_READ
,

629 (*)&
sim∂eMëîCurP¨tProfûeI¡VÆueDñivîed


633 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

635 
ATTRID_SE_CUR_PART_PROFILE_INT_VALUE_RECEIVED
,

636 
ZCL_DATATYPE_UINT24
,

637 
ACCESS_CONTROL_READ
,

638 (*)&
sim∂eMëîCurP¨tProfûeI¡VÆueRe˚ived


643 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

645 
ATTRID_SE_MAX_NUMBER_OF_PERIODS_DELIVERED
,

646 
ZCL_DATATYPE_UINT8
,

647 
ACCESS_CONTROL_READ
,

648 (*)&
sim∂eMëîMaxNumbîOfPîiodsDñivîed


652 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

654 
ATTRID_KEY_ESTABLISH_SUITE
,

655 
ZCL_DATATYPE_BITMAP16
,

656 
ACCESS_CONTROL_READ
,

657 (*)&
sim∂eMëîKeyE°ablishmítSuôe


665 
z˛O±i⁄Rec_t
 
	gsim∂eMëîO±i⁄s
[
SIMPLEMETER_MAX_OPTIONS
] =

669 
ZCL_CLUSTER_ID_GEN_TIME
,

670 –
AF_EN_SECURITY
 ),

675 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

676 –
AF_EN_SECURITY
 ),

685 
	#SIMPLEMETER_MAX_INCLUSTERS
 4

	)

686 c⁄° 
cId_t
 
	gsim∂eMëîInClu°îLi°
[
SIMPLEMETER_MAX_INCLUSTERS
] =

688 
ZCL_CLUSTER_ID_GEN_BASIC
,

689 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

690 
ZCL_CLUSTER_ID_GEN_TIME
,

691 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING


694 
	#SIMPLEMETER_MAX_OUTCLUSTERS
 4

	)

695 c⁄° 
cId_t
 
	gsim∂eMëîOutClu°îLi°
[
SIMPLEMETER_MAX_OUTCLUSTERS
] =

697 
ZCL_CLUSTER_ID_GEN_BASIC
,

698 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

699 
ZCL_CLUSTER_ID_GEN_TIME
,

700 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING


703 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gsim∂eMëîSim∂eDesc
 =

705 
SIMPLEMETER_ENDPOINT
,

706 
ZCL_SE_PROFILE_ID
,

707 
ZCL_SE_DEVICEID_METER
,

708 
SIMPLEMETER_DEVICE_VERSION
,

709 
SIMPLEMETER_FLAGS
,

710 
SIMPLEMETER_MAX_INCLUSTERS
,

711 (
cId_t
 *)
sim∂eMëîInClu°îLi°
,

712 
SIMPLEMETER_MAX_OUTCLUSTERS
,

713 (
cId_t
 *)
sim∂eMëîOutClu°îLi°


	@Projects/zstack/SE/Source/se.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

47 
	~"z˛.h
"

48 
	~"z˛_gíîÆ.h
"

49 
	~"z˛_£.h
"

50 
	~"z˛_key_e°ablish.h
"

52 
	~"£.h
"

102 
	$z˛SE_Inô
–
Sim∂eDes¸ùti⁄F‹m©_t
 *
sim∂eDesc
 )

104 
ídPoötDesc_t
 *
ïDesc
;

108 
ïDesc
 = 
	`oßl_mem_Æloc
– ( 
ídPoötDesc_t
 ) );

109 i‡–
ïDesc
 )

112 
ïDesc
->
ídPoöt
 = 
sim∂eDesc
->
EndPoöt
;

113 
ïDesc
->
èsk_id
 = &
z˛_TaskID
;

114 
ïDesc
->
sim∂eDesc
 = simpleDesc;

115 
ïDesc
->
œãncyReq
 = 
noL©ícyReqs
;

118 
	`afRegi°î
–
ïDesc
 );

120 
	}
}

	@Projects/zstack/SE/Source/se.h

41 #i‚de‡
SE_H


42 
	#SE_H


	)

44 #ifde‡
__˝lu•lus


57 
	#ZCL_SE_PROFILE_ID
 0x0109

	)

60 
	#ZCL_SE_DEVICEID_RANGE_EXTENDER
 0x0008

	)

63 
	#ZCL_SE_DEVICEID_ESP
 0x0500

	)

64 
	#ZCL_SE_DEVICEID_METER
 0x0501

	)

65 
	#ZCL_SE_DEVICEID_IN_PREMISE_DISPLAY
 0x0502

	)

66 
	#ZCL_SE_DEVICEID_PCT
 0x0503

	)

67 
	#ZCL_SE_DEVICEID_LOAD_CTRL_EXTENSION
 0x0504

	)

68 
	#ZCL_SE_DEVICEID_SMART_APPLIANCE
 0x0505

	)

69 
	#ZCL_SE_DEVICEID_PREPAY_TERMINAL
 0x0506

	)

70 
	#ZCL_SE_DEVICEID_PHYSICAL
 0x0507

	)

87 
z˛SE_Inô
–
Sim∂eDes¸ùti⁄F‹m©_t
 *
sim∂eDesc
 );

92 #ifde‡
__˝lu•lus


	@Projects/zstack/Samples/GenericApp/Source/GenericApp.c

63 
	~"OSAL.h
"

64 
	~"AF.h
"

65 
	~"ZDAµ.h
"

66 
	~"ZDObje˘.h
"

67 
	~"ZDProfûe.h
"

69 
	~"GíîicAµ.h
"

70 
	~"DebugTø˚.h
"

72 #i‡!
deföed
–
WIN32
 )

73 
	~"OnBﬂrd.h
"

77 
	~"hÆ_lcd.h
"

78 
	~"hÆ_Àd.h
"

79 
	~"hÆ_key.h
"

80 
	~"hÆ_u¨t.h
"

83 #i‡
deföed
–
IAR_ARMCM3_LM
 )

84 
	~"RTOS_Aµ.h
"

103 c⁄° 
cId_t
 
	gGíîicAµ_Clu°îLi°
[
GENERICAPP_MAX_CLUSTERS
] =

105 
GENERICAPP_CLUSTERID


108 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gGíîicAµ_Sim∂eDesc
 =

110 
GENERICAPP_ENDPOINT
,

111 
GENERICAPP_PROFID
,

112 
GENERICAPP_DEVICEID
,

113 
GENERICAPP_DEVICE_VERSION
,

114 
GENERICAPP_FLAGS
,

115 
GENERICAPP_MAX_CLUSTERS
,

116 (
cId_t
 *)
GíîicAµ_Clu°îLi°
,

117 
GENERICAPP_MAX_CLUSTERS
,

118 (
cId_t
 *)
GíîicAµ_Clu°îLi°


125 
ídPoötDesc_t
 
	gGíîicAµ_ïDesc
;

138 
byã
 
	gGíîicAµ_TaskID
;

141 
devSèãs_t
 
	gGíîicAµ_NwkSèã
;

144 
byã
 
	gGíîicAµ_TønsID
;

146 
afAddrTy≥_t
 
	gGíîicAµ_D°Addr
;

151 
GíîicAµ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

152 
GíîicAµ_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 );

153 
GíîicAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pckt
 );

154 
GíîicAµ_SídTheMesßge
( );

156 #i‡
deföed
–
IAR_ARMCM3_LM
 )

157 
GíîicAµ_Pro˚ssRtosMesßge
( );

182 
	$GíîicAµ_Inô
–
uöt8
 
èsk_id
 )

184 
GíîicAµ_TaskID
 = 
èsk_id
;

185 
GíîicAµ_NwkSèã
 = 
DEV_INIT
;

186 
GíîicAµ_TønsID
 = 0;

192 
GíîicAµ_D°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrNŸPª£¡
;

193 
GíîicAµ_D°Addr
.
ídPoöt
 = 0;

194 
GíîicAµ_D°Addr
.
addr
.
sh‹tAddr
 = 0;

197 
GíîicAµ_ïDesc
.
ídPoöt
 = 
GENERICAPP_ENDPOINT
;

198 
GíîicAµ_ïDesc
.
èsk_id
 = &
GíîicAµ_TaskID
;

199 
GíîicAµ_ïDesc
.
sim∂eDesc


200 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
GíîicAµ_Sim∂eDesc
;

201 
GíîicAµ_ïDesc
.
œãncyReq
 = 
noL©ícyReqs
;

204 
	`afRegi°î
–&
GíîicAµ_ïDesc
 );

207 
	`Regi°îF‹Keys
–
GíîicAµ_TaskID
 );

210 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

211 
	`HÆLcdWrôeSåög
–"GíîicAµ", 
HAL_LCD_LINE_1
 );

214 
	`ZDO_Regi°îF‹ZDOMsg
–
GíîicAµ_TaskID
, 
End_Devi˚_Böd_r•
 );

215 
	`ZDO_Regi°îF‹ZDOMsg
–
GíîicAµ_TaskID
, 
M©ch_Desc_r•
 );

217 #i‡
	`deföed
–
IAR_ARMCM3_LM
 )

219 
	`RTOS_Regi°îAµ
–
èsk_id
, 
GENERICAPP_RTOS_MSG_EVT
 );

221 
	}
}

236 
uöt16
 
	$GíîicAµ_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

238 
afIncomögMSGPackë_t
 *
MSGpkt
;

239 
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
;

242 
byã
 
£¡EP
;

243 
ZSètus_t
 
£¡Sètus
;

244 
byã
 
£¡TønsID
;

245 ()
èsk_id
;

247 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

249 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
GíîicAµ_TaskID
 );

250  
MSGpkt
 )

252  
MSGpkt
->
hdr
.
evít
 )

254 
ZDO_CB_MSG
:

255 
	`GíîicAµ_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

258 
KEY_CHANGE
:

259 
	`GíîicAµ_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

262 
AF_DATA_CONFIRM_CMD
:

266 
afD©aC⁄fúm
 = (
afD©aC⁄fúm_t
 *)
MSGpkt
;

267 
£¡EP
 = 
afD©aC⁄fúm
->
ídpoöt
;

268 
£¡Sètus
 = 
afD©aC⁄fúm
->
hdr
.
°©us
;

269 
£¡TønsID
 = 
afD©aC⁄fúm
->
å™sID
;

270 ()
£¡EP
;

271 ()
£¡TønsID
;

274 i‡–
£¡Sètus
 !
ZSuc˚ss
 )

280 
AF_INCOMING_MSG_CMD
:

281 
	`GíîicAµ_MesßgeMSGCB
–
MSGpkt
 );

284 
ZDO_STATE_CHANGE
:

285 
GíîicAµ_NwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

286 i‡–(
GíîicAµ_NwkSèã
 =
DEV_ZB_COORD
)

287 || (
GíîicAµ_NwkSèã
 =
DEV_ROUTER
)

288 || (
GíîicAµ_NwkSèã
 =
DEV_END_DEVICE
) )

291 
	`oßl_°¨t_timîEx
–
GíîicAµ_TaskID
,

292 
GENERICAPP_SEND_MSG_EVT
,

293 
GENERICAPP_SEND_MSG_TIMEOUT
 );

302 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

305 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
GíîicAµ_TaskID
 );

309  (
evíts
 ^ 
SYS_EVENT_MSG
);

314 i‡–
evíts
 & 
GENERICAPP_SEND_MSG_EVT
 )

317 
	`GíîicAµ_SídTheMesßge
();

320 
	`oßl_°¨t_timîEx
–
GíîicAµ_TaskID
,

321 
GENERICAPP_SEND_MSG_EVT
,

322 
GENERICAPP_SEND_MSG_TIMEOUT
 );

325  (
evíts
 ^ 
GENERICAPP_SEND_MSG_EVT
);

329 #i‡
	`deföed
–
IAR_ARMCM3_LM
 )

331 i‡–
evíts
 & 
GENERICAPP_RTOS_MSG_EVT
 )

334 
	`GíîicAµ_Pro˚ssRtosMesßge
();

337  (
evíts
 ^ 
GENERICAPP_RTOS_MSG_EVT
);

343 
	}
}

358 
	$GíîicAµ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

360  
öMsg
->
˛u°îID
 )

362 
End_Devi˚_Böd_r•
:

363 i‡–
	`ZDO_P¨£BödR•
–
öMsg
 ) =
ZSuc˚ss
 )

366 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

368 #i‡
	`deföed
–
BLINK_LEDS
 )

372 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_FLASH
 );

377 
M©ch_Desc_r•
:

379 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

380 i‡–
pR•
 )

382 i‡–
pR•
->
°©us
 =
ZSuc˚ss
 &&ÖR•->
˙t
 )

384 
GíîicAµ_D°Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

385 
GíîicAµ_D°Addr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

387 
GíîicAµ_D°Addr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

390 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

392 
	`oßl_mem_‰ì
–
pR•
 );

397 
	}
}

413 
	$GíîicAµ_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

415 
zAddrTy≥_t
 
d°Addr
;

418 i‡–
shi·
 )

420 i‡–
keys
 & 
HAL_KEY_SW_1
 )

423 i‡–
keys
 & 
HAL_KEY_SW_2
 )

426 i‡–
keys
 & 
HAL_KEY_SW_3
 )

429 i‡–
keys
 & 
HAL_KEY_SW_4
 )

435 i‡–
keys
 & 
HAL_KEY_SW_1
 )

438 #i‡
	`deföed
–
SWITCH1_BIND
 )

440 
keys
 |
HAL_KEY_SW_2
;

441 #ñi‡
	`deföed
–
SWITCH1_MATCH
 )

443 
keys
 |
HAL_KEY_SW_4
;

447 i‡–
keys
 & 
HAL_KEY_SW_2
 )

449 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

452 
d°Addr
.
addrMode
 = 
Addr16Bô
;

453 
d°Addr
.
addr
.
sh‹tAddr
 = 0x0000;

454 
	`ZDP_EndDevi˚BödReq
–&
d°Addr
, 
	`NLME_GëSh‹tAddr
(),

455 
GíîicAµ_ïDesc
.
ídPoöt
,

456 
GENERICAPP_PROFID
,

457 
GENERICAPP_MAX_CLUSTERS
, (
cId_t
 *)
GíîicAµ_Clu°îLi°
,

458 
GENERICAPP_MAX_CLUSTERS
, (
cId_t
 *)
GíîicAµ_Clu°îLi°
,

459 
FALSE
 );

462 i‡–
keys
 & 
HAL_KEY_SW_3
 )

466 i‡–
keys
 & 
HAL_KEY_SW_4
 )

468 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

470 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

471 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

472 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
,

473 
GENERICAPP_PROFID
,

474 
GENERICAPP_MAX_CLUSTERS
, (
cId_t
 *)
GíîicAµ_Clu°îLi°
,

475 
GENERICAPP_MAX_CLUSTERS
, (
cId_t
 *)
GíîicAµ_Clu°îLi°
,

476 
FALSE
 );

479 
	}
}

496 
	$GíîicAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pkt
 )

498  
pkt
->
˛u°îId
 )

500 
GENERICAPP_CLUSTERID
:

502 #i‡
	`deföed
–
LCD_SUPPORTED
 )

503 
	`HÆLcdWrôeS¸ìn
–(*)
pkt
->
cmd
.
D©a
, "rcvd" );

504 #ñi‡
	`deföed
–
WIN32
 )

505 
	`WPRINTSTR
–
pkt
->
cmd
.
D©a
 );

509 
	}
}

520 
	$GíîicAµ_SídTheMesßge
( )

522 
theMesßgeD©a
[] = "Hello World";

524 i‡–
	`AF_D©aReque°
–&
GíîicAµ_D°Addr
, &
GíîicAµ_ïDesc
,

525 
GENERICAPP_CLUSTERID
,

526 (
byã
)
	`oßl_°æí
–
theMesßgeD©a
 ) + 1,

527 (
byã
 *)&
theMesßgeD©a
,

528 &
GíîicAµ_TønsID
,

529 
AF_DISCV_ROUTE
, 
AF_DEFAULT_RADIUS
 ) =
afSètus_SUCCESS
 )

537 
	}
}

539 #i‡
deföed
–
IAR_ARMCM3_LM
 )

549 
	$GíîicAµ_Pro˚ssRtosMesßge
( )

551 
oßlQueue_t
 
öMsg
;

553 i‡–
	`oßl_queue_ª˚ive
–
OßlQueue
, &
öMsg
, 0 ) =
pdPASS
 )

555 
uöt8
 
cmndId
 = 
öMsg
.
cmnd
;

556 
uöt32
 
cou¡î
 = 
	`oßl_buûd_uöt32
–
öMsg
.
cbuf
, 4 );

558  
cmndId
 )

560 
CMD_INCR
:

561 
cou¡î
 += 1;

564 
CMD_ECHO
:

566 
u£rQueue_t
 
outMsg
;

568 
outMsg
.
ª•
 = 
RSP_CODE
 | 
cmndId
;

569 
	`oßl_buf„r_uöt32
–
outMsg
.
rbuf
, 
cou¡î
 );

570 
	`oßl_queue_£nd
–
U£rQueue1
, &
outMsg
, 0 );

578 
	}
}

	@Projects/zstack/Samples/GenericApp/Source/GenericApp.h

40 #i‚de‡
GENERICAPP_H


41 
	#GENERICAPP_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

59 
	#GENERICAPP_ENDPOINT
 10

	)

61 
	#GENERICAPP_PROFID
 0x0F04

	)

62 
	#GENERICAPP_DEVICEID
 0x0001

	)

63 
	#GENERICAPP_DEVICE_VERSION
 0

	)

64 
	#GENERICAPP_FLAGS
 0

	)

66 
	#GENERICAPP_MAX_CLUSTERS
 1

	)

67 
	#GENERICAPP_CLUSTERID
 1

	)

70 
	#GENERICAPP_SEND_MSG_TIMEOUT
 5000

71 

	)

73 
	#GENERICAPP_SEND_MSG_EVT
 0x0001

	)

75 #i‡
deföed
–
IAR_ARMCM3_LM
 )

76 
	#GENERICAPP_RTOS_MSG_EVT
 0x0002

	)

90 
GíîicAµ_Inô
–
byã
 
èsk_id
 );

95 
UINT16
 
GíîicAµ_Pro˚ssEvít
–
byã
 
èsk_id
, UINT16 
evíts
 );

100 #ifde‡
__˝lu•lus


	@Projects/zstack/Samples/GenericApp/Source/OSAL_GenericApp.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"GíîicAµ.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
GíîicAµ_Pro˚ssEvít


90 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

91 
uöt16
 *
	gèsksEvíts
;

106 
	$oßlInôTasks
( )

108 
uöt8
 
èskID
 = 0;

110 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

111 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

113 
	`macTaskInô
–
èskID
++ );

114 
	`nwk_öô
–
èskID
++ );

115 
	`HÆ_Inô
–
èskID
++ );

116 #i‡
	`deföed
–
MT_TASK
 )

117 
	`MT_TaskInô
–
èskID
++ );

119 
	`APS_Inô
–
èskID
++ );

120 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

121 
	`APSF_Inô
–
èskID
++ );

123 
	`ZDAµ_Inô
–
èskID
++ );

124 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

125 
	`ZDNwkMgr_Inô
–
èskID
++ );

127 
	`GíîicAµ_Inô
–
èskID
 );

128 
	}
}

	@Projects/zstack/Samples/SampleApp/CC2530DB/Source/SampleAppHw.c

43 
	~"ZComDef.h
"

44 
	~"hÆ_mcu.h
"

45 
	~"hÆ_defs.h
"

47 
	~"Sam∂eAµHw.h
"

59 
	#JUMPERIN_BIT
 
	`BV
(2)

60 
	#JUMPERIN_SEL
 
P0SEL


	)

61 
	#JUMPERIN_DIR
 
P0DIR


	)

62 
	#JUMPERIN
 
P0


	)

64 
	#JUMPEROUT_BIT
 
	`BV
(3)

65 
	#JUMPEROUT_SEL
 
P0SEL


	)

66 
	#JUMPEROUT_DIR
 
P0DIR


	)

67 
	#JUMPEROUT
 
P0


	)

77 
uöt8
 
	$ªadCo‹dö©‹Jum≥r
( )

79 
uöt8
 
i
,
j
;

80 
uöt8
 
ªsu…
;

82 
JUMPERIN_SEL
 &~(
JUMPERIN_BIT
);

83 
JUMPERIN_DIR
 &~(
JUMPERIN_BIT
);

85 
JUMPEROUT_SEL
 &~(
JUMPEROUT_BIT
);

86 
JUMPEROUT_DIR
 |
JUMPEROUT_BIT
;

89 
JUMPEROUT
 &~(
JUMPEROUT_BIT
);

91  
i
 = 0; i < 8; i++ )

93  
j
 = 0; j < 8; j++ )

96 
ªsu…
 = 
JUMPERIN
 & 
JUMPERIN_BIT
;

99 
j
 = 
i
 & 0x01;

100 i‡(((
j
 =0Ë&& (
ªsu…
 != 0)) ||

101 ((
j
 !0Ë&& (
ªsu…
 !
JUMPERIN_BIT
)))

103  ( 
FALSE
 );

107 
JUMPEROUT
 ^
JUMPEROUT_BIT
;

110  ( 
TRUE
 );

111 
	}
}

	@Projects/zstack/Samples/SampleApp/Source/OSAL_SampleApp.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"Sam∂eAµ.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
Sam∂eAµ_Pro˚ssEvít


90 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

91 
uöt16
 *
	gèsksEvíts
;

106 
	$oßlInôTasks
( )

108 
uöt8
 
èskID
 = 0;

110 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

111 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

113 
	`macTaskInô
–
èskID
++ );

114 
	`nwk_öô
–
èskID
++ );

115 
	`HÆ_Inô
–
èskID
++ );

116 #i‡
	`deföed
–
MT_TASK
 )

117 
	`MT_TaskInô
–
èskID
++ );

119 
	`APS_Inô
–
èskID
++ );

120 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

121 
	`APSF_Inô
–
èskID
++ );

123 
	`ZDAµ_Inô
–
èskID
++ );

124 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

125 
	`ZDNwkMgr_Inô
–
èskID
++ );

127 
	`Sam∂eAµ_Inô
–
èskID
 );

128 
	}
}

	@Projects/zstack/Samples/SampleApp/Source/SampleApp.c

59 
	~"OSAL.h
"

60 
	~"ZGlobÆs.h
"

61 
	~"AF.h
"

62 
	~"≠s_groups.h
"

63 
	~"ZDAµ.h
"

65 
	~"Sam∂eAµ.h
"

66 
	~"Sam∂eAµHw.h
"

68 
	~"OnBﬂrd.h
"

71 
	~"hÆ_lcd.h
"

72 
	~"hÆ_Àd.h
"

73 
	~"hÆ_key.h
"

92 c⁄° 
cId_t
 
	gSam∂eAµ_Clu°îLi°
[
SAMPLEAPP_MAX_CLUSTERS
] =

94 
SAMPLEAPP_PERIODIC_CLUSTERID
,

95 
SAMPLEAPP_FLASH_CLUSTERID


98 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gSam∂eAµ_Sim∂eDesc
 =

100 
SAMPLEAPP_ENDPOINT
,

101 
SAMPLEAPP_PROFID
,

102 
SAMPLEAPP_DEVICEID
,

103 
SAMPLEAPP_DEVICE_VERSION
,

104 
SAMPLEAPP_FLAGS
,

105 
SAMPLEAPP_MAX_CLUSTERS
,

106 (
cId_t
 *)
Sam∂eAµ_Clu°îLi°
,

107 
SAMPLEAPP_MAX_CLUSTERS
,

108 (
cId_t
 *)
Sam∂eAµ_Clu°îLi°


115 
ídPoötDesc_t
 
	gSam∂eAµ_ïDesc
;

128 
uöt8
 
	gSam∂eAµ_TaskID
;

131 
devSèãs_t
 
	gSam∂eAµ_NwkSèã
;

133 
uöt8
 
	gSam∂eAµ_TønsID
;

135 
afAddrTy≥_t
 
	gSam∂eAµ_Pîiodic_D°Addr
;

136 
afAddrTy≥_t
 
	gSam∂eAµ_Fœsh_D°Addr
;

138 
≠s_Group_t
 
	gSam∂eAµ_Group
;

140 
uöt8
 
	gSam∂eAµPîiodicCou¡î
 = 0;

141 
uöt8
 
	gSam∂eAµFœshCou¡î
 = 0;

146 
Sam∂eAµ_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

147 
Sam∂eAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pckt
 );

148 
Sam∂eAµ_SídPîiodicMesßge
( );

149 
Sam∂eAµ_SídFœshMesßge
–
uöt16
 
ÊashTime
 );

173 
	$Sam∂eAµ_Inô
–
uöt8
 
èsk_id
 )

175 
Sam∂eAµ_TaskID
 = 
èsk_id
;

176 
Sam∂eAµ_NwkSèã
 = 
DEV_INIT
;

177 
Sam∂eAµ_TønsID
 = 0;

183 #i‡
	`deföed
 ( 
BUILD_ALL_DEVICES
 )

188 i‡–
	`ªadCo‹dö©‹Jum≥r
() )

189 
zgDevi˚LogiˇlTy≥
 = 
ZG_DEVICETYPE_COORDINATOR
;

191 
zgDevi˚LogiˇlTy≥
 = 
ZG_DEVICETYPE_ROUTER
;

194 #i‡
	`deföed
 ( 
HOLD_AUTO_START
 )

198 
	`ZDOInôDevi˚
(0);

203 
Sam∂eAµ_Pîiodic_D°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrBrﬂdˇ°
;

204 
Sam∂eAµ_Pîiodic_D°Addr
.
ídPoöt
 = 
SAMPLEAPP_ENDPOINT
;

205 
Sam∂eAµ_Pîiodic_D°Addr
.
addr
.
sh‹tAddr
 = 0xFFFF;

208 
Sam∂eAµ_Fœsh_D°Addr
.
addrMode
 = (
afAddrMode_t
)
afAddrGroup
;

209 
Sam∂eAµ_Fœsh_D°Addr
.
ídPoöt
 = 
SAMPLEAPP_ENDPOINT
;

210 
Sam∂eAµ_Fœsh_D°Addr
.
addr
.
sh‹tAddr
 = 
SAMPLEAPP_FLASH_GROUP
;

213 
Sam∂eAµ_ïDesc
.
ídPoöt
 = 
SAMPLEAPP_ENDPOINT
;

214 
Sam∂eAµ_ïDesc
.
èsk_id
 = &
Sam∂eAµ_TaskID
;

215 
Sam∂eAµ_ïDesc
.
sim∂eDesc


216 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
Sam∂eAµ_Sim∂eDesc
;

217 
Sam∂eAµ_ïDesc
.
œãncyReq
 = 
noL©ícyReqs
;

220 
	`afRegi°î
–&
Sam∂eAµ_ïDesc
 );

223 
	`Regi°îF‹Keys
–
Sam∂eAµ_TaskID
 );

226 
Sam∂eAµ_Group
.
ID
 = 0x0001;

227 
	`oßl_mem˝y
–
Sam∂eAµ_Group
.
«me
, "Group 1", 7 );

228 
	`≠s_AddGroup
–
SAMPLEAPP_ENDPOINT
, &
Sam∂eAµ_Group
 );

230 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

231 
	`HÆLcdWrôeSåög
–"Sam∂eAµ", 
HAL_LCD_LINE_1
 );

233 
	}
}

248 
uöt16
 
	$Sam∂eAµ_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

250 
afIncomögMSGPackë_t
 *
MSGpkt
;

251 ()
èsk_id
;

253 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

255 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
Sam∂eAµ_TaskID
 );

256  
MSGpkt
 )

258  
MSGpkt
->
hdr
.
evít
 )

261 
KEY_CHANGE
:

262 
	`Sam∂eAµ_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

266 
AF_INCOMING_MSG_CMD
:

267 
	`Sam∂eAµ_MesßgeMSGCB
–
MSGpkt
 );

271 
ZDO_STATE_CHANGE
:

272 
Sam∂eAµ_NwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

273 i‡–(
Sam∂eAµ_NwkSèã
 =
DEV_ZB_COORD
)

274 || (
Sam∂eAµ_NwkSèã
 =
DEV_ROUTER
)

275 || (
Sam∂eAµ_NwkSèã
 =
DEV_END_DEVICE
) )

278 
	`oßl_°¨t_timîEx
–
Sam∂eAµ_TaskID
,

279 
SAMPLEAPP_SEND_PERIODIC_MSG_EVT
,

280 
SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT
 );

293 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

296 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
Sam∂eAµ_TaskID
 );

300  (
evíts
 ^ 
SYS_EVENT_MSG
);

305 i‡–
evíts
 & 
SAMPLEAPP_SEND_PERIODIC_MSG_EVT
 )

308 
	`Sam∂eAµ_SídPîiodicMesßge
();

311 
	`oßl_°¨t_timîEx
–
Sam∂eAµ_TaskID
, 
SAMPLEAPP_SEND_PERIODIC_MSG_EVT
,

312 (
SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT
 + (
	`oßl_ønd
() & 0x00FF)) );

315  (
evíts
 ^ 
SAMPLEAPP_SEND_PERIODIC_MSG_EVT
);

320 
	}
}

337 
	$Sam∂eAµ_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

339 ()
shi·
;

341 i‡–
keys
 & 
HAL_KEY_SW_1
 )

347 
	`Sam∂eAµ_SídFœshMesßge
–
SAMPLEAPP_FLASH_DURATION
 );

350 i‡–
keys
 & 
HAL_KEY_SW_2
 )

357 
≠s_Group_t
 *
gΩ
;

358 
gΩ
 = 
	`≠s_FödGroup
–
SAMPLEAPP_ENDPOINT
, 
SAMPLEAPP_FLASH_GROUP
 );

359 i‡–
gΩ
 )

362 
	`≠s_RemoveGroup
–
SAMPLEAPP_ENDPOINT
, 
SAMPLEAPP_FLASH_GROUP
 );

367 
	`≠s_AddGroup
–
SAMPLEAPP_ENDPOINT
, &
Sam∂eAµ_Group
 );

370 
	}
}

387 
	$Sam∂eAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pkt
 )

389 
uöt16
 
ÊashTime
;

391  
pkt
->
˛u°îId
 )

393 
SAMPLEAPP_PERIODIC_CLUSTERID
:

396 
SAMPLEAPP_FLASH_CLUSTERID
:

397 
ÊashTime
 = 
	`BUILD_UINT16
(
pkt
->
cmd
.
D©a
[1],Ökt->cmd.Data[2] );

398 
	`HÆLedBlök
–
HAL_LED_4
, 4, 50, (
ÊashTime
 / 4) );

401 
	}
}

412 
	$Sam∂eAµ_SídPîiodicMesßge
( )

414 i‡–
	`AF_D©aReque°
–&
Sam∂eAµ_Pîiodic_D°Addr
, &
Sam∂eAµ_ïDesc
,

415 
SAMPLEAPP_PERIODIC_CLUSTERID
,

417 (
uöt8
*)&
Sam∂eAµPîiodicCou¡î
,

418 &
Sam∂eAµ_TønsID
,

419 
AF_DISCV_ROUTE
,

420 
AF_DEFAULT_RADIUS
 ) =
afSètus_SUCCESS
 )

427 
	}
}

438 
	$Sam∂eAµ_SídFœshMesßge
–
uöt16
 
ÊashTime
 )

440 
uöt8
 
buf„r
[3];

441 
buf„r
[0] = (
uöt8
)(
Sam∂eAµFœshCou¡î
++);

442 
buf„r
[1] = 
	`LO_UINT16
–
ÊashTime
 );

443 
buf„r
[2] = 
	`HI_UINT16
–
ÊashTime
 );

445 i‡–
	`AF_D©aReque°
–&
Sam∂eAµ_Fœsh_D°Addr
, &
Sam∂eAµ_ïDesc
,

446 
SAMPLEAPP_FLASH_CLUSTERID
,

448 
buf„r
,

449 &
Sam∂eAµ_TønsID
,

450 
AF_DISCV_ROUTE
,

451 
AF_DEFAULT_RADIUS
 ) =
afSètus_SUCCESS
 )

458 
	}
}

	@Projects/zstack/Samples/SampleApp/Source/SampleApp.h

40 #i‚de‡
SAMPLEAPP_H


41 
	#SAMPLEAPP_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

59 
	#SAMPLEAPP_ENDPOINT
 20

	)

61 
	#SAMPLEAPP_PROFID
 0x0F08

	)

62 
	#SAMPLEAPP_DEVICEID
 0x0001

	)

63 
	#SAMPLEAPP_DEVICE_VERSION
 0

	)

64 
	#SAMPLEAPP_FLAGS
 0

	)

66 
	#SAMPLEAPP_MAX_CLUSTERS
 2

	)

67 
	#SAMPLEAPP_PERIODIC_CLUSTERID
 1

	)

68 
	#SAMPLEAPP_FLASH_CLUSTERID
 2

	)

71 
	#SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT
 5000

72 

	)

74 
	#SAMPLEAPP_SEND_PERIODIC_MSG_EVT
 0x0001

	)

77 
	#SAMPLEAPP_FLASH_GROUP
 0x0001

	)

80 
	#SAMPLEAPP_FLASH_DURATION
 1000

	)

93 
Sam∂eAµ_Inô
–
uöt8
 
èsk_id
 );

98 
UINT16
 
Sam∂eAµ_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 );

103 #ifde‡
__˝lu•lus


	@Projects/zstack/Samples/SampleApp/Source/SampleAppHw.h

40 #i‚de‡
SAMPLEAPPHW_H


41 
	#SAMPLEAPPHW_H


	)

43 #ifde‡
__˝lu•lus


67 
uöt8
 
ªadCo‹dö©‹Jum≥r
( );

72 #ifde‡
__˝lu•lus


	@Projects/zstack/Samples/SimpleApp/Source/SimpleApp.h

40 #i‚de‡
SIMPLE_APP_H


41 
	#SIMPLE_APP_H


	)

43 
	#MY_PROFILE_ID
 0x0F10

	)

45 
	#MY_ENDPOINT_ID
 0x02

	)

48 
	#DEV_ID_SWITCH
 1

	)

49 
	#DEV_ID_CONTROLLER
 2

	)

50 
	#DEV_ID_SENSOR
 3

	)

51 
	#DEV_ID_COLLECTOR
 4

	)

53 
	#DEVICE_VERSION_SWITCH
 1

	)

54 
	#DEVICE_VERSION_CONTROLLER
 1

	)

55 
	#DEVICE_VERSION_SENSOR
 1

	)

56 
	#DEVICE_VERSION_COLLECTOR
 1

	)

59 
	#TOGGLE_LIGHT_CMD_ID
 1

	)

60 
	#SENSOR_REPORT_CMD_ID
 2

	)

	@Projects/zstack/Samples/SimpleApp/Source/SimpleCollector.c

45 
	~"ZComDef.h
"

46 
	~"OSAL.h
"

47 
	~"ßpi.h
"

48 
	~"hÆ_key.h
"

49 
	~"hÆ_Àd.h
"

50 
	~"DebugTø˚.h
"

51 
	~"Sim∂eAµ.h
"

58 
	#APP_INIT
 0

	)

59 
	#APP_START
 1

	)

62 
	#MY_START_EVT
 0x0001

	)

65 
	#TEMP_REPORT
 0x01

	)

66 
	#BATTERY_REPORT
 0x02

	)

75 
uöt8
 
	gmyAµSèã
 = 
APP_INIT
;

76 
uöt8
 
	gmySèπRëryDñay
 = 10;

83 
	#NUM_OUT_CMD_COLLECTOR
 0

	)

84 
	#NUM_IN_CMD_COLLECTOR
 1

	)

87 c⁄° 
cId_t
 
	gzb_InCmdLi°
[
NUM_IN_CMD_COLLECTOR
] =

89 
SENSOR_REPORT_CMD_ID


93 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gzb_Sim∂eDesc
 =

95 
MY_ENDPOINT_ID
,

96 
MY_PROFILE_ID
,

97 
DEV_ID_COLLECTOR
,

98 
DEVICE_VERSION_COLLECTOR
,

100 
NUM_IN_CMD_COLLECTOR
,

101 (
cId_t
 *Ë
zb_InCmdLi°
,

102 
NUM_OUT_CMD_COLLECTOR
,

103 (
cId_t
 *Ë
NULL


116 
	$zb_H™dÀOßlEvít
–
uöt16
 
evít
 )

119 
	}
}

134 
	$zb_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

136 
uöt8
 
°¨tO±i⁄s
;

137 
uöt8
 
logiˇlTy≥
;

140 i‡–
shi·
 )

142 i‡–
keys
 & 
HAL_KEY_SW_1
 )

145 i‡–
keys
 & 
HAL_KEY_SW_2
 )

148 i‡–
keys
 & 
HAL_KEY_SW_3
 )

151 i‡–
keys
 & 
HAL_KEY_SW_4
 )

157 i‡–
keys
 & 
HAL_KEY_SW_1
 )

159 i‡–
myAµSèã
 =
APP_INIT
 )

164 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
 );

165 i‡–
logiˇlTy≥
 !
ZG_DEVICETYPE_ENDDEVICE
 )

167 
logiˇlTy≥
 = 
ZG_DEVICETYPE_COORDINATOR
;

168 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

175 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

176 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

177 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

178 
	`zb_Sy°emRe£t
();

184 
	`zb_AŒowBöd
( 0xFF );

185 
	`HÆLedSë
–
HAL_LED_1
, 
HAL_LED_MODE_ON
 );

188 i‡–
keys
 & 
HAL_KEY_SW_2
 )

190 i‡–
myAµSèã
 =
APP_INIT
 )

195 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
 );

196 i‡–
logiˇlTy≥
 !
ZG_DEVICETYPE_ENDDEVICE
 )

198 
logiˇlTy≥
 = 
ZG_DEVICETYPE_ROUTER
;

199 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

202 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

203 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

204 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

205 
	`zb_Sy°emRe£t
();

210 
	`zb_AŒowBöd
( 0x00 );

211 
	`HÆLedSë
–
HAL_LED_1
, 
HAL_LED_MODE_OFF
 );

214 i‡–
keys
 & 
HAL_KEY_SW_3
 )

217 i‡–
keys
 & 
HAL_KEY_SW_4
 )

221 
	}
}

234 
	$zb_SèπC⁄fúm
–
uöt8
 
°©us
 )

238 i‡–
°©us
 =
ZB_SUCCESS
 )

240 
myAµSèã
 = 
APP_START
;

245 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_START_EVT
, 
mySèπRëryDñay
 );

247 
	}
}

259 
	$zb_SídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 )

261 
	}
}

273 
	$zb_BödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 )

275 
	}
}

285 
	$zb_AŒowBödC⁄fúm
–
uöt16
 
sour˚
 )

287 
	}
}

300 
	$zb_FödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
, uöt8 *
£¨chKey
, uöt8 *
ªsu…
 )

302 
	}
}

317 
CONST
 
uöt8
 
	g°rDevi˚
[] = "Device:0x";

318 
CONST
 
uöt8
 
	g°rTemp
[] = "Temp: ";

319 
CONST
 
uöt8
 
	g°rB©ãry
[] = "Battery: ";

320 
	$zb_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 )

322 
uöt8
 
buf
[32];

323 
uöt8
 *
pBuf
;

324 
uöt8
 
tmpLí
;

325 
uöt8
 
£ns‹Ródög
;

327 i‡(
comm™d
 =
SENSOR_REPORT_CMD_ID
)

330 
£ns‹Ródög
 = 
pD©a
[1];

334 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
°rDevi˚
 );

335 
pBuf
 = 
	`oßl_mem˝y
–
buf
, 
°rDevi˚
, 
tmpLí
 );

336 
	`_…ﬂ
–
sour˚
, 
pBuf
, 16 );

337 
pBuf
 += 4;

338 *
pBuf
++ = ' ';

340 i‡–
pD©a
[0] =
BATTERY_REPORT
 )

342 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
°rB©ãry
 );

343 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
°rB©ãry
, 
tmpLí
 );

345 *
pBuf
++ = (
£ns‹Ródög
 / 10 ) + '0';

346 *
pBuf
++ = '.';

347 *
pBuf
++ = (
£ns‹Ródög
 % 10 ) + '0';

348 *
pBuf
++ = ' ';

349 *
pBuf
++ = 'V';

353 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
°rTemp
 );

354 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
°rTemp
, 
tmpLí
 );

356 *
pBuf
++ = (
£ns‹Ródög
 / 10 ) + '0';

357 *
pBuf
++ = (
£ns‹Ródög
 % 10 ) + '0';

358 *
pBuf
++ = ' ';

359 *
pBuf
++ = 'C';

362 *
pBuf
++ = '\r';

363 *
pBuf
++ = '\n';

364 *
pBuf
 = '\0';

366 #i‡
	`deföed
–
MT_TASK
 )

367 
	`debug_°r
–(
uöt8
 *)
buf
 );

373 
	}
}

	@Projects/zstack/Samples/SimpleApp/Source/SimpleController.c

47 
	~"ZComDef.h
"

48 
	~"OSAL.h
"

49 
	~"ßpi.h
"

50 
	~"hÆ_key.h
"

51 
	~"hÆ_Àd.h
"

53 
	~"Sim∂eAµ.h
"

60 
	#APP_INIT
 0

	)

61 
	#APP_START
 1

	)

64 
	#MY_START_EVT
 0x0001

	)

73 
uöt8
 
	gmyAµSèã
 = 
APP_INIT
;

74 
uöt8
 
	gmySèπRëryDñay
 = 10;

75 
uöt8
 
	gmyAŒowBödTimeout
 = 10;

82 
	#NUM_OUT_CMD_CONTROLLER
 0

	)

83 
	#NUM_IN_CMD_CONTROLLER
 1

	)

86 c⁄° 
cId_t
 
	gzb_InCmdLi°
[
NUM_IN_CMD_CONTROLLER
] =

88 
TOGGLE_LIGHT_CMD_ID


92 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gzb_Sim∂eDesc
 =

94 
MY_ENDPOINT_ID
,

95 
MY_PROFILE_ID
,

96 
DEV_ID_CONTROLLER
,

97 
DEVICE_VERSION_CONTROLLER
,

99 
NUM_IN_CMD_CONTROLLER
,

100 (
cId_t
 *Ë
zb_InCmdLi°
,

101 
NUM_OUT_CMD_CONTROLLER
,

102 (
cId_t
 *Ë
NULL


115 
	$zb_H™dÀOßlEvít
–
uöt16
 
evít
 )

118 
	}
}

133 
	$zb_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

135 
uöt8
 
°¨tO±i⁄s
;

136 
uöt8
 
logiˇlTy≥
;

139 i‡–
shi·
 )

141 i‡–
keys
 & 
HAL_KEY_SW_1
 )

144 i‡–
keys
 & 
HAL_KEY_SW_2
 )

147 i‡–
keys
 & 
HAL_KEY_SW_3
 )

150 i‡–
keys
 & 
HAL_KEY_SW_4
 )

156 i‡–
keys
 & 
HAL_KEY_SW_1
 )

158 i‡–
myAµSèã
 =
APP_INIT
 )

163 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
 );

164 i‡–
logiˇlTy≥
 !
ZG_DEVICETYPE_ENDDEVICE
 )

166 
logiˇlTy≥
 = 
ZG_DEVICETYPE_COORDINATOR
;

167 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

174 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

175 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

176 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

177 
	`zb_Sy°emRe£t
();

183 
	`zb_AŒowBöd
–
myAŒowBödTimeout
 );

186 i‡–
keys
 & 
HAL_KEY_SW_2
 )

188 i‡–
myAµSèã
 =
APP_INIT
 )

193 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
 );

194 i‡–
logiˇlTy≥
 !
ZG_DEVICETYPE_ENDDEVICE
 )

196 
logiˇlTy≥
 = 
ZG_DEVICETYPE_ROUTER
;

197 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

200 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

201 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

202 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

203 
	`zb_Sy°emRe£t
();

209 i‡–
keys
 & 
HAL_KEY_SW_3
 )

212 i‡–
keys
 & 
HAL_KEY_SW_4
 )

216 
	}
}

229 
	$zb_SèπC⁄fúm
–
uöt8
 
°©us
 )

232 i‡–
°©us
 =
ZB_SUCCESS
 )

234 
myAµSèã
 = 
APP_START
;

239 
	`oßl_°¨t_timîEx
(
ßpi_TaskID
, 
MY_START_EVT
, 
mySèπRëryDñay
);

241 
	}
}

254 
	$zb_SídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 )

256 
	}
}

269 
	$zb_BödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 )

271 
	}
}

281 
	$zb_AŒowBödC⁄fúm
–
uöt16
 
sour˚
 )

284 
	`HÆLedSë
–
HAL_LED_1
, 
HAL_LED_MODE_BLINK
 );

285 
	}
}

298 
	$zb_FödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
, uöt8 *
£¨chKey
, uöt8 *
ªsu…
 )

300 
	}
}

316 
	$zb_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 )

318 i‡(
comm™d
 =
TOGGLE_LIGHT_CMD_ID
)

321 
	`HÆLedSë
(
HAL_LED_1
, 
HAL_LED_MODE_TOGGLE
);

323 
	}
}

	@Projects/zstack/Samples/SimpleApp/Source/SimpleSensor.c

45 
	~"ZComDef.h
"

46 
	~"OSAL.h
"

47 
	~"ßpi.h
"

48 
	~"hÆ_key.h
"

49 
	~"hÆ_Àd.h
"

50 
	~"hÆ_adc.h
"

51 
	~"hÆ_mcu.h
"

52 
	~"Sim∂eAµ.h
"

59 
	#APP_INIT
 0

60 
	#APP_START
 1

61 
	#APP_BOUND
 2

62 

	)

65 
	#MY_START_EVT
 0x0001

	)

66 
	#MY_REPORT_TEMP_EVT
 0x0002

	)

67 
	#MY_REPORT_BATT_EVT
 0x0004

	)

68 
	#MY_FIND_COLLECTOR_EVT
 0x0008

	)

71 #i‡
deföed
 (
HAL_MCU_CC2430
Ë|| deföed (
HAL_MCU_CC2530
)

72 
	#HAL_ADC_REF_125V
 0x00

	)

73 
	#HAL_ADC_DEC_064
 0x00

	)

74 
	#HAL_ADC_DEC_128
 0x10

	)

75 
	#HAL_ADC_DEC_512
 0x30

	)

76 
	#HAL_ADC_CHN_VDD3
 0x0‡

	)

77 
	#HAL_ADC_CHN_TEMP
 0x0ê

	)

88 
uöt8
 
	gmyAµSèã
 = 
APP_INIT
;

90 
uöt16
 
	gmySèπRëryDñay
 = 10000;

91 
uöt16
 
	gmyTempRï‹tPîiod
 = 5000;

92 
uöt16
 
	gmyB©ãryCheckPîiod
 = 21000;

93 
uöt16
 
	gmyBödRëryDñay
 = 10000;

99 
	#NUM_OUT_CMD_SENSOR
 1

	)

100 
	#NUM_IN_CMD_SENSOR
 0

	)

103 c⁄° 
cId_t
 
	gzb_OutCmdLi°
[
NUM_OUT_CMD_SENSOR
] =

105 
SENSOR_REPORT_CMD_ID


109 
	#TEMP_REPORT
 0x01

	)

110 
	#BATTERY_REPORT
 0x02

	)

114 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gzb_Sim∂eDesc
 =

116 
MY_ENDPOINT_ID
,

117 
MY_PROFILE_ID
,

118 
DEV_ID_SENSOR
,

119 
DEVICE_VERSION_SENSOR
,

121 
NUM_IN_CMD_SENSOR
,

122 (
cId_t
 *Ë
NULL
,

123 
NUM_OUT_CMD_SENSOR
,

124 (
cId_t
 *Ë
zb_OutCmdLi°


131 
myAµ_SèπRï‹tög
( );

132 
myAµ_St›Rï‹tög
( );

134 
uöt8
 
myAµ_RódTem≥øtuª
( );

135 
uöt8
 
myAµ_RódB©ãry
( );

147 
	$zb_H™dÀOßlEvít
–
uöt16
 
evít
 )

149 
uöt8
 
pD©a
[2];

151 i‡–
evít
 & 
MY_START_EVT
 )

153 
	`zb_SèπReque°
();

155 i‡–
evít
 & 
MY_REPORT_TEMP_EVT
 )

158 
pD©a
[0] = 
TEMP_REPORT
;

159 
pD©a
[1] = 
	`myAµ_RódTem≥øtuª
();

160 
	`zb_SídD©aReque°
–0xFFFE, 
SENSOR_REPORT_CMD_ID
, 2, 
pD©a
, 0, 
AF_ACK_REQUEST
, 0 );

161 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_REPORT_TEMP_EVT
, 
myTempRï‹tPîiod
 );

164 i‡–
evít
 & 
MY_REPORT_BATT_EVT
 )

168 
pD©a
[0] = 
BATTERY_REPORT
;

169 
pD©a
[1] = 
	`myAµ_RódB©ãry
();

170 
	`zb_SídD©aReque°
–0xFFFE, 
SENSOR_REPORT_CMD_ID
, 2, 
pD©a
, 0, 
AF_ACK_REQUEST
, 0 );

171 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_REPORT_BATT_EVT
, 
myB©ãryCheckPîiod
 );

174 i‡–
evít
 & 
MY_FIND_COLLECTOR_EVT
 )

177 
	`zb_BödDevi˚
–
TRUE
, 
SENSOR_REPORT_CMD_ID
, (
uöt8
 *)
NULL
 );

180 
	}
}

195 
	$zb_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

197 
uöt8
 
°¨tO±i⁄s
;

198 
uöt8
 
logiˇlTy≥
;

201 i‡–
shi·
 )

203 i‡–
keys
 & 
HAL_KEY_SW_1
 )

206 i‡–
keys
 & 
HAL_KEY_SW_2
 )

209 i‡–
keys
 & 
HAL_KEY_SW_3
 )

212 i‡–
keys
 & 
HAL_KEY_SW_4
 )

218 i‡–
keys
 & 
HAL_KEY_SW_1
 )

220 i‡–
myAµSèã
 =
APP_INIT
 )

224 
logiˇlTy≥
 = 
ZG_DEVICETYPE_ENDDEVICE
;

225 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

229 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

230 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

231 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

232 
	`zb_Sy°emRe£t
();

236 i‡–
keys
 & 
HAL_KEY_SW_2
 )

238 i‡–
myAµSèã
 =
APP_INIT
 )

242 
logiˇlTy≥
 = 
ZG_DEVICETYPE_ENDDEVICE
;

243 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

247 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

248 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

249 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

250 
	`zb_Sy°emRe£t
();

253 i‡–
keys
 & 
HAL_KEY_SW_3
 )

256 i‡–
keys
 & 
HAL_KEY_SW_4
 )

260 
	}
}

273 
	$zb_SèπC⁄fúm
–
uöt8
 
°©us
 )

275 i‡–
°©us
 =
ZB_SUCCESS
 )

277 
myAµSèã
 = 
APP_START
;

280 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_FIND_COLLECTOR_EVT
, 
myBödRëryDñay
 );

285 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_START_EVT
, 
mySèπRëryDñay
 );

287 
	}
}

299 
	$zb_SídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 )

301 ()
h™dÀ
;

303 i‡–
°©us
 !
ZSuc˚ss
 )

306 
	`zb_BödDevi˚
–
FALSE
, 
SENSOR_REPORT_CMD_ID
, (
uöt8
 *)
NULL
 );

308 
myAµSèã
 = 
APP_START
;

309 
	`myAµ_St›Rï‹tög
();

312 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_FIND_COLLECTOR_EVT
, 1 );

318 
	}
}

330 
	$zb_BödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 )

332 ()
comm™dId
;

334 i‡––
°©us
 =
ZB_SUCCESS
 ) && ( 
myAµSèã
 =
APP_START
 ) )

336 
myAµSèã
 = 
APP_BOUND
;

339 
	`myAµ_SèπRï‹tög
();

344 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_FIND_COLLECTOR_EVT
, 
myBödRëryDñay
 );

346 
	}
}

356 
	$zb_AŒowBödC⁄fúm
–
uöt16
 
sour˚
 )

358 ()
sour˚
;

359 
	}
}

372 
	$zb_FödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
, uöt8 *
£¨chKey
, uöt8 *
ªsu…
 )

375 ()
£¨chTy≥
;

376 ()
£¨chKey
;

377 ()
ªsu…
;

378 
	}
}

394 
	$zb_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 )

397 ()
sour˚
;

398 ()
comm™d
;

399 ()
Àn
;

400 ()
pD©a
;

401 
	}
}

411 
	$myAµ_SèπRï‹tög
( )

413 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_REPORT_TEMP_EVT
, 
myTempRï‹tPîiod
 );

414 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_REPORT_BATT_EVT
, 
myB©ãryCheckPîiod
 );

415 
	`HÆLedSë
–
HAL_LED_1
, 
HAL_LED_MODE_ON
 );

417 
	}
}

427 
	$myAµ_St›Rï‹tög
( )

429 
	`oßl_°›_timîEx
–
ßpi_TaskID
, 
MY_REPORT_TEMP_EVT
 );

430 
	`oßl_°›_timîEx
–
ßpi_TaskID
, 
MY_REPORT_BATT_EVT
 );

431 
	`HÆLedSë
–
HAL_LED_1
, 
HAL_LED_MODE_OFF
 );

432 
	}
}

442 
uöt8
 
	$myAµ_RódB©ãry
( )

445 #i‡
	`deföed
 (
HAL_MCU_CC2430
Ë|| deföed (
HAL_MCU_CC2530
)

447 
uöt16
 
vÆue
;

450 
ADCIF
 = 0;

452 
ADCCON3
 = (
HAL_ADC_REF_125V
 | 
HAL_ADC_DEC_128
 | 
HAL_ADC_CHN_VDD3
);

455  !
ADCIF
 );

458 
vÆue
 = 
ADCL
;

459 
vÆue
 |((
uöt16
Ë
ADCH
) << 8;

468 
vÆue
 = value >> 6;

469 
vÆue
 = (
uöt16
)(value * 37.5);

470 
vÆue
 = value >> 9;

472  
vÆue
;

476 #i‡
deföed
 
HAL_MCU_MSP430


478 
uöt16
 
vÆue
;

483 #i‡
	`deföed
 (
HAL_BOARD_F5438
)

485 
vÆue
 = 
	`HÆAdcRód
 (
HAL_ADC_CHANNEL_VDD
, 
HAL_ADC_RESOLUTION_14
);

486 
vÆue
 = value * 50;

487 
vÆue
 = value / 4096;

491 
ADC12CTL0
 = 
ADC12ON
+
SHT0_2
+
REFON
;

492 
ADC12CTL1
 = 
SHP
;

493 
ADC12MCTL0
 = 
SREF_1
+
INCH_11
;

495 
ADC12CTL0
 |
ENC
 | 
ADC12SC
;

496 (
ADC12IFG
 & 
BIT0
)==0);

498 
vÆue
 = 
ADC12MEM0
;

507 
vÆue
 = value >> 1;

508 
vÆue
 = value * 30;

509 
vÆue
 = value >> 11;

513  ( 
vÆue
 );

517 #i‡
deföed
 
HAL_MCU_AVR


521 
uöt8
 
vÆue
;

522 
vÆue
 = 20 + ( 
	`oßl_ønd
() & 0x000F );

523  ( 
vÆue
 );

527 
	}
}

537 
uöt8
 
	$myAµ_RódTem≥øtuª
( )

540 #i‡
	`deföed
 (
HAL_MCU_CC2430
Ë|| deföed (
HAL_MCU_CC2530
)

542 
uöt16
 
vÆue
;

545 
ADCIF
 = 0;

547 
ADCCON3
 = (
HAL_ADC_REF_125V
 | 
HAL_ADC_DEC_512
 | 
HAL_ADC_CHN_TEMP
);

550  !
ADCIF
 );

553 
vÆue
 = 
ADCL
;

554 
vÆue
 |((
uöt16
Ë
ADCH
) << 8;

564 #i‡
	`deföed
 (
HAL_MCU_CC2430
)

565 
	#VOLTAGE_AT_TEMP_ZERO
 19477

566 
	#TEMP_COEFFICIENT
 62.9

567 #ñi‡
	`deföed
 (
HAL_MCU_CC2530
)

	)

569 
	#VOLTAGE_AT_TEMP_ZERO
 5158

	)

570 
	#TEMP_COEFFICIENT
 14

	)

574 i‡–
vÆue
 < 
VOLTAGE_AT_TEMP_ZERO
 )

575 
vÆue
 = 
VOLTAGE_AT_TEMP_ZERO
;

577 
vÆue
 = vÆuê- 
VOLTAGE_AT_TEMP_ZERO
;

580 i‡–
vÆue
 > 
TEMP_COEFFICIENT
 * 99 )

581 
vÆue
 = 
TEMP_COEFFICIENT
 * 99;

583  ( (
uöt8
)(
vÆue
/
TEMP_COEFFICIENT
) );

588 #i‡
deföed
 
HAL_MCU_MSP430


590 
uöt16
 
vÆue
;

595 #i‡
	`deföed
 (
HAL_BOARD_F5438
)

597 
mu…ùlõr
, 
off£t
;

599 
vÆue
 = 
	`HÆAdcRód
 (
HAL_ADC_CHANNEL_TEMP
, 
HAL_ADC_RESOLUTION_14
);

601 
mu…ùlõr
 = () 7040 * 9 /5 ;

602 
off£t
 = () 2620 * 9 / 5 - 320;

604 
vÆue
 = (ËvÆuê* 
mu…ùlõr
/4096 - 
off£t
;

606  (
vÆue
);

609 
ADC12CTL0
 = 
ADC12ON
+
SHT0_7
+
REFON
;

610 
ADC12CTL1
 = 
SHP
;

611 
ADC12MCTL0
 = 
SREF_1
+
INCH_10
;

613 
ADC12CTL0
 |
ENC
 | 
ADC12SC
;

614 (
ADC12IFG
 & 
BIT0
)==0);

616 
vÆue
 = 
ADC12MEM0
;

627 
	#VOLTAGE_AT_TEMP_ZERO
 2692

628 
	#TEMP_COEFFICIENT
 9.69

629 

	)

631 i‡–
vÆue
 < 
VOLTAGE_AT_TEMP_ZERO
 )

632 
vÆue
 = 
VOLTAGE_AT_TEMP_ZERO
;

634 
vÆue
 = vÆuê- 
VOLTAGE_AT_TEMP_ZERO
;

637 i‡–
vÆue
 > (
uöt16
)(
TEMP_COEFFICIENT
 * 99.0) )

638 
vÆue
 = (
uöt16
)(
TEMP_COEFFICIENT
 * 99.0);

640  ( (
uöt8
)(
vÆue
/
TEMP_COEFFICIENT
) );

645 #i‡
deföed
 
HAL_MCU_AVR


648 
uöt8
 
vÆue
;

649 
vÆue
 = 20 + ( 
	`oßl_ønd
() & 0x000F );

650  ( 
vÆue
 );

654 
	}
}

	@Projects/zstack/Samples/SimpleApp/Source/SimpleSwitch.c

45 
	~"ZComDef.h
"

46 
	~"OSAL.h
"

47 
	~"ßpi.h
"

48 
	~"hÆ_key.h
"

49 
	~"hÆ_Àd.h
"

51 
	~"Sim∂eAµ.h
"

58 
	#APP_INIT
 0

59 
	#APP_START
 1

60 

	)

62 
	#MY_START_EVT
 0x0001

	)

71 
uöt8
 
	gmyAµSeqNumbî
 = 0;

72 
uöt8
 
	gmyAµSèã
 = 
APP_INIT
;

73 
uöt8
 
	gmySèπRëryDñay
 = 10;

80 
	#NUM_OUT_CMD_SWITCH
 1

	)

81 
	#NUM_IN_CMD_SWITCH
 0

	)

84 c⁄° 
cId_t
 
	gzb_OutCmdLi°
[
NUM_OUT_CMD_SWITCH
] =

86 
TOGGLE_LIGHT_CMD_ID


90 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gzb_Sim∂eDesc
 =

92 
MY_ENDPOINT_ID
,

93 
MY_PROFILE_ID
,

94 
DEV_ID_SWITCH
,

95 
DEVICE_VERSION_SWITCH
,

97 
NUM_IN_CMD_SWITCH
,

98 (
cId_t
 *Ë
NULL
,

99 
NUM_OUT_CMD_SWITCH
,

100 (
cId_t
 *Ë
zb_OutCmdLi°


113 
	$zb_H™dÀOßlEvít
–
uöt16
 
evít
 )

116 i‡–
evít
 & 
MY_START_EVT
 )

118 
	`zb_SèπReque°
();

121 
	}
}

136 
	$zb_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

138 
uöt8
 
°¨tO±i⁄s
;

139 
uöt8
 
logiˇlTy≥
;

142 i‡–
shi·
 )

144 i‡–
keys
 & 
HAL_KEY_SW_1
 )

147 i‡–
keys
 & 
HAL_KEY_SW_2
 )

150 i‡–
keys
 & 
HAL_KEY_SW_3
 )

153 i‡–
keys
 & 
HAL_KEY_SW_4
 )

159 i‡–
keys
 & 
HAL_KEY_SW_1
 )

161 i‡–
myAµSèã
 =
APP_INIT
 )

165 
logiˇlTy≥
 = 
ZG_DEVICETYPE_ENDDEVICE
;

166 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

170 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

171 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

172 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

173 
	`zb_Sy°emRe£t
();

179 
	`zb_BödDevi˚
(
TRUE
, 
TOGGLE_LIGHT_CMD_ID
, 
NULL
);

182 i‡–
keys
 & 
HAL_KEY_SW_2
 )

184 i‡–
myAµSèã
 =
APP_INIT
 )

188 
logiˇlTy≥
 = 
ZG_DEVICETYPE_ENDDEVICE
;

189 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

192 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

193 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

194 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

195 
	`zb_Sy°emRe£t
();

200 
	`zb_SídD©aReque°
–0xFFFE, 
TOGGLE_LIGHT_CMD_ID
, 0,

201 (
uöt8
 *)
NULL
, 
myAµSeqNumbî
, 0, 0 );

204 i‡–
keys
 & 
HAL_KEY_SW_3
 )

207 
	`zb_BödDevi˚
(
FALSE
, 
TOGGLE_LIGHT_CMD_ID
, 
NULL
);

209 i‡–
keys
 & 
HAL_KEY_SW_4
 )

213 
	}
}

226 
	$zb_SèπC⁄fúm
–
uöt8
 
°©us
 )

229 i‡–
°©us
 =
ZB_SUCCESS
 )

231 
myAµSèã
 = 
APP_START
;

236 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_START_EVT
, 
mySèπRëryDñay
 );

238 
	}
}

251 
	$zb_SídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 )

253 
	}
}

266 
	$zb_BödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 )

269 i‡––
°©us
 =
ZB_SUCCESS
 ) && ( 
myAµSèã
 =
APP_START
 ) )

272 
	`HÆLedSë
–
HAL_LED_1
, 
HAL_LED_MODE_ON
 );

274 
	}
}

284 
	$zb_AŒowBödC⁄fúm
–
uöt16
 
sour˚
 )

287 
	}
}

300 
	$zb_FödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
, uöt8 *
£¨chKey
, uöt8 *
ªsu…
 )

302 
	}
}

318 
	$zb_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 )

321 
	}
}

	@Projects/zstack/Samples/TestRoutine/Source/OSAL_TestRoutine.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"Te°Routöe.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
Te°Routöe_Pro˚ssEvít


90 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

91 
uöt16
 *
	gèsksEvíts
;

106 
	$oßlInôTasks
( )

108 
uöt8
 
èskID
 = 0;

110 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

111 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

113 
	`macTaskInô
–
èskID
++ );

114 
	`nwk_öô
–
èskID
++ );

115 
	`HÆ_Inô
–
èskID
++ );

116 #i‡
	`deföed
–
MT_TASK
 )

117 
	`MT_TaskInô
–
èskID
++ );

119 
	`APS_Inô
–
èskID
++ );

120 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

121 
	`APSF_Inô
–
èskID
++ );

123 
	`ZDAµ_Inô
–
èskID
++ );

124 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

125 
	`ZDNwkMgr_Inô
–
èskID
++ );

127 
	`Te°Routöe_Inô
–
èskID
 );

128 
	}
}

	@Projects/zstack/Samples/TestRoutine/Source/TestRoutine.c

63 
	~"OSAL.h
"

64 
	~"AF.h
"

65 
	~"ZDAµ.h
"

66 
	~"ZDObje˘.h
"

67 
	~"ZDProfûe.h
"

69 
	~"Te°Routöe.h
"

70 
	~"DebugTø˚.h
"

72 #i‡!
deföed
–
WIN32
 )

73 
	~"OnBﬂrd.h
"

77 
	~"hÆ_lcd.h
"

78 
	~"hÆ_Àd.h
"

79 
	~"hÆ_key.h
"

80 
	~"hÆ_u¨t.h
"

82 
	~<°dio.h
>

85 #i‡
deföed
–
IAR_ARMCM3_LM
 )

86 
	~"RTOS_Aµ.h
"

105 c⁄° 
cId_t
 
	gTe°Routöe_Clu°îLi°
[
Te°Routöe_MAX_CLUSTERS
] =

107 
Te°Routöe_CLUSTERID


110 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gTe°Routöe_Sim∂eDesc
 =

112 
Te°Routöe_ENDPOINT
,

113 
Te°Routöe_PROFID
,

114 
Te°Routöe_DEVICEID
,

115 
Te°Routöe_DEVICE_VERSION
,

116 
Te°Routöe_FLAGS
,

117 
Te°Routöe_MAX_CLUSTERS
,

118 (
cId_t
 *)
Te°Routöe_Clu°îLi°
,

119 
Te°Routöe_MAX_CLUSTERS
,

120 (
cId_t
 *)
Te°Routöe_Clu°îLi°


127 
ídPoötDesc_t
 
	gTe°Routöe_ïDesc
;

140 
byã
 
	gTe°Routöe_TaskID
;

143 
devSèãs_t
 
	gTe°Routöe_NwkSèã
;

146 
byã
 
	gTe°Routöe_TønsID
;

148 
afAddrTy≥_t
 
	gTe°Routöe_D°Addr
;

149 
uöt8
 
	gbödFœg
 = 0;

154 
Te°Routöe_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

155 
Te°Routöe_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 );

156 
Te°Routöe_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pckt
 );

159 #i‡
deföed
–
IAR_ARMCM3_LM
 )

160 
Te°Routöe_Pro˚ssRtosMesßge
( );

185 
	$Te°Routöe_Inô
–
uöt8
 
èsk_id
 )

187 
Te°Routöe_TaskID
 = 
èsk_id
;

188 
Te°Routöe_NwkSèã
 = 
DEV_INIT
;

189 
Te°Routöe_TønsID
 = 0;

196 
Te°Routöe_D°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrNŸPª£¡
;

197 
Te°Routöe_D°Addr
.
ídPoöt
 = 0;

198 
Te°Routöe_D°Addr
.
addr
.
sh‹tAddr
 = 0;

201 
Te°Routöe_ïDesc
.
ídPoöt
 = 
Te°Routöe_ENDPOINT
;

202 
Te°Routöe_ïDesc
.
èsk_id
 = &
Te°Routöe_TaskID
;

203 
Te°Routöe_ïDesc
.
sim∂eDesc


204 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
Te°Routöe_Sim∂eDesc
;

205 
Te°Routöe_ïDesc
.
œãncyReq
 = 
noL©ícyReqs
;

208 
	`afRegi°î
–&
Te°Routöe_ïDesc
 );

211 
	`Regi°îF‹Keys
–
Te°Routöe_TaskID
 );

214 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

215 
	`HÆLcdWrôeSåög
–"Te°Routöe", 
HAL_LCD_LINE_1
 );

218 
	`ZDO_Regi°îF‹ZDOMsg
–
Te°Routöe_TaskID
, 
End_Devi˚_Böd_r•
 );

219 
	`ZDO_Regi°îF‹ZDOMsg
–
Te°Routöe_TaskID
, 
M©ch_Desc_r•
 );

221 #i‡
	`deföed
–
IAR_ARMCM3_LM
 )

223 
	`RTOS_Regi°îAµ
–
èsk_id
, 
Te°Routöe_RTOS_MSG_EVT
 );

225 
	}
}

240 
uöt16
 
	$Te°Routöe_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

242 
afIncomögMSGPackë_t
 *
MSGpkt
;

243 
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
;

246 
byã
 
£¡EP
;

247 
ZSètus_t
 
£¡Sètus
;

248 
byã
 
£¡TønsID
;

249 ()
èsk_id
;

251 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

253 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
Te°Routöe_TaskID
 );

254  
MSGpkt
 )

256  
MSGpkt
->
hdr
.
evít
 )

258 
ZDO_CB_MSG
:

259 
	`Te°Routöe_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

262 
KEY_CHANGE
:

263 
	`Te°Routöe_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

266 
AF_DATA_CONFIRM_CMD
:

270 
afD©aC⁄fúm
 = (
afD©aC⁄fúm_t
 *)
MSGpkt
;

271 
£¡EP
 = 
afD©aC⁄fúm
->
ídpoöt
;

272 
£¡Sètus
 = 
afD©aC⁄fúm
->
hdr
.
°©us
;

273 
£¡TønsID
 = 
afD©aC⁄fúm
->
å™sID
;

274 ()
£¡EP
;

275 ()
£¡TønsID
;

278 i‡–
£¡Sètus
 !
ZSuc˚ss
 )

284 
AF_INCOMING_MSG_CMD
:

285 
	`Te°Routöe_MesßgeMSGCB
–
MSGpkt
 );

288 
ZDO_STATE_CHANGE
:

289 
Te°Routöe_NwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

290 i‡–(
Te°Routöe_NwkSèã
 =
DEV_ZB_COORD
)

291 || (
Te°Routöe_NwkSèã
 =
DEV_ROUTER
)

292 || (
Te°Routöe_NwkSèã
 =
DEV_END_DEVICE
) )

306 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

309 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
Te°Routöe_TaskID
 );

313  (
evíts
 ^ 
SYS_EVENT_MSG
);

318 i‡–
evíts
 & 
Te°Routöe_SEND_MSG_EVT
 )

321  (
evíts
 ^ 
Te°Routöe_SEND_MSG_EVT
);

325 #i‡
	`deföed
–
IAR_ARMCM3_LM
 )

327 i‡–
evíts
 & 
Te°Routöe_RTOS_MSG_EVT
 )

330 
	`Te°Routöe_Pro˚ssRtosMesßge
();

333  (
evíts
 ^ 
Te°Routöe_RTOS_MSG_EVT
);

339 
	}
}

354 
	$Te°Routöe_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

356  
öMsg
->
˛u°îID
 )

358 
End_Devi˚_Böd_r•
:

359 i‡–
	`ZDO_P¨£BödR•
–
öMsg
 ) =
ZSuc˚ss
 )

361 
bödFœg
 = 1;

363 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

364 
	`HÆLcdWrôeSåög
("BödÉ°ablish",
HAL_LCD_LINE_3
);

366 #i‡
	`deföed
–
BLINK_LEDS
 )

369 
bödFœg
 = 0;

371 
	`HÆLedSë
 ( 
HAL_LED_2
, 
HAL_LED_MODE_FLASH
 );

372 
	`HÆLcdWrôeSåög
("Böd faûuª",
HAL_LCD_LINE_3
);

377 
M©ch_Desc_r•
:

379 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

380 i‡–
pR•
 )

382 i‡–
pR•
->
°©us
 =
ZSuc˚ss
 &&ÖR•->
˙t
 )

384 
Te°Routöe_D°Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

385 
Te°Routöe_D°Addr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

387 
Te°Routöe_D°Addr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

390 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

392 
	`oßl_mem_‰ì
–
pR•
 );

397 
	}
}

413 
	$Te°Routöe_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

415 
zAddrTy≥_t
 
d°Addr
;

418 i‡–
shi·
 )

420 i‡–
keys
 & 
HAL_KEY_SW_1
 )

423 i‡–
keys
 & 
HAL_KEY_SW_2
 )

426 i‡–
keys
 & 
HAL_KEY_SW_3
 )

429 i‡–
keys
 & 
HAL_KEY_SW_4
 )

435 i‡–
keys
 & 
HAL_KEY_SW_1
 )

437 
keys
 |
HAL_KEY_SW_4
;

440 i‡–
keys
 & 
HAL_KEY_SW_2
 )

442 
keys
 |
HAL_KEY_SW_4
;

445 i‡–
keys
 & 
HAL_KEY_SW_3
 )

447 
keys
 |
HAL_KEY_SW_4
;

450 i‡–
keys
 & 
HAL_KEY_SW_4
 )

453 if(
bödFœg
 == 0)

456 
d°Addr
.
addrMode
 = 
Addr16Bô
;

457 
d°Addr
.
addr
.
sh‹tAddr
 = 0x0000;

458 
	`ZDP_EndDevi˚BödReq
–&
d°Addr
, 
	`NLME_GëSh‹tAddr
(),

459 
Te°Routöe_ïDesc
.
ídPoöt
,

460 
Te°Routöe_PROFID
,

461 
Te°Routöe_MAX_CLUSTERS
, (
cId_t
 *)
Te°Routöe_Clu°îLi°
,

462 
Te°Routöe_MAX_CLUSTERS
, (
cId_t
 *)
Te°Routöe_Clu°îLi°
,

463 
FALSE
 );

470 
uöt8
 
ödex
 = 0;

471 
ödex
++;

472 *
°rög
[2] = {"Hello World","Gostyu.com"};

474 i‡–
	`AF_D©aReque°
–&
Te°Routöe_D°Addr
, &
Te°Routöe_ïDesc
,

475 
Te°Routöe_CLUSTERID
,

476 (
byã
)
	`oßl_°æí
–
°rög
[
ödex
 % 2] ) + 1,

477 (
byã
 *)
°rög
[
ödex
 % 2],

478 &
Te°Routöe_TønsID
,

479 
AF_DISCV_ROUTE
, 
AF_DEFAULT_RADIUS
 ) =
afSètus_SUCCESS
 )

490 
	}
}

507 
	$Te°Routöe_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pkt
 )

509  
pkt
->
˛u°îId
 )

511 
Te°Routöe_CLUSTERID
:

513 #i‡
	`deföed
–
LCD_SUPPORTED
 )

514 
	`HÆLcdWrôeS¸ìn
–(*)
pkt
->
cmd
.
D©a
, "rcvd" );

515 #ñi‡
	`deföed
–
WIN32
 )

516 
	`WPRINTSTR
–
pkt
->
cmd
.
D©a
 );

520 
	}
}

524 #i‡
deföed
–
IAR_ARMCM3_LM
 )

534 
	$Te°Routöe_Pro˚ssRtosMesßge
( )

536 
oßlQueue_t
 
öMsg
;

538 i‡–
	`oßl_queue_ª˚ive
–
OßlQueue
, &
öMsg
, 0 ) =
pdPASS
 )

540 
uöt8
 
cmndId
 = 
öMsg
.
cmnd
;

541 
uöt32
 
cou¡î
 = 
	`oßl_buûd_uöt32
–
öMsg
.
cbuf
, 4 );

543  
cmndId
 )

545 
CMD_INCR
:

546 
cou¡î
 += 1;

549 
CMD_ECHO
:

551 
u£rQueue_t
 
outMsg
;

553 
outMsg
.
ª•
 = 
RSP_CODE
 | 
cmndId
;

554 
	`oßl_buf„r_uöt32
–
outMsg
.
rbuf
, 
cou¡î
 );

555 
	`oßl_queue_£nd
–
U£rQueue1
, &
outMsg
, 0 );

563 
	}
}

	@Projects/zstack/Samples/TestRoutine/Source/TestRoutine.h

40 #i‚de‡
Te°Routöe_H


41 
	#Te°Routöe_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

59 
	#Te°Routöe_ENDPOINT
 10

	)

61 
	#Te°Routöe_PROFID
 0x0F04

	)

62 
	#Te°Routöe_DEVICEID
 0x0001

	)

63 
	#Te°Routöe_DEVICE_VERSION
 0

	)

64 
	#Te°Routöe_FLAGS
 0

	)

66 
	#Te°Routöe_MAX_CLUSTERS
 1

	)

67 
	#Te°Routöe_CLUSTERID
 1

	)

70 
	#Te°Routöe_SEND_MSG_TIMEOUT
 5000

71 

	)

73 
	#Te°Routöe_SEND_MSG_EVT
 0x0001

	)

75 #i‡
deföed
–
IAR_ARMCM3_LM
 )

76 
	#Te°Routöe_RTOS_MSG_EVT
 0x0002

	)

90 
Te°Routöe_Inô
–
byã
 
èsk_id
 );

95 
UINT16
 
Te°Routöe_Pro˚ssEvít
–
byã
 
èsk_id
, UINT16 
evíts
 );

100 #ifde‡
__˝lu•lus


	@Projects/zstack/Samples/TestRoutine__/Source/OSAL_TestRoutine.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"Te°Routöe.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
Te°Routöe_Pro˚ssEvít


90 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

91 
uöt16
 *
	gèsksEvíts
;

106 
	$oßlInôTasks
( )

108 
uöt8
 
èskID
 = 0;

110 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

111 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

113 
	`macTaskInô
–
èskID
++ );

114 
	`nwk_öô
–
èskID
++ );

115 
	`HÆ_Inô
–
èskID
++ );

116 #i‡
	`deföed
–
MT_TASK
 )

117 
	`MT_TaskInô
–
èskID
++ );

119 
	`APS_Inô
–
èskID
++ );

120 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

121 
	`APSF_Inô
–
èskID
++ );

123 
	`ZDAµ_Inô
–
èskID
++ );

124 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

125 
	`ZDNwkMgr_Inô
–
èskID
++ );

127 
	`Te°Routöe_Inô
–
èskID
 );

128 
	}
}

	@Projects/zstack/Samples/TestRoutine__/Source/TestRoutine.c

63 
	~"OSAL.h
"

64 
	~"AF.h
"

65 
	~"ZDAµ.h
"

66 
	~"ZDObje˘.h
"

67 
	~"ZDProfûe.h
"

69 
	~"Te°Routöe.h
"

70 
	~"DebugTø˚.h
"

72 #i‡!
deföed
–
WIN32
 )

73 
	~"OnBﬂrd.h
"

77 
	~"hÆ_lcd.h
"

78 
	~"hÆ_Àd.h
"

79 
	~"hÆ_key.h
"

80 
	~"hÆ_u¨t.h
"

82 
	~<°dio.h
>

85 #i‡
deföed
–
IAR_ARMCM3_LM
 )

86 
	~"RTOS_Aµ.h
"

105 c⁄° 
cId_t
 
	gTe°Routöe_Clu°îLi°
[
TESTROUTINE_MAX_CLUSTERS
] =

107 
TESTROUTINE_CLUSTERID


110 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gTe°Routöe_Sim∂eDesc
 =

112 
TESTROUTINE_ENDPOINT
,

113 
TESTROUTINE_PROFID
,

114 
TESTROUTINE_DEVICEID
,

115 
TESTROUTINE_DEVICE_VERSION
,

116 
TESTROUTINE_FLAGS
,

117 
TESTROUTINE_MAX_CLUSTERS
,

118 (
cId_t
 *)
Te°Routöe_Clu°îLi°
,

119 
TESTROUTINE_MAX_CLUSTERS
,

120 (
cId_t
 *)
Te°Routöe_Clu°îLi°


127 
ídPoötDesc_t
 
	gTe°Routöe_ïDesc
;

140 
byã
 
	gTe°Routöe_TaskID
;

143 
devSèãs_t
 
	gTe°Routöe_NwkSèã
;

146 
byã
 
	gTe°Routöe_TønsID
;

148 
afAddrTy≥_t
 
	gTe°Routöe_D°Addr
;

150 
uöt8
 
	gföishFœg
 = 0;

155 
Te°Routöe_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

156 
Te°Routöe_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 );

157 
Te°Routöe_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pckt
 );

159 
Te°Routöe_SídTheMesßge
–
uöt8
 
ödex
 );

161 #i‡
deföed
–
IAR_ARMCM3_LM
 )

162 
Te°Routöe_Pro˚ssRtosMesßge
( );

187 
	$Te°Routöe_Inô
–
uöt8
 
èsk_id
 )

189 
Te°Routöe_TaskID
 = 
èsk_id
;

190 
Te°Routöe_NwkSèã
 = 
DEV_INIT
;

191 
Te°Routöe_TønsID
 = 0;

197 
Te°Routöe_D°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrNŸPª£¡
;

198 
Te°Routöe_D°Addr
.
ídPoöt
 = 0;

199 
Te°Routöe_D°Addr
.
addr
.
sh‹tAddr
 = 0;

202 
Te°Routöe_ïDesc
.
ídPoöt
 = 
TESTROUTINE_ENDPOINT
;

203 
Te°Routöe_ïDesc
.
èsk_id
 = &
Te°Routöe_TaskID
;

204 
Te°Routöe_ïDesc
.
sim∂eDesc


205 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
Te°Routöe_Sim∂eDesc
;

206 
Te°Routöe_ïDesc
.
œãncyReq
 = 
noL©ícyReqs
;

209 
	`afRegi°î
–&
Te°Routöe_ïDesc
 );

212 
	`Regi°îF‹Keys
–
Te°Routöe_TaskID
 );

215 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

216 
	`HÆLcdWrôeSåög
–"Te°Routöe", 
HAL_LCD_LINE_1
 );

219 
	`ZDO_Regi°îF‹ZDOMsg
–
Te°Routöe_TaskID
, 
End_Devi˚_Böd_r•
 );

220 
	`ZDO_Regi°îF‹ZDOMsg
–
Te°Routöe_TaskID
, 
M©ch_Desc_r•
 );

222 #i‡
	`deföed
–
IAR_ARMCM3_LM
 )

224 
	`RTOS_Regi°îAµ
–
èsk_id
, 
TESTROUTINE_RTOS_MSG_EVT
 );

226 
	}
}

241 
uöt16
 
	$Te°Routöe_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

243 
afIncomögMSGPackë_t
 *
MSGpkt
;

244 
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
;

247 
byã
 
£¡EP
;

248 
ZSètus_t
 
£¡Sètus
;

249 
byã
 
£¡TønsID
;

250 ()
èsk_id
;

252 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

254 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
Te°Routöe_TaskID
 );

255  
MSGpkt
 )

257  
MSGpkt
->
hdr
.
evít
 )

259 
ZDO_CB_MSG
:

260 
	`Te°Routöe_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

263 
KEY_CHANGE
:

264 
	`Te°Routöe_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

267 
AF_DATA_CONFIRM_CMD
:

271 
afD©aC⁄fúm
 = (
afD©aC⁄fúm_t
 *)
MSGpkt
;

272 
£¡EP
 = 
afD©aC⁄fúm
->
ídpoöt
;

273 
£¡Sètus
 = 
afD©aC⁄fúm
->
hdr
.
°©us
;

274 
£¡TønsID
 = 
afD©aC⁄fúm
->
å™sID
;

275 ()
£¡EP
;

276 ()
£¡TønsID
;

279 i‡–
£¡Sètus
 !
ZSuc˚ss
 )

285 
AF_INCOMING_MSG_CMD
:

286 
	`Te°Routöe_MesßgeMSGCB
–
MSGpkt
 );

289 
ZDO_STATE_CHANGE
:

290 
Te°Routöe_NwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

292 i‡((
Te°Routöe_NwkSèã
 =
DEV_END_DEVICE
))

294 
föishFœg
 = 1;

295 
	`HÆLcdWrôeSåög
("Key u∞Síd D©a",
HAL_LCD_LINE_8
);

299 
föishFœg
 = 0;

308 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

311 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
Te°Routöe_TaskID
 );

315  (
evíts
 ^ 
SYS_EVENT_MSG
);

322 #i‡
	`deföed
–
IAR_ARMCM3_LM
 )

324 i‡–
evíts
 & 
TESTROUTINE_RTOS_MSG_EVT
 )

327 
	`Te°Routöe_Pro˚ssRtosMesßge
();

330  (
evíts
 ^ 
TESTROUTINE_RTOS_MSG_EVT
);

336 
	}
}

351 
	$Te°Routöe_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

353  
öMsg
->
˛u°îID
 )

355 
End_Devi˚_Böd_r•
:

356 i‡–
	`ZDO_P¨£BödR•
–
öMsg
 ) =
ZSuc˚ss
 )

359 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

361 #i‡
	`deföed
–
BLINK_LEDS
 )

365 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_FLASH
 );

370 
M©ch_Desc_r•
:

372 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

373 i‡–
pR•
 )

375 i‡–
pR•
->
°©us
 =
ZSuc˚ss
 &&ÖR•->
˙t
 )

377 
Te°Routöe_D°Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

378 
Te°Routöe_D°Addr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

380 
Te°Routöe_D°Addr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

383 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

385 
	`oßl_mem_‰ì
–
pR•
 );

390 
	}
}

406 
	$Te°Routöe_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

409 i‡–
shi·
 )

411 i‡–
keys
 & 
HAL_KEY_SW_1
 )

414 i‡–
keys
 & 
HAL_KEY_SW_2
 )

417 i‡–
keys
 & 
HAL_KEY_SW_3
 )

420 i‡–
keys
 & 
HAL_KEY_SW_4
 )

426 i‡–
keys
 & 
HAL_KEY_SW_1
 )

429 
	`HÆLedSë
 ( 
HAL_LED_1
, 
HAL_LED_MODE_TOGGLE
 );

430 if–
föishFœg
 > 0 )

432 
	`Te°Routöe_SídTheMesßge
–
föishFœg
++ );

433 if(
föishFœg
 == 0)

435 
föishFœg
 = 2;

440 i‡–
keys
 & 
HAL_KEY_SW_2
 )

446 i‡–
keys
 & 
HAL_KEY_SW_3
 )

450 i‡–
keys
 & 
HAL_KEY_SW_4
 )

455 
	}
}

472 
	$Te°Routöe_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pkt
 )

474  
pkt
->
˛u°îId
 )

476 
TESTROUTINE_CLUSTERID
:

478 
	`HÆLedBlök
(
HAL_LED_2
,1,40,500);

479 #i‡
	`deföed
–
LCD_SUPPORTED
 )

480 
	`HÆLcdWrôeS¸ìn
–(*)
pkt
->
cmd
.
D©a
, "rcvd" );

481 #ñi‡
	`deföed
–
WIN32
 )

482 
	`WPRINTSTR
–
pkt
->
cmd
.
D©a
 );

486 
	}
}

497 
	$Te°Routöe_SídTheMesßge
–
uöt8
 
ödex
 )

499 *
theMesßgeD©a
[2] = {"Hello World","Ghostyu.com"};

501 
Te°Routöe_D°Addr
.
addrMode
 = 
afAddr16Bô
;

503 
Te°Routöe_D°Addr
.
addr
.
sh‹tAddr
 = 0x0000;

504 
Te°Routöe_D°Addr
.
ídPoöt
 = 
TESTROUTINE_ENDPOINT
;

506 i‡–
	`AF_D©aReque°
–&
Te°Routöe_D°Addr
, &
Te°Routöe_ïDesc
,

507 
TESTROUTINE_CLUSTERID
,

508 (
byã
)
	`oßl_°æí
–
theMesßgeD©a
[
ödex
 % 2] ) + 1,

509 (
byã
 *)
theMesßgeD©a
[ 
ödex
 % 2],

510 &
Te°Routöe_TønsID
,

511 
AF_DISCV_ROUTE
, 
AF_DEFAULT_RADIUS
 ) =
afSètus_SUCCESS
 )

514 
	`HÆLedBlök
(
HAL_LED_2
,1,40,500);

519 
	`HÆLedSë
 ( 
HAL_LED_2
, 
HAL_LED_MODE_FLASH
 );

521 
	}
}

523 #i‡
deföed
–
IAR_ARMCM3_LM
 )

533 
	$Te°Routöe_Pro˚ssRtosMesßge
( )

535 
oßlQueue_t
 
öMsg
;

537 i‡–
	`oßl_queue_ª˚ive
–
OßlQueue
, &
öMsg
, 0 ) =
pdPASS
 )

539 
uöt8
 
cmndId
 = 
öMsg
.
cmnd
;

540 
uöt32
 
cou¡î
 = 
	`oßl_buûd_uöt32
–
öMsg
.
cbuf
, 4 );

542  
cmndId
 )

544 
CMD_INCR
:

545 
cou¡î
 += 1;

548 
CMD_ECHO
:

550 
u£rQueue_t
 
outMsg
;

552 
outMsg
.
ª•
 = 
RSP_CODE
 | 
cmndId
;

553 
	`oßl_buf„r_uöt32
–
outMsg
.
rbuf
, 
cou¡î
 );

554 
	`oßl_queue_£nd
–
U£rQueue1
, &
outMsg
, 0 );

562 
	}
}

	@Projects/zstack/Samples/TestRoutine__/Source/TestRoutine.h

40 #i‚de‡
TESTROUTINE_H


41 
	#TESTROUTINE_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

59 
	#TESTROUTINE_ENDPOINT
 10

	)

61 
	#TESTROUTINE_PROFID
 0x0F04

	)

62 
	#TESTROUTINE_DEVICEID
 0x0001

	)

63 
	#TESTROUTINE_DEVICE_VERSION
 0

	)

64 
	#TESTROUTINE_FLAGS
 0

	)

66 
	#TESTROUTINE_MAX_CLUSTERS
 1

	)

67 
	#TESTROUTINE_CLUSTERID
 1

	)

70 
	#TESTROUTINE_SEND_MSG_TIMEOUT
 5000

71 

	)

73 
	#TESTROUTINE_SEND_MSG_EVT
 0x0001

	)

75 #i‡
deföed
–
IAR_ARMCM3_LM
 )

76 
	#TESTROUTINE_RTOS_MSG_EVT
 0x0002

	)

90 
Te°Routöe_Inô
–
byã
 
èsk_id
 );

95 
UINT16
 
Te°Routöe_Pro˚ssEvít
–
byã
 
èsk_id
, UINT16 
evíts
 );

100 #ifde‡
__˝lu•lus


	@Projects/zstack/Utilities/BootLoad/CC2530/source/_hal_uart_isr.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_as£π.h
"

46 
	~"hÆ_bﬂrd.h
"

47 
	~"hÆ_defs.h
"

48 
	~"hÆ_mcu.h
"

49 
	~"hÆ_u¨t.h
"

56 
	#HAL_UART_ASSERT
(
ex¥
)

	)

58 
	#HAL_UART_ISR_RX_AVAIL
() \

59 (
i§Cfg
.
rxTaû
 >i§Cfg.
rxHód
) ? \

60 (
i§Cfg
.
rxTaû
 - i§Cfg.
rxHód
) : \

61 (
HAL_UART_ISR_RX_MAX
 - 
i§Cfg
.
rxHód
 + i§Cfg.
rxTaû
)

	)

63 
	#HAL_UART_ISR_TX_AVAIL
() \

64 (
i§Cfg
.
txHód
 > i§Cfg.
txTaû
) ? \

65 (
i§Cfg
.
txHód
 - i§Cfg.
txTaû
 - 1) : \

66 (
HAL_UART_ISR_TX_MAX
 - 
i§Cfg
.
txTaû
 + i§Cfg.
txHód
 - 1)

	)

73 
	#CSR_MODE
 0x80

	)

74 
	#CSR_RE
 0x40

	)

75 
	#CSR_SLAVE
 0x20

	)

76 
	#CSR_FE
 0x10

	)

77 
	#CSR_ERR
 0x08

	)

78 
	#CSR_RX_BYTE
 0x04

	)

79 
	#CSR_TX_BYTE
 0x02

	)

80 
	#CSR_ACTIVE
 0x01

	)

83 
	#UCR_FLUSH
 0x80

	)

84 
	#UCR_FLOW
 0x40

	)

85 
	#UCR_D9
 0x20

	)

86 
	#UCR_BIT9
 0x10

	)

87 
	#UCR_PARITY
 0x08

	)

88 
	#UCR_SPB
 0x04

	)

89 
	#UCR_STOP
 0x02

	)

90 
	#UCR_START
 0x01

	)

92 
	#UTX0IE
 0x04

	)

93 
	#UTX1IE
 0x08

	)

95 
	#P2DIR_PRIPO
 0xC0

	)

98 #unde‡
PxOUT


99 #unde‡
PxDIR


100 #unde‡
PxSEL


101 #unde‡
UxCSR


102 #unde‡
UxUCR


103 #unde‡
UxDBUF


104 #unde‡
UxBAUD


105 #unde‡
UxGCR


106 #unde‡
URXxIE


107 #unde‡
URXxIF


108 #unde‡
UTXxIE


109 #unde‡
UTXxIF


110 #unde‡
HAL_UART_PERCFG_BIT


111 #unde‡
HAL_UART_Px_RTS


112 #unde‡
HAL_UART_Px_CTS


113 #unde‡
HAL_UART_Px_RX_TX


114 #i‡(
HAL_UART_ISR
 == 1)

115 
	#PxOUT
 
P0


	)

116 
	#PxDIR
 
P0DIR


	)

117 
	#PxSEL
 
P0SEL


	)

118 
	#UxCSR
 
U0CSR


	)

119 
	#UxUCR
 
U0UCR


	)

120 
	#UxDBUF
 
U0DBUF


	)

121 
	#UxBAUD
 
U0BAUD


	)

122 
	#UxGCR
 
U0GCR


	)

123 
	#URXxIE
 
URX0IE


	)

124 
	#URXxIF
 
URX0IF


	)

125 
	#UTXxIE
 
UTX0IE


	)

126 
	#UTXxIF
 
UTX0IF


	)

128 
	#PxOUT
 
P1


	)

129 
	#PxDIR
 
P1DIR


	)

130 
	#PxSEL
 
P1SEL


	)

131 
	#UxCSR
 
U1CSR


	)

132 
	#UxUCR
 
U1UCR


	)

133 
	#UxDBUF
 
U1DBUF


	)

134 
	#UxBAUD
 
U1BAUD


	)

135 
	#UxGCR
 
U1GCR


	)

136 
	#URXxIE
 
URX1IE


	)

137 
	#URXxIF
 
URX1IF


	)

138 
	#UTXxIE
 
UTX1IE


	)

139 
	#UTXxIF
 
UTX1IF


	)

142 #i‡(
HAL_UART_ISR
 == 1)

143 
	#HAL_UART_PERCFG_BIT
 0x01

144 
	#HAL_UART_Px_RX_TX
 0x0C

145 
	#HAL_UART_Px_RTS
 0x20

146 
	#HAL_UART_Px_CTS
 0x10

147 #ñ£

	)

148 
	#HAL_UART_PERCFG_BIT
 0x02

149 
	#HAL_UART_Px_RTS
 0x20

150 
	#HAL_UART_Px_CTS
 0x10

151 
	#HAL_UART_Px_RX_TX
 0xC0

153 

	)

155 
	#HAL_UART_MSECS_TO_TICKS
 33

	)

157 #i‡
deföed
 
MT_TASK


158 
	#HAL_UART_ISR_TX_MAX
 
MT_UART_DEFAULT_MAX_TX_BUFF


	)

159 
	#HAL_UART_ISR_RX_MAX
 
MT_UART_DEFAULT_MAX_RX_BUFF


	)

160 
	#HAL_UART_ISR_HIGH
 
MT_UART_DEFAULT_THRESHOLD


	)

161 
	#HAL_UART_ISR_IDLE
 (
MT_UART_DEFAULT_IDLE_TIMEOUT
 * 
HAL_UART_MSECS_TO_TICKS
)

	)

163 #i‡!
deföed
 
HAL_UART_ISR_RX_MAX


164 
	#HAL_UART_ISR_RX_MAX
 128

	)

166 #i‡!
deföed
 
HAL_UART_ISR_TX_MAX


167 
	#HAL_UART_ISR_TX_MAX
 
HAL_UART_ISR_RX_MAX


	)

169 #i‡!
deföed
 
HAL_UART_ISR_HIGH


170 
	#HAL_UART_ISR_HIGH
 (
HAL_UART_ISR_RX_MAX
 / 2 - 16)

	)

172 #i‡!
deföed
 
HAL_UART_ISR_IDLE


173 
	#HAL_UART_ISR_IDLE
 (6 * 
HAL_UART_MSECS_TO_TICKS
)

	)

183 
uöt8
 
	mrxBuf
[
HAL_UART_ISR_RX_MAX
];

184 #i‡
HAL_UART_ISR_RX_MAX
 < 256

185 
uöt8
 
	mrxHód
;

186 
uöt8
 
	mrxTaû
;

188 
uöt16
 
	mrxHód
;

189 
uöt16
 
	mrxTaû
;

191 
uöt8
 
	mrxTick
;

192 
uöt8
 
	mrxShdw
;

194 
uöt8
 
	mtxBuf
[
HAL_UART_ISR_TX_MAX
];

195 #i‡
HAL_UART_ISR_TX_MAX
 < 256

196 
uöt8
 
	mtxHód
;

197 
uöt8
 
	mtxTaû
;

199 
uöt16
 
	mtxHód
;

200 
uöt16
 
	mtxTaû
;

202 
uöt8
 
	mtxMT
;

204 
hÆUARTCBack_t
 
	mu¨tCB
;

205 } 
	tu¨tISRCfg_t
;

219 
u¨tISRCfg_t
 
	gi§Cfg
;

225 
HÆUARTInôISR
();

226 
HÆUARTO≥nISR
(
hÆUARTCfg_t
 *
c⁄fig
);

227 
uöt16
 
HÆUARTRódISR
(
uöt8
 *
buf
, uöt16 
Àn
);

228 
uöt16
 
HÆUARTWrôeISR
(
uöt8
 *
buf
, uöt16 
Àn
);

229 
HÆUARTPﬁlISR
();

230 
uöt16
 
HÆUARTRxAvaûISR
();

231 
HÆUARTSu•ídISR
();

232 
HÆUARTResumeISR
();

234 
hÆU¨tRxI§
();

235 
hÆU¨tTxI§
();

246 
	$HÆUARTInôISR
()

249 
P2DIR
 &~
P2DIR_PRIPO
;

250 
P2DIR
 |
HAL_UART_PRIPO
;

252 #i‡(
HAL_UART_ISR
 == 1)

253 
PERCFG
 &~
HAL_UART_PERCFG_BIT
;

255 
PERCFG
 |
HAL_UART_PERCFG_BIT
;

257 
PxSEL
 |
HAL_UART_Px_RX_TX
;

258 
ADCCFG
 &~
HAL_UART_Px_RX_TX
;

259 
UxCSR
 = 
CSR_MODE
;

260 
UxUCR
 = 
UCR_FLUSH
;

261 
	}
}

272 
	$HÆUARTUnInôISR
()

274 
UxCSR
 = 0;

275 
URXxIE
 = 0;

276 
URXxIF
 = 0;

277 
IEN2
 &~
UTXxIE
;

278 
UTXxIF
 = 0;

279 
	}
}

290 
	$HÆUARTO≥nISR
(
hÆUARTCfg_t
 *
c⁄fig
)

292 
i§Cfg
.
u¨tCB
 = 
c⁄fig
->
ˇŒBackFunc
;

294 
	`HAL_UART_ASSERT
((
c⁄fig
->
baudR©e
 =
HAL_UART_BR_9600
) ||

295 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_19200
) ||

296 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_38400
) ||

297 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
) ||

298 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
));

300 i‡(
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
 ||

301 
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
)

303 
UxBAUD
 = 216;

307 
UxBAUD
 = 59;

310 
c⁄fig
->
baudR©e
)

312 
HAL_UART_BR_9600
:

313 
UxGCR
 = 8;

315 
HAL_UART_BR_19200
:

316 
UxGCR
 = 9;

318 
HAL_UART_BR_38400
:

319 
HAL_UART_BR_57600
:

320 
UxGCR
 = 10;

323 
UxGCR
 = 11;

328 i‡(
c⁄fig
->
ÊowC⁄åﬁ
)

330 
UxUCR
 = 
UCR_FLOW
 | 
UCR_STOP
;

331 
PxSEL
 |
HAL_UART_Px_RTS
 | 
HAL_UART_Px_CTS
;

335 
UxUCR
 = 
UCR_STOP
;

338 
UxCSR
 |
CSR_RE
;

339 
	}
}

351 
uöt16
 
	$HÆUARTRódISR
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

353 
uöt16
 
˙t
 = 0;

355 (
i§Cfg
.
rxHód
 !i§Cfg.
rxTaû
Ë&& (
˙t
 < 
Àn
))

357 *
buf
++ = 
i§Cfg
.
rxBuf
[i§Cfg.
rxHód
++];

358 i‡(
i§Cfg
.
rxHód
 >
HAL_UART_ISR_RX_MAX
)

360 
i§Cfg
.
rxHód
 = 0;

362 
˙t
++;

365  
˙t
;

366 
	}
}

378 
uöt16
 
	$HÆUARTWrôeISR
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

380 
uöt16
 
˙t
;

383 i‡(
	`HAL_UART_ISR_TX_AVAIL
(Ë< 
Àn
)

388 
˙t
 = 0; c¡ < 
Àn
; cnt++)

390 
i§Cfg
.
txBuf
[i§Cfg.
txTaû
] = *
buf
++;

391 
i§Cfg
.
txMT
 = 0;

393 i‡(
i§Cfg
.
txTaû
 >
HAL_UART_ISR_TX_MAX
-1)

395 
i§Cfg
.
txTaû
 = 0;

399 
i§Cfg
.
txTaû
++;

402 
UTXxIF
 = 1;

405  
˙t
;

406 
	}
}

417 
	$HÆUARTPﬁlISR
()

419 
URXxIF
Ë
	`hÆU¨tRxI§
();

420 
UTXxIF
Ë
	`hÆU¨tTxI§
();

421 
	}
}

432 
uöt16
 
	$HÆUARTRxAvaûISR
()

434  
	`HAL_UART_ISR_RX_AVAIL
();

435 
	}
}

446 
	$HÆUARTSu•ídISR
( )

448 
UxCSR
 &~
CSR_RE
;

449 
	}
}

460 
	$HÆUARTResumeISR
( )

462 
UxUCR
 |
UCR_FLUSH
;

463 
UxCSR
 |
CSR_RE
;

464 
	}
}

475 
	$hÆU¨tRxI§
()

477 
uöt8
 
tmp
 = 
UxDBUF
;

478 
URXxIF
 = 0;

480 
i§Cfg
.
rxBuf
[i§Cfg.
rxTaû
] = 
tmp
;

482 i‡(++
i§Cfg
.
rxTaû
 >
HAL_UART_ISR_RX_MAX
)

484 
i§Cfg
.
rxTaû
 = 0;

486 
	}
}

497 
	$hÆU¨tTxI§
()

499 
UTXxIF
 = 0;

501 i‡(
i§Cfg
.
txHód
 !i§Cfg.
txTaû
)

503 
UxDBUF
 = 
i§Cfg
.
txBuf
[i§Cfg.
txHód
++];

505 i‡(
i§Cfg
.
txHód
 >
HAL_UART_ISR_TX_MAX
)

507 
i§Cfg
.
txHód
 = 0;

510 
	}
}

	@Projects/zstack/Utilities/BootLoad/CC2530/source/sb_main.c

47 
	~"hÆ_bﬂrd_cfg.h
"

48 
	~"hÆ_adc.h
"

49 
	~"hÆ_dma.h
"

50 
	~"hÆ_Êash.h
"

51 
	~"hÆ_ty≥s.h
"

52 
	~"sb_exec.h
"

53 
	~"sb_maö.h
"

64 #i‡!
deföed
 
SB_UART_DELAY


65 
	#SB_UART_DELAY
 0x260000

67 

	)

73 #i‡
HAL_KEY


74 
	#SB1_PRESS
 (
P0_1
 !0)

	)

75 
	#SB2_PRESS
 (
P2_0
 !0)

	)

77 
	#SB1_PRESS
 0

	)

78 
	#SB2_PRESS
 0

	)

81 #i‡
HAL_LED


82 
	#SB_INIT_LEDS
(Ë
	`°
 ( \

83 
	`HAL_TURN_OFF_LED1
(); \

84 
LED1_DDR
 |
LED1_BV
; \

85 
	`HAL_TURN_OFF_LED2
(); \

86 
LED2_DDR
 |
LED2_BV
; \

87 )

	)

88 
	#SB_TURN_OFF_LED1
(Ë
	`HAL_TURN_OFF_LED1
()

	)

89 
	#SB_TURN_ON_LED1
(Ë
	`HAL_TURN_ON_LED1
()

	)

90 
	#SB_TOGGLE_LED1
(Ë
	`HAL_TOGGLE_LED1
()

	)

91 
	#SB_TURN_OFF_LED2
(Ë
	`HAL_TURN_OFF_LED2
()

	)

92 
	#SB_TURN_ON_LED2
(Ë
	`HAL_TURN_ON_LED2
()

	)

93 
	#SB_TOGGLE_LED2
(Ë
	`HAL_TOGGLE_LED2
()

	)

95 
	#SB_TURN_OFF_LED1
()

	)

96 
	#SB_TURN_ON_LED1
()

	)

97 
	#SB_TOGGLE_LED1
()

	)

98 
	#SB_TURN_OFF_LED2
()

	)

99 
	#SB_TURN_ON_LED2
()

	)

100 
	#SB_TOGGLE_LED2
()

	)

103 #i‡!
deföed
 
Re£tWasW©chDog


104 
	#Re£tWasW©chDog
 ((
SLEEPSTA
 & 0x18Ë=0x10)

	)

112 
hÆDMADesc_t
 
	gdmaCh0
;

119 
sblExec
();

120 
sblInô
();

121 
sblJump
();

122 
sblWaô
();

123 
vddWaô
(
uöt8
 
vdd
);

125 
	~"_hÆ_u¨t_i§.c
"

143 
	$maö
()

145 
	`vddWaô
(
VDD_MIN_RUN
);

146 
	`HAL_BOARD_INIT
();

148 i‡(
	`sbImgVÆid
())

150 i‡((
SB_UART_DELAY
 =0Ë|| 
Re£tWasW©chDog
)

152 
	`sblJump
();

155 
	`sblInô
();

156 
	`sblWaô
();

160 
	`sblInô
();

163 
	`vddWaô
(
VDD_MIN_NV
);

164 
	`sblExec
();

165 
	`HAL_SYSTEM_RESET
();

166 
	}
}

184 
	$sblExec
()

186 
uöt32
 
dlyC¡
 = 0;

190 
	`HÆUARTPﬁlISR
();

192 i‡(
	`sbExec
(Ë&& 
	`sbImgVÆid
())

194 
	`SB_TURN_ON_LED1
();

195 
	`SB_TURN_ON_LED2
();

197 
dlyC¡
 = 0; dlyCnt < 0x40000; dlyCnt++)

199 
	`HÆUARTPﬁlISR
();

202 
	`sblJump
();

204 i‡(
dlyC¡
++ & 0x4000)

206 
	`SB_TOGGLE_LED1
();

209 
	}
}

226 
	$sblInô
()

228 
hÆUARTCfg_t
 
u¨tC⁄fig
;

232 
	`HAL_DMA_SET_ADDR_DESC0
(&
dmaCh0
);

234 
	`HÆUARTInôISR
();

235 
u¨tC⁄fig
.
c⁄figuªd
 = 
TRUE
;

236 
u¨tC⁄fig
.
baudR©e
 = 
HAL_UART_BR_115200
;

237 
u¨tC⁄fig
.
ÊowC⁄åﬁ
 = 
FALSE
;

238 
u¨tC⁄fig
.
ÊowC⁄åﬁThªshﬁd
 = 0;

239 
u¨tC⁄fig
.
rx
.
maxBufSize
 = 0;

240 
u¨tC⁄fig
.
tx
.
maxBufSize
 = 0;

241 
u¨tC⁄fig
.
idÀTimeout
 = 0;

242 
u¨tC⁄fig
.
ötE«bÀ
 = 
TRUE
;

243 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
NULL
;

244 
	`HÆUARTO≥nISR
(&
u¨tC⁄fig
);

246 
	`SB_INIT_LEDS
();

247 
	}
}

264 
	$sblJump
()

266 
	`SB_TURN_ON_LED1
();

267 
	`SB_TURN_ON_LED2
();

268 
SB1_PRESS
 || 
SB2_PRESS
);

269 
	`SB_TURN_OFF_LED1
();

270 
	`SB_TURN_OFF_LED2
();

271 
	`asm
("LJMP 0x2000\n");

272 
	`HAL_SYSTEM_RESET
();

273 
	}
}

291 
	$sblWaô
()

293 
uöt32
 
dlyC¡
 = 
SB_UART_DELAY
;

297 
uöt8
 
ch
;

299 
	`HÆUARTPﬁlISR
();

300 i‡(
	`HÆUARTRódISR
(&
ch
, 1))

302 i‡(
ch
 =
SB_FORCE_BOOT
)

306 i‡(
ch
 =
SB_FORCE_RUN
)

308 
dlyC¡
 = 0;

312 i‡(
SB1_PRESS
)

317 i‡(
SB2_PRESS
 || (
dlyC¡
-- == 0))

319 
	`sblJump
();

323 i‡(
dlyC¡
 & 0x2000)

325 
	`SB_TURN_OFF_LED2
();

326 
	`SB_TURN_ON_LED1
();

330 
	`SB_TURN_OFF_LED1
();

331 
	`SB_TURN_ON_LED2
();

335 
	`SB_TURN_OFF_LED1
();

336 
	`SB_TURN_OFF_LED2
();

337 
	}
}

355 
	$vddWaô
(
uöt8
 
vdd
)

357 
uöt8
 
˙t
 = 16;

361 
ADCCON3
 = 0x0F;

362 !(
ADCCON1
 & 0x80));

363 } 
ADCH
 < 
vdd
);

364 } --
˙t
);

365 
	}
}

	@Projects/zstack/Utilities/BootLoad/CC2530/source/sb_main.h

38 #i‚de‡
SB_MAIN_H


39 
	#SB_MAIN_H


	)

46 
	~"hÆ_ty≥s.h
"

53 
	#SB_RX
(
pCH
Ë
	`HÆUARTRódISR
(’CH), 1)

	)

54 
	#SB_TX
(
pBUF
, 
CNT
Ë
	`HÆUARTWrôeISR
(’BUF), (CNT))

	)

61 
uöt16
 
HÆUARTRódISR
(
uöt8
 *
buf
, uöt16 
Àn
);

62 
uöt16
 
HÆUARTWrôeISR
(
uöt8
 *
buf
, uöt16 
Àn
);

	@Projects/zstack/Utilities/BootLoad/CC2530ZNP/source/_hal_uart_isr.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_as£π.h
"

46 
	~"hÆ_bﬂrd.h
"

47 
	~"hÆ_defs.h
"

48 
	~"hÆ_mcu.h
"

49 
	~"hÆ_u¨t.h
"

56 
	#HAL_UART_ASSERT
(
ex¥
)

	)

58 
	#HAL_UART_ISR_RX_AVAIL
() \

59 (
i§Cfg
.
rxTaû
 >i§Cfg.
rxHód
) ? \

60 (
i§Cfg
.
rxTaû
 - i§Cfg.
rxHód
) : \

61 (
HAL_UART_ISR_RX_MAX
 - 
i§Cfg
.
rxHód
 + i§Cfg.
rxTaû
)

	)

63 
	#HAL_UART_ISR_TX_AVAIL
() \

64 (
i§Cfg
.
txHód
 > i§Cfg.
txTaû
) ? \

65 (
i§Cfg
.
txHód
 - i§Cfg.
txTaû
 - 1) : \

66 (
HAL_UART_ISR_TX_MAX
 - 
i§Cfg
.
txTaû
 + i§Cfg.
txHód
 - 1)

	)

73 
	#CSR_MODE
 0x80

	)

74 
	#CSR_RE
 0x40

	)

75 
	#CSR_SLAVE
 0x20

	)

76 
	#CSR_FE
 0x10

	)

77 
	#CSR_ERR
 0x08

	)

78 
	#CSR_RX_BYTE
 0x04

	)

79 
	#CSR_TX_BYTE
 0x02

	)

80 
	#CSR_ACTIVE
 0x01

	)

83 
	#UCR_FLUSH
 0x80

	)

84 
	#UCR_FLOW
 0x40

	)

85 
	#UCR_D9
 0x20

	)

86 
	#UCR_BIT9
 0x10

	)

87 
	#UCR_PARITY
 0x08

	)

88 
	#UCR_SPB
 0x04

	)

89 
	#UCR_STOP
 0x02

	)

90 
	#UCR_START
 0x01

	)

92 
	#UTX0IE
 0x04

	)

93 
	#UTX1IE
 0x08

	)

95 
	#P2DIR_PRIPO
 0xC0

	)

98 #unde‡
PxOUT


99 #unde‡
PxDIR


100 #unde‡
PxSEL


101 #unde‡
UxCSR


102 #unde‡
UxUCR


103 #unde‡
UxDBUF


104 #unde‡
UxBAUD


105 #unde‡
UxGCR


106 #unde‡
URXxIE


107 #unde‡
URXxIF


108 #unde‡
UTXxIE


109 #unde‡
UTXxIF


110 #unde‡
HAL_UART_PERCFG_BIT


111 #unde‡
HAL_UART_Px_RTS


112 #unde‡
HAL_UART_Px_CTS


113 #unde‡
HAL_UART_Px_RX_TX


114 #i‡(
HAL_UART_ISR
 == 1)

115 
	#PxOUT
 
P0


	)

116 
	#PxDIR
 
P0DIR


	)

117 
	#PxSEL
 
P0SEL


	)

118 
	#UxCSR
 
U0CSR


	)

119 
	#UxUCR
 
U0UCR


	)

120 
	#UxDBUF
 
U0DBUF


	)

121 
	#UxBAUD
 
U0BAUD


	)

122 
	#UxGCR
 
U0GCR


	)

123 
	#URXxIE
 
URX0IE


	)

124 
	#URXxIF
 
URX0IF


	)

125 
	#UTXxIE
 
UTX0IE


	)

126 
	#UTXxIF
 
UTX0IF


	)

128 
	#PxOUT
 
P1


	)

129 
	#PxDIR
 
P1DIR


	)

130 
	#PxSEL
 
P1SEL


	)

131 
	#UxCSR
 
U1CSR


	)

132 
	#UxUCR
 
U1UCR


	)

133 
	#UxDBUF
 
U1DBUF


	)

134 
	#UxBAUD
 
U1BAUD


	)

135 
	#UxGCR
 
U1GCR


	)

136 
	#URXxIE
 
URX1IE


	)

137 
	#URXxIF
 
URX1IF


	)

138 
	#UTXxIE
 
UTX1IE


	)

139 
	#UTXxIF
 
UTX1IF


	)

142 #i‡(
HAL_UART_ISR
 == 1)

143 
	#HAL_UART_PERCFG_BIT
 0x01

144 
	#HAL_UART_Px_RX_TX
 0x0C

145 
	#HAL_UART_Px_RTS
 0x20

146 
	#HAL_UART_Px_CTS
 0x10

147 #ñ£

	)

148 
	#HAL_UART_PERCFG_BIT
 0x02

149 
	#HAL_UART_Px_RTS
 0x20

150 
	#HAL_UART_Px_CTS
 0x10

151 
	#HAL_UART_Px_RX_TX
 0xC0

153 

	)

155 
	#HAL_UART_MSECS_TO_TICKS
 33

	)

157 #i‡
deföed
 
MT_TASK


158 
	#HAL_UART_ISR_TX_MAX
 
MT_UART_DEFAULT_MAX_TX_BUFF


	)

159 
	#HAL_UART_ISR_RX_MAX
 
MT_UART_DEFAULT_MAX_RX_BUFF


	)

160 
	#HAL_UART_ISR_HIGH
 
MT_UART_DEFAULT_THRESHOLD


	)

161 
	#HAL_UART_ISR_IDLE
 (
MT_UART_DEFAULT_IDLE_TIMEOUT
 * 
HAL_UART_MSECS_TO_TICKS
)

	)

163 #i‡!
deföed
 
HAL_UART_ISR_RX_MAX


164 
	#HAL_UART_ISR_RX_MAX
 128

	)

166 #i‡!
deföed
 
HAL_UART_ISR_TX_MAX


167 
	#HAL_UART_ISR_TX_MAX
 
HAL_UART_ISR_RX_MAX


	)

169 #i‡!
deföed
 
HAL_UART_ISR_HIGH


170 
	#HAL_UART_ISR_HIGH
 (
HAL_UART_ISR_RX_MAX
 / 2 - 16)

	)

172 #i‡!
deföed
 
HAL_UART_ISR_IDLE


173 
	#HAL_UART_ISR_IDLE
 (6 * 
HAL_UART_MSECS_TO_TICKS
)

	)

183 
uöt8
 
	mrxBuf
[
HAL_UART_ISR_RX_MAX
];

184 #i‡
HAL_UART_ISR_RX_MAX
 < 256

185 
uöt8
 
	mrxHód
;

186 
uöt8
 
	mrxTaû
;

188 
uöt16
 
	mrxHód
;

189 
uöt16
 
	mrxTaû
;

191 
uöt8
 
	mrxTick
;

192 
uöt8
 
	mrxShdw
;

194 
uöt8
 
	mtxBuf
[
HAL_UART_ISR_TX_MAX
];

195 #i‡
HAL_UART_ISR_TX_MAX
 < 256

196 
uöt8
 
	mtxHód
;

197 
uöt8
 
	mtxTaû
;

199 
uöt16
 
	mtxHód
;

200 
uöt16
 
	mtxTaû
;

202 
uöt8
 
	mtxMT
;

204 
hÆUARTCBack_t
 
	mu¨tCB
;

205 } 
	tu¨tISRCfg_t
;

219 
u¨tISRCfg_t
 
	gi§Cfg
;

225 
HÆUARTInôISR
();

226 
HÆUARTO≥nISR
(
hÆUARTCfg_t
 *
c⁄fig
);

227 
uöt16
 
HÆUARTRódISR
(
uöt8
 *
buf
, uöt16 
Àn
);

228 
uöt16
 
HÆUARTWrôeISR
(
uöt8
 *
buf
, uöt16 
Àn
);

229 
HÆUARTPﬁlISR
();

230 
uöt16
 
HÆUARTRxAvaûISR
();

231 
HÆUARTSu•ídISR
();

232 
HÆUARTResumeISR
();

234 
hÆU¨tRxI§
();

235 
hÆU¨tTxI§
();

246 
	$HÆUARTInôISR
()

249 
P2DIR
 &~
P2DIR_PRIPO
;

250 
P2DIR
 |
HAL_UART_PRIPO
;

252 #i‡(
HAL_UART_ISR
 == 1)

253 
PERCFG
 &~
HAL_UART_PERCFG_BIT
;

255 
PERCFG
 |
HAL_UART_PERCFG_BIT
;

257 
PxSEL
 |
HAL_UART_Px_RX_TX
;

258 
ADCCFG
 &~
HAL_UART_Px_RX_TX
;

259 
UxCSR
 = 
CSR_MODE
;

260 
UxUCR
 = 
UCR_FLUSH
;

261 
	}
}

272 
	$HÆUARTUnInôISR
()

274 
UxCSR
 = 0;

275 
URXxIE
 = 0;

276 
URXxIF
 = 0;

277 
IEN2
 &~
UTXxIE
;

278 
UTXxIF
 = 0;

279 
	}
}

290 
	$HÆUARTO≥nISR
(
hÆUARTCfg_t
 *
c⁄fig
)

292 
i§Cfg
.
u¨tCB
 = 
c⁄fig
->
ˇŒBackFunc
;

294 
	`HAL_UART_ASSERT
((
c⁄fig
->
baudR©e
 =
HAL_UART_BR_9600
) ||

295 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_19200
) ||

296 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_38400
) ||

297 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
) ||

298 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
));

300 i‡(
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
 ||

301 
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
)

303 
UxBAUD
 = 216;

307 
UxBAUD
 = 59;

310 
c⁄fig
->
baudR©e
)

312 
HAL_UART_BR_9600
:

313 
UxGCR
 = 8;

315 
HAL_UART_BR_19200
:

316 
UxGCR
 = 9;

318 
HAL_UART_BR_38400
:

319 
HAL_UART_BR_57600
:

320 
UxGCR
 = 10;

323 
UxGCR
 = 11;

328 i‡(
c⁄fig
->
ÊowC⁄åﬁ
)

330 
UxUCR
 = 
UCR_FLOW
 | 
UCR_STOP
;

331 
PxSEL
 |
HAL_UART_Px_RTS
 | 
HAL_UART_Px_CTS
;

335 
UxUCR
 = 
UCR_STOP
;

338 
UxCSR
 |
CSR_RE
;

339 
	}
}

351 
uöt16
 
	$HÆUARTRódISR
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

353 
uöt16
 
˙t
 = 0;

355 (
i§Cfg
.
rxHód
 !i§Cfg.
rxTaû
Ë&& (
˙t
 < 
Àn
))

357 *
buf
++ = 
i§Cfg
.
rxBuf
[i§Cfg.
rxHód
++];

358 i‡(
i§Cfg
.
rxHód
 >
HAL_UART_ISR_RX_MAX
)

360 
i§Cfg
.
rxHód
 = 0;

362 
˙t
++;

365  
˙t
;

366 
	}
}

378 
uöt16
 
	$HÆUARTWrôeISR
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

380 
uöt16
 
˙t
;

383 i‡(
	`HAL_UART_ISR_TX_AVAIL
(Ë< 
Àn
)

388 
˙t
 = 0; c¡ < 
Àn
; cnt++)

390 
i§Cfg
.
txBuf
[i§Cfg.
txTaû
] = *
buf
++;

391 
i§Cfg
.
txMT
 = 0;

393 i‡(
i§Cfg
.
txTaû
 >
HAL_UART_ISR_TX_MAX
-1)

395 
i§Cfg
.
txTaû
 = 0;

399 
i§Cfg
.
txTaû
++;

402 
UTXxIF
 = 1;

405  
˙t
;

406 
	}
}

417 
	$HÆUARTPﬁlISR
()

419 
URXxIF
Ë
	`hÆU¨tRxI§
();

420 
UTXxIF
Ë
	`hÆU¨tTxI§
();

421 
	}
}

432 
uöt16
 
	$HÆUARTRxAvaûISR
()

434  
	`HAL_UART_ISR_RX_AVAIL
();

435 
	}
}

446 
	$HÆUARTSu•ídISR
( )

448 
UxCSR
 &~
CSR_RE
;

449 
	}
}

460 
	$HÆUARTResumeISR
( )

462 
UxUCR
 |
UCR_FLUSH
;

463 
UxCSR
 |
CSR_RE
;

464 
	}
}

475 
	$hÆU¨tRxI§
()

477 
uöt8
 
tmp
 = 
UxDBUF
;

478 
URXxIF
 = 0;

480 
i§Cfg
.
rxBuf
[i§Cfg.
rxTaû
] = 
tmp
;

482 i‡(++
i§Cfg
.
rxTaû
 >
HAL_UART_ISR_RX_MAX
)

484 
i§Cfg
.
rxTaû
 = 0;

486 
	}
}

497 
	$hÆU¨tTxI§
()

499 
UTXxIF
 = 0;

501 i‡(
i§Cfg
.
txHód
 !i§Cfg.
txTaû
)

503 
UxDBUF
 = 
i§Cfg
.
txBuf
[i§Cfg.
txHód
++];

505 i‡(
i§Cfg
.
txHód
 >
HAL_UART_ISR_TX_MAX
)

507 
i§Cfg
.
txHód
 = 0;

510 
	}
}

	@Projects/zstack/Utilities/BootLoad/CC2530ZNP/source/_hal_uart_spi.c

47 
	~"hÆ_ty≥s.h
"

48 
	~"hÆ_bﬂrd.h
"

49 
	~"hÆ_defs.h
"

50 
	~"hÆ_mcu.h
"

51 
	~"hÆ_u¨t.h
"

57 
	#HAL_UART_SPI_RX_AVAIL
() \

58 (
•iCfg
.
rxTaû
 >•iCfg.
rxHód
) ? \

59 (
•iCfg
.
rxTaû
 - spiCfg.
rxHód
) : \

60 (
HAL_UART_SPI_RX_MAX
 - 
•iCfg
.
rxHód
 + spiCfg.
rxTaû
)

	)

62 
	#HAL_UART_SPI_TX_AVAIL
() \

63 (
•iCfg
.
txHód
 > spiCfg.
txTaû
) ? \

64 (
•iCfg
.
txHód
 - spiCfg.
txTaû
 - 1) : \

65 (
HAL_UART_SPI_TX_MAX
 - 
•iCfg
.
txTaû
 + spiCfg.
txHód
 - 1)

	)

72 
	#CSR_MODE
 0x80

	)

73 
	#CSR_RE
 0x40

	)

74 
	#CSR_SLAVE
 0x20

	)

75 
	#CSR_FE
 0x10

	)

76 
	#CSR_ERR
 0x08

	)

77 
	#CSR_RX_BYTE
 0x04

	)

78 
	#CSR_TX_BYTE
 0x02

	)

79 
	#CSR_ACTIVE
 0x01

	)

82 
	#UCR_FLUSH
 0x80

	)

83 
	#UCR_FLOW
 0x40

	)

84 
	#UCR_D9
 0x20

	)

85 
	#UCR_BIT9
 0x10

	)

86 
	#UCR_PARITY
 0x08

	)

87 
	#UCR_SPB
 0x04

	)

88 
	#UCR_STOP
 0x02

	)

89 
	#UCR_START
 0x01

	)

91 
	#UTX0IE
 0x04

	)

92 
	#UTX1IE
 0x08

	)

94 
	#P2DIR_PRIPO
 0xC0

	)

97 #unde‡
PxOUT


98 #unde‡
PxDIR


99 #unde‡
PxSEL


100 #unde‡
UxCSR


101 #unde‡
UxUCR


102 #unde‡
UxDBUF


103 #unde‡
UxBAUD


104 #unde‡
UxGCR


105 #unde‡
URXxIE


106 #unde‡
URXxIF


107 #unde‡
UTXxIE


108 #unde‡
UTXxIF


109 #unde‡
HAL_UART_PERCFG_BIT


110 #unde‡
HAL_UART_Px_RTS


111 #unde‡
HAL_UART_Px_CTS


112 #unde‡
HAL_UART_Px_RX_TX


113 #i‡(
HAL_UART_SPI
 == 1)

114 
	#PxOUT
 
P0


	)

115 
	#PxDIR
 
P0DIR


	)

116 
	#PxSEL
 
P0SEL


	)

117 
	#UxCSR
 
U0CSR


	)

118 
	#UxUCR
 
U0UCR


	)

119 
	#UxDBUF
 
U0DBUF


	)

120 
	#UxBAUD
 
U0BAUD


	)

121 
	#UxGCR
 
U0GCR


	)

122 
	#URXxIE
 
URX0IE


	)

123 
	#URXxIF
 
URX0IF


	)

124 
	#UTXxIE
 
UTX0IE


	)

125 
	#UTXxIF
 
UTX0IF


	)

127 
	#PxOUT
 
P1


	)

128 
	#PxDIR
 
P1DIR


	)

129 
	#PxSEL
 
P1SEL


	)

130 
	#UxCSR
 
U1CSR


	)

131 
	#UxUCR
 
U1UCR


	)

132 
	#UxDBUF
 
U1DBUF


	)

133 
	#UxBAUD
 
U1BAUD


	)

134 
	#UxGCR
 
U1GCR


	)

135 
	#URXxIE
 
URX1IE


	)

136 
	#URXxIF
 
URX1IF


	)

137 
	#UTXxIE
 
UTX1IE


	)

138 
	#UTXxIF
 
UTX1IF


	)

141 #i‡(
HAL_UART_SPI
 == 1)

142 
	#HAL_UART_PERCFG_BIT
 0x01

143 
	#HAL_UART_Px_RX_TX
 0x0C

144 
	#HAL_UART_Px_RTS
 0x20

145 
	#HAL_UART_Px_CTS
 0x10

146 #ñ£

	)

147 
	#HAL_UART_PERCFG_BIT
 0x02

148 
	#HAL_UART_Px_RTS
 0x20

149 
	#HAL_UART_Px_CTS
 0x10

150 
	#HAL_UART_Px_RX_TX
 0xC0

152 

	)

153 #i‡!
deföed
 
HAL_UART_SPI_RX_MAX


154 
	#HAL_UART_SPI_RX_MAX
 128

	)

156 #i‡!
deföed
 
HAL_UART_SPI_TX_MAX


157 
	#HAL_UART_SPI_TX_MAX
 
HAL_UART_SPI_RX_MAX


	)

166 
uöt8
 
	mrxBuf
[
HAL_UART_SPI_RX_MAX
];

167 #i‡
HAL_UART_SPI_RX_MAX
 < 256

168 
uöt8
 
	mrxHód
;

169 vﬁ©ûê
uöt8
 
	mrxTaû
;

171 
uöt16
 
	mrxHód
;

172 vﬁ©ûê
uöt16
 
	mrxTaû
;

175 
uöt8
 
	mtxBuf
[
HAL_UART_SPI_TX_MAX
];

176 #i‡
HAL_UART_SPI_TX_MAX
 < 256

177 vﬁ©ûê
uöt8
 
	mtxHód
;

178 
uöt8
 
	mtxTaû
;

180 vﬁ©ûê
uöt16
 
	mtxHód
;

181 
uöt16
 
	mtxTaû
;

183 } 
	tu¨tSPICfg_t
;

189 
u¨tSPICfg_t
 
	g•iCfg
;

195 
HÆUARTInôSPI
();

196 
uöt16
 
HÆUARTRódSPI
(
uöt8
 *
buf
, uöt16 
Àn
);

197 
uöt16
 
HÆUARTWrôeSPI
(
uöt8
 *
buf
, uöt16 
Àn
);

208 
	$HÆUARTInôSPI
()

211 
UxGCR
 |
	`BV
(5);

214 #i‡(
HAL_UART_SPI
 == 1)

215 
PERCFG
 &~
HAL_UART_PERCFG_BIT
;

217 
PERCFG
 |
HAL_UART_PERCFG_BIT
;

220 
P2SEL
 &= ~0x20;

224 
UxCSR
 = 
CSR_SLAVE
;

227 
PxSEL
 |= 0xF0;

229 
UxCSR
 |
CSR_RE
;

230 
URXxIE
 = 1;

231 
	}
}

242 
	$HÆUARTUnInôSPI
()

244 
UxCSR
 = 0;

245 
URXxIE
 = 0;

246 
IEN2
 &~
UTXxIE
;

247 
UTXxIF
 = 1;

248 
	}
}

261 
uöt16
 
	$HÆUARTRódSPI
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

263 
uöt16
 
˙t
 = 0;

265 i‡((
•iCfg
.
rxHód
 =0Ë&& (•iCfg.rxHód =•iCfg.
rxTaû
))

267 
uöt8
 
tmp
;

269 
UxDBUF
 = 0;

270 
URXxIF
 = 0;

272 
	`SRDY_SET
();

273 !
MRDY_SET
);

276 !
URXxIF
 && 
MRDY_SET
);

277 
tmp
 = 
UxDBUF
;

278 
URXxIF
 = 0;

281 i‡(!
MRDY_SET
)

286 
•iCfg
.
rxBuf
[•iCfg.
rxTaû
] = 
tmp
;

287 i‡(++
•iCfg
.
rxTaû
 >
HAL_UART_SPI_RX_MAX
)

289 
•iCfg
.
rxTaû
 = 0;

294 
	`SRDY_CLR
();

297 (
•iCfg
.
rxHód
 !•iCfg.
rxTaû
Ë&& (
˙t
 < 
Àn
))

299 *
buf
++ = 
•iCfg
.
rxBuf
[•iCfg.
rxHód
++];

300 i‡(
•iCfg
.
rxHód
 >
HAL_UART_SPI_RX_MAX
)

302 
•iCfg
.
rxHód
 = 0;

304 
˙t
++;

307 i‡(
˙t
 == 0)

309 
•iCfg
.
rxHód
 = spiCfg.
rxTaû
 = 0;

312  
˙t
;

313 
	}
}

326 
uöt16
 
	$HÆUARTWrôeSPI
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

328 
uöt16
 
˙t
;

331 i‡((
	`HAL_UART_SPI_TX_AVAIL
(Ë< 
Àn
) || (len == 0))

336 
UxDBUF
 = *
buf
++;

337 
˙t
 = 1; c¡ < 
Àn
; cnt++)

339 
•iCfg
.
txBuf
[•iCfg.
txTaû
] = *
buf
++;

341 i‡(
•iCfg
.
txTaû
 >
HAL_UART_SPI_TX_MAX
-1)

343 
•iCfg
.
txTaû
 = 0;

347 
•iCfg
.
txTaû
++;

351 
URXxIF
 = 0;

353 !
MRDY_SET
);

355 
	`SRDY_SET
();

358 !
URXxIF
 && 
MRDY_SET
);

359 
UxDBUF
 = 
•iCfg
.
txBuf
[•iCfg.
txHód
];

360 
URXxIF
 = 0;

362 i‡(
•iCfg
.
txHód
 =•iCfg.
txTaû
)

364 
•iCfg
.
txBuf
[•iCfg.
txHód
] = 0;

366 i‡(++
•iCfg
.
txHód
 >
HAL_UART_SPI_TX_MAX
)

368 
•iCfg
.
txHód
 = 0;

370 } 
MRDY_SET
);

373 
	`SRDY_CLR
();

375  
˙t
;

376 
	}
}

	@Projects/zstack/Utilities/BootLoad/CC2530ZNP/source/sb_main.c

47 
	~"hÆ_bﬂrd_cfg.h
"

48 
	~"hÆ_adc.h
"

49 
	~"hÆ_dma.h
"

50 
	~"hÆ_Êash.h
"

51 
	~"hÆ_ty≥s.h
"

52 
	~"sb_exec.h
"

53 
	~"sb_maö.h
"

64 #i‡!
deföed
 
SB_UART_DELAY


65 
	#SB_UART_DELAY
 0x260000

67 

	)

73 #i‡!
deföed
 
Re£tWasW©chDog


74 
	#Re£tWasW©chDog
 ((
SLEEPSTA
 & 0x18Ë=0x10)

	)

82 
hÆDMADesc_t
 
	gdmaCh0
;

89 
uöt8
 
	gz≈Cfg1
;

90 
uöt8
 
	g•iPﬁl
;

97 
sblExec
();

98 
sblInô
();

99 
sblJump
();

100 
sblWaô
();

101 
vddWaô
(
uöt8
 
vdd
);

103 
	~"_hÆ_u¨t_i§.c
"

104 
	~"_hÆ_u¨t_•i.c
"

122 
	$maö
()

124 
	`vddWaô
(
VDD_MIN_RUN
);

125 
	`HAL_BOARD_INIT
();

127 i‡(
	`sbImgVÆid
())

129 i‡((
SB_UART_DELAY
 =0Ë|| 
Re£tWasW©chDog
)

131 
	`sblJump
();

134 
	`sblInô
();

135 
	`sblWaô
();

139 
	`sblInô
();

142 
	`vddWaô
(
VDD_MIN_NV
);

143 
	`sblExec
();

144 
	`HAL_SYSTEM_RESET
();

145 
	}
}

163 
	$sblExec
()

165 
uöt32
 
dlyC¡
 = 0;

169 i‡(
z≈Cfg1
 =
ZNP_CFG1_UART
)

171 
	`HÆUARTPﬁlISR
();

174 i‡(
	`sbExec
(Ë&& 
	`sbImgVÆid
())

177 i‡(
z≈Cfg1
 =
ZNP_CFG1_UART
)

179 
dlyC¡
 = 0; dlyCnt < 0x40000; dlyCnt++)

181 
	`HÆUARTPﬁlISR
();

185 
	`sblJump
();

188 
	}
}

205 
	$sblInô
()

207 #i‡
deföed
 
CC2530_MK


208 
z≈Cfg1
 = 
ZNP_CFG1_SPI
;

210 
z≈Cfg1
 = 
P2_0
;

216 
	`HAL_DMA_SET_ADDR_DESC0
(&
dmaCh0
);

219 i‡(
z≈Cfg1
 =
ZNP_CFG1_SPI
)

221 
	`SRDY_CLR
();

224 
P0SEL
 &~(
NP_RDYIn_BIT
);

225 
P0SEL
 &~(
NP_RDYOut_BIT
);

228 
P0DIR
 &~
NP_RDYIn_BIT
;

229 
P0DIR
 |
NP_RDYOut_BIT
;

231 
P0INP
 &~
NP_RDYIn_BIT
;

232 
P2INP
 &~
	`BV
(5);

234 
	`HÆUARTInôSPI
();

238 
hÆUARTCfg_t
 
u¨tC⁄fig
;

240 
	`HÆUARTInôISR
();

241 
u¨tC⁄fig
.
c⁄figuªd
 = 
TRUE
;

242 
u¨tC⁄fig
.
baudR©e
 = 
HAL_UART_BR_115200
;

243 
u¨tC⁄fig
.
ÊowC⁄åﬁ
 = 
FALSE
;

244 
u¨tC⁄fig
.
ÊowC⁄åﬁThªshﬁd
 = 0;

245 
u¨tC⁄fig
.
rx
.
maxBufSize
 = 0;

246 
u¨tC⁄fig
.
tx
.
maxBufSize
 = 0;

247 
u¨tC⁄fig
.
idÀTimeout
 = 0;

248 
u¨tC⁄fig
.
ötE«bÀ
 = 
TRUE
;

249 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
NULL
;

250 
	`HÆUARTO≥nISR
(&
u¨tC⁄fig
);

252 
	}
}

269 
	$sblJump
()

271 
	`asm
("LJMP 0x2000\n");

272 
	`HAL_SYSTEM_RESET
();

273 
	}
}

291 
	$sblWaô
()

293 
uöt32
 
dlyC¡
;

295 i‡(
z≈Cfg1
 =
ZNP_CFG1_SPI
)

298 
	`SRDY_SET
();

300 
•iPﬁl
 = 
TRUE
;

301 
dlyC¡
 = 0x38;

305 
dlyC¡
 = 
SB_UART_DELAY
;

308 --
dlyC¡
)

310 
uöt8
 
ch
;

312 i‡(
z≈Cfg1
 =
ZNP_CFG1_UART
)

314 
	`HÆUARTPﬁlISR
();

317 i‡(
	`sbRx
(&
ch
, 1))

319 i‡(
ch
 =
SB_FORCE_BOOT
)

323 i‡(
ch
 =
SB_FORCE_RUN
)

325 
dlyC¡
 = 0;

330 i‡(
z≈Cfg1
 =
ZNP_CFG1_SPI
)

333 
	`SRDY_CLR
();

335 
•iPﬁl
 = 
FALSE
;

338 i‡(
dlyC¡
 == 0)

340 
	`sblJump
();

342 
	}
}

362 
uöt16
 
	$sbRx
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

364 i‡(
z≈Cfg1
 =
ZNP_CFG1_UART
)

366  
	`HÆUARTRódISR
(
buf
, 
Àn
);

370 i‡(
•iPﬁl
)

372 i‡(
URXxIF
)

374 *
buf
 = 
UxDBUF
;

375 
URXxIF
 = 0;

385  
	`HÆUARTRódSPI
(
buf
, 
Àn
);

388 
	}
}

408 
uöt16
 
	$sbTx
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

410 i‡(
z≈Cfg1
 =
ZNP_CFG1_UART
)

412  
	`HÆUARTWrôeISR
(
buf
, 
Àn
);

416  
	`HÆUARTWrôeSPI
(
buf
, 
Àn
);

418 
	}
}

436 
	$vddWaô
(
uöt8
 
vdd
)

438 
uöt8
 
˙t
 = 16;

442 
ADCCON3
 = 0x0F;

443 !(
ADCCON1
 & 0x80));

444 } 
ADCH
 < 
vdd
);

445 } --
˙t
);

446 
	}
}

	@Projects/zstack/Utilities/BootLoad/CC2530ZNP/source/sb_main.h

38 #i‚de‡
SB_MAIN_H


39 
	#SB_MAIN_H


	)

46 
	~"hÆ_ty≥s.h
"

53 
	#SB_RX
(
pCH
Ë
	`sbRx
(’CH), 1)

	)

54 
	#SB_TX
(
pBUF
, 
CNT
Ë
	`sbTx
(’BUF), (CNT))

	)

56 
	#SRDY_SET
(Ë(
NP_RDYOut
 = 0)

	)

57 
	#SRDY_CLR
(Ë(
NP_RDYOut
 = 1)

	)

59 
	#MRDY_SET
 (
NP_RDYIn
 =0)

	)

66 
	#NP_RDYIn_BIT
 
	`BV
(3)

	)

67 
	#NP_RDYIn
 
P0_3


	)

68 
	#NP_RDYOut
 
P0_4


	)

69 
	#NP_RDYOut_BIT
 
	`BV
(4)

	)

76 
uöt16
 
sbRx
(
uöt8
 *
buf
, uöt16 
Àn
);

77 
uöt16
 
sbTx
(
uöt8
 *
buf
, uöt16 
Àn
);

	@Projects/zstack/Utilities/BootLoad/CC2531/source/sb_main.c

47 
	~"hÆ_bﬂrd_cfg.h
"

48 
	~"hÆ_adc.h
"

49 
	~"hÆ_dma.h
"

50 
	~"hÆ_Êash.h
"

51 
	~"hÆ_ty≥s.h
"

52 
	~"sb_exec.h
"

53 
	~"sb_maö.h
"

54 
	~"usb_bﬂrd_cfg.h
"

55 
	~"usb_öãºu±.h
"

66 #i‡!
deföed
 
SB_UART_DELAY


67 
	#SB_UART_DELAY
 0x260000

69 

	)

75 #i‡
HAL_KEY


76 
	#SB1_PRESS
 (
P1_2
 =0)

	)

77 
	#SB2_PRESS
 (
P1_3
 =0)

	)

79 
	#SB1_PRESS
 0

	)

80 
	#SB2_PRESS
 0

	)

83 #i‡
HAL_LED


84 
	#SB_INIT_LEDS
(Ë
	`°
 ( \

85 
	`HAL_TURN_OFF_LED1
(); \

86 
LED1_DDR
 |
LED1_BV
; \

87 
	`HAL_TURN_OFF_LED2
(); \

88 
LED2_DDR
 |
LED2_BV
; \

89 )

	)

90 
	#SB_TURN_OFF_LED1
(Ë
	`HAL_TURN_OFF_LED1
()

	)

91 
	#SB_TURN_ON_LED1
(Ë
	`HAL_TURN_ON_LED1
()

	)

92 
	#SB_TOGGLE_LED1
(Ë
	`HAL_TOGGLE_LED1
()

	)

93 
	#SB_TURN_OFF_LED2
(Ë
	`HAL_TURN_OFF_LED2
()

	)

94 
	#SB_TURN_ON_LED2
(Ë
	`HAL_TURN_ON_LED2
()

	)

95 
	#SB_TOGGLE_LED2
(Ë
	`HAL_TOGGLE_LED2
()

	)

97 
	#SB_TURN_OFF_LED1
()

	)

98 
	#SB_TURN_ON_LED1
()

	)

99 
	#SB_TOGGLE_LED1
()

	)

100 
	#SB_TURN_OFF_LED2
()

	)

101 
	#SB_TURN_ON_LED2
()

	)

102 
	#SB_TOGGLE_LED2
()

	)

105 #i‡!
deföed
 
Re£tWasW©chDog


106 
	#Re£tWasW©chDog
 ((
SLEEPSTA
 & 0x18Ë=0x10)

	)

114 
hÆDMADesc_t
 
	gdmaCh0
;

121 
sblExec
();

122 
sblInô
();

123 
sblJump
();

124 
sblWaô
();

125 
vddWaô
(
uöt8
 
vdd
);

127 
	~"_hÆ_u¨t_usb.c
"

145 
	$maö
()

147 
	`vddWaô
(
VDD_MIN_RUN
);

148 
	`HAL_BOARD_INIT
();

150 i‡(
	`sbImgVÆid
())

152 i‡((
SB_UART_DELAY
 =0Ë|| 
Re£tWasW©chDog
)

154 
	`sblJump
();

157 
	`sblInô
();

158 
	`sblWaô
();

162 
	`sblInô
();

165 
	`vddWaô
(
VDD_MIN_NV
);

166 
	`sblExec
();

167 
	`HAL_SYSTEM_RESET
();

168 
	}
}

186 
	$sblExec
()

188 
uöt32
 
dlyC¡
 = 0;

192 
	`HÆUARTPﬁlUSB
();

194 i‡(
	`sbExec
(Ë&& 
	`sbImgVÆid
())

196 
	`SB_TURN_ON_LED1
();

197 
	`SB_TURN_ON_LED2
();

199 
dlyC¡
 = 0; dlyCnt < 0x40000; dlyCnt++)

201 
	`HÆUARTPﬁlUSB
();

204 
	`sblJump
();

206 i‡(
dlyC¡
++ & 0x4000)

208 
	`SB_TOGGLE_LED1
();

211 
	}
}

228 
	$sblInô
()

230 
	`HAL_USB_PULLUP_DISABLE
();

234 
	`HAL_DMA_SET_ADDR_DESC0
(&
dmaCh0
);

235 
	`HÆUARTInôUSB
();

236 
	`SB_INIT_LEDS
();

237 
	}
}

254 
	$sblJump
()

256 
	`SB_TURN_ON_LED1
();

257 
	`SB_TURN_ON_LED2
();

258 
SB1_PRESS
 || 
SB2_PRESS
);

259 
	`SB_TURN_OFF_LED1
();

260 
	`SB_TURN_OFF_LED2
();

261 
	`asm
("LJMP 0x2000\n");

262 
	`HAL_SYSTEM_RESET
();

263 
	}
}

281 
	$sblWaô
()

283 
uöt32
 
dlyC¡
 = 
SB_UART_DELAY
;

287 
uöt8
 
ch
;

289 
	`HÆUARTPﬁlUSB
();

290 i‡(
	`HÆUARTRx
(&
ch
, 1))

292 i‡(
ch
 =
SB_FORCE_BOOT
)

296 i‡(
ch
 =
SB_FORCE_RUN
)

298 
dlyC¡
 = 0;

302 i‡(
SB1_PRESS
)

307 i‡(
SB2_PRESS
 || (
dlyC¡
-- == 0))

309 
	`sblJump
();

313 i‡(
dlyC¡
 & 0x2000)

315 
	`SB_TURN_OFF_LED2
();

316 
	`SB_TURN_ON_LED1
();

320 
	`SB_TURN_OFF_LED1
();

321 
	`SB_TURN_ON_LED2
();

325 
	`SB_TURN_OFF_LED1
();

326 
	`SB_TURN_OFF_LED2
();

327 
	}
}

345 
	$vddWaô
(
uöt8
 
vdd
)

347 
uöt8
 
˙t
 = 16;

351 
ADCCON3
 = 0x0F;

352 !(
ADCCON1
 & 0x80));

353 } 
ADCH
 < 
vdd
);

354 } --
˙t
);

355 
	}
}

	@Projects/zstack/Utilities/BootLoad/CC2531/source/sb_main.h

38 #i‚de‡
SB_MAIN_H


39 
	#SB_MAIN_H


	)

46 
	~"hÆ_ty≥s.h
"

53 
	#SB_RX
(
pCH
Ë
	`HÆUARTRx
(’CH), 1)

	)

54 
	#SB_TX
(
pBUF
, 
CNT
Ë
	`HÆUARTTx
(’BUF), (CNT))

	)

61 
uöt8
 
HÆUARTRx
(uöt8 *
buf
, uöt8 
max
);

62 
HÆUARTTx
(
uöt8
 *
buf
, uöt8 
max
);

	@Projects/zstack/Utilities/BootLoad/Source/sb_exec.c

44 
	~"hÆ_bﬂrd_cfg.h
"

45 
	~"hÆ_Êash.h
"

46 
	~"hÆ_ty≥s.h
"

47 
	~"sb_exec.h
"

48 
	~"sb_maö.h
"

55 #i‡!
deföed
 
MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA


56 
	#MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
 
FALSE


	)

64 
uöt8
 
	gsbBuf
[
SB_BUF_SIZE
], 
	gsbCmd1
, 
	gsbCmd2
, 
	gsbFcs
, 
	gsbIdx
, 
	gsbLí
, 
	gsbSã
;

71 
uöt8
 
sbCmnd
();

72 
sbRe•
(
uöt8
 
r•
, uöt8 
Àn
);

73 
uöt16
 
ˇlcCRC
();

74 
uöt16
 
runPﬁy
(uöt16 
¸c
, 
uöt8
 
vÆ
);

93 
uöt8
 
	$sbExec
()

95 
uöt8
 
ch
, 
π∫
 = 
FALSE
;

97 
	`SB_RX
(&
ch
))

99 
sbBuf
[
sbSã
 + 
sbIdx
] = 
ch
;

100 
sbSã
)

102 
SB_SOF_STATE
:

103 i‡(
SB_SOF
 =
ch
)

105 
sbSã
 = 
SB_LEN_STATE
;

109 
SB_LEN_STATE
:

110 
sbFcs
 = 0;

111 
sbSã
 = ((
sbLí
 = 
ch
Ë>
SB_BUF_SIZE
Ë? 
SB_SOF_STATE
 : 
SB_CMD1_STATE
;

114 
SB_CMD1_STATE
:

115 
sbCmd1
 = 
ch
;

116 
sbSã
 = 
SB_CMD2_STATE
;

119 
SB_CMD2_STATE
:

120 
sbCmd2
 = 
ch
;

121 
sbSã
 = (
sbLí
Ë? 
SB_DATA_STATE
 : 
SB_FCS_STATE
;

124 
SB_DATA_STATE
:

125 i‡(++
sbIdx
 =
sbLí
)

127 
sbSã
 = 
SB_FCS_STATE
;

131 
SB_FCS_STATE
:

132 i‡((
sbFcs
 =
ch
Ë&& (
sbCmd1
 =
SB_RPC_SYS_BOOT
))

134 
π∫
 = 
	`sbCmnd
();

144 
sbSã
 = 
sbIdx
 = 0;

150 
sbFcs
 ^
ch
;

153  
π∫
;

154 
	}
}

172 
uöt8
 
	$sbImgVÆid
()

174 
uöt16
 
¸c
[2];

176 
	`HÆFœshRód
(
HAL_SB_CRC_ADDR
 / 
HAL_FLASH_PAGE_SIZE
,

177 
HAL_SB_CRC_ADDR
 % 
HAL_FLASH_PAGE_SIZE
,

178 (
uöt8
 *)
¸c
, (crc));

180 i‡((
¸c
[1] == 0x0000) || (crc[0] == 0x0000) || (crc[0] == 0xFFFF))

182  
FALSE
;

184 i‡((
¸c
[1] == 0xFFFF) && (crc[1] != crc[0]))

186 
¸c
[0] = 0xFFFF;

187 
¸c
[1] = 
	`ˇlcCRC
();

188 
	`HÆFœshWrôe
((
HAL_SB_CRC_ADDR
 / 
HAL_FLASH_WORD_SIZE
), (
uöt8
 *)
¸c
, 1);

189 
	`HÆFœshRód
–
HAL_SB_CRC_ADDR
 / 
HAL_FLASH_PAGE_SIZE
,

190 
HAL_SB_CRC_ADDR
 % 
HAL_FLASH_PAGE_SIZE
,

191 (
uöt8
 *)
¸c
, (crc));

194  (
¸c
[0] == crc[1]);

195 
	}
}

213 
uöt8
 
	$sbCmnd
()

215 
uöt16
 
tmp
 = 
	`BUILD_UINT16
(
sbBuf
[
SB_DATA_STATE
], sbBuf[SB_DATA_STATE+1]Ë+ 
SB_IMG_OSET
;

216 
uöt16
 
¸c
[2];

217 
uöt8
 
Àn
 = 1;

218 
uöt8
 
r•
 = 
SB_SUCCESS
;

219 
uöt8
 
π∫
 = 
FALSE
;

221 
sbCmd2
)

223 
SB_HANDSHAKE_CMD
:

226 
SB_WRITE_CMD
:

227 i‡((
tmp
 % 
SB_WPG_SIZE
) == 0)

229 
	`HÆFœshEø£
(
tmp
 / 
SB_WPG_SIZE
);

232 
	`HÆFœshWrôe
(
tmp
, 
sbBuf
+
SB_DATA_STATE
+2, 
SB_RW_BUF_LEN
 / 
HAL_FLASH_WORD_SIZE
);

235 
SB_READ_CMD
:

236 #i‡!
MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA


237 i‡((
tmp
 / (
HAL_FLASH_PAGE_SIZE
 / 4)Ë>
HAL_NV_PAGE_BEG
)

239 
r•
 = 
SB_FAILURE
;

243 
	`HÆFœshRód
(
tmp
 / (
HAL_FLASH_PAGE_SIZE
 / 4),

244 (
tmp
 % (
HAL_FLASH_PAGE_SIZE
 / 4)) << 2,

245 
sbBuf
 + 
SB_DATA_STATE
 + 3, 
SB_RW_BUF_LEN
);

246 
sbBuf
[
SB_DATA_STATE
+2] = sbBuf[SB_DATA_STATE+1];

247 
sbBuf
[
SB_DATA_STATE
+1] = sbBuf[SB_DATA_STATE];

248 
Àn
 = 
SB_RW_BUF_LEN
 + 3;

251 
SB_ENABLE_CMD
:

252 
	`HÆFœshRód
(
HAL_SB_CRC_ADDR
 / 
HAL_FLASH_PAGE_SIZE
,

253 
HAL_SB_CRC_ADDR
 % 
HAL_FLASH_PAGE_SIZE
,

254 (
uöt8
 *)
¸c
, (crc));

258 i‡(
¸c
[1] != crc[0])

260 
¸c
[1] = crc[0];

261 
	`HÆFœshWrôe
((
HAL_SB_CRC_ADDR
 / 
HAL_FLASH_WORD_SIZE
), (
uöt8
 *)
¸c
, 1);

262 
	`HÆFœshRód
–
HAL_SB_CRC_ADDR
 / 
HAL_FLASH_PAGE_SIZE
,

263 
HAL_SB_CRC_ADDR
 % 
HAL_FLASH_PAGE_SIZE
,

264 (
uöt8
 *)
¸c
, (crc));

269 i‡(
¸c
[0] == crc[1])

271 
π∫
 = 
TRUE
;

275 
r•
 = 
SB_VALIDATE_FAILED
;

283 
	`sbRe•
(
r•
, 
Àn
);

284  
π∫
;

285 
	}
}

304 
	$sbRe•
(
uöt8
 
r•
, uöt8 
Àn
)

306 
öt8
 
idx
;

308 
sbBuf
[
SB_CMD2_STATE
] |= 0x80;

309 
sbBuf
[
SB_DATA_STATE
] = 
r•
;

310 
sbBuf
[
SB_LEN_STATE
] = 
Àn
;

311 
r•
 = 
Àn
 ^ 
SB_RPC_SYS_BOOT
;

312 
Àn
 +
SB_FCS_STATE
-1;

314 
idx
 = 
SB_CMD2_STATE
; idx < 
Àn
; idx++)

316 
r•
 ^
sbBuf
[
idx
];

318 
sbBuf
[
idx
++] = 
r•
;

320 
	`SB_TX
(
sbBuf
, 
idx
);

321 
	}
}

339 
uöt16
 
	$ˇlcCRC
()

341 
uöt32
 
addr
;

342 
uöt16
 
¸c
 = 0;

345 
addr
 = 
HAL_SB_IMG_ADDR
;ádd∏< HAL_SB_IMG_ADDR + 
HAL_SB_IMG_SIZE
;áddr++)

347 i‡(
addr
 =
HAL_SB_CRC_ADDR
)

349 
addr
 += 3;

353 
uöt8
 
buf
;

354 
	`HÆFœshRód
(
addr
 / 
HAL_FLASH_PAGE_SIZE
,ádd∏% HAL_FLASH_PAGE_SIZE, &
buf
, 1);

355 
¸c
 = 
	`runPﬁy
(¸c, 
buf
);

360 
¸c
 = 
	`runPﬁy
(crc, 0);

361 
¸c
 = 
	`runPﬁy
(crc, 0);

363  
¸c
;

364 
	}
}

383 
uöt16
 
	$runPﬁy
(
uöt16
 
¸c
, 
uöt8
 
vÆ
)

385 c⁄° 
uöt16
 
pﬁy
 = 0x1021;

386 
uöt8
 
˙t
;

388 
˙t
 = 0; c¡ < 8; c¡++, 
vÆ
 <<= 1)

390 
uöt8
 
msb
 = (
¸c
 & 0x8000) ? 1 : 0;

392 
¸c
 <<= 1;

393 i‡(
vÆ
 & 0x80Ë
¸c
 |= 0x0001;

394 i‡(
msb
Ë
¸c
 ^
pﬁy
;

397  
¸c
;

398 
	}
}

	@Projects/zstack/Utilities/BootLoad/Source/sb_exec.h

38 #i‚de‡
SB_EXEC_H


39 
	#SB_EXEC_H


	)

46 
	~"hÆ_ty≥s.h
"

53 
	#SB_IMG_OSET
 (
HAL_SB_IMG_ADDR
 / 
HAL_FLASH_WORD_SIZE
)

	)

55 
	#SB_WPG_SIZE
 (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
)

	)

57 
	#SB_BUF_SIZE
 128

	)

58 
	#SB_SOF
 0xFE

	)

59 
	#SB_HANDSHAKE
 0xFE

	)

61 
	#SB_FORCE_BOOT
 0xF8

	)

62 
	#SB_FORCE_RUN
 (
SB_FORCE_BOOT
 ^ 0xFF)

	)

64 
	#SB_RW_BUF_LEN
 64

	)

67 
	#SB_RPC_SYS_BOOT
 0x4D

	)

70 
	#SB_WRITE_CMD
 0x01

	)

71 
	#SB_READ_CMD
 0x02

	)

72 
	#SB_ENABLE_CMD
 0x03

	)

73 
	#SB_HANDSHAKE_CMD
 0x04

	)

76 
	#SB_SUCCESS
 0

	)

77 
	#SB_FAILURE
 1

	)

78 
	#SB_INVALID_FCS
 2

	)

79 
	#SB_INVALID_FILE
 3

	)

80 
	#SB_FILESYSTEM_ERROR
 4

	)

81 
	#SB_ALREADY_STARTED
 5

	)

82 
	#SB_NO_RESPOSNE
 6

	)

83 
	#SB_VALIDATE_FAILED
 7

	)

84 
	#SB_CANCELED
 8

	)

87 
	#SB_SOF_STATE
 0

	)

88 
	#SB_LEN_STATE
 1

	)

89 
	#SB_CMD1_STATE
 2

	)

90 
	#SB_CMD2_STATE
 3

	)

91 
	#SB_DATA_STATE
 4

	)

92 
	#SB_FCS_STATE
 5

	)

116 
uöt8
 
sbExec
();

134 
uöt8
 
sbImgVÆid
();

	@Projects/zstack/Utilities/OAD/Source/MT_TASK.c

46 
	~"ZComDef.h
"

47 
	~"MT_TASK.h
"

48 
	~"MT.h
"

49 
	~"MT_DEBUG.h
"

50 
	~"MT_UART.h
"

51 
	~"MT_UTIL.h
"

52 
	~"MT_SYS.h
"

54 #i‡!
deföed
–
NONWK
 )

55 
	~"MT_ZDO.h
"

56 
	~"MT_AF.h
"

58 
	~"mt_x.h
"

60 
	~"hÆ_u¨t.h
"

61 
	~"OSAL_Mem‹y.h
"

66 
MT_Pro˚ssIncomögComm™d
–
mtOSALSîülD©a_t
 *
msg
 );

72 
uöt8
 
	gMT_TaskID
;

84 
	$MT_TaskInô
(
uöt8
 
èsk_id
)

86 
MT_TaskID
 = 
èsk_id
;

89 
	`MT_U¨tInô
();

92 
	`MT_U¨tRegi°îTaskID
(
èsk_id
);

94 
	`oßl_£t_evít
(
èsk_id
, 
MT_SECONDARY_INIT_EVENT
);

95 
	}
}

107 
UINT16
 
	$MT_Pro˚ssEvít
(
uöt8
 
èsk_id
, 
uöt16
 
evíts
)

109 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

111 
uöt8
 *
msg_±r
;

113  (
msg_±r
 = 
	`oßl_msg_ª˚ive
–
èsk_id
 )) )

115 
	`MT_Pro˚ssIncomögComm™d
((
mtOSALSîülD©a_t
 *)
msg_±r
);

118  (
evíts
 ^ 
SYS_EVENT_MSG
);

121 i‡–
evíts
 & 
MT_SECONDARY_INIT_EVENT
 )

123 
	`MT_Inô
();

126 #i‡
deföed
 
MT_SYS_FUNC


127 i‡–
evíts
 & (
MT_SYS_OSAL_EVENT_MASK
))

129 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_0
)

131 
	`MT_SysOßlTimîExpúed
(0x00);

133 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_1
)

135 
	`MT_SysOßlTimîExpúed
(0x01);

137 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_2
)

139 
	`MT_SysOßlTimîExpúed
(0x02);

141 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_3
)

143 
	`MT_SysOßlTimîExpúed
(0x03);

149 
	}
}

162 
	$MT_Pro˚ssIncomögComm™d
–
mtOSALSîülD©a_t
 *
msg
 )

164 
uöt8
 
dóŒoˇã
;

165 
uöt8
 *
msg_±r
;

166 
uöt8
 
Àn
;

169 
msg_±r
 = 
msg
->msg;

171 
dóŒoˇã
 = 
åue
;

174  
msg
->
hdr
.
evít
 )

176 
CMD_SERIAL_MSG
:

177 
	`MT_Pro˚ssIncomög
(
msg
->msg);

180 
CMD_DEBUG_MSG
:

181 
	`MT_Pro˚ssDebugMsg
–(
mtDebugMsg_t
 *)
msg
 );

184 
CB_FUNC
:

191 
Àn
 = 
SPI_0DATA_MSG_LEN
 + 
msg_±r
[
DATALEN_FIELD
];

197 
msg_±r
[
Àn
-1] = 
	`MT_U¨tCÆcFCS
(msg_±∏+ 1, (
uöt8
)(len-2));

199 #ifde‡
MT_UART_DEFAULT_PORT


200 
	`HÆUARTWrôe
 ( 
MT_UART_DEFAULT_PORT
, 
msg_±r
, 
Àn
 );

204 
CMD_DEBUG_STR
:

205 
	`MT_Pro˚ssDebugSå
–(
mtDebugSå_t
 *)
msg
 );

208 #i‡!
	`deföed
 ( 
NONWK
 )

209 
MT_SYS_APP_RSP_MSG
:

210 
Àn
 = 
SPI_0DATA_MSG_LEN
 + 
msg_±r
[
DATALEN_FIELD
];

211 
	`MTPro˚ssAµR•Msg
–
msg_±r
, 
Àn
 );

215 #i‡
	`deföed
 (
MT_UTIL_FUNC
)

216 #i‡
deföed
 
ZCL_KEY_ESTABLISH


217 
ZCL_KEY_ESTABLISH_IND
:

218 
	`MT_UtûKeyE°ablishInd
((
keyE°ablishmítInd_t
 *)
msg
);

222 #ifde‡
MT_ZDO_CB_FUNC


223 
ZDO_STATE_CHANGE
:

224 
	`MT_ZdoSèãCh™geCB
((
oßl_evít_hdr_t
 *)
msg
);

232 i‡–
dóŒoˇã
 )

234 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
msg
 );

236 
	}
}

238 #ifde‡
MT_TASK


249 
uöt8
 *
	$MT_Tøn•‹tAŒoc
(
uöt8
 
cmd0
, uöt8 
Àn
)

251 
uöt8
 *
p
;

253 ()
cmd0
;

256 
p
 = 
	`oßl_msg_Æloˇã
(
Àn
 + 
SPI_0DATA_MSG_LEN
);

258 i‡(
p
)

260 
p
++;

261  
p
;

265  
NULL
;

267 
	}
}

278 
	$MT_Tøn•‹tSíd
(
uöt8
 *
pBuf
)

280 
	`MT_X_Tøn•‹tSíd
(
pBuf
-1);

281 
	}
}

	@Projects/zstack/Utilities/OAD/Source/MT_UART.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"hÆ_u¨t.h
"

47 
	~"MT.h
"

48 
	~"MT_UART.h
"

49 
	~"MT_X.h
"

50 
	~"OSAL_Mem‹y.h
"

61 
	#SOP_STATE
 0x00

	)

62 
	#CMD_STATE1
 0x01

	)

63 
	#CMD_STATE2
 0x02

	)

64 
	#LEN_STATE
 0x03

	)

65 
	#DATA_STATE
 0x04

	)

66 
	#FCS_STATE
 0x05

	)

72 
byã
 
	gAµ_TaskID
;

75 
uöt8
 
	g°©e
;

76 
uöt8
 
	gCMD_Tokí
[2];

77 
uöt8
 
	gLEN_Tokí
;

78 
uöt8
 
	gFSC_Tokí
;

79 
mtOSALSîülD©a_t
 *
	gpMsg
;

80 
uöt8
 
	gãmpD©aLí
;

82 #i‡
deföed
 (
ZAPP_P1
Ë|| deföed (
ZAPP_P2
)

83 
uöt16
 
	gMT_U¨tMaxZAµBufLí
;

84 
boﬁ
 
	gMT_U¨tZAµRxSètus
;

101 
	$MT_U¨tInô
 ()

103 
hÆUARTCfg_t
 
u¨tC⁄fig
;

106 
Aµ_TaskID
 = 0;

109 
u¨tC⁄fig
.
c⁄figuªd
 = 
TRUE
;

110 
u¨tC⁄fig
.
baudR©e
 = 
MT_UART_DEFAULT_BAUDRATE
;

111 
u¨tC⁄fig
.
ÊowC⁄åﬁ
 = 
MT_UART_DEFAULT_OVERFLOW
;

112 
u¨tC⁄fig
.
ÊowC⁄åﬁThªshﬁd
 = 
MT_UART_DEFAULT_THRESHOLD
;

113 
u¨tC⁄fig
.
rx
.
maxBufSize
 = 
MT_UART_DEFAULT_MAX_RX_BUFF
;

115 
u¨tC⁄fig
.
tx
.
maxBufSize
 = 254;

116 
u¨tC⁄fig
.
idÀTimeout
 = 
MT_UART_DEFAULT_IDLE_TIMEOUT
;

117 
u¨tC⁄fig
.
ötE«bÀ
 = 
TRUE
;

118 #i‡
	`deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

119 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
MT_X_U¨tPro˚ssZToﬁD©a
;

120 #ñi‡
	`deföed
 (
ZAPP_P1
Ë|| deföed (
ZAPP_P2
)

121 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
MT_U¨tPro˚ssZAµD©a
;

123 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
NULL
;

127 #i‡
	`deföed
 (
MT_UART_DEFAULT_PORT
)

128 
	`HÆUARTO≥n
 (
MT_UART_DEFAULT_PORT
, &
u¨tC⁄fig
);

131 ()
u¨tC⁄fig
;

135 #i‡
	`deföed
 (
ZAPP_P1
Ë|| deföed (
ZAPP_P2
)

137 
MT_U¨tMaxZAµBufLí
 = 1;

138 
MT_U¨tZAµRxSètus
 = 
MT_UART_ZAPP_RX_READY
;

141 
	}
}

153 
	$MT_U¨tRegi°îTaskID
–
byã
 
èskID
 )

155 
Aµ_TaskID
 = 
èskID
;

156 
	}
}

169 
byã
 
	$MT_U¨tCÆcFCS
–
uöt8
 *
msg_±r
, uöt8 
Àn
 )

171 
byã
 
x
;

172 
byã
 
x‹Resu…
;

174 
x‹Resu…
 = 0;

176  
x
 = 0; x < 
Àn
; x++, 
msg_±r
++ )

177 
x‹Resu…
 = x‹Resu… ^ *
msg_±r
;

179  ( 
x‹Resu…
 );

180 
	}
}

197 
MT_U¨tPro˚ssZToﬁByã
 ( 
uöt8
 
ch
 );

198 
	$MT_U¨tPro˚ssZToﬁByã
 ( 
uöt8
 
ch
 )

200 
°©e
)

202 
SOP_STATE
:

203 i‡(
ch
 =
MT_UART_SOF
)

204 
°©e
 = 
LEN_STATE
;

207 
LEN_STATE
:

208 
LEN_Tokí
 = 
ch
;

210 
ãmpD©aLí
 = 0;

213 
pMsg
 = (
mtOSALSîülD©a_t
 *)
	`oßl_msg_Æloˇã
(  ( mtOSALSerialData_t ) +

214 
MT_RPC_FRAME_HDR_SZ
 + 
LEN_Tokí
 );

216 i‡(
pMsg
)

219 
pMsg
->
hdr
.
evít
 = 
CMD_SERIAL_MSG
;

220 
pMsg
->
msg
 = (
uöt8
*)(pMsg+1);

221 
pMsg
->
msg
[
MT_RPC_POS_LEN
] = 
LEN_Tokí
;

222 
°©e
 = 
CMD_STATE1
;

226 
°©e
 = 
SOP_STATE
;

231 
CMD_STATE1
:

232 
pMsg
->
msg
[
MT_RPC_POS_CMD0
] = 
ch
;

233 
°©e
 = 
CMD_STATE2
;

236 
CMD_STATE2
:

237 
pMsg
->
msg
[
MT_RPC_POS_CMD1
] = 
ch
;

239 i‡(
LEN_Tokí
)

241 
°©e
 = 
DATA_STATE
;

245 
°©e
 = 
FCS_STATE
;

249 
DATA_STATE
:

251 
pMsg
->
msg
[
MT_RPC_FRAME_HDR_SZ
 + 
ãmpD©aLí
++] = 
ch
;

254 i‡–
ãmpD©aLí
 =
LEN_Tokí
 )

255 
°©e
 = 
FCS_STATE
;

258 
FCS_STATE
:

259 
FSC_Tokí
 = 
ch
;

262 i‡((
	`MT_U¨tCÆcFCS
 ((
uöt8
*)&
pMsg
->
msg
[0], 
MT_RPC_FRAME_HDR_SZ
 + 
LEN_Tokí
Ë=
FSC_Tokí
))

264 
	`oßl_msg_£nd
–
Aµ_TaskID
, (
byã
 *)
pMsg
 );

269 
	`oßl_msg_dóŒoˇã
 ( (
uöt8
 *)
pMsg
 );

273 
°©e
 = 
SOP_STATE
;

279 
	}
}

281 #i‡
deföed
 (
ZAPP_P1
Ë|| deföed (
ZAPP_P2
)

297 
	$MT_U¨tPro˚ssZAµD©a
 ( 
uöt8
 
p‹t
, uöt8 
evít
 )

300 
oßl_evít_hdr_t
 *
msg_±r
;

301 
uöt16
 
Àngth
 = 0;

302 
uöt16
 
rxBufLí
 = 
	`HÆ_UART_RxBufLí
(
MT_UART_DEFAULT_PORT
);

308 i‡((
MT_U¨tMaxZAµBufLí
 !0Ë&& (MT_U¨tMaxZAµBufLí <
rxBufLí
))

310 
Àngth
 = 
MT_U¨tMaxZAµBufLí
;

314 
Àngth
 = 
rxBufLí
;

318 i‡(
evít
 =
HAL_UART_TX_FULL
)

324 i‡(
evít
 & ( 
HAL_UART_RX_FULL
 | 
HAL_UART_RX_ABOUT_FULL
 | 
HAL_UART_RX_TIMEOUT
))

326 i‡–
Aµ_TaskID
 )

332 i‡((
MT_U¨tZAµRxSètus
 =
MT_UART_ZAPP_RX_READY
 ) && (
Àngth
 != 0))

335 
	`MT_U¨tAµFlowC⁄åﬁ
 (
MT_UART_ZAPP_RX_NOT_READY
);

338 
msg_±r
 = (
oßl_evít_hdr_t
 *)
	`oßl_msg_Æloˇã
–
Àngth
 + (osal_event_hdr_t) );

339 i‡–
msg_±r
 )

341 
msg_±r
->
evít
 = 
SPI_INCOMING_ZAPP_DATA
;

342 
msg_±r
->
°©us
 = 
Àngth
;

345 
	`HÆUARTRód
–
MT_UART_DEFAULT_PORT
, (
uöt8
 *)(
msg_±r
 + 1), 
Àngth
 );

348 
	`oßl_msg_£nd
–
Aµ_TaskID
, (
uöt8
 *)
msg_±r
 );

353 
	}
}

365 
	$MT_U¨tZAµBuf„rLígthRegi°î
 ( 
uöt16
 
maxLí
 )

368 i‡(
maxLí
 <
MT_UART_DEFAULT_MAX_RX_BUFF
)

369 
MT_U¨tMaxZAµBufLí
 = 
maxLí
;

371 
MT_U¨tMaxZAµBufLí
 = 1;

372 
	}
}

384 
	$MT_U¨tAµFlowC⁄åﬁ
 ( 
boﬁ
 
°©us
 )

388 i‡(
°©us
 !
MT_U¨tZAµRxSètus
 )

390 
MT_U¨tZAµRxSètus
 = 
°©us
;

394 i‡(
°©us
 =
MT_UART_ZAPP_RX_READY
)

396 
	`MT_U¨tPro˚ssZAµD©a
 (
MT_UART_DEFAULT_PORT
, 
HAL_UART_RX_TIMEOUT
 );

399 
	}
}

	@Projects/zstack/Utilities/OAD/Source/MT_X.c

46 
	~<°rög.h
>

47 
	~"hÆ_u¨t.h
"

48 
	~"hÆ_ty≥s.h
"

49 
	~"mt.h
"

50 
	~"mt_Ωc.h
"

51 
	~"mt_x.h
"

52 
	~"mt_nwk.h
"

53 
	~"mt_u¨t.h
"

54 
	~"mt_zdo.h
"

55 
	~"NLMEDE.h
"

56 
	~"ﬂd_≠p.h
"

57 
	~"ZDAµ.h
"

58 
	~"ZGlobÆs.h
"

70 
	#SOP_STATE
 0x00

	)

71 
	#CMD_STATE1
 0x01

	)

72 
	#CMD_STATE2
 0x02

	)

73 
	#LEN_STATE
 0x03

	)

74 
	#DATA_STATE
 0x04

	)

75 
	#FCS_STATE
 0x05

	)

77 
	#SOP_VALUE
 0x02

	)

80 
	#MTX_OLD
 0x00

	)

81 
	#MTX_NEW
 0x01

	)

83 
	#MTX_MAX
 12

	)

86 
	#MTX_SSM
 (((
uöt16
)
MT_RPC_SUBSYSTEM_MASK
 << 8Ë| 0xFF)

	)

88 
	#MTX_RSP
 ((
uöt8
)(
SPI_RESPONSE_BIT
 >> 8))

	)

91 
	#SPI_CMD_SYS_PING
 0x0007

	)

92 
	#SPI_CMD_SYS_VERSION
 0x0008

	)

93 
	#SPI_CMD_SYS_GET_DEVICE_INFO
 0x0014

	)

94 
	#SPI_CMD_SYS_APP_MSG
 0x0018

	)

95 
	#SPI_CMD_SYS_LED_CONTROL
 0x0019

	)

97 
	#SPI_CMD_NLME_JOIN_REQ
 0x0104

	)

98 
	#SPI_CMD_NLME_LEAVE_REQ
 0x0105

	)

99 
	#SPI_CB_NLME_JOIN_CNF
 0x0183

	)

100 
	#SPI_CMD_NLME_NWK_DISC_REQ
 0x010B

	)

101 
	#SPI_CB_NLME_NWK_DISC_CNF
 0x018D

	)

103 
	#SPI_CMD_ZDO_IEEE_ADDR_REQ
 0x0A03

	)

104 
	#SPI_CB_ZDO_IEEE_ADDR_RSP
 0x0A81

	)

107 c⁄° 
uöt8
 
	gmsgVîsi⁄
[] = {

108 
SOP_VALUE
,

109 
MTX_RSP
,

110 
SPI_CMD_SYS_VERSION
,

133 c⁄° 
uöt16
 
	gmtxCmd
[
MTX_MAX
][2] =

135 {
SPI_CMD_SYS_APP_MSG
, 0x2900},

136 {
SPI_CMD_SYS_APP_MSG
, 0x6980},

137 {
SPI_CMD_SYS_PING
, 0x2101},

138 {
SPI_CMD_SYS_GET_DEVICE_INFO
, 0x2700},

139 {
SPI_CMD_SYS_VERSION
, 0x2102},

140 {
SPI_CMD_ZDO_IEEE_ADDR_REQ
, 0x2501},

141 {
SPI_CB_ZDO_IEEE_ADDR_RSP
, 0x4581},

142 {
SPI_CMD_NLME_NWK_DISC_REQ
, 0x2309},

143 {
SPI_CB_NLME_NWK_DISC_CNF
, 0x4389},

144 {
SPI_CMD_NLME_JOIN_REQ
, 0x2304},

145 {
SPI_CMD_NLME_LEAVE_REQ
, 0x2305},

146 {
SPI_CB_NLME_JOIN_CNF
, 0x4383}

159 
byã
 
MT_TaskID
;

160 
uöt8
 
	gmtxMode
;

167 
MT_U¨tPro˚ssZToﬁByã
(
uöt8
 
ch
);

174 
uöt8
 
	gmtxCmdTokí
[2];

175 
uöt8
 
	gmtxFCSTokí
;

176 
uöt8
 
	gmtxIdxTokí
;

177 
uöt8
 
	gmtxLíTokí
;

178 
uöt8
 
	gmtxSèã
;

179 
mtOSALSîülD©a_t
 *
	gmtxMsg
;

180 
uöt8
 
	gmtxR•
[128];

187 
uöt8
 
cmdO2N
(uöt8 *
cmd
);

188 
uöt8
 
cmdN2O
(uöt8 *
cmd
);

189 
uöt8
 
msgO2N
(uöt8 *
cmd
, uöt8 *
msg
);

190 
uöt8
 
msgN2O
(uöt8 *
cmd
, uöt8 
idx
);

191 
mtxIEEEAddrR•CB
(
uöt8
 *
cmd
);

212 
uöt8
 
	$cmdO2N
(
uöt8
 *
cmd
)

214 
uöt16
 
tmp
;

215 
uöt8
 
idx
;

218 
tmp
 = 
	`BUILD_UINT16
(
cmd
[1], cmd[0]);

220 
idx
 = 0; idx < 
MTX_MAX
; idx++)

222 i‡(
mtxCmd
[
idx
][
MTX_OLD
] =
tmp
)

225 
cmd
[0] = 
	`HI_UINT16
(
mtxCmd
[
idx
][
MTX_NEW
]);

226 
cmd
[1] = 
	`LO_UINT16
(
mtxCmd
[
idx
][
MTX_NEW
]);

232  (
idx
 =
MTX_MAX
Ë? 
FALSE
 : 
TRUE
;

233 
	}
}

254 
uöt8
 
	$cmdN2O
(
uöt8
 *
cmd
)

256 
uöt16
 
tmp
;

257 
uöt8
 
idx
;

259 
tmp
 = 
	`BUILD_UINT16
(
cmd
[1], (cmd[0] & 
MT_RPC_SUBSYSTEM_MASK
));

261 
idx
 = 0; idx < 
MTX_MAX
; idx++)

263 i‡((
mtxCmd
[
idx
][
MTX_NEW
] & 
MTX_SSM
Ë=
tmp
)

265  
	`msgN2O
(
cmd
, 
idx
);

269  
FALSE
;

270 
	}
}

290 
uöt8
 
	$msgO2N
(
uöt8
 *
cmd
, uöt8 *
msg
)

292 
uöt16
 
tmp
 = 
	`BUILD_UINT16
(
cmd
[1], cmd[0]);

293 
uöt8
 
π∫
 = 
TRUE
;

295 i‡(
tmp
 == 0x2309)

297 
	`MT_Revî£Byãs
(
msg
, 4);

298 
_nwkCÆlbackSub
 = 0xFFFF;

300 i‡(
tmp
 == 0x2304)

303 c⁄° 
uöt8
 
ÁkeNwkJoöAck
[] = { 0x02, 0x11, 0x04, 0x01, 0x00, 0x14 };

305 
zgC⁄figPANID
 = 
	`BUILD_UINT16
(
msg
[1], msg[0]);

306 
zgDeÁu…Ch™√lLi°
 = 0x00000800;

307 
zgDeÁu…Ch™√lLi°
 <<(
msg
[2] - 11);

308 
zgDeÁu…SèπögSˇnDuøti⁄
 = 0;

309 
	`ZDOInôDevi˚
(0);

311 
_nwkCÆlbackSub
 = 0;

312 
	`HÆUARTWrôe
(
MT_UART_DEFAULT_PORT
, (
uöt8
 *)
ÁkeNwkJoöAck
, (fakeNwkJoinAck));

313 
π∫
 = 
FALSE
;

315 i‡(
tmp
 == 0x2501)

317 
uöt16
 
addr
 = 
	`BUILD_UINT16
(
msg
[0], msg[1]);

319 i‡(
addr
 !
	`NLME_GëSh‹tAddr
())

321 ()
	`ZDP_IEEEAddrReq
(
addr
, 
msg
[2], msg[3], 0);

323 
π∫
 = 
FALSE
;

325 i‡(
tmp
 == 0x2305)

328 
mtxR•
[0] = 
SOP_VALUE
;

329 
mtxR•
[1] = 0x01;

330 
mtxR•
[2] = 0x85;

331 
mtxR•
[3] = 
Z_EXTADDR_LEN
 + 1;

332 
	`oßl_˝yExtAddr
(
mtxR•
+4, 
aExãndedAddªss
);

333 
	`MT_Revî£Byãs
(
mtxR•
+4, 
Z_EXTADDR_LEN
);

334 
mtxR•
[4+
Z_EXTADDR_LEN
] = 
ZSuc˚ss
;

336 
mtxR•
[
SPI_0DATA_MSG_LEN
 + 
Z_EXTADDR_LEN
] = 
	`MT_U¨tCÆcFCS
(mtxRsp+1, Z_EXTADDR_LEN+3);

337 
	`HÆUARTWrôe
(
MT_UART_DEFAULT_PORT
, 
mtxR•
, 
SPI_0DATA_MSG_LEN
+
Z_EXTADDR_LEN
+1);

338 
	`oßl_°¨t_timîEx
(
ﬂd_≠p_èskId
, 
ZLOAD_RESET_BOARD_EVT
, 6000);

341  
π∫
;

342 
	}
}

362 
uöt8
 
	$msgN2O
(
uöt8
 *
cmd
, uöt8 
idx
)

364 i‡(
mtxCmd
[
idx
][
MTX_OLD
] =
SPI_CMD_SYS_VERSION
)

366 
	`HÆUARTWrôe
(
MT_UART_DEFAULT_PORT
, (
uöt8
 *)
msgVîsi⁄
, (msgVersion));

367 
idx
 = 
MTX_MAX
;

372 i‡((
cmd
[0] & 
MT_RPC_CMD_SRSP
) == MT_RPC_CMD_SRSP)

374 
cmd
[0] = 
MTX_RSP
;

378 
cmd
[0] = 0;

380 
cmd
[0] |
	`HI_UINT16
(
mtxCmd
[
idx
][
MTX_OLD
]);

381 
cmd
[1] = 
	`LO_UINT16
(
mtxCmd
[
idx
][
MTX_OLD
]);

383 i‡(
mtxCmd
[
idx
][
MTX_OLD
] =
SPI_CMD_SYS_GET_DEVICE_INFO
)

385 
	`MT_Revî£Byãs
(
cmd
+3, 
Z_EXTADDR_LEN
);

386 
	`MT_Revî£Byãs
(
cmd
+3+
Z_EXTADDR_LEN
, 2);

388 i‡(
mtxCmd
[
idx
][
MTX_OLD
] =
SPI_CB_NLME_NWK_DISC_CNF
)

390 
idx
 = 
cmd
[2];

391 
cmd
 += 3;

393 
idx
--)

395 
	`MT_Revî£Byãs
(
cmd
, 2);

396 
cmd
 += 9;

404 i‡(
mtxCmd
[
idx
][
MTX_OLD
] =
SPI_CB_ZDO_IEEE_ADDR_RSP
)

406 
	`mtxIEEEAddrR•CB
(
cmd
-1);

407 
idx
 = 
MTX_MAX
;

411  (
idx
 =
MTX_MAX
Ë? 
FALSE
 : 
TRUE
;

412 
	}
}

430 
	$mtxIEEEAddrR•CB
(
uöt8
 *
cmd
)

432 
uöt8
 
˙t
 = 
cmd
[15] * 2;

433 i‡(
˙t
 > 12) cnt = 12;

435 
mtxR•
[0] = 
SOP_VALUE
;

436 
mtxR•
[1] = 
cmd
[1];

437 
mtxR•
[2] = 
cmd
[2];

438 
mtxR•
[3] = 36;

441 
mtxR•
[4] = 
Addr16Bô
;

442 ()
	`mem£t
(
mtxR•
+5, 0, 
Z_EXTADDR_LEN
-2);

443 
mtxR•
[11] = 
cmd
[13];

444 
mtxR•
[12] = 
cmd
[12];

445 
mtxR•
[13] = 
cmd
[3];

448 ()
	`mem˝y
(
mtxR•
+14, 
cmd
+4, 
Z_EXTADDR_LEN
);

449 
	`MT_Revî£Byãs
(
mtxR•
+14, 
Z_EXTADDR_LEN
);

452 
mtxR•
[22] = 
cmd
[15];

453 
mtxR•
[23] = 
cmd
[14];

456 ()
	`mem˝y
(
mtxR•
+24, 
cmd
+16, 
˙t
);

459 ()
	`mem£t
(
mtxR•
+24+
˙t
, 0, 12-cnt);

461 
mtxR•
[
SPI_0DATA_MSG_LEN
-1 + 36] = 
	`MT_U¨tCÆcFCS
(mtxR•+1, (
MT_RPC_FRAME_HDR_SZ
 + 36));

462 
	`HÆUARTWrôe
(
MT_UART_DEFAULT_PORT
, 
mtxR•
, 
SPI_0DATA_MSG_LEN
+36);

463 
	}
}

489 
	$MT_X_U¨tPro˚ssZToﬁD©a
(
uöt8
 
p‹t
, uöt8 
evít
)

491 
uöt8
 
ch
;

492 ()
evít
;

494 
	`HÆUARTRód
(
p‹t
, &
ch
, 1))

496 i‡(
mtxMode
)

498 
mtxSèã
)

500 
SOP_STATE
:

501 i‡(
ch
 =
SOP_VALUE
)

503 
mtxSèã
 = 
CMD_STATE1
;

507 
CMD_STATE1
:

508 
mtxCmdTokí
[0] = 
ch
;

509 
mtxFCSTokí
 = 0;

510 
mtxSèã
 = 
CMD_STATE2
;

513 
CMD_STATE2
:

514 
mtxCmdTokí
[1] = 
ch
;

519 i‡(
	`cmdO2N
(
mtxCmdTokí
))

521 
mtxSèã
 = 
LEN_STATE
;

525 
mtxSèã
 = 
SOP_STATE
;

529 
LEN_STATE
:

530 i‡(
ch
 == 0)

532 
mtxSèã
 = 
FCS_STATE
;

536 
mtxSèã
 = 
DATA_STATE
;

539 
mtxLíTokí
 = 
ch
;

540 
mtxIdxTokí
 = 0;

543 
mtxMsg
 = (
mtOSALSîülD©a_t
 *)
	`oßl_msg_Æloˇã
((mtOSALSerialData_t) +

544 
MT_RPC_FRAME_HDR_SZ
 + 
mtxLíTokí
);

546 i‡(
mtxMsg
)

548 
mtxMsg
->
hdr
.
evít
 = 
CMD_SERIAL_MSG
;

549 
mtxMsg
->
msg
 = (
uöt8
*)(mtxMsg+1);

550 
mtxMsg
->
msg
[
MT_RPC_POS_LEN
] = 
mtxLíTokí
;

551 
mtxMsg
->
msg
[
MT_RPC_POS_CMD0
] = 
mtxCmdTokí
[0];

552 
mtxMsg
->
msg
[
MT_RPC_POS_CMD1
] = 
mtxCmdTokí
[1];

556 
mtxSèã
 = 
SOP_STATE
;

560 
DATA_STATE
:

561 
mtxMsg
->
msg
[
MT_RPC_FRAME_HDR_SZ
 + 
mtxIdxTokí
++] = 
ch
;

562 i‡(--
mtxLíTokí
 == 0)

564 
mtxSèã
 = 
FCS_STATE
;

568 
FCS_STATE
:

569 i‡(
mtxFCSTokí
 =
ch
)

571 i‡(
	`msgO2N
(
mtxCmdTokí
, (
mtxMsg
->
msg
)+
MT_RPC_POS_DAT0
))

573 
	`oßl_msg_£nd
(
MT_TaskID
, (
byã
 *)
mtxMsg
);

577 
	`oßl_msg_dóŒoˇã
((
uöt8
 *)
mtxMsg
);

582 
	`oßl_msg_dóŒoˇã
 ( (
uöt8
 *)
mtxMsg
 );

585 
mtxSèã
 = 
SOP_STATE
;

592 
mtxFCSTokí
 ^
ch
;

596 
	`MT_U¨tPro˚ssZToﬁByã
(
ch
);

599 
	}
}

619 
	$MT_X_Tøn•‹tSíd
(
uöt8
 *
msg
)

621 i‡(
mtxMode
)

623 i‡(
	`cmdN2O
(
msg
+2))

626 
msg
[0] = msg[1];

627 ()
	`mem˝y
(
msg
+1, msg+2, 2);

628 
msg
[3] = msg[0];

630 
msg
[0] = 
SOP_VALUE
;

631 
msg
[
SPI_0DATA_MSG_LEN
-1 + msg[3]] = 
	`MT_U¨tCÆcFCS
(msg+1, (
MT_RPC_FRAME_HDR_SZ
 + msg[3]));

633 
	`HÆUARTWrôe
(
MT_UART_DEFAULT_PORT
, 
msg
, 
SPI_0DATA_MSG_LEN
 + msg[3]);

638 
msg
[0] = 
MT_UART_SOF
;

639 
msg
[
SPI_0DATA_MSG_LEN
 - 1 + msg[1]] = 
	`MT_U¨tCÆcFCS
 (msg+1, (3 + msg[1]));

640 
	`HÆUARTWrôe
(
MT_UART_DEFAULT_PORT
, 
msg
, msg[1] + 
SPI_0DATA_MSG_LEN
);

643 
	`oßl_msg_dóŒoˇã
(
msg
);

644 
	}
}

662 
	$MT_X_FakeNwkJoöCnf
()

664 
uöt8
 *
msg
;

666 i‡((
msg
=
	`oßl_mem_Æloc
(
SPI_0DATA_MSG_LEN
+11)))

668 
msg
[0] = 
SOP_VALUE
;

669 
msg
[1] = 0x01;

670 
msg
[2] = 0x83;

671 
msg
[3] = 11;

673 
	`oßl_nv_ªad
(
ZCD_NV_EXTADDR
, 0, 
Z_EXTADDR_LEN
, 
msg
+4);

674 
	`MT_Revî£Byãs
(
msg
+4, 
Z_EXTADDR_LEN
);

675 
msg
[12] = 
	`HI_UINT16
(
zgC⁄figPANID
);

676 
msg
[13] = 
	`LO_UINT16
(
zgC⁄figPANID
);

677 
msg
[14] = 0;

679 
msg
[
SPI_0DATA_MSG_LEN
-1 + 11] = 
	`MT_U¨tCÆcFCS
(msg+1, (
MT_RPC_FRAME_HDR_SZ
 + 11));

680 
	`HÆUARTWrôe
(
MT_UART_DEFAULT_PORT
, 
msg
, 
SPI_0DATA_MSG_LEN
+11);

681 
	`oßl_mem_‰ì
(
msg
);

683 
	}
}

	@Projects/zstack/Utilities/OAD/Source/MT_X.h

40 #i‚de‡
MT_X_H


41 
	#MT_X_H


	)

43 #ifde‡
__˝lu•lus


53 
	~"hÆ_ty≥s.h
"

54 
	~"OSAL_Nv.h
"

76 
uöt8
 
mtxMode
;

107 
MT_X_U¨tPro˚ssZToﬁD©a
(
uöt8
 
p‹t
, uöt8 
evít
);

127 
MT_X_Tøn•‹tSíd
(
uöt8
 *
msg
);

145 
MT_X_FakeNwkJoöCnf
();

150 #ifde‡
__˝lu•lus


	@Projects/zstack/Utilities/OAD/Source/OSAL_Dongle.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"ﬂd_≠p.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
ﬂdAµEvt


90 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

91 
uöt16
 *
	gèsksEvíts
;

106 
	$oßlInôTasks
( )

108 
uöt8
 
èskID
 = 0;

110 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

111 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

113 
	`macTaskInô
–
èskID
++ );

114 
	`nwk_öô
–
èskID
++ );

115 
	`HÆ_Inô
–
èskID
++ );

116 #i‡
	`deföed
–
MT_TASK
 )

117 
	`MT_TaskInô
–
èskID
++ );

119 
	`APS_Inô
–
èskID
++ );

120 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

121 
	`APSF_Inô
–
èskID
++ );

123 
	`ZDAµ_Inô
–
èskID
++ );

124 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

125 
	`ZDNwkMgr_Inô
–
èskID
++ );

127 
	`ﬂdAµInô
–
èskID
 );

128 
	}
}

	@Projects/zstack/Utilities/OAD/Source/oad_app.c

45 
	~<°rög.h
>

47 
	~"AF.h
"

48 
	~"hÆ_adc.h
"

49 
	~"hÆ_bﬂrd_cfg.h
"

50 
	~"hÆ_Êash.h
"

51 
	~"hÆ_ﬂd.h
"

52 
	~"ﬂd_≠p.h
"

53 
	~"ﬂd_¥ómbÀ.h
"

54 
	~"OnBﬂrd.h
"

55 
	~"OSAL_Nv.h
"

57 #i‡
deföed
 
ZPORT


58 
	~"hÆ_key.h
"

59 
	~"MT.h
"

60 
	~"MT_APP.h
"

61 
	~"MT_X.h
"

62 
	~"ZDAµ.h
"

64 #i‡(
HAL_OAD_XNV_IS_INT
 && ((
HAL_OAD_DL_OSET
 % 
HAL_FLASH_PAGE_SIZE
) != 0))

65 
	~"hÆ_xnv.h
"

74 
	#DO_EVENT_CALLBACK
(
e
Ë
	`°
 ( i‡(
s_pCÆlback
 && (”Ë& 
s_evítMask
)Ë
	`s_pCÆlback
(”)); )

	)

81 #i‡!
deföed
 
OAD_NV_ID


83 
	#OAD_NV_ID
 0x0FFF

	)

85 
	#PREAMBLE_NV_ID
 
OAD_NV_ID


	)

89 
	#ZLCB_EVENT_OADBEGIN_CLIENT
 ((
uöt16
)0x0001)

	)

90 
	#ZLCB_EVENT_OADEND_CLIENT
 ((
uöt16
)0x0002)

	)

91 
	#ZLCB_EVENT_OADBEGIN_SERVER
 ((
uöt16
)0x0004)

	)

92 
	#ZLCB_EVENT_OADEND_SERVER
 ((
uöt16
)0x0008)

	)

93 
	#ZLCB_EVENT_CODE_ENABLE_RESET
 ((
uöt16
)0x0010)

	)

94 
	#ZLCB_EVENT_ALL
 (
ZLCB_EVENT_OADBEGIN_CLIENT
 | \

95 
ZLCB_EVENT_OADEND_CLIENT
 | \

96 
ZLCB_EVENT_OADBEGIN_SERVER
 | \

97 
ZLCB_EVENT_OADEND_SERVER
 | \

98 
ZLCB_EVENT_CODE_ENABLE_RESET
 \

99 )

	)

101 
	#SDC_RETRY_COUNT
 (10)

	)

102 
	#SDR_WAIT_TO
 (1000)

	)

104 
	#SDC_WAIT_TO_ENABLE
 (10000)

	)

111 #i‡
deföed
 
ZPORT


112 
	#SIZEOF_ZAIN_HDR
 ((
uöt16
Ë+ (
uöt8
Ë+ (uöt16Ë+ (uöt8))

	)

116 
PACK_1


118 
uöt16
 
	mz≠roxy_nwkAddr
;

119 
uöt8
 
	mz≠roxy_ídp
;

120 
uöt16
 
	mz≠roxy_Clu°îID
;

121 
uöt8
 
	mz≠roxy_msgÀn
;

122 
uöt8
 
	mz≠roxy_∑ylﬂd
[1];

123 } 
	tzahdrö_t
;

126 
PACK_1


128 
uöt16
 
	mz≠roxy_nwkAddr
;

129 
uöt8
 
	mz≠roxy_ídp
;

130 
uöt16
 
	mz≠roxy_Clu°îID
;

131 
uöt8
 
	mz≠roxy_msgÀn
;

132 
uöt8
 
	mz≠roxy_∑ylﬂd
[1];

133 } 
	tzahdrout_t
;

141 
uöt8
 
	gﬂd_≠p_èskId
;

148 #i‡
deföed
 
ZPORT


149 
	#HÆOADChkDL
(
V
Ë1

	)

150 
	#HÆOADInvRC
(
V
)

	)

151 
	#HÆOADAvaû
(
V
Ë
HAL_OAD_DL_SIZE


	)

152 
	#HÆOADRód
(
A
, 
B
, 
C
, 
D
)

	)

153 
	#HÆOADWrôe
(
A
, 
B
, 
C
, 
D
)

	)

161 
uöt8
 
	gå™sId
;

162 
afAddrTy≥_t
 
	gd°Addr
;

164 
zl˛õ¡C_t
 *
	gs_˛õ¡Info
;

165 
uöt8
 
	gs_Sèã
, 
	gs_Sessi⁄ID
, 
	gs_blkSize
;

166 
uöt16
 
	gs_NextPackë
, 
	gs_NumPktGë
, 
	gs_SDCRëryCou¡
;

167 
zlmhdr_t
 *
	gs_sdcmd
;

168 
zlsdC_t
 *
	gs_sd˝aylﬂd
;

169 
zlmhdr_t
 *
	gs_sdª∂y
;

170 #i‡!
deföed
 
ZPORT


171 
zlsdR_t
 *
	gs_sdΩaylﬂd
;

172 
image_t
 
	gs_ôy≥
;

173 
uöt8
 
	gs_œ°Sìn
, 
	gs_fú°Tx
 = 1;

175 (*
s_pCÆlback
)(
uöt16
);

176 
uöt16
 
s_evítMask
;

177 
uöt8
 
s_œ°TxSeqNum
;

179 #i‡
deföed
 
ZPORT


180 
uöt8
 
s_£rülMsg
;

181 
uöt16
 
s_œ°SeqNum
;

182 
uöt16
 
s_myNwkAddr
 = 0xFFFE;

185 
uöt8
 
s_PTSeqNum
;

186 
afIncomögMSGPackë_t
 
s_PTClõ¡Info
;

189 #¥agm®
loˇti⁄
="PREAMBLE"

190 c⁄° 
CODE
 
¥ómbÀ_t
 
_¥ómbÀ
 = {

191 {
PREAMBLE_MAGIC1
, 
PREAMBLE_MAGIC2
},

192 
HAL_OAD_DL_SIZE
,

193 
HAL_OAD_VERS
,

194 
HAL_OAD_MANU
,

195 
HAL_OAD_PROD


196 
	}
};

197 #¥agm®
ªquúed
=
_¥ómbÀ


201 c⁄° 
cId_t
 
	gOAD_Clu°îLi°
[
OAD_CLUSTER_CNT
] =

203 
OAD_CLUSTERID_CS


207 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gOAD_Sim∂eDesc
 =

209 
OAD_ENDPOINT
,

210 
OAD_PROFILE_ID
,

211 
OAD_DEVICEID
,

212 
OAD_DEVICE_VERSION
,

213 
OAD_FLAGS
,

214 
OAD_CLUSTER_CNT
,

215 (
cId_t
 *)
OAD_Clu°îLi°
,

217 
NULL


220 c⁄° 
ídPoötDesc_t
 
	gOAD_ïDesc
=

222 
OAD_ENDPOINT
,

223 &
ﬂd_≠p_èskId
,

224 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
OAD_Sim∂eDesc
,

225 
noL©ícyReqs
,

228 #i‡
deföed
 
HAL_OAD_BL21


231 
	#MBOX_OAD_ENABLE
 0x454E424C

232 
PACK_1


	)

233 
	smbox_s
 {

234 vﬁ©ûê
	mBoŸRód
;

235 vﬁ©ûê
	mAµRód
;

236 } 
	tmboxMsg_t
;

237 #¥agm®
loˇti⁄
="MBOXMSG_ADDR"

238 
__no_öô
 
mboxMsg_t
 
	gmboxMsg
;

239 
PACK_1


241 
uöt8
 (*
RódFœsh
)(
	mimage_t
, 
uöt32
 
	maddr
, uöt8 *
	mpBuf
, 
uöt16
 
	mÀn
);

242 
uöt8
 (*
WrôeFœsh
)(
	mimage_t
, 
uöt32
 
	maddr
, uöt8 *
	mpBuf
, 
uöt16
 
	mÀn
);

243 
uöt8
 (*
CheckCodeS™ôy
)(
	mimage_t
, 
uöt32
 
	maddr1
, uöt32 
	maddr2
);

244 
uöt8
 (*
GëPªambÀ
)(
	mimage_t
, 
uöt32
 
	maddr
, 
¥ómbÀ_t
 *
	mpBuf
);

245 } 
	tmbox_t
;

246 #¥agm®
loˇti⁄
="MBOX_ADDR"

247 
__no_öô
 
mbox_t
 
	gmbox
;

255 
¥ocSysEvtMsg
();

256 
zlRe£tSèã
();

258 
ZLOADAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 * );

259 
ZLOADAµ_h™dÀComm™d
(
afIncomögMSGPackë_t
 *, 
zlmhdr_t
 *);

260 
ZLOADAµ_h™dÀRïly
(
afIncomögMSGPackë_t
 *, 
zlmhdr_t
 *);

262 
zlCÀ™upOnRe£t
();

263 
zlSèπClõ¡Sessi⁄
();

264 
zlPro˚ssSDR
(
zlsdR_t
 *);

265 
zlReque°NextD©aPackë
();

266 
zlCÀ™upOnX„rD⁄e
();

267 
zlRe£ndSDC
();

269 #i‡
deföed
 
ZPORT


270 
zlSídSîül
(
uöt8
 *, uint8);

271 
ZLOADAµ_SîülMesßgeMSGCB
(
zahdrout_t
 *);

272 
zlZArchôe˘ProxyMsg
(
zahdrout_t
 *);

274 
uöt8
 
zlPassOnSèπSessi⁄OK
(uint8 *);

275 
zahdrö_t
 *
zlBuûdExã∫ÆInboundSîülMSG
(
afIncomögMSGPackë_t
 *, 
uöt8
 *, uint8);

276 
zahdrö_t
 *
zlBuûdI¡î«lInboundSîülMSG
(
uöt8
 *, uint8);

277 
zlH™dÀKeys
(
uöt8
 
shi·
, uöt8 
keys
);

279 
uöt8
 
zlSídComm™d
(uint8, uint8 *);

280 
zlPro˚ssSDC
(
zlsdC_t
 *);

281 
uöt8
 
zlIsReqPackëNumOK
(
uöt16
);

282 #i‡(
HAL_OAD_XNV_IS_INT
 && ((
HAL_OAD_DL_OSET
 % 
HAL_FLASH_PAGE_SIZE
) != 0))

283 
Sètus_t
 
zlEø£HÆfPage
();

303 
	$ﬂdAµInô
(
uöt8
 
id
)

305 
ﬂd_≠p_èskId
 = 
id
;

306 
	`afRegi°î
((
ídPoötDesc_t
 *)&
OAD_ïDesc
);

307 
s_Sèã
 = 
ZLSTATE_IDLE
;

308 
id
 = 
PREAMBLE_OFFSET
;

309 
	`oßl_nv_ôem_öô
(
PREAMBLE_NV_ID
, 1, &
id
);

310 #i‡
deföed
 
HAL_OAD_BL21


311 
mboxMsg
.
BoŸRód
 = 0;

313 #i‡
deföed
 
ZPORT


315 
	`Regi°îF‹Keys
(
ﬂd_≠p_èskId
);

316 
mtxMode
 = 
TRUE
;

318 
	}
}

337 
uöt16
 
	$ﬂdAµEvt
(
uöt8
 
id
, 
uöt16
 
evts
)

339 
uöt16
 
mask
 = 0;

340 ()
id
;

342 i‡(
evts
 & 
SYS_EVENT_MSG
)

344 
mask
 = 
SYS_EVENT_MSG
;

345 
	`¥ocSysEvtMsg
();

347 i‡(
evts
 & 
ZLOAD_CODE_ENABLE_EVT
)

350 
	`DO_EVENT_CALLBACK
(
ZLCB_EVENT_CODE_ENABLE_RESET
);

352 #i‡
deföed
 
HAL_OAD_BL21


354 
mboxMsg
.
BoŸRód
 = 
MBOX_OAD_ENABLE
;

356 
	`HÆOADInvRC
();

358 
	`Sy°emRe£t
();

360 i‡(
evts
 & 
ZLOAD_IS_CLIENT_EVT
)

362 
mask
 = 
ZLOAD_IS_CLIENT_EVT
;

363 
	`zlSèπClõ¡Sessi⁄
();

365 i‡(
evts
 & 
ZLOAD_XFER_DONE_EVT
)

367 
mask
 = 
ZLOAD_XFER_DONE_EVT
;

368 
	`zlCÀ™upOnX„rD⁄e
();

370 i‡(
evts
 & 
ZLOAD_RESET_EVT
)

372 
mask
 = 
ZLOAD_RESET_EVT
;

373 
	`zlCÀ™upOnRe£t
();

375 i‡(
evts
 & 
ZLOAD_SDRTIMER_EVT
)

377 
mask
 = 
ZLOAD_SDRTIMER_EVT
;

378 
	`zlRe£ndSDC
();

380 i‡(
evts
 & 
ZLOAD_RESET_BOARD_EVT
)

382 
	`Sy°emRe£tSo·
();

386 
mask
 = 
evts
;

389  (
evts
 ^ 
mask
);

390 
	}
}

408 
	$¥ocSysEvtMsg
()

410 
uöt8
 *
msgPå
;

412 (
msgPå
 = 
	`oßl_msg_ª˚ive
(
ﬂd_≠p_èskId
)))

414 #i‡
deföed
 
ZPORT


415 
s_£rülMsg
 = 0;

418  *
msgPå
 )

420 
MT_SYS_APP_MSG
:

421 
MT_SYS_APP_RSP_MSG
:

422 #i‡
deföed
 
ZPORT


424 
s_£rülMsg
 = 1;

425 
	`ZLOADAµ_SîülMesßgeMSGCB
((
zahdrout_t
 *)(((
mtSysAµMsg_t
 *)
msgPå
)->
≠pD©a
));

429 
AF_DATA_CONFIRM_CMD
:

432 
AF_INCOMING_MSG_CMD
:

433 
	`ZLOADAµ_MesßgeMSGCB
((
afIncomögMSGPackë_t
 *)
msgPå
);

436 #i‡
deföed
 
ZPORT


437 
KEY_CHANGE
:

438 
	`zlH™dÀKeys
(((
keyCh™ge_t
 *)
msgPå
)->
°©e
, ((keyCh™ge_à*)msgPå)->
keys
);

442 
ZDO_NEW_DSTADDR
:

456 
ZDO_STATE_CHANGE
:

457 #i‡
deföed
 
ZPORT


458 i‡(((
devSèãs_t
)(((
oßl_evít_hdr_t
 *)
msgPå
)->
°©us
Ë=
DEV_END_DEVICE_UNAUTH
) ||

459 ((
devSèãs_t
)(((
oßl_evít_hdr_t
 *)
msgPå
)->
°©us
Ë=
DEV_END_DEVICE
))

461 
	`MT_X_FakeNwkJoöCnf
();

470 
	`oßl_msg_dóŒoˇã
(
msgPå
);

472 
	}
}

483 
	$ZLOADAµ_MesßgeMSGCB
(
afIncomögMSGPackë_t
 *
MSGpkt
)

485 
zlmhdr_t
 *
öMsg
 = (zlmhdr_à*)
MSGpkt
->
cmd
.
D©a
;

487 i‡(
öMsg
->
zlhdr_msgid
 & 
ZLMSGID_REPLY_BIT
)

489 
	`ZLOADAµ_h™dÀRïly
(
MSGpkt
, 
öMsg
);

493 
	`ZLOADAµ_h™dÀComm™d
(
MSGpkt
, 
öMsg
);

497 
	}
}

511 
	$ZLOADAµ_h™dÀComm™d
(
afIncomögMSGPackë_t
 *
MSGpkt
, 
zlmhdr_t
 *
msg
)

513 
uöt8
 *
˝c
, *
˝r
, 
∑ylSize
;

514 
¥ómbÀ_t
 
¥ómbÀ
;

516 #i‡
deföed
 
ZPORT


517 
uöt8
 *
buf
;

518 i‡(!
buf
)

520 i‡(!(
buf
 = 
	`oßl_mem_Æloc
((
zlmhdr_t
Ë+ (
zÃïly_t
))))

526 
uöt8
 *
buf
 = 
NULL
;

531 i‡(
msg
->
zlhdr_msgid
 !
ZLMSGID_SEND_DATA
)

533 i‡(!(
buf
 = 
	`oßl_mem_Æloc
((
zlmhdr_t
Ë+ (
zÃïly_t
))))

544 i‡(
s_Sèã
 !
ZLSTATE_SERVER
)

548 i‡(!(
buf
 = 
	`oßl_mem_Æloc
((
zlmhdr_t
Ë+ (
zlsdR_t
))))

553 
s_sdª∂y
 = (
zlmhdr_t
 *)
buf
;

554 
s_sdª∂y
->
zlhdr_msgid
 = 
ZLMSGID_SEND_DATA
 | 
ZLMSGID_REPLY_BIT
;

555 
s_sdª∂y
->
zlhdr_msgÀn
 = (
zlsdR_t
);

556 
s_sdΩaylﬂd
 = (
zlsdR_t
 *)(
buf
+(
zlmhdr_t
));

557 
s_sdΩaylﬂd
->
zlsdR_°©e
 = 
s_Sèã
;

558 
s_sdΩaylﬂd
->
zlsdR_îr‹Code
 = 
EC_SD_NOT_SERVER
;

563 
˝r
 = 
buf
 + (
zlmhdr_t
);

564 
˝c
 = (
uöt8
 *)
msg
 + (
zlmhdr_t
);

566 
msg
->
zlhdr_msgid
) {

567 
ZLMSGID_STATUSQ
:

569 
uöt8
 
dlImagePªambÀOff£t
;

570 
zl°©usR_t
 *
ª∂y
 = (zl°©usR_à*)
˝r
;

571 
∑ylSize
 = (
zl°©usR_t
);

573 
ª∂y
->
zlsqR_°©e
 = 
s_Sèã
;

574 
ª∂y
->
zlsqR_îr‹Code
 = 
EC_NO_ERROR
;

576 
ª∂y
->
zlsqR_PrŸocﬁVîsi⁄
 = 
ZLOAD_PROTOCOL_VERSION
;

577 
ª∂y
->
zlsqR_ˇ∑bûtõs
 = 
ZLOAD_CAPABILTIES
;

578 
˝r
 +=4;

581 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_RC
);

582 
˝r
 = 
	`oßl_mem˝y
(˝r, &
¥ómbÀ
.
vîs
, 
ZL_IMAGE_ID_LENGTH
);

585 
	`oßl_nv_ªad
(
PREAMBLE_NV_ID
, 0, 1, &
dlImagePªambÀOff£t
);

586 
	`HÆOADRód
(
dlImagePªambÀOff£t
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_DL
);

587 i‡(
¥ómbÀ
.
vîs
 != 0xFF)

589 
˝r
 = 
	`oßl_mem˝y
(˝r, &
¥ómbÀ
.
vîs
, 
ZL_IMAGE_ID_LENGTH
);

593 
	`oßl_mem£t
(
˝r
, 0, 
ZL_IMAGE_ID_LENGTH
);

594 
˝r
 +
ZL_IMAGE_ID_LENGTH
;

597 
˝r
 = 
	`oßl_mem˝y
(˝r, &
s_NextPackë
, (s_NextPacket));

598 
	`oßl_mem˝y
(
˝r
, &
s_NumPktGë
, (s_NumPktGet));

602 
ZLMSGID_SESSION_START
:

603 #i‡
deföed
 
ZPORT


606 i‡(
s_Sèã
 !
ZLSTATE_IDLE
) {

607 ((
zlbeg£ssR_t
 *)
˝r
)->
zlbsR_îr‹Code
 = 
EC_BS_NOT_IDLE
;

609 i‡(
s_£rülMsg
) {

611 ((
zlbeg£ssR_t
 *)
˝r
)->
zlbsR_îr‹Code
 = 
EC_BS_NOT_SERVER
;

615 
s_PTSeqNum
 = 
msg
->
zlhdr_£qnum
;

616 
s_PTClõ¡Info
 = *
MSGpkt
;

617 
s_Sessi⁄ID
 = ((
zlbeg£ssC_t
 *)
˝c
)->
zlbsC_£ssi⁄ID
;

618 i‡(
	`zlPassOnSèπSessi⁄OK
((
uöt8
 *)
msg
)) {

619 
s_Sèã
 = 
ZLSTATE_PASS_THROUGH
;

623 ((
zlbeg£ssR_t
 *)
˝r
)->
zlbsR_îr‹Code
 = 
EC_BS_NO_MEM
;

627 i‡(!
	`HÆAdcCheckVdd
(
VDD_MIN_OAD
))

629 ((
zlbeg£ssR_t
 *)
˝r
)->
zlbsR_îr‹Code
 = 
EC_BAD_VDD
;

633 
uöt8
 
dlImagePªambÀOff£t
;

634 
zlbeg£ssR_t
 *
ª∂y
 = (zlbeg£ssR_à*)
˝r
;

637 
ª∂y
->
zlbsR_blkSize
 = 
ZL_DATA_BLK_SIZE
;

638 
ª∂y
->
zlbsR_numBlks
 = 
ZL_NUM_DATA_BLKS
;

639 
ª∂y
->
zlbsR_°©e
 = 
s_Sèã
;

640 
ª∂y
->
zlbsR_îr‹Code
 = 
EC_NO_ERROR
;

642 
∑ylSize
 = (
zlbeg£ssR_t
);

644 i‡(
s_Sèã
 !
ZLSTATE_IDLE
) {

645 i‡(
s_Sessi⁄ID
 =((
zlbeg£ssC_t
 *)
˝c
)->
zlbsC_£ssi⁄ID
)

651 
ª∂y
->
zlbsR_îr‹Code
 = 
EC_BS_NOT_IDLE
;

657 
	`oßl_nv_ªad
(
PREAMBLE_NV_ID
, 0, 1, &
dlImagePªambÀOff£t
);

658 
	`HÆOADRód
(
dlImagePªambÀOff£t
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_DL
);

659 i‡(
¥ómbÀ
.
vîs
 != 0xFFFF)

661 i‡(!
	`memcmp
(
˝c
, (
uöt8
 *)&
¥ómbÀ
.
vîs
, 
ZL_IMAGE_ID_LENGTH
)) {

663 
	`oßl_mem˝y
(&
ª∂y
->
zlbsR_imgLí
, &
¥ómbÀ
.
Àn
, (
uöt32
));

664 
s_Sèã
 = 
ZLSTATE_SERVER
;

665 
s_ôy≥
 = 
HAL_OAD_DL
;

666 
ª∂y
->
zlbsR_¥ómbÀOff£t
 = (
uöt8
)
PREAMBLE_OFFSET
;

671 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_RC
);

672 i‡(!
	`memcmp
(
˝c
, (
uöt8
 *)&
¥ómbÀ
.
vîs
, 
ZL_IMAGE_ID_LENGTH
)) {

674 
	`oßl_mem˝y
(&
ª∂y
->
zlbsR_imgLí
, &
¥ómbÀ
.
Àn
, (
uöt32
));

675 
s_Sèã
 = 
ZLSTATE_SERVER
;

676 
s_ôy≥
 = 
HAL_OAD_RC
;

677 
ª∂y
->
zlbsR_¥ómbÀOff£t
 = (
uöt8
)
PREAMBLE_OFFSET
;

680 
ª∂y
->
zlbsR_îr‹Code
 = 
EC_BS_NO_MATCHES
;

686 i‡(!((
zlbeg£ssR_t
 *)
˝r
)->
zlbsR_îr‹Code
) {

687 
uöt8
 *
˝
;

688 
zlbeg£ssR_t
 *
ª∂y
 = (zlbeg£ssR_à*)
˝r
;

691 i‡(!(
˝
=
	`oßl_mem_Æloc
((
zlmhdr_t
)+(
zlsdR_t
)))) {

693 
s_Sèã
 = 
ZLSTATE_IDLE
;

694 
ª∂y
->
zlbsR_îr‹Code
 = 
EC_BS_NO_MEM
;

697 
s_NumPktGë
 = (
¥ómbÀ
.
Àn
 + (
ZL_DATA_BLK_SIZE
*
ZL_NUM_DATA_BLKS
-1)) /

698 (
ZL_DATA_BLK_SIZE
*
ZL_NUM_DATA_BLKS
);

699 
s_blkSize
 = 
ZL_DATA_BLK_SIZE
 * 
ZL_NUM_DATA_BLKS
;

700 
s_NextPackë
 = 0;

701 
s_Sessi⁄ID
 = ((
zlbeg£ssC_t
 *)
˝c
)->
zlbsC_£ssi⁄ID
;

704 
s_sdª∂y
 = (
zlmhdr_t
 *)
˝
;

705 
s_sdª∂y
->
zlhdr_msgid
 = 
ZLMSGID_SEND_DATA
 | 
ZLMSGID_REPLY_BIT
;

706 
s_sdª∂y
->
zlhdr_msgÀn
 = (
zlsdR_t
);

707 
s_sdΩaylﬂd
 = (
zlsdR_t
 *)(
˝
+(
zlmhdr_t
));

708 
	`DO_EVENT_CALLBACK
(
ZLCB_EVENT_OADBEGIN_SERVER
);

714 
ZLMSGID_SESSION_TERM
:

716 
zÀnd£ssR_t
 *
ª∂y
 = (zÀnd£ssR_à*)
˝r
;

718 
ª∂y
->
zÀsR_°©e
 = 
s_Sèã
;

719 
ª∂y
->
zÀsR_îr‹Code
 = 
EC_NO_ERROR
;

722 i‡(((
zÀnd£ssC_t
 *)
˝c
)->
zÀsC_£ssi⁄ID
 !
s_Sessi⁄ID
) {

724 
ª∂y
->
zÀsR_îr‹Code
 = 
EC_ES_BAD_SESS_ID
;

726 #i‡
deföed
 
ZPORT


727 i‡(
s_£rülMsg
) {

729 ((
zlbeg£ssR_t
 *)
˝r
)->
zlbsR_îr‹Code
 = 
EC_ES_NOT_SERVER
;

733 #i‡
deföed
 
ZPORT


734 i‡(
ZLSTATE_PASS_THROUGH
 =
s_Sèã
) {

737 
zahdrö_t
 *
zaö
 = 
	`zlBuûdExã∫ÆInboundSîülMSG
(&
s_PTClõ¡Info
, (
uöt8
 *)
msg
, (
zlmhdr_t
Ë+ (
zÀnd£ssC_t
));

739 i‡(
zaö
) {

740 i‡(
SUCCESS
 !
	`oßl_°¨t_timîEx
(
ﬂd_≠p_èskId
, 
ZLOAD_XFER_DONE_EVT
, 
SDR_WAIT_TO
))

742 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_XFER_DONE_EVT
);

745 
s_PTClõ¡Info
 = *
MSGpkt
;

746 
	`zlSídSîül
((
uöt8
 *)
zaö
, 
SIZEOF_ZAIN_HDR
 + (
zlmhdr_t
Ë+ (
zÀnd£ssC_t
));

747 
	`oßl_mem_‰ì
(
zaö
);

751 
ª∂y
->
zÀsR_îr‹Code
 = 
EC_ES_NO_MEM
;

755 i‡(
s_Sèã
 =
ZLSTATE_SERVER
) {

757 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_XFER_DONE_EVT
);

762 
ª∂y
->
zÀsR_îr‹Code
 = 
EC_ES_NOT_SERVER
;

766 
∑ylSize
 = (
zÀnd£ssR_t
);

769 
ZLMSGID_CLIENT_CMD
:

771 
zl˛õ¡R_t
 *
ª∂y
 = (zl˛õ¡R_à*)
˝r
;

773 
ª∂y
->
zl˛R_îr‹Code
 = 
EC_NO_ERROR
;

774 
∑ylSize
 = (
zl˛õ¡R_t
);

775 
ª∂y
->
zl˛R_°©e
 = 
s_Sèã
;

777 #i‡
deföed
 
ZPORT


780 i‡(!
s_£rülMsg
) {

781 
ª∂y
->
zl˛R_îr‹Code
 = 
EC_CL_NOT_CLIENT
;

785 i‡(!
	`HÆAdcCheckVdd
(
VDD_MIN_OAD
))

787 
ª∂y
->
zl˛R_îr‹Code
 = 
EC_BAD_VDD
;

790 i‡(
s_Sèã
 !
ZLSTATE_IDLE
) {

791 i‡(!
	`oßl_memcmp
(
s_˛õ¡Info
, 
˝c
, (
zl˛õ¡C_t
))) {

792 
ª∂y
->
zl˛R_îr‹Code
 = 
EC_CL_NOT_IDLE
;

795 #i‡(
HAL_OAD_XNV_IS_INT
 && ((
HAL_OAD_DL_OSET
 % 
HAL_FLASH_PAGE_SIZE
) != 0))

799 i‡(
	`zlEø£HÆfPage
(Ë!
SUCCESS
)

801 
ª∂y
->
zl˛R_îr‹Code
 = 
EC_CL_NO_MEM
;

805 
zl˛õ¡C_t
 *
cmd
 = (zl˛õ¡C_à*)
˝c
;

806 
uöt8
 *
˝
;

810 
˝
 = 
	`oßl_mem_Æloc
((
zl˛õ¡C_t
)+(
zlmhdr_t
)+(
zlsdC_t
));

811 i‡(!
˝
) {

813 
ª∂y
->
zl˛R_îr‹Code
 = 
EC_CL_NO_MEM
;

818 
s_˛õ¡Info
 = (
zl˛õ¡C_t
 *)
˝
;

819 
s_sdcmd
 = (
zlmhdr_t
 *)(
˝
+(
zl˛õ¡C_t
));

820 
s_sd˝aylﬂd
 = (
zlsdC_t
 *)(
˝
+(
zl˛õ¡C_t
)+(
zlmhdr_t
));

826 
	`oßl_mem˝y
(
s_˛õ¡Info
, 
˝c
, (
zl˛õ¡C_t
));

829 
d°Addr
.
addrMode
 = 
afAddr16Bô
;

830 
d°Addr
.
ídPoöt
 = 
cmd
->
zl˛C_ídp
;

831 
	`oßl_mem˝y
(&
d°Addr
.
addr
.
sh‹tAddr
, &
cmd
->
zl˛C_nwk
, (
uöt16
));

834 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_IS_CLIENT_EVT
);

840 
ZLMSGID_CODE_ENABLE
:

842 
zl˚R_t
 *
ª∂y
 = (zl˚R_à*)
˝r
;

844 
∑ylSize
 = (
zl˚R_t
);

846 
ª∂y
->
zl˚R_°©e
 = 
s_Sèã
;

848 #i‡
deföed
 
ZPORT


850 i‡(!
s_£rülMsg
) {

851 
ª∂y
->
zl˚R_îr‹Code
 = 
EC_CE_NOT_CLIENT
;

855 i‡(
s_Sèã
 !
ZLSTATE_IDLE
) {

856 
ª∂y
->
zl˚R_îr‹Code
 = 
EC_CE_NOT_IDLE
;

861 
uöt8
 
dlImagePªambÀO£t
;

862 
	`oßl_nv_ªad
(
PREAMBLE_NV_ID
, 0, 1, &
dlImagePªambÀO£t
);

863 
	`HÆOADRód
(
dlImagePªambÀO£t
,(
uöt8
 *)&
¥ómbÀ
,(
¥ómbÀ_t
),
HAL_OAD_DL
);

864 i‡(
¥ómbÀ
.
vîs
 != 0xFFFF) {

866 i‡(!
	`memcmp
(
˝c
, (
uöt8
 *)&
¥ómbÀ
.
vîs
, 
ZL_IMAGE_ID_LENGTH
)) {

867 i‡(!
	`HÆAdcCheckVdd
(
VDD_MIN_OAD
))

869 
ª∂y
->
zl˚R_îr‹Code
 = 
EC_BAD_VDD
;

873 i‡(
SUCCESS
 =
	`HÆOADChkDL
(
dlImagePªambÀO£t
)) {

875 i‡(
SUCCESS
 !
	`oßl_°¨t_timîEx
(
ﬂd_≠p_èskId
, 
ZLOAD_CODE_ENABLE_EVT
,

876 
SDC_WAIT_TO_ENABLE
))

878 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_CODE_ENABLE_EVT
);

880 
ª∂y
->
zl˚R_îr‹Code
 = 
EC_NO_ERROR
;

883 
ª∂y
->
zl˚R_îr‹Code
 = 
EC_CE_IMAGE_INSANE
;

888 
ª∂y
->
zl˚R_îr‹Code
 = 
EC_CE_NO_MATCH
;

893 
ª∂y
->
zl˚R_îr‹Code
 = 
EC_CE_NO_IMAGE
;

899 
ZLMSGID_SEND_DATA
:

900 #i‡
deföed
 
ZPORT


902 
zlsdR_t
 *
ª∂y
 = (zlsdR_à*)
˝r
;

904 
∑ylSize
 = (
zlsdR_t
);

907 i‡(
s_£rülMsg
) {

908 
ª∂y
->
zlsdR_îr‹Code
 = 
EC_SD_NOT_SERVER
;

910 i‡(
ZLSTATE_PASS_THROUGH
 =
s_Sèã
) {

912 i‡(
s_PTClõ¡Info
.
§cAddr
.
addr
.
sh‹tAddr
 !
MSGpkt
->srcAddr.addr.shortAddr) {

914 
ª∂y
->
zlsdR_îr‹Code
 = 
EC_SD_NOT_CLIENT
;

916 i‡(((
zlsdC_t
 *)
˝c
)->
zlsdC_£ssi⁄ID
 !
s_Sessi⁄ID
) {

917 
ª∂y
->
zlsdR_îr‹Code
 = 
EC_SD_BAD_SESS_ID
;

920 
zahdrö_t
 *
zaö
 = 
	`zlBuûdExã∫ÆInboundSîülMSG
(&
s_PTClõ¡Info
, (
uöt8
 *)
msg
, (
zlmhdr_t
Ë+ (
zlsdC_t
));

923 i‡(
zaö
) {

924 
	`zlSídSîül
((
uöt8
 *)
zaö
, 
SIZEOF_ZAIN_HDR
 + (
zlmhdr_t
Ë+ (
zlsdC_t
));

925 
	`oßl_mem_‰ì
(
zaö
);

927 
s_PTClõ¡Info
 = *
MSGpkt
;

931 
ª∂y
->
zlsdR_îr‹Code
 = 
EC_SD_NO_MEM
;

936 
ª∂y
->
zlsdR_îr‹Code
 = 
EC_SD_NOT_SERVER
;

940 
∑ylSize
 = (
zlsdR_t
);

941 i‡(
s_Sèã
 !
ZLSTATE_SERVER
) {

945 
s_sdΩaylﬂd
->
zlsdR_°©e
 = 
s_Sèã
;

946 
buf
 = (
uöt8
 *)
s_sdª∂y
;

947 i‡(((
zlsdC_t
 *)
˝c
)->
zlsdC_£ssi⁄ID
 !
s_Sessi⁄ID
) {

948 
s_sdΩaylﬂd
->
zlsdR_îr‹Code
 = 
EC_SD_BAD_SESS_ID
;

952 
s_sdΩaylﬂd
->
zlsdR_îr‹Code
 = 
EC_NO_ERROR
;

954 
	`zlPro˚ssSDC
((
zlsdC_t
 *)
˝c
);

959 
ZLMSGID_RESET
:

960 #i‡
deföed
 
ZPORT


962 i‡(!
s_£rülMsg
) {

968 
zÃ°R_t
 *
ª∂y
 = (zÃ°R_à*)
˝r
;

970 
ª∂y
->
zÃ°R_°©e
 = 
s_Sèã
;

971 
ª∂y
->
zÃ°R_îr‹Code
 = 
EC_NO_ERROR
;

973 
∑ylSize
 = (
zÃ°R_t
);

974 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_RESET_EVT
);

984 
zlmhdr_t
 *
hdr
 = (zlmhdr_à*)
buf
;

986 
hdr
->
zlhdr_msgid
 = 
msg
->zlhdr_msgid | 
ZLMSGID_REPLY_BIT
;

987 
hdr
->
zlhdr_£qnum
 = 
msg
->zlhdr_seqnum;

988 
hdr
->
zlhdr_msgÀn
 = 
∑ylSize
;

990 #i‡
deföed
 
ZPORT


991 i‡(!
s_£rülMsg
) {

993 
	`AF_D©aReque°
–&
MSGpkt
->
§cAddr
,

994 
	`afFödEndPoötDesc
–
MSGpkt
->
ídPoöt
),

995 
MSGpkt
->
˛u°îId
,

996 (
zlmhdr_t
Ë+ 
∑ylSize
, 
buf
,

997 &
MSGpkt
->
cmd
.
TønsSeqNumbî
,

998 
AF_DISCV_ROUTE
, 
AF_DEFAULT_RADIUS
 );

999 #i‡
deföed
 
ZPORT


1001 
zahdrö_t
 *
zaö
 = 
	`zlBuûdI¡î«lInboundSîülMSG
((
uöt8
 *)
hdr
, (
zlmhdr_t
Ë+ 
∑ylSize
);

1003 i‡(
zaö
) {

1004 
	`zlSídSîül
((
uöt8
 *)
zaö
, 
SIZEOF_ZAIN_HDR
 + (
zlmhdr_t
Ë+ 
∑ylSize
);

1005 
	`oßl_mem_‰ì
(
zaö
);

1009 i‡((
buf
 !
NULL
) &&

1010 ((
msg
->
zlhdr_msgid
 !
ZLMSGID_SEND_DATA
Ë|| (
s_Sèã
 !
ZLSTATE_SERVER
)))

1012 
	`oßl_mem_‰ì
(
buf
);

1020 #i‡!
deföed
 
ZPORT


1030 
	`zlPro˚ssSDC
(
zlsdC_t
 *
cmd
)

1032 
uöt16
 
ªqPktNum
;

1033 
	`oßl_mem˝y
(&
ªqPktNum
, &
cmd
->
zlsdC_pktNum
, (
uöt16
));

1038 i‡(
s_NextPackë
 && (
ªqPktNum
 == (s_NextPacket-1))) {

1043 i‡(!
	`zlIsReqPackëNumOK
(
ªqPktNum
)) {

1044 
s_sdΩaylﬂd
->
zlsdR_îr‹Code
 = 
EC_SD_BAD_PKT_NUM
;

1049 
	`HÆOADRód
((
uöt32
)
s_NextPackë
 * 
s_blkSize
, 
s_sdΩaylﬂd
->
zlsdR_d©a
,

1050 
ZL_DATA_BLK_SIZE
*
ZL_NUM_DATA_BLKS
, 
s_ôy≥
);

1053 
	`oßl_mem˝y
(&
s_sdΩaylﬂd
->
zlsdR_pktNum
, &
ªqPktNum
, (
uöt16
));

1054 
s_NextPackë
++;

1068 
uöt8
 
	`zlIsReqPackëNumOK
(
uöt16
 
ªqNum
)

1070 i‡(
ªqNum
 >
s_NumPktGë
) {

1087 
	`ZLOADAµ_h™dÀRïly
(
afIncomögMSGPackë_t
 *
MSGpkt
, 
zlmhdr_t
 *
msg
)

1089 
uöt8
 *
˝r
;

1090 #i‡
deföed
 
ZPORT


1091 
uöt8
 
msgSize
 = 0;

1094 #i‡!
deföed
 
ZPORT


1096 i‡(
s_fú°Tx
) {

1097 
s_fú°Tx
 = 0;

1100 i‡(
msg
->
zlhdr_£qnum
 !
s_œ°TxSeqNum
) {

1103 i‡(
msg
->
zlhdr_£qnum
 =
s_œ°Sìn
) {

1108 
s_œ°Sìn
 = 
msg
->
zlhdr_£qnum
;

1111 
˝r
 = (
uöt8
 *)
msg
 + (
zlmhdr_t
);

1118 
msg
->
zlhdr_msgid
 & (0xFF ^ 
ZLMSGID_REPLY_BIT
)) {

1119 
ZLMSGID_STATUSQ
:

1120 #i‡
deföed
 
ZPORT


1121 
msgSize
 = 20;

1123 
ZLMSGID_CLIENT_CMD
:

1124 
ZLMSGID_RESET
:

1125 
ZLMSGID_CODE_ENABLE
:

1126 i‡(!
msgSize
) {

1127 
msgSize
 = 2;

1131 i‡(!
s_£rülMsg
) {

1132 
zahdrö_t
 *
zaö
 = 
	`zlBuûdExã∫ÆInboundSîülMSG
(
MSGpkt
, (
uöt8
 *)
msg
, (
zlmhdr_t
Ë+ 
msgSize
);

1134 i‡(
zaö
) {

1135 
	`zlSídSîül
((
uöt8
 *)
zaö
, 
SIZEOF_ZAIN_HDR
 + (
zlmhdr_t
Ë+ 
msgSize
);

1136 
	`oßl_mem_‰ì
(
zaö
);

1142 
ZLMSGID_SESSION_START
:

1143 #i‡
deföed
 
ZPORT


1147 i‡(!
s_£rülMsg
) {

1150 i‡(
ZLSTATE_PASS_THROUGH
 =
s_Sèã
) {

1152 
msg
->
zlhdr_£qnum
 = 
s_PTSeqNum
;

1153 
	`AF_D©aReque°
–&
s_PTClõ¡Info
.
§cAddr
,

1154 
	`afFödEndPoötDesc
–
s_PTClõ¡Info
.
ídPoöt
 ),

1155 
s_PTClõ¡Info
.
˛u°îId
,

1156 (
zlmhdr_t
Ë+ (
zlbeg£ssR_t
), (
uöt8
 *)
msg
,

1157 &
s_PTClõ¡Info
.
cmd
.
TønsSeqNumbî
,

1158 
AF_TX_OPTIONS_NONE
, 
AF_DEFAULT_RADIUS
 );

1160 i‡(((
zlbeg£ssR_t
 *)
˝r
)->
zlbsR_îr‹Code
) {

1162 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_RESET_EVT
);

1165 i‡(
ZLSTATE_CLIENT
 !
s_Sèã
) {

1172 i‡(
s_Sèã
 !
ZLSTATE_CLIENT
) {

1176 i‡(((
zlbeg£ssR_t
 *)
˝r
)->
zlbsR_îr‹Code
) {

1178 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_RESET_EVT
);

1183 
uöt32
 
imgÀn
 = ((
zlbeg£ssR_t
 *)
˝r
)->
zlbsR_imgLí
;

1185 i‡(
imgÀn
 > 
	`HÆOADAvaû
()) {

1187 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_XFER_DONE_EVT
);

1194 
s_blkSize
 = ((
zlbeg£ssR_t
 *)
˝r
)->
zlbsR_blkSize
;

1195 
s_blkSize
 *((
zlbeg£ssR_t
 *)
˝r
)->
zlbsR_numBlks
;

1198 
s_NumPktGë
 = (
imgÀn
+(
s_blkSize
-1)) / s_blkSize;

1199 
s_NextPackë
 = 0;

1201 
	`zlReque°NextD©aPackë
();

1206 
ZLMSGID_SESSION_TERM
:

1207 #i‡
deföed
 
ZPORT


1209 i‡(
s_£rülMsg
 && (
ZLSTATE_PASS_THROUGH
 =
s_Sèã
)) {

1210 
	`AF_D©aReque°
–&
s_PTClõ¡Info
.
§cAddr
,

1211 
	`afFödEndPoötDesc
–
s_PTClõ¡Info
.
ídPoöt
),

1212 
s_PTClõ¡Info
.
˛u°îId
,

1213 (
zlmhdr_t
Ë+ (
zÀnd£ssR_t
), (
uöt8
 *)
msg
,

1214 &
s_PTClõ¡Info
.
cmd
.
TønsSeqNumbî
,

1215 
AF_TX_OPTIONS_NONE
, 
AF_DEFAULT_RADIUS
 );

1217 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_XFER_DONE_EVT
);

1227 
ZLMSGID_SEND_DATA
:

1228 #i‡
deföed
 
ZPORT


1229 i‡(!
s_£rülMsg
) {

1233 i‡(
ZLSTATE_CLIENT
 =
s_Sèã
) {

1235 
	`zlPro˚ssSDR
((
zlsdR_t
 *)
˝r
);

1237 i‡(
ZLSTATE_PASS_THROUGH
 =
s_Sèã
) {

1239 
	`AF_D©aReque°
–&
s_PTClõ¡Info
.
§cAddr
,

1240 
	`afFödEndPoötDesc
–
s_PTClõ¡Info
.
ídPoöt
),

1241 
s_PTClõ¡Info
.
˛u°îId
,

1242 (
zlmhdr_t
Ë+ (
zlsdR_t
), (
uöt8
 *)
msg
,

1243 &
s_PTClõ¡Info
.
cmd
.
TønsSeqNumbî
,

1244 
AF_TX_OPTIONS_NONE
, 
AF_DEFAULT_RADIUS
 );

1248 i‡(
s_Sèã
 =
ZLSTATE_CLIENT
) {

1249 
	`zlPro˚ssSDR
((
zlsdR_t
 *)
˝r
);

1270 
	`zlPro˚ssSDR
(
zlsdR_t
 *
sdr
)

1272 
uöt16
 
tmp
;

1273 
	`oßl_mem˝y
(&
tmp
, &
sdr
->
zlsdR_pktNum
, (
uöt16
));

1276 i‡(
s_NextPackë
 > 
tmp
)

1280 i‡(
s_NextPackë
 < 
tmp
) {

1282 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_XFER_DONE_EVT
);

1285 i‡(
sdr
->
zlsdR_îr‹Code
) {

1290 i‡(!
	`HÆAdcCheckVdd
(
VDD_MIN_OAD
))

1292 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_XFER_DONE_EVT
);

1297 
	`HÆOADWrôe
((
uöt32
)
s_NextPackë
 * 
s_blkSize
, 
sdr
->
zlsdR_d©a
, s_blkSize, 
HAL_OAD_DL
);

1298 
s_NextPackë
++;

1299 
	`zlReque°NextD©aPackë
();

1312 
	`zlReque°NextD©aPackë
()

1314 i‡(
s_NextPackë
 >
s_NumPktGë
) {

1315 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_XFER_DONE_EVT
);

1317 
	`oßl_°›_timîEx
(
ﬂd_≠p_èskId
, 
ZLOAD_SDRTIMER_EVT
);

1321 #i‡
deföed
 
ZPORT


1322 
s_sd˝aylﬂd
->
zlsdC_pktNum
 = 
s_NextPackë
;

1323 
s_sdcmd
->
zlhdr_£qnum
 = ++
s_œ°SeqNum
;

1326 
zahdrö_t
 *
zaö
 = 
	`zlBuûdI¡î«lInboundSîülMSG
((
uöt8
 *)
s_sdcmd
, (
zlmhdr_t
Ë+ (
zlsdC_t
));

1328 i‡(
zaö
) {

1329 
	`zlSídSîül
((
uöt8
 *)
zaö
, 
SIZEOF_ZAIN_HDR
 + (
zlmhdr_t
Ë+ (
zlsdC_t
));

1330 
	`oßl_mem_‰ì
(
zaö
);

1334 
	`oßl_mem˝y
(&
s_sd˝aylﬂd
->
zlsdC_pktNum
, &
s_NextPackë
, (
uöt16
));

1335 
s_sdcmd
->
zlhdr_£qnum
 = ++
s_œ°TxSeqNum
;

1337 
	`zlSídComm™d
((
zlmhdr_t
Ë+ (
zlsdC_t
), (
uöt8
 *)
s_sdcmd
);

1340 i‡(
SUCCESS
 !
	`oßl_°¨t_timîEx
(
ﬂd_≠p_èskId
, 
ZLOAD_SDRTIMER_EVT
, 
SDR_WAIT_TO
))

1342 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_SDRTIMER_EVT
);

1344 
s_SDCRëryCou¡
 = 
SDC_RETRY_COUNT
;

1361 
	`zlCÀ™upOnRe£t
()

1363 #i‡!
deföed
 
ZPORT


1364 i‡(
ZLSTATE_CLIENT
 =
s_Sèã
) {

1365 
	`DO_EVENT_CALLBACK
(
ZLCB_EVENT_OADEND_CLIENT
);

1367 i‡(
ZLSTATE_SERVER
 =
s_Sèã
) {

1368 
	`DO_EVENT_CALLBACK
(
ZLCB_EVENT_OADEND_SERVER
);

1372 
	`zlRe£tSèã
();

1386 
	`zlCÀ™upOnX„rD⁄e
()

1388 #i‡
deföed
 
ZPORT


1389 i‡(
ZLSTATE_PASS_THROUGH
 =
s_Sèã
) {

1390 
s_Sèã
 = 
ZLSTATE_IDLE
;

1396 i‡(
ZLSTATE_CLIENT
 =
s_Sèã
) {

1397 
zlmhdr_t
 *
hdr
 = 
	`oßl_mem_Æloc
((zlmhdr_tË+ (
zÀnd£ssC_t
));

1399 i‡(
hdr
) {

1400 
zÀnd£ssC_t
 *
cmd
 = (zÀnd£ssC_à*)((
uöt8
 *)
hdr
 + (
zlmhdr_t
));

1402 
hdr
->
zlhdr_msgid
 = 
ZLMSGID_SESSION_TERM
;

1403 
hdr
->
zlhdr_msgÀn
 = (
zÀnd£ssC_t
);

1405 
cmd
->
zÀsC_£ssi⁄ID
 = 
s_Sessi⁄ID
;

1406 
hdr
->
zlhdr_£qnum
 = ++
s_œ°TxSeqNum
;

1408 #i‡
deföed
 
ZPORT


1410 
zahdrö_t
 *
zaö
 = 
	`zlBuûdI¡î«lInboundSîülMSG
((
uöt8
 *)
hdr
, (
zlmhdr_t
Ë+ (
zÀnd£ssC_t
));

1412 i‡(
zaö
) {

1413 
	`zlSídSîül
((
uöt8
 *)
zaö
, 
SIZEOF_ZAIN_HDR
 + (
zlmhdr_t
Ë+ (
zÀnd£ssC_t
));

1414 
	`oßl_mem_‰ì
(
zaö
);

1418 
	`zlSídComm™d
((
zlmhdr_t
Ë+ (
zÀnd£ssC_t
), (
uöt8
 *)
hdr
);

1421 
	`oßl_mem_‰ì
(
hdr
);

1424 #i‡!
deföed
 
ZPORT


1425 
	`DO_EVENT_CALLBACK
(
ZLCB_EVENT_OADEND_CLIENT
);

1428 #i‡!
deföed
 
ZPORT


1429 i‡(
ZLSTATE_SERVER
 =
s_Sèã
) {

1430 
	`DO_EVENT_CALLBACK
(
ZLCB_EVENT_OADEND_SERVER
);

1434 
	`zlRe£tSèã
();

1447 
	`zlSèπClõ¡Sessi⁄
()

1449 
uöt8
 *
buf
;

1452 i‡(
buf
=
	`oßl_mem_Æloc
((
zlmhdr_t
Ë+ (
zlbeg£ssC_t
))) {

1453 
zlmhdr_t
 *
hdr
 = (zlmhdr_à*)
buf
;

1454 
zlbeg£ssC_t
 *
cmd
 = (zlbeg£ssC_à*)((
uöt8
 *)
buf
+(
zlmhdr_t
));

1457 i‡(!
s_Sessi⁄ID
) {

1458 
uöt8
 
addr
[
Z_EXTADDR_LEN
];

1460 
	`ZMacGëReq
(
ZMacExtAddr
, 
addr
);

1461 
s_Sessi⁄ID
 = 
addr
[0];

1464 
s_Sèã
 = 
ZLSTATE_CLIENT
;

1465 
s_Sessi⁄ID
++;

1467 
hdr
->
zlhdr_msgid
 = 
ZLMSGID_SESSION_START
;

1468 
hdr
->
zlhdr_£qnum
 = ++
s_œ°TxSeqNum
;

1469 
hdr
->
zlhdr_msgÀn
 = (
zlbeg£ssC_t
);

1470 
	`oßl_mem˝y
(&
cmd
->
zlbsC_vî
, &
s_˛õ¡Info
->
zl˛C_vî
, (
uöt16
));

1471 
	`oßl_mem˝y
(&
cmd
->
zlbsC_m™u
, &
s_˛õ¡Info
->
zl˛C_m™u
, (
uöt16
));

1472 
	`oßl_mem˝y
(&
cmd
->
zlbsC_¥od
, &
s_˛õ¡Info
->
zl˛C_¥od
, (
uöt16
));

1473 
cmd
->
zlbsC_£ssi⁄ID
 = 
s_Sessi⁄ID
;

1474 
s_NextPackë
 = 0;

1477 
s_sd˝aylﬂd
->
zlsdC_£ssi⁄ID
 = 
s_Sessi⁄ID
;

1480 
s_sdcmd
->
zlhdr_msgid
 = 
ZLMSGID_SEND_DATA
;

1481 
s_sdcmd
->
zlhdr_msgÀn
 = (
zlsdC_t
);

1483 #i‡
deföed
 
ZPORT


1485 
zahdrö_t
 *
zaö
 = 
	`zlBuûdI¡î«lInboundSîülMSG
((
uöt8
 *)
hdr
, (
zlmhdr_t
Ë+ (
zlbeg£ssC_t
));

1487 i‡(
zaö
) {

1488 
	`zlSídSîül
((
uöt8
 *)
zaö
, 
SIZEOF_ZAIN_HDR
 + (
zlmhdr_t
Ë+ (
zlbeg£ssC_t
));

1489 
	`oßl_mem_‰ì
(
zaö
);

1493 i‡(
	`zlSídComm™d
((
zlmhdr_t
Ë+ (
zlbeg£ssC_t
), 
buf
))

1498 
	`oßl_mem_‰ì
(
buf
);

1499 
	`DO_EVENT_CALLBACK
(
ZLCB_EVENT_OADBEGIN_CLIENT
);

1503 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_RESET_EVT
);

1509 #i‡!
deföed
 
ZPORT


1523 
uöt8
 
	`zlSídComm™d
(uöt8 
Àngth
, uöt8 *
buf
)

1525 
uöt8
 
rc
;

1527 
rc
 = 
	`AF_D©aReque°
–&
d°Addr
,

1528 
	`afFödEndPoötDesc
–
OAD_ïDesc
.
ídPoöt
 ),

1529 
OAD_CLUSTERID_CS
,

1530 
Àngth
, 
buf
,

1531 &
å™sId
,

1532 
AF_DISCV_ROUTE
, 
DEF_NWK_RADIUS
 );

1534  
rc
;

1548 
	`zlRe£ndSDC
()

1550 i‡(
s_Sèã
 !
ZLSTATE_CLIENT
) {

1555 i‡(--
s_SDCRëryCou¡
) {

1556 #i‡
deföed
 
ZPORT


1557 
s_sdcmd
->
zlhdr_£qnum
 = ++
s_œ°SeqNum
;

1559 
zahdrö_t
 *
zaö
 = 
	`zlBuûdI¡î«lInboundSîülMSG
((
uöt8
 *)
s_sdcmd
, (
zlmhdr_t
Ë+ (
zlsdC_t
));

1561 i‡(
zaö
) {

1562 
	`zlSídSîül
((
uöt8
 *)
zaö
, 
SIZEOF_ZAIN_HDR
 + (
zlmhdr_t
Ë+ (
zlsdC_t
));

1563 
	`oßl_mem_‰ì
(
zaö
);

1569 
	`zlSídComm™d
((
zlmhdr_t
Ë+ (
zlsdC_t
), (
uöt8
 *)
s_sdcmd
);

1572 i‡(
SUCCESS
 !
	`oßl_°¨t_timîEx
(
ﬂd_≠p_èskId
, 
ZLOAD_SDRTIMER_EVT
, 
SDR_WAIT_TO
))

1574 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_SDRTIMER_EVT
);

1579 
	`oßl_£t_evít
(
ﬂd_≠p_èskId
, 
ZLOAD_XFER_DONE_EVT
);

1585 #i‡!
deföed
 
ZPORT


1601 
	`ﬂdAµRegi°îCB
((*
pCBFun˘i⁄
)(
uöt16
), uöt16 
evítMask
)

1603 
s_pCÆlback
 = 
pCBFun˘i⁄
;

1604 
s_evítMask
 = 
evítMask
;

1625 
	`zlRe£tSèã
()

1627 
	`oßl_°›_timîEx
(
ﬂd_≠p_èskId
, 
ZLOAD_SDRTIMER_EVT
);

1629 i‡(
s_sdª∂y
)

1631 
	`oßl_mem_‰ì
(
s_sdª∂y
);

1632 
s_sdª∂y
 = 
NULL
;

1635 i‡(
s_˛õ¡Info
)

1637 
	`oßl_mem_‰ì
(
s_˛õ¡Info
);

1638 
s_˛õ¡Info
 = 
NULL
;

1641 
s_Sèã
 = 
ZLSTATE_IDLE
;

1642 
s_NextPackë
 = 0;

1643 
s_NumPktGë
 = 0;

1646 #i‡
deföed
 
ZPORT


1658 
	`ZLOADAµ_SîülMesßgeMSGCB
(
zahdrout_t
 *
zaout
)

1660 
zlmhdr_t
 *
zlhdr
 = (zlmhdr_à*)
zaout
->
z≠roxy_∑ylﬂd
;

1663 i‡(
zaout
->
z≠roxy_nwkAddr
 =
s_myNwkAddr
) {

1665 i‡(
zlhdr
->
zlhdr_msgid
 & 
ZLMSGID_REPLY_BIT
) {

1666 
	`ZLOADAµ_h™dÀRïly
(
NULL
, 
zlhdr
);

1669 
	`ZLOADAµ_h™dÀComm™d
(
NULL
, 
zlhdr
);

1674 
	`zlZArchôe˘ProxyMsg
(
zaout
);

1691 
	`zlSídSîül
(
uöt8
 *
buf
, uöt8 
Àn
)

1693 
uöt8
 *
nbuf
;

1695 i‡((
nbuf
=
	`oßl_mem_Æloc
(
Àn
+1))) {

1696 
	`oßl_mem˝y
(
nbuf
+1, 
buf
, 
Àn
);

1697 *
nbuf
 = 
OAD_ENDPOINT
;

1698 #i‡!
	`deföed
(
ZTOOL_SUPPORT
)

1699 
	`MTPro˚ssAµR•Msg
(
nbuf
, 
Àn
 + 1);

1702 
	`MTPro˚ssAµR•Msg
(
nbuf
, 81);

1704 
	`oßl_mem_‰ì
(
nbuf
);

1719 
	`zlZArchôe˘ProxyMsg
(
zahdrout_t
 *
öfo
)

1721 
afAddrTy≥_t
 
èddr
;

1722 
zlmhdr_t
 *
zlhdr
 = (zlmhdr_à*)
öfo
->
z≠roxy_∑ylﬂd
;

1725 
zlhdr
->
zlhdr_msgid
) {

1726 
ZLMSGID_SESSION_START
:

1727 
ZLMSGID_SESSION_TERM
:

1728 
ZLMSGID_SEND_DATA
:

1733 
èddr
.
addrMode
 = 
afAddr16Bô
;

1734 
èddr
.
ídPoöt
 = 
öfo
->
z≠roxy_ídp
;

1735 
èddr
.
addr
.
sh‹tAddr
 = 
öfo
->
z≠roxy_nwkAddr
;

1737 
	`AF_D©aReque°
–&
èddr
,

1738 
	`afFödEndPoötDesc
–
öfo
->
z≠roxy_ídp
 ),

1739 
öfo
->
z≠roxy_Clu°îID
,

1740 
öfo
->
z≠roxy_msgÀn
, info->
z≠roxy_∑ylﬂd
,

1741 &
å™sId
,

1742 
AF_TX_OPTIONS_NONE
, 
DEF_NWK_RADIUS
 );

1750 
uöt8
 
	`zlPassOnSèπSessi⁄OK
(uöt8 *
msg
)

1752 
zahdrö_t
 *
zamsgö
;

1755 
zamsgö
 = 
	`zlBuûdExã∫ÆInboundSîülMSG
(&
s_PTClõ¡Info
, 
msg
, (
zlmhdr_t
Ë+ (
zlbeg£ssC_t
));

1757 i‡(!
zamsgö
) {

1761 
	`zlSídSîül
((
uöt8
 *)
zamsgö
, 
SIZEOF_ZAIN_HDR
 + (
zlmhdr_t
Ë+ (
zlbeg£ssC_t
));

1763 
	`oßl_mem_‰ì
(
zamsgö
);

1773 
zahdrö_t
 *
	`zlBuûdExã∫ÆInboundSîülMSG
(
afIncomögMSGPackë_t
 *
addªssInfo
, 
uöt8
 *
zlmsg
, uöt8 
Àn
)

1775 
zahdrö_t
 *
zamsgö
;

1778 
zamsgö
 = (
zahdrö_t
 *)
	`oßl_mem_Æloc
(
SIZEOF_ZAIN_HDR
 + 
Àn
);

1780 i‡(!
zamsgö
) {

1784 
zamsgö
->
z≠roxy_nwkAddr
 = 
addªssInfo
->
§cAddr
.
addr
.
sh‹tAddr
;

1785 
zamsgö
->
z≠roxy_ídp
 = 
addªssInfo
->
ídPoöt
;

1786 
zamsgö
->
z≠roxy_Clu°îID
 = 
addªssInfo
->
˛u°îId
;

1787 
zamsgö
->
z≠roxy_msgÀn
 = 
Àn
;

1789 
	`oßl_mem˝y
(
zamsgö
->
z≠roxy_∑ylﬂd
, 
zlmsg
, 
Àn
);

1791  
zamsgö
;

1794 
zahdrö_t
 *
	`zlBuûdI¡î«lInboundSîülMSG
(
uöt8
 *
zlmsg
, uöt8 
Àn
)

1796 
zahdrö_t
 *
zamsgö
;

1799 
zamsgö
 = (
zahdrö_t
 *)
	`oßl_mem_Æloc
(
SIZEOF_ZAIN_HDR
 + 
Àn
);

1801 i‡(!
zamsgö
) {

1805 
zamsgö
->
z≠roxy_nwkAddr
 = 
s_myNwkAddr
;

1806 
zamsgö
->
z≠roxy_ídp
 = 
OAD_ENDPOINT
;

1807 
zamsgö
->
z≠roxy_Clu°îID
 = 
OAD_CLUSTERID_CS
;

1808 
zamsgö
->
z≠roxy_msgÀn
 = 
Àn
;

1810 
	`oßl_mem˝y
(
zamsgö
->
z≠roxy_∑ylﬂd
, 
zlmsg
, 
Àn
);

1812  
zamsgö
;

1829 
	`zlH™dÀKeys
(
uöt8
 
shi·
, uöt8 
keys
)

1832 i‡–
shi·
 )

1834 i‡–
keys
 & 
HAL_KEY_SW_1
 )

1837 i‡–
keys
 & 
HAL_KEY_SW_2
 )

1840 i‡–
keys
 & 
HAL_KEY_SW_3
 )

1843 i‡–
keys
 & 
HAL_KEY_SW_4
 )

1849 i‡–
keys
 & 
HAL_KEY_SW_1
 )

1851 
mtxMode
 = 
TRUE
;

1853 i‡–
keys
 & 
HAL_KEY_SW_2
 )

1856 i‡–
keys
 & 
HAL_KEY_SW_3
 )

1858 
mtxMode
 = 
FALSE
;

1860 i‡–
keys
 & 
HAL_KEY_SW_4
 )

1866 #i‡(
HAL_OAD_XNV_IS_INT
 && ((
HAL_OAD_DL_OSET
 % 
HAL_FLASH_PAGE_SIZE
) != 0))

1870 
Sètus_t
 
	`zlEø£HÆfPage
()

1872 c⁄° 
uöt16
 
hPgSz
 = 
HAL_FLASH_PAGE_SIZE
 / 2;

1874 c⁄° 
uöt32
 
addr
 = 0L - 
hPgSz
;

1875 
uöt8
 *
pBuf
 = 
	`oßl_mem_Æloc
(
hPgSz
);

1877 i‡(
NULL
 =
pBuf
)

1879  
FAILURE
;

1882 
	`HÆXNVRód
(
addr
, 
pBuf
, 
hPgSz
);

1884 
	`HÆXNVWrôe
(
addr
, 
pBuf
, 
hPgSz
);

1885 
	`oßl_mem_‰ì
(
pBuf
);

1886  
SUCCESS
;

1890 #¥agm®
düg_deÁu…
=
Pa039


	@Projects/zstack/Utilities/OAD/Source/oad_app.h

39 #i‚de‡
OAD_APP_H


40 
	#OAD_APP_H


	)

42 #ifde‡
__˝lu•lus


52 
	~"hÆ_ﬂd.h
"

53 
	~"hÆ_ty≥s.h
"

65 
	#OAD_PROFILE_ID
 0xC003

	)

67 
	#OAD_CLUSTERID_CS
 0x0001

68 
	#OAD_CLUSTER_CNT
 2

	)

69 
	#OAD_DEVICEID
 0x0001

	)

70 
	#OAD_DEVICE_VERSION
 0

	)

71 
	#OAD_FLAGS
 0

	)

73 
	#OAD_ENDPOINT
 200

	)

75 
	#OAD_EVT_TIMER
 0x0001

	)

78 
	#ZLMSGID_STATUSQ
 ((
uöt8
Ë0x01)

	)

79 
	#ZLMSGID_SESSION_START
 ((
uöt8
Ë0x02)

	)

80 
	#ZLMSGID_SESSION_TERM
 ((
uöt8
Ë0x03)

	)

81 
	#ZLMSGID_CLIENT_CMD
 ((
uöt8
Ë0x04)

	)

82 
	#ZLMSGID_CODE_ENABLE
 ((
uöt8
Ë0x05)

	)

83 
	#ZLMSGID_SEND_DATA
 ((
uöt8
Ë0x06)

	)

84 
	#ZLMSGID_RESET
 ((
uöt8
Ë0x07)

	)

86 
	#ZLMSGID_REPLY_BIT
 ((
uöt8
Ë0x80)

	)

89 
	#ZL_DATA_BLK_SIZE
 8

	)

90 
	#ZL_NUM_DATA_BLKS
 4

	)

93 
	#ZLOAD_CAPABILTIES
 (0)

	)

94 
	#ZLOAD_PROTOCOL_VERSION
 (1)

	)

97 
	#ZLOAD_CODE_ENABLE_EVT
 0x0001

	)

98 
	#ZLOAD_IS_CLIENT_EVT
 0x0002

	)

99 
	#ZLOAD_XFER_DONE_EVT
 0x0004

	)

100 
	#ZLOAD_RESET_EVT
 0x0008

	)

101 
	#ZLOAD_SDRTIMER_EVT
 0x0010

	)

102 
	#ZLOAD_RESET_BOARD_EVT
 0x0020

	)

105 
	#ZLSTATE_IDLE
 (1)

	)

106 
	#ZLSTATE_CLIENT
 (2)

	)

107 
	#ZLSTATE_SERVER
 (3)

	)

108 
	#ZLSTATE_PASS_THROUGH
 (4)

	)

109 
	#ZLSTATE_SUBSTATE_NONE
 (1)

	)

110 
	#ZLSTATE_SUBSTATE_XFER_DONE
 (2)

	)

115 
	#EC_NO_ERROR
 ((
uöt8
Ë0x00)

	)

116 
	#EC_BAD_VDD
 ((
uöt8
) 0xDD)

117 

	)

119 
	#EC_BS_NOT_IDLE
 ((
uöt8
Ë0x21)

	)

120 
	#EC_BS_NO_MATCHES
 ((
uöt8
Ë0x22)

	)

121 
	#EC_BS_NO_MEM
 ((
uöt8
Ë0x23)

	)

122 
	#EC_BS_NOT_SERVER
 ((
uöt8
Ë0x24)

	)

124 
	#EC_ES_BAD_SESS_ID
 ((
uöt8
Ë0x31)

	)

125 
	#EC_ES_NOT_SERVER
 ((
uöt8
Ë0x32)

	)

126 
	#EC_ES_NO_MEM
 ((
uöt8
Ë0x33)

	)

128 
	#EC_CL_NOT_IDLE
 ((
uöt8
Ë0x41)

	)

129 
	#EC_CL_NO_MEM
 ((
uöt8
Ë0x42)

	)

130 
	#EC_CL_NOT_CLIENT
 ((
uöt8
Ë0x43)

	)

132 
	#EC_CE_NO_IMAGE
 ((
uöt8
Ë0x51)

	)

133 
	#EC_CE_NO_MATCH
 ((
uöt8
Ë0x52)

	)

134 
	#EC_CE_NOT_IDLE
 ((
uöt8
Ë0x53)

	)

135 
	#EC_CE_IMAGE_INSANE
 ((
uöt8
Ë0x54)

	)

136 
	#EC_CE_NOT_CLIENT
 ((
uöt8
Ë0x55)

	)

138 
	#EC_SD_NOT_SERVER
 ((
uöt8
Ë0x61)

	)

139 
	#EC_SD_BAD_SESS_ID
 ((
uöt8
Ë0x62)

	)

140 
	#EC_SD_BAD_PKT_NUM
 ((
uöt8
Ë0x63)

	)

141 
	#EC_SD_NO_BEG_SESS
 ((
uöt8
Ë0x64)

	)

142 
	#EC_SD_NOT_CLIENT
 ((
uöt8
Ë0x65)

	)

143 
	#EC_SD_NO_MEM
 ((
uöt8
Ë0x66)

	)

146 
	#PREAMBLE_DL
 ((
uöt8
Ë1)

	)

147 
	#PREAMBLE_OP
 ((
uöt8
Ë2)

	)

148 
	#ZL_IMAGE_ID_LENGTH
 (6)

	)

149 
	#SERIAL_SERVER_ADDRESS
 (0xFFFE)

	)

157 
PACK_1


159 
uöt8
 
zlhdr_msgid
;

160 
uöt8
 
zlhdr_£qnum
;

161 
uöt8
 
zlhdr_msgÀn
;

162 } 
	tzlmhdr_t
;

168 
PACK_1


170 
uöt8
 
zlsqR_°©e
;

171 
uöt8
 
zlsqR_îr‹Code
;

172 
uöt8
 
zlsqR_PrŸocﬁVîsi⁄
;

173 
uöt8
 
zlsqR_ˇ∑bûtõs
;

174 
uöt16
 
zlsqR_›Vî
;

175 
uöt16
 
zlsqR_›M™u
;

176 
uöt16
 
zlsqR_›Prod
;

177 
uöt16
 
zlsqR_dlVî
;

178 
uöt16
 
zlsqR_dlM™u
;

179 
uöt16
 
zlsqR_dlProd
;

180 
uöt16
 
zlsqR_curPkt
;

181 
uöt16
 
zlsqR_tŸPkt
;

182 } 
	tzl°©usR_t
;

186 
PACK_1


188 
uöt16
 
zlbsC_vî
;

189 
uöt16
 
zlbsC_m™u
;

190 
uöt16
 
zlbsC_¥od
;

191 
uöt8
 
zlbsC_£ssi⁄ID
;

192 } 
	tzlbeg£ssC_t
;

195 
PACK_1


197 
uöt8
 
zlbsR_°©e
;

198 
uöt8
 
zlbsR_îr‹Code
;

199 
uöt32
 
zlbsR_imgLí
;

200 
uöt8
 
zlbsR_blkSize
;

201 
uöt8
 
zlbsR_numBlks
;

202 
uöt8
 
zlbsR_¥ómbÀOff£t
;

203 } 
	tzlbeg£ssR_t
;

207 
PACK_1


209 
uöt8
 
zÀsC_£ssi⁄ID
;

210 } 
	tzÀnd£ssC_t
;

213 
PACK_1


215 
uöt8
 
zÀsR_°©e
;

216 
uöt8
 
zÀsR_îr‹Code
;

217 } 
	tzÀnd£ssR_t
;

221 
PACK_1


223 
uöt16
 
zl˛C_vî
;

224 
uöt16
 
zl˛C_m™u
;

225 
uöt16
 
zl˛C_¥od
;

226 
uöt8
 
zl˛C_IEEE
[
Z_EXTADDR_LEN
];

227 
uöt16
 
zl˛C_nwk
;

228 
uöt8
 
zl˛C_ídp
;

229 } 
	tzl˛õ¡C_t
;

232 
PACK_1


234 
uöt8
 
zl˛R_°©e
;

235 
uöt8
 
zl˛R_îr‹Code
;

236 } 
	tzl˛õ¡R_t
;

240 
PACK_1


242 
uöt16
 
zl˚C_vî
;

243 
uöt16
 
zl˚C_m™u
;

244 
uöt16
 
zl˚C_¥od
;

245 } 
	tzl˚C_t
;

248 
PACK_1


250 
uöt8
 
zl˚R_°©e
;

251 
uöt8
 
zl˚R_îr‹Code
;

252 } 
	tzl˚R_t
;

256 
PACK_1


258 
uöt16
 
zlsdC_pktNum
;

259 
uöt8
 
zlsdC_£ssi⁄ID
;

260 } 
	tzlsdC_t
;

263 
PACK_1


265 
uöt8
 
zlsdR_°©e
;

266 
uöt8
 
zlsdR_îr‹Code
;

267 
uöt16
 
zlsdR_pktNum
;

268 
uöt8
 
zlsdR_d©a
[
ZL_DATA_BLK_SIZE
 * 
ZL_NUM_DATA_BLKS
];

269 } 
	tzlsdR_t
;

275 
PACK_1


277 
uöt8
 
zÃ°R_°©e
;

278 
uöt8
 
zÃ°R_îr‹Code
;

279 } 
	tzÃ°R_t
;

285 
zl°©usR_t
 
°©usq
;

286 
zlbeg£ssR_t
 
begSess
;

287 
zÀnd£ssR_t
 
ídSess
;

288 
zl˛õ¡R_t
 
˛õ¡
;

289 
zl˚R_t
 
íabÀ
;

290 
zÃ°R_t
 
ª£t
;

291 } 
	tzÃïly_t
;

298 
uöt8
 
ﬂd_≠p_èskId
;

321 
ﬂdAµInô
(
uöt8
 
id
);

340 
uöt16
 
ﬂdAµEvt
(
uöt8
 
id
, uöt16 
evts
);

357 
ﬂdAµRegi°îCB
((*
pCBFun˘i⁄
)(
uöt16
), uöt16 
evítMask
);

362 #ifde‡
__˝lu•lus


	@Projects/zstack/Utilities/OAD/Source/oad_preamble.h

44 #i‚de‡
ZOAD_PREAMBLE_H


45 
	#ZOAD_PREAMBLE_H


	)

47 
	~"hÆ_ty≥s.h
"

49 
	#PREAMBLE_MAGIC1
 0xA5

	)

50 
	#PREAMBLE_MAGIC2
 0x5A

	)

52 #i‡
deföed
(
ZDO_COORDINATOR
)

53 
	#HAL_OAD_VERS
 ((
uöt16
Ë0xC000)

	)

54 
	#HAL_OAD_MANU
 ((
uöt16
Ë0xF8F8)

	)

55 
	#HAL_OAD_PROD
 ((
uöt16
Ë0x00AD)

	)

57 #ñi‡
deföed
(
RTR_NWK
)

58 
	#HAL_OAD_VERS
 ((
uöt16
Ë0x4000)

	)

59 
	#HAL_OAD_MANU
 ((
uöt16
Ë0xF8F8)

	)

60 
	#HAL_OAD_PROD
 ((
uöt16
Ë0x00AD)

	)

63 
	#HAL_OAD_VERS
 ((
uöt16
Ë0x1000)

	)

64 
	#HAL_OAD_MANU
 ((
uöt16
Ë0xF8F8)

	)

65 
	#HAL_OAD_PROD
 ((
uöt16
Ë0x00AD)

	)

	@Projects/zstack/Utilities/SerialApp/Source/OSAL_SerialApp.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"SîülAµ.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
SîülAµ_Pro˚ssEvít


90 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

91 
uöt16
 *
	gèsksEvíts
;

106 
	$oßlInôTasks
( )

108 
uöt8
 
èskID
 = 0;

110 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

111 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

113 
	`macTaskInô
–
èskID
++ );

114 
	`nwk_öô
–
èskID
++ );

115 
	`HÆ_Inô
–
èskID
++ );

116 #i‡
	`deföed
–
MT_TASK
 )

117 
	`MT_TaskInô
–
èskID
++ );

119 
	`APS_Inô
–
èskID
++ );

120 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

121 
	`APSF_Inô
–
èskID
++ );

123 
	`ZDAµ_Inô
–
èskID
++ );

124 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

125 
	`ZDNwkMgr_Inô
–
èskID
++ );

127 
	`SîülAµ_Inô
–
èskID
 );

128 
	}
}

	@Projects/zstack/Utilities/SerialApp/Source/SerialApp.c

62 
	~"AF.h
"

63 
	~"OnBﬂrd.h
"

64 
	~"OSAL_Tasks.h
"

65 
	~"SîülAµ.h
"

66 
	~"ZDAµ.h
"

67 
	~"ZDObje˘.h
"

68 
	~"ZDProfûe.h
"

70 
	~"hÆ_drivîs.h
"

71 
	~"hÆ_key.h
"

72 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

73 
	~"hÆ_lcd.h
"

75 
	~"hÆ_Àd.h
"

76 
	~"hÆ_u¨t.h
"

86 #i‡!
deföed
–
SERIAL_APP_PORT
 )

87 
	#SERIAL_APP_PORT
 0

	)

90 #i‡!
deföed
–
SERIAL_APP_BAUD
 )

91 
	#SERIAL_APP_BAUD
 
HAL_UART_BR_38400


	)

96 #i‡!
deföed
–
SERIAL_APP_THRESH
 )

97 
	#SERIAL_APP_THRESH
 64

	)

100 #i‡!
deföed
–
SERIAL_APP_RX_SZ
 )

101 
	#SERIAL_APP_RX_SZ
 128

	)

104 #i‡!
deföed
–
SERIAL_APP_TX_SZ
 )

105 
	#SERIAL_APP_TX_SZ
 128

	)

109 #i‡!
deföed
–
SERIAL_APP_IDLE
 )

110 
	#SERIAL_APP_IDLE
 6

	)

114 #i‡!
deföed
–
SERIAL_APP_LOOPBACK
 )

115 
	#SERIAL_APP_LOOPBACK
 
FALSE


	)

119 #i‡!
deföed
–
SERIAL_APP_TX_MAX
 )

120 
	#SERIAL_APP_TX_MAX
 80

	)

123 
	#SERIAL_APP_RSP_CNT
 4

	)

126 c⁄° 
cId_t
 
	gSîülAµ_Clu°îLi°
[
SERIALAPP_MAX_CLUSTERS
] =

128 
SERIALAPP_CLUSTERID1
,

129 
SERIALAPP_CLUSTERID2


132 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gSîülAµ_Sim∂eDesc
 =

134 
SERIALAPP_ENDPOINT
,

135 
SERIALAPP_PROFID
,

136 
SERIALAPP_DEVICEID
,

137 
SERIALAPP_DEVICE_VERSION
,

138 
SERIALAPP_FLAGS
,

139 
SERIALAPP_MAX_CLUSTERS
,

140 (
cId_t
 *)
SîülAµ_Clu°îLi°
,

141 
SERIALAPP_MAX_CLUSTERS
,

142 (
cId_t
 *)
SîülAµ_Clu°îLi°


145 c⁄° 
ídPoötDesc_t
 
	gSîülAµ_ïDesc
 =

147 
SERIALAPP_ENDPOINT
,

148 &
SîülAµ_TaskID
,

149 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
SîülAµ_Sim∂eDesc
,

150 
noL©ícyReqs


161 
uöt8
 
	gSîülAµ_TaskID
;

175 
uöt8
 
	gSîülAµ_MsgID
;

177 
afAddrTy≥_t
 
	gSîülAµ_TxAddr
;

178 
uöt8
 
	gSîülAµ_TxSeq
;

179 
uöt8
 
	gSîülAµ_TxBuf
[
SERIAL_APP_TX_MAX
+1];

180 
uöt8
 
	gSîülAµ_TxLí
;

182 
afAddrTy≥_t
 
	gSîülAµ_RxAddr
;

183 
uöt8
 
	gSîülAµ_RxSeq
;

184 
uöt8
 
	gSîülAµ_R•Buf
[
SERIAL_APP_RSP_CNT
];

190 
SîülAµ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

191 
SîülAµ_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

192 
SîülAµ_Pro˚ssMSGCmd
–
afIncomögMSGPackë_t
 *
pkt
 );

193 
SîülAµ_Síd
();

194 
SîülAµ_Re•
();

195 
SîülAµ_CÆlBack
(
uöt8
 
p‹t
, uöt8 
evít
);

206 
	$SîülAµ_Inô
–
uöt8
 
èsk_id
 )

208 
hÆUARTCfg_t
 
u¨tC⁄fig
;

210 
SîülAµ_TaskID
 = 
èsk_id
;

211 
SîülAµ_RxSeq
 = 0xC3;

213 
	`afRegi°î
–(
ídPoötDesc_t
 *)&
SîülAµ_ïDesc
 );

215 
	`Regi°îF‹Keys
–
èsk_id
 );

217 
u¨tC⁄fig
.
c⁄figuªd
 = 
TRUE
;

218 
u¨tC⁄fig
.
baudR©e
 = 
SERIAL_APP_BAUD
;

219 
u¨tC⁄fig
.
ÊowC⁄åﬁ
 = 
TRUE
;

220 
u¨tC⁄fig
.
ÊowC⁄åﬁThªshﬁd
 = 
SERIAL_APP_THRESH
;

221 
u¨tC⁄fig
.
rx
.
maxBufSize
 = 
SERIAL_APP_RX_SZ
;

222 
u¨tC⁄fig
.
tx
.
maxBufSize
 = 
SERIAL_APP_TX_SZ
;

223 
u¨tC⁄fig
.
idÀTimeout
 = 
SERIAL_APP_IDLE
;

224 
u¨tC⁄fig
.
ötE«bÀ
 = 
TRUE
;

225 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
SîülAµ_CÆlBack
;

226 
	`HÆUARTO≥n
 (
SERIAL_APP_PORT
, &
u¨tC⁄fig
);

228 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

229 
	`HÆLcdWrôeSåög
–"SîülAµ", 
HAL_LCD_LINE_2
 );

232 
	`ZDO_Regi°îF‹ZDOMsg
–
SîülAµ_TaskID
, 
End_Devi˚_Böd_r•
 );

233 
	`ZDO_Regi°îF‹ZDOMsg
–
SîülAµ_TaskID
, 
M©ch_Desc_r•
 );

234 
	}
}

246 
UINT16
 
	$SîülAµ_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
UINT16
 
evíts
 )

248 ()
èsk_id
;

250 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

252 
afIncomögMSGPackë_t
 *
MSGpkt
;

254  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
SîülAµ_TaskID
 )) )

256  
MSGpkt
->
hdr
.
evít
 )

258 
ZDO_CB_MSG
:

259 
	`SîülAµ_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

262 
KEY_CHANGE
:

263 
	`SîülAµ_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

266 
AF_INCOMING_MSG_CMD
:

267 
	`SîülAµ_Pro˚ssMSGCmd
–
MSGpkt
 );

274 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

277  ( 
evíts
 ^ 
SYS_EVENT_MSG
 );

280 i‡–
evíts
 & 
SERIALAPP_SEND_EVT
 )

282 
	`SîülAµ_Síd
();

283  ( 
evíts
 ^ 
SERIALAPP_SEND_EVT
 );

286 i‡–
evíts
 & 
SERIALAPP_RESP_EVT
 )

288 
	`SîülAµ_Re•
();

289  ( 
evíts
 ^ 
SERIALAPP_RESP_EVT
 );

293 
	}
}

304 
	$SîülAµ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

306  
öMsg
->
˛u°îID
 )

308 
End_Devi˚_Böd_r•
:

309 i‡–
	`ZDO_P¨£BödR•
–
öMsg
 ) =
ZSuc˚ss
 )

312 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

314 #i‡
	`deföed
(
BLINK_LEDS
)

318 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_FLASH
 );

323 
M©ch_Desc_r•
:

325 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

326 i‡–
pR•
 )

328 i‡–
pR•
->
°©us
 =
ZSuc˚ss
 &&ÖR•->
˙t
 )

330 
SîülAµ_TxAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

331 
SîülAµ_TxAddr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

333 
SîülAµ_TxAddr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

336 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

338 
	`oßl_mem_‰ì
–
pR•
 );

343 
	}
}

355 
	$SîülAµ_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

357 
zAddrTy≥_t
 
txAddr
;

359 i‡–
shi·
 )

361 i‡–
keys
 & 
HAL_KEY_SW_1
 )

364 i‡–
keys
 & 
HAL_KEY_SW_2
 )

367 i‡–
keys
 & 
HAL_KEY_SW_3
 )

370 i‡–
keys
 & 
HAL_KEY_SW_4
 )

376 i‡–
keys
 & 
HAL_KEY_SW_1
 )

380 i‡–
keys
 & 
HAL_KEY_SW_2
 )

382 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

385 
txAddr
.
addrMode
 = 
Addr16Bô
;

386 
txAddr
.
addr
.
sh‹tAddr
 = 0x0000;

387 
	`ZDP_EndDevi˚BödReq
–&
txAddr
, 
	`NLME_GëSh‹tAddr
(),

388 
SîülAµ_ïDesc
.
ídPoöt
,

389 
SERIALAPP_PROFID
,

390 
SERIALAPP_MAX_CLUSTERS
, (
cId_t
 *)
SîülAµ_Clu°îLi°
,

391 
SERIALAPP_MAX_CLUSTERS
, (
cId_t
 *)
SîülAµ_Clu°îLi°
,

392 
FALSE
 );

395 i‡–
keys
 & 
HAL_KEY_SW_3
 )

399 i‡–
keys
 & 
HAL_KEY_SW_4
 )

401 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

404 
txAddr
.
addrMode
 = 
AddrBrﬂdˇ°
;

405 
txAddr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

406 
	`ZDP_M©chDescReq
–&
txAddr
, 
NWK_BROADCAST_SHORTADDR
,

407 
SERIALAPP_PROFID
,

408 
SERIALAPP_MAX_CLUSTERS
, (
cId_t
 *)
SîülAµ_Clu°îLi°
,

409 
SERIALAPP_MAX_CLUSTERS
, (
cId_t
 *)
SîülAµ_Clu°îLi°
,

410 
FALSE
 );

413 
	}
}

427 
	$SîülAµ_Pro˚ssMSGCmd
–
afIncomögMSGPackë_t
 *
pkt
 )

429 
uöt8
 
°©
;

430 
uöt8
 
£qnb
;

431 
uöt8
 
dñay
;

433  
pkt
->
˛u°îId
 )

436 
SERIALAPP_CLUSTERID1
:

438 
	`oßl_mem˝y
(&
SîülAµ_RxAddr
, &(
pkt
->
§cAddr
), –
afAddrTy≥_t
 ));

440 
£qnb
 = 
pkt
->
cmd
.
D©a
[0];

443 i‡–(
£qnb
 > 
SîülAµ_RxSeq
) ||

444 ((
£qnb
 < 0x80 ) && ( 
SîülAµ_RxSeq
 > 0x80)) )

447 i‡–
	`HÆUARTWrôe
–
SERIAL_APP_PORT
, 
pkt
->
cmd
.
D©a
+1, (pkt->cmd.
D©aLígth
-1) ) )

450 
SîülAµ_RxSeq
 = 
£qnb
;

451 
°©
 = 
OTA_SUCCESS
;

455 
°©
 = 
OTA_SER_BUSY
;

460 
°©
 = 
OTA_DUP_MSG
;

464 
dñay
 = (
°©
 =
OTA_SER_BUSY
Ë? 
SERIALAPP_NAK_DELAY
 : 
SERIALAPP_ACK_DELAY
;

467 
SîülAµ_R•Buf
[0] = 
°©
;

468 
SîülAµ_R•Buf
[1] = 
£qnb
;

469 
SîülAµ_R•Buf
[2] = 
	`LO_UINT16
–
dñay
 );

470 
SîülAµ_R•Buf
[3] = 
	`HI_UINT16
–
dñay
 );

471 
	`oßl_£t_evít
–
SîülAµ_TaskID
, 
SERIALAPP_RESP_EVT
 );

472 
	`oßl_°›_timîEx
(
SîülAµ_TaskID
, 
SERIALAPP_RESP_EVT
);

476 
SERIALAPP_CLUSTERID2
:

477 i‡((
pkt
->
cmd
.
D©a
[1] =
SîülAµ_TxSeq
) &&

478 ((
pkt
->
cmd
.
D©a
[0] =
OTA_SUCCESS
Ë|| (pkt->cmd.D©a[0] =
OTA_DUP_MSG
)))

480 
SîülAµ_TxLí
 = 0;

481 
	`oßl_°›_timîEx
(
SîülAµ_TaskID
, 
SERIALAPP_SEND_EVT
);

486 
dñay
 = 
	`BUILD_UINT16
–
pkt
->
cmd
.
D©a
[2],Ökt->cmd.Data[3] );

487 
	`oßl_°¨t_timîEx
–
SîülAµ_TaskID
, 
SERIALAPP_SEND_EVT
, 
dñay
 );

494 
	}
}

505 
	$SîülAµ_Síd
()

507 #i‡
SERIAL_APP_LOOPBACK


508 i‡(
SîülAµ_TxLí
 < 
SERIAL_APP_TX_MAX
)

510 
SîülAµ_TxLí
 +
	`HÆUARTRód
(
SERIAL_APP_PORT
, 
SîülAµ_TxBuf
+SerialApp_TxLen+1,

511 
SERIAL_APP_TX_MAX
-
SîülAµ_TxLí
);

514 i‡(
SîülAµ_TxLí
)

516 ()
SîülAµ_TxAddr
;

517 i‡(
	`HÆUARTWrôe
(
SERIAL_APP_PORT
, 
SîülAµ_TxBuf
+1, 
SîülAµ_TxLí
))

519 
SîülAµ_TxLí
 = 0;

523 
	`oßl_£t_evít
(
SîülAµ_TaskID
, 
SERIALAPP_SEND_EVT
);

527 i‡(!
SîülAµ_TxLí
 &&

528 (
SîülAµ_TxLí
 = 
	`HÆUARTRód
(
SERIAL_APP_PORT
, 
SîülAµ_TxBuf
+1, 
SERIAL_APP_TX_MAX
)))

531 
SîülAµ_TxBuf
[0] = ++
SîülAµ_TxSeq
;

534 i‡(
SîülAµ_TxLí
)

536 i‡(
afSètus_SUCCESS
 !
	`AF_D©aReque°
(&
SîülAµ_TxAddr
,

537 (
ídPoötDesc_t
 *)&
SîülAµ_ïDesc
,

538 
SERIALAPP_CLUSTERID1
,

539 
SîülAµ_TxLí
+1, 
SîülAµ_TxBuf
,

540 &
SîülAµ_MsgID
, 0, 
AF_DEFAULT_RADIUS
))

542 
	`oßl_£t_evít
(
SîülAµ_TaskID
, 
SERIALAPP_SEND_EVT
);

546 
	}
}

557 
	$SîülAµ_Re•
()

559 i‡(
afSètus_SUCCESS
 !
	`AF_D©aReque°
(&
SîülAµ_RxAddr
,

560 (
ídPoötDesc_t
 *)&
SîülAµ_ïDesc
,

561 
SERIALAPP_CLUSTERID2
,

562 
SERIAL_APP_RSP_CNT
, 
SîülAµ_R•Buf
,

563 &
SîülAµ_MsgID
, 0, 
AF_DEFAULT_RADIUS
))

565 
	`oßl_£t_evít
(
SîülAµ_TaskID
, 
SERIALAPP_RESP_EVT
);

567 
	}
}

579 
	$SîülAµ_CÆlBack
(
uöt8
 
p‹t
, uöt8 
evít
)

581 ()
p‹t
;

583 i‡((
evít
 & (
HAL_UART_RX_FULL
 | 
HAL_UART_RX_ABOUT_FULL
 | 
HAL_UART_RX_TIMEOUT
)) &&

584 #i‡
SERIAL_APP_LOOPBACK


585 (
SîülAµ_TxLí
 < 
SERIAL_APP_TX_MAX
))

587 !
SîülAµ_TxLí
)

590 
	`SîülAµ_Síd
();

592 
	}
}

	@Projects/zstack/Utilities/SerialApp/Source/SerialApp.h

40 #i‚de‡
SERIALAPP_H


41 
	#SERIALAPP_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

59 
	#SERIALAPP_ENDPOINT
 11

	)

61 
	#SERIALAPP_PROFID
 0x0F05

	)

62 
	#SERIALAPP_DEVICEID
 0x0001

	)

63 
	#SERIALAPP_DEVICE_VERSION
 0

	)

64 
	#SERIALAPP_FLAGS
 0

	)

66 
	#SERIALAPP_MAX_CLUSTERS
 2

	)

67 
	#SERIALAPP_CLUSTERID1
 1

	)

68 
	#SERIALAPP_CLUSTERID2
 2

	)

70 
	#SERIALAPP_SEND_EVT
 0x0001

	)

71 
	#SERIALAPP_RESP_EVT
 0x0002

	)

74 
	#SERIALAPP_ACK_DELAY
 1

	)

75 
	#SERIALAPP_NAK_DELAY
 16

	)

78 
	#OTA_SUCCESS
 
ZSuc˚ss


	)

79 
	#OTA_DUP_MSG
 (
ZSuc˚ss
+1)

	)

80 
	#OTA_SER_BUSY
 (
ZSuc˚ss
+2)

	)

89 
byã
 
SîülAµ_TaskID
;

98 
SîülAµ_Inô
–
byã
 
èsk_id
 );

103 
UINT16
 
SîülAµ_Pro˚ssEvít
–
byã
 
èsk_id
, UINT16 
evíts
 );

108 #ifde‡
__˝lu•lus


	@Projects/zstack/Utilities/Transmit/Source/OSAL_TransmitApp.c

46 
	~"ZComDef.h
"

47 
	~"hÆ_drivîs.h
"

48 
	~"OSAL.h
"

49 
	~"OSAL_Tasks.h
"

51 #i‡
deföed
 ( 
MT_TASK
 )

52 
	~"MT.h
"

53 
	~"MT_TASK.h
"

56 
	~"nwk.h
"

57 
	~"APS.h
"

58 
	~"ZDAµ.h
"

59 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

60 
	~"ZDNwkMgr.h
"

62 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

63 
	~"≠s_‰ag.h
"

66 
	~"TønsmôAµ.h
"

73 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

74 
macEvítLo›
,

75 
nwk_evít_lo›
,

76 
HÆ_Pro˚ssEvít
,

77 #i‡
deföed
–
MT_TASK
 )

78 
MT_Pro˚ssEvít
,

80 
APS_evít_lo›
,

81 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

82 
APSF_Pro˚ssEvít
,

84 
ZDAµ_evít_lo›
,

85 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

86 
ZDNwkMgr_evít_lo›
,

88 
TønsmôAµ_Pro˚ssEvít


91 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

92 
uöt16
 *
	gèsksEvíts
;

107 
	$oßlInôTasks
( )

109 
uöt8
 
èskID
 = 0;

111 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

112 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

114 
	`macTaskInô
–
èskID
++ );

115 
	`nwk_öô
–
èskID
++ );

116 
	`HÆ_Inô
–
èskID
++ );

117 #i‡
	`deföed
–
MT_TASK
 )

118 
	`MT_TaskInô
–
èskID
++ );

120 
	`APS_Inô
–
èskID
++ );

121 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

122 
	`APSF_Inô
–
èskID
++ );

124 
	`ZDAµ_Inô
–
èskID
++ );

125 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

126 
	`ZDNwkMgr_Inô
–
èskID
++ );

128 
	`TønsmôAµ_Inô
–
èskID
 );

129 
	}
}

	@Projects/zstack/Utilities/Transmit/Source/TransmitApp.c

91 
	~"OSAL.h
"

92 
	~"AF.h
"

93 
	~"ZDObje˘.h
"

94 
	~"ZDProfûe.h
"

96 
	~"TønsmôAµ.h
"

97 
	~"OnBﬂrd.h
"

99 
	~"DebugTø˚.h
"

102 
	~"hÆ_lcd.h
"

103 
	~"hÆ_Àd.h
"

104 
	~"hÆ_key.h
"

105 
	~"hÆ_u¨t.h
"

116 
	#TRANSMITAPP_STATE_WAITING
 0

	)

117 
	#TRANSMITAPP_STATE_SENDING
 1

	)

119 #i‡!
deföed
 ( 
RTR_NWK
 )

122 
	#TRANSMITAPP_DELAY_SEND


	)

123 
	#TRANSMITAPP_SEND_DELAY
 (
RESPONSE_POLL_RATE
 * 2)

125 

	)

128 
	#TRANSMITAPP_TX_OPTIONS
 
AF_DISCV_ROUTE


	)

130 
	#TRANSMITAPP_INITIAL_MSG_COUNT
 2

	)

132 
	#TRANSMITAPP_TRANSMIT_TIME
 4

133 
	#TRANSMITAPP_DISPLAY_TIMER
 (2 * 1000)

	)

135 #i‡
deföed
 ( 
TRANSMITAPP_FRAGMENTED
 )

136 
	#TRANSMITAPP_MAX_DATA_LEN
 225

	)

138 
	#TRANSMITAPP_MAX_DATA_LEN
 102

	)

150 
byã
 
	gTønsmôAµ_Msg
[ 
TRANSMITAPP_MAX_DATA_LEN
 ];

154 c⁄° 
cId_t
 
	gTønsmôAµ_Clu°îLi°
[
TRANSMITAPP_MAX_CLUSTERS
] =

156 
TRANSMITAPP_CLUSTERID_TESTMSG


159 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gTønsmôAµ_Sim∂eDesc
 =

161 
TRANSMITAPP_ENDPOINT
,

162 
TRANSMITAPP_PROFID
,

163 
TRANSMITAPP_DEVICEID
,

164 
TRANSMITAPP_DEVICE_VERSION
,

165 
TRANSMITAPP_FLAGS
,

166 
TRANSMITAPP_MAX_CLUSTERS
,

167 (
cId_t
 *)
TønsmôAµ_Clu°îLi°
,

168 
TRANSMITAPP_MAX_CLUSTERS
,

169 (
cId_t
 *)
TønsmôAµ_Clu°îLi°


176 
ídPoötDesc_t
 
	gTønsmôAµ_ïDesc
;

191 
byã
 
	gTønsmôAµ_TaskID
;

193 
devSèãs_t
 
	gTønsmôAµ_NwkSèã
;

195 
byã
 
	gTønsmôAµ_TønsID
;

197 
afAddrTy≥_t
 
	gTønsmôAµ_D°Addr
;

199 
byã
 
	gTønsmôAµ_Sèã
;

202 
uöt32
 
	g˛kShdw
;

204 
uöt32
 
	grxTŸÆ
, 
	gtxTŸÆ
;

206 
uöt32
 
	grxAccum
, 
	gtxAccum
;

208 
byã
 
	gtimîOn
;

210 
byã
 
	gtimesToSíd
;

212 
uöt16
 
	gpktCou¡î
;

215 
uöt16
 
	gTønsmôAµ_MaxD©aLígth
;

220 
TønsmôAµ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

221 
TønsmôAµ_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 );

222 
TønsmôAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pckt
 );

223 
TønsmôAµ_SídTheMesßge
( );

224 
TønsmôAµ_Ch™geSèã
( );

233 
TønsmôAµ_Di•œyResu…s
( );

249 
	$TønsmôAµ_Inô
–
byã
 
èsk_id
 )

251 #i‡!
	`deföed
 ( 
TRANSMITAPP_FRAGMENTED
 )

252 
afD©aReqMTU_t
 
mtu
;

254 
uöt16
 
i
;

256 
TønsmôAµ_TaskID
 = 
èsk_id
;

257 
TønsmôAµ_NwkSèã
 = 
DEV_INIT
;

258 
TønsmôAµ_TønsID
 = 0;

260 
pktCou¡î
 = 0;

262 
TønsmôAµ_Sèã
 = 
TRANSMITAPP_STATE_WAITING
;

268 
TønsmôAµ_D°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrNŸPª£¡
;

269 
TønsmôAµ_D°Addr
.
ídPoöt
 = 0;

270 
TønsmôAµ_D°Addr
.
addr
.
sh‹tAddr
 = 0;

273 
TønsmôAµ_ïDesc
.
ídPoöt
 = 
TRANSMITAPP_ENDPOINT
;

274 
TønsmôAµ_ïDesc
.
èsk_id
 = &
TønsmôAµ_TaskID
;

275 
TønsmôAµ_ïDesc
.
sim∂eDesc


276 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
TønsmôAµ_Sim∂eDesc
;

277 
TønsmôAµ_ïDesc
.
œãncyReq
 = 
noL©ícyReqs
;

280 
	`afRegi°î
–&
TønsmôAµ_ïDesc
 );

283 
	`Regi°îF‹Keys
–
TønsmôAµ_TaskID
 );

286 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

287 
	`HÆLcdWrôeSåög
–"TønsmôAµ", 
HAL_LCD_LINE_2
 );

291 #i‡
	`deföed
 ( 
TRANSMITAPP_FRAGMENTED
 )

292 
TønsmôAµ_MaxD©aLígth
 = 
TRANSMITAPP_MAX_DATA_LEN
;

294 
mtu
.
kvp
 = 
FALSE
;

295 
mtu
.
≠s
.
£cuª
 = 
FALSE
;

296 
TønsmôAµ_MaxD©aLígth
 = 
	`afD©aReqMTU
–&
mtu
 );

300 
i
=0; i<
TønsmôAµ_MaxD©aLígth
; i++)

302 
TønsmôAµ_Msg
[
i
] = (
uöt8
) i;

305 
	`ZDO_Regi°îF‹ZDOMsg
–
TønsmôAµ_TaskID
, 
End_Devi˚_Böd_r•
 );

306 
	`ZDO_Regi°îF‹ZDOMsg
–
TønsmôAµ_TaskID
, 
M©ch_Desc_r•
 );

307 
	}
}

322 
UINT16
 
	$TønsmôAµ_Pro˚ssEvít
–
byã
 
èsk_id
, 
UINT16
 
evíts
 )

324 
afIncomögMSGPackë_t
 *
MSGpkt
;

325 
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
;

326 ()
èsk_id
;

329 
ZSètus_t
 
£¡Sètus
;

330 
byã
 
£¡EP
;

332 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

334 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
TønsmôAµ_TaskID
 );

335  
MSGpkt
 )

337  
MSGpkt
->
hdr
.
evít
 )

339 
ZDO_CB_MSG
:

340 
	`TønsmôAµ_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

343 
KEY_CHANGE
:

344 
	`TønsmôAµ_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

347 
AF_DATA_CONFIRM_CMD
:

351 
afD©aC⁄fúm
 = (
afD©aC⁄fúm_t
 *)
MSGpkt
;

352 
£¡EP
 = 
afD©aC⁄fúm
->
ídpoöt
;

353 
£¡Sètus
 = 
afD©aC⁄fúm
->
hdr
.
°©us
;

355 i‡–(
ZSuc˚ss
 =
£¡Sètus
) &&

356 (
TønsmôAµ_ïDesc
.
ídPoöt
 =
£¡EP
) )

358 #i‡!
	`deföed
 ( 
TRANSMITAPP_RANDOM_LEN
 )

359 
txAccum
 +
TønsmôAµ_MaxD©aLígth
;

361 i‡–!
timîOn
 )

363 
	`oßl_°¨t_timîEx
–
TønsmôAµ_TaskID
,
TRANSMITAPP_RCVTIMER_EVT
,

364 
TRANSMITAPP_DISPLAY_TIMER
);

365 
˛kShdw
 = 
	`oßl_GëSy°emClock
();

366 
timîOn
 = 
TRUE
;

371 
	`TønsmôAµ_SëSídEvt
();

374 
AF_INCOMING_MSG_CMD
:

375 
	`TønsmôAµ_MesßgeMSGCB
–
MSGpkt
 );

378 
ZDO_STATE_CHANGE
:

379 
TønsmôAµ_NwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

387 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

390 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
TønsmôAµ_TaskID
 );

394 ()
£¡Sètus
;

395 ()
£¡EP
;

398  (
evíts
 ^ 
SYS_EVENT_MSG
);

402 i‡–
evíts
 & 
TRANSMITAPP_SEND_MSG_EVT
 )

404 i‡–
TønsmôAµ_Sèã
 =
TRANSMITAPP_STATE_SENDING
 )

406 
	`TønsmôAµ_SídTheMesßge
();

410  (
evíts
 ^ 
TRANSMITAPP_SEND_MSG_EVT
);

414 i‡–
evíts
 & 
TRANSMITAPP_SEND_ERR_EVT
 )

416 
	`TønsmôAµ_SëSídEvt
();

419  (
evíts
 ^ 
TRANSMITAPP_SEND_ERR_EVT
);

423 i‡–
evíts
 & 
TRANSMITAPP_RCVTIMER_EVT
 )

426 
	`oßl_°¨t_timîEx
–
TønsmôAµ_TaskID
, 
TRANSMITAPP_RCVTIMER_EVT
,

427 
TRANSMITAPP_DISPLAY_TIMER
 );

428 
	`TønsmôAµ_Di•œyResu…s
();

430  (
evíts
 ^ 
TRANSMITAPP_RCVTIMER_EVT
);

435 
	}
}

449 
	$TønsmôAµ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

451  
öMsg
->
˛u°îID
 )

453 
End_Devi˚_Böd_r•
:

454 i‡–
	`ZDO_P¨£BödR•
–
öMsg
 ) =
ZSuc˚ss
 )

457 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

459 #i‡
	`deföed
(
BLINK_LEDS
)

463 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_FLASH
 );

468 
M©ch_Desc_r•
:

470 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

471 i‡–
pR•
 )

473 i‡–
pR•
->
°©us
 =
ZSuc˚ss
 &&ÖR•->
˙t
 )

475 
TønsmôAµ_D°Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

476 
TønsmôAµ_D°Addr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

478 
TønsmôAµ_D°Addr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

481 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

483 
	`oßl_mem_‰ì
–
pR•
 );

488 
	}
}

504 
	$TønsmôAµ_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 )

506 
zAddrTy≥_t
 
d°Addr
;

509 i‡–
shi·
 )

511 i‡–
keys
 & 
HAL_KEY_SW_1
 )

514 i‡–
keys
 & 
HAL_KEY_SW_2
 )

517 i‡–
keys
 & 
HAL_KEY_SW_3
 )

520 i‡–
keys
 & 
HAL_KEY_SW_4
 )

526 i‡–
keys
 & 
HAL_KEY_SW_1
 )

528 
	`TønsmôAµ_Ch™geSèã
();

531 i‡–
keys
 & 
HAL_KEY_SW_2
 )

533 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

536 
d°Addr
.
addrMode
 = 
Addr16Bô
;

537 
d°Addr
.
addr
.
sh‹tAddr
 = 0x0000;

538 
	`ZDP_EndDevi˚BödReq
–&
d°Addr
, 
	`NLME_GëSh‹tAddr
(),

539 
TønsmôAµ_ïDesc
.
ídPoöt
,

540 
TRANSMITAPP_PROFID
,

541 
TRANSMITAPP_MAX_CLUSTERS
, (
cId_t
 *)
TønsmôAµ_Clu°îLi°
,

542 
TRANSMITAPP_MAX_CLUSTERS
, (
cId_t
 *)
TønsmôAµ_Clu°îLi°
,

543 
FALSE
 );

546 i‡–
keys
 & 
HAL_KEY_SW_3
 )

548 
rxTŸÆ
 = 
txTŸÆ
 = 0;

549 
rxAccum
 = 
txAccum
 = 0;

550 
	`TønsmôAµ_Di•œyResu…s
();

553 i‡–
keys
 & 
HAL_KEY_SW_4
 )

555 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

558 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

559 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

560 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
,

561 
TRANSMITAPP_PROFID
,

562 
TRANSMITAPP_MAX_CLUSTERS
, (
cId_t
 *)
TønsmôAµ_Clu°îLi°
,

563 
TRANSMITAPP_MAX_CLUSTERS
, (
cId_t
 *)
TønsmôAµ_Clu°îLi°
,

564 
FALSE
 );

567 
	}
}

584 
	$TønsmôAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pkt
 )

586 
uöt16
 
i
;

587 
uöt8
 
îr‹
 = 
FALSE
;

589  
pkt
->
˛u°îId
 )

591 
TRANSMITAPP_CLUSTERID_TESTMSG
:

592 #i‡!
	`deföed
 ( 
TRANSMITAPP_RANDOM_LEN
 )

593 i‡(
pkt
->
cmd
.
D©aLígth
 !
TønsmôAµ_MaxD©aLígth
)

595 
îr‹
 = 
TRUE
;

599 
i
=4; i<
pkt
->
cmd
.
D©aLígth
; i++)

601 i‡(
pkt
->
cmd
.
D©a
[
i
] != i%256)

602 
îr‹
 = 
TRUE
;

605 i‡(
îr‹
)

608 
	`HÆLedSë
(
HAL_LED_1
, 
HAL_LED_MODE_ON
);

612 i‡–!
timîOn
 )

614 
	`oßl_°¨t_timîEx
–
TønsmôAµ_TaskID
, 
TRANSMITAPP_RCVTIMER_EVT
,

615 
TRANSMITAPP_DISPLAY_TIMER
 );

616 
˛kShdw
 = 
	`oßl_GëSy°emClock
();

617 
timîOn
 = 
TRUE
;

619 
rxAccum
 +
pkt
->
cmd
.
D©aLígth
;

627 
	}
}

638 
	$TønsmôAµ_SídTheMesßge
( )

640 
uöt16
 
Àn
;

641 
uöt8
 
tmp
;

645 
tmp
 = 
	`HI_UINT8
–
TønsmôAµ_TønsID
 );

646 
tmp
 += (tmp <= 9) ? ('0') : ('A' - 0x0A);

647 
TønsmôAµ_Msg
[2] = 
tmp
;

648 
tmp
 = 
	`LO_UINT8
–
TønsmôAµ_TønsID
 );

649 
tmp
 += (tmp <= 9) ? ('0') : ('A' - 0x0A);

650 
TønsmôAµ_Msg
[3] = 
tmp
;

652 
Àn
 = 
TønsmôAµ_MaxD©aLígth
;

654 #i‡
	`deföed
 ( 
TRANSMITAPP_RANDOM_LEN
 )

655 
Àn
 = (
uöt8
)(
	`oßl_ønd
() & 0x7F);

656 if–
Àn
 > 
TønsmôAµ_MaxD©aLígth
 ||Üen == 0 )

657 
Àn
 = 
TønsmôAµ_MaxD©aLígth
;

658 i‡–
Àn
 < 4 )

659 
Àn
 = 4;

662 
tmp
 = 
	`AF_D©aReque°
–&
TønsmôAµ_D°Addr
, &
TønsmôAµ_ïDesc
,

663 
TRANSMITAPP_CLUSTERID_TESTMSG
,

664 
Àn
, 
TønsmôAµ_Msg
,

665 &
TønsmôAµ_TønsID
,

666 
TRANSMITAPP_TX_OPTIONS
,

667 
AF_DEFAULT_RADIUS
 );

669 #i‡
	`deföed
 ( 
TRANSMITAPP_RANDOM_LEN
 )

670 i‡–
tmp
 =
afSètus_SUCCESS
 )

672 
txAccum
 +
Àn
;

676 i‡–
timesToSíd
 )

678 
timesToSíd
--;

680 }  (
timesToSíd
 !0Ë&& (
afSètus_SUCCESS
 =
tmp
) );

682 i‡–
afSètus_SUCCESS
 =
tmp
 )

684 
pktCou¡î
++;

689 
	`oßl_°¨t_timîEx
–
TønsmôAµ_TaskID
, 
TRANSMITAPP_SEND_ERR_EVT
, 10 );

691 
	}
}

702 
	$TønsmôAµ_Ch™geSèã
( )

704 i‡–
TønsmôAµ_Sèã
 =
TRANSMITAPP_STATE_WAITING
 )

706 
TønsmôAµ_Sèã
 = 
TRANSMITAPP_STATE_SENDING
;

707 
	`TønsmôAµ_SëSídEvt
();

708 
timesToSíd
 = 
TRANSMITAPP_INITIAL_MSG_COUNT
;

712 
TønsmôAµ_Sèã
 = 
TRANSMITAPP_STATE_WAITING
;

714 
	}
}

725 
	$TønsmôAµ_SëSídEvt
( )

727 #i‡
	`deföed
–
TRANSMITAPP_DELAY_SEND
 )

729 
	`oßl_°¨t_timîEx
–
TønsmôAµ_TaskID
,

730 
TRANSMITAPP_SEND_MSG_EVT
, 
TRANSMITAPP_SEND_DELAY
 );

733 
	`oßl_£t_evít
–
TønsmôAµ_TaskID
, 
TRANSMITAPP_SEND_MSG_EVT
 );

735 
	}
}

746 
	$TønsmôAµ_Di•œyResu…s
( )

748 #ifde‡
LCD_SUPPORTED


749 
	#LCD_W
 16

	)

750 
uöt32
 
rxShdw
, 
txShdw
, 
tmp
;

751 
byã
 
lcd_buf
[
LCD_W
+1];

752 
byã
 
idx
;

756 
uöt32
 
m£cs
 = 
	`oßl_GëSy°emClock
(Ë- 
˛kShdw
;

757 
˛kShdw
 = 
	`oßl_GëSy°emClock
();

759 
rxTŸÆ
 +
rxAccum
;

760 
txTŸÆ
 +
txAccum
;

762 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

763 
rxShdw
 = (
rxAccum
 * 1000 + 
m£cs
/2) / msecs;

764 
txShdw
 = (
txAccum
 * 1000 + 
m£cs
/2) / msecs;

766 
	`oßl_mem£t
–
lcd_buf
, ' ', 
LCD_W
 );

767 
lcd_buf
[
LCD_W
] = 
NULL
;

769 
idx
 = 4;

770 
tmp
 = (
rxShdw
 >= 100000) ? 99999 :ÑxShdw;

773 
lcd_buf
[
idx
--] = (
uöt8
Ë('0' + (
tmp
 % 10));

774 
tmp
 /= 10;

775 }  
tmp
 );

777 
idx
 = 
LCD_W
-1;

778 
tmp
 = 
rxTŸÆ
;

781 
lcd_buf
[
idx
--] = (
uöt8
Ë('0' + (
tmp
 % 10));

782 
tmp
 /= 10;

783 }  
tmp
 );

785 
	`HÆLcdWrôeSåög
–(*)
lcd_buf
, 
HAL_LCD_LINE_1
 );

786 
	`oßl_mem£t
–
lcd_buf
, ' ', 
LCD_W
 );

788 
idx
 = 4;

789 
tmp
 = (
txShdw
 >= 100000) ? 99999 :ÅxShdw;

792 
lcd_buf
[
idx
--] = (
uöt8
Ë('0' + (
tmp
 % 10));

793 
tmp
 /= 10;

794 }  
tmp
 );

796 
idx
 = 
LCD_W
-1;

797 
tmp
 = 
txTŸÆ
;

800 
lcd_buf
[
idx
--] = (
uöt8
Ë('0' + (
tmp
 % 10));

801 
tmp
 /= 10;

802 }  
tmp
 );

804 
	`HÆLcdWrôeSåög
–(*)
lcd_buf
, 
HAL_LCD_LINE_2
 );

806 #ñi‡
	`deföed
–
MT_TASK
 )

807 
	`DEBUG_INFO
–
COMPID_APP
, 
SEVERITY_INFORMATION
, 3,

808 
rxAccum
, (
uöt16
)
m£cs
, (uöt16)
rxTŸÆ
 );

810 ()
m£cs
;

813 i‡–(
rxAccum
 =0Ë&& (
txAccum
 == 0) )

815 
	`oßl_°›_timîEx
–
TønsmôAµ_TaskID
, 
TRANSMITAPP_RCVTIMER_EVT
 );

816 
timîOn
 = 
FALSE
;

819 
rxAccum
 = 
txAccum
 = 0;

820 
	}
}

	@Projects/zstack/Utilities/Transmit/Source/TransmitApp.h

40 #i‚de‡
TRANSMITAPP_H


41 
	#TRANSMITAPP_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

59 
	#TRANSMITAPP_ENDPOINT
 1

	)

61 
	#TRANSMITAPP_PROFID
 0x0F05

	)

62 
	#TRANSMITAPP_DEVICEID
 0x0001

	)

63 
	#TRANSMITAPP_DEVICE_VERSION
 0

	)

64 
	#TRANSMITAPP_FLAGS
 0

	)

66 
	#TRANSMITAPP_MAX_CLUSTERS
 1

	)

67 
	#TRANSMITAPP_CLUSTERID_TESTMSG
 1

	)

70 
	#TRANSMITAPP_SEND_MSG_EVT
 0x0001

	)

71 
	#TRANSMITAPP_RCVTIMER_EVT
 0x0002

	)

72 
	#TRANSMITAPP_SEND_ERR_EVT
 0x0004

	)

88 
TønsmôAµ_Inô
–
byã
 
èsk_id
 );

93 
UINT16
 
TønsmôAµ_Pro˚ssEvít
–
byã
 
èsk_id
, UINT16 
evíts
 );

95 
TønsmôAµ_Ch™geSèã
( );

96 
TønsmôAµ_SëSídEvt
( );

101 #ifde‡
__˝lu•lus


	@Projects/zstack/ZBA/CCServer/Source/OSAL_CCServer.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"z˛_cc£rvî.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
z˛_evít_lo›
,

88 
z˛CCSîvî_evít_lo›


91 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

92 
uöt16
 *
	gèsksEvíts
;

107 
	$oßlInôTasks
( )

109 
uöt8
 
èskID
 = 0;

111 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

112 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

114 
	`macTaskInô
–
èskID
++ );

115 
	`nwk_öô
–
èskID
++ );

116 
	`HÆ_Inô
–
èskID
++ );

117 #i‡
	`deföed
–
MT_TASK
 )

118 
	`MT_TaskInô
–
èskID
++ );

120 
	`APS_Inô
–
èskID
++ );

121 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

122 
	`APSF_Inô
–
èskID
++ );

124 
	`ZDAµ_Inô
–
èskID
++ );

125 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

126 
	`ZDNwkMgr_Inô
–
èskID
++ );

128 
	`z˛_Inô
–
èskID
++ );

129 
	`z˛CCSîvî_Inô
–
èskID
 );

130 
	}
}

	@Projects/zstack/ZBA/CCServer/Source/zcl_ccserver.c

49 
	~"ZComDef.h
"

50 
	~"OSAL.h
"

51 
	~"OSAL_Nv.h
"

52 
	~"ZDAµ.h
"

54 
	~"z˛.h
"

55 
	~"zba.h
"

56 
	~"z˛_cc.h
"

58 
	~"z˛_cc£rvî.h
"

60 
	~"⁄bﬂrd.h
"

63 
	~"hÆ_lcd.h
"

64 
	~"hÆ_Àd.h
"

65 
	~"hÆ_key.h
"

71 
	#nuŒExãndedPANID
–
EPID
 ) 
	`oßl_isbuf£t
–(EPID), 0x00, 
Z_EXTADDR_LEN
 )

	)

72 
	#nuŒKey
–
key
 ) 
	`oßl_isbuf£t
–(key), 0x00, 
SEC_KEY_LEN
 )

	)

74 
	#NvIdFromAârId
–
©åId
 ) ( (©åIdË=
ATTRID_CC_TRUST_CENTER_MASTER_KEY
 ? \

75 
ZCD_NV_SAS_CURR_TC_MASTER_KEY
 : \

76 (
©åId
Ë=
ATTRID_CC_NETWORK_KEY
 ? \

77 
ZCD_NV_SAS_CURR_NWK_KEY
 : \

78 
ZCD_NV_SAS_CURR_PRECFG_LINK_KEY
 )

	)

83 
	#TO_JOIN_OPERATIONAL_NWK
 0x01

	)

84 
	#TO_JOIN_COMMISSIONING_NWK
 0x02

	)

86 
	#CCSERVER_REJOIN_TIMEOUT
 2500

87 

	)

91 
	szgIãm


93 
uöt16
 
	mid
;

94 
uöt16
 
	mÀn
;

95 *
	mbuf
;

96 } 
	tnvIãm_t
;

101 
uöt8
 
	gz˛CCSîvî_TaskID
;

110 
uöt8
 
	gÀaveInôüãd
;

111 
z˛CCRe°¨tDevi˚_t
 
	gª°¨tDevi˚
;

116 
CONST
 
nvIãm_t
 
	gnvIãmTabÀ
[] =

119 
ZCD_NV_SAS_SHORT_ADDR
, –
z˛CCSîvî_Sh‹tAddªss
 ), &zclCCServer_ShortAddress

122 
ZCD_NV_SAS_EXT_PANID
, 
Z_EXTADDR_LEN
, 
z˛CCSîvî_ExãndedP™Id


125 
ZCD_NV_SAS_PANID
, –
z˛CCSîvî_P™Id
 ), &zclCCServer_PanId

128 
ZCD_NV_SAS_CHANNEL_MASK
, –
z˛CCSîvî_Ch™√lMask
 ), &zclCCServer_ChannelMask

131 
ZCD_NV_SAS_PROTOCOL_VER
, –
z˛CCSîvî_PrŸocﬁVîsi⁄
 ), &zclCCServer_ProtocolVersion

134 
ZCD_NV_SAS_STACK_PROFILE
, –
z˛CCSîvî_SèckProfûe
 ), &zclCCServer_StackProfile

137 
ZCD_NV_SAS_STARTUP_CTRL
, –
z˛CCSîvî_SèπUpC⁄åﬁ
 ), &zclCCServer_StartUpControl

140 
ZCD_NV_SAS_TC_ADDR
, 
Z_EXTADDR_LEN
, 
z˛CCSîvî_Tru°CíãrAddr


143 
ZCD_NV_SAS_USE_INSEC_JOIN
, –
z˛CCSîvî_U£In£cuªJoö
 ), &zclCCServer_UseInsecureJoin

146 
ZCD_NV_SAS_NWK_KEY_SEQ_NUM
, (
z˛CCSîvî_Nëw‹kKeySeqNum
 ), &zclCCServer_NetworkKeySeqNum

149 
ZCD_NV_SAS_NWK_KEY_TYPE
, –
z˛CCSîvî_Nëw‹kKeyTy≥
 ), &zclCCServer_NetworkKeyType

152 
ZCD_NV_SAS_NWK_MGR_ADDR
, –
z˛CCSîvî_NwkM™agîAddr
 ), &zclCCServer_NwkManagerAddr

157 0x00, 0, 
NULL


166 
z˛CCSîvî_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

167 
z˛CCSîvî_InôSèπupP¨amëîs
–
uöt8
 
öôNv
 );

168 
z˛CCSîvî_U£SèπupP¨amëîs
( );

171 
z˛CCSîvî_Re°¨t_Devi˚CB
–
z˛CCRe°¨tDevi˚_t
 *
pCmd
,

172 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

173 
z˛CCSîvî_Save_SèπupP¨amëîsCB
–
z˛CCSèπupP¨ams_t
 *
pCmd
,

174 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

175 
z˛CCSîvî_Re°‹e_SèπupP¨amëîsCB
–
z˛CCSèπupP¨ams_t
 *
pCmd
,

176 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

177 
z˛CCSîvî_Re£t_SèπupP¨amëîsCB
–
z˛CCSèπupP¨ams_t
 *
pCmd
,

178 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

179 
z˛CCSîvî_Re°¨t_Devi˚R•CB
–
z˛CCSîvîP¨amsR•_t
 *
pR•
,

180 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

181 
z˛CCSîvî_Save_SèπupP¨amëîsR•CB
–
z˛CCSîvîP¨amsR•_t
 *
pR•
,

182 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

183 
z˛CCSîvî_Re°‹e_SèπupP¨amëîsR•CB
–
z˛CCSîvîP¨amsR•_t
 *
pR•
,

184 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

185 
z˛CCSîvî_Re£t_SèπupP¨amëîsR•CB
–
z˛CCSîvîP¨amsR•_t
 *
pR•
,

186 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

188 
ZSètus_t
 
z˛CCSîvî_SídLóveReq
( );

189 
z˛CCSîvî_SavePªc⁄figLökKey
( );

190 
uöt8
 
z˛CCSîvî_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 );

191 
ZSètus_t
 
z˛CCSîvî_RódWrôeCB
–
uöt16
 
˛u°îId
, uöt16 
©åId
,

192 
uöt8
 
›î
, uöt8 *
pVÆue
, 
uöt16
 *
pLí
 );

193 
ZSètus_t
 
z˛CCSîvî_Auth‹izeCB
–
afAddrTy≥_t
 *
§cAddr
, 
z˛AârRec_t
 *
pAâr
, 
uöt8
 
›î
 );

194 *
z˛CCSîvî_ZdoLóveCnfCB
–*
pP¨am
 );

196 
z˛CCSîvî_InôSèπupP¨amëîsInNV
( );

197 
z˛CCSîvî_Re£tSèπupP¨amëîsInNV
( );

198 
z˛CCSîvî_SaveSèπupP¨amëîsInNV
();

199 
z˛CCSîvî_Re°‹eSèπupP¨amëîsInNV
( );

204 
z˛CC_AµCÆlbacks_t
 
	gz˛CCSîvî_CmdCÆlbacks
 =

206 
z˛CCSîvî_Re°¨t_Devi˚CB
,

207 
z˛CCSîvî_Save_SèπupP¨amëîsCB
,

208 
z˛CCSîvî_Re°‹e_SèπupP¨amëîsCB
,

209 
z˛CCSîvî_Re£t_SèπupP¨amëîsCB
,

210 
z˛CCSîvî_Re°¨t_Devi˚R•CB
,

211 
z˛CCSîvî_Save_SèπupP¨amëîsR•CB
,

212 
z˛CCSîvî_Re°‹e_SèπupP¨amëîsR•CB
,

213 
z˛CCSîvî_Re£t_SèπupP¨amëîsR•CB
,

226 
	$z˛CCSîvî_Inô
–
uöt8
 
èsk_id
 )

228 
z˛CCSîvî_TaskID
 = 
èsk_id
;

230 
ÀaveInôüãd
 = 
FALSE
;

233 
	`zba_Inô
–&
z˛CCSîvî_Sim∂eDesc
 );

236 
	`z˛CC_Regi°îCmdCÆlbacks
–
CCSERVER_ENDPOINT
, &
z˛CCSîvî_CmdCÆlbacks
 );

239 
	`z˛_ªgi°îAârLi°
–
CCSERVER_ENDPOINT
, 
CCSERVER_MAX_ATTRIBUTES
, 
z˛CCSîvî_Aârs
 );

242 
	`z˛_ªgi°îVÆid©eAârD©a
–
z˛CCSîvî_VÆid©eAârD©aCB
 );

245 
	`z˛_ªgi°îRódWrôeCB
–
CCSERVER_ENDPOINT
, 
z˛CCSîvî_RódWrôeCB
, 
z˛CCSîvî_Auth‹izeCB
 );

248 
	`ZDO_Regi°îF‹ZdoCB
–
ZDO_LEAVE_CNF_CBID
, 
z˛CCSîvî_ZdoLóveCnfCB
 );

251 
	`Regi°îF‹Keys
–
z˛CCSîvî_TaskID
 );

254 
	`z˛CCSîvî_InôSèπupP¨amëîs
–
TRUE
 );

257 i‡–!
	`ZDAµ_Devi˚C⁄figuªd
() )

259 
	`oßl_nv_ôem_öô
–
ZCD_NV_NWKMGR_ADDR
, –
z˛CCSîvî_NwkM™agîAddr
 ),

260 (*)&
z˛CCSîvî_NwkM™agîAddr
 );

266 i‡–
	`nuŒExãndedPANID
–
zgApsU£ExãndedPANID
 ) )

268 
	`oßl_˝yExtAddr
–
zgApsU£ExãndedPANID
, 
zbaGlobÆCommissi⁄ögEPID
 );

273 
	}
}

286 
uöt16
 
	$z˛CCSîvî_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

288 ()
èsk_id
;

290 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

292 
afIncomögMSGPackë_t
 *
MSGpkt
;

294  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
z˛CCSîvî_TaskID
 )) )

296  
MSGpkt
->
hdr
.
evít
 )

298 
ZCL_INCOMING_MSG
:

302 
ZDO_STATE_CHANGE
:

306 
KEY_CHANGE
:

307 
	`z˛CCSîvî_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

315 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

319  (
evíts
 ^ 
SYS_EVENT_MSG
);

322 i‡–
evíts
 & 
CCSERVER_LEAVE_TIMER_EVT
 )

324 i‡–
	`z˛_CCSèπupMode
–
ª°¨tDevi˚
.
›ti⁄s
 ) =
CC_STARTUP_MODE_REPLACE_RESTART
 )

327 i‡–
	`z˛CCSîvî_SídLóveReq
(Ë=
ZSuc˚ss
 )

330 
ÀaveInôüãd
 = 
TO_JOIN_OPERATIONAL_NWK
;

335 
	`oßl_£t_evít
–
z˛CCSîvî_TaskID
, 
CCSERVER_RESTART_TIMER_EVT
 );

341 
	`oßl_£t_evít
–
z˛CCSîvî_TaskID
, 
CCSERVER_RESTART_TIMER_EVT
 );

344  ( 
evíts
 ^ 
CCSERVER_LEAVE_TIMER_EVT
 );

347 i‡–
evíts
 & 
CCSERVER_RESTART_TIMER_EVT
 )

349 i‡–
	`z˛_CCSèπupMode
–
ª°¨tDevi˚
.
›ti⁄s
 ) =
CC_STARTUP_MODE_REPLACE_RESTART
 )

352 
	`zgWrôeSèπupO±i⁄s
–
ZG_STARTUP_SET
, 
ZCD_STARTOPT_DEFAULT_NETWORK_STATE
 );

358 
	`zgWrôeSèπupO±i⁄s
–
ZG_STARTUP_CLEAR
, 
ZCD_STARTOPT_DEFAULT_NETWORK_STATE
 );

361 
	`Sy°emRe£tSo·
();

363  ( 
evíts
 ^ 
CCSERVER_RESTART_TIMER_EVT
 );

366 i‡–
evíts
 & 
CCSERVER_RESET_TIMER_EVT
 )

369 
	`zgWrôeSèπupO±i⁄s
–
ZG_STARTUP_SET
, 
ZCD_STARTOPT_DEFAULT_CONFIG_STATE
 );

372 
	`zgWrôeSèπupO±i⁄s
–
ZG_STARTUP_SET
, 
ZCD_STARTOPT_DEFAULT_NETWORK_STATE
 );

374 
	`Sy°emRe£tSo·
();

376  ( 
evíts
 ^ 
CCSERVER_RESET_TIMER_EVT
 );

381 
	}
}

397 
	$z˛CCSîvî_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

399 ()
shi·
;

401 i‡–
keys
 & 
HAL_KEY_SW_1
 )

405 i‡–
keys
 & 
HAL_KEY_SW_2
 )

407 
	`z˛CCSîvî_Re£tToZBADeÁu…
();

410 i‡–
keys
 & 
HAL_KEY_SW_3
 )

414 i‡–
keys
 & 
HAL_KEY_SW_4
 )

417 
	}
}

432 
	$z˛CCSîvî_Re£tToZBADeÁu…
( )

435 
	`zgWrôeSèπupO±i⁄s
–
ZG_STARTUP_SET
, 
ZCD_STARTOPT_DEFAULT_NETWORK_STATE
 );

438 i‡–
	`z˛CCSîvî_SídLóveReq
(Ë=
ZSuc˚ss
 )

441 
ÀaveInôüãd
 = 
TO_JOIN_COMMISSIONING_NWK
;

446 
	`oßl_£t_evít
–
z˛CCSîvî_TaskID
, 
CCSERVER_RESET_TIMER_EVT
 );

448 
	}
}

459 
ZSètus_t
 
	$z˛CCSîvî_SídLóveReq
( )

461 
NLME_LóveReq_t
 
ÀaveReq
;

464 
	`oßl_mem£t
–&
ÀaveReq
, 0, –
NLME_LóveReq_t
 ) );

467  ( 
	`NLME_LóveReq
–&
ÀaveReq
 ) );

468 
	}
}

479 
	$z˛CCSîvî_SavePªc⁄figLökKey
( )

481 
APSME_TCLökKey_t
 *
pKeyD©a
;

483 
pKeyD©a
 = (
APSME_TCLökKey_t
 *)
	`oßl_mem_Æloc
( ( APSME_TCLinkKey_t ) );

484 i‡(
pKeyD©a
 !
NULL
)

487 
	`oßl_mem£t
–
pKeyD©a
, 0x00, –
APSME_TCLökKey_t
 ) );

489 
	`oßl_mem£t
–
pKeyD©a
->
extAddr
, 0xFF, 
Z_EXTADDR_LEN
 );

490 
	`oßl_nv_ªad
–
ZCD_NV_SAS_CURR_PRECFG_LINK_KEY
, 0, 
SEC_KEY_LEN
, 
pKeyD©a
->
key
 );

493 
	`oßl_nv_wrôe
–
ZCD_NV_TCLK_TABLE_START
, 0, –
APSME_TCLökKey_t
 ), 
pKeyD©a
 );

496 
	`oßl_mem£t
–
pKeyD©a
, 0x00, –
APSME_TCLökKey_t
 ) );

498 
	`oßl_mem_‰ì
–
pKeyD©a
 );

500 
	}
}

512 
	$z˛CCSîvî_InôSèπupP¨amëîs
–
uöt8
 
öôNv
 )

514 
uöt8
 
zbaDeÁu…Key
[
SEC_KEY_LEN
] = 
DEFAULT_TC_LINK_KEY
;

516 
z˛CCSîvî_Sh‹tAddªss
 = 
CC_DEFAULT_SHORT_ADDR
;

518 
	`oßl_˝yExtAddr
–
z˛CCSîvî_ExãndedP™Id
, 
zbaGlobÆCommissi⁄ögEPID
 );

520 
z˛CCSîvî_P™Id
 = 
CC_DEFAULT_PANID
;

521 
z˛CCSîvî_Ch™√lMask
 = 
DEFAULT_CHANLIST
;

522 
z˛CCSîvî_PrŸocﬁVîsi⁄
 = 
ZB_PROT_VERS
;

523 
z˛CCSîvî_SèckProfûe
 = 
STACK_PROFILE_ID
;

525 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

528 
z˛CCSîvî_SèπUpC⁄åﬁ
 = 
CC_STARTUP_CONTROL_OPTION_1
;

533 
z˛CCSîvî_SèπUpC⁄åﬁ
 = 
CC_STARTUP_CONTROL_OPTION_3
;

536 
	`oßl_mem˝y
–
z˛CCSîvî_Tru°CíãrAddr
, 0x00, 
Z_EXTADDR_LEN
);

538 i‡–
öôNv
 )

541 i‡–
	`oßl_nv_ôem_öô
–
ZCD_NV_SAS_CURR_PRECFG_LINK_KEY
,

542 
SEC_KEY_LEN
, 
zbaDeÁu…Key
 ) =
SUCCESS
 )

545 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_CURR_PRECFG_LINK_KEY
, 0, 
SEC_KEY_LEN
, 
zbaDeÁu…Key
 );

548 
	`oßl_mem£t
–
zbaDeÁu…Key
, 0x00, 
SEC_KEY_LEN
 );

550 i‡–
	`oßl_nv_ôem_öô
–
ZCD_NV_SAS_CURR_TC_MASTER_KEY
,

551 
SEC_KEY_LEN
, 
zbaDeÁu…Key
 ) =
SUCCESS
 )

554 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_CURR_TC_MASTER_KEY
, 0, 
SEC_KEY_LEN
, 
zbaDeÁu…Key
 );

557 i‡–
	`oßl_nv_ôem_öô
–
ZCD_NV_SAS_CURR_NWK_KEY
,

558 
SEC_KEY_LEN
, 
zbaDeÁu…Key
 ) =
SUCCESS
 )

561 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_CURR_NWK_KEY
, 0, 
SEC_KEY_LEN
, 
zbaDeÁu…Key
 );

567 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_CURR_PRECFG_LINK_KEY
, 0, 
SEC_KEY_LEN
, 
zbaDeÁu…Key
 );

569 
	`oßl_mem£t
–
zbaDeÁu…Key
, 0x00, 
SEC_KEY_LEN
 );

571 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_CURR_TC_MASTER_KEY
, 0, 
SEC_KEY_LEN
, 
zbaDeÁu…Key
 );

572 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_CURR_NWK_KEY
, 0, 
SEC_KEY_LEN
, 
zbaDeÁu…Key
 );

575 
z˛CCSîvî_U£In£cuªJoö
 = 
TRUE
;

577 
z˛CCSîvî_Nëw‹kKeySeqNum
 = 
CC_DEFAULT_NETWORK_KEY_SEQ_NUM
;

578 
z˛CCSîvî_Nëw‹kKeyTy≥
 = 
KEY_TYPE_NWK
;

579 
z˛CCSîvî_NwkM™agîAddr
 = 
CC_DEFAULT_NETWORK_MANAGER_ADDR
;

580 
	}
}

591 
	$z˛CCSîvî_U£SèπupP¨amëîs
( )

593 i‡–
z˛CCSîvî_SèπUpC⁄åﬁ
 =
CC_STARTUP_CONTROL_OPTION_1
 )

595 
uöt8
 
√tw‹kKey
[
SEC_KEY_LEN
];

600 
	`oßl_nv_wrôe
–
ZCD_NV_EXTENDED_PAN_ID
, 0, 
Z_EXTADDR_LEN
,

601 
z˛CCSîvî_ExãndedP™Id
 );

602 
	`oßl_nv_wrôe
–
ZCD_NV_APS_USE_EXT_PANID
, 0, 
Z_EXTADDR_LEN
,

603 
z˛CCSîvî_ExãndedP™Id
 );

608 
	`oßl_nv_wrôe
–
ZCD_NV_PANID
, 0, –
z˛CCSîvî_P™Id
 ),

609 &
z˛CCSîvî_P™Id
 );

611 
	`oßl_nv_wrôe
–
ZCD_NV_CHANLIST
, 0, –
z˛CCSîvî_Ch™√lMask
 ),

612 &
z˛CCSîvî_Ch™√lMask
 );

614 
	`oßl_nv_wrôe
–
ZCD_NV_NWKMGR_ADDR
, 0, –
z˛CCSîvî_NwkM™agîAddr
 ),

615 &
z˛CCSîvî_NwkM™agîAddr
 );

617 
	`oßl_nv_ªad
–
ZCD_NV_SAS_CURR_NWK_KEY
, 0, 
SEC_KEY_LEN
, 
√tw‹kKey
 );

618 i‡–!
	`nuŒKey
–
√tw‹kKey
 ) )

621 
	`oßl_nv_wrôe
–
ZCD_NV_PRECFGKEY
, 0, 
SEC_KEY_LEN
, 
√tw‹kKey
 );

624 
	`oßl_mem£t
–
√tw‹kKey
, 0x00, 
SEC_KEY_LEN
 );

627 i‡–
z˛CCSîvî_SèπUpC⁄åﬁ
 =
CC_STARTUP_CONTROL_OPTION_3
 )

635 
	`oßl_nv_wrôe
–
ZCD_NV_EXTENDED_PAN_ID
, 0, 
Z_EXTADDR_LEN
,

636 
z˛CCSîvî_ExãndedP™Id
 );

638 
	`oßl_nv_wrôe
–
ZCD_NV_CHANLIST
, 0, –
z˛CCSîvî_Ch™√lMask
 ),

639 &
z˛CCSîvî_Ch™√lMask
 );

641 
	`z˛CCSîvî_SavePªc⁄figLökKey
();

643 
	}
}

657 
	$z˛CCSîvî_Re°¨t_Devi˚CB
–
z˛CCRe°¨tDevi˚_t
 *
pCmd
,

658 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

660 
z˛CCSîvîP¨amsR•_t
 
r•
;

663 i‡–
	`oßl_ExtAddrEquÆ
–
_NIB
.
exãndedPANID
, 
zbaGlobÆCommissi⁄ögEPID
 ) )

668 i‡–––
z˛CCSîvî_SèπUpC⁄åﬁ
 =
CC_STARTUP_CONTROL_OPTION_1
 ) &&

669 –
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_COORDINATOR
 ) ) ||

670 ––
z˛CCSîvî_SèπUpC⁄åﬁ
 =
CC_STARTUP_CONTROL_OPTION_3
 ) &&

671 ––
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_ROUTER
 ) ||

672 –
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_ENDDEVICE
 ) ) ) )

675 
r•
.
°©us
 = 
SUCCESS
;

680 
r•
.
°©us
 = 
ZCL_STATUS_INCONSISTENT_STARTUP_STATE
;

686 
r•
.
°©us
 = 
ZCL_STATUS_NOT_AUTHORIZED
;

689 
	`z˛CC_Síd_Re°¨tDevi˚R•
–
CCSERVER_ENDPOINT
, 
§cAddr
, &
r•
, 
TRUE
, 
£qNum
 );

691 i‡–
r•
.
°©us
 =
SUCCESS
 )

693 
uöt16
 
dñay
;

698 i‡–
	`z˛_CCImmedüã
–
pCmd
->
›ti⁄s
 ) )

700 
dñay
 = 1000;

704 
dñay
 = ( 
pCmd
->dñay * 1000 ) + ( 
	`oßl_ønd
(Ë% (ÖCmd->
jôãr
 * 80 ) );

707 i‡–
	`z˛_CCSèπupMode
–
pCmd
->
›ti⁄s
 ) =
CC_STARTUP_MODE_REPLACE_RESTART
 )

709 
	`z˛CCSîvî_U£SèπupP¨amëîs
();

713 
ª°¨tDevi˚
 = *
pCmd
;

715 
	`oßl_°¨t_timîEx
–
z˛CCSîvî_TaskID
, 
CCSERVER_LEAVE_TIMER_EVT
, 
dñay
 );

717 
	}
}

731 
	$z˛CCSîvî_Save_SèπupP¨amëîsCB
–
z˛CCSèπupP¨ams_t
 *
pCmd
,

732 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

734 
uöt8
 
nvInôFœg
 = 
FALSE
;

735 
z˛CCSîvîP¨amsR•_t
 
r•
;

737 if–
pCmd
->
ödex
 < 
CCSERVER_MAX_NWK_STARTUP_PARAMS
 )

739 i‡–!
nvInôFœg
 )

741 
nvInôFœg
 = 
TRUE
;

743 
	`z˛CCSîvî_InôSèπupP¨amëîsInNV
();

747 
	`z˛CCSîvî_SaveSèπupP¨amëîsInNV
();

750 
r•
.
°©us
 = 
SUCCESS
;

754 
r•
.
°©us
 = 
ZCL_STATUS_INSUFFICIENT_SPACE
;

757 
	`z˛CC_Síd_SaveSèπupP¨amsR•
–
CCSERVER_ENDPOINT
, 
§cAddr
, &
r•
, 
TRUE
, 
£qNum
 );

758 
	}
}

772 
	$z˛CCSîvî_Re°‹e_SèπupP¨amëîsCB
–
z˛CCSèπupP¨ams_t
 *
pCmd
,

773 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

775 
z˛CCSîvîP¨amsR•_t
 
r•
;

777 i‡–
pCmd
->
ödex
 < 
CCSERVER_MAX_NWK_STARTUP_PARAMS
 )

779 
	`z˛CCSîvî_Re°‹eSèπupP¨amëîsInNV
();

781 
r•
.
°©us
 = 
SUCCESS
;

785 
r•
.
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

788 
	`z˛CC_Síd_Re°‹eSèπupP¨amsR•
–
CCSERVER_ENDPOINT
, 
§cAddr
, &
r•
, 
TRUE
, 
£qNum
 );

789 
	}
}

803 
	$z˛CCSîvî_Re£t_SèπupP¨amëîsCB
–
z˛CCSèπupP¨ams_t
 *
pCmd
,

804 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

806 
z˛CCSîvîP¨amsR•_t
 
r•
;

809 i‡–
pCmd
->
›ti⁄s
 & 
CC_RESET_CURRENT
 )

811 
	`z˛CCSîvî_InôSèπupP¨amëîs
–
FALSE
 );

813 
r•
.
°©us
 = 
SUCCESS
;

818 i‡––
pCmd
->
›ti⁄s
 & 
CC_RESET_ALL
 ) || (ÖCmd->
ödex
 < 
CCSERVER_MAX_NWK_STARTUP_PARAMS
 ) )

820 
	`z˛CCSîvî_Re£tSèπupP¨amëîsInNV
();

822 
r•
.
°©us
 = 
SUCCESS
;

827 i‡–
pCmd
->
›ti⁄s
 & 
CC_ERASE_INDEX
 )

829 
r•
.
°©us
 = 
ZCL_STATUS_ACTION_DENIED
;

832 
	`z˛CC_Síd_Re£tSèπupP¨amsR•
–
CCSERVER_ENDPOINT
, 
§cAddr
, &
r•
, 
TRUE
, 
£qNum
 );

833 
	}
}

847 
	$z˛CCSîvî_Re°¨t_Devi˚R•CB
–
z˛CCSîvîP¨amsR•_t
 *
pCmd
,

848 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

851 
	}
}

866 
	$z˛CCSîvî_Save_SèπupP¨amëîsR•CB
–
z˛CCSîvîP¨amsR•_t
 *
pR•
,

867 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

870 
	}
}

885 
	$z˛CCSîvî_Re°‹e_SèπupP¨amëîsR•CB
–
z˛CCSîvîP¨amsR•_t
 *
pR•
,

886 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

889 
	}
}

904 
	$z˛CCSîvî_Re£t_SèπupP¨amëîsR•CB
–
z˛CCSîvîP¨amsR•_t
 *
pR•
,

905 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

908 
	}
}

921 
uöt8
 
	$z˛CCSîvî_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 )

923 
uöt8
 
vÆid
 = 
TRUE
;

925 i‡–
pAâr
->
©å
.
d©aPå
 =&
z˛CCSîvî_SèπUpC⁄åﬁ
 )

927 i‡––*(
pAârInfo
->
©åD©a
Ë!
CC_STARTUP_CONTROL_OPTION_1
 ) &&

928 –*(
pAârInfo
->
©åD©a
Ë!
CC_STARTUP_CONTROL_OPTION_3
 ) )

930 
vÆid
 = 
FALSE
;

933 i‡–
pAâr
->
©å
.
d©aPå
 =&
z˛CCSîvî_Nëw‹kKeyTy≥
 )

935 i‡–*(
pAârInfo
->
©åD©a
Ë!
KEY_TYPE_NWK
 )

937 
vÆid
 = 
FALSE
;

941  ( 
vÆid
 );

942 
	}
}

963 
ZSètus_t
 
	$z˛CCSîvî_RódWrôeCB
–
uöt16
 
˛u°îId
, uöt16 
©åId
,

964 
uöt8
 
›î
, uöt8 *
pVÆue
, 
uöt16
 *
pLí
 )

966 
ZSètus_t
 
°©us
 = 
ZCL_STATUS_SUCCESS
;

968  
›î
 )

970 
ZCL_OPER_LEN
:

971 *
pLí
 = 
SEC_KEY_LEN
;

974 
ZCL_OPER_READ
:

975 
	`oßl_nv_ªad
–
	`NvIdFromAârId
–
©åId
 ), 0, 
SEC_KEY_LEN
, 
pVÆue
 );

977 i‡–
pLí
 !
NULL
 )

979 *
pLí
 = 
SEC_KEY_LEN
;

983 
ZCL_OPER_WRITE
:

984 
	`oßl_nv_wrôe
–
	`NvIdFromAârId
–
©åId
 ), 0, 
SEC_KEY_LEN
, 
pVÆue
 );

988 
°©us
 = 
ZCL_STATUS_SOFTWARE_FAILURE
;

992  ( 
°©us
 );

993 
	}
}

1012 
ZSètus_t
 
	$z˛CCSîvî_Auth‹izeCB
–
afAddrTy≥_t
 *
§cAddr
, 
z˛AârRec_t
 *
pAâr
, 
uöt8
 
›î
 )

1015 i‡–
	`oßl_ExtAddrEquÆ
–
_NIB
.
exãndedPANID
, 
zbaGlobÆCommissi⁄ögEPID
 ) )

1017  ( 
ZCL_STATUS_SUCCESS
 );

1020  ( 
ZCL_STATUS_NOT_AUTHORIZED
 );

1021 
	}
}

1037 *
	$z˛CCSîvî_ZdoLóveCnfCB
–*
pP¨am
 )

1039 ()
pP¨am
;

1042 i‡–
ÀaveInôüãd
 =
FALSE
 )

1044  ( 
NULL
 );

1047 i‡–
ÀaveInôüãd
 =
TO_JOIN_OPERATIONAL_NWK
 )

1050 
	`oßl_£t_evít
–
z˛CCSîvî_TaskID
, 
CCSERVER_RESTART_TIMER_EVT
 );

1055 
	`oßl_£t_evít
–
z˛CCSîvî_TaskID
, 
CCSERVER_RESET_TIMER_EVT
 );

1058  ( (*)&
ÀaveInôüãd
 );

1059 
	}
}

1070 
	$z˛CCSîvî_InôSèπupP¨amëîsInNV
( )

1072 
uöt8
 
key
[
SEC_KEY_LEN
];

1074  
uöt8
 
i
 = 0; 
nvIãmTabÀ
[i].
id
 != 0x00; i++ )

1077 
	`oßl_nv_ôem_öô
–
nvIãmTabÀ
[
i
].
id
,ÇvIãmTabÀ[i].
Àn
,ÇvIãmTabÀ[i].
buf
 );

1081 
	`oßl_nv_ªad
–
ZCD_NV_SAS_CURR_TC_MASTER_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1082 
	`oßl_nv_ôem_öô
–
ZCD_NV_SAS_TC_MASTER_KEY
, 
SEC_KEY_LEN
, 
key
 );

1084 
	`oßl_nv_ªad
–
ZCD_NV_SAS_CURR_NWK_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1085 
	`oßl_nv_ôem_öô
–
ZCD_NV_SAS_NWK_KEY
, 
SEC_KEY_LEN
, 
key
 );

1087 
	`oßl_nv_ªad
–
ZCD_NV_SAS_CURR_PRECFG_LINK_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1088 
	`oßl_nv_ôem_öô
–
ZCD_NV_SAS_PRECFG_LINK_KEY
, 
SEC_KEY_LEN
, 
key
 );

1091 
	`oßl_mem£t
–
key
, 0x00, 
SEC_KEY_LEN
 );

1092 
	}
}

1103 
	$z˛CCSîvî_Re£tSèπupP¨amëîsInNV
( )

1105 
uöt8
 
tmpByã
;

1106 
uöt16
 
tmpSh‹t
;

1107 
uöt32
 
tmpL⁄g
;

1108 
uöt8
 
tmpExtAddr
[
Z_EXTADDR_LEN
];

1109 
uöt8
 
zbaDeÁu…Key
[
SEC_KEY_LEN
] = 
DEFAULT_TC_LINK_KEY
;

1111 
tmpSh‹t
 = 
CC_DEFAULT_SHORT_ADDR
;

1112 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_SHORT_ADDR
, 0, –
tmpSh‹t
 ), &tmpShort );

1114 
	`oßl_˝yExtAddr
–
tmpExtAddr
, 
zbaGlobÆCommissi⁄ögEPID
 );

1115 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_EXT_PANID
, 0, 
Z_EXTADDR_LEN
, 
tmpExtAddr
 );

1117 
tmpSh‹t
 = 
CC_DEFAULT_PANID
;

1118 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_PANID
, 0, –
tmpSh‹t
 ), &tmpShort );

1120 
tmpL⁄g
 = 
DEFAULT_CHANLIST
;

1121 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_CHANNEL_MASK
, 0, –
tmpL⁄g
 ), &tmpLong );

1123 
tmpByã
 = 
ZB_PROT_VERS
;

1124 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_PROTOCOL_VER
, 0, –
tmpSh‹t
 ), &tmpShort );

1126 
tmpByã
 = 
STACK_PROFILE_ID
;

1127 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_STACK_PROFILE
, 0, –
tmpSh‹t
 ), &tmpShort );

1129 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

1132 
tmpByã
 = 
CC_STARTUP_CONTROL_OPTION_1
;

1137 
tmpByã
 = 
CC_STARTUP_CONTROL_OPTION_3
;

1140 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_STARTUP_CTRL
, 0, –
tmpByã
 ), &tmpByte );

1142 
	`oßl_mem£t
–
tmpExtAddr
, 0x00, 
Z_EXTADDR_LEN
 );

1143 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_TC_ADDR
, 0, 
Z_EXTADDR_LEN
, 
tmpExtAddr
 );

1145 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_PRECFG_LINK_KEY
, 0, 
SEC_KEY_LEN
, 
zbaDeÁu…Key
 );

1147 
	`oßl_mem£t
–
zbaDeÁu…Key
, 0x00, 
SEC_KEY_LEN
 );

1148 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_TC_MASTER_KEY
, 0, 
SEC_KEY_LEN
, 
zbaDeÁu…Key
 );

1149 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_NWK_KEY
, 0, 
SEC_KEY_LEN
, 
zbaDeÁu…Key
 );

1151 
tmpByã
 = 
TRUE
;

1152 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_USE_INSEC_JOIN
, 0, –
tmpByã
 ), &tmpByte );

1154 
tmpByã
 = 
CC_DEFAULT_NETWORK_KEY_SEQ_NUM
;

1155 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_NWK_KEY_SEQ_NUM
, 0, –
tmpByã
 ), &tmpByte );

1157 
tmpByã
 = 
KEY_TYPE_NWK
;

1158 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_NWK_KEY_TYPE
, 0, –
tmpByã
 ), &tmpByte );

1160 
tmpSh‹t
 = 
CC_DEFAULT_NETWORK_MANAGER_ADDR
;

1161 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_NWK_MGR_ADDR
, 0, –
tmpSh‹t
 ), &tmpShort );

1162 
	}
}

1173 
	$z˛CCSîvî_SaveSèπupP¨amëîsInNV
( )

1175 
uöt8
 
key
[
SEC_KEY_LEN
];

1177  
uöt8
 
i
 = 0; 
nvIãmTabÀ
[i].
id
 != 0x00; i++ )

1180 
	`oßl_nv_wrôe
–
nvIãmTabÀ
[
i
].
id
, 0,ÇvIãmTabÀ[i].
Àn
,ÇvIãmTabÀ[i].
buf
 );

1184 
	`oßl_nv_ªad
–
ZCD_NV_SAS_CURR_TC_MASTER_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1185 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_TC_MASTER_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1187 
	`oßl_nv_ªad
–
ZCD_NV_SAS_CURR_NWK_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1188 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_NWK_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1190 
	`oßl_nv_ªad
–
ZCD_NV_SAS_CURR_PRECFG_LINK_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1191 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_PRECFG_LINK_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1194 
	`oßl_mem£t
–
key
, 0x00, 
SEC_KEY_LEN
 );

1195 
	}
}

1206 
	$z˛CCSîvî_Re°‹eSèπupP¨amëîsInNV
( )

1208 
uöt8
 
key
[
SEC_KEY_LEN
];

1210  
uöt8
 
i
 = 0; 
nvIãmTabÀ
[i].
id
 != 0x00; i++ )

1213 
	`oßl_nv_ªad
–
nvIãmTabÀ
[
i
].
id
, 0,ÇvIãmTabÀ[i].
Àn
,ÇvIãmTabÀ[i].
buf
 );

1217 
	`oßl_nv_ªad
–
ZCD_NV_SAS_TC_MASTER_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1218 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_CURR_TC_MASTER_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1220 
	`oßl_nv_ªad
–
ZCD_NV_SAS_NWK_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1221 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_CURR_NWK_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1223 
	`oßl_nv_ªad
–
ZCD_NV_SAS_PRECFG_LINK_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1224 
	`oßl_nv_wrôe
–
ZCD_NV_SAS_CURR_PRECFG_LINK_KEY
, 0, 
SEC_KEY_LEN
, 
key
 );

1227 
	`oßl_mem£t
–
key
, 0x00, 
SEC_KEY_LEN
 );

1228 
	}
}

	@Projects/zstack/ZBA/CCServer/Source/zcl_ccserver.h

41 #i‚de‡
ZCL_CCSERVER_H


42 
	#ZCL_CCSERVER_H


	)

44 #ifde‡
__˝lu•lus


52 
	~"z˛.h
"

57 
	#CCSERVER_ENDPOINT
 12

	)

59 
	#CCSERVER_MAX_ATTRIBUTES
 15

	)

62 
	#CCSERVER_LEAVE_TIMER_EVT
 0x0001

	)

63 
	#CCSERVER_RESTART_TIMER_EVT
 0x0002

	)

64 
	#CCSERVER_RESET_TIMER_EVT
 0x0004

	)

66 
	#CCSERVER_MAX_NWK_STARTUP_PARAMS
 1

	)

78 
Sim∂eDes¸ùti⁄F‹m©_t
 
z˛CCSîvî_Sim∂eDesc
;

80 
CONST
 
z˛AârRec_t
 
z˛CCSîvî_Aârs
[];

83 
uöt16
 
z˛CCSîvî_Sh‹tAddªss
;

84 
uöt8
 
z˛CCSîvî_ExãndedP™Id
[
Z_EXTADDR_LEN
];

85 
uöt16
 
z˛CCSîvî_P™Id
;

86 
uöt32
 
z˛CCSîvî_Ch™√lMask
;

87 
uöt8
 
z˛CCSîvî_PrŸocﬁVîsi⁄
;

88 
uöt8
 
z˛CCSîvî_SèckProfûe
;

89 
uöt8
 
z˛CCSîvî_SèπUpC⁄åﬁ
;

90 
uöt8
 
z˛CCSîvî_Tru°CíãrAddr
[
Z_EXTADDR_LEN
];

91 
boﬁ
 
z˛CCSîvî_U£In£cuªJoö
;

92 
uöt8
 
z˛CCSîvî_Nëw‹kKeySeqNum
;

93 
uöt8
 
z˛CCSîvî_Nëw‹kKeyTy≥
;

94 
uöt16
 
z˛CCSîvî_NwkM™agîAddr
;

104 
z˛CCSîvî_Inô
–
uöt8
 
èsk_id
 );

109 
uöt16
 
z˛CCSîvî_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

114 
z˛CCSîvî_Re£tToZBADeÁu…
( );

120 #ifde‡
__˝lu•lus


	@Projects/zstack/ZBA/CCServer/Source/zcl_ccserver_data.c

43 
	~"ZComDef.h
"

44 
	~"AF.h
"

46 
	~"zba.h
"

47 
	~"z˛_cc.h
"

49 
	~"z˛_cc£rvî.h
"

55 
	#CCSERVER_DEVICE_VERSION
 0

	)

56 
	#CCSERVER_FLAGS
 0

	)

58 
	#CCSERVER_HWVERSION
 1

	)

59 
	#CCSERVER_ZCLVERSION
 1

	)

74 
uöt16
 
	gz˛CCSîvî_Sh‹tAddªss
;

75 
uöt8
 
	gz˛CCSîvî_ExãndedP™Id
[
Z_EXTADDR_LEN
];

76 
uöt16
 
	gz˛CCSîvî_P™Id
;

77 
uöt32
 
	gz˛CCSîvî_Ch™√lMask
;

78 
uöt8
 
	gz˛CCSîvî_PrŸocﬁVîsi⁄
;

79 
uöt8
 
	gz˛CCSîvî_SèckProfûe
;

80 
uöt8
 
	gz˛CCSîvî_SèπUpC⁄åﬁ
;

81 
uöt8
 
	gz˛CCSîvî_Tru°CíãrAddr
[
Z_EXTADDR_LEN
];

82 
uöt8
 
	gz˛CCSîvî_U£In£cuªJoö
;

83 
uöt8
 
	gz˛CCSîvî_Nëw‹kKeySeqNum
;

84 
uöt8
 
	gz˛CCSîvî_Nëw‹kKeyTy≥
;

85 
uöt16
 
	gz˛CCSîvî_NwkM™agîAddr
;

91 
CONST
 
z˛AârRec_t
 
	gz˛CCSîvî_Aârs
[
CCSERVER_MAX_ATTRIBUTES
] =

95 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

97 
ATTRID_CC_SHORT_ADDRESS
,

98 
ZCL_DATATYPE_UINT16
,

99 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

100 (*)&
z˛CCSîvî_Sh‹tAddªss


104 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

106 
ATTRID_CC_EXTENDED_PANID
,

107 
ZCL_DATATYPE_IEEE_ADDR
,

108 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

109 (*)
z˛CCSîvî_ExãndedP™Id


113 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

115 
ATTRID_CC_PANID
,

116 
ZCL_DATATYPE_UINT16
,

117 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

118 (*)&
z˛CCSîvî_P™Id


122 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

124 
ATTRID_CC_CHANNEL_MASK
,

125 
ZCL_DATATYPE_BITMAP32
,

126 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

127 (*)&
z˛CCSîvî_Ch™√lMask


131 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

133 
ATTRID_CC_PROTOCOL_VERSION
,

134 
ZCL_DATATYPE_UINT8
,

135 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

136 (*)&
z˛CCSîvî_PrŸocﬁVîsi⁄


140 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

142 
ATTRID_CC_STACK_PROFILE
,

143 
ZCL_DATATYPE_UINT8
,

144 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

145 (*)&
z˛CCSîvî_SèckProfûe


149 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

151 
ATTRID_CC_STARTUP_CONTROL
,

152 
ZCL_DATATYPE_ENUM8
,

153 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

154 (*)&
z˛CCSîvî_SèπUpC⁄åﬁ


158 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

160 
ATTRID_CC_TRUST_CENTER_ADDRESS
,

161 
ZCL_DATATYPE_IEEE_ADDR
,

162 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

163 (*)
z˛CCSîvî_Tru°CíãrAddr


167 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

169 
ATTRID_CC_TRUST_CENTER_MASTER_KEY
,

170 
ZCL_DATATYPE_128_BIT_SEC_KEY
,

171 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

172 (*)
NULL


177 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

179 
ATTRID_CC_NETWORK_KEY
,

180 
ZCL_DATATYPE_128_BIT_SEC_KEY
,

181 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

182 (*)
NULL


186 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

188 
ATTRID_CC_USE_INSECURE_JOIN
,

189 
ZCL_DATATYPE_BOOLEAN
,

190 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

191 (*)&
z˛CCSîvî_U£In£cuªJoö


195 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

197 
ATTRID_CC_PRECONFIGURED_LINK_KEY
,

198 
ZCL_DATATYPE_128_BIT_SEC_KEY
,

199 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

200 (*)
NULL


204 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

206 
ATTRID_CC_NETWORK_KEY_SEQ_NUM
,

207 
ZCL_DATATYPE_UINT8
,

208 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

209 (*)&
z˛CCSîvî_Nëw‹kKeySeqNum


213 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

215 
ATTRID_CC_NETWORK_KEY_TYPE
,

216 
ZCL_DATATYPE_ENUM8
,

217 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

218 (*)&
z˛CCSîvî_Nëw‹kKeyTy≥


222 
ZCL_CLUSTER_ID_GEN_COMMISSIONING
,

224 
ATTRID_CC_NETWORK_MANAGER_ADDRESS
,

225 
ZCL_DATATYPE_UINT16
,

226 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
 | 
ACCESS_CONTROL_AUTH_READ
 | 
ACCESS_CONTROL_AUTH_WRITE
,

227 (*)&
z˛CCSîvî_NwkM™agîAddr


237 
	#CCSERVER_MAX_INCLUSTERS
 1

	)

238 c⁄° 
cId_t
 
	gz˛CCSîvî_InClu°îLi°
[
CCSERVER_MAX_INCLUSTERS
] =

240 
ZCL_CLUSTER_ID_GEN_COMMISSIONING


243 
	#CCSERVER_MAX_OUTCLUSTERS
 1

	)

244 c⁄° 
cId_t
 
	gz˛CCSîvî_OutClu°îLi°
[
CCSERVER_MAX_OUTCLUSTERS
] =

246 
ZCL_CLUSTER_ID_GEN_ON_OFF


249 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gz˛CCSîvî_Sim∂eDesc
 =

251 
CCSERVER_ENDPOINT
,

252 
ZBA_PROFILE_ID
,

253 
ZBA_DEVICEID_ON_OFF_SWITCH
,

254 
CCSERVER_DEVICE_VERSION
,

255 
CCSERVER_FLAGS
,

256 
CCSERVER_MAX_INCLUSTERS
,

257 (
cId_t
 *)
z˛CCSîvî_InClu°îLi°
,

258 
CCSERVER_MAX_OUTCLUSTERS
,

259 (
cId_t
 *)
z˛CCSîvî_OutClu°îLi°


	@Projects/zstack/ZBA/Source/zba.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"OSAL_Nv.h
"

47 
	~"ZDAµ.h
"

49 
	~"z˛.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_cc.h
"

52 
	~"z˛_key_e°ablish.h
"

54 
	~"zba.h
"

65 c⁄° 
uöt8
 
	gzbaGlobÆCommissi⁄ögEPID
[
Z_EXTADDR_LEN
] = { 0x00, 0x00, 0x00, 0x10, 0x77, 0xC2, 0x50, 0x00 };

107 
	$zba_Inô
–
Sim∂eDes¸ùti⁄F‹m©_t
 *
sim∂eDesc
 )

109 
ídPoötDesc_t
 *
ïDesc
;

113 
ïDesc
 = 
	`oßl_mem_Æloc
– ( 
ídPoötDesc_t
 ) );

114 i‡–
ïDesc
 )

117 
ïDesc
->
ídPoöt
 = 
sim∂eDesc
->
EndPoöt
;

118 
ïDesc
->
èsk_id
 = &
z˛_TaskID
;

119 
ïDesc
->
sim∂eDesc
 = simpleDesc;

120 
ïDesc
->
œãncyReq
 = 
noL©ícyReqs
;

123 i‡(
	`afRegi°î
(
ïDesc
Ë=
afSètus_SUCCESS
)

126 
afAPSF_C⁄fig_t
 
cfg
 = { 
ZBA_APSF_FRAME_DELAY
, 
ZBA_APSF_WINDOW_SIZE
 };

127 ()
	`afAPSF_C⁄figSë
(
ïDesc
->
ídPoöt
, &
cfg
);

130 
	}
}

	@Projects/zstack/ZBA/Source/zba.h

41 #i‚de‡
ZBA_H


42 
	#ZBA_H


	)

44 #ifde‡
__˝lu•lus


57 
	#ZBA_PROFILE_ID
 0x0105

	)

60 
	#ZBA_DEVICEID_ON_OFF_SWITCH
 0x0000

	)

61 
	#ZBA_DEVICEID_LEVEL_CONTROL_SWITCH
 0x0001

	)

62 
	#ZBA_DEVICEID_ON_OFF_OUTPUT
 0x0002

	)

63 
	#ZBA_DEVICEID_LEVEL_CONTROLLABLE_OUTPUT
 0x0003

	)

64 
	#ZBA_DEVICEID_SCENE_SELECTOR
 0x0004

	)

65 
	#ZBA_DEVICEID_CONFIGURATION_TOOL
 0x0005

	)

66 
	#ZBA_DEVICEID_REMOTE_CONTROL
 0x0006

	)

67 
	#ZBA_DEVICEID_COMBINED_INTERFACE
 0x0007

	)

68 
	#ZBA_DEVICEID_RANGE_EXTENDER
 0x0008

	)

69 
	#ZBA_DEVICEID_MAINS_POWER_OUTLET
 0x0009

	)

70 
	#ZBA_DEVICEID_CONST_BACNET_DEVICE
 0x000A

	)

71 
	#ZBA_DEVICEID_BACNET_TUNNEL_DEVICE
 0x000B

	)

74 
	#ZBA_DEVICEID_ON_OFF_LIGHT
 0x0100

	)

75 
	#ZBA_DEVICEID_DIMMABLE_LIGHT
 0x0101

	)

76 
	#ZBA_DEVICEID_COLORED_DIMMABLE_LIGHT
 0x0102

	)

77 
	#ZBA_DEVICEID_ON_OFF_LIGHT_SWITCH
 0x0103

	)

78 
	#ZBA_DEVICEID_DIMMER_SWITCH
 0x0104

	)

79 
	#ZBA_DEVICEID_COLOR_DIMMER_SWITCH
 0x0105

	)

80 
	#ZBA_DEVICEID_LIGHT_SENSOR
 0x0106

	)

81 
	#ZBA_DEVICEID_OCCUPANCY_SENSOR
 0x0107

	)

82 
	#ZBA_DEVICEID_ON_OFF_BALLAST
 0x0108

	)

83 
	#ZBA_DEVICEID_DIMMABLE_BALLAST
 0x0109

	)

86 
	#ZBA_DEVICEID_SHADE
 0x0200

	)

87 
	#ZBA_DEVICEID_SHADE_CONTROLLER
 0x0201

	)

90 
	#ZBA_DEVICEID_HEATING_COOLING_UNIT
 0x0300

	)

91 
	#ZBA_DEVICEID_THERMOSTAT
 0x0301

	)

92 
	#ZBA_DEVICEID_TEMPERATURE_SENSOR
 0x0302

	)

93 
	#ZBA_DEVICEID_PUMP
 0x0303

	)

94 
	#ZBA_DEVICEID_PUMP_CONTROLLER
 0x0304

	)

95 
	#ZBA_DEVICEID_PRESSURE_SENSOR
 0x0305

	)

96 
	#ZBA_DEVICEID_FLOW_SENSOR
 0x0306

	)

97 
	#ZBA_DEVICEID_HUMIDITY_SENSOR
 0x0307

	)

100 
	#ZBA_DEVICEID_IAS_CONTROL_INDICATING_EQUIPMENT
 0x0400

	)

101 
	#ZBA_DEVICEID_IAS_ANCILLARY_CONTROL_EQUIPMENT
 0x0401

	)

102 
	#ZBA_DEVICEID_IAS_ZONE
 0x0402

	)

103 
	#ZBA_DEVICEID_IAS_WARNING_DEVICE
 0x0403

	)

106 
	#ZBA_APSF_FRAME_DELAY
 12

	)

107 
	#ZBA_APSF_WINDOW_SIZE
 3

	)

120 c⁄° 
uöt8
 
zbaGlobÆCommissi⁄ögEPID
[];

129 
zba_Inô
–
Sim∂eDes¸ùti⁄F‹m©_t
 *
sim∂eDesc
 );

135 #ifde‡
__˝lu•lus


	@Projects/zstack/ZMain/TI2530DB/OnBoard.c

46 
	~"ZComDef.h
"

47 
	~"ZGlobÆs.h
"

48 
	~"OnBﬂrd.h
"

49 
	~"OSAL.h
"

50 
	~"MT.h
"

51 
	~"MT_SYS.h
"

52 
	~"DebugTø˚.h
"

55 
	~"hÆ_lcd.h
"

56 
	~"hÆ_mcu.h
"

57 
	~"hÆ_timî.h
"

58 
	~"hÆ_key.h
"

59 
	~"hÆ_Àd.h
"

62 
	~"mac_ødio_defs.h
"

69 
	#NO_TASK_ID
 0xFF

	)

72 
	#MIN_RAM_INIT
 12

	)

78 #i‡
deföed
 
MAKE_CRC_SHDW


79 #¥agm®
loˇti⁄
="CRC_SHDW"

80 c⁄° 
CODE
 
uöt16
 
	g_¸cShdw
 = 0xFFFF;

81 #¥agm®
ªquúed
=
_¸cShdw


85 #¥agm®
loˇti⁄
="LOCK_BITS_ADDRESS_SPACE"

86 
__no_öô
 
uöt8
 
	g_lockBôs
[16];

87 #¥agm®
ªquúed
=
_lockBôs


89 #i‡
deföed
 
ZCL_KEY_ESTABLISH


90 
	~"z˛_˚π_d©a.c
"

92 #¥agm®
loˇti⁄
="IEEE_ADDRESS_SPACE"

93 
__no_öô
 
uöt8
 
	g_nvIEEE
[
Z_EXTADDR_LEN
];

94 #¥agm®
ªquúed
=
_nvIEEE


97 #¥agm®
loˇti⁄
="RESERVED_ADDRESS_SPACE"

98 
__no_öô
 
uöt8
 
	g_ª£rved
[1932];

99 #¥agm®
ªquúed
=
_ª£rved


103 
uöt8
 
	gaExãndedAddªss
[8];

110 
uöt8
 
	gªgi°îedKeysTaskID
 = 
NO_TASK_ID
;

116 
ChkRe£t
( );

124 
	$InôBﬂrd
–
uöt8
 
Àvñ
 )

126 i‡–
Àvñ
 =
OB_COLD
 )

129 *(
uöt8
 *)0x0 = 0;

131 
	`oßl_öt_dißbÀ
–
INTS_ALL
 );

133 
	`ChkRe£t
();

138 
	`HÆKeyC⁄fig
(
HAL_KEY_INTERRUPT_DISABLE
, 
OnBﬂrd_KeyCÆlback
);

140 
	}
}

150 
	$ChkRe£t
( )

152 
uöt8
 
rib
;

155 
rib
 = 
SLEEPSTA
 & 
LRESET
;

157 i‡–
rib
 =
RESETPO
 )

161 i‡–
rib
 =
RESETEX
 )

165 i‡–
rib
 =
RESETWD
 )

171 
	`HAL_ASSERT
(0);

173 
	}
}

188 
uöt8
 
	$Regi°îF‹Keys
–
uöt8
 
èsk_id
 )

191 i‡–
ªgi°îedKeysTaskID
 =
NO_TASK_ID
 )

193 
ªgi°îedKeysTaskID
 = 
èsk_id
;

194  ( 
åue
 );

197  ( 
Ál£
 );

198 
	}
}

210 
uöt8
 
	$OnBﬂrd_SídKeys
–
uöt8
 
keys
, uöt8 
°©e
 )

212 
keyCh™ge_t
 *
msgPå
;

214 i‡–
ªgi°îedKeysTaskID
 !
NO_TASK_ID
 )

217 
msgPå
 = (
keyCh™ge_t
 *)
	`oßl_msg_Æloˇã
( (keyChange_t) );

218 i‡–
msgPå
 )

220 
msgPå
->
hdr
.
evít
 = 
KEY_CHANGE
;

221 
msgPå
->
°©e
 = state;

222 
msgPå
->
keys
 = keys;

224 
	`oßl_msg_£nd
–
ªgi°îedKeysTaskID
, (
uöt8
 *)
msgPå
 );

226  ( 
ZSuc˚ss
 );

229  ( 
ZFaûuª
 );

230 
	}
}

242 
	$OnBﬂrd_KeyCÆlback
 ( 
uöt8
 
keys
, uöt8 
°©e
 )

244 
uöt8
 
shi·
;

245 ()
°©e
;

247 
shi·
 = (
keys
 & 
HAL_KEY_SW_6
Ë? 
åue
 : 
Ál£
;

249 i‡–
	`OnBﬂrd_SídKeys
–
keys
, 
shi·
 ) !
ZSuc˚ss
 )

252 i‡–
keys
 & 
HAL_KEY_SW_1
 )

256 i‡–
keys
 & 
HAL_KEY_SW_2
 )

260 i‡–
keys
 & 
HAL_KEY_SW_3
 )

264 i‡–
keys
 & 
HAL_KEY_SW_4
 )

268 i‡–
keys
 & 
HAL_KEY_SW_5
 )

272 i‡–
keys
 & 
HAL_KEY_SW_6
 )

276 
	}
}

287 
uöt16
 
	$OnBﬂrd_°ack_u£d
()

289 
uöt8
 c⁄° *
±r
;

290 
uöt8
 
˙t
 = 0;

292 
±r
 = 
CSTACK_END
;Öå > 
CSTACK_BEG
;Ötr--)

294 i‡(
STACK_INIT_VALUE
 =*
±r
)

296 i‡(++
˙t
 >
MIN_RAM_INIT
)

298 
±r
 +
MIN_RAM_INIT
;

304 
˙t
 = 0;

308  (
uöt16
)(
CSTACK_END
 - 
±r
 + 1);

309 
	}
}

323 
	$_ôﬂ
(
uöt16
 
num
, 
uöt8
 *
buf
, uöt8 
ødix
)

325 
c
,
i
;

326 
uöt8
 *
p
, 
r°
[5];

328 
p
 = 
r°
;

329  
i
=0; i<5; i++,
p
++ )

331 
c
 = 
num
 % 
ødix
;

332 *
p
 = 
c
 + (( c < 10 ) ? '0' : '7');

333 
num
 /
ødix
;

334 i‡–!
num
 )

338  
c
=0 ; c<=
i
; c++ )

339 *
buf
++ = *
p
--;

341 *
buf
 = '\0';

342 
	}
}

354 
uöt16
 
	$Onbﬂrd_ønd
( )

356  ( 
	`MAC_RADIO_RANDOM_WORD
() );

357 
	}
}

369 
	$Onbﬂrd_waô
–
uöt16
 
timeout
 )

371 
timeout
--)

373 
	`asm
("NOP");

374 
	`asm
("NOP");

375 
	`asm
("NOP");

377 
	}
}

389 
__√¨_func
 
	$Onbﬂrd_so·_ª£t
( )

391 
	`HAL_DISABLE_INTERRUPTS
();

394 
DMAARM
 = 0x80 | 0x1F;

395 
	`asm
("LJMP 0x0");

396 
	}
}

406 
	$BigLight_On
( )

409 
	}
}

411 
	$BigLight_Off
( )

414 
	}
}

416 
	$BuzzîC⁄åﬁ
–
uöt8
 
⁄
 )

419 ()
⁄
;

420 
	}
}

422 
	$Dimmî
–
uöt8
 
lvl
 )

425 ()
lvl
;

426 
	}
}

429 
uöt8
 
	$GëU£rDùSw
( )

432 
	}
}

	@Projects/zstack/ZMain/TI2530DB/OnBoard.h

41 #i‚de‡
ONBOARD_H


42 
	#ONBOARD_H


	)

44 #ifde‡
__˝lu•lus


53 
	~"hÆ_mcu.h
"

54 
	~"hÆ_u¨t.h
"

55 
	~"hÆ_¶ìp.h
"

56 
	~"oßl.h
"

63 
uöt8
 
aExãndedAddªss
[8];

70 
	#TIMER_DECR_TIME
 1

71 

	)

73 
	#TICK_TIME
 1000

74 

	)

78 
	#TICK_COUNT
 1

79 

	)

83 
	#ALWAYS1
 0x01

84 
	#CACHDIS
 0x02

85 
	#FMAP0
 0x10

86 
	#FMAP1
 0x20

87 
	#FMAP
 0x30

88 
	#MUNIF
 0x40

89 

	)

91 
	#PMODESET
 0x01

92 

	)

94 
	#LRESET
 0x18

95 
	#RESETPO
 0x00

96 
	#RESETEX
 0x08

97 
	#RESETWD
 0x10

98 

	)

101 
	#GPIO_0
 0x01

102 
	#GPIO_1
 0x02

103 
	#GPIO_2
 0x04

104 
	#GPIO_3
 0x08

105 
	#GPIO_4
 0x10

106 
	#GPIO_5
 0x20

107 
	#GPIO_6
 0x40

108 
	#GPIO_7
 0x80

109 

	)

113 
	#WDINT0
 0x01

114 
	#WDINT1
 0x02

115 
	#WDINT
 0x03

116 
	#WDMODE
 0x04

117 
	#WDEN
 0x08

118 
	#WDCLR0
 0x10

119 
	#WDCLR1
 0x20

120 
	#WDCLR2
 0x40

121 
	#WDCLR3
 0x80

122 
	#WDCLR
 0xF0

123 

	)

125 
	#WDTISH
 0x03

126 
	#WDTIMD
 0x02

127 
	#WDTILG
 0x01

128 
	#WDTIMX
 0x00

129 

	)

131 
	#WDCLP1
 0xA0

132 
	#WDCLP2
 0x50

133 

	)

140 
	#SW_BYPASS_NV
 
HAL_KEY_SW_5


141 
	#SW_BYPASS_START
 
HAL_KEY_SW_1


142 

	)

144 #ifde‡
LCD_SUPPORTED


145 #i‡!
deföed
 
DEBUG


146 
	#DEBUG
 0

	)

148 #i‡
LCD_SUPPORTED
==
DEBUG


149 
	#SERIAL_DEBUG_SUPPORTED


151 #ñ£ // NÿLCD suµ‹t

	)

152 #unde‡
SERIAL_DEBUG_SUPPORTED


156 #i‡
deföed
 (
ZAPP_P1
)

157 
	#ZAPP_PORT
 
HAL_UART_PORT_0


	)

158 #ñi‡
deföed
 (
ZAPP_P2
)

159 
	#ZAPP_PORT
 
HAL_UART_PORT_1


	)

161 #unde‡
ZAPP_PORT


163 #i‡
deföed
 (
ZTOOL_P1
)

164 
	#ZTOOL_PORT
 
HAL_UART_PORT_0


	)

165 #ñi‡
deföed
 (
ZTOOL_P2
)

166 
	#ZTOOL_PORT
 
HAL_UART_PORT_1


	)

168 #unde‡
ZTOOL_PORT


171 
	#MT_UART_TX_BUFF_MAX
 128

	)

172 
	#MT_UART_RX_BUFF_MAX
 128

	)

173 
	#MT_UART_THRESHOLD
 (
MT_UART_RX_BUFF_MAX
 / 2)

	)

174 
	#MT_UART_IDLE_TIMEOUT
 6

	)

178 
	#Sy°emRe£t
() \

180 
	`HAL_DISABLE_INTERRUPTS
(); \

181 
	`HAL_SYSTEM_RESET
(); \

182 }

	)

184 
	#Sy°emRe£tSo·
(Ë
	`Onbﬂrd_so·_ª£t
()

	)

187 
	#Re£tRós⁄
(Ë((
SLEEPSTA
 >> 3Ë& 0x03)

	)

190 
	#W©chDogE«bÀ
(
wdti
) \

192 
WDCTL
 = 
WDCLP1
 | 
WDEN
 | (
wdti
 & 
WDINT
); \

193 
WDCTL
 = 
WDCLP2
 | 
WDEN
 | (
wdti
 & 
WDINT
); \

194 }

	)

197 
	#Mi¸oWaô
(
t
Ë
	`Onbﬂrd_waô
—)

	)

199 
	#OSAL_SET_CPU_INTO_SLEEP
(
timeout
Ë
	`hÆSÀï
—imeout);

	)

201 #ifde‡
__IAR_SYSTEMS_ICC__


203 
	#CSTACK_BEG
 ((
uöt8
 c⁄° *)(
	`_Pøgma
("£gmít=\"XSTACK\""Ë
	`__£gmít_begö
("XSTACK")))

	)

204 
	#CSTACK_END
 ((
uöt8
 c⁄° *)(
	`_Pøgma
("£gmít=\"XSTACK\""Ë
	`__£gmít_íd
("XSTACK"))-1)

	)

206 
	#STACK_INIT_VALUE
 0xCD

	)

208 #îr‹ 
Check
 
compûî
 
com∑tibûôy
.

214 #i‡!
deföed
 
INT_HEAP_LEN


215 #i‡
deföed
 
RTR_NWK


216 
	#INT_HEAP_LEN
 3072

	)

218 
	#INT_HEAP_LEN
 2048

	)

221 
	#MAXMEMHEAP
 
INT_HEAP_LEN


	)

223 
	#KEY_CHANGE_SHIFT_IDX
 1

	)

224 
	#KEY_CHANGE_KEYS_IDX
 2

	)

227 
	#OB_COLD
 0

	)

228 
	#OB_WARM
 1

	)

229 
	#OB_READY
 2

	)

231 #ifde‡
LCD_SUPPORTED


232 
	#BUZZER_OFF
 0

	)

233 
	#BUZZER_ON
 1

	)

234 
	#BUZZER_BLIP
 2

	)

239 
oßl_evít_hdr_t
 
	ghdr
;

240 
uöt8
 
	g°©e
;

241 
uöt8
 
	gkeys
;

242 } 
	tkeyCh™ge_t
;

252 
InôBﬂrd
–
uöt8
 
Àvñ
 );

257 
uöt32
 
TimîEœp£d
( );

262 
uöt8
 
Regi°îF‹Keys
–uöt8 
èsk_id
 );

269 
uöt8
 
OnBﬂrd_SídKeys
–uöt8 
keys
, uöt8 
shi·
 );

275 
_ôﬂ
–
uöt16
 
num
, 
uöt8
 *
buf
, uöt8 
ødix
 );

278 
Dimmî
–
uöt8
 
lvl
 );

284 
BigLight_On
( );

289 
BigLight_Off
( );

295 
BuzzîC⁄åﬁ
–
uöt8
 
⁄
 );

300 
uöt8
 
GëU£rDùSw
( );

305 
uöt16
 
OnBﬂrd_°ack_u£d
( );

310 
OnBﬂrd_KeyCÆlback
 ( 
uöt8
 
keys
, uöt8 
°©e
 );

315 
uöt16
 
Onbﬂrd_ønd
( );

320 
Onbﬂrd_waô
–
uöt16
 
timeout
 );

325 
__√¨_func
 
Onbﬂrd_so·_ª£t
( );

330 #ifde‡
__˝lu•lus


	@Projects/zstack/ZMain/TI2530DB/ZMain.c

45 #i‚de‡
NONWK


46 
	~"AF.h
"

48 
	~"hÆ_adc.h
"

49 
	~"hÆ_Êash.h
"

50 
	~"hÆ_lcd.h
"

51 
	~"hÆ_Àd.h
"

52 
	~"hÆ_drivîs.h
"

53 
	~"OnBﬂrd.h
"

54 
	~"OSAL.h
"

55 
	~"OSAL_Nv.h
"

56 
	~"ZComDef.h
"

57 
	~"ZMAC.h
"

63 
zmaö_ext_addr
( );

64 #i‡
deföed
 
ZCL_KEY_ESTABLISH


65 
zmaö_˚π_öô
( );

67 
zmaö_dev_öfo
( );

68 
zmaö_vdd_check
( );

70 #ifde‡
LCD_SUPPORTED


71 
zmaö_lcd_öô
( );

79 
	$maö
( )

82 
	`oßl_öt_dißbÀ
–
INTS_ALL
 );

85 
	`HAL_BOARD_INIT
();

88 
	`zmaö_vdd_check
();

91 
	`InôBﬂrd
–
OB_COLD
 );

94 
	`HÆDrivîInô
();

97 
	`oßl_nv_öô
–
NULL
 );

100 
	`ZMacInô
();

103 
	`zmaö_ext_addr
();

105 #i‡
deföed
 
ZCL_KEY_ESTABLISH


107 
	`zmaö_˚π_öô
();

111 
	`zgInô
();

113 #i‚de‡
NONWK


115 
	`afInô
();

119 
	`oßl_öô_sy°em
();

122 
	`oßl_öt_íabÀ
–
INTS_ALL
 );

125 
	`InôBﬂrd
–
OB_READY
 );

128 
	`zmaö_dev_öfo
();

131 #ifde‡
LCD_SUPPORTED


132 
	`zmaö_lcd_öô
();

135 #ifde‡
WDT_IN_PM1


137 
	`W©chDogE«bÀ
–
WDTIMX
 );

140 
	`oßl_°¨t_sy°em
();

143 
	}
}

150 
	$zmaö_vdd_check
( )

152 
uöt8
 
˙t
 = 16;

155 !
	`HÆAdcCheckVdd
(
VDD_MIN_RUN
));

156 } --
˙t
);

157 
	}
}

176 
	$zmaö_ext_addr
()

178 
uöt8
 
nuŒAddr
[
Z_EXTADDR_LEN
] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

179 
uöt8
 
wrôeNV
 = 
TRUE
;

182 i‡((
SUCCESS
 !
	`oßl_nv_ôem_öô
(
ZCD_NV_EXTADDR
, 
Z_EXTADDR_LEN
, 
NULL
)) ||

183 (
SUCCESS
 !
	`oßl_nv_ªad
(
ZCD_NV_EXTADDR
, 0, 
Z_EXTADDR_LEN
, 
aExãndedAddªss
)) ||

184 (
	`oßl_memcmp
(
aExãndedAddªss
, 
nuŒAddr
, 
Z_EXTADDR_LEN
)))

188 
	`HÆFœshRód
(
HAL_FLASH_IEEE_PAGE
, 
HAL_FLASH_IEEE_OSET
, 
aExãndedAddªss
, 
Z_EXTADDR_LEN
);

190 i‡(
	`oßl_memcmp
(
aExãndedAddªss
, 
nuŒAddr
, 
Z_EXTADDR_LEN
))

193 i‡(!
	`oßl_memcmp
((
uöt8
 *)(
P_INFOPAGE
+
HAL_INFOP_IEEE_OSET
), 
nuŒAddr
, 
Z_EXTADDR_LEN
))

195 
	`oßl_mem˝y
(
aExãndedAddªss
, (
uöt8
 *)(
P_INFOPAGE
+
HAL_INFOP_IEEE_OSET
), 
Z_EXTADDR_LEN
);

199 
uöt8
 
idx
;

201 #i‡!
	`deföed
 ( 
NV_RESTORE
 )

202 
wrôeNV
 = 
FALSE
;

209 
idx
 = 0; idx < (
Z_EXTADDR_LEN
 - 2);)

211 
uöt16
 
øndy
 = 
	`oßl_ønd
();

212 
aExãndedAddªss
[
idx
++] = 
	`LO_UINT16
(
øndy
);

213 
aExãndedAddªss
[
idx
++] = 
	`HI_UINT16
(
øndy
);

216 #i‡
ZG_BUILD_COORDINATOR_TYPE
 && !
ZG_BUILD_JOINING_TYPE


217 
aExãndedAddªss
[
idx
++] = 0x10;

218 #ñi‡
ZG_BUILD_RTRONLY_TYPE


219 
aExãndedAddªss
[
idx
++] = 0x20;

221 
aExãndedAddªss
[
idx
++] = 0x30;

224 
aExãndedAddªss
[
idx
] = 0xF8;

228 i‡(
wrôeNV
)

230 ()
	`oßl_nv_wrôe
(
ZCD_NV_EXTADDR
, 0, 
Z_EXTADDR_LEN
, 
aExãndedAddªss
);

235 ()
	`ZMacSëReq
(
MAC_EXTENDED_ADDRESS
, 
aExãndedAddªss
);

236 
	}
}

238 #i‡
deföed
 
ZCL_KEY_ESTABLISH


255 
	$zmaö_˚π_öô
()

257 
uöt8
 
˚πD©a
[
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
];

258 
uöt8
 
nuŒD©a
[
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
] = {

267 ()
	`oßl_nv_ôem_öô
(
ZCD_NV_IMPLICIT_CERTIFICATE
, 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
, 
NULL
);

268 ()
	`oßl_nv_ôem_öô
(
ZCD_NV_DEVICE_PRIVATE_KEY
, 
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
, 
NULL
);

272 i‡((
SUCCESS
 !
	`oßl_nv_ôem_öô
(
ZCD_NV_CA_PUBLIC_KEY
, 
ZCL_KE_CA_PUBLIC_KEY_LEN
, 
NULL
)) ||

273 (
SUCCESS
 !
	`oßl_nv_ªad
(
ZCD_NV_CA_PUBLIC_KEY
, 0, 
ZCL_KE_CA_PUBLIC_KEY_LEN
, 
˚πD©a
)) ||

274 (
	`oßl_memcmp
(
˚πD©a
, 
nuŒD©a
, 
ZCL_KE_CA_PUBLIC_KEY_LEN
)))

277 
	`HÆFœshRód
(
HAL_FLASH_IEEE_PAGE
, 
HAL_FLASH_CA_PUBLIC_KEY_OSET
, 
˚πD©a
,

278 
ZCL_KE_CA_PUBLIC_KEY_LEN
);

280 i‡(!
	`oßl_memcmp
(
˚πD©a
, 
nuŒD©a
, 
ZCL_KE_CA_PUBLIC_KEY_LEN
))

282 ()
	`oßl_nv_wrôe
(
ZCD_NV_CA_PUBLIC_KEY
, 0, 
ZCL_KE_CA_PUBLIC_KEY_LEN
, 
˚πD©a
);

283 
	`HÆFœshRód
(
HAL_FLASH_IEEE_PAGE
, 
HAL_FLASH_IMPLICIT_CERT_OSET
, 
˚πD©a
,

284 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
);

285 ()
	`oßl_nv_wrôe
(
ZCD_NV_IMPLICIT_CERTIFICATE
, 0,

286 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
, 
˚πD©a
);

287 
	`HÆFœshRód
(
HAL_FLASH_IEEE_PAGE
, 
HAL_FLASH_DEV_PRIVATE_KEY_OSET
, 
˚πD©a
,

288 
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
);

289 ()
	`oßl_nv_wrôe
(
ZCD_NV_DEVICE_PRIVATE_KEY
, 0, 
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
, 
˚πD©a
);

292 
	}
}

311 
	$zmaö_dev_öfo
()

313 #ifde‡
LCD_SUPPORTED


314 
uöt8
 
i
;

315 
uöt8
 *
xad
;

316 
uöt8
 
lcd_buf
[
Z_EXTADDR_LEN
*2+1];

319 
xad
 = 
aExãndedAddªss
 + 
Z_EXTADDR_LEN
 - 1;

321 
i
 = 0; i < 
Z_EXTADDR_LEN
*2; 
xad
--)

323 
uöt8
 
ch
;

324 
ch
 = (*
xad
 >> 4) & 0x0F;

325 
lcd_buf
[
i
++] = 
ch
 + (( ch < 10 ) ? '0' : '7');

326 
ch
 = *
xad
 & 0x0F;

327 
lcd_buf
[
i
++] = 
ch
 + (( ch < 10 ) ? '0' : '7');

329 
lcd_buf
[
Z_EXTADDR_LEN
*2] = '\0';

330 
	`HÆLcdWrôeSåög
–"IEEE: ", 
HAL_LCD_LINE_1
 );

331 
	`HÆLcdWrôeSåög
–(*)
lcd_buf
, 
HAL_LCD_LINE_2
 );

333 
	}
}

335 #ifde‡
LCD_SUPPORTED


341 
	$zmaö_lcd_öô
 ( )

343 #ifde‡
SERIAL_DEBUG_SUPPORTED


345 
	`HÆLcdWrôeSåög
–"TexasIn°rumíts", 
HAL_LCD_LINE_1
 );

347 #i‡
	`deföed
–
MT_MAC_FUNC
 )

348 #i‡
	`deföed
–
ZDO_COORDINATOR
 )

349 
	`HÆLcdWrôeSåög
–"MAC-MT Co‹d", 
HAL_LCD_LINE_2
 );

351 
	`HÆLcdWrôeSåög
–"MAC-MT Devi˚", 
HAL_LCD_LINE_2
 );

353 #ñi‡
	`deföed
–
MT_NWK_FUNC
 )

354 #i‡
	`deföed
–
ZDO_COORDINATOR
 )

355 
	`HÆLcdWrôeSåög
–"NWK Co‹dö©‹", 
HAL_LCD_LINE_2
 );

357 
	`HÆLcdWrôeSåög
–"NWK Devi˚", 
HAL_LCD_LINE_2
 );

362 
	}
}

	@Projects/zstack/ZMain/TI2530ZNP/OnBoard.c

46 
	~"ZComDef.h
"

47 
	~"ZGlobÆs.h
"

48 
	~"OnBﬂrd.h
"

49 
	~"OSAL.h
"

50 
	~"MT.h
"

51 
	~"MT_SYS.h
"

52 
	~"DebugTø˚.h
"

55 
	~"hÆ_lcd.h
"

56 
	~"hÆ_mcu.h
"

57 
	~"hÆ_timî.h
"

58 
	~"hÆ_key.h
"

59 
	~"hÆ_Àd.h
"

62 
	~"mac_ødio_defs.h
"

69 
	#NO_TASK_ID
 0xFF

	)

72 
	#MIN_RAM_INIT
 12

	)

78 #i‡
deföed
 
MAKE_CRC_SHDW


79 #¥agm®
loˇti⁄
="CRC_SHDW"

80 c⁄° 
CODE
 
uöt16
 
	g_¸cShdw
 = 0xFFFF;

81 #¥agm®
ªquúed
=
_¸cShdw


85 #i‡
deföed
 
FAKE_CRC_SHDW


86 #¥agm®
loˇti⁄
="CRC_SHDW"

87 c⁄° 
CODE
 
uöt16
 
	g_¸cShdw
 = 0x2010;

88 #¥agm®
ªquúed
=
_¸cShdw


89 #¥agm®
loˇti⁄
="CHECKSUM"

90 c⁄° 
CODE
 
uöt16
 
	g_¸cFake
 = 0x2010;

91 #¥agm®
ªquúed
=
_¸cFake


94 #¥agm®
loˇti⁄
="LOCK_BITS_ADDRESS_SPACE"

95 
__no_öô
 
uöt8
 
	g_lockBôs
[16];

96 #¥agm®
ªquúed
=
_lockBôs


98 #i‡
deföed
 
ZCL_KEY_ESTABLISH


99 
	~"z˛_˚π_d©a.c
"

101 #¥agm®
loˇti⁄
="IEEE_ADDRESS_SPACE"

102 
__no_öô
 
uöt8
 
	g_nvIEEE
[
Z_EXTADDR_LEN
];

103 #¥agm®
ªquúed
=
_nvIEEE


106 #¥agm®
loˇti⁄
="RESERVED_ADDRESS_SPACE"

107 
__no_öô
 
uöt8
 
	g_ª£rved
[1932];

108 #¥agm®
ªquúed
=
_ª£rved


112 
uöt8
 
	gaExãndedAddªss
[8];

119 
uöt8
 
	gªgi°îedKeysTaskID
 = 
NO_TASK_ID
;

125 
ChkRe£t
( );

133 
	$InôBﬂrd
–
uöt8
 
Àvñ
 )

135 i‡–
Àvñ
 =
OB_COLD
 )

138 *(
uöt8
 *)0x0 = 0;

140 
	`oßl_öt_dißbÀ
–
INTS_ALL
 );

142 
	`ChkRe£t
();

145 #i‡
deföed
 
CC2531ZNP


146 
z≈Cfg1
 = 
ZNP_CFG1_UART
;

147 #ñi‡
deföed
 
CC2530_MK


148 
z≈Cfg1
 = 
ZNP_CFG1_SPI
;

149 
z≈Cfg0
 = 
ZNP_CFG0_32K_OSC
;

151 
z≈Cfg1
 = 
P2_0
;

152 
z≈Cfg0
 = 
P1_2
;

154 
P1INP
 |
	`BV
(2);

155 
P2INP
 |
	`BV
(0);

161 
	`HÆKeyC⁄fig
(
HAL_KEY_INTERRUPT_DISABLE
, 
OnBﬂrd_KeyCÆlback
);

163 
	}
}

173 
	$ChkRe£t
( )

175 
uöt8
 
rib
;

178 
rib
 = 
SLEEPSTA
 & 
LRESET
;

180 i‡–
rib
 =
RESETPO
 )

184 i‡–
rib
 =
RESETEX
 )

188 i‡–
rib
 =
RESETWD
 )

194 
	`HAL_ASSERT
(0);

196 
	}
}

211 
uöt8
 
	$Regi°îF‹Keys
–
uöt8
 
èsk_id
 )

214 i‡–
ªgi°îedKeysTaskID
 =
NO_TASK_ID
 )

216 
ªgi°îedKeysTaskID
 = 
èsk_id
;

217  ( 
åue
 );

220  ( 
Ál£
 );

221 
	}
}

233 
uöt8
 
	$OnBﬂrd_SídKeys
–
uöt8
 
keys
, uöt8 
°©e
 )

235 
keyCh™ge_t
 *
msgPå
;

237 i‡–
ªgi°îedKeysTaskID
 !
NO_TASK_ID
 )

240 
msgPå
 = (
keyCh™ge_t
 *)
	`oßl_msg_Æloˇã
( (keyChange_t) );

241 i‡–
msgPå
 )

243 
msgPå
->
hdr
.
evít
 = 
KEY_CHANGE
;

244 
msgPå
->
°©e
 = state;

245 
msgPå
->
keys
 = keys;

247 
	`oßl_msg_£nd
–
ªgi°îedKeysTaskID
, (
uöt8
 *)
msgPå
 );

249  ( 
ZSuc˚ss
 );

252  ( 
ZFaûuª
 );

253 
	}
}

265 
	$OnBﬂrd_KeyCÆlback
 ( 
uöt8
 
keys
, uöt8 
°©e
 )

267 
uöt8
 
shi·
;

268 ()
°©e
;

270 
shi·
 = (
keys
 & 
HAL_KEY_SW_6
Ë? 
åue
 : 
Ál£
;

272 i‡–
	`OnBﬂrd_SídKeys
–
keys
, 
shi·
 ) !
ZSuc˚ss
 )

275 i‡–
keys
 & 
HAL_KEY_SW_1
 )

279 i‡–
keys
 & 
HAL_KEY_SW_2
 )

283 i‡–
keys
 & 
HAL_KEY_SW_3
 )

287 i‡–
keys
 & 
HAL_KEY_SW_4
 )

291 i‡–
keys
 & 
HAL_KEY_SW_5
 )

295 i‡–
keys
 & 
HAL_KEY_SW_6
 )

299 
	}
}

310 
uöt16
 
	$OnBﬂrd_°ack_u£d
()

312 
uöt8
 c⁄° *
±r
;

313 
uöt8
 
˙t
 = 0;

315 
±r
 = 
CSTACK_END
;Öå > 
CSTACK_BEG
;Ötr--)

317 i‡(
STACK_INIT_VALUE
 =*
±r
)

319 i‡(++
˙t
 >
MIN_RAM_INIT
)

321 
±r
 +
MIN_RAM_INIT
;

327 
˙t
 = 0;

331  (
uöt16
)(
CSTACK_END
 - 
±r
 + 1);

332 
	}
}

346 
	$_ôﬂ
(
uöt16
 
num
, 
uöt8
 *
buf
, uöt8 
ødix
)

348 
c
,
i
;

349 
uöt8
 *
p
, 
r°
[5];

351 
p
 = 
r°
;

352  
i
=0; i<5; i++,
p
++ )

354 
c
 = 
num
 % 
ødix
;

355 *
p
 = 
c
 + (( c < 10 ) ? '0' : '7');

356 
num
 /
ødix
;

357 i‡–!
num
 )

361  
c
=0 ; c<=
i
; c++ )

362 *
buf
++ = *
p
--;

364 *
buf
 = '\0';

365 
	}
}

377 
uöt16
 
	$Onbﬂrd_ønd
( )

379  ( 
	`MAC_RADIO_RANDOM_WORD
() );

380 
	}
}

392 
	$Onbﬂrd_waô
–
uöt16
 
timeout
 )

394 
timeout
--)

396 
	`asm
("NOP");

397 
	`asm
("NOP");

398 
	`asm
("NOP");

400 
	}
}

412 
__√¨_func
 
	$Onbﬂrd_so·_ª£t
( )

414 
	`HAL_DISABLE_INTERRUPTS
();

417 
DMAARM
 = 0x80 | 0x1F;

418 
	`asm
("LJMP 0x0");

419 
	}
}

429 
	$BigLight_On
( )

432 
	}
}

434 
	$BigLight_Off
( )

437 
	}
}

439 
	$BuzzîC⁄åﬁ
–
uöt8
 
⁄
 )

442 ()
⁄
;

443 
	}
}

445 
	$Dimmî
–
uöt8
 
lvl
 )

448 ()
lvl
;

449 
	}
}

452 
uöt8
 
	$GëU£rDùSw
( )

455 
	}
}

	@Projects/zstack/ZMain/TI2530ZNP/OnBoard.h

41 #i‚de‡
ONBOARD_H


42 
	#ONBOARD_H


	)

44 #ifde‡
__˝lu•lus


53 
	~"hÆ_mcu.h
"

54 
	~"hÆ_u¨t.h
"

55 
	~"hÆ_¶ìp.h
"

56 
	~"oßl.h
"

63 
uöt8
 
aExãndedAddªss
[8];

70 
	#TIMER_DECR_TIME
 1

71 

	)

73 
	#TICK_TIME
 1000

74 

	)

78 
	#TICK_COUNT
 1

79 

	)

83 
	#ALWAYS1
 0x01

84 
	#CACHDIS
 0x02

85 
	#FMAP0
 0x10

86 
	#FMAP1
 0x20

87 
	#FMAP
 0x30

88 
	#MUNIF
 0x40

89 

	)

91 
	#PMODESET
 0x01

92 

	)

94 
	#LRESET
 0x18

95 
	#RESETPO
 0x00

96 
	#RESETEX
 0x08

97 
	#RESETWD
 0x10

98 

	)

101 
	#GPIO_0
 0x01

102 
	#GPIO_1
 0x02

103 
	#GPIO_2
 0x04

104 
	#GPIO_3
 0x08

105 
	#GPIO_4
 0x10

106 
	#GPIO_5
 0x20

107 
	#GPIO_6
 0x40

108 
	#GPIO_7
 0x80

109 

	)

113 
	#WDINT0
 0x01

114 
	#WDINT1
 0x02

115 
	#WDINT
 0x03

116 
	#WDMODE
 0x04

117 
	#WDEN
 0x08

118 
	#WDCLR0
 0x10

119 
	#WDCLR1
 0x20

120 
	#WDCLR2
 0x40

121 
	#WDCLR3
 0x80

122 
	#WDCLR
 0xF0

123 

	)

125 
	#WDTISH
 0x03

126 
	#WDTIMD
 0x02

127 
	#WDTILG
 0x01

128 
	#WDTIMX
 0x00

129 

	)

131 
	#WDCLP1
 0xA0

132 
	#WDCLP2
 0x50

133 

	)

134 #i‡
deföed
 
CC2531ZNP


135 
	#ZNP_CFG1_UART
 0

	)

136 
	#ZNP_CFG1_SPI
 1

	)

137 
uöt8
 
z≈Cfg1
;

146 
	#SW_BYPASS_NV
 
HAL_KEY_SW_5


147 
	#SW_BYPASS_START
 
HAL_KEY_SW_1


148 

	)

150 #ifde‡
LCD_SUPPORTED


151 #i‡!
deföed
 
DEBUG


152 
	#DEBUG
 0

	)

154 #i‡
LCD_SUPPORTED
==
DEBUG


155 
	#SERIAL_DEBUG_SUPPORTED


157 #ñ£ // NÿLCD suµ‹t

	)

158 #unde‡
SERIAL_DEBUG_SUPPORTED


162 #i‡
deföed
 (
ZAPP_P1
)

163 
	#ZAPP_PORT
 
HAL_UART_PORT_0


	)

164 #ñi‡
deföed
 (
ZAPP_P2
)

165 
	#ZAPP_PORT
 
HAL_UART_PORT_1


	)

167 #unde‡
ZAPP_PORT


169 #i‡
deföed
 (
ZTOOL_P1
)

170 
	#ZTOOL_PORT
 
HAL_UART_PORT_0


	)

171 #ñi‡
deföed
 (
ZTOOL_P2
)

172 
	#ZTOOL_PORT
 
HAL_UART_PORT_1


	)

174 #unde‡
ZTOOL_PORT


177 
	#MT_UART_TX_BUFF_MAX
 254

	)

178 
	#MT_UART_RX_BUFF_MAX
 254

	)

179 
	#MT_UART_THRESHOLD
 (
MT_UART_RX_BUFF_MAX
 / 2)

	)

180 
	#MT_UART_IDLE_TIMEOUT
 2

	)

182 
	#HAL_UART_PORT
 0

	)

184 
	#HAL_UART_FLOW_THRESHOLD
 0

	)

185 
	#HAL_UART_RX_BUF_SIZE
 0

	)

186 
	#HAL_UART_TX_BUF_SIZE
 0

	)

187 
	#HAL_UART_IDLE_TIMEOUT
 0

	)

191 
	#Sy°emRe£t
() \

193 
	`HAL_DISABLE_INTERRUPTS
(); \

194 
	`HAL_SYSTEM_RESET
(); \

195 }

	)

197 
	#Sy°emRe£tSo·
(Ë
	`Onbﬂrd_so·_ª£t
()

	)

200 
	#Re£tRós⁄
(Ë((
SLEEPSTA
 >> 3Ë& 0x03)

	)

203 
	#W©chDogE«bÀ
(
wdti
) \

205 
WDCTL
 = 
WDCLP1
 | 
WDEN
 | (
wdti
 & 
WDINT
); \

206 
WDCTL
 = 
WDCLP2
 | 
WDEN
 | (
wdti
 & 
WDINT
); \

207 }

	)

210 
	#Mi¸oWaô
(
t
Ë
	`Onbﬂrd_waô
—)

	)

212 
	#OSAL_SET_CPU_INTO_SLEEP
(
timeout
Ë
	`hÆSÀï
—imeout);

	)

214 #ifde‡
__IAR_SYSTEMS_ICC__


216 
	#CSTACK_BEG
 ((
uöt8
 c⁄° *)(
	`_Pøgma
("£gmít=\"XSTACK\""Ë
	`__£gmít_begö
("XSTACK")))

	)

217 
	#CSTACK_END
 ((
uöt8
 c⁄° *)(
	`_Pøgma
("£gmít=\"XSTACK\""Ë
	`__£gmít_íd
("XSTACK"))-1)

	)

219 
	#STACK_INIT_VALUE
 0xCD

	)

221 #îr‹ 
Check
 
compûî
 
com∑tibûôy
.

224 #i‡!
deföed
 
MAXMEMHEAP


227 #i‡
deföed
 
CC2531ZNP


228 #i‡
deföed
 
TC_LINKKEY_JOIN


229 
	#MAXMEMHEAP
 3230

	)

231 
	#MAXMEMHEAP
 3400

	)

234 #i‡
deföed
 
TC_LINKKEY_JOIN


235 
	#MAXMEMHEAP
 2600

	)

237 
	#MAXMEMHEAP
 2770

	)

242 
	#KEY_CHANGE_SHIFT_IDX
 1

	)

243 
	#KEY_CHANGE_KEYS_IDX
 2

	)

246 
	#OB_COLD
 0

	)

247 
	#OB_WARM
 1

	)

248 
	#OB_READY
 2

	)

250 #ifde‡
LCD_SUPPORTED


251 
	#BUZZER_OFF
 0

	)

252 
	#BUZZER_ON
 1

	)

253 
	#BUZZER_BLIP
 2

	)

258 
oßl_evít_hdr_t
 
	ghdr
;

259 
uöt8
 
	g°©e
;

260 
uöt8
 
	gkeys
;

261 } 
	tkeyCh™ge_t
;

271 
InôBﬂrd
–
uöt8
 
Àvñ
 );

276 
uöt32
 
TimîEœp£d
( );

281 
uöt8
 
Regi°îF‹Keys
–uöt8 
èsk_id
 );

288 
uöt8
 
OnBﬂrd_SídKeys
–uöt8 
keys
, uöt8 
shi·
 );

294 
_ôﬂ
–
uöt16
 
num
, 
uöt8
 *
buf
, uöt8 
ødix
 );

297 
Dimmî
–
uöt8
 
lvl
 );

303 
BigLight_On
( );

308 
BigLight_Off
( );

314 
BuzzîC⁄åﬁ
–
uöt8
 
⁄
 );

319 
uöt8
 
GëU£rDùSw
( );

324 
uöt16
 
OnBﬂrd_°ack_u£d
( );

329 
OnBﬂrd_KeyCÆlback
 ( 
uöt8
 
keys
, uöt8 
°©e
 );

334 
uöt16
 
Onbﬂrd_ønd
( );

339 
Onbﬂrd_waô
–
uöt16
 
timeout
 );

344 
__√¨_func
 
Onbﬂrd_so·_ª£t
( );

349 #ifde‡
__˝lu•lus


	@Projects/zstack/ZMain/TI2530ZNP/ZMain.c

45 #i‚de‡
NONWK


46 
	~"AF.h
"

48 
	~"hÆ_adc.h
"

49 
	~"hÆ_Êash.h
"

50 
	~"hÆ_lcd.h
"

51 
	~"hÆ_Àd.h
"

52 
	~"hÆ_drivîs.h
"

53 
	~"OnBﬂrd.h
"

54 
	~"OSAL.h
"

55 
	~"OSAL_Nv.h
"

56 
	~"ZComDef.h
"

57 
	~"ZMAC.h
"

58 
	~"z≈_≠p.h
"

60 
oßl_°¨t_z≈
( );

66 
zmaö_ext_addr
( );

67 #i‡
deföed
 
ZCL_KEY_ESTABLISH


68 
zmaö_˚π_öô
( );

70 
zmaö_dev_öfo
( );

71 
zmaö_vdd_check
( );

73 #ifde‡
LCD_SUPPORTED


74 
zmaö_lcd_öô
( );

82 
	$maö
( )

85 
	`oßl_öt_dißbÀ
–
INTS_ALL
 );

88 
	`HAL_BOARD_INIT
();

91 
	`zmaö_vdd_check
();

94 
	`InôBﬂrd
–
OB_COLD
 );

97 
	`HÆDrivîInô
();

100 
	`oßl_nv_öô
–
NULL
 );

103 
	`z≈Te°RF
();

106 
	`ZMacInô
();

109 
	`zmaö_ext_addr
();

111 #i‡
deföed
 
ZCL_KEY_ESTABLISH


113 
	`zmaö_˚π_öô
();

117 
	`zgInô
();

119 #i‚de‡
NONWK


121 
	`afInô
();

125 
	`oßl_öô_sy°em
();

128 
	`oßl_öt_íabÀ
–
INTS_ALL
 );

131 
	`InôBﬂrd
–
OB_READY
 );

134 
	`zmaö_dev_öfo
();

137 #ifde‡
LCD_SUPPORTED


138 
	`zmaö_lcd_öô
();

141 #ifde‡
WDT_IN_PM1


143 
	`W©chDogE«bÀ
–
WDTIMX
 );

146 
	`oßl_°¨t_z≈
();

149 
	}
}

156 
	$zmaö_vdd_check
( )

158 
uöt8
 
˙t
 = 16;

161 !
	`HÆAdcCheckVdd
(
VDD_MIN_RUN
));

162 } --
˙t
);

163 
	}
}

182 
	$zmaö_ext_addr
()

184 
uöt8
 
nuŒAddr
[
Z_EXTADDR_LEN
] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

185 
uöt8
 
wrôeNV
 = 
TRUE
;

188 i‡((
SUCCESS
 !
	`oßl_nv_ôem_öô
(
ZCD_NV_EXTADDR
, 
Z_EXTADDR_LEN
, 
NULL
)) ||

189 (
SUCCESS
 !
	`oßl_nv_ªad
(
ZCD_NV_EXTADDR
, 0, 
Z_EXTADDR_LEN
, 
aExãndedAddªss
)) ||

190 (
	`oßl_memcmp
(
aExãndedAddªss
, 
nuŒAddr
, 
Z_EXTADDR_LEN
)))

194 
	`HÆFœshRód
(
HAL_FLASH_IEEE_PAGE
, 
HAL_FLASH_IEEE_OSET
, 
aExãndedAddªss
, 
Z_EXTADDR_LEN
);

196 i‡(
	`oßl_memcmp
(
aExãndedAddªss
, 
nuŒAddr
, 
Z_EXTADDR_LEN
))

199 i‡(!
	`oßl_memcmp
((
uöt8
 *)(
P_INFOPAGE
+
HAL_INFOP_IEEE_OSET
), 
nuŒAddr
, 
Z_EXTADDR_LEN
))

201 
	`oßl_mem˝y
(
aExãndedAddªss
, (
uöt8
 *)(
P_INFOPAGE
+
HAL_INFOP_IEEE_OSET
), 
Z_EXTADDR_LEN
);

205 
uöt8
 
idx
;

207 #i‡!
	`deföed
 ( 
NV_RESTORE
 )

208 
wrôeNV
 = 
FALSE
;

215 
idx
 = 0; idx < (
Z_EXTADDR_LEN
 - 2);)

217 
uöt16
 
øndy
 = 
	`oßl_ønd
();

218 
aExãndedAddªss
[
idx
++] = 
	`LO_UINT16
(
øndy
);

219 
aExãndedAddªss
[
idx
++] = 
	`HI_UINT16
(
øndy
);

222 #i‡
ZG_BUILD_COORDINATOR_TYPE
 && !
ZG_BUILD_JOINING_TYPE


223 
aExãndedAddªss
[
idx
++] = 0x10;

224 #ñi‡
ZG_BUILD_RTRONLY_TYPE


225 
aExãndedAddªss
[
idx
++] = 0x20;

227 
aExãndedAddªss
[
idx
++] = 0x30;

230 
aExãndedAddªss
[
idx
] = 0xF8;

234 i‡(
wrôeNV
)

236 ()
	`oßl_nv_wrôe
(
ZCD_NV_EXTADDR
, 0, 
Z_EXTADDR_LEN
, 
aExãndedAddªss
);

241 ()
	`ZMacSëReq
(
MAC_EXTENDED_ADDRESS
, 
aExãndedAddªss
);

242 
	}
}

244 #i‡
deföed
 
ZCL_KEY_ESTABLISH


261 
	$zmaö_˚π_öô
()

263 
uöt8
 
˚πD©a
[
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
];

264 
uöt8
 
nuŒD©a
[
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
] = {

273 ()
	`oßl_nv_ôem_öô
(
ZCD_NV_IMPLICIT_CERTIFICATE
, 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
, 
NULL
);

274 ()
	`oßl_nv_ôem_öô
(
ZCD_NV_DEVICE_PRIVATE_KEY
, 
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
, 
NULL
);

278 i‡((
SUCCESS
 !
	`oßl_nv_ôem_öô
(
ZCD_NV_CA_PUBLIC_KEY
, 
ZCL_KE_CA_PUBLIC_KEY_LEN
, 
NULL
)) ||

279 (
SUCCESS
 !
	`oßl_nv_ªad
(
ZCD_NV_CA_PUBLIC_KEY
, 0, 
ZCL_KE_CA_PUBLIC_KEY_LEN
, 
˚πD©a
)) ||

280 (
	`oßl_memcmp
(
˚πD©a
, 
nuŒD©a
, 
ZCL_KE_CA_PUBLIC_KEY_LEN
)))

283 
	`HÆFœshRód
(
HAL_FLASH_IEEE_PAGE
, 
HAL_FLASH_CA_PUBLIC_KEY_OSET
, 
˚πD©a
,

284 
ZCL_KE_CA_PUBLIC_KEY_LEN
);

286 i‡(!
	`oßl_memcmp
(
˚πD©a
, 
nuŒD©a
, 
ZCL_KE_CA_PUBLIC_KEY_LEN
))

288 ()
	`oßl_nv_wrôe
(
ZCD_NV_CA_PUBLIC_KEY
, 0, 
ZCL_KE_CA_PUBLIC_KEY_LEN
, 
˚πD©a
);

289 
	`HÆFœshRód
(
HAL_FLASH_IEEE_PAGE
, 
HAL_FLASH_IMPLICIT_CERT_OSET
, 
˚πD©a
,

290 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
);

291 ()
	`oßl_nv_wrôe
(
ZCD_NV_IMPLICIT_CERTIFICATE
, 0,

292 
ZCL_KE_IMPLICIT_CERTIFICATE_LEN
, 
˚πD©a
);

293 
	`HÆFœshRód
(
HAL_FLASH_IEEE_PAGE
, 
HAL_FLASH_DEV_PRIVATE_KEY_OSET
, 
˚πD©a
,

294 
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
);

295 ()
	`oßl_nv_wrôe
(
ZCD_NV_DEVICE_PRIVATE_KEY
, 0, 
ZCL_KE_DEVICE_PRIVATE_KEY_LEN
, 
˚πD©a
);

298 
	}
}

317 
	$zmaö_dev_öfo
()

319 #ifde‡
LCD_SUPPORTED


320 
uöt8
 
i
;

321 
uöt8
 *
xad
;

322 
uöt8
 
lcd_buf
[
Z_EXTADDR_LEN
*2+1];

325 
xad
 = 
aExãndedAddªss
 + 
Z_EXTADDR_LEN
 - 1;

327 
i
 = 0; i < 
Z_EXTADDR_LEN
*2; 
xad
--)

329 
uöt8
 
ch
;

330 
ch
 = (*
xad
 >> 4) & 0x0F;

331 
lcd_buf
[
i
++] = 
ch
 + (( ch < 10 ) ? '0' : '7');

332 
ch
 = *
xad
 & 0x0F;

333 
lcd_buf
[
i
++] = 
ch
 + (( ch < 10 ) ? '0' : '7');

335 
lcd_buf
[
Z_EXTADDR_LEN
*2] = '\0';

336 
	`HÆLcdWrôeSåög
–"IEEE: ", 
HAL_LCD_LINE_1
 );

337 
	`HÆLcdWrôeSåög
–(*)
lcd_buf
, 
HAL_LCD_LINE_2
 );

339 
	}
}

341 #ifde‡
LCD_SUPPORTED


347 
	$zmaö_lcd_öô
 ( )

349 #ifde‡
SERIAL_DEBUG_SUPPORTED


351 
	`HÆLcdWrôeSåög
–"TexasIn°rumíts", 
HAL_LCD_LINE_1
 );

353 #i‡
	`deföed
–
MT_MAC_FUNC
 )

354 #i‡
	`deföed
–
ZDO_COORDINATOR
 )

355 
	`HÆLcdWrôeSåög
–"MAC-MT Co‹d", 
HAL_LCD_LINE_2
 );

357 
	`HÆLcdWrôeSåög
–"MAC-MT Devi˚", 
HAL_LCD_LINE_2
 );

359 #ñi‡
	`deföed
–
MT_NWK_FUNC
 )

360 #i‡
	`deföed
–
ZDO_COORDINATOR
 )

361 
	`HÆLcdWrôeSåög
–"NWK Co‹dö©‹", 
HAL_LCD_LINE_2
 );

363 
	`HÆLcdWrôeSåög
–"NWK Devi˚", 
HAL_LCD_LINE_2
 );

368 
	}
}

	@Projects/zstack/ZNP/CC253x/Source/znp_soc.c

47 
	~"comdef.h
"

48 
	~"hÆ_bﬂrd_cfg.h
"

49 
	~"mac_ødio_defs.h
"

50 
	~"MT.h
"

51 
	~"OSAL.h
"

52 
	~"OSAL_Nv.h
"

53 
	~"z≈_≠p.h
"

60 
	#MAC_RADIO_TX_ON
(Ë
	`°
–
RFST
 = 
ISTXON
; )

	)

62 
	#MOD_IF
 4

63 
	#TX_PWR_MOD__SET
(
MOD_
Ë
	`°
 ( \

64 i‡((
MOD_
)) \

66 
MDMTEST1
 |
	`BV
(
MOD_IF
); \

70 
MDMTEST1
 &~
	`BV
(
MOD_IF
); \

72 );

	)

74 
	#TX_PWR_TONE_SET
(
TONE
Ë
	`°
 ( \

75 
MDMTEST0
 &= ~0xF0; \

76 
MDMTEST0
 |(
TONE
 << 4); \

77 )

	)

95 
	$z≈Te°RF
()

97 
uöt8
 
rfTe°P¨ms
[4] = { 0, 0, 0, 0 };

99 i‡((
SUCCESS
 !
	`oßl_nv_ôem_öô
(
ZNP_NV_RF_TEST_PARMS
, 4, 
rfTe°P¨ms
)) ||

100 (
SUCCESS
 !
	`oßl_nv_ªad
(
ZNP_NV_RF_TEST_PARMS
, 0, 4, 
rfTe°P¨ms
)) ||

101 (
rfTe°P¨ms
[0] == 0))

107 
MDMCTRL0
 = 0x85;

108 
RXCTRL
 = 0x3F;

109 
FSCTRL
 = 0x5A;

110 
FSCAL1
 = 0x2B;

111 
AGCCTRL1
 = 0x11;

112 
ADCTEST0
 = 0x10;

113 
ADCTEST1
 = 0x0E;

114 
ADCTEST2
 = 0x03;

116 
FRMCTRL0
 = 0x43;

117 
FRMCTRL1
 = 0x00;

119 
	`MAC_RADIO_RXTX_OFF
();

120 
	`MAC_RADIO_SET_CHANNEL
(
rfTe°P¨ms
[1]);

121 
	`MAC_RADIO_SET_TX_POWER
(
rfTe°P¨ms
[2]);

122 
	`TX_PWR_TONE_SET
(
rfTe°P¨ms
[3]);

124 
rfTe°P¨ms
[0])

127 
	`MAC_RADIO_RX_ON
();

131 
	`TX_PWR_MOD__SET
(1);

138 
	`MAC_RADIO_TX_ON
();

146 ()
	`oßl_mem£t
(
rfTe°P¨ms
, 0, 4);

147 ()
	`oßl_nv_wrôe
(
ZNP_NV_RF_TEST_PARMS
, 0, 4, 
rfTe°P¨ms
);

150 
	}
}

	@Projects/zstack/ZNP/CC253x/Source/znp_spi.c

47 
	~"comdef.h
"

48 
	~"hÆ_as£π.h
"

49 
	~"hÆ_dma.h
"

50 
	~"MT_RPC.h
"

51 
	~"OnBﬂrd.h
"

52 
	~"oßl.h
"

53 #i‡
deföed
 
POWER_SAVING


54 
	~"OSAL_PwrMgr.h
"

56 
	~"ZDAµ.h
"

57 
	~"z≈_≠p.h
"

58 
	~"z≈_•i.h
"

73 #i‡!
deföed
 ( 
NP_SPI_NODEBUG
 )

74 
	#NP_SPI_NODEBUG
 
TRUE


	)

77 #i‡–
NP_SPI_NODEBUG
 )

78 
	#NP_SPI_ASSERT
–
ex¥
 )

	)

80 
	#NP_SPI_ASSERT
–
ex¥
Ë
	`HAL_ASSERT
–ex¥ )

	)

83 #i‡
deföed
 
CC2530_MK


84 
	#DMATRIG_RX
 
HAL_DMA_TRIG_URX0


	)

85 
	#DMATRIG_TX
 
HAL_DMA_TRIG_UTX0


	)

86 
	#DMA_UDBUF
 
NP_SPI_U0DBUF


	)

88 
	#DMATRIG_RX
 
HAL_DMA_TRIG_URX1


	)

89 
	#DMATRIG_TX
 
HAL_DMA_TRIG_UTX1


	)

90 
	#DMA_UDBUF
 
NP_SPI_U1DBUF


	)

93 
	#DMA_RX
() \

94 
	`°
( \

95 vﬁ©ûê
uöt8
 
˛órRx
 = *((uöt8 *)
DMA_UDBUF
); \

97 
	`HAL_DMA_CLEAR_IRQ
(
HAL_DMA_CH_RX
); \

99 
	`HAL_DMA_ARM_CH
(
HAL_DMA_CH_RX
); \

100 )

	)

102 
	#DMA_TX
–
buf
 ) \

103 
	`°
( \

104 
hÆDMADesc_t
 *
ch
 = 
	`HAL_DMA_GET_DESC1234
(
HAL_DMA_CH_TX
); \

106 
	`HAL_DMA_SET_SOURCE
(
ch
, (
buf
)); \

108 
	`HAL_DMA_CLEAR_IRQ
(
HAL_DMA_CH_TX
); \

110 
	`HAL_DMA_ARM_CH
(
HAL_DMA_CH_TX
); \

112 
	`HAL_DMA_START_CH
(
HAL_DMA_CH_TX
); \

113 )

	)

115 
	#HAL_DMA_GET_SOURCE
–
pDesc
, 
§c
 ) \

116 
	`°
( \

117 
§c
 = (
uöt16
)(
pDesc
->
§cAddrH
) << 8; \

118 
§c
 +
pDesc
->
§cAddrL
; \

119 )

	)

126 
	#NP_SPI_U0DBUF
 0x70C1

	)

127 
	#NP_SPI_U1DBUF
 0x70F9

	)

130 
	#CSR_MODE
 0x80

	)

131 
	#CSR_RE
 0x40

	)

132 
	#CSR_SLAVE
 0x20

	)

133 
	#CSR_FE
 0x10

	)

134 
	#CSR_ERR
 0x08

	)

135 
	#CSR_RX_BYTE
 0x04

	)

136 
	#CSR_TX_BYTE
 0x02

	)

137 
	#CSR_ACTIVE
 0x01

	)

140 
	#UCR_FLUSH
 0x80

	)

141 
	#UCR_FLOW
 0x40

	)

142 
	#UCR_D9
 0x20

	)

143 
	#UCR_BIT9
 0x10

	)

144 
	#UCR_PARITY
 0x08

	)

145 
	#UCR_SPB
 0x04

	)

146 
	#UCR_STOP
 0x02

	)

147 
	#UCR_START
 0x01

	)

149 
	#UTX0IE
 0x04

	)

150 
	#UTX1IE
 0x08

	)

152 
	#NP_SPI_RX_SREQ_EVENT
 
ZNP_SPI_RX_SREQ_EVENT


	)

153 
	#NP_SPI_RX_AREQ_EVENT
 
ZNP_SPI_RX_AREQ_EVENT


	)

158 
	#NP_SPI_BUF_LEN
 (
MT_RPC_DATA_MAX
 + 
MT_RPC_FRAME_HDR_SZ
 + 1)

	)

160 #i‡
deföed
 
CC2530_MK


161 
	#NP_RDYIn_BIT
 
	`BV
(0)

	)

162 
	#NP_RDYIn
 
P2_0


	)

163 
	#NP_RDYOut
 
P1_0


	)

164 
	#NP_RDYOut_BIT
 
	`BV
(0)

	)

166 #ñi‡!
deföed
 
CC2530ZNP_MK


168 
	#NP_RDYIn_BIT
 
	`BV
(3)

	)

169 
	#NP_RDYIn
 
P0_3


	)

170 
	#NP_RDYOut
 
P0_4


	)

171 
	#NP_RDYOut_BIT
 
	`BV
(4)

	)

174 
	#NP_CSR_MODE
 
	`BV
(5)

175 

	)

183 
	mNP_SPI_IDLE
,

184 
	mNP_SPI_MRDY
,

185 
	mNP_SPI_WAIT_RX
,

186 
	mNP_SPI_WAIT_TX
,

187 
	mNP_SPI_WAIT_AREQ
,

188 
	mNP_SPI_WAIT_SREQ


189 } 
	t•iSèã_t
;

196 
uöt8
 
	g≈SpiBuf
[
NP_SPI_BUF_LEN
];

198 vﬁ©ûê
•iSèã_t
 
	g≈SpiSèã
;

205 
dmaInô
();

223 
	$dmaInô
()

225 
hÆDMADesc_t
 *
ch
;

228 
ch
 = 
	`HAL_DMA_GET_DESC1234
(
HAL_DMA_CH_TX
);

231 
	`HAL_DMA_SET_SOURCE
(
ch
, 
≈SpiBuf
);

232 
	`HAL_DMA_SET_DEST
(
ch
, 
DMA_UDBUF
);

235 
	`HAL_DMA_SET_VLEN
(
ch
, 
HAL_DMA_VLEN_1_P_VALOFFIRST_P_2
);

236 
	`HAL_DMA_SET_LEN
(
ch
, 
NP_SPI_BUF_LEN
);

239 
	`HAL_DMA_SET_WORD_SIZE
(
ch
, 
HAL_DMA_WORDSIZE_BYTE
);

242 
	`HAL_DMA_SET_TRIG_MODE
(
ch
, 
HAL_DMA_TMODE_SINGLE
);

243 
	`HAL_DMA_SET_TRIG_SRC
(
ch
, 
DMATRIG_TX
);

246 
	`HAL_DMA_SET_SRC_INC
(
ch
, 
HAL_DMA_SRCINC_1
);

249 
	`HAL_DMA_SET_DST_INC
(
ch
, 
HAL_DMA_DSTINC_0
);

252 
	`HAL_DMA_SET_IRQ
(
ch
, 
HAL_DMA_IRQMASK_ENABLE
);

255 
	`HAL_DMA_SET_M8
(
ch
, 
HAL_DMA_M8_USE_8_BITS
);

258 
	`HAL_DMA_SET_PRIORITY
(
ch
, 
HAL_DMA_PRI_HIGH
);

261 
ch
 = 
	`HAL_DMA_GET_DESC1234
(
HAL_DMA_CH_RX
);

264 
	`HAL_DMA_SET_SOURCE
(
ch
, 
DMA_UDBUF
);

265 
	`HAL_DMA_SET_DEST
(
ch
, 
≈SpiBuf
);

268 
	`HAL_DMA_SET_VLEN
(
ch
, 
HAL_DMA_VLEN_1_P_VALOFFIRST_P_2
);

269 
	`HAL_DMA_SET_LEN
(
ch
, 
NP_SPI_BUF_LEN
);

271 
	`HAL_DMA_SET_WORD_SIZE
(
ch
, 
HAL_DMA_WORDSIZE_BYTE
);

274 
	`HAL_DMA_SET_TRIG_MODE
(
ch
, 
HAL_DMA_TMODE_SINGLE
);

275 
	`HAL_DMA_SET_TRIG_SRC
(
ch
, 
DMATRIG_RX
);

278 
	`HAL_DMA_SET_SRC_INC
(
ch
, 
HAL_DMA_SRCINC_0
);

281 
	`HAL_DMA_SET_DST_INC
(
ch
, 
HAL_DMA_DSTINC_1
);

284 
	`HAL_DMA_SET_IRQ
(
ch
, 
HAL_DMA_IRQMASK_ENABLE
);

287 
	`HAL_DMA_SET_M8
(
ch
, 
HAL_DMA_M8_USE_8_BITS
);

290 
	`HAL_DMA_SET_PRIORITY
(
ch
, 
HAL_DMA_PRI_HIGH
);

291 
	}
}

309 #i‡
deföed
 
CC2530_MK


310 
	$≈SpiInô
()

312 i‡(
ZNP_CFG1_UART
 =
z≈Cfg1
)

318 
U0GCR
 |
	`BV
(5);

324 
U0CSR
 = 
NP_CSR_MODE
;

327 
P0SEL
 |= 0x3C;

333 
NP_RDYOut
 = 1;

336 
P1SEL
 &~(
NP_RDYOut_BIT
);

337 
P2SEL
 &~(
NP_RDYIn_BIT
);

340 
P1DIR
 |
NP_RDYOut_BIT
;

341 
P2DIR
 &~
NP_RDYIn_BIT
;

344 
PICTL
 |
	`BV
(3);

347 
P2IFG
 &~
NP_RDYIn_BIT
;

348 
P2IEN
 |
NP_RDYIn_BIT
;

349 
IEN2
 |= 0x02;

351 
	`dmaInô
();

353 
U0CSR
 |
CSR_RE
;

354 
	}
}

356 
	$≈SpiInô
()

358 i‡(
ZNP_CFG1_UART
 =
z≈Cfg1
)

364 
U1GCR
 |
	`BV
(5);

367 
PERCFG
 |= 0x02;

370 
U1CSR
 = 
NP_CSR_MODE
;

373 
P1SEL
 |= 0xF0;

376 
P2SEL
 &= ~0x20;

379 
NP_RDYOut
 = 1;

382 
P0SEL
 &~(
NP_RDYIn_BIT
);

383 
P0SEL
 &~(
NP_RDYOut_BIT
);

386 
P0DIR
 &~
NP_RDYIn_BIT
;

387 
P0DIR
 |
NP_RDYOut_BIT
;

389 
P0INP
 &~
NP_RDYIn_BIT
;

390 
P2INP
 &~
	`BV
(5);

393 
PICTL
 |
	`BV
(0);

396 
P0IFG
 &~
NP_RDYIn_BIT
;

397 
P0IEN
 |
NP_RDYIn_BIT
;

398 
P0IE
 = 1;

400 
	`dmaInô
();

402 
U1CSR
 |
CSR_RE
;

403 
	}
}

423 
	$≈SpiM⁄ô‹
()

425 i‡(
ZNP_CFG1_UART
 =
z≈Cfg1
)

430 #i‡
ZNP_RUN_WDOG


431 i‡((
devSèã
 !
DEV_HOLD
Ë&& (
≈SpiSèã
 =
NP_SPI_IDLE
))

434 
	`W©chDogE«bÀ
–
WDTIMX
 );

438 
≈SpiSèã
)

440 
NP_SPI_IDLE
:

441 
	`NP_SPI_ASSERT
((
P1IFG
 & 
NP_RDYIn_BIT
) == 0);

444 #i‡
deföed
 
POWER_SAVING


445 
NP_SPI_MRDY
:

446 
≈SpiSèã
 = 
NP_SPI_WAIT_RX
;

447 
	`DMA_RX
();

448 
NP_RDYOut
 = 0;

452 
NP_SPI_WAIT_RX
:

453 
	`NP_SPI_ASSERT
((
	`HAL_DMA_CHECK_IRQ
(
HAL_DMA_CH_RX
)) == 0);

456 
NP_SPI_WAIT_TX
:

457 
	`NP_SPI_ASSERT
((
	`HAL_DMA_CHECK_IRQ
(
HAL_DMA_CH_TX
)) == 0);

460 
NP_SPI_WAIT_AREQ
:

464 
	`NP_SPI_ASSERT
(0);

468 i‡(
≈SpiSèã
 =
NP_SPI_IDLE
)

470 *((
uöt8
 *)
DMA_UDBUF
) = 0;

475 i‡((
NP_RDYIn
 =0Ë|| (
	`≈SpiRódyCÆlback
()))

477 
	`≈SpiAReqRódy
();

482 
hÆI¡Sèã_t
 
his
;

484 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

485 i‡(((
≈SpiSèã
 =
NP_SPI_WAIT_RX
) &&

486 (!
	`HAL_DMA_CH_ARMED
(
HAL_DMA_CH_RX
Ë&& !
	`HAL_DMA_CHECK_IRQ
(HAL_DMA_CH_RX)))

487 || ((
≈SpiSèã
 =
NP_SPI_WAIT_TX
) &&

488 (!
	`HAL_DMA_CH_ARMED
(
HAL_DMA_CH_TX
Ë&& !
	`HAL_DMA_CHECK_IRQ
(HAL_DMA_CH_TX))))

490 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

492 i‡(
≈SpiSèã
 =
NP_SPI_WAIT_RX
)

494 
	`≈SpiRxI§
();

498 
	`≈SpiTxI§
();

503 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

507 #i‡
deföed
 
POWER_SAVING


513 
uöt8
 
z≈SpiA˘iveShdw
;

515 i‡(
ZG_DEVICE_ENDDEVICE_TYPE
 && (
≈SpiSèã
 =
NP_SPI_IDLE
))

517 i‡(
z≈SpiA˘iveShdw
)

519 
uöt8
 
rxOnIdÀ
;

520 ()
	`ZMacGëReq
(
ZMacRxOnIdÀ
, &
rxOnIdÀ
);

521 i‡(!
rxOnIdÀ
)

523 
z≈SpiA˘iveShdw
 = 
FALSE
;

524 i‡(
ZSuc˚ss
 !
	`oßl_°¨t_timîEx
(
z≈TaskId
, 
ZNP_PWRMGR_CONSERVE_EVENT
,

525 
ZNP_PWRMGR_CONSERVE_DELAY
))

527 ()
	`oßl_£t_evít
(
z≈TaskId
, 
ZNP_PWRMGR_CONSERVE_EVENT
);

532 i‡(!
z≈SpiA˘iveShdw
)

534 
z≈SpiA˘iveShdw
 = 
TRUE
;

535 ()
	`oßl_°›_timîEx
(
z≈TaskId
, 
ZNP_PWRMGR_CONSERVE_EVENT
);

536 ()
	`oßl_˛ór_evít
(
z≈TaskId
, 
ZNP_PWRMGR_CONSERVE_EVENT
);

537 ()
	`oßl_pwrmgr_èsk_°©e
(
z≈TaskId
, 
PWRMGR_HOLD
);

540 
	}
}

560 
uöt8
 *
	$≈SpiSR•AŒoc
(
uöt8
 
Àn
)

562 i‡(
≈SpiSèã
 =
NP_SPI_WAIT_SREQ
)

564  
≈SpiBuf
;

568  
NULL
;

570 
	}
}

588 
uöt8
 *
	$≈SpiAReqAŒoc
(
uöt8
 
Àn
)

590  
	`oßl_msg_Æloˇã
(
Àn
 + 
MT_RPC_FRAME_HDR_SZ
);

591 
	}
}

609 
	$≈SpiSR•Ródy
(
uöt8
 *
pBuf
)

611 i‡((
≈SpiSèã
 =
NP_SPI_WAIT_SREQ
Ë&& (
NP_RDYOut
 == 0))

613 
≈SpiSèã
 = 
NP_SPI_WAIT_TX
;

614 
	`DMA_TX
–
pBuf
 );

615 
NP_RDYOut
 = 1;

617 
	}
}

636 
	$≈SpiAReqRódy
()

638 
hÆI¡Sèã_t
 
ötSèã
;

639 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

641 i‡(
≈SpiSèã
 =
NP_SPI_IDLE
)

643 
≈SpiSèã
 = 
NP_SPI_WAIT_RX
;

644 
	`DMA_RX
();

645 
NP_RDYOut
 = 0;

648 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

649 
	}
}

668 
	$≈SpiAReqCom∂ëe
()

670 i‡(
≈SpiSèã
 =
NP_SPI_WAIT_AREQ
)

672 
≈SpiSèã
 = 
NP_SPI_IDLE
;

674 
	}
}

693 
uöt8
 *
	$≈SpiGëReqBuf
()

695 i‡(
≈SpiSèã
 !
NP_SPI_IDLE
)

697  
≈SpiBuf
;

701  
NULL
;

703 
	}
}

721 
	$≈SpiMrdyI§
()

723 i‡(
≈SpiSèã
 =
NP_SPI_IDLE
)

725 #i‡
deföed
 
POWER_SAVING


726 i‡(
ZG_DEVICE_ENDDEVICE_TYPE
)

728 
≈SpiSèã
 = 
NP_SPI_MRDY
;

733 
≈SpiSèã
 = 
NP_SPI_WAIT_RX
;

734 
	`DMA_RX
();

735 
NP_RDYOut
 = 0;

738 
	}
}

756 
	$≈SpiRxI§
()

758 
mtRpcCmdTy≥_t
 
ty≥
 = (mtRpcCmdTy≥_t)(
≈SpiBuf
[1] & 
MT_RPC_CMD_TYPE_MASK
);

759 
uöt8
 *
pBuf
, 
rdy
 = 1;

761 
	`NP_SPI_ASSERT
(
≈SpiSèã
 =
NP_SPI_WAIT_RX
);

763 
ty≥
)

765 
MT_RPC_CMD_POLL
:

766 i‡–(
pBuf
 = 
	`≈SpiPﬁlCÆlback
()Ë=
NULL
 )

768 
pBuf
 = 
≈SpiBuf
;

769 
≈SpiBuf
[0] = 0;

770 
≈SpiBuf
[1] = 0;

771 
≈SpiBuf
[2] = 0;

773 
≈SpiSèã
 = 
NP_SPI_WAIT_TX
;

774 
	`DMA_TX
(
pBuf
);

777 
MT_RPC_CMD_SREQ
:

778 
≈SpiSèã
 = 
NP_SPI_WAIT_SREQ
;

779 
	`oßl_£t_evít
(
z≈TaskId
, 
ZNP_SPI_RX_SREQ_EVENT
);

780 
rdy
 = 0;

783 
MT_RPC_CMD_AREQ
:

784 
≈SpiSèã
 = 
NP_SPI_WAIT_AREQ
;

785 
	`oßl_£t_evít
(
z≈TaskId
, 
ZNP_SPI_RX_AREQ_EVENT
);

789 
≈SpiSèã
 = 
NP_SPI_IDLE
;

792 
NP_RDYOut
 = 
rdy
;

793 
	}
}

811 
	$≈SpiTxI§
()

813 
hÆDMADesc_t
 *
ch
 = 
	`HAL_DMA_GET_DESC1234
(
HAL_DMA_CH_TX
);

814 
uöt16
 
§c
;

816 
	`NP_SPI_ASSERT
(
≈SpiSèã
 =
NP_SPI_WAIT_TX
);

818 
	`HAL_DMA_GET_SOURCE
–
ch
, 
§c
 );

820 i‡((
uöt8
 *)
§c
 !
≈SpiBuf
)

822 
	`oßl_msg_dóŒoˇã
((
uöt8
 *)
§c
);

825 
≈SpiSèã
 = 
NP_SPI_IDLE
;

826 
	}
}

844 
boﬁ
 
	$≈SpiIdÀ
()

846  (
≈SpiSèã
 =
NP_SPI_IDLE
 && !
	`≈SpiRódyCÆlback
());

847 
	}
}

865 #i‡
deföed
 
CC2530_MK


866 
	$HAL_ISR_FUNCTION
(
p‹t2I§
, 
P2INT_VECTOR
)

868 
P2IFG
 = 0;

869 
P2IF
 = 0;

871 
	$HAL_ISR_FUNCTION
(
p‹t0I§
, 
P0INT_VECTOR
)

873 
P0IFG
 = 0;

874 
P0IF
 = 0;

880 i‡(
ZNP_CFG1_UART
 =
z≈Cfg1
)

882 
	`oßl_£t_evít
(
z≈TaskId
, 
ZNP_UART_TX_READY_EVENT
);

886 
	`≈SpiMrdyI§
();

889 
	}
}

	@Projects/zstack/ZNP/Source/OSAL_ZNP.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"hÆ_mcu.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Clock.h
"

49 
	~"OSAL_PwrMgr.h
"

50 
	~"OSAL_Tasks.h
"

52 
	~"MT.h
"

53 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

64 #i‡
deföed
 ( 
INTER_PAN
 )

65 
	~"°ub_≠s.h
"

67 
	~"ßpi.h
"

68 
	~"z≈_≠p.h
"

69 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

70 
	~"z˛_key_e°ablish.h
"

78 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

79 
z≈EvítLo›
,

80 
macEvítLo›
,

81 
nwk_evít_lo›
,

82 
APS_evít_lo›
,

83 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

84 
APSF_Pro˚ssEvít
,

86 
ZDAµ_evít_lo›
,

87 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

88 
ZDNwkMgr_evít_lo›
,

90 #i‡
deföed
–
INTER_PAN
 )

91 
StubAPS_Pro˚ssEvít
,

93 
SAPI_Pro˚ssEvít
,

94 #i‡
deföed
 ( 
TC_LINKKEY_JOIN
 )

95 
z˛KeyE°ablish_evít_lo›
,

97 
HÆ_Pro˚ssEvít


100 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

101 
uöt16
 *
	gèsksEvíts
;

107 
oßl_°¨t_z≈
();

108 
oßl_run_èsk
(
uöt8
 
idx
);

119 
	$oßlInôTasks
( )

121 
uöt8
 
èskID
 = 0;

123 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

124 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

126 
	`z≈Inô
–
èskID
++ );

127 
	`macTaskInô
–
èskID
++ );

128 
	`nwk_öô
–
èskID
++ );

129 
	`APS_Inô
–
èskID
++ );

130 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

131 
	`APSF_Inô
–
èskID
++ );

133 
	`ZDAµ_Inô
–
èskID
++ );

134 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

135 
	`ZDNwkMgr_Inô
–
èskID
++ );

137 #i‡
	`deföed
–
INTER_PAN
 )

138 
	`StubAPS_Inô
–
èskID
++ );

140 
	`SAPI_Inô
–
èskID
++ );

141 #i‡
	`deföed
 ( 
TC_LINKKEY_JOIN
 )

142 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

144 
	`HÆ_Inô
–
èskID
 );

145 
	}
}

162 
	$oßl_°¨t_z≈
( )

164 #i‡!
	`deföed
 ( 
ZBIT
 ) && !deföed ( 
UBIT
 )

168 #i‡
	`deföed
–
POWER_SAVING
 )

169 
uöt8
 
busy
 = 
FALSE
;

171 
uöt8
 
idx
;

173 
	`oßlTimeUpd©e
();

174 
	`HÆ_Pro˚ssPﬁl
();

176 
idx
 = 1; idx < 
èsksC¡
; idx++)

178 i‡(
èsksEvíts
[
idx
])

180 
	`oßl_run_èsk
(
idx
);

181 #i‡
	`deföed
–
POWER_SAVING
 )

182 
busy
 = 
TRUE
;

188 i‡(
èsksEvíts
[0])

190 
	`oßl_run_èsk
(0);

191 #i‡
	`deföed
–
POWER_SAVING
 )

192 
busy
 = 
TRUE
;

196 #i‡
	`deföed
–
POWER_SAVING
 )

197 i‡(!
busy
)

199 
	`oßl_pwrmgr_powîc⁄£rve
();

203 
	}
}

220 
	$oßl_run_èsk
(
uöt8
 
idx
)

222 
uöt16
 
evíts
;

223 
hÆI¡Sèã_t
 
ötSèã
;

225 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

226 
evíts
 = 
èsksEvíts
[
idx
];

227 
èsksEvíts
[
idx
] = 0;

228 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

230 
evíts
 = (
èsksAº
[
idx
])( idx,Évents );

232 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

233 
èsksEvíts
[
idx
] |
evíts
;

234 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

235 
	}
}

	@Projects/zstack/ZNP/Source/znp_app.c

45 
	~"hÆ_bﬂrd_cfg.h
"

46 
	~"mac_ødio_defs.h
"

47 
	~"MT.h
"

48 
	~"MT_AF.h
"

49 
	~"MT_SYS.h
"

50 
	~"MT_ZDO.h
"

51 
	~"MT_UART.h
"

52 
	~"MT_UTIL.h
"

53 
	~"OSAL.h
"

54 
	~"OSAL_Nv.h
"

55 #i‡
deföed
 
POWER_SAVING
 || deföed 
CC2531ZNP


56 
	~"OSAL_PwrMgr.h
"

58 
	~"ZComDef.h
"

59 
	~"ZMAC.h
"

60 
	~"z≈_≠p.h
"

61 
	~"z≈_•i.h
"

68 
≈Inô
();

69 
≈InôNV
();

71 
≈U¨tCback
(
uöt8
 
p‹t
, uöt8 
evít
);

72 
≈U¨tTxRódy
();

73 
uöt8
* 
≈MtU¨tAŒoc
(uöt8 
cmd0
, uöt8 
Àn
);

74 
≈MtU¨tSíd
(
uöt8
 *
pBuf
);

76 #i‡!
deföed
 
CC2531ZNP


77 
uöt8
* 
≈MtSpiAŒoc
(uöt8 
cmd0
, uöt8 
Àn
);

78 
≈MtSpiSíd
(
uöt8
 *
pBuf
);

79 
uöt8
* 
≈SpiPﬁlCÆlback
();

80 
boﬁ
 
≈SpiRódyCÆlback
();

88 
oßl_msg_q_t
 
	g≈TxQueue
;

95 
uöt8
 
	gz≈Cfg1
;

96 
uöt8
 
	gz≈Cfg0
;

97 #i‡
deföed
 
TC_LINKKEY_JOIN


98 
uöt8
 
z˛_TaskID
;

99 
z˛Pro˚ssMesßgeMSG
(
afIncomögMSGPackë_t
 *
pkt
);

118 
	$z≈Inô
(
uöt8
 
èskId
)

120 
z≈TaskId
 = 
èskId
;

121 
	`oßl_£t_evít
(
èskId
, 
ZNP_SECONDARY_INIT_EVENT
);

122 
	}
}

142 
uöt16
 
	$z≈EvítLo›
(
uöt8
 
èskId
, 
uöt16
 
evíts
)

144 
oßl_evít_hdr_t
 *
pMsg
;

145 #i‡!
deföed
 
CC2531ZNP


146 
uöt8
 *
pBuf
;

149 i‡(
evíts
 & 
SYS_EVENT_MSG
)

151 i‡((
pMsg
 = (
oßl_evít_hdr_t
 *Ë
	`oßl_msg_ª˚ive
(
z≈TaskId
)Ë!
NULL
)

153 
pMsg
->
evít
)

156 
CMD_SERIAL_MSG
:

157 
	`MT_Pro˚ssIncomög
(((
mtOSALSîülD©a_t
 *)
pMsg
)->
msg
);

160 #i‡
deföed
 
TC_LINKKEY_JOIN


161 #i‡
	`deföed
 (
MT_UTIL_FUNC
)

162 
ZCL_KEY_ESTABLISH_IND
:

163 
	`MT_UtûKeyE°ablishInd
((
keyE°ablishmítInd_t
 *)
pMsg
);

168 
AF_INCOMING_MSG_CMD
:

169 #i‡
deföed
 
TC_LINKKEY_JOIN


170 i‡(
ZCL_KEY_ESTABLISHMENT_ENDPOINT
 =(((
afIncomögMSGPackë_t
 *)
pMsg
)->
ídPoöt
))

172 
	`z˛Pro˚ssMesßgeMSG
((
afIncomögMSGPackë_t
 *)
pMsg
);

177 
	`MT_AfIncomögMsg
((
afIncomögMSGPackë_t
 *)
pMsg
);

181 #ifde‡
MT_ZDO_FUNC


182 
ZDO_STATE_CHANGE
:

183 
	`MT_ZdoSèãCh™geCB
(
pMsg
);

186 
ZDO_CB_MSG
:

187 
	`MT_ZdoSídMsgCB
((
zdoIncomögMsg_t
 *)
pMsg
);

191 
AF_DATA_CONFIRM_CMD
:

192 
	`MT_AfD©aC⁄fúm
((
afD©aC⁄fúm_t
 *)
pMsg
);

199 
	`oßl_msg_dóŒoˇã
((
byã
 *)
pMsg
);

202 
evíts
 ^
SYS_EVENT_MSG
;

204 #i‡!
deföed
 
CC2531ZNP


205 i‡(
evíts
 & 
ZNP_SPI_RX_AREQ_EVENT
)

207 i‡((
pBuf
 = 
	`≈SpiGëReqBuf
()Ë!
NULL
 )

209 
	`MT_Pro˚ssIncomög
(
pBuf
);

210 
	`≈SpiAReqCom∂ëe
();

213 
evíts
 ^
ZNP_SPI_RX_AREQ_EVENT
;

215 i‡(
evíts
 & 
ZNP_SPI_RX_SREQ_EVENT
)

217 i‡((
pBuf
 = 
	`≈SpiGëReqBuf
()Ë!
NULL
)

219 
	`MT_Pro˚ssIncomög
(
pBuf
);

222 
evíts
 ^
ZNP_SPI_RX_SREQ_EVENT
;

225 i‡(
evíts
 & 
ZNP_UART_TX_READY_EVENT
)

227 
	`≈U¨tTxRódy
();

228 
evíts
 ^
ZNP_UART_TX_READY_EVENT
;

230 #i‡
deföed
 
MT_SYS_FUNC


231 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_0
)

233 
	`MT_SysOßlTimîExpúed
(0x00);

234 
evíts
 ^
MT_SYS_OSAL_EVENT_0
;

236 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_1
)

238 
	`MT_SysOßlTimîExpúed
(0x01);

239 
evíts
 ^
MT_SYS_OSAL_EVENT_1
;

241 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_2
)

243 
	`MT_SysOßlTimîExpúed
(0x02);

244 
evíts
 ^
MT_SYS_OSAL_EVENT_2
;

246 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_3
)

248 
	`MT_SysOßlTimîExpúed
(0x03);

249 
evíts
 ^
MT_SYS_OSAL_EVENT_3
;

252 #i‡
deföed
 
POWER_SAVING


253 i‡(
evíts
 & 
ZNP_PWRMGR_CONSERVE_EVENT
)

255 ()
	`oßl_pwrmgr_èsk_°©e
(
z≈TaskId
, 
PWRMGR_CONSERVE
);

256 
evíts
 ^
ZNP_PWRMGR_CONSERVE_EVENT
;

259 i‡(
evíts
 & 
ZNP_SECONDARY_INIT_EVENT
)

261 
	`≈Inô
();

262 
evíts
 ^
ZNP_SECONDARY_INIT_EVENT
;

264 i‡(
evíts
 & 
MT_AF_EXEC_EVT
)

266 
	`MT_AfExec
();

267 
evíts
 ^
MT_AF_EXEC_EVT
;

271 
evíts
 = 0;

274  ( 
evíts
 );

275 
	}
}

294 
uöt8
 *
	$MT_Tøn•‹tAŒoc
(
uöt8
 
cmd0
, uöt8 
Àn
)

296 #i‡!
deföed
 
CC2531ZNP


297 i‡(
ZNP_CFG1_UART
 =
z≈Cfg1
)

300  
	`≈MtU¨tAŒoc
(
cmd0
, 
Àn
);

302 #i‡!
deföed
 
CC2531ZNP


305  
	`≈MtSpiAŒoc
(
cmd0
, 
Àn
);

308 
	}
}

326 
	$MT_Tøn•‹tSíd
(
uöt8
 *
pBuf
)

328 #i‡!
deföed
 
CC2531ZNP


329 i‡(
ZNP_CFG1_UART
 =
z≈Cfg1
)

332 
	`≈MtU¨tSíd
(
pBuf
);

334 #i‡!
deföed
 
CC2531ZNP


337 
	`≈MtSpiSíd
(
pBuf
);

340 
	}
}

364 
	$≈Inô
()

366 i‡(
ZNP_CFG1_UART
 =
z≈Cfg1
)

368 
hÆUARTCfg_t
 
u¨tC⁄fig
;

370 
u¨tC⁄fig
.
c⁄figuªd
 = 
TRUE
;

371 
u¨tC⁄fig
.
baudR©e
 = 
ZNP_UART_BAUD
;

372 
u¨tC⁄fig
.
ÊowC⁄åﬁ
 = 
TRUE
;

373 
u¨tC⁄fig
.
ÊowC⁄åﬁThªshﬁd
 = 
HAL_UART_FLOW_THRESHOLD
;

374 
u¨tC⁄fig
.
rx
.
maxBufSize
 = 
HAL_UART_RX_BUF_SIZE
;

375 
u¨tC⁄fig
.
tx
.
maxBufSize
 = 
HAL_UART_TX_BUF_SIZE
;

376 
u¨tC⁄fig
.
idÀTimeout
 = 
HAL_UART_IDLE_TIMEOUT
;

377 
u¨tC⁄fig
.
ötE«bÀ
 = 
TRUE
;

378 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
≈U¨tCback
;

379 
	`HÆUARTO≥n
(
HAL_UART_PORT
, &
u¨tC⁄fig
);

380 
	`MT_U¨tRegi°îTaskID
(
z≈TaskId
);

387 
	`≈InôNV
();

388 
	`MT_Inô
();

389 #i‡
deföed
 
TC_LINKKEY_JOIN


390 
z˛_TaskID
 = 
z≈TaskId
;

392 #i‡
LQI_ADJUST


393 
	`ZMacLqiAdju°Mode
(
LQI_ADJ_MODE1
);

395 #i‡
deföed
 
CC2531ZNP


396 ()
	`oßl_pwrmgr_èsk_°©e
(
z≈TaskId
, 
PWRMGR_HOLD
);

398 
	}
}

416 
	$≈InôNV
()

419 
	`oßl_nv_ôem_öô
(
ZNP_NV_APP_ITEM_1
, 2, 
NULL
);

420 
	`oßl_nv_ôem_öô
(
ZNP_NV_APP_ITEM_2
, 2, 
NULL
);

421 
	`oßl_nv_ôem_öô
(
ZNP_NV_APP_ITEM_3
, 2, 
NULL
);

422 
	`oßl_nv_ôem_öô
(
ZNP_NV_APP_ITEM_4
, 2, 
NULL
);

425 
	`oßl_nv_ôem_öô
(
ZNP_NV_APP_ITEM_5
, 16, 
NULL
);

426 
	`oßl_nv_ôem_öô
(
ZNP_NV_APP_ITEM_6
, 16, 
NULL
);

427 
	}
}

446 
	$≈U¨tCback
(
uöt8
 
p‹t
, uöt8 
evít
)

448 
evít
) {

449 
HAL_UART_RX_FULL
:

450 
HAL_UART_RX_ABOUT_FULL
:

451 
HAL_UART_RX_TIMEOUT
:

452 
	`MT_U¨tPro˚ssZToﬁD©a
(
p‹t
, 
z≈TaskId
);

455 
HAL_UART_TX_EMPTY
:

456 
	`oßl_£t_evít
(
z≈TaskId
, 
ZNP_UART_TX_READY_EVENT
);

462 
	}
}

480 
	$≈U¨tTxRódy
()

482 
uöt16
 
≈U¨tTxC¡
 = 0;

483 
uöt8
 *
≈U¨tTxMsg
 = 
NULL
;

484 
uöt8
 *
pMsg
 = 
NULL
;

486 i‡(!
≈U¨tTxMsg
)

488 i‡((
pMsg
 = 
≈U¨tTxMsg
 = 
	`oßl_msg_dequeue
(&
≈TxQueue
)))

493 
≈U¨tTxC¡
 = 
pMsg
[1] + 
MT_UART_FRAME_OVHD
 + 
MT_RPC_FRAME_HDR_SZ
;

497 i‡(
≈U¨tTxMsg
)

499 
uöt16
 
Àn
 = 
	`HÆUARTWrôe
(
HAL_UART_PORT
, 
pMsg
, 
≈U¨tTxC¡
);

500 
≈U¨tTxC¡
 -
Àn
;

502 i‡(
≈U¨tTxC¡
 == 0)

504 
	`oßl_msg_dóŒoˇã
(
≈U¨tTxMsg
);

505 
≈U¨tTxMsg
 = 
NULL
;

509 
pMsg
 +
Àn
;

512 
	}
}

531 
uöt8
* 
	$≈MtU¨tAŒoc
(
uöt8
 
cmd0
, uöt8 
Àn
)

533 
uöt8
 *
p
;

535 i‡((
p
 = 
	`oßl_msg_Æloˇã
(
Àn
 + 
MT_RPC_FRAME_HDR_SZ
 + 
MT_UART_FRAME_OVHD
)Ë!
NULL
)

537  
p
 + 1;

540  
NULL
;

541 
	}
}

559 
	$≈MtU¨tSíd
(
uöt8
 *
pBuf
)

561 
uöt8
 
Àn
 = 
pBuf
[0] + 
MT_RPC_FRAME_HDR_SZ
;

563 
pBuf
[
Àn
] = 
	`MT_U¨tCÆcFCS
(pBuf,Üen);

564 
pBuf
--;

565 
pBuf
[0] = 
MT_UART_SOF
;

567 
	`oßl_msg_íqueue
(&
≈TxQueue
, 
pBuf
);

568 
	`oßl_£t_evít
(
z≈TaskId
, 
ZNP_UART_TX_READY_EVENT
);

569 
	}
}

571 #i‡!
deföed
 
CC2531ZNP


589 
uöt8
* 
	$≈MtSpiAŒoc
(
uöt8
 
cmd0
, uöt8 
Àn
)

591 i‡((
cmd0
 & 
MT_RPC_CMD_TYPE_MASK
Ë=
MT_RPC_CMD_SRSP
)

593  
	`≈SpiSR•AŒoc
(
Àn
);

597  
	`≈SpiAReqAŒoc
(
Àn
);

599 
	}
}

617 
	$≈MtSpiSíd
(
uöt8
 *
pBuf
)

619 i‡((
pBuf
[1] & 
MT_RPC_CMD_TYPE_MASK
Ë=
MT_RPC_CMD_SRSP
)

621 
	`≈SpiSR•Ródy
(
pBuf
);

625 
	`oßl_msg_íqueue
(&
≈TxQueue
, 
pBuf
);

626 
	`≈SpiAReqRódy
();

628 
	}
}

647 
uöt8
* 
	$≈SpiPﬁlCÆlback
()

649  
	`oßl_msg_dequeue
(&
≈TxQueue
);

650 
	}
}

668 
boﬁ
 
	$≈SpiRódyCÆlback
()

670  !
	`OSAL_MSG_Q_EMPTY
(&
≈TxQueue
);

671 
	}
}

	@Projects/zstack/ZNP/Source/znp_app.h

39 #i‚de‡
NP_APP_H


40 
	#NP_APP_H


	)

42 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"MT.h
"

59 
	#ZNP_SPI_RX_AREQ_EVENT
 0x4000

	)

60 
	#ZNP_SPI_RX_SREQ_EVENT
 0x2000

	)

61 
	#ZNP_UART_TX_READY_EVENT
 0x1000

	)

62 
	#ZNP_PWRMGR_CONSERVE_EVENT
 0x0080

	)

64 
	#ZNP_SECONDARY_INIT_EVENT
 
MT_SECONDARY_INIT_EVENT


	)

66 #i‡!
deföed
 
ZNP_PWRMGR_CONSERVE_DELAY


67 
	#ZNP_PWRMGR_CONSERVE_DELAY
 10

	)

80 
	#z≈TaskId
 
MT_TaskID


	)

87 
z≈Inô
(
uöt8
 
èskId
);

88 
uöt16
 
z≈EvítLo›
(
uöt8
 
èskId
, uöt16 
evíts
);

89 
z≈Te°RF
();

94 #ifde‡
__˝lu•lus


	@Projects/zstack/ZNP/Source/znp_spi.h

41 #i‚de‡
ZNP_SPI_H


42 
	#ZNP_SPI_H


	)

44 #ifde‡
__˝lu•lus


53 
	~"hÆ_bﬂrd.h
"

54 
	~"MT_RPC.h
"

87 
≈SpiInô
();

106 
≈SpiM⁄ô‹
();

124 
≈SpiRxI§
();

142 
≈SpiTxI§
();

161 
uöt8
 *
≈SpiPﬁlCÆlback
();

179 
boﬁ
 
≈SpiRódyCÆlback
();

199 
uöt8
 *
≈SpiSR•AŒoc
(uöt8 
Àn
);

217 
uöt8
 *
≈SpiAReqAŒoc
(uöt8 
Àn
);

235 
≈SpiSR•Ródy
(
uöt8
 *
pBuf
);

254 
≈SpiAReqRódy
();

273 
≈SpiAReqCom∂ëe
();

292 
uöt8
 *
≈SpiGëReqBuf
();

310 
≈SpiMrdyI§
();

328 
boﬁ
 
≈SpiIdÀ
();

333 #ifde‡
__˝lu•lus


	@
1
.
0
367
15907
Components/hal/common/hal_assert.c
Components/hal/common/hal_drivers.c
Components/hal/include/hal_adc.h
Components/hal/include/hal_assert.h
Components/hal/include/hal_board.h
Components/hal/include/hal_ccm.h
Components/hal/include/hal_defs.h
Components/hal/include/hal_drivers.h
Components/hal/include/hal_flash.h
Components/hal/include/hal_key.h
Components/hal/include/hal_lcd.h
Components/hal/include/hal_led.h
Components/hal/include/hal_sleep.h
Components/hal/include/hal_timer.h
Components/hal/include/hal_uart.h
Components/hal/target/CC2530EB/_hal_uart_dma.c
Components/hal/target/CC2530EB/_hal_uart_isr.c
Components/hal/target/CC2530EB/hal_adc.c
Components/hal/target/CC2530EB/hal_aes.h
Components/hal/target/CC2530EB/hal_board_cfg.h
Components/hal/target/CC2530EB/hal_dma.c
Components/hal/target/CC2530EB/hal_dma.h
Components/hal/target/CC2530EB/hal_flash.c
Components/hal/target/CC2530EB/hal_key.c
Components/hal/target/CC2530EB/hal_lcd.c
Components/hal/target/CC2530EB/hal_lcd_default.c
Components/hal/target/CC2530EB/hal_led.c
Components/hal/target/CC2530EB/hal_mac_cfg.h
Components/hal/target/CC2530EB/hal_mcu.h
Components/hal/target/CC2530EB/hal_oad.c
Components/hal/target/CC2530EB/hal_oad.h
Components/hal/target/CC2530EB/hal_ota.c
Components/hal/target/CC2530EB/hal_ota.h
Components/hal/target/CC2530EB/hal_sleep.c
Components/hal/target/CC2530EB/hal_startup.c
Components/hal/target/CC2530EB/hal_timer.c
Components/hal/target/CC2530EB/hal_types.h
Components/hal/target/CC2530EB/hal_uart.c
Components/hal/target/CC2530USB/_hal_uart_usb.c
Components/hal/target/CC2530USB/hal_adc.c
Components/hal/target/CC2530USB/hal_aes.h
Components/hal/target/CC2530USB/hal_board_cfg.h
Components/hal/target/CC2530USB/hal_dma.c
Components/hal/target/CC2530USB/hal_dma.h
Components/hal/target/CC2530USB/hal_flash.c
Components/hal/target/CC2530USB/hal_key.c
Components/hal/target/CC2530USB/hal_lcd.c
Components/hal/target/CC2530USB/hal_led.c
Components/hal/target/CC2530USB/hal_mac_cfg.h
Components/hal/target/CC2530USB/hal_mcu.h
Components/hal/target/CC2530USB/hal_oad.c
Components/hal/target/CC2530USB/hal_oad.h
Components/hal/target/CC2530USB/hal_sleep.c
Components/hal/target/CC2530USB/hal_startup.c
Components/hal/target/CC2530USB/hal_timer.c
Components/hal/target/CC2530USB/hal_types.h
Components/hal/target/CC2530USB/hal_uart.c
Components/hal/target/CC2530USB/usb/class_cdc/usb_cdc.h
Components/hal/target/CC2530USB/usb/class_cdc/usb_cdc_hooks.c
Components/hal/target/CC2530USB/usb/class_cdc/usb_cdc_hooks.h
Components/hal/target/CC2530USB/usb/class_cdc/usb_firmware_library_config.c
Components/hal/target/CC2530USB/usb/class_cdc/usb_firmware_library_config.h
Components/hal/target/CC2530USB/usb/class_cdc/usb_firmware_library_headers.h
Components/hal/target/CC2530USB/usb/library/cc2531/usb_board_cfg.h
Components/hal/target/CC2530USB/usb/library/cc2531/usb_interrupt.c
Components/hal/target/CC2530USB/usb/library/cc2531/usb_suspend.c
Components/hal/target/CC2530USB/usb/library/usb_descriptor.h
Components/hal/target/CC2530USB/usb/library/usb_descriptor_parser.c
Components/hal/target/CC2530USB/usb/library/usb_descriptor_parser.h
Components/hal/target/CC2530USB/usb/library/usb_framework.c
Components/hal/target/CC2530USB/usb/library/usb_framework.h
Components/hal/target/CC2530USB/usb/library/usb_framework_structs.h
Components/hal/target/CC2530USB/usb/library/usb_interrupt.h
Components/hal/target/CC2530USB/usb/library/usb_reg.h
Components/hal/target/CC2530USB/usb/library/usb_standard_requests.c
Components/hal/target/CC2530USB/usb/library/usb_standard_requests.h
Components/hal/target/CC2530USB/usb/library/usb_suspend.h
Components/hal/target/CC2530ZNP/_hal_uart_dma.c
Components/hal/target/CC2530ZNP/_hal_uart_isr.c
Components/hal/target/CC2530ZNP/hal_adc.c
Components/hal/target/CC2530ZNP/hal_aes.h
Components/hal/target/CC2530ZNP/hal_board_cfg.h
Components/hal/target/CC2530ZNP/hal_dma.c
Components/hal/target/CC2530ZNP/hal_dma.h
Components/hal/target/CC2530ZNP/hal_flash.c
Components/hal/target/CC2530ZNP/hal_key.c
Components/hal/target/CC2530ZNP/hal_lcd.c
Components/hal/target/CC2530ZNP/hal_led.c
Components/hal/target/CC2530ZNP/hal_mac_cfg.h
Components/hal/target/CC2530ZNP/hal_mcu.h
Components/hal/target/CC2530ZNP/hal_oad.c
Components/hal/target/CC2530ZNP/hal_oad.h
Components/hal/target/CC2530ZNP/hal_sleep.c
Components/hal/target/CC2530ZNP/hal_spi.c
Components/hal/target/CC2530ZNP/hal_spi.h
Components/hal/target/CC2530ZNP/hal_startup.c
Components/hal/target/CC2530ZNP/hal_timer.c
Components/hal/target/CC2530ZNP/hal_types.h
Components/hal/target/CC2530ZNP/hal_uart.c
Components/mac/high_level/mac_cfg.c
Components/mac/high_level/mac_data.h
Components/mac/high_level/mac_high_level.h
Components/mac/high_level/mac_main.h
Components/mac/high_level/mac_pib.c
Components/mac/high_level/mac_pib.h
Components/mac/high_level/mac_security.h
Components/mac/high_level/mac_spec.h
Components/mac/include/mac_api.h
Components/mac/low_level/srf04/mac_assert.h
Components/mac/low_level/srf04/mac_autopend.c
Components/mac/low_level/srf04/mac_autopend.h
Components/mac/low_level/srf04/mac_backoff_timer.c
Components/mac/low_level/srf04/mac_backoff_timer.h
Components/mac/low_level/srf04/mac_low_level.c
Components/mac/low_level/srf04/mac_low_level.h
Components/mac/low_level/srf04/mac_radio.c
Components/mac/low_level/srf04/mac_radio.h
Components/mac/low_level/srf04/mac_rx.c
Components/mac/low_level/srf04/mac_rx.h
Components/mac/low_level/srf04/mac_rx_onoff.c
Components/mac/low_level/srf04/mac_rx_onoff.h
Components/mac/low_level/srf04/mac_sleep.c
Components/mac/low_level/srf04/mac_sleep.h
Components/mac/low_level/srf04/mac_tx.c
Components/mac/low_level/srf04/mac_tx.h
Components/mac/low_level/srf04/single_chip/mac_csp_tx.c
Components/mac/low_level/srf04/single_chip/mac_csp_tx.h
Components/mac/low_level/srf04/single_chip/mac_mcu.c
Components/mac/low_level/srf04/single_chip/mac_mcu.h
Components/mac/low_level/srf04/single_chip/mac_mem.c
Components/mac/low_level/srf04/single_chip/mac_mem.h
Components/mac/low_level/srf04/single_chip/mac_radio_defs.c
Components/mac/low_level/srf04/single_chip/mac_radio_defs.h
Components/mac/low_level/srf04/single_chip/mac_rffrontend.c
Components/mt/DebugTrace.c
Components/mt/DebugTrace.h
Components/mt/MT.c
Components/mt/MT.h
Components/mt/MT_AF.c
Components/mt/MT_AF.h
Components/mt/MT_APP.c
Components/mt/MT_APP.h
Components/mt/MT_DEBUG.c
Components/mt/MT_DEBUG.h
Components/mt/MT_MAC.c
Components/mt/MT_MAC.h
Components/mt/MT_NWK.c
Components/mt/MT_NWK.h
Components/mt/MT_OTA.c
Components/mt/MT_OTA.h
Components/mt/MT_RPC.h
Components/mt/MT_SAPI.c
Components/mt/MT_SAPI.h
Components/mt/MT_SYS.c
Components/mt/MT_SYS.h
Components/mt/MT_TASK.c
Components/mt/MT_TASK.h
Components/mt/MT_UART.c
Components/mt/MT_UART.h
Components/mt/MT_UTIL.c
Components/mt/MT_UTIL.h
Components/mt/MT_VERSION.c
Components/mt/MT_VERSION.h
Components/mt/MT_ZDO.c
Components/mt/MT_ZDO.h
Components/osal/common/OSAL.c
Components/osal/common/OSAL_Clock.c
Components/osal/common/OSAL_Memory.c
Components/osal/common/OSAL_PwrMgr.c
Components/osal/common/OSAL_Timers.c
Components/osal/include/OSAL.h
Components/osal/include/OSAL_Clock.h
Components/osal/include/OSAL_Memory.h
Components/osal/include/OSAL_Nv.h
Components/osal/include/OSAL_PwrMgr.h
Components/osal/include/OSAL_Tasks.h
Components/osal/include/OSAL_Timers.h
Components/osal/include/ZComDef.h
Components/osal/include/comdef.h
Components/osal/mcu/cc2530/OSAL_Nv.c
Components/services/saddr/saddr.c
Components/services/saddr/saddr.h
Components/services/sdata/sdata.h
Components/stack/af/AF.c
Components/stack/af/AF.h
Components/stack/nwk/APS.h
Components/stack/nwk/APSMEDE.h
Components/stack/nwk/AddrMgr.h
Components/stack/nwk/AssocList.h
Components/stack/nwk/BindingTable.c
Components/stack/nwk/BindingTable.h
Components/stack/nwk/NLMEDE.h
Components/stack/nwk/aps_frag.h
Components/stack/nwk/aps_groups.h
Components/stack/nwk/aps_util.h
Components/stack/nwk/nwk.h
Components/stack/nwk/nwk_bufs.h
Components/stack/nwk/nwk_globals.c
Components/stack/nwk/nwk_globals.h
Components/stack/nwk/nwk_util.h
Components/stack/nwk/reflecttrack.h
Components/stack/nwk/rtg.h
Components/stack/nwk/stub_aps.c
Components/stack/nwk/stub_aps.h
Components/stack/sapi/sapi.c
Components/stack/sapi/sapi.h
Components/stack/sec/eccapi.h
Components/stack/sec/ssp.h
Components/stack/sec/ssp_hash.h
Components/stack/sys/ZGlobals.c
Components/stack/sys/ZGlobals.h
Components/stack/zcl/zcl.c
Components/stack/zcl/zcl.h
Components/stack/zcl/zcl_cc.c
Components/stack/zcl/zcl_cc.h
Components/stack/zcl/zcl_cert_data.c
Components/stack/zcl/zcl_closures.c
Components/stack/zcl/zcl_closures.h
Components/stack/zcl/zcl_general.c
Components/stack/zcl/zcl_general.h
Components/stack/zcl/zcl_gp.h
Components/stack/zcl/zcl_hvac.c
Components/stack/zcl/zcl_hvac.h
Components/stack/zcl/zcl_key_establish.c
Components/stack/zcl/zcl_key_establish.h
Components/stack/zcl/zcl_lighting.c
Components/stack/zcl/zcl_lighting.h
Components/stack/zcl/zcl_ms.c
Components/stack/zcl/zcl_ms.h
Components/stack/zcl/zcl_ota.c
Components/stack/zcl/zcl_ota.h
Components/stack/zcl/zcl_pi.c
Components/stack/zcl/zcl_pi.h
Components/stack/zcl/zcl_se.c
Components/stack/zcl/zcl_se.h
Components/stack/zcl/zcl_ss.c
Components/stack/zcl/zcl_ss.h
Components/stack/zdo/ZDApp.c
Components/stack/zdo/ZDApp.h
Components/stack/zdo/ZDConfig.c
Components/stack/zdo/ZDConfig.h
Components/stack/zdo/ZDNwkMgr.c
Components/stack/zdo/ZDNwkMgr.h
Components/stack/zdo/ZDObject.c
Components/stack/zdo/ZDObject.h
Components/stack/zdo/ZDProfile.c
Components/stack/zdo/ZDProfile.h
Components/stack/zdo/ZDSecMgr.c
Components/stack/zdo/ZDSecMgr.h
Components/zmac/ZMAC.h
Components/zmac/f8w/zmac.c
Components/zmac/f8w/zmac_cb.c
Components/zmac/f8w/zmac_internal.h
Projects/zstack/HomeAutomation/SampleLight/Source/OSAL_SampleLight.c
Projects/zstack/HomeAutomation/SampleLight/Source/zcl_samplelight.c
Projects/zstack/HomeAutomation/SampleLight/Source/zcl_samplelight.h
Projects/zstack/HomeAutomation/SampleLight/Source/zcl_samplelight_data.c
Projects/zstack/HomeAutomation/SampleSwitch/Source/OSAL_SampleSw.c
Projects/zstack/HomeAutomation/SampleSwitch/Source/zcl_samplesw.c
Projects/zstack/HomeAutomation/SampleSwitch/Source/zcl_samplesw.h
Projects/zstack/HomeAutomation/SampleSwitch/Source/zcl_samplesw_data.c
Projects/zstack/HomeAutomation/SampleSwitchOta/Source/OSAL_SampleSwOta.c
Projects/zstack/HomeAutomation/SampleSwitchOta/Source/zcl_sampleswota.c
Projects/zstack/HomeAutomation/SampleSwitchOta/Source/zcl_sampleswota.h
Projects/zstack/HomeAutomation/SampleSwitchOta/Source/zcl_sampleswota_data.c
Projects/zstack/HomeAutomation/Source/zcl_ha.c
Projects/zstack/HomeAutomation/Source/zcl_ha.h
Projects/zstack/OTA/Dongle/Source/OSAL_OTA_Dongle.c
Projects/zstack/OTA/Dongle/Source/OTA_Dongle.c
Projects/zstack/OTA/Dongle/Source/OTA_Dongle.h
Projects/zstack/OTA/Dongle/Source/OTA_Dongle_data.c
Projects/zstack/OTA/Source/ota_common.c
Projects/zstack/OTA/Source/ota_common.h
Projects/zstack/OTA/Source/ota_signature.c
Projects/zstack/OTA/Source/ota_signature.h
Projects/zstack/SE/SampleApp/Source/ESP/OSAL_ESP.c
Projects/zstack/SE/SampleApp/Source/ESP/esp.c
Projects/zstack/SE/SampleApp/Source/ESP/esp.h
Projects/zstack/SE/SampleApp/Source/ESP/esp_data.c
Projects/zstack/SE/SampleApp/Source/IPD/OSAL_ipd.c
Projects/zstack/SE/SampleApp/Source/IPD/ipd.c
Projects/zstack/SE/SampleApp/Source/IPD/ipd.h
Projects/zstack/SE/SampleApp/Source/IPD/ipd_data.c
Projects/zstack/SE/SampleApp/Source/IPD_OTA/OSAL_ipd.c
Projects/zstack/SE/SampleApp/Source/IPD_OTA/ipd.c
Projects/zstack/SE/SampleApp/Source/IPD_OTA/ipd.h
Projects/zstack/SE/SampleApp/Source/IPD_OTA/ipd_data.c
Projects/zstack/SE/SampleApp/Source/LoadControl/OSAL_LoadControl.c
Projects/zstack/SE/SampleApp/Source/LoadControl/loadcontrol.c
Projects/zstack/SE/SampleApp/Source/LoadControl/loadcontrol.h
Projects/zstack/SE/SampleApp/Source/LoadControl/loadcontrol_data.c
Projects/zstack/SE/SampleApp/Source/PCT/OSAL_pct.c
Projects/zstack/SE/SampleApp/Source/PCT/pct.c
Projects/zstack/SE/SampleApp/Source/PCT/pct.h
Projects/zstack/SE/SampleApp/Source/PCT/pct_data.c
Projects/zstack/SE/SampleApp/Source/RangeExt/OSAL_RangeExt.c
Projects/zstack/SE/SampleApp/Source/RangeExt/rangeext.c
Projects/zstack/SE/SampleApp/Source/RangeExt/rangeext.h
Projects/zstack/SE/SampleApp/Source/RangeExt/rangeext_data.c
Projects/zstack/SE/SampleApp/Source/SimpleMeter/OSAL_SimpleMeter.c
Projects/zstack/SE/SampleApp/Source/SimpleMeter/simplemeter.c
Projects/zstack/SE/SampleApp/Source/SimpleMeter/simplemeter.h
Projects/zstack/SE/SampleApp/Source/SimpleMeter/simplemeter_data.c
Projects/zstack/SE/Source/se.c
Projects/zstack/SE/Source/se.h
Projects/zstack/Samples/GenericApp/Source/GenericApp.c
Projects/zstack/Samples/GenericApp/Source/GenericApp.h
Projects/zstack/Samples/GenericApp/Source/OSAL_GenericApp.c
Projects/zstack/Samples/SampleApp/CC2530DB/Source/SampleAppHw.c
Projects/zstack/Samples/SampleApp/Source/OSAL_SampleApp.c
Projects/zstack/Samples/SampleApp/Source/SampleApp.c
Projects/zstack/Samples/SampleApp/Source/SampleApp.h
Projects/zstack/Samples/SampleApp/Source/SampleAppHw.h
Projects/zstack/Samples/SimpleApp/Source/SimpleApp.h
Projects/zstack/Samples/SimpleApp/Source/SimpleCollector.c
Projects/zstack/Samples/SimpleApp/Source/SimpleController.c
Projects/zstack/Samples/SimpleApp/Source/SimpleSensor.c
Projects/zstack/Samples/SimpleApp/Source/SimpleSwitch.c
Projects/zstack/Samples/TestRoutine/Source/OSAL_TestRoutine.c
Projects/zstack/Samples/TestRoutine/Source/TestRoutine.c
Projects/zstack/Samples/TestRoutine/Source/TestRoutine.h
Projects/zstack/Samples/TestRoutine__/Source/OSAL_TestRoutine.c
Projects/zstack/Samples/TestRoutine__/Source/TestRoutine.c
Projects/zstack/Samples/TestRoutine__/Source/TestRoutine.h
Projects/zstack/Utilities/BootLoad/CC2530/source/_hal_uart_isr.c
Projects/zstack/Utilities/BootLoad/CC2530/source/sb_main.c
Projects/zstack/Utilities/BootLoad/CC2530/source/sb_main.h
Projects/zstack/Utilities/BootLoad/CC2530ZNP/source/_hal_uart_isr.c
Projects/zstack/Utilities/BootLoad/CC2530ZNP/source/_hal_uart_spi.c
Projects/zstack/Utilities/BootLoad/CC2530ZNP/source/sb_main.c
Projects/zstack/Utilities/BootLoad/CC2530ZNP/source/sb_main.h
Projects/zstack/Utilities/BootLoad/CC2531/source/sb_main.c
Projects/zstack/Utilities/BootLoad/CC2531/source/sb_main.h
Projects/zstack/Utilities/BootLoad/Source/sb_exec.c
Projects/zstack/Utilities/BootLoad/Source/sb_exec.h
Projects/zstack/Utilities/OAD/Source/MT_TASK.c
Projects/zstack/Utilities/OAD/Source/MT_UART.c
Projects/zstack/Utilities/OAD/Source/MT_X.c
Projects/zstack/Utilities/OAD/Source/MT_X.h
Projects/zstack/Utilities/OAD/Source/OSAL_Dongle.c
Projects/zstack/Utilities/OAD/Source/oad_app.c
Projects/zstack/Utilities/OAD/Source/oad_app.h
Projects/zstack/Utilities/OAD/Source/oad_preamble.h
Projects/zstack/Utilities/SerialApp/Source/OSAL_SerialApp.c
Projects/zstack/Utilities/SerialApp/Source/SerialApp.c
Projects/zstack/Utilities/SerialApp/Source/SerialApp.h
Projects/zstack/Utilities/Transmit/Source/OSAL_TransmitApp.c
Projects/zstack/Utilities/Transmit/Source/TransmitApp.c
Projects/zstack/Utilities/Transmit/Source/TransmitApp.h
Projects/zstack/ZBA/CCServer/Source/OSAL_CCServer.c
Projects/zstack/ZBA/CCServer/Source/zcl_ccserver.c
Projects/zstack/ZBA/CCServer/Source/zcl_ccserver.h
Projects/zstack/ZBA/CCServer/Source/zcl_ccserver_data.c
Projects/zstack/ZBA/Source/zba.c
Projects/zstack/ZBA/Source/zba.h
Projects/zstack/ZMain/TI2530DB/OnBoard.c
Projects/zstack/ZMain/TI2530DB/OnBoard.h
Projects/zstack/ZMain/TI2530DB/ZMain.c
Projects/zstack/ZMain/TI2530ZNP/OnBoard.c
Projects/zstack/ZMain/TI2530ZNP/OnBoard.h
Projects/zstack/ZMain/TI2530ZNP/ZMain.c
Projects/zstack/ZNP/CC253x/Source/znp_soc.c
Projects/zstack/ZNP/CC253x/Source/znp_spi.c
Projects/zstack/ZNP/Source/OSAL_ZNP.c
Projects/zstack/ZNP/Source/znp_app.c
Projects/zstack/ZNP/Source/znp_app.h
Projects/zstack/ZNP/Source/znp_spi.h
